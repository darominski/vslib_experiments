// This header file was auto-generated using cheby
// User: jonas
// Date: 2025-07-16 16:15:38.513191
// Source map: mb_top.cheby
// Command used: /usr/local/bin/cheby --gen-cpp=cpp/mb_top.hpp --cpp-json=cpp/mb_top.json -i mb_top.cheby
//
// It is meant to be used in conjunction with the MemMap++ library (mmpp):
//     https://gitlab.cern.ch/czrounba/mmpp
//
// ************************************************************

#pragma once

#include <mmpp.h>


namespace ipCores
{
    using namespace mmpp;

    //! ::Top
    //!
    //! Top level address space mapping for FGC4 Main Board FPGA
    struct Top : MemModule<132112, uint32_t, attributes::ByteOrdering::little, attributes::WordOrdering::big>
    {
        // No version information provided.

        using MemModule::MemModule;

        //! Make this memory item point to another memory location
        //!
        //! @param new_base the new base address in memory that the memory item will map to
        void relocate(uint8_t* new_base) noexcept
        {
            // Construct new item in place using the new base address
            *this = Top(new_base);
        }

        struct XilSpi : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;
        };

        struct XilI2c : MemSubmodule<Top, 512>
        {

            using MemSubmodule::MemSubmodule;
        };

        struct AdcCalint : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Ctrl : MemReg<AdcCalint, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{base() + 0};   //!< Reset the ADC interface
                MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                    base() + 0};   //!< Start the ADC conversion and transmission
                //! Reset the external ADC (hardware-dependent feature)
                MemField<Ctrl, 2, 2, attributes::AccessMode::RW, bool> hwReset{base() + 0};
            };

            struct Config : MemReg<AdcCalint, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                    base() + 0};   //!< Clock polarity as defined in SPI spec.
                MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                    base() + 0};   //!< Clock phase as defined in SPI spec.
                //! Polarity of CNV output. 0 - negative, 1 - positive
                MemField<Config, 2, 2, attributes::AccessMode::RW, bool> cnvPol{base() + 0};
                MemField<Config, 3, 3, attributes::AccessMode::RW, bool> cnvWithCs{
                    base() + 0};   //!< CNV output is also CS output
                //! Polarity of BUSY input. 0 - negative, 1 - positive
                MemField<Config, 4, 4, attributes::AccessMode::RW, bool> busyPol{base() + 0};
                //! Source of BUSY feedback. 0x0 - dedicated BUSY signal, 0x1 -
                //! multiplexed with SDO data pin, 0x2 - internal programmable
                //! timer
                MemField<Config, 5, 6, attributes::AccessMode::RW, uint8_t> busySrc{base() + 0};
                //! Number of SPI clock cycles that controller should wait in
                //! BUSY state. Valid only if BUSY source is set to internal
                //! timer
                MemField<Config, 7, 12, attributes::AccessMode::RW, uint8_t> busyTime{base() + 0};
                //! SPI clock is active (1) or disabled (0) in conversion/BUSY
                //! state
                MemField<Config, 13, 13, attributes::AccessMode::RW, bool>    clkActInConv{base() + 0};
                MemField<Config, 16, 20, attributes::AccessMode::RW, uint8_t> dataWidth{
                    base() + 0};   //!< ADC data width
                //! The adc can either be controlled via a SW register (0) or
                //! via a gateware port (1). Control means starting the adc.
                MemField<Config, 21, 21, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
            };

            struct Status : MemReg<AdcCalint, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                //! Number of active data in ports (hardcoded at compile time)
                MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> dinPorts{base() + 0};
                MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                    base() + 0};   //!< Core is busy sending data
                //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                //! clk_prescaler
                MemField<Status, 16, 20, attributes::AccessMode::RO, uint8_t> clkPrescaler{base() + 0};
            };

            struct DataArrayItem : MemSubmodule<AdcCalint, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Value value{base() + 0};   //!< (no comment provided)
            };
            using DataArray = MemArray<AdcCalint, DataArrayItem, 16, 4>;

            Ctrl      ctrl{base() + 0};     //!< Control register
            Config    config{base() + 4};   //!< ADC interface configuration
            Status    status{base() + 8};   //!< Status register
            DataArray data{base() + 64};    //!< Data received from ADC
        };

        struct AdcUncalintArrayItem : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Adc : MemSubmodule<AdcUncalintArrayItem, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Adc, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{
                        base() + 0};   //!< Reset the ADC interface
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                        base() + 0};   //!< Start the ADC conversion and transmission
                    //! Reset the external ADC (hardware-dependent feature)
                    MemField<Ctrl, 2, 2, attributes::AccessMode::RW, bool> hwReset{base() + 0};
                };

                struct Config : MemReg<Adc, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                        base() + 0};   //!< Clock polarity as defined in SPI spec.
                    MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                        base() + 0};   //!< Clock phase as defined in SPI spec.
                    //! Polarity of CNV output. 0 - negative, 1 - positive
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> cnvPol{base() + 0};
                    MemField<Config, 3, 3, attributes::AccessMode::RW, bool> cnvWithCs{
                        base() + 0};   //!< CNV output is also CS output
                    //! Polarity of BUSY input. 0 - negative, 1 - positive
                    MemField<Config, 4, 4, attributes::AccessMode::RW, bool> busyPol{base() + 0};
                    //! Source of BUSY feedback. 0x0 - dedicated BUSY signal, 0x1 -
                    //! multiplexed with SDO data pin, 0x2 - internal programmable
                    //! timer
                    MemField<Config, 5, 6, attributes::AccessMode::RW, uint8_t> busySrc{base() + 0};
                    //! Number of SPI clock cycles that controller should wait in
                    //! BUSY state. Valid only if BUSY source is set to internal
                    //! timer
                    MemField<Config, 7, 12, attributes::AccessMode::RW, uint8_t> busyTime{base() + 0};
                    //! SPI clock is active (1) or disabled (0) in conversion/BUSY
                    //! state
                    MemField<Config, 13, 13, attributes::AccessMode::RW, bool>    clkActInConv{base() + 0};
                    MemField<Config, 16, 20, attributes::AccessMode::RW, uint8_t> dataWidth{
                        base() + 0};   //!< ADC data width
                    //! The adc can either be controlled via a SW register (0) or
                    //! via a gateware port (1). Control means starting the adc.
                    MemField<Config, 21, 21, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
                };

                struct Status : MemReg<Adc, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                    //! Number of active data in ports (hardcoded at compile time)
                    MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> dinPorts{base() + 0};
                    MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                        base() + 0};   //!< Core is busy sending data
                    //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                    //! clk_prescaler
                    MemField<Status, 16, 20, attributes::AccessMode::RO, uint8_t> clkPrescaler{base() + 0};
                };

                struct DataArrayItem : MemSubmodule<Adc, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Value value{base() + 0};   //!< (no comment provided)
                };
                using DataArray = MemArray<Adc, DataArrayItem, 16, 4>;

                Ctrl      ctrl{base() + 0};     //!< Control register
                Config    config{base() + 4};   //!< ADC interface configuration
                Status    status{base() + 8};   //!< Status register
                DataArray data{base() + 64};    //!< Data received from ADC
            };

            Adc adc{base() + 0};   //!< ADC controller
        };
        using AdcUncalintArray = MemArray<Top, AdcUncalintArrayItem, 6, 128>;

        struct DacIntArrayItem : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Dac : MemSubmodule<DacIntArrayItem, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Dac, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{
                        base() + 0};   //!< Reset the DAC interface
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                        base() + 0};   //!< Start the DAC transmission
                };

                struct Config : MemReg<Dac, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                        base() + 0};   //!< Clock polarity as defined in SPI spec.
                    MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                        base() + 0};   //!< Clock phase as defined in SPI spec.
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> msbFirst{
                        base() + 0};   //!< Bit order - transfer MSB as first or last bit
                    MemField<Config, 3, 5, attributes::AccessMode::RW, uint8_t> prePad{
                        base() + 0};   //!< Number of '0's pre-padded before the data
                    MemField<Config, 6, 8, attributes::AccessMode::RW, uint8_t> postPad{
                        base() + 0};   //!< Number of '0's post-padded after the data
                    MemField<Config, 9, 13, attributes::AccessMode::RW, uint8_t> dataWidth{
                        base() + 0};   //!< DAC data width
                    //! Dead time between end of SPI transfer and end of whole DAC
                    //! control cycle
                    MemField<Config, 14, 19, attributes::AccessMode::RW, uint8_t> deadTime{base() + 0};
                    //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                    //! clk_prescaler
                    MemField<Config, 20, 25, attributes::AccessMode::RW, uint8_t> clkPres{base() + 0};
                    //! Number of additional clock cycles to generate after
                    //! transmission
                    MemField<Config, 26, 29, attributes::AccessMode::RW, uint8_t> fixAddClkCyc{base() + 0};
                    //! The dac can either be controlled via a SW register (0) or
                    //! via a gateware ports (1). Control means starting the dac and
                    //! giving data to the dac.
                    MemField<Config, 30, 30, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
                };

                struct Status : MemReg<Dac, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                    //! Number of active data out ports (hardcoded at compile time)
                    MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> doutPorts{base() + 0};
                    MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                        base() + 0};   //!< Core is busy sending data
                };

                struct DataArrayItem : MemSubmodule<Dac, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::WO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Value value{base() + 0};   //!< (no comment provided)
                };
                using DataArray = MemArray<Dac, DataArrayItem, 16, 4>;

                Ctrl      ctrl{base() + 0};     //!< Control register
                Config    config{base() + 4};   //!< DAC interface configuration
                Status    status{base() + 8};   //!< Status register
                DataArray data{base() + 64};    //!< Data to be sent to DAC
            };

            Dac dac{base() + 0};   //!< DAC controller
        };
        using DacIntArray = MemArray<Top, DacIntArrayItem, 2, 128>;

        struct SignalBank : MemSubmodule<Top, 2048>
        {

            using MemSubmodule::MemSubmodule;

            struct DigI0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigI1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigIndI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ContactI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct OpticalI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ProtI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigOcO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ContactO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct OpticalO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinMaxLim0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinMaxLim1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RmsLim0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RmsLim1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RegArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<RegArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir reg register
            };
            using RegArray = MemArray<SignalBank, RegArrayItem, 62, 4>;

            struct VloopArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<VloopArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir vloop register
            };
            using VloopArray = MemArray<SignalBank, VloopArrayItem, 62, 4>;

            struct RawArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Raw : MemReg<RawArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Raw raw{base() + 0};   //!< Raw ADC values
            };
            using RawArray = MemArray<SignalBank, RawArrayItem, 62, 4>;

            struct MmArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<MmArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir register
            };
            using MmArray = MemArray<SignalBank, MmArrayItem, 62, 4>;

            struct MsArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<MsArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir register
            };
            using MsArray = MemArray<SignalBank, MsArrayItem, 62, 4>;

            DigI0      digI0{base() + 0};          //!< DIG_I bank 0. 28-bit.
            DigI1      digI1{base() + 4};          //!< DIG_I bank 1. 28-bit.
            DigIndI    digIndI{base() + 8};        //!< DIG_IND_I. 16-bit.
            ContactI   contactI{base() + 12};      //!< CONTACT_I. 8-bit.
            OpticalI   opticalI{base() + 16};      //!< OPTICAL_I. 6-bit.
            ProtI      protI{base() + 20};         //!< PROT_I. 3-bit or 4-bit.
            DigO       digO{base() + 24};          //!< DIG_O. 28-bit.
            DigOcO     digOcO{base() + 28};        //!< DIG_OC_O. 24-bit.
            ContactO   contactO{base() + 32};      //!< CONTACT_O. 6-bit.
            OpticalO   opticalO{base() + 36};      //!< OPTICAL_O. 6-bit.
            MinMaxLim0 minMaxLim0{base() + 112};   //!< MIN_MAX_LIM bank 0. 32-bit.
            MinMaxLim1 minMaxLim1{base() + 116};   //!< MIN_MAX_LIM bank 1. 32-bit.
            RmsLim0    rmsLim0{base() + 120};      //!< RMS_LIM bank 0. 32-bit.
            RmsLim1    rmsLim1{base() + 124};      //!< RMS_LIM bank 1. 32-bit.
            RegArray   reg{base() + 256};          //!< The 62 reg fir values
            VloopArray vloop{base() + 512};        //!< The 62 vloop fir values
            RawArray   raw{base() + 768};          //!< The 62 values coming directly from the ADCs
            MmArray    mm{base() + 1024};          //!< The 62 min/max fir values
            MsArray    ms{base() + 1280};          //!< The 62 ms fir values
        };

        struct AnalogFir : MemSubmodule<Top, 16384>
        {

            using MemSubmodule::MemSubmodule;

            struct ChannelArrayItem : MemSubmodule<AnalogFir, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct RFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct VFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct MmFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct Limit : MemSubmodule<ChannelArrayItem, 16>
                {

                    using MemSubmodule::MemSubmodule;

                    struct MaxLimit : MemReg<Limit, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MinLimit : MemReg<Limit, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct FilterLength : MemReg<Limit, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    MaxLimit maxLimit{base() + 0};   //!< Max limit
                    MinLimit minLimit{base() + 4};   //!< Min limit
                    //! The filter length. only the lower 5 bits are used. Possible
                    //! values are 1 to 31.
                    FilterLength filterLength{base() + 8};
                };

                RFir  rFir{base() + 0};     //!< (no comment provided)
                VFir  vFir{base() + 32};    //!< (no comment provided)
                MmFir mmFir{base() + 64};   //!< (no comment provided)
                Limit limit{base() + 96};   //!< (no comment provided)
            };
            using ChannelArray = MemArray<AnalogFir, ChannelArrayItem, 62, 128>;

            struct MmTrip : MemReg<AnalogFir, 8, attributes::AccessMode::RO, uint64_t>
            {
                using MemReg::MemReg;
            };

            ChannelArray channel{base() + 0};     //!< The 62 channels
            MmTrip       mmTrip{base() + 8192};   //!< Min/Max limiter trip register
        };

        struct AnalogMs : MemSubmodule<Top, 2048>
        {

            using MemSubmodule::MemSubmodule;

            struct ChannelArrayItem : MemSubmodule<AnalogMs, 32>
            {

                using MemSubmodule::MemSubmodule;

                struct Ms : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    // ************************************************************

                    enum class MsAlgorithm : uint8_t
                    {
                        notInUse      = 0,   //!< ADC_nn_MS will always be zero
                        accSlidingAvg = 1,   //!< Algorithm 1, Accumulator and sliding average
                        firstOrderIir = 2,   //!< Algorithm 2, First-order IIR filter
                        reserved      = 3,   //!< Not in use. ADC_nn_MS will always be zero
                    };

                    // ************************************************************

                    struct Algorithms : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;

                        MemField<Algorithms, 0, 1, attributes::AccessMode::RW, MsAlgorithm> alg{
                            base() + 0};   //!< See enum `ms_algorithm`.
                    };

                    struct Offset : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct IirA : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct IirB : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MaxLimit : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MinLimit : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct AccLength : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct FirMask : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Algorithms algorithms{base() + 0};   //!< For selecting the different MS algorithms
                    Offset     offset{base() + 4};       //!< The offset. 24 bits are used
                    IirA       iirA{base() + 8};         //!< The a factor of the iir.
                    IirB       iirB{base() + 12};        //!< The b factor of the iir.
                    //! A trip is generated if the filtered signal exceeds this
                    //! limit.
                    MaxLimit maxLimit{base() + 16};
                    //! A trip is generated if the filtered signal falls below this
                    //! limit.
                    MinLimit  minLimit{base() + 20};
                    AccLength accLength{base() + 24};   //!< The accumulator length. 15 bits are used
                    //! The software can select the length of the circular buffer by
                    //! setting this register register to a bit mask for the FIR
                    //! filter pointer. fir_mask = BOXCAR_LENGTH - 1. 12 bits are
                    //! used.
                    FirMask firMask{base() + 28};
                };

                Ms ms{base() + 0};   //!< (no comment provided)
            };
            using ChannelArray = MemArray<AnalogMs, ChannelArrayItem, 62, 32>;

            ChannelArray channel{base() + 0};   //!< The 62 ADCs
        };

        struct Dig : MemSubmodule<Top, 16384>
        {

            using MemSubmodule::MemSubmodule;

            struct DigI0 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<DigI0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<DigI0, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<DigI0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<DigI0, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigI0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigI0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct DigI1 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<DigI1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<DigI1, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<DigI1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<DigI1, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigI1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigI1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct DigIndI : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<DigIndI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<DigIndI, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<DigIndI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<DigIndI, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigIndI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigIndI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct ContactI : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<ContactI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<ContactI, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<ContactI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<ContactI, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<ContactI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<ContactI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct OpticalI : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<OpticalI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<OpticalI, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<OpticalI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<OpticalI, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<OpticalI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<OpticalI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct MinMaxLim0 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<MinMaxLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<MinMaxLim0, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<MinMaxLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<MinMaxLim0, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<MinMaxLim0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<MinMaxLim0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct MinMaxLim1 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<MinMaxLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<MinMaxLim1, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<MinMaxLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<MinMaxLim1, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<MinMaxLim1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<MinMaxLim1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct RmsLim0 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<RmsLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<RmsLim0, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<RmsLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<RmsLim0, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<RmsLim0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<RmsLim0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            struct RmsLim1 : MemSubmodule<Dig, 1024>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FastFilterScArrayItem : MemSubmodule<RmsLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FastFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FastFilterScArray = MemArray<RmsLim1, FastFilterScArrayItem, 32, 4>;

                struct SlowFilterScArrayItem : MemSubmodule<RmsLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<SlowFilterScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using SlowFilterScArray = MemArray<RmsLim1, SlowFilterScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<RmsLim1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<RmsLim1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the fast filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FastFilterScArray fastFilterSc{base() + 128};
                //! The length of the slow filter in system clock periods. A
                //! length of 0 disables the filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out. The slow filter is
                //! applied to the output of the fast filter.
                SlowFilterScArray slowFilterSc{base() + 256};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 512};
            };

            DigI0      digI0{base() + 0};           //!< (no comment provided)
            DigI1      digI1{base() + 1024};        //!< (no comment provided)
            DigIndI    digIndI{base() + 2048};      //!< (no comment provided)
            ContactI   contactI{base() + 3072};     //!< (no comment provided)
            OpticalI   opticalI{base() + 4096};     //!< (no comment provided)
            MinMaxLim0 minMaxLim0{base() + 5120};   //!< (no comment provided)
            MinMaxLim1 minMaxLim1{base() + 6144};   //!< (no comment provided)
            RmsLim0    rmsLim0{base() + 7168};      //!< (no comment provided)
            RmsLim1    rmsLim1{base() + 8192};      //!< (no comment provided)
        };

        struct PwmArrayItem : MemSubmodule<Top, 64>
        {

            using MemSubmodule::MemSubmodule;

            struct Pwm : MemSubmodule<PwmArrayItem, 64>
            {

                using MemSubmodule::MemSubmodule;

                // ************************************************************

                enum class UpdateType : uint8_t
                {
                    zero       = 0,   //!< Update when the carrier is equal to 0.
                    period     = 1,   //!< Update when the carrier is equal to period.
                    zeroPeriod = 2,   //!< Update at zero and period.
                    immediate  = 3,
                };

                // ************************************************************

                struct Ctrl : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    //! Enable the PWM. There are two ways to start the PWM:
                    //! 1.
                    //! First, the SW writes '1' to this register. The PWM then
                    //! starts when it receives the GW start signal.
                    //! 2. The GW start
                    //! signal is used first to synchronize the PWM carrier. Then,
                    //! SW writes '1' to this register. The SW enable is
                    //! synchronized with the carrier, and the PWM starts the next
                    //! time the carrier reaches 0.
                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> enable{base() + 0};
                    //! Reset the PWM to the default state. Register values are not
                    //! reset.
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> reset{base() + 0};
                };

                struct CarrierBits : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DeadtimeBits : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Config : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 1, attributes::AccessMode::RW, UpdateType> updateType{
                        base() + 0};   //!< See enum `update_type`.
                    //! Enable the minimum on/off-time protection on the PWM
                    //! signals. If a violation is detected, the PWM goes to a fail-
                    //! safe state (both PWM signals go to low).
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> enablePwmCheck{base() + 0};
                    //! Enable the shoot-through protection. If a shoot-through is
                    //! detected (both PWM outputs '1'), the PWM goes to a fail-safe
                    //! state. Not yet implemented.
                    MemField<Config, 3, 3, attributes::AccessMode::RW, bool> enableStCheck{base() + 0};
                    //! Enable the safe range check of the modulation index.
                    MemField<Config, 4, 4, attributes::AccessMode::RW, bool> enableValueCheck{base() + 0};
                    MemField<Config, 5, 5, attributes::AccessMode::RW, bool> bypassDeadtime{
                        base() + 0};   //!< Disable the deadtime.
                    MemField<Config, 6, 6, attributes::AccessMode::RW, bool> disableA{
                        base() + 0};   //!< Individually disable PWMA.
                    MemField<Config, 7, 7, attributes::AccessMode::RW, bool> disableB{
                        base() + 0};   //!< Individually disable PWMB.
                    MemField<Config, 8, 8, attributes::AccessMode::RW, bool> invert{
                        base() + 0};   //!< Invert both PWM outputs.
                    //! If this is set to 0, cc1 is always set to cc0. Set this to 1
                    //! to set cc0 and cc1 independently.
                    MemField<Config, 9, 9, attributes::AccessMode::RW, bool> decoupleCc1{base() + 0};
                };

                struct Cc0Sc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Cc1Sc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct CtrhSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DeadtimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct ExtendedDeadtimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MinSwitchTimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MinModIdxSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MaxModIdxSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct NumberCcErrors : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                //! Control signals. These signals are intended to be used
                //! during runtime.
                Ctrl ctrl{base() + 0};
                //! The number of available carrier bits. Static during runtime.
                CarrierBits carrierBits{base() + 4};
                //! The number of available deadtime bits. Static during
                //! runtime.
                DeadtimeBits deadtimeBits{base() + 8};
                //! Configuration registers are meant to be set once during
                //! startup (by the configurator).
                Config config{base() + 12};
                Cc0Sc  cc0Sc{base() + 16};   //!< cc0 in system clocks.
                Cc1Sc  cc1Sc{base() + 20};   //!< cc1 in system clocks.
                //! The maximum carrier value in system clocks. The PWM counts
                //! up to ctrh and then counts down to zero again in one PWM
                //! cycle.
                CtrhSc ctrhSc{base() + 24};
                //! Amount of deadtime in system clocks. This is a safety
                //! parameter and must not be changed during runtime. Deadtime
                //! is implemented similar to the TMS320 DSP
                DeadtimeSc deadtimeSc{base() + 28};
                //! Extended deadtime in system clocks. Is used by some (LPC)
                //! converters to be more energy efficient.
                ExtendedDeadtimeSc extendedDeadtimeSc{base() + 32};
                //! Minimum switch time in system clocks. Deadtime is applied
                //! after the minimum switch time, which means that
                //! (min_switch_time_sc - deadtime) must be greater or equal to
                //! the minimum switch time the converter can handle. For
                //! example, if the converter requires a min_switch_time of 1000
                //! sc and a deadtime of 200 sc, then min_switch_time_sc must be
                //! 1200. Because of the (possibly) inverted PWMB signal, the
                //! minimum on/off time must be symmetrical, which is why are no
                //! separate min_on_time and min_off_time.
                MinSwitchTimeSc minSwitchTimeSc{base() + 36};
                //! Minimum safe modulation index. This applies to both cc0 and
                //! cc1.
                MinModIdxSc minModIdxSc{base() + 40};
                //! Maximum safe modulation index. This applies to both cc0 and
                //! cc1.
                MaxModIdxSc maxModIdxSc{base() + 44};
                //! Counts the number of times the value check clipped cc
                //! values. Saturates at 0xFFFFFFFF.
                NumberCcErrors numberCcErrors{base() + 48};
            };

            Pwm pwm{base() + 0};   //!< PWM controller
        };
        using PwmArray = MemArray<Top, PwmArrayItem, 12, 64>;

        struct Ddma : MemSubmodule<Top, 4096>
        {

            using MemSubmodule::MemSubmodule;

            struct TrigPl2psLow : MemReg<Ddma, 4, attributes::AccessMode::WO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct TrigPl2psHigh : MemReg<Ddma, 4, attributes::AccessMode::WO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct TrigPs2plLow : MemReg<Ddma, 4, attributes::AccessMode::WO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct TrigPs2plHigh : MemReg<Ddma, 4, attributes::AccessMode::WO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct TdPl2psArrayItem : MemSubmodule<Ddma, 12>
            {

                using MemSubmodule::MemSubmodule;

                struct SrcAddr : MemReg<TdPl2psArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DestAddr : MemReg<TdPl2psArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Wtt : MemReg<TdPl2psArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Wtt, 0, 15, attributes::AccessMode::RW, uint16_t> value{
                        base() + 0};   //!< Words-to-transfer (one word is 32 bits)
                };

                SrcAddr  srcAddr{base() + 0};    //!< Source address
                DestAddr destAddr{base() + 4};   //!< Destination address. HAS TO BE 64-BYTE ALIGNED!
                Wtt      wtt{base() + 8};        //!< (no comment provided)
            };
            using TdPl2psArray = MemArray<Ddma, TdPl2psArrayItem, 64, 12>;

            struct TdPs2plArrayItem : MemSubmodule<Ddma, 12>
            {

                using MemSubmodule::MemSubmodule;

                struct SrcAddr : MemReg<TdPs2plArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DestAddr : MemReg<TdPs2plArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Wtt : MemReg<TdPs2plArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Wtt, 0, 15, attributes::AccessMode::RW, uint16_t> value{
                        base() + 0};   //!< Words-to-transfer (one word is 32 bits)
                };

                SrcAddr  srcAddr{base() + 0};    //!< Source address. HAS TO BE 64-BYTE ALIGNED!
                DestAddr destAddr{base() + 4};   //!< Destination address
                Wtt      wtt{base() + 8};        //!< (no comment provided)
            };
            using TdPs2plArray = MemArray<Ddma, TdPs2plArrayItem, 64, 12>;

            struct ErrorsArrayItem : MemSubmodule<Ddma, 8>
            {

                using MemSubmodule::MemSubmodule;

                struct Acp : MemReg<ErrorsArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Acp, 0, 7, attributes::AccessMode::RO, uint8_t> rSlverr{
                        base() + 0};   //!< Counts decode errors on the ACP read channel.
                    MemField<Acp, 8, 15, attributes::AccessMode::RO, uint8_t> rDecerr{
                        base() + 0};   //!< Counts slave errors on the ACP read channel.
                    MemField<Acp, 16, 23, attributes::AccessMode::RO, uint8_t> wSlverr{
                        base() + 0};   //!< Counts decode errors on the ACP write channel.
                    MemField<Acp, 24, 31, attributes::AccessMode::RO, uint8_t> wDecerr{
                        base() + 0};   //!< Counts slave errors on the ACP write channel.
                };

                struct Axil : MemReg<ErrorsArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    //! Counts decode errors on the AXI lite read interface.
                    MemField<Axil, 0, 7, attributes::AccessMode::RO, uint8_t> rSlverr{base() + 0};
                    //! Counts slave errors on the AXI lite read interface.
                    MemField<Axil, 8, 15, attributes::AccessMode::RO, uint8_t> rDecerr{base() + 0};
                    //! Counts decode errors on the AXI lite write interface.
                    MemField<Axil, 16, 23, attributes::AccessMode::RO, uint8_t> wSlverr{base() + 0};
                    //! Counts slave errors on the AXI lite write interface.
                    MemField<Axil, 24, 31, attributes::AccessMode::RO, uint8_t> wDecerr{base() + 0};
                };

                //! Error counter of the ACP interface. These saturate at 255
                Acp acp{base() + 0};
                //! Error counter of the AXI lite read interface. These saturate
                //! at 255
                Axil axil{base() + 4};
            };
            using ErrorsArray = MemArray<Ddma, ErrorsArrayItem, 64, 8>;

            struct NumAwid : MemReg<Ddma, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                //! The number of AWIDs that will be cycled through when writing
                //! to the ACP port.
                MemField<NumAwid, 0, 4, attributes::AccessMode::RW, uint8_t> value{base() + 0};
            };

            struct NumChannels : MemReg<Ddma, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            //! Trigger register for the pl to ps direction. Each bit
            //! corresponds to a trigger. When set, the trigger is
            //! scheduled. Lower 32 bits.
            TrigPl2psLow trigPl2psLow{base() + 0};
            //! Trigger register for the pl to ps direction. Each bit
            //! corresponds to a trigger. When set, the trigger is
            //! scheduled. Upper 32 bits.
            TrigPl2psHigh trigPl2psHigh{base() + 4};
            //! Trigger register for the ps to pl direction. Each bit
            //! corresponds to a trigger. When set, the trigger is
            //! scheduled. Lower 32 bits.
            TrigPs2plLow trigPs2plLow{base() + 8};
            //! Trigger register for the ps to pl direction. Each bit
            //! corresponds to a trigger. When set, the trigger is
            //! scheduled. Upper 32 bits.
            TrigPs2plHigh trigPs2plHigh{base() + 12};
            TdPl2psArray  tdPl2ps{base() + 1024};       //!< (no comment provided)
            TdPs2plArray  tdPs2pl{base() + 2048};       //!< (no comment provided)
            ErrorsArray   errors{base() + 3072};        //!< (no comment provided)
            NumAwid       numAwid{base() + 3584};       //!< (no comment provided)
            NumChannels   numChannels{base() + 3588};   //!< (no comment provided)
        };

        struct SyncTime : MemSubmodule<Top, 16>
        {

            using MemSubmodule::MemSubmodule;

            struct S : MemReg<SyncTime, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Sc : MemReg<SyncTime, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct UtcS : MemReg<SyncTime, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct UtcNs : MemReg<SyncTime, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            S s{base() + 0};   //!< The seconds part of the sync time.
            //! The system clock periods part of the sync time. The period
            //! is 5 ns. Only the lower 28 bits are used.
            Sc    sc{base() + 4};
            UtcS  utcS{base() + 8};     //!< The seconds part of UTC time coming from PS.
            UtcNs utcNs{base() + 12};   //!< The nanoseconds part of UTC time coming from PS.
        };

        struct SyncTrigArrayItem : MemSubmodule<Top, 16>
        {

            using MemSubmodule::MemSubmodule;

            struct Stg : MemSubmodule<SyncTrigArrayItem, 16>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> periodic{
                        base() + 0};   //!< When set, STG will generate periodic triggers
                    //! When set, STG will resynchronize when SYNC_RUN is set again
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> resync{base() + 0};
                };

                struct DelaySc : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct PeriodSc : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Ctrl ctrl{base() + 0};   //!< Control register
                //! Delay register. The delay is in system clock periods.
                DelaySc delaySc{base() + 4};
                //! Period register. The period is in system clock periods. Must
                //! be 2 at minimum.
                PeriodSc periodSc{base() + 8};
            };

            Stg stg{base() + 0};   //!< Synced Trigger Generator
        };
        using SyncTrigArray = MemArray<Top, SyncTrigArrayItem, 29, 16>;

        struct SyncUart : MemSubmodule<Top, 32>
        {

            using MemSubmodule::MemSubmodule;

            struct Ctrl : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                //! Normally, the UART data is updated when the firing time is
                //! reached. To set the initial data, this register is used.
                MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> setTxData{base() + 0};
            };

            struct Config : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Config, 0, 0, attributes::AccessMode::RW, bool> enParity{
                    base() + 0};   //!< (no comment provided)
                //! The number of idle symbols between two UART frames. An idle
                //! symbol has the same duration as a normal UART bit. Maximum
                //! is 127.
                MemField<Config, 1, 7, attributes::AccessMode::RW, uint8_t> interFrameGap{base() + 0};
            };

            struct UartSendTimeNs : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ScPerUartBit : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<ScPerUartBit, 0, 19, attributes::AccessMode::RW, uint32_t> val{
                    base() + 0};   //!< (no comment provided)
            };

            struct UartData : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<UartData, 0, 7, attributes::AccessMode::RW, uint8_t> val{
                    base() + 0};   //!< (no comment provided)
            };

            struct FiringTimeS : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct FiringTimeNs : MemReg<SyncUart, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Magic : MemReg<SyncUart, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            Ctrl   ctrl{base() + 0};     //!< (no comment provided)
            Config config{base() + 4};   //!< (no comment provided)
            //! The time it takes to send one whole UART packet. Includes
            //! start and stop bits. This is used to avoid collisions
            //! between periodically and time-triggered packets.
            UartSendTimeNs uartSendTimeNs{base() + 8};
            //! The time it takes to send one UART bit in system clocks.
            //! This is the inverse of the baud rate.
            ScPerUartBit scPerUartBit{base() + 12};
            UartData     uartData{base() + 16};       //!< (no comment provided)
            FiringTimeS  firingTimeS{base() + 20};    //!< (no comment provided)
            FiringTimeNs firingTimeNs{base() + 24};   //!< (no comment provided)
            Magic        magic{base() + 28};          //!< (no comment provided)
        };

        struct PwmBank : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Cc0ArrayItem : MemSubmodule<PwmBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Value : MemReg<Cc0ArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Value value{base() + 0};   //!< cc0 in system clocks.
            };
            using Cc0Array = MemArray<PwmBank, Cc0ArrayItem, 12, 4>;

            struct Cc1ArrayItem : MemSubmodule<PwmBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Value : MemReg<Cc1ArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Value value{base() + 0};   //!< cc1 in system clocks.
            };
            using Cc1Array = MemArray<PwmBank, Cc1ArrayItem, 12, 4>;

            Cc0Array cc0{base() + 0};    //!< (no comment provided)
            Cc1Array cc1{base() + 64};   //!< (no comment provided)
        };

        struct Scratchpad : MemSubmodule<Top, 4096>
        {

            using MemSubmodule::MemSubmodule;

            struct Reg : MemReg<MemArrayItem, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };
            using MemArray = MemArray<Scratchpad, Reg, 1024, 4>;

            MemArray mem{base() + 0};   //!< (no comment provided)
        };

        struct PwmVrefHeater : MemSubmodule<Top, 64>
        {

            using MemSubmodule::MemSubmodule;

            // ************************************************************

            enum class UpdateType : uint8_t
            {
                zero       = 0,   //!< Update when the carrier is equal to 0.
                period     = 1,   //!< Update when the carrier is equal to period.
                zeroPeriod = 2,   //!< Update at zero and period.
                immediate  = 3,
            };

            // ************************************************************

            struct Ctrl : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                //! Enable the PWM. There are two ways to start the PWM:
                //! 1.
                //! First, the SW writes '1' to this register. The PWM then
                //! starts when it receives the GW start signal.
                //! 2. The GW start
                //! signal is used first to synchronize the PWM carrier. Then,
                //! SW writes '1' to this register. The SW enable is
                //! synchronized with the carrier, and the PWM starts the next
                //! time the carrier reaches 0.
                MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> enable{base() + 0};
                //! Reset the PWM to the default state. Register values are not
                //! reset.
                MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> reset{base() + 0};
            };

            struct CarrierBits : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DeadtimeBits : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Config : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Config, 0, 1, attributes::AccessMode::RW, UpdateType> updateType{
                    base() + 0};   //!< See enum `update_type`.
                //! Enable the minimum on/off-time protection on the PWM
                //! signals. If a violation is detected, the PWM goes to a fail-
                //! safe state (both PWM signals go to low).
                MemField<Config, 2, 2, attributes::AccessMode::RW, bool> enablePwmCheck{base() + 0};
                //! Enable the shoot-through protection. If a shoot-through is
                //! detected (both PWM outputs '1'), the PWM goes to a fail-safe
                //! state. Not yet implemented.
                MemField<Config, 3, 3, attributes::AccessMode::RW, bool> enableStCheck{base() + 0};
                //! Enable the safe range check of the modulation index.
                MemField<Config, 4, 4, attributes::AccessMode::RW, bool> enableValueCheck{base() + 0};
                MemField<Config, 5, 5, attributes::AccessMode::RW, bool> bypassDeadtime{
                    base() + 0};   //!< Disable the deadtime.
                MemField<Config, 6, 6, attributes::AccessMode::RW, bool> disableA{
                    base() + 0};   //!< Individually disable PWMA.
                MemField<Config, 7, 7, attributes::AccessMode::RW, bool> disableB{
                    base() + 0};   //!< Individually disable PWMB.
                MemField<Config, 8, 8, attributes::AccessMode::RW, bool> invert{
                    base() + 0};   //!< Invert both PWM outputs.
                //! If this is set to 0, cc1 is always set to cc0. Set this to 1
                //! to set cc0 and cc1 independently.
                MemField<Config, 9, 9, attributes::AccessMode::RW, bool> decoupleCc1{base() + 0};
            };

            struct Cc0Sc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Cc1Sc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct CtrhSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DeadtimeSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ExtendedDeadtimeSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinSwitchTimeSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinModIdxSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MaxModIdxSc : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct NumberCcErrors : MemReg<PwmVrefHeater, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            //! Control signals. These signals are intended to be used
            //! during runtime.
            Ctrl ctrl{base() + 0};
            //! The number of available carrier bits. Static during runtime.
            CarrierBits carrierBits{base() + 4};
            //! The number of available deadtime bits. Static during
            //! runtime.
            DeadtimeBits deadtimeBits{base() + 8};
            //! Configuration registers are meant to be set once during
            //! startup (by the configurator).
            Config config{base() + 12};
            Cc0Sc  cc0Sc{base() + 16};   //!< cc0 in system clocks.
            Cc1Sc  cc1Sc{base() + 20};   //!< cc1 in system clocks.
            //! The maximum carrier value in system clocks. The PWM counts
            //! up to ctrh and then counts down to zero again in one PWM
            //! cycle.
            CtrhSc ctrhSc{base() + 24};
            //! Amount of deadtime in system clocks. This is a safety
            //! parameter and must not be changed during runtime. Deadtime
            //! is implemented similar to the TMS320 DSP
            DeadtimeSc deadtimeSc{base() + 28};
            //! Extended deadtime in system clocks. Is used by some (LPC)
            //! converters to be more energy efficient.
            ExtendedDeadtimeSc extendedDeadtimeSc{base() + 32};
            //! Minimum switch time in system clocks. Deadtime is applied
            //! after the minimum switch time, which means that
            //! (min_switch_time_sc - deadtime) must be greater or equal to
            //! the minimum switch time the converter can handle. For
            //! example, if the converter requires a min_switch_time of 1000
            //! sc and a deadtime of 200 sc, then min_switch_time_sc must be
            //! 1200. Because of the (possibly) inverted PWMB signal, the
            //! minimum on/off time must be symmetrical, which is why are no
            //! separate min_on_time and min_off_time.
            MinSwitchTimeSc minSwitchTimeSc{base() + 36};
            //! Minimum safe modulation index. This applies to both cc0 and
            //! cc1.
            MinModIdxSc minModIdxSc{base() + 40};
            //! Maximum safe modulation index. This applies to both cc0 and
            //! cc1.
            MaxModIdxSc maxModIdxSc{base() + 44};
            //! Counts the number of times the value check clipped cc
            //! values. Saturates at 0xFFFFFFFF.
            NumberCcErrors numberCcErrors{base() + 48};
        };

        struct EventLog : MemSubmodule<Top, 512>
        {

            using MemSubmodule::MemSubmodule;

            struct Status : MemReg<EventLog, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;

                //! One or more entries were lost between the previous and this
                //! entry
                MemField<Status, 0, 0, attributes::AccessMode::RO, bool> entryLost{base() + 0};
                MemField<Status, 1, 1, attributes::AccessMode::RO, bool> entryValid{base() + 0};   //!< Entry is valid
                MemField<Status, 16, 23, attributes::AccessMode::RO, uint8_t> typeIndex{
                    base() + 0};   //!< Type index of this entry
                MemField<Status, 24, 31, attributes::AccessMode::RO, uint8_t> bankNumber{
                    base() + 0};   //!< Bank number of this entry
            };

            struct TimestampS : MemReg<EventLog, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct TimestampUs : MemReg<EventLog, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Data : MemReg<EventLog, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct FifoDataCount : MemReg<EventLog, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MasksArrayItem : MemSubmodule<EventLog, 8>
            {

                using MemSubmodule::MemSubmodule;

                struct Re : MemReg<MasksArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Fe : MemReg<MasksArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Re re{base() + 0};   //!< (no comment provided)
                Fe fe{base() + 4};   //!< (no comment provided)
            };
            using MasksArray = MemArray<EventLog, MasksArrayItem, 32, 8>;

            //! This register contains the flags, type index and bank number
            Status        status{base() + 0};
            TimestampS    timestampS{base() + 4};       //!< Seconds timestamp of this entry
            TimestampUs   timestampUs{base() + 8};      //!< Microseconds timestamp of this entry
            Data          data{base() + 12};            //!< The snapshot of the bank of signals
            FifoDataCount fifoDataCount{base() + 16};   //!< The number of elements in the FIFO.
            //! \ Rising-edge and falling-edge masks. Set high to disable
            //! logging of a certain bit of the input data. xx_mask(i)(j)
            //! corresponds to the j-th bit of the i-th bank =>
            //! data_i(i)(j). For FGC4, the banks and the order of banks can
            //! be seen in WP07.
            MasksArray masks{base() + 256};
        };

        struct FreqWatchdog : MemSubmodule<Top, 16>
        {

            using MemSubmodule::MemSubmodule;

            struct Alive : MemReg<FreqWatchdog, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinPeriodSc : MemReg<FreqWatchdog, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MaxPeriodSc : MemReg<FreqWatchdog, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            //! Writing any value to this register resets the watchdog
            //! counter.
            Alive alive{base() + 0};
            //! The minimum period between two writes to the `alive`-
            //! register in system clocks.
            MinPeriodSc minPeriodSc{base() + 4};
            //! The maximum period between two writes to the `alive`-
            //! register in system clocks.
            MaxPeriodSc maxPeriodSc{base() + 8};
        };

        XilSpi           xilSpi{base() + 58368};        //!< Xilinx SPI controller
        XilI2c           xilI2c{base() + 58880};        //!< Xilinx I2C controller
        AdcCalint        adcCalint{base() + 59392};     //!< Internal ADC controller (calibrated)
        AdcUncalintArray adcUncalint{base() + 60416};   //!< Internal ADC controllers (uncalibrated)
        DacIntArray      dacInt{base() + 61440};        //!< Internal DAC controllers
        SignalBank       signalBank{base() + 63488};    //!< Analog/Digital signal bank
        AnalogFir        analogFir{base() + 65536};     //!< Analog FIR filter config
        AnalogMs         analogMs{base() + 81920};      //!< Analog Mean Square filter config
        Dig              dig{base() + 98304};           //!< Digital I/O block config
        PwmArray         pwm{base() + 114688};          //!< PWM block
        Ddma             ddma{base() + 118784};         //!< Distribuded DMA controller
        SyncTime         syncTime{base() + 122880};     //!< Central synchronised RUN trigger
        SyncTrigArray    syncTrig{base() + 123392};     //!< Synchronised triggers
        SyncUart         syncUart{base() + 123904};     //!< Sync UART controller
        //! pwmBank
        //!
        //! The PWM bank allows the DMAing of all ccs (counter-compares)
        PwmBank pwmBank{base() + 124032};
        //! scratchpad
        //!
        //! The scratchpad is a 4 KiB memory which can be used to test
        //! the DMA or measure performance etc.
        Scratchpad    scratchpad{base() + 126976};
        PwmVrefHeater pwmVrefHeater{base() + 131072};   //!< The PWM that drives the voltage reference heater
        EventLog      eventLog{base() + 131584};        //!< Event log runnign at 1 MHz
        FreqWatchdog  freqWatchdog{base() + 132096};    //!< Frequency Watchdog
    };
}

// Populate the `mmpp::utils` namespace with functions pertaining to `ipCores`
namespace mmpp::utils
{
    //! Specialization of `to_string` for `ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm`
    template<>
    inline std::string to_string(const ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm& val)
    {
        switch (val)
        {
            case ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::notInUse:
                return "notInUse";
            case ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::accSlidingAvg:
                return "accSlidingAvg";
            case ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::firstOrderIir:
                return "firstOrderIir";
            case ipCores::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::reserved:
                return "reserved";
            default:
                return "<undefined> (raw value: " + to_string(utils::as_unsigned(val)) + ")";
        }
    }

    //! Specialization of `to_string` for `ipCores::Top::PwmArrayItem::Pwm::UpdateType`
    template<>
    inline std::string to_string(const ipCores::Top::PwmArrayItem::Pwm::UpdateType& val)
    {
        switch (val)
        {
            case ipCores::Top::PwmArrayItem::Pwm::UpdateType::zero:
                return "zero";
            case ipCores::Top::PwmArrayItem::Pwm::UpdateType::period:
                return "period";
            case ipCores::Top::PwmArrayItem::Pwm::UpdateType::zeroPeriod:
                return "zeroPeriod";
            case ipCores::Top::PwmArrayItem::Pwm::UpdateType::immediate:
                return "immediate";
            default:
                return "<undefined> (raw value: " + to_string(utils::as_unsigned(val)) + ")";
        }
    }

    //! Specialization of `to_string` for `ipCores::Top::PwmVrefHeater::UpdateType`
    template<>
    inline std::string to_string(const ipCores::Top::PwmVrefHeater::UpdateType& val)
    {
        switch (val)
        {
            case ipCores::Top::PwmVrefHeater::UpdateType::zero:
                return "zero";
            case ipCores::Top::PwmVrefHeater::UpdateType::period:
                return "period";
            case ipCores::Top::PwmVrefHeater::UpdateType::zeroPeriod:
                return "zeroPeriod";
            case ipCores::Top::PwmVrefHeater::UpdateType::immediate:
                return "immediate";
            default:
                return "<undefined> (raw value: " + to_string(utils::as_unsigned(val)) + ")";
        }
    }

    // ************************************************************

    //! Dump the register and fields of `ipCores::Top::XilSpi`
    //!
    //! @param xilSpi A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under xilSpi
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::XilSpi& xilSpi)
    {
        DumpMap res{xilSpi.base()};

        return res;
    }

    //! Dump the register and fields of `ipCores::Top::XilI2c`
    //!
    //! @param xilI2c A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under xilI2c
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::XilI2c& xilI2c)
    {
        DumpMap res{xilI2c.base()};

        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AdcCalint::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AdcCalint::DataArray& data)
    {
        DumpMap res{data.base()};
        res.insert_or_assign("data[0].value", DumpEntry{data[0].value});
        res.insert_or_assign("data[1].value", DumpEntry{data[1].value});
        res.insert_or_assign("data[2].value", DumpEntry{data[2].value});
        res.insert_or_assign("data[3].value", DumpEntry{data[3].value});
        res.insert_or_assign("data[4].value", DumpEntry{data[4].value});
        res.insert_or_assign("data[5].value", DumpEntry{data[5].value});
        res.insert_or_assign("data[6].value", DumpEntry{data[6].value});
        res.insert_or_assign("data[7].value", DumpEntry{data[7].value});
        res.insert_or_assign("data[8].value", DumpEntry{data[8].value});
        res.insert_or_assign("data[9].value", DumpEntry{data[9].value});
        res.insert_or_assign("data[10].value", DumpEntry{data[10].value});
        res.insert_or_assign("data[11].value", DumpEntry{data[11].value});
        res.insert_or_assign("data[12].value", DumpEntry{data[12].value});
        res.insert_or_assign("data[13].value", DumpEntry{data[13].value});
        res.insert_or_assign("data[14].value", DumpEntry{data[14].value});
        res.insert_or_assign("data[15].value", DumpEntry{data[15].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AdcCalint`
    //!
    //! @param adcCalint A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adcCalint
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AdcCalint& adcCalint)
    {
        DumpMap res{adcCalint.base()};
        res.insert_or_assign("adcCalint.ctrl", DumpEntry{adcCalint.ctrl});
        res.insert_or_assign("adcCalint.ctrl.reset", DumpEntry{adcCalint.ctrl.reset});
        res.insert_or_assign("adcCalint.ctrl.start", DumpEntry{adcCalint.ctrl.start});
        res.insert_or_assign("adcCalint.ctrl.hwReset", DumpEntry{adcCalint.ctrl.hwReset});
        res.insert_or_assign("adcCalint.config", DumpEntry{adcCalint.config});
        res.insert_or_assign("adcCalint.config.cpol", DumpEntry{adcCalint.config.cpol});
        res.insert_or_assign("adcCalint.config.cpha", DumpEntry{adcCalint.config.cpha});
        res.insert_or_assign("adcCalint.config.cnvPol", DumpEntry{adcCalint.config.cnvPol});
        res.insert_or_assign("adcCalint.config.cnvWithCs", DumpEntry{adcCalint.config.cnvWithCs});
        res.insert_or_assign("adcCalint.config.busyPol", DumpEntry{adcCalint.config.busyPol});
        res.insert_or_assign("adcCalint.config.busySrc", DumpEntry{adcCalint.config.busySrc});
        res.insert_or_assign("adcCalint.config.busyTime", DumpEntry{adcCalint.config.busyTime});
        res.insert_or_assign("adcCalint.config.clkActInConv", DumpEntry{adcCalint.config.clkActInConv});
        res.insert_or_assign("adcCalint.config.dataWidth", DumpEntry{adcCalint.config.dataWidth});
        res.insert_or_assign("adcCalint.config.gwCtrl", DumpEntry{adcCalint.config.gwCtrl});
        res.insert_or_assign("adcCalint.status", DumpEntry{adcCalint.status});
        res.insert_or_assign("adcCalint.status.apiVer", DumpEntry{adcCalint.status.apiVer});
        res.insert_or_assign("adcCalint.status.dinPorts", DumpEntry{adcCalint.status.dinPorts});
        res.insert_or_assign("adcCalint.status.busy", DumpEntry{adcCalint.status.busy});
        res.insert_or_assign("adcCalint.status.clkPrescaler", DumpEntry{adcCalint.status.clkPrescaler});
        res.insert_or_assign("adcCalint.data[0].value", DumpEntry{adcCalint.data[0].value});
        res.insert_or_assign("adcCalint.data[1].value", DumpEntry{adcCalint.data[1].value});
        res.insert_or_assign("adcCalint.data[2].value", DumpEntry{adcCalint.data[2].value});
        res.insert_or_assign("adcCalint.data[3].value", DumpEntry{adcCalint.data[3].value});
        res.insert_or_assign("adcCalint.data[4].value", DumpEntry{adcCalint.data[4].value});
        res.insert_or_assign("adcCalint.data[5].value", DumpEntry{adcCalint.data[5].value});
        res.insert_or_assign("adcCalint.data[6].value", DumpEntry{adcCalint.data[6].value});
        res.insert_or_assign("adcCalint.data[7].value", DumpEntry{adcCalint.data[7].value});
        res.insert_or_assign("adcCalint.data[8].value", DumpEntry{adcCalint.data[8].value});
        res.insert_or_assign("adcCalint.data[9].value", DumpEntry{adcCalint.data[9].value});
        res.insert_or_assign("adcCalint.data[10].value", DumpEntry{adcCalint.data[10].value});
        res.insert_or_assign("adcCalint.data[11].value", DumpEntry{adcCalint.data[11].value});
        res.insert_or_assign("adcCalint.data[12].value", DumpEntry{adcCalint.data[12].value});
        res.insert_or_assign("adcCalint.data[13].value", DumpEntry{adcCalint.data[13].value});
        res.insert_or_assign("adcCalint.data[14].value", DumpEntry{adcCalint.data[14].value});
        res.insert_or_assign("adcCalint.data[15].value", DumpEntry{adcCalint.data[15].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AdcUncalintArrayItem::Adc::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AdcUncalintArrayItem::Adc::DataArray& data)
    {
        DumpMap res{data.base()};
        res.insert_or_assign("data[0].value", DumpEntry{data[0].value});
        res.insert_or_assign("data[1].value", DumpEntry{data[1].value});
        res.insert_or_assign("data[2].value", DumpEntry{data[2].value});
        res.insert_or_assign("data[3].value", DumpEntry{data[3].value});
        res.insert_or_assign("data[4].value", DumpEntry{data[4].value});
        res.insert_or_assign("data[5].value", DumpEntry{data[5].value});
        res.insert_or_assign("data[6].value", DumpEntry{data[6].value});
        res.insert_or_assign("data[7].value", DumpEntry{data[7].value});
        res.insert_or_assign("data[8].value", DumpEntry{data[8].value});
        res.insert_or_assign("data[9].value", DumpEntry{data[9].value});
        res.insert_or_assign("data[10].value", DumpEntry{data[10].value});
        res.insert_or_assign("data[11].value", DumpEntry{data[11].value});
        res.insert_or_assign("data[12].value", DumpEntry{data[12].value});
        res.insert_or_assign("data[13].value", DumpEntry{data[13].value});
        res.insert_or_assign("data[14].value", DumpEntry{data[14].value});
        res.insert_or_assign("data[15].value", DumpEntry{data[15].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AdcUncalintArrayItem::Adc`
    //!
    //! @param adc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AdcUncalintArrayItem::Adc& adc)
    {
        DumpMap res{adc.base()};
        res.insert_or_assign("adc.ctrl", DumpEntry{adc.ctrl});
        res.insert_or_assign("adc.ctrl.reset", DumpEntry{adc.ctrl.reset});
        res.insert_or_assign("adc.ctrl.start", DumpEntry{adc.ctrl.start});
        res.insert_or_assign("adc.ctrl.hwReset", DumpEntry{adc.ctrl.hwReset});
        res.insert_or_assign("adc.config", DumpEntry{adc.config});
        res.insert_or_assign("adc.config.cpol", DumpEntry{adc.config.cpol});
        res.insert_or_assign("adc.config.cpha", DumpEntry{adc.config.cpha});
        res.insert_or_assign("adc.config.cnvPol", DumpEntry{adc.config.cnvPol});
        res.insert_or_assign("adc.config.cnvWithCs", DumpEntry{adc.config.cnvWithCs});
        res.insert_or_assign("adc.config.busyPol", DumpEntry{adc.config.busyPol});
        res.insert_or_assign("adc.config.busySrc", DumpEntry{adc.config.busySrc});
        res.insert_or_assign("adc.config.busyTime", DumpEntry{adc.config.busyTime});
        res.insert_or_assign("adc.config.clkActInConv", DumpEntry{adc.config.clkActInConv});
        res.insert_or_assign("adc.config.dataWidth", DumpEntry{adc.config.dataWidth});
        res.insert_or_assign("adc.config.gwCtrl", DumpEntry{adc.config.gwCtrl});
        res.insert_or_assign("adc.status", DumpEntry{adc.status});
        res.insert_or_assign("adc.status.apiVer", DumpEntry{adc.status.apiVer});
        res.insert_or_assign("adc.status.dinPorts", DumpEntry{adc.status.dinPorts});
        res.insert_or_assign("adc.status.busy", DumpEntry{adc.status.busy});
        res.insert_or_assign("adc.status.clkPrescaler", DumpEntry{adc.status.clkPrescaler});
        res.insert_or_assign("adc.data[0].value", DumpEntry{adc.data[0].value});
        res.insert_or_assign("adc.data[1].value", DumpEntry{adc.data[1].value});
        res.insert_or_assign("adc.data[2].value", DumpEntry{adc.data[2].value});
        res.insert_or_assign("adc.data[3].value", DumpEntry{adc.data[3].value});
        res.insert_or_assign("adc.data[4].value", DumpEntry{adc.data[4].value});
        res.insert_or_assign("adc.data[5].value", DumpEntry{adc.data[5].value});
        res.insert_or_assign("adc.data[6].value", DumpEntry{adc.data[6].value});
        res.insert_or_assign("adc.data[7].value", DumpEntry{adc.data[7].value});
        res.insert_or_assign("adc.data[8].value", DumpEntry{adc.data[8].value});
        res.insert_or_assign("adc.data[9].value", DumpEntry{adc.data[9].value});
        res.insert_or_assign("adc.data[10].value", DumpEntry{adc.data[10].value});
        res.insert_or_assign("adc.data[11].value", DumpEntry{adc.data[11].value});
        res.insert_or_assign("adc.data[12].value", DumpEntry{adc.data[12].value});
        res.insert_or_assign("adc.data[13].value", DumpEntry{adc.data[13].value});
        res.insert_or_assign("adc.data[14].value", DumpEntry{adc.data[14].value});
        res.insert_or_assign("adc.data[15].value", DumpEntry{adc.data[15].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AdcUncalintArray`
    //!
    //! @param adcUncalint A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adcUncalint
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AdcUncalintArray& adcUncalint)
    {
        DumpMap res{adcUncalint.base()};
        res.insert_or_assign("adcUncalint[0].adc.ctrl", DumpEntry{adcUncalint[0].adc.ctrl});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.reset", DumpEntry{adcUncalint[0].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.start", DumpEntry{adcUncalint[0].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.hwReset", DumpEntry{adcUncalint[0].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[0].adc.config", DumpEntry{adcUncalint[0].adc.config});
        res.insert_or_assign("adcUncalint[0].adc.config.cpol", DumpEntry{adcUncalint[0].adc.config.cpol});
        res.insert_or_assign("adcUncalint[0].adc.config.cpha", DumpEntry{adcUncalint[0].adc.config.cpha});
        res.insert_or_assign("adcUncalint[0].adc.config.cnvPol", DumpEntry{adcUncalint[0].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[0].adc.config.cnvWithCs", DumpEntry{adcUncalint[0].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[0].adc.config.busyPol", DumpEntry{adcUncalint[0].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[0].adc.config.busySrc", DumpEntry{adcUncalint[0].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[0].adc.config.busyTime", DumpEntry{adcUncalint[0].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[0].adc.config.clkActInConv", DumpEntry{adcUncalint[0].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[0].adc.config.dataWidth", DumpEntry{adcUncalint[0].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[0].adc.config.gwCtrl", DumpEntry{adcUncalint[0].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[0].adc.status", DumpEntry{adcUncalint[0].adc.status});
        res.insert_or_assign("adcUncalint[0].adc.status.apiVer", DumpEntry{adcUncalint[0].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[0].adc.status.dinPorts", DumpEntry{adcUncalint[0].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[0].adc.status.busy", DumpEntry{adcUncalint[0].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[0].adc.status.clkPrescaler", DumpEntry{adcUncalint[0].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[0].adc.data[0].value", DumpEntry{adcUncalint[0].adc.data[0].value});
        res.insert_or_assign("adcUncalint[0].adc.data[1].value", DumpEntry{adcUncalint[0].adc.data[1].value});
        res.insert_or_assign("adcUncalint[0].adc.data[2].value", DumpEntry{adcUncalint[0].adc.data[2].value});
        res.insert_or_assign("adcUncalint[0].adc.data[3].value", DumpEntry{adcUncalint[0].adc.data[3].value});
        res.insert_or_assign("adcUncalint[0].adc.data[4].value", DumpEntry{adcUncalint[0].adc.data[4].value});
        res.insert_or_assign("adcUncalint[0].adc.data[5].value", DumpEntry{adcUncalint[0].adc.data[5].value});
        res.insert_or_assign("adcUncalint[0].adc.data[6].value", DumpEntry{adcUncalint[0].adc.data[6].value});
        res.insert_or_assign("adcUncalint[0].adc.data[7].value", DumpEntry{adcUncalint[0].adc.data[7].value});
        res.insert_or_assign("adcUncalint[0].adc.data[8].value", DumpEntry{adcUncalint[0].adc.data[8].value});
        res.insert_or_assign("adcUncalint[0].adc.data[9].value", DumpEntry{adcUncalint[0].adc.data[9].value});
        res.insert_or_assign("adcUncalint[0].adc.data[10].value", DumpEntry{adcUncalint[0].adc.data[10].value});
        res.insert_or_assign("adcUncalint[0].adc.data[11].value", DumpEntry{adcUncalint[0].adc.data[11].value});
        res.insert_or_assign("adcUncalint[0].adc.data[12].value", DumpEntry{adcUncalint[0].adc.data[12].value});
        res.insert_or_assign("adcUncalint[0].adc.data[13].value", DumpEntry{adcUncalint[0].adc.data[13].value});
        res.insert_or_assign("adcUncalint[0].adc.data[14].value", DumpEntry{adcUncalint[0].adc.data[14].value});
        res.insert_or_assign("adcUncalint[0].adc.data[15].value", DumpEntry{adcUncalint[0].adc.data[15].value});
        res.insert_or_assign("adcUncalint[1].adc.ctrl", DumpEntry{adcUncalint[1].adc.ctrl});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.reset", DumpEntry{adcUncalint[1].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.start", DumpEntry{adcUncalint[1].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.hwReset", DumpEntry{adcUncalint[1].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[1].adc.config", DumpEntry{adcUncalint[1].adc.config});
        res.insert_or_assign("adcUncalint[1].adc.config.cpol", DumpEntry{adcUncalint[1].adc.config.cpol});
        res.insert_or_assign("adcUncalint[1].adc.config.cpha", DumpEntry{adcUncalint[1].adc.config.cpha});
        res.insert_or_assign("adcUncalint[1].adc.config.cnvPol", DumpEntry{adcUncalint[1].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[1].adc.config.cnvWithCs", DumpEntry{adcUncalint[1].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[1].adc.config.busyPol", DumpEntry{adcUncalint[1].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[1].adc.config.busySrc", DumpEntry{adcUncalint[1].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[1].adc.config.busyTime", DumpEntry{adcUncalint[1].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[1].adc.config.clkActInConv", DumpEntry{adcUncalint[1].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[1].adc.config.dataWidth", DumpEntry{adcUncalint[1].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[1].adc.config.gwCtrl", DumpEntry{adcUncalint[1].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[1].adc.status", DumpEntry{adcUncalint[1].adc.status});
        res.insert_or_assign("adcUncalint[1].adc.status.apiVer", DumpEntry{adcUncalint[1].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[1].adc.status.dinPorts", DumpEntry{adcUncalint[1].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[1].adc.status.busy", DumpEntry{adcUncalint[1].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[1].adc.status.clkPrescaler", DumpEntry{adcUncalint[1].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[1].adc.data[0].value", DumpEntry{adcUncalint[1].adc.data[0].value});
        res.insert_or_assign("adcUncalint[1].adc.data[1].value", DumpEntry{adcUncalint[1].adc.data[1].value});
        res.insert_or_assign("adcUncalint[1].adc.data[2].value", DumpEntry{adcUncalint[1].adc.data[2].value});
        res.insert_or_assign("adcUncalint[1].adc.data[3].value", DumpEntry{adcUncalint[1].adc.data[3].value});
        res.insert_or_assign("adcUncalint[1].adc.data[4].value", DumpEntry{adcUncalint[1].adc.data[4].value});
        res.insert_or_assign("adcUncalint[1].adc.data[5].value", DumpEntry{adcUncalint[1].adc.data[5].value});
        res.insert_or_assign("adcUncalint[1].adc.data[6].value", DumpEntry{adcUncalint[1].adc.data[6].value});
        res.insert_or_assign("adcUncalint[1].adc.data[7].value", DumpEntry{adcUncalint[1].adc.data[7].value});
        res.insert_or_assign("adcUncalint[1].adc.data[8].value", DumpEntry{adcUncalint[1].adc.data[8].value});
        res.insert_or_assign("adcUncalint[1].adc.data[9].value", DumpEntry{adcUncalint[1].adc.data[9].value});
        res.insert_or_assign("adcUncalint[1].adc.data[10].value", DumpEntry{adcUncalint[1].adc.data[10].value});
        res.insert_or_assign("adcUncalint[1].adc.data[11].value", DumpEntry{adcUncalint[1].adc.data[11].value});
        res.insert_or_assign("adcUncalint[1].adc.data[12].value", DumpEntry{adcUncalint[1].adc.data[12].value});
        res.insert_or_assign("adcUncalint[1].adc.data[13].value", DumpEntry{adcUncalint[1].adc.data[13].value});
        res.insert_or_assign("adcUncalint[1].adc.data[14].value", DumpEntry{adcUncalint[1].adc.data[14].value});
        res.insert_or_assign("adcUncalint[1].adc.data[15].value", DumpEntry{adcUncalint[1].adc.data[15].value});
        res.insert_or_assign("adcUncalint[2].adc.ctrl", DumpEntry{adcUncalint[2].adc.ctrl});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.reset", DumpEntry{adcUncalint[2].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.start", DumpEntry{adcUncalint[2].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.hwReset", DumpEntry{adcUncalint[2].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[2].adc.config", DumpEntry{adcUncalint[2].adc.config});
        res.insert_or_assign("adcUncalint[2].adc.config.cpol", DumpEntry{adcUncalint[2].adc.config.cpol});
        res.insert_or_assign("adcUncalint[2].adc.config.cpha", DumpEntry{adcUncalint[2].adc.config.cpha});
        res.insert_or_assign("adcUncalint[2].adc.config.cnvPol", DumpEntry{adcUncalint[2].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[2].adc.config.cnvWithCs", DumpEntry{adcUncalint[2].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[2].adc.config.busyPol", DumpEntry{adcUncalint[2].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[2].adc.config.busySrc", DumpEntry{adcUncalint[2].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[2].adc.config.busyTime", DumpEntry{adcUncalint[2].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[2].adc.config.clkActInConv", DumpEntry{adcUncalint[2].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[2].adc.config.dataWidth", DumpEntry{adcUncalint[2].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[2].adc.config.gwCtrl", DumpEntry{adcUncalint[2].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[2].adc.status", DumpEntry{adcUncalint[2].adc.status});
        res.insert_or_assign("adcUncalint[2].adc.status.apiVer", DumpEntry{adcUncalint[2].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[2].adc.status.dinPorts", DumpEntry{adcUncalint[2].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[2].adc.status.busy", DumpEntry{adcUncalint[2].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[2].adc.status.clkPrescaler", DumpEntry{adcUncalint[2].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[2].adc.data[0].value", DumpEntry{adcUncalint[2].adc.data[0].value});
        res.insert_or_assign("adcUncalint[2].adc.data[1].value", DumpEntry{adcUncalint[2].adc.data[1].value});
        res.insert_or_assign("adcUncalint[2].adc.data[2].value", DumpEntry{adcUncalint[2].adc.data[2].value});
        res.insert_or_assign("adcUncalint[2].adc.data[3].value", DumpEntry{adcUncalint[2].adc.data[3].value});
        res.insert_or_assign("adcUncalint[2].adc.data[4].value", DumpEntry{adcUncalint[2].adc.data[4].value});
        res.insert_or_assign("adcUncalint[2].adc.data[5].value", DumpEntry{adcUncalint[2].adc.data[5].value});
        res.insert_or_assign("adcUncalint[2].adc.data[6].value", DumpEntry{adcUncalint[2].adc.data[6].value});
        res.insert_or_assign("adcUncalint[2].adc.data[7].value", DumpEntry{adcUncalint[2].adc.data[7].value});
        res.insert_or_assign("adcUncalint[2].adc.data[8].value", DumpEntry{adcUncalint[2].adc.data[8].value});
        res.insert_or_assign("adcUncalint[2].adc.data[9].value", DumpEntry{adcUncalint[2].adc.data[9].value});
        res.insert_or_assign("adcUncalint[2].adc.data[10].value", DumpEntry{adcUncalint[2].adc.data[10].value});
        res.insert_or_assign("adcUncalint[2].adc.data[11].value", DumpEntry{adcUncalint[2].adc.data[11].value});
        res.insert_or_assign("adcUncalint[2].adc.data[12].value", DumpEntry{adcUncalint[2].adc.data[12].value});
        res.insert_or_assign("adcUncalint[2].adc.data[13].value", DumpEntry{adcUncalint[2].adc.data[13].value});
        res.insert_or_assign("adcUncalint[2].adc.data[14].value", DumpEntry{adcUncalint[2].adc.data[14].value});
        res.insert_or_assign("adcUncalint[2].adc.data[15].value", DumpEntry{adcUncalint[2].adc.data[15].value});
        res.insert_or_assign("adcUncalint[3].adc.ctrl", DumpEntry{adcUncalint[3].adc.ctrl});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.reset", DumpEntry{adcUncalint[3].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.start", DumpEntry{adcUncalint[3].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.hwReset", DumpEntry{adcUncalint[3].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[3].adc.config", DumpEntry{adcUncalint[3].adc.config});
        res.insert_or_assign("adcUncalint[3].adc.config.cpol", DumpEntry{adcUncalint[3].adc.config.cpol});
        res.insert_or_assign("adcUncalint[3].adc.config.cpha", DumpEntry{adcUncalint[3].adc.config.cpha});
        res.insert_or_assign("adcUncalint[3].adc.config.cnvPol", DumpEntry{adcUncalint[3].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[3].adc.config.cnvWithCs", DumpEntry{adcUncalint[3].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[3].adc.config.busyPol", DumpEntry{adcUncalint[3].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[3].adc.config.busySrc", DumpEntry{adcUncalint[3].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[3].adc.config.busyTime", DumpEntry{adcUncalint[3].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[3].adc.config.clkActInConv", DumpEntry{adcUncalint[3].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[3].adc.config.dataWidth", DumpEntry{adcUncalint[3].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[3].adc.config.gwCtrl", DumpEntry{adcUncalint[3].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[3].adc.status", DumpEntry{adcUncalint[3].adc.status});
        res.insert_or_assign("adcUncalint[3].adc.status.apiVer", DumpEntry{adcUncalint[3].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[3].adc.status.dinPorts", DumpEntry{adcUncalint[3].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[3].adc.status.busy", DumpEntry{adcUncalint[3].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[3].adc.status.clkPrescaler", DumpEntry{adcUncalint[3].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[3].adc.data[0].value", DumpEntry{adcUncalint[3].adc.data[0].value});
        res.insert_or_assign("adcUncalint[3].adc.data[1].value", DumpEntry{adcUncalint[3].adc.data[1].value});
        res.insert_or_assign("adcUncalint[3].adc.data[2].value", DumpEntry{adcUncalint[3].adc.data[2].value});
        res.insert_or_assign("adcUncalint[3].adc.data[3].value", DumpEntry{adcUncalint[3].adc.data[3].value});
        res.insert_or_assign("adcUncalint[3].adc.data[4].value", DumpEntry{adcUncalint[3].adc.data[4].value});
        res.insert_or_assign("adcUncalint[3].adc.data[5].value", DumpEntry{adcUncalint[3].adc.data[5].value});
        res.insert_or_assign("adcUncalint[3].adc.data[6].value", DumpEntry{adcUncalint[3].adc.data[6].value});
        res.insert_or_assign("adcUncalint[3].adc.data[7].value", DumpEntry{adcUncalint[3].adc.data[7].value});
        res.insert_or_assign("adcUncalint[3].adc.data[8].value", DumpEntry{adcUncalint[3].adc.data[8].value});
        res.insert_or_assign("adcUncalint[3].adc.data[9].value", DumpEntry{adcUncalint[3].adc.data[9].value});
        res.insert_or_assign("adcUncalint[3].adc.data[10].value", DumpEntry{adcUncalint[3].adc.data[10].value});
        res.insert_or_assign("adcUncalint[3].adc.data[11].value", DumpEntry{adcUncalint[3].adc.data[11].value});
        res.insert_or_assign("adcUncalint[3].adc.data[12].value", DumpEntry{adcUncalint[3].adc.data[12].value});
        res.insert_or_assign("adcUncalint[3].adc.data[13].value", DumpEntry{adcUncalint[3].adc.data[13].value});
        res.insert_or_assign("adcUncalint[3].adc.data[14].value", DumpEntry{adcUncalint[3].adc.data[14].value});
        res.insert_or_assign("adcUncalint[3].adc.data[15].value", DumpEntry{adcUncalint[3].adc.data[15].value});
        res.insert_or_assign("adcUncalint[4].adc.ctrl", DumpEntry{adcUncalint[4].adc.ctrl});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.reset", DumpEntry{adcUncalint[4].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.start", DumpEntry{adcUncalint[4].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.hwReset", DumpEntry{adcUncalint[4].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[4].adc.config", DumpEntry{adcUncalint[4].adc.config});
        res.insert_or_assign("adcUncalint[4].adc.config.cpol", DumpEntry{adcUncalint[4].adc.config.cpol});
        res.insert_or_assign("adcUncalint[4].adc.config.cpha", DumpEntry{adcUncalint[4].adc.config.cpha});
        res.insert_or_assign("adcUncalint[4].adc.config.cnvPol", DumpEntry{adcUncalint[4].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[4].adc.config.cnvWithCs", DumpEntry{adcUncalint[4].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[4].adc.config.busyPol", DumpEntry{adcUncalint[4].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[4].adc.config.busySrc", DumpEntry{adcUncalint[4].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[4].adc.config.busyTime", DumpEntry{adcUncalint[4].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[4].adc.config.clkActInConv", DumpEntry{adcUncalint[4].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[4].adc.config.dataWidth", DumpEntry{adcUncalint[4].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[4].adc.config.gwCtrl", DumpEntry{adcUncalint[4].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[4].adc.status", DumpEntry{adcUncalint[4].adc.status});
        res.insert_or_assign("adcUncalint[4].adc.status.apiVer", DumpEntry{adcUncalint[4].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[4].adc.status.dinPorts", DumpEntry{adcUncalint[4].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[4].adc.status.busy", DumpEntry{adcUncalint[4].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[4].adc.status.clkPrescaler", DumpEntry{adcUncalint[4].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[4].adc.data[0].value", DumpEntry{adcUncalint[4].adc.data[0].value});
        res.insert_or_assign("adcUncalint[4].adc.data[1].value", DumpEntry{adcUncalint[4].adc.data[1].value});
        res.insert_or_assign("adcUncalint[4].adc.data[2].value", DumpEntry{adcUncalint[4].adc.data[2].value});
        res.insert_or_assign("adcUncalint[4].adc.data[3].value", DumpEntry{adcUncalint[4].adc.data[3].value});
        res.insert_or_assign("adcUncalint[4].adc.data[4].value", DumpEntry{adcUncalint[4].adc.data[4].value});
        res.insert_or_assign("adcUncalint[4].adc.data[5].value", DumpEntry{adcUncalint[4].adc.data[5].value});
        res.insert_or_assign("adcUncalint[4].adc.data[6].value", DumpEntry{adcUncalint[4].adc.data[6].value});
        res.insert_or_assign("adcUncalint[4].adc.data[7].value", DumpEntry{adcUncalint[4].adc.data[7].value});
        res.insert_or_assign("adcUncalint[4].adc.data[8].value", DumpEntry{adcUncalint[4].adc.data[8].value});
        res.insert_or_assign("adcUncalint[4].adc.data[9].value", DumpEntry{adcUncalint[4].adc.data[9].value});
        res.insert_or_assign("adcUncalint[4].adc.data[10].value", DumpEntry{adcUncalint[4].adc.data[10].value});
        res.insert_or_assign("adcUncalint[4].adc.data[11].value", DumpEntry{adcUncalint[4].adc.data[11].value});
        res.insert_or_assign("adcUncalint[4].adc.data[12].value", DumpEntry{adcUncalint[4].adc.data[12].value});
        res.insert_or_assign("adcUncalint[4].adc.data[13].value", DumpEntry{adcUncalint[4].adc.data[13].value});
        res.insert_or_assign("adcUncalint[4].adc.data[14].value", DumpEntry{adcUncalint[4].adc.data[14].value});
        res.insert_or_assign("adcUncalint[4].adc.data[15].value", DumpEntry{adcUncalint[4].adc.data[15].value});
        res.insert_or_assign("adcUncalint[5].adc.ctrl", DumpEntry{adcUncalint[5].adc.ctrl});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.reset", DumpEntry{adcUncalint[5].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.start", DumpEntry{adcUncalint[5].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.hwReset", DumpEntry{adcUncalint[5].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[5].adc.config", DumpEntry{adcUncalint[5].adc.config});
        res.insert_or_assign("adcUncalint[5].adc.config.cpol", DumpEntry{adcUncalint[5].adc.config.cpol});
        res.insert_or_assign("adcUncalint[5].adc.config.cpha", DumpEntry{adcUncalint[5].adc.config.cpha});
        res.insert_or_assign("adcUncalint[5].adc.config.cnvPol", DumpEntry{adcUncalint[5].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[5].adc.config.cnvWithCs", DumpEntry{adcUncalint[5].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[5].adc.config.busyPol", DumpEntry{adcUncalint[5].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[5].adc.config.busySrc", DumpEntry{adcUncalint[5].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[5].adc.config.busyTime", DumpEntry{adcUncalint[5].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[5].adc.config.clkActInConv", DumpEntry{adcUncalint[5].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[5].adc.config.dataWidth", DumpEntry{adcUncalint[5].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[5].adc.config.gwCtrl", DumpEntry{adcUncalint[5].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[5].adc.status", DumpEntry{adcUncalint[5].adc.status});
        res.insert_or_assign("adcUncalint[5].adc.status.apiVer", DumpEntry{adcUncalint[5].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[5].adc.status.dinPorts", DumpEntry{adcUncalint[5].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[5].adc.status.busy", DumpEntry{adcUncalint[5].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[5].adc.status.clkPrescaler", DumpEntry{adcUncalint[5].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[5].adc.data[0].value", DumpEntry{adcUncalint[5].adc.data[0].value});
        res.insert_or_assign("adcUncalint[5].adc.data[1].value", DumpEntry{adcUncalint[5].adc.data[1].value});
        res.insert_or_assign("adcUncalint[5].adc.data[2].value", DumpEntry{adcUncalint[5].adc.data[2].value});
        res.insert_or_assign("adcUncalint[5].adc.data[3].value", DumpEntry{adcUncalint[5].adc.data[3].value});
        res.insert_or_assign("adcUncalint[5].adc.data[4].value", DumpEntry{adcUncalint[5].adc.data[4].value});
        res.insert_or_assign("adcUncalint[5].adc.data[5].value", DumpEntry{adcUncalint[5].adc.data[5].value});
        res.insert_or_assign("adcUncalint[5].adc.data[6].value", DumpEntry{adcUncalint[5].adc.data[6].value});
        res.insert_or_assign("adcUncalint[5].adc.data[7].value", DumpEntry{adcUncalint[5].adc.data[7].value});
        res.insert_or_assign("adcUncalint[5].adc.data[8].value", DumpEntry{adcUncalint[5].adc.data[8].value});
        res.insert_or_assign("adcUncalint[5].adc.data[9].value", DumpEntry{adcUncalint[5].adc.data[9].value});
        res.insert_or_assign("adcUncalint[5].adc.data[10].value", DumpEntry{adcUncalint[5].adc.data[10].value});
        res.insert_or_assign("adcUncalint[5].adc.data[11].value", DumpEntry{adcUncalint[5].adc.data[11].value});
        res.insert_or_assign("adcUncalint[5].adc.data[12].value", DumpEntry{adcUncalint[5].adc.data[12].value});
        res.insert_or_assign("adcUncalint[5].adc.data[13].value", DumpEntry{adcUncalint[5].adc.data[13].value});
        res.insert_or_assign("adcUncalint[5].adc.data[14].value", DumpEntry{adcUncalint[5].adc.data[14].value});
        res.insert_or_assign("adcUncalint[5].adc.data[15].value", DumpEntry{adcUncalint[5].adc.data[15].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::DacIntArrayItem::Dac::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::DacIntArrayItem::Dac::DataArray& data)
    {
        DumpMap res{data.base()};
        // data[0].value skipped (Register is not readable).
        // data[1].value skipped (Register is not readable).
        // data[2].value skipped (Register is not readable).
        // data[3].value skipped (Register is not readable).
        // data[4].value skipped (Register is not readable).
        // data[5].value skipped (Register is not readable).
        // data[6].value skipped (Register is not readable).
        // data[7].value skipped (Register is not readable).
        // data[8].value skipped (Register is not readable).
        // data[9].value skipped (Register is not readable).
        // data[10].value skipped (Register is not readable).
        // data[11].value skipped (Register is not readable).
        // data[12].value skipped (Register is not readable).
        // data[13].value skipped (Register is not readable).
        // data[14].value skipped (Register is not readable).
        // data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::DacIntArrayItem::Dac`
    //!
    //! @param dac A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dac
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::DacIntArrayItem::Dac& dac)
    {
        DumpMap res{dac.base()};
        res.insert_or_assign("dac.ctrl", DumpEntry{dac.ctrl});
        res.insert_or_assign("dac.ctrl.reset", DumpEntry{dac.ctrl.reset});
        res.insert_or_assign("dac.ctrl.start", DumpEntry{dac.ctrl.start});
        res.insert_or_assign("dac.config", DumpEntry{dac.config});
        res.insert_or_assign("dac.config.cpol", DumpEntry{dac.config.cpol});
        res.insert_or_assign("dac.config.cpha", DumpEntry{dac.config.cpha});
        res.insert_or_assign("dac.config.msbFirst", DumpEntry{dac.config.msbFirst});
        res.insert_or_assign("dac.config.prePad", DumpEntry{dac.config.prePad});
        res.insert_or_assign("dac.config.postPad", DumpEntry{dac.config.postPad});
        res.insert_or_assign("dac.config.dataWidth", DumpEntry{dac.config.dataWidth});
        res.insert_or_assign("dac.config.deadTime", DumpEntry{dac.config.deadTime});
        res.insert_or_assign("dac.config.clkPres", DumpEntry{dac.config.clkPres});
        res.insert_or_assign("dac.config.fixAddClkCyc", DumpEntry{dac.config.fixAddClkCyc});
        res.insert_or_assign("dac.config.gwCtrl", DumpEntry{dac.config.gwCtrl});
        res.insert_or_assign("dac.status", DumpEntry{dac.status});
        res.insert_or_assign("dac.status.apiVer", DumpEntry{dac.status.apiVer});
        res.insert_or_assign("dac.status.doutPorts", DumpEntry{dac.status.doutPorts});
        res.insert_or_assign("dac.status.busy", DumpEntry{dac.status.busy});
        // dac.data[0].value skipped (Register is not readable).
        // dac.data[1].value skipped (Register is not readable).
        // dac.data[2].value skipped (Register is not readable).
        // dac.data[3].value skipped (Register is not readable).
        // dac.data[4].value skipped (Register is not readable).
        // dac.data[5].value skipped (Register is not readable).
        // dac.data[6].value skipped (Register is not readable).
        // dac.data[7].value skipped (Register is not readable).
        // dac.data[8].value skipped (Register is not readable).
        // dac.data[9].value skipped (Register is not readable).
        // dac.data[10].value skipped (Register is not readable).
        // dac.data[11].value skipped (Register is not readable).
        // dac.data[12].value skipped (Register is not readable).
        // dac.data[13].value skipped (Register is not readable).
        // dac.data[14].value skipped (Register is not readable).
        // dac.data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::DacIntArray`
    //!
    //! @param dacInt A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dacInt
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::DacIntArray& dacInt)
    {
        DumpMap res{dacInt.base()};
        res.insert_or_assign("dacInt[0].dac.ctrl", DumpEntry{dacInt[0].dac.ctrl});
        res.insert_or_assign("dacInt[0].dac.ctrl.reset", DumpEntry{dacInt[0].dac.ctrl.reset});
        res.insert_or_assign("dacInt[0].dac.ctrl.start", DumpEntry{dacInt[0].dac.ctrl.start});
        res.insert_or_assign("dacInt[0].dac.config", DumpEntry{dacInt[0].dac.config});
        res.insert_or_assign("dacInt[0].dac.config.cpol", DumpEntry{dacInt[0].dac.config.cpol});
        res.insert_or_assign("dacInt[0].dac.config.cpha", DumpEntry{dacInt[0].dac.config.cpha});
        res.insert_or_assign("dacInt[0].dac.config.msbFirst", DumpEntry{dacInt[0].dac.config.msbFirst});
        res.insert_or_assign("dacInt[0].dac.config.prePad", DumpEntry{dacInt[0].dac.config.prePad});
        res.insert_or_assign("dacInt[0].dac.config.postPad", DumpEntry{dacInt[0].dac.config.postPad});
        res.insert_or_assign("dacInt[0].dac.config.dataWidth", DumpEntry{dacInt[0].dac.config.dataWidth});
        res.insert_or_assign("dacInt[0].dac.config.deadTime", DumpEntry{dacInt[0].dac.config.deadTime});
        res.insert_or_assign("dacInt[0].dac.config.clkPres", DumpEntry{dacInt[0].dac.config.clkPres});
        res.insert_or_assign("dacInt[0].dac.config.fixAddClkCyc", DumpEntry{dacInt[0].dac.config.fixAddClkCyc});
        res.insert_or_assign("dacInt[0].dac.config.gwCtrl", DumpEntry{dacInt[0].dac.config.gwCtrl});
        res.insert_or_assign("dacInt[0].dac.status", DumpEntry{dacInt[0].dac.status});
        res.insert_or_assign("dacInt[0].dac.status.apiVer", DumpEntry{dacInt[0].dac.status.apiVer});
        res.insert_or_assign("dacInt[0].dac.status.doutPorts", DumpEntry{dacInt[0].dac.status.doutPorts});
        res.insert_or_assign("dacInt[0].dac.status.busy", DumpEntry{dacInt[0].dac.status.busy});
        // dacInt[0].dac.data[0].value skipped (Register is not readable).
        // dacInt[0].dac.data[1].value skipped (Register is not readable).
        // dacInt[0].dac.data[2].value skipped (Register is not readable).
        // dacInt[0].dac.data[3].value skipped (Register is not readable).
        // dacInt[0].dac.data[4].value skipped (Register is not readable).
        // dacInt[0].dac.data[5].value skipped (Register is not readable).
        // dacInt[0].dac.data[6].value skipped (Register is not readable).
        // dacInt[0].dac.data[7].value skipped (Register is not readable).
        // dacInt[0].dac.data[8].value skipped (Register is not readable).
        // dacInt[0].dac.data[9].value skipped (Register is not readable).
        // dacInt[0].dac.data[10].value skipped (Register is not readable).
        // dacInt[0].dac.data[11].value skipped (Register is not readable).
        // dacInt[0].dac.data[12].value skipped (Register is not readable).
        // dacInt[0].dac.data[13].value skipped (Register is not readable).
        // dacInt[0].dac.data[14].value skipped (Register is not readable).
        // dacInt[0].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("dacInt[1].dac.ctrl", DumpEntry{dacInt[1].dac.ctrl});
        res.insert_or_assign("dacInt[1].dac.ctrl.reset", DumpEntry{dacInt[1].dac.ctrl.reset});
        res.insert_or_assign("dacInt[1].dac.ctrl.start", DumpEntry{dacInt[1].dac.ctrl.start});
        res.insert_or_assign("dacInt[1].dac.config", DumpEntry{dacInt[1].dac.config});
        res.insert_or_assign("dacInt[1].dac.config.cpol", DumpEntry{dacInt[1].dac.config.cpol});
        res.insert_or_assign("dacInt[1].dac.config.cpha", DumpEntry{dacInt[1].dac.config.cpha});
        res.insert_or_assign("dacInt[1].dac.config.msbFirst", DumpEntry{dacInt[1].dac.config.msbFirst});
        res.insert_or_assign("dacInt[1].dac.config.prePad", DumpEntry{dacInt[1].dac.config.prePad});
        res.insert_or_assign("dacInt[1].dac.config.postPad", DumpEntry{dacInt[1].dac.config.postPad});
        res.insert_or_assign("dacInt[1].dac.config.dataWidth", DumpEntry{dacInt[1].dac.config.dataWidth});
        res.insert_or_assign("dacInt[1].dac.config.deadTime", DumpEntry{dacInt[1].dac.config.deadTime});
        res.insert_or_assign("dacInt[1].dac.config.clkPres", DumpEntry{dacInt[1].dac.config.clkPres});
        res.insert_or_assign("dacInt[1].dac.config.fixAddClkCyc", DumpEntry{dacInt[1].dac.config.fixAddClkCyc});
        res.insert_or_assign("dacInt[1].dac.config.gwCtrl", DumpEntry{dacInt[1].dac.config.gwCtrl});
        res.insert_or_assign("dacInt[1].dac.status", DumpEntry{dacInt[1].dac.status});
        res.insert_or_assign("dacInt[1].dac.status.apiVer", DumpEntry{dacInt[1].dac.status.apiVer});
        res.insert_or_assign("dacInt[1].dac.status.doutPorts", DumpEntry{dacInt[1].dac.status.doutPorts});
        res.insert_or_assign("dacInt[1].dac.status.busy", DumpEntry{dacInt[1].dac.status.busy});
        // dacInt[1].dac.data[0].value skipped (Register is not readable).
        // dacInt[1].dac.data[1].value skipped (Register is not readable).
        // dacInt[1].dac.data[2].value skipped (Register is not readable).
        // dacInt[1].dac.data[3].value skipped (Register is not readable).
        // dacInt[1].dac.data[4].value skipped (Register is not readable).
        // dacInt[1].dac.data[5].value skipped (Register is not readable).
        // dacInt[1].dac.data[6].value skipped (Register is not readable).
        // dacInt[1].dac.data[7].value skipped (Register is not readable).
        // dacInt[1].dac.data[8].value skipped (Register is not readable).
        // dacInt[1].dac.data[9].value skipped (Register is not readable).
        // dacInt[1].dac.data[10].value skipped (Register is not readable).
        // dacInt[1].dac.data[11].value skipped (Register is not readable).
        // dacInt[1].dac.data[12].value skipped (Register is not readable).
        // dacInt[1].dac.data[13].value skipped (Register is not readable).
        // dacInt[1].dac.data[14].value skipped (Register is not readable).
        // dacInt[1].dac.data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank::RegArray`
    //!
    //! @param reg A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reg
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank::RegArray& reg)
    {
        DumpMap res{reg.base()};
        res.insert_or_assign("reg[0].fir", DumpEntry{reg[0].fir});
        res.insert_or_assign("reg[1].fir", DumpEntry{reg[1].fir});
        res.insert_or_assign("reg[2].fir", DumpEntry{reg[2].fir});
        res.insert_or_assign("reg[3].fir", DumpEntry{reg[3].fir});
        res.insert_or_assign("reg[4].fir", DumpEntry{reg[4].fir});
        res.insert_or_assign("reg[5].fir", DumpEntry{reg[5].fir});
        res.insert_or_assign("reg[6].fir", DumpEntry{reg[6].fir});
        res.insert_or_assign("reg[7].fir", DumpEntry{reg[7].fir});
        res.insert_or_assign("reg[8].fir", DumpEntry{reg[8].fir});
        res.insert_or_assign("reg[9].fir", DumpEntry{reg[9].fir});
        res.insert_or_assign("reg[10].fir", DumpEntry{reg[10].fir});
        res.insert_or_assign("reg[11].fir", DumpEntry{reg[11].fir});
        res.insert_or_assign("reg[12].fir", DumpEntry{reg[12].fir});
        res.insert_or_assign("reg[13].fir", DumpEntry{reg[13].fir});
        res.insert_or_assign("reg[14].fir", DumpEntry{reg[14].fir});
        res.insert_or_assign("reg[15].fir", DumpEntry{reg[15].fir});
        res.insert_or_assign("reg[16].fir", DumpEntry{reg[16].fir});
        res.insert_or_assign("reg[17].fir", DumpEntry{reg[17].fir});
        res.insert_or_assign("reg[18].fir", DumpEntry{reg[18].fir});
        res.insert_or_assign("reg[19].fir", DumpEntry{reg[19].fir});
        res.insert_or_assign("reg[20].fir", DumpEntry{reg[20].fir});
        res.insert_or_assign("reg[21].fir", DumpEntry{reg[21].fir});
        res.insert_or_assign("reg[22].fir", DumpEntry{reg[22].fir});
        res.insert_or_assign("reg[23].fir", DumpEntry{reg[23].fir});
        res.insert_or_assign("reg[24].fir", DumpEntry{reg[24].fir});
        res.insert_or_assign("reg[25].fir", DumpEntry{reg[25].fir});
        res.insert_or_assign("reg[26].fir", DumpEntry{reg[26].fir});
        res.insert_or_assign("reg[27].fir", DumpEntry{reg[27].fir});
        res.insert_or_assign("reg[28].fir", DumpEntry{reg[28].fir});
        res.insert_or_assign("reg[29].fir", DumpEntry{reg[29].fir});
        res.insert_or_assign("reg[30].fir", DumpEntry{reg[30].fir});
        res.insert_or_assign("reg[31].fir", DumpEntry{reg[31].fir});
        res.insert_or_assign("reg[32].fir", DumpEntry{reg[32].fir});
        res.insert_or_assign("reg[33].fir", DumpEntry{reg[33].fir});
        res.insert_or_assign("reg[34].fir", DumpEntry{reg[34].fir});
        res.insert_or_assign("reg[35].fir", DumpEntry{reg[35].fir});
        res.insert_or_assign("reg[36].fir", DumpEntry{reg[36].fir});
        res.insert_or_assign("reg[37].fir", DumpEntry{reg[37].fir});
        res.insert_or_assign("reg[38].fir", DumpEntry{reg[38].fir});
        res.insert_or_assign("reg[39].fir", DumpEntry{reg[39].fir});
        res.insert_or_assign("reg[40].fir", DumpEntry{reg[40].fir});
        res.insert_or_assign("reg[41].fir", DumpEntry{reg[41].fir});
        res.insert_or_assign("reg[42].fir", DumpEntry{reg[42].fir});
        res.insert_or_assign("reg[43].fir", DumpEntry{reg[43].fir});
        res.insert_or_assign("reg[44].fir", DumpEntry{reg[44].fir});
        res.insert_or_assign("reg[45].fir", DumpEntry{reg[45].fir});
        res.insert_or_assign("reg[46].fir", DumpEntry{reg[46].fir});
        res.insert_or_assign("reg[47].fir", DumpEntry{reg[47].fir});
        res.insert_or_assign("reg[48].fir", DumpEntry{reg[48].fir});
        res.insert_or_assign("reg[49].fir", DumpEntry{reg[49].fir});
        res.insert_or_assign("reg[50].fir", DumpEntry{reg[50].fir});
        res.insert_or_assign("reg[51].fir", DumpEntry{reg[51].fir});
        res.insert_or_assign("reg[52].fir", DumpEntry{reg[52].fir});
        res.insert_or_assign("reg[53].fir", DumpEntry{reg[53].fir});
        res.insert_or_assign("reg[54].fir", DumpEntry{reg[54].fir});
        res.insert_or_assign("reg[55].fir", DumpEntry{reg[55].fir});
        res.insert_or_assign("reg[56].fir", DumpEntry{reg[56].fir});
        res.insert_or_assign("reg[57].fir", DumpEntry{reg[57].fir});
        res.insert_or_assign("reg[58].fir", DumpEntry{reg[58].fir});
        res.insert_or_assign("reg[59].fir", DumpEntry{reg[59].fir});
        res.insert_or_assign("reg[60].fir", DumpEntry{reg[60].fir});
        res.insert_or_assign("reg[61].fir", DumpEntry{reg[61].fir});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank::VloopArray`
    //!
    //! @param vloop A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under vloop
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank::VloopArray& vloop)
    {
        DumpMap res{vloop.base()};
        res.insert_or_assign("vloop[0].fir", DumpEntry{vloop[0].fir});
        res.insert_or_assign("vloop[1].fir", DumpEntry{vloop[1].fir});
        res.insert_or_assign("vloop[2].fir", DumpEntry{vloop[2].fir});
        res.insert_or_assign("vloop[3].fir", DumpEntry{vloop[3].fir});
        res.insert_or_assign("vloop[4].fir", DumpEntry{vloop[4].fir});
        res.insert_or_assign("vloop[5].fir", DumpEntry{vloop[5].fir});
        res.insert_or_assign("vloop[6].fir", DumpEntry{vloop[6].fir});
        res.insert_or_assign("vloop[7].fir", DumpEntry{vloop[7].fir});
        res.insert_or_assign("vloop[8].fir", DumpEntry{vloop[8].fir});
        res.insert_or_assign("vloop[9].fir", DumpEntry{vloop[9].fir});
        res.insert_or_assign("vloop[10].fir", DumpEntry{vloop[10].fir});
        res.insert_or_assign("vloop[11].fir", DumpEntry{vloop[11].fir});
        res.insert_or_assign("vloop[12].fir", DumpEntry{vloop[12].fir});
        res.insert_or_assign("vloop[13].fir", DumpEntry{vloop[13].fir});
        res.insert_or_assign("vloop[14].fir", DumpEntry{vloop[14].fir});
        res.insert_or_assign("vloop[15].fir", DumpEntry{vloop[15].fir});
        res.insert_or_assign("vloop[16].fir", DumpEntry{vloop[16].fir});
        res.insert_or_assign("vloop[17].fir", DumpEntry{vloop[17].fir});
        res.insert_or_assign("vloop[18].fir", DumpEntry{vloop[18].fir});
        res.insert_or_assign("vloop[19].fir", DumpEntry{vloop[19].fir});
        res.insert_or_assign("vloop[20].fir", DumpEntry{vloop[20].fir});
        res.insert_or_assign("vloop[21].fir", DumpEntry{vloop[21].fir});
        res.insert_or_assign("vloop[22].fir", DumpEntry{vloop[22].fir});
        res.insert_or_assign("vloop[23].fir", DumpEntry{vloop[23].fir});
        res.insert_or_assign("vloop[24].fir", DumpEntry{vloop[24].fir});
        res.insert_or_assign("vloop[25].fir", DumpEntry{vloop[25].fir});
        res.insert_or_assign("vloop[26].fir", DumpEntry{vloop[26].fir});
        res.insert_or_assign("vloop[27].fir", DumpEntry{vloop[27].fir});
        res.insert_or_assign("vloop[28].fir", DumpEntry{vloop[28].fir});
        res.insert_or_assign("vloop[29].fir", DumpEntry{vloop[29].fir});
        res.insert_or_assign("vloop[30].fir", DumpEntry{vloop[30].fir});
        res.insert_or_assign("vloop[31].fir", DumpEntry{vloop[31].fir});
        res.insert_or_assign("vloop[32].fir", DumpEntry{vloop[32].fir});
        res.insert_or_assign("vloop[33].fir", DumpEntry{vloop[33].fir});
        res.insert_or_assign("vloop[34].fir", DumpEntry{vloop[34].fir});
        res.insert_or_assign("vloop[35].fir", DumpEntry{vloop[35].fir});
        res.insert_or_assign("vloop[36].fir", DumpEntry{vloop[36].fir});
        res.insert_or_assign("vloop[37].fir", DumpEntry{vloop[37].fir});
        res.insert_or_assign("vloop[38].fir", DumpEntry{vloop[38].fir});
        res.insert_or_assign("vloop[39].fir", DumpEntry{vloop[39].fir});
        res.insert_or_assign("vloop[40].fir", DumpEntry{vloop[40].fir});
        res.insert_or_assign("vloop[41].fir", DumpEntry{vloop[41].fir});
        res.insert_or_assign("vloop[42].fir", DumpEntry{vloop[42].fir});
        res.insert_or_assign("vloop[43].fir", DumpEntry{vloop[43].fir});
        res.insert_or_assign("vloop[44].fir", DumpEntry{vloop[44].fir});
        res.insert_or_assign("vloop[45].fir", DumpEntry{vloop[45].fir});
        res.insert_or_assign("vloop[46].fir", DumpEntry{vloop[46].fir});
        res.insert_or_assign("vloop[47].fir", DumpEntry{vloop[47].fir});
        res.insert_or_assign("vloop[48].fir", DumpEntry{vloop[48].fir});
        res.insert_or_assign("vloop[49].fir", DumpEntry{vloop[49].fir});
        res.insert_or_assign("vloop[50].fir", DumpEntry{vloop[50].fir});
        res.insert_or_assign("vloop[51].fir", DumpEntry{vloop[51].fir});
        res.insert_or_assign("vloop[52].fir", DumpEntry{vloop[52].fir});
        res.insert_or_assign("vloop[53].fir", DumpEntry{vloop[53].fir});
        res.insert_or_assign("vloop[54].fir", DumpEntry{vloop[54].fir});
        res.insert_or_assign("vloop[55].fir", DumpEntry{vloop[55].fir});
        res.insert_or_assign("vloop[56].fir", DumpEntry{vloop[56].fir});
        res.insert_or_assign("vloop[57].fir", DumpEntry{vloop[57].fir});
        res.insert_or_assign("vloop[58].fir", DumpEntry{vloop[58].fir});
        res.insert_or_assign("vloop[59].fir", DumpEntry{vloop[59].fir});
        res.insert_or_assign("vloop[60].fir", DumpEntry{vloop[60].fir});
        res.insert_or_assign("vloop[61].fir", DumpEntry{vloop[61].fir});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank::RawArray`
    //!
    //! @param raw A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under raw
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank::RawArray& raw)
    {
        DumpMap res{raw.base()};
        res.insert_or_assign("raw[0].raw", DumpEntry{raw[0].raw});
        res.insert_or_assign("raw[1].raw", DumpEntry{raw[1].raw});
        res.insert_or_assign("raw[2].raw", DumpEntry{raw[2].raw});
        res.insert_or_assign("raw[3].raw", DumpEntry{raw[3].raw});
        res.insert_or_assign("raw[4].raw", DumpEntry{raw[4].raw});
        res.insert_or_assign("raw[5].raw", DumpEntry{raw[5].raw});
        res.insert_or_assign("raw[6].raw", DumpEntry{raw[6].raw});
        res.insert_or_assign("raw[7].raw", DumpEntry{raw[7].raw});
        res.insert_or_assign("raw[8].raw", DumpEntry{raw[8].raw});
        res.insert_or_assign("raw[9].raw", DumpEntry{raw[9].raw});
        res.insert_or_assign("raw[10].raw", DumpEntry{raw[10].raw});
        res.insert_or_assign("raw[11].raw", DumpEntry{raw[11].raw});
        res.insert_or_assign("raw[12].raw", DumpEntry{raw[12].raw});
        res.insert_or_assign("raw[13].raw", DumpEntry{raw[13].raw});
        res.insert_or_assign("raw[14].raw", DumpEntry{raw[14].raw});
        res.insert_or_assign("raw[15].raw", DumpEntry{raw[15].raw});
        res.insert_or_assign("raw[16].raw", DumpEntry{raw[16].raw});
        res.insert_or_assign("raw[17].raw", DumpEntry{raw[17].raw});
        res.insert_or_assign("raw[18].raw", DumpEntry{raw[18].raw});
        res.insert_or_assign("raw[19].raw", DumpEntry{raw[19].raw});
        res.insert_or_assign("raw[20].raw", DumpEntry{raw[20].raw});
        res.insert_or_assign("raw[21].raw", DumpEntry{raw[21].raw});
        res.insert_or_assign("raw[22].raw", DumpEntry{raw[22].raw});
        res.insert_or_assign("raw[23].raw", DumpEntry{raw[23].raw});
        res.insert_or_assign("raw[24].raw", DumpEntry{raw[24].raw});
        res.insert_or_assign("raw[25].raw", DumpEntry{raw[25].raw});
        res.insert_or_assign("raw[26].raw", DumpEntry{raw[26].raw});
        res.insert_or_assign("raw[27].raw", DumpEntry{raw[27].raw});
        res.insert_or_assign("raw[28].raw", DumpEntry{raw[28].raw});
        res.insert_or_assign("raw[29].raw", DumpEntry{raw[29].raw});
        res.insert_or_assign("raw[30].raw", DumpEntry{raw[30].raw});
        res.insert_or_assign("raw[31].raw", DumpEntry{raw[31].raw});
        res.insert_or_assign("raw[32].raw", DumpEntry{raw[32].raw});
        res.insert_or_assign("raw[33].raw", DumpEntry{raw[33].raw});
        res.insert_or_assign("raw[34].raw", DumpEntry{raw[34].raw});
        res.insert_or_assign("raw[35].raw", DumpEntry{raw[35].raw});
        res.insert_or_assign("raw[36].raw", DumpEntry{raw[36].raw});
        res.insert_or_assign("raw[37].raw", DumpEntry{raw[37].raw});
        res.insert_or_assign("raw[38].raw", DumpEntry{raw[38].raw});
        res.insert_or_assign("raw[39].raw", DumpEntry{raw[39].raw});
        res.insert_or_assign("raw[40].raw", DumpEntry{raw[40].raw});
        res.insert_or_assign("raw[41].raw", DumpEntry{raw[41].raw});
        res.insert_or_assign("raw[42].raw", DumpEntry{raw[42].raw});
        res.insert_or_assign("raw[43].raw", DumpEntry{raw[43].raw});
        res.insert_or_assign("raw[44].raw", DumpEntry{raw[44].raw});
        res.insert_or_assign("raw[45].raw", DumpEntry{raw[45].raw});
        res.insert_or_assign("raw[46].raw", DumpEntry{raw[46].raw});
        res.insert_or_assign("raw[47].raw", DumpEntry{raw[47].raw});
        res.insert_or_assign("raw[48].raw", DumpEntry{raw[48].raw});
        res.insert_or_assign("raw[49].raw", DumpEntry{raw[49].raw});
        res.insert_or_assign("raw[50].raw", DumpEntry{raw[50].raw});
        res.insert_or_assign("raw[51].raw", DumpEntry{raw[51].raw});
        res.insert_or_assign("raw[52].raw", DumpEntry{raw[52].raw});
        res.insert_or_assign("raw[53].raw", DumpEntry{raw[53].raw});
        res.insert_or_assign("raw[54].raw", DumpEntry{raw[54].raw});
        res.insert_or_assign("raw[55].raw", DumpEntry{raw[55].raw});
        res.insert_or_assign("raw[56].raw", DumpEntry{raw[56].raw});
        res.insert_or_assign("raw[57].raw", DumpEntry{raw[57].raw});
        res.insert_or_assign("raw[58].raw", DumpEntry{raw[58].raw});
        res.insert_or_assign("raw[59].raw", DumpEntry{raw[59].raw});
        res.insert_or_assign("raw[60].raw", DumpEntry{raw[60].raw});
        res.insert_or_assign("raw[61].raw", DumpEntry{raw[61].raw});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank::MmArray`
    //!
    //! @param mm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under mm
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank::MmArray& mm)
    {
        DumpMap res{mm.base()};
        res.insert_or_assign("mm[0].fir", DumpEntry{mm[0].fir});
        res.insert_or_assign("mm[1].fir", DumpEntry{mm[1].fir});
        res.insert_or_assign("mm[2].fir", DumpEntry{mm[2].fir});
        res.insert_or_assign("mm[3].fir", DumpEntry{mm[3].fir});
        res.insert_or_assign("mm[4].fir", DumpEntry{mm[4].fir});
        res.insert_or_assign("mm[5].fir", DumpEntry{mm[5].fir});
        res.insert_or_assign("mm[6].fir", DumpEntry{mm[6].fir});
        res.insert_or_assign("mm[7].fir", DumpEntry{mm[7].fir});
        res.insert_or_assign("mm[8].fir", DumpEntry{mm[8].fir});
        res.insert_or_assign("mm[9].fir", DumpEntry{mm[9].fir});
        res.insert_or_assign("mm[10].fir", DumpEntry{mm[10].fir});
        res.insert_or_assign("mm[11].fir", DumpEntry{mm[11].fir});
        res.insert_or_assign("mm[12].fir", DumpEntry{mm[12].fir});
        res.insert_or_assign("mm[13].fir", DumpEntry{mm[13].fir});
        res.insert_or_assign("mm[14].fir", DumpEntry{mm[14].fir});
        res.insert_or_assign("mm[15].fir", DumpEntry{mm[15].fir});
        res.insert_or_assign("mm[16].fir", DumpEntry{mm[16].fir});
        res.insert_or_assign("mm[17].fir", DumpEntry{mm[17].fir});
        res.insert_or_assign("mm[18].fir", DumpEntry{mm[18].fir});
        res.insert_or_assign("mm[19].fir", DumpEntry{mm[19].fir});
        res.insert_or_assign("mm[20].fir", DumpEntry{mm[20].fir});
        res.insert_or_assign("mm[21].fir", DumpEntry{mm[21].fir});
        res.insert_or_assign("mm[22].fir", DumpEntry{mm[22].fir});
        res.insert_or_assign("mm[23].fir", DumpEntry{mm[23].fir});
        res.insert_or_assign("mm[24].fir", DumpEntry{mm[24].fir});
        res.insert_or_assign("mm[25].fir", DumpEntry{mm[25].fir});
        res.insert_or_assign("mm[26].fir", DumpEntry{mm[26].fir});
        res.insert_or_assign("mm[27].fir", DumpEntry{mm[27].fir});
        res.insert_or_assign("mm[28].fir", DumpEntry{mm[28].fir});
        res.insert_or_assign("mm[29].fir", DumpEntry{mm[29].fir});
        res.insert_or_assign("mm[30].fir", DumpEntry{mm[30].fir});
        res.insert_or_assign("mm[31].fir", DumpEntry{mm[31].fir});
        res.insert_or_assign("mm[32].fir", DumpEntry{mm[32].fir});
        res.insert_or_assign("mm[33].fir", DumpEntry{mm[33].fir});
        res.insert_or_assign("mm[34].fir", DumpEntry{mm[34].fir});
        res.insert_or_assign("mm[35].fir", DumpEntry{mm[35].fir});
        res.insert_or_assign("mm[36].fir", DumpEntry{mm[36].fir});
        res.insert_or_assign("mm[37].fir", DumpEntry{mm[37].fir});
        res.insert_or_assign("mm[38].fir", DumpEntry{mm[38].fir});
        res.insert_or_assign("mm[39].fir", DumpEntry{mm[39].fir});
        res.insert_or_assign("mm[40].fir", DumpEntry{mm[40].fir});
        res.insert_or_assign("mm[41].fir", DumpEntry{mm[41].fir});
        res.insert_or_assign("mm[42].fir", DumpEntry{mm[42].fir});
        res.insert_or_assign("mm[43].fir", DumpEntry{mm[43].fir});
        res.insert_or_assign("mm[44].fir", DumpEntry{mm[44].fir});
        res.insert_or_assign("mm[45].fir", DumpEntry{mm[45].fir});
        res.insert_or_assign("mm[46].fir", DumpEntry{mm[46].fir});
        res.insert_or_assign("mm[47].fir", DumpEntry{mm[47].fir});
        res.insert_or_assign("mm[48].fir", DumpEntry{mm[48].fir});
        res.insert_or_assign("mm[49].fir", DumpEntry{mm[49].fir});
        res.insert_or_assign("mm[50].fir", DumpEntry{mm[50].fir});
        res.insert_or_assign("mm[51].fir", DumpEntry{mm[51].fir});
        res.insert_or_assign("mm[52].fir", DumpEntry{mm[52].fir});
        res.insert_or_assign("mm[53].fir", DumpEntry{mm[53].fir});
        res.insert_or_assign("mm[54].fir", DumpEntry{mm[54].fir});
        res.insert_or_assign("mm[55].fir", DumpEntry{mm[55].fir});
        res.insert_or_assign("mm[56].fir", DumpEntry{mm[56].fir});
        res.insert_or_assign("mm[57].fir", DumpEntry{mm[57].fir});
        res.insert_or_assign("mm[58].fir", DumpEntry{mm[58].fir});
        res.insert_or_assign("mm[59].fir", DumpEntry{mm[59].fir});
        res.insert_or_assign("mm[60].fir", DumpEntry{mm[60].fir});
        res.insert_or_assign("mm[61].fir", DumpEntry{mm[61].fir});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank::MsArray`
    //!
    //! @param ms A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ms
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank::MsArray& ms)
    {
        DumpMap res{ms.base()};
        res.insert_or_assign("ms[0].fir", DumpEntry{ms[0].fir});
        res.insert_or_assign("ms[1].fir", DumpEntry{ms[1].fir});
        res.insert_or_assign("ms[2].fir", DumpEntry{ms[2].fir});
        res.insert_or_assign("ms[3].fir", DumpEntry{ms[3].fir});
        res.insert_or_assign("ms[4].fir", DumpEntry{ms[4].fir});
        res.insert_or_assign("ms[5].fir", DumpEntry{ms[5].fir});
        res.insert_or_assign("ms[6].fir", DumpEntry{ms[6].fir});
        res.insert_or_assign("ms[7].fir", DumpEntry{ms[7].fir});
        res.insert_or_assign("ms[8].fir", DumpEntry{ms[8].fir});
        res.insert_or_assign("ms[9].fir", DumpEntry{ms[9].fir});
        res.insert_or_assign("ms[10].fir", DumpEntry{ms[10].fir});
        res.insert_or_assign("ms[11].fir", DumpEntry{ms[11].fir});
        res.insert_or_assign("ms[12].fir", DumpEntry{ms[12].fir});
        res.insert_or_assign("ms[13].fir", DumpEntry{ms[13].fir});
        res.insert_or_assign("ms[14].fir", DumpEntry{ms[14].fir});
        res.insert_or_assign("ms[15].fir", DumpEntry{ms[15].fir});
        res.insert_or_assign("ms[16].fir", DumpEntry{ms[16].fir});
        res.insert_or_assign("ms[17].fir", DumpEntry{ms[17].fir});
        res.insert_or_assign("ms[18].fir", DumpEntry{ms[18].fir});
        res.insert_or_assign("ms[19].fir", DumpEntry{ms[19].fir});
        res.insert_or_assign("ms[20].fir", DumpEntry{ms[20].fir});
        res.insert_or_assign("ms[21].fir", DumpEntry{ms[21].fir});
        res.insert_or_assign("ms[22].fir", DumpEntry{ms[22].fir});
        res.insert_or_assign("ms[23].fir", DumpEntry{ms[23].fir});
        res.insert_or_assign("ms[24].fir", DumpEntry{ms[24].fir});
        res.insert_or_assign("ms[25].fir", DumpEntry{ms[25].fir});
        res.insert_or_assign("ms[26].fir", DumpEntry{ms[26].fir});
        res.insert_or_assign("ms[27].fir", DumpEntry{ms[27].fir});
        res.insert_or_assign("ms[28].fir", DumpEntry{ms[28].fir});
        res.insert_or_assign("ms[29].fir", DumpEntry{ms[29].fir});
        res.insert_or_assign("ms[30].fir", DumpEntry{ms[30].fir});
        res.insert_or_assign("ms[31].fir", DumpEntry{ms[31].fir});
        res.insert_or_assign("ms[32].fir", DumpEntry{ms[32].fir});
        res.insert_or_assign("ms[33].fir", DumpEntry{ms[33].fir});
        res.insert_or_assign("ms[34].fir", DumpEntry{ms[34].fir});
        res.insert_or_assign("ms[35].fir", DumpEntry{ms[35].fir});
        res.insert_or_assign("ms[36].fir", DumpEntry{ms[36].fir});
        res.insert_or_assign("ms[37].fir", DumpEntry{ms[37].fir});
        res.insert_or_assign("ms[38].fir", DumpEntry{ms[38].fir});
        res.insert_or_assign("ms[39].fir", DumpEntry{ms[39].fir});
        res.insert_or_assign("ms[40].fir", DumpEntry{ms[40].fir});
        res.insert_or_assign("ms[41].fir", DumpEntry{ms[41].fir});
        res.insert_or_assign("ms[42].fir", DumpEntry{ms[42].fir});
        res.insert_or_assign("ms[43].fir", DumpEntry{ms[43].fir});
        res.insert_or_assign("ms[44].fir", DumpEntry{ms[44].fir});
        res.insert_or_assign("ms[45].fir", DumpEntry{ms[45].fir});
        res.insert_or_assign("ms[46].fir", DumpEntry{ms[46].fir});
        res.insert_or_assign("ms[47].fir", DumpEntry{ms[47].fir});
        res.insert_or_assign("ms[48].fir", DumpEntry{ms[48].fir});
        res.insert_or_assign("ms[49].fir", DumpEntry{ms[49].fir});
        res.insert_or_assign("ms[50].fir", DumpEntry{ms[50].fir});
        res.insert_or_assign("ms[51].fir", DumpEntry{ms[51].fir});
        res.insert_or_assign("ms[52].fir", DumpEntry{ms[52].fir});
        res.insert_or_assign("ms[53].fir", DumpEntry{ms[53].fir});
        res.insert_or_assign("ms[54].fir", DumpEntry{ms[54].fir});
        res.insert_or_assign("ms[55].fir", DumpEntry{ms[55].fir});
        res.insert_or_assign("ms[56].fir", DumpEntry{ms[56].fir});
        res.insert_or_assign("ms[57].fir", DumpEntry{ms[57].fir});
        res.insert_or_assign("ms[58].fir", DumpEntry{ms[58].fir});
        res.insert_or_assign("ms[59].fir", DumpEntry{ms[59].fir});
        res.insert_or_assign("ms[60].fir", DumpEntry{ms[60].fir});
        res.insert_or_assign("ms[61].fir", DumpEntry{ms[61].fir});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SignalBank`
    //!
    //! @param signalBank A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under signalBank
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SignalBank& signalBank)
    {
        DumpMap res{signalBank.base()};
        res.insert_or_assign("signalBank.digI0", DumpEntry{signalBank.digI0});
        res.insert_or_assign("signalBank.digI1", DumpEntry{signalBank.digI1});
        res.insert_or_assign("signalBank.digIndI", DumpEntry{signalBank.digIndI});
        res.insert_or_assign("signalBank.contactI", DumpEntry{signalBank.contactI});
        res.insert_or_assign("signalBank.opticalI", DumpEntry{signalBank.opticalI});
        res.insert_or_assign("signalBank.protI", DumpEntry{signalBank.protI});
        res.insert_or_assign("signalBank.digO", DumpEntry{signalBank.digO});
        res.insert_or_assign("signalBank.digOcO", DumpEntry{signalBank.digOcO});
        res.insert_or_assign("signalBank.contactO", DumpEntry{signalBank.contactO});
        res.insert_or_assign("signalBank.opticalO", DumpEntry{signalBank.opticalO});
        res.insert_or_assign("signalBank.minMaxLim0", DumpEntry{signalBank.minMaxLim0});
        res.insert_or_assign("signalBank.minMaxLim1", DumpEntry{signalBank.minMaxLim1});
        res.insert_or_assign("signalBank.rmsLim0", DumpEntry{signalBank.rmsLim0});
        res.insert_or_assign("signalBank.rmsLim1", DumpEntry{signalBank.rmsLim1});
        res.insert_or_assign("signalBank.reg[0].fir", DumpEntry{signalBank.reg[0].fir});
        res.insert_or_assign("signalBank.reg[1].fir", DumpEntry{signalBank.reg[1].fir});
        res.insert_or_assign("signalBank.reg[2].fir", DumpEntry{signalBank.reg[2].fir});
        res.insert_or_assign("signalBank.reg[3].fir", DumpEntry{signalBank.reg[3].fir});
        res.insert_or_assign("signalBank.reg[4].fir", DumpEntry{signalBank.reg[4].fir});
        res.insert_or_assign("signalBank.reg[5].fir", DumpEntry{signalBank.reg[5].fir});
        res.insert_or_assign("signalBank.reg[6].fir", DumpEntry{signalBank.reg[6].fir});
        res.insert_or_assign("signalBank.reg[7].fir", DumpEntry{signalBank.reg[7].fir});
        res.insert_or_assign("signalBank.reg[8].fir", DumpEntry{signalBank.reg[8].fir});
        res.insert_or_assign("signalBank.reg[9].fir", DumpEntry{signalBank.reg[9].fir});
        res.insert_or_assign("signalBank.reg[10].fir", DumpEntry{signalBank.reg[10].fir});
        res.insert_or_assign("signalBank.reg[11].fir", DumpEntry{signalBank.reg[11].fir});
        res.insert_or_assign("signalBank.reg[12].fir", DumpEntry{signalBank.reg[12].fir});
        res.insert_or_assign("signalBank.reg[13].fir", DumpEntry{signalBank.reg[13].fir});
        res.insert_or_assign("signalBank.reg[14].fir", DumpEntry{signalBank.reg[14].fir});
        res.insert_or_assign("signalBank.reg[15].fir", DumpEntry{signalBank.reg[15].fir});
        res.insert_or_assign("signalBank.reg[16].fir", DumpEntry{signalBank.reg[16].fir});
        res.insert_or_assign("signalBank.reg[17].fir", DumpEntry{signalBank.reg[17].fir});
        res.insert_or_assign("signalBank.reg[18].fir", DumpEntry{signalBank.reg[18].fir});
        res.insert_or_assign("signalBank.reg[19].fir", DumpEntry{signalBank.reg[19].fir});
        res.insert_or_assign("signalBank.reg[20].fir", DumpEntry{signalBank.reg[20].fir});
        res.insert_or_assign("signalBank.reg[21].fir", DumpEntry{signalBank.reg[21].fir});
        res.insert_or_assign("signalBank.reg[22].fir", DumpEntry{signalBank.reg[22].fir});
        res.insert_or_assign("signalBank.reg[23].fir", DumpEntry{signalBank.reg[23].fir});
        res.insert_or_assign("signalBank.reg[24].fir", DumpEntry{signalBank.reg[24].fir});
        res.insert_or_assign("signalBank.reg[25].fir", DumpEntry{signalBank.reg[25].fir});
        res.insert_or_assign("signalBank.reg[26].fir", DumpEntry{signalBank.reg[26].fir});
        res.insert_or_assign("signalBank.reg[27].fir", DumpEntry{signalBank.reg[27].fir});
        res.insert_or_assign("signalBank.reg[28].fir", DumpEntry{signalBank.reg[28].fir});
        res.insert_or_assign("signalBank.reg[29].fir", DumpEntry{signalBank.reg[29].fir});
        res.insert_or_assign("signalBank.reg[30].fir", DumpEntry{signalBank.reg[30].fir});
        res.insert_or_assign("signalBank.reg[31].fir", DumpEntry{signalBank.reg[31].fir});
        res.insert_or_assign("signalBank.reg[32].fir", DumpEntry{signalBank.reg[32].fir});
        res.insert_or_assign("signalBank.reg[33].fir", DumpEntry{signalBank.reg[33].fir});
        res.insert_or_assign("signalBank.reg[34].fir", DumpEntry{signalBank.reg[34].fir});
        res.insert_or_assign("signalBank.reg[35].fir", DumpEntry{signalBank.reg[35].fir});
        res.insert_or_assign("signalBank.reg[36].fir", DumpEntry{signalBank.reg[36].fir});
        res.insert_or_assign("signalBank.reg[37].fir", DumpEntry{signalBank.reg[37].fir});
        res.insert_or_assign("signalBank.reg[38].fir", DumpEntry{signalBank.reg[38].fir});
        res.insert_or_assign("signalBank.reg[39].fir", DumpEntry{signalBank.reg[39].fir});
        res.insert_or_assign("signalBank.reg[40].fir", DumpEntry{signalBank.reg[40].fir});
        res.insert_or_assign("signalBank.reg[41].fir", DumpEntry{signalBank.reg[41].fir});
        res.insert_or_assign("signalBank.reg[42].fir", DumpEntry{signalBank.reg[42].fir});
        res.insert_or_assign("signalBank.reg[43].fir", DumpEntry{signalBank.reg[43].fir});
        res.insert_or_assign("signalBank.reg[44].fir", DumpEntry{signalBank.reg[44].fir});
        res.insert_or_assign("signalBank.reg[45].fir", DumpEntry{signalBank.reg[45].fir});
        res.insert_or_assign("signalBank.reg[46].fir", DumpEntry{signalBank.reg[46].fir});
        res.insert_or_assign("signalBank.reg[47].fir", DumpEntry{signalBank.reg[47].fir});
        res.insert_or_assign("signalBank.reg[48].fir", DumpEntry{signalBank.reg[48].fir});
        res.insert_or_assign("signalBank.reg[49].fir", DumpEntry{signalBank.reg[49].fir});
        res.insert_or_assign("signalBank.reg[50].fir", DumpEntry{signalBank.reg[50].fir});
        res.insert_or_assign("signalBank.reg[51].fir", DumpEntry{signalBank.reg[51].fir});
        res.insert_or_assign("signalBank.reg[52].fir", DumpEntry{signalBank.reg[52].fir});
        res.insert_or_assign("signalBank.reg[53].fir", DumpEntry{signalBank.reg[53].fir});
        res.insert_or_assign("signalBank.reg[54].fir", DumpEntry{signalBank.reg[54].fir});
        res.insert_or_assign("signalBank.reg[55].fir", DumpEntry{signalBank.reg[55].fir});
        res.insert_or_assign("signalBank.reg[56].fir", DumpEntry{signalBank.reg[56].fir});
        res.insert_or_assign("signalBank.reg[57].fir", DumpEntry{signalBank.reg[57].fir});
        res.insert_or_assign("signalBank.reg[58].fir", DumpEntry{signalBank.reg[58].fir});
        res.insert_or_assign("signalBank.reg[59].fir", DumpEntry{signalBank.reg[59].fir});
        res.insert_or_assign("signalBank.reg[60].fir", DumpEntry{signalBank.reg[60].fir});
        res.insert_or_assign("signalBank.reg[61].fir", DumpEntry{signalBank.reg[61].fir});
        res.insert_or_assign("signalBank.vloop[0].fir", DumpEntry{signalBank.vloop[0].fir});
        res.insert_or_assign("signalBank.vloop[1].fir", DumpEntry{signalBank.vloop[1].fir});
        res.insert_or_assign("signalBank.vloop[2].fir", DumpEntry{signalBank.vloop[2].fir});
        res.insert_or_assign("signalBank.vloop[3].fir", DumpEntry{signalBank.vloop[3].fir});
        res.insert_or_assign("signalBank.vloop[4].fir", DumpEntry{signalBank.vloop[4].fir});
        res.insert_or_assign("signalBank.vloop[5].fir", DumpEntry{signalBank.vloop[5].fir});
        res.insert_or_assign("signalBank.vloop[6].fir", DumpEntry{signalBank.vloop[6].fir});
        res.insert_or_assign("signalBank.vloop[7].fir", DumpEntry{signalBank.vloop[7].fir});
        res.insert_or_assign("signalBank.vloop[8].fir", DumpEntry{signalBank.vloop[8].fir});
        res.insert_or_assign("signalBank.vloop[9].fir", DumpEntry{signalBank.vloop[9].fir});
        res.insert_or_assign("signalBank.vloop[10].fir", DumpEntry{signalBank.vloop[10].fir});
        res.insert_or_assign("signalBank.vloop[11].fir", DumpEntry{signalBank.vloop[11].fir});
        res.insert_or_assign("signalBank.vloop[12].fir", DumpEntry{signalBank.vloop[12].fir});
        res.insert_or_assign("signalBank.vloop[13].fir", DumpEntry{signalBank.vloop[13].fir});
        res.insert_or_assign("signalBank.vloop[14].fir", DumpEntry{signalBank.vloop[14].fir});
        res.insert_or_assign("signalBank.vloop[15].fir", DumpEntry{signalBank.vloop[15].fir});
        res.insert_or_assign("signalBank.vloop[16].fir", DumpEntry{signalBank.vloop[16].fir});
        res.insert_or_assign("signalBank.vloop[17].fir", DumpEntry{signalBank.vloop[17].fir});
        res.insert_or_assign("signalBank.vloop[18].fir", DumpEntry{signalBank.vloop[18].fir});
        res.insert_or_assign("signalBank.vloop[19].fir", DumpEntry{signalBank.vloop[19].fir});
        res.insert_or_assign("signalBank.vloop[20].fir", DumpEntry{signalBank.vloop[20].fir});
        res.insert_or_assign("signalBank.vloop[21].fir", DumpEntry{signalBank.vloop[21].fir});
        res.insert_or_assign("signalBank.vloop[22].fir", DumpEntry{signalBank.vloop[22].fir});
        res.insert_or_assign("signalBank.vloop[23].fir", DumpEntry{signalBank.vloop[23].fir});
        res.insert_or_assign("signalBank.vloop[24].fir", DumpEntry{signalBank.vloop[24].fir});
        res.insert_or_assign("signalBank.vloop[25].fir", DumpEntry{signalBank.vloop[25].fir});
        res.insert_or_assign("signalBank.vloop[26].fir", DumpEntry{signalBank.vloop[26].fir});
        res.insert_or_assign("signalBank.vloop[27].fir", DumpEntry{signalBank.vloop[27].fir});
        res.insert_or_assign("signalBank.vloop[28].fir", DumpEntry{signalBank.vloop[28].fir});
        res.insert_or_assign("signalBank.vloop[29].fir", DumpEntry{signalBank.vloop[29].fir});
        res.insert_or_assign("signalBank.vloop[30].fir", DumpEntry{signalBank.vloop[30].fir});
        res.insert_or_assign("signalBank.vloop[31].fir", DumpEntry{signalBank.vloop[31].fir});
        res.insert_or_assign("signalBank.vloop[32].fir", DumpEntry{signalBank.vloop[32].fir});
        res.insert_or_assign("signalBank.vloop[33].fir", DumpEntry{signalBank.vloop[33].fir});
        res.insert_or_assign("signalBank.vloop[34].fir", DumpEntry{signalBank.vloop[34].fir});
        res.insert_or_assign("signalBank.vloop[35].fir", DumpEntry{signalBank.vloop[35].fir});
        res.insert_or_assign("signalBank.vloop[36].fir", DumpEntry{signalBank.vloop[36].fir});
        res.insert_or_assign("signalBank.vloop[37].fir", DumpEntry{signalBank.vloop[37].fir});
        res.insert_or_assign("signalBank.vloop[38].fir", DumpEntry{signalBank.vloop[38].fir});
        res.insert_or_assign("signalBank.vloop[39].fir", DumpEntry{signalBank.vloop[39].fir});
        res.insert_or_assign("signalBank.vloop[40].fir", DumpEntry{signalBank.vloop[40].fir});
        res.insert_or_assign("signalBank.vloop[41].fir", DumpEntry{signalBank.vloop[41].fir});
        res.insert_or_assign("signalBank.vloop[42].fir", DumpEntry{signalBank.vloop[42].fir});
        res.insert_or_assign("signalBank.vloop[43].fir", DumpEntry{signalBank.vloop[43].fir});
        res.insert_or_assign("signalBank.vloop[44].fir", DumpEntry{signalBank.vloop[44].fir});
        res.insert_or_assign("signalBank.vloop[45].fir", DumpEntry{signalBank.vloop[45].fir});
        res.insert_or_assign("signalBank.vloop[46].fir", DumpEntry{signalBank.vloop[46].fir});
        res.insert_or_assign("signalBank.vloop[47].fir", DumpEntry{signalBank.vloop[47].fir});
        res.insert_or_assign("signalBank.vloop[48].fir", DumpEntry{signalBank.vloop[48].fir});
        res.insert_or_assign("signalBank.vloop[49].fir", DumpEntry{signalBank.vloop[49].fir});
        res.insert_or_assign("signalBank.vloop[50].fir", DumpEntry{signalBank.vloop[50].fir});
        res.insert_or_assign("signalBank.vloop[51].fir", DumpEntry{signalBank.vloop[51].fir});
        res.insert_or_assign("signalBank.vloop[52].fir", DumpEntry{signalBank.vloop[52].fir});
        res.insert_or_assign("signalBank.vloop[53].fir", DumpEntry{signalBank.vloop[53].fir});
        res.insert_or_assign("signalBank.vloop[54].fir", DumpEntry{signalBank.vloop[54].fir});
        res.insert_or_assign("signalBank.vloop[55].fir", DumpEntry{signalBank.vloop[55].fir});
        res.insert_or_assign("signalBank.vloop[56].fir", DumpEntry{signalBank.vloop[56].fir});
        res.insert_or_assign("signalBank.vloop[57].fir", DumpEntry{signalBank.vloop[57].fir});
        res.insert_or_assign("signalBank.vloop[58].fir", DumpEntry{signalBank.vloop[58].fir});
        res.insert_or_assign("signalBank.vloop[59].fir", DumpEntry{signalBank.vloop[59].fir});
        res.insert_or_assign("signalBank.vloop[60].fir", DumpEntry{signalBank.vloop[60].fir});
        res.insert_or_assign("signalBank.vloop[61].fir", DumpEntry{signalBank.vloop[61].fir});
        res.insert_or_assign("signalBank.raw[0].raw", DumpEntry{signalBank.raw[0].raw});
        res.insert_or_assign("signalBank.raw[1].raw", DumpEntry{signalBank.raw[1].raw});
        res.insert_or_assign("signalBank.raw[2].raw", DumpEntry{signalBank.raw[2].raw});
        res.insert_or_assign("signalBank.raw[3].raw", DumpEntry{signalBank.raw[3].raw});
        res.insert_or_assign("signalBank.raw[4].raw", DumpEntry{signalBank.raw[4].raw});
        res.insert_or_assign("signalBank.raw[5].raw", DumpEntry{signalBank.raw[5].raw});
        res.insert_or_assign("signalBank.raw[6].raw", DumpEntry{signalBank.raw[6].raw});
        res.insert_or_assign("signalBank.raw[7].raw", DumpEntry{signalBank.raw[7].raw});
        res.insert_or_assign("signalBank.raw[8].raw", DumpEntry{signalBank.raw[8].raw});
        res.insert_or_assign("signalBank.raw[9].raw", DumpEntry{signalBank.raw[9].raw});
        res.insert_or_assign("signalBank.raw[10].raw", DumpEntry{signalBank.raw[10].raw});
        res.insert_or_assign("signalBank.raw[11].raw", DumpEntry{signalBank.raw[11].raw});
        res.insert_or_assign("signalBank.raw[12].raw", DumpEntry{signalBank.raw[12].raw});
        res.insert_or_assign("signalBank.raw[13].raw", DumpEntry{signalBank.raw[13].raw});
        res.insert_or_assign("signalBank.raw[14].raw", DumpEntry{signalBank.raw[14].raw});
        res.insert_or_assign("signalBank.raw[15].raw", DumpEntry{signalBank.raw[15].raw});
        res.insert_or_assign("signalBank.raw[16].raw", DumpEntry{signalBank.raw[16].raw});
        res.insert_or_assign("signalBank.raw[17].raw", DumpEntry{signalBank.raw[17].raw});
        res.insert_or_assign("signalBank.raw[18].raw", DumpEntry{signalBank.raw[18].raw});
        res.insert_or_assign("signalBank.raw[19].raw", DumpEntry{signalBank.raw[19].raw});
        res.insert_or_assign("signalBank.raw[20].raw", DumpEntry{signalBank.raw[20].raw});
        res.insert_or_assign("signalBank.raw[21].raw", DumpEntry{signalBank.raw[21].raw});
        res.insert_or_assign("signalBank.raw[22].raw", DumpEntry{signalBank.raw[22].raw});
        res.insert_or_assign("signalBank.raw[23].raw", DumpEntry{signalBank.raw[23].raw});
        res.insert_or_assign("signalBank.raw[24].raw", DumpEntry{signalBank.raw[24].raw});
        res.insert_or_assign("signalBank.raw[25].raw", DumpEntry{signalBank.raw[25].raw});
        res.insert_or_assign("signalBank.raw[26].raw", DumpEntry{signalBank.raw[26].raw});
        res.insert_or_assign("signalBank.raw[27].raw", DumpEntry{signalBank.raw[27].raw});
        res.insert_or_assign("signalBank.raw[28].raw", DumpEntry{signalBank.raw[28].raw});
        res.insert_or_assign("signalBank.raw[29].raw", DumpEntry{signalBank.raw[29].raw});
        res.insert_or_assign("signalBank.raw[30].raw", DumpEntry{signalBank.raw[30].raw});
        res.insert_or_assign("signalBank.raw[31].raw", DumpEntry{signalBank.raw[31].raw});
        res.insert_or_assign("signalBank.raw[32].raw", DumpEntry{signalBank.raw[32].raw});
        res.insert_or_assign("signalBank.raw[33].raw", DumpEntry{signalBank.raw[33].raw});
        res.insert_or_assign("signalBank.raw[34].raw", DumpEntry{signalBank.raw[34].raw});
        res.insert_or_assign("signalBank.raw[35].raw", DumpEntry{signalBank.raw[35].raw});
        res.insert_or_assign("signalBank.raw[36].raw", DumpEntry{signalBank.raw[36].raw});
        res.insert_or_assign("signalBank.raw[37].raw", DumpEntry{signalBank.raw[37].raw});
        res.insert_or_assign("signalBank.raw[38].raw", DumpEntry{signalBank.raw[38].raw});
        res.insert_or_assign("signalBank.raw[39].raw", DumpEntry{signalBank.raw[39].raw});
        res.insert_or_assign("signalBank.raw[40].raw", DumpEntry{signalBank.raw[40].raw});
        res.insert_or_assign("signalBank.raw[41].raw", DumpEntry{signalBank.raw[41].raw});
        res.insert_or_assign("signalBank.raw[42].raw", DumpEntry{signalBank.raw[42].raw});
        res.insert_or_assign("signalBank.raw[43].raw", DumpEntry{signalBank.raw[43].raw});
        res.insert_or_assign("signalBank.raw[44].raw", DumpEntry{signalBank.raw[44].raw});
        res.insert_or_assign("signalBank.raw[45].raw", DumpEntry{signalBank.raw[45].raw});
        res.insert_or_assign("signalBank.raw[46].raw", DumpEntry{signalBank.raw[46].raw});
        res.insert_or_assign("signalBank.raw[47].raw", DumpEntry{signalBank.raw[47].raw});
        res.insert_or_assign("signalBank.raw[48].raw", DumpEntry{signalBank.raw[48].raw});
        res.insert_or_assign("signalBank.raw[49].raw", DumpEntry{signalBank.raw[49].raw});
        res.insert_or_assign("signalBank.raw[50].raw", DumpEntry{signalBank.raw[50].raw});
        res.insert_or_assign("signalBank.raw[51].raw", DumpEntry{signalBank.raw[51].raw});
        res.insert_or_assign("signalBank.raw[52].raw", DumpEntry{signalBank.raw[52].raw});
        res.insert_or_assign("signalBank.raw[53].raw", DumpEntry{signalBank.raw[53].raw});
        res.insert_or_assign("signalBank.raw[54].raw", DumpEntry{signalBank.raw[54].raw});
        res.insert_or_assign("signalBank.raw[55].raw", DumpEntry{signalBank.raw[55].raw});
        res.insert_or_assign("signalBank.raw[56].raw", DumpEntry{signalBank.raw[56].raw});
        res.insert_or_assign("signalBank.raw[57].raw", DumpEntry{signalBank.raw[57].raw});
        res.insert_or_assign("signalBank.raw[58].raw", DumpEntry{signalBank.raw[58].raw});
        res.insert_or_assign("signalBank.raw[59].raw", DumpEntry{signalBank.raw[59].raw});
        res.insert_or_assign("signalBank.raw[60].raw", DumpEntry{signalBank.raw[60].raw});
        res.insert_or_assign("signalBank.raw[61].raw", DumpEntry{signalBank.raw[61].raw});
        res.insert_or_assign("signalBank.mm[0].fir", DumpEntry{signalBank.mm[0].fir});
        res.insert_or_assign("signalBank.mm[1].fir", DumpEntry{signalBank.mm[1].fir});
        res.insert_or_assign("signalBank.mm[2].fir", DumpEntry{signalBank.mm[2].fir});
        res.insert_or_assign("signalBank.mm[3].fir", DumpEntry{signalBank.mm[3].fir});
        res.insert_or_assign("signalBank.mm[4].fir", DumpEntry{signalBank.mm[4].fir});
        res.insert_or_assign("signalBank.mm[5].fir", DumpEntry{signalBank.mm[5].fir});
        res.insert_or_assign("signalBank.mm[6].fir", DumpEntry{signalBank.mm[6].fir});
        res.insert_or_assign("signalBank.mm[7].fir", DumpEntry{signalBank.mm[7].fir});
        res.insert_or_assign("signalBank.mm[8].fir", DumpEntry{signalBank.mm[8].fir});
        res.insert_or_assign("signalBank.mm[9].fir", DumpEntry{signalBank.mm[9].fir});
        res.insert_or_assign("signalBank.mm[10].fir", DumpEntry{signalBank.mm[10].fir});
        res.insert_or_assign("signalBank.mm[11].fir", DumpEntry{signalBank.mm[11].fir});
        res.insert_or_assign("signalBank.mm[12].fir", DumpEntry{signalBank.mm[12].fir});
        res.insert_or_assign("signalBank.mm[13].fir", DumpEntry{signalBank.mm[13].fir});
        res.insert_or_assign("signalBank.mm[14].fir", DumpEntry{signalBank.mm[14].fir});
        res.insert_or_assign("signalBank.mm[15].fir", DumpEntry{signalBank.mm[15].fir});
        res.insert_or_assign("signalBank.mm[16].fir", DumpEntry{signalBank.mm[16].fir});
        res.insert_or_assign("signalBank.mm[17].fir", DumpEntry{signalBank.mm[17].fir});
        res.insert_or_assign("signalBank.mm[18].fir", DumpEntry{signalBank.mm[18].fir});
        res.insert_or_assign("signalBank.mm[19].fir", DumpEntry{signalBank.mm[19].fir});
        res.insert_or_assign("signalBank.mm[20].fir", DumpEntry{signalBank.mm[20].fir});
        res.insert_or_assign("signalBank.mm[21].fir", DumpEntry{signalBank.mm[21].fir});
        res.insert_or_assign("signalBank.mm[22].fir", DumpEntry{signalBank.mm[22].fir});
        res.insert_or_assign("signalBank.mm[23].fir", DumpEntry{signalBank.mm[23].fir});
        res.insert_or_assign("signalBank.mm[24].fir", DumpEntry{signalBank.mm[24].fir});
        res.insert_or_assign("signalBank.mm[25].fir", DumpEntry{signalBank.mm[25].fir});
        res.insert_or_assign("signalBank.mm[26].fir", DumpEntry{signalBank.mm[26].fir});
        res.insert_or_assign("signalBank.mm[27].fir", DumpEntry{signalBank.mm[27].fir});
        res.insert_or_assign("signalBank.mm[28].fir", DumpEntry{signalBank.mm[28].fir});
        res.insert_or_assign("signalBank.mm[29].fir", DumpEntry{signalBank.mm[29].fir});
        res.insert_or_assign("signalBank.mm[30].fir", DumpEntry{signalBank.mm[30].fir});
        res.insert_or_assign("signalBank.mm[31].fir", DumpEntry{signalBank.mm[31].fir});
        res.insert_or_assign("signalBank.mm[32].fir", DumpEntry{signalBank.mm[32].fir});
        res.insert_or_assign("signalBank.mm[33].fir", DumpEntry{signalBank.mm[33].fir});
        res.insert_or_assign("signalBank.mm[34].fir", DumpEntry{signalBank.mm[34].fir});
        res.insert_or_assign("signalBank.mm[35].fir", DumpEntry{signalBank.mm[35].fir});
        res.insert_or_assign("signalBank.mm[36].fir", DumpEntry{signalBank.mm[36].fir});
        res.insert_or_assign("signalBank.mm[37].fir", DumpEntry{signalBank.mm[37].fir});
        res.insert_or_assign("signalBank.mm[38].fir", DumpEntry{signalBank.mm[38].fir});
        res.insert_or_assign("signalBank.mm[39].fir", DumpEntry{signalBank.mm[39].fir});
        res.insert_or_assign("signalBank.mm[40].fir", DumpEntry{signalBank.mm[40].fir});
        res.insert_or_assign("signalBank.mm[41].fir", DumpEntry{signalBank.mm[41].fir});
        res.insert_or_assign("signalBank.mm[42].fir", DumpEntry{signalBank.mm[42].fir});
        res.insert_or_assign("signalBank.mm[43].fir", DumpEntry{signalBank.mm[43].fir});
        res.insert_or_assign("signalBank.mm[44].fir", DumpEntry{signalBank.mm[44].fir});
        res.insert_or_assign("signalBank.mm[45].fir", DumpEntry{signalBank.mm[45].fir});
        res.insert_or_assign("signalBank.mm[46].fir", DumpEntry{signalBank.mm[46].fir});
        res.insert_or_assign("signalBank.mm[47].fir", DumpEntry{signalBank.mm[47].fir});
        res.insert_or_assign("signalBank.mm[48].fir", DumpEntry{signalBank.mm[48].fir});
        res.insert_or_assign("signalBank.mm[49].fir", DumpEntry{signalBank.mm[49].fir});
        res.insert_or_assign("signalBank.mm[50].fir", DumpEntry{signalBank.mm[50].fir});
        res.insert_or_assign("signalBank.mm[51].fir", DumpEntry{signalBank.mm[51].fir});
        res.insert_or_assign("signalBank.mm[52].fir", DumpEntry{signalBank.mm[52].fir});
        res.insert_or_assign("signalBank.mm[53].fir", DumpEntry{signalBank.mm[53].fir});
        res.insert_or_assign("signalBank.mm[54].fir", DumpEntry{signalBank.mm[54].fir});
        res.insert_or_assign("signalBank.mm[55].fir", DumpEntry{signalBank.mm[55].fir});
        res.insert_or_assign("signalBank.mm[56].fir", DumpEntry{signalBank.mm[56].fir});
        res.insert_or_assign("signalBank.mm[57].fir", DumpEntry{signalBank.mm[57].fir});
        res.insert_or_assign("signalBank.mm[58].fir", DumpEntry{signalBank.mm[58].fir});
        res.insert_or_assign("signalBank.mm[59].fir", DumpEntry{signalBank.mm[59].fir});
        res.insert_or_assign("signalBank.mm[60].fir", DumpEntry{signalBank.mm[60].fir});
        res.insert_or_assign("signalBank.mm[61].fir", DumpEntry{signalBank.mm[61].fir});
        res.insert_or_assign("signalBank.ms[0].fir", DumpEntry{signalBank.ms[0].fir});
        res.insert_or_assign("signalBank.ms[1].fir", DumpEntry{signalBank.ms[1].fir});
        res.insert_or_assign("signalBank.ms[2].fir", DumpEntry{signalBank.ms[2].fir});
        res.insert_or_assign("signalBank.ms[3].fir", DumpEntry{signalBank.ms[3].fir});
        res.insert_or_assign("signalBank.ms[4].fir", DumpEntry{signalBank.ms[4].fir});
        res.insert_or_assign("signalBank.ms[5].fir", DumpEntry{signalBank.ms[5].fir});
        res.insert_or_assign("signalBank.ms[6].fir", DumpEntry{signalBank.ms[6].fir});
        res.insert_or_assign("signalBank.ms[7].fir", DumpEntry{signalBank.ms[7].fir});
        res.insert_or_assign("signalBank.ms[8].fir", DumpEntry{signalBank.ms[8].fir});
        res.insert_or_assign("signalBank.ms[9].fir", DumpEntry{signalBank.ms[9].fir});
        res.insert_or_assign("signalBank.ms[10].fir", DumpEntry{signalBank.ms[10].fir});
        res.insert_or_assign("signalBank.ms[11].fir", DumpEntry{signalBank.ms[11].fir});
        res.insert_or_assign("signalBank.ms[12].fir", DumpEntry{signalBank.ms[12].fir});
        res.insert_or_assign("signalBank.ms[13].fir", DumpEntry{signalBank.ms[13].fir});
        res.insert_or_assign("signalBank.ms[14].fir", DumpEntry{signalBank.ms[14].fir});
        res.insert_or_assign("signalBank.ms[15].fir", DumpEntry{signalBank.ms[15].fir});
        res.insert_or_assign("signalBank.ms[16].fir", DumpEntry{signalBank.ms[16].fir});
        res.insert_or_assign("signalBank.ms[17].fir", DumpEntry{signalBank.ms[17].fir});
        res.insert_or_assign("signalBank.ms[18].fir", DumpEntry{signalBank.ms[18].fir});
        res.insert_or_assign("signalBank.ms[19].fir", DumpEntry{signalBank.ms[19].fir});
        res.insert_or_assign("signalBank.ms[20].fir", DumpEntry{signalBank.ms[20].fir});
        res.insert_or_assign("signalBank.ms[21].fir", DumpEntry{signalBank.ms[21].fir});
        res.insert_or_assign("signalBank.ms[22].fir", DumpEntry{signalBank.ms[22].fir});
        res.insert_or_assign("signalBank.ms[23].fir", DumpEntry{signalBank.ms[23].fir});
        res.insert_or_assign("signalBank.ms[24].fir", DumpEntry{signalBank.ms[24].fir});
        res.insert_or_assign("signalBank.ms[25].fir", DumpEntry{signalBank.ms[25].fir});
        res.insert_or_assign("signalBank.ms[26].fir", DumpEntry{signalBank.ms[26].fir});
        res.insert_or_assign("signalBank.ms[27].fir", DumpEntry{signalBank.ms[27].fir});
        res.insert_or_assign("signalBank.ms[28].fir", DumpEntry{signalBank.ms[28].fir});
        res.insert_or_assign("signalBank.ms[29].fir", DumpEntry{signalBank.ms[29].fir});
        res.insert_or_assign("signalBank.ms[30].fir", DumpEntry{signalBank.ms[30].fir});
        res.insert_or_assign("signalBank.ms[31].fir", DumpEntry{signalBank.ms[31].fir});
        res.insert_or_assign("signalBank.ms[32].fir", DumpEntry{signalBank.ms[32].fir});
        res.insert_or_assign("signalBank.ms[33].fir", DumpEntry{signalBank.ms[33].fir});
        res.insert_or_assign("signalBank.ms[34].fir", DumpEntry{signalBank.ms[34].fir});
        res.insert_or_assign("signalBank.ms[35].fir", DumpEntry{signalBank.ms[35].fir});
        res.insert_or_assign("signalBank.ms[36].fir", DumpEntry{signalBank.ms[36].fir});
        res.insert_or_assign("signalBank.ms[37].fir", DumpEntry{signalBank.ms[37].fir});
        res.insert_or_assign("signalBank.ms[38].fir", DumpEntry{signalBank.ms[38].fir});
        res.insert_or_assign("signalBank.ms[39].fir", DumpEntry{signalBank.ms[39].fir});
        res.insert_or_assign("signalBank.ms[40].fir", DumpEntry{signalBank.ms[40].fir});
        res.insert_or_assign("signalBank.ms[41].fir", DumpEntry{signalBank.ms[41].fir});
        res.insert_or_assign("signalBank.ms[42].fir", DumpEntry{signalBank.ms[42].fir});
        res.insert_or_assign("signalBank.ms[43].fir", DumpEntry{signalBank.ms[43].fir});
        res.insert_or_assign("signalBank.ms[44].fir", DumpEntry{signalBank.ms[44].fir});
        res.insert_or_assign("signalBank.ms[45].fir", DumpEntry{signalBank.ms[45].fir});
        res.insert_or_assign("signalBank.ms[46].fir", DumpEntry{signalBank.ms[46].fir});
        res.insert_or_assign("signalBank.ms[47].fir", DumpEntry{signalBank.ms[47].fir});
        res.insert_or_assign("signalBank.ms[48].fir", DumpEntry{signalBank.ms[48].fir});
        res.insert_or_assign("signalBank.ms[49].fir", DumpEntry{signalBank.ms[49].fir});
        res.insert_or_assign("signalBank.ms[50].fir", DumpEntry{signalBank.ms[50].fir});
        res.insert_or_assign("signalBank.ms[51].fir", DumpEntry{signalBank.ms[51].fir});
        res.insert_or_assign("signalBank.ms[52].fir", DumpEntry{signalBank.ms[52].fir});
        res.insert_or_assign("signalBank.ms[53].fir", DumpEntry{signalBank.ms[53].fir});
        res.insert_or_assign("signalBank.ms[54].fir", DumpEntry{signalBank.ms[54].fir});
        res.insert_or_assign("signalBank.ms[55].fir", DumpEntry{signalBank.ms[55].fir});
        res.insert_or_assign("signalBank.ms[56].fir", DumpEntry{signalBank.ms[56].fir});
        res.insert_or_assign("signalBank.ms[57].fir", DumpEntry{signalBank.ms[57].fir});
        res.insert_or_assign("signalBank.ms[58].fir", DumpEntry{signalBank.ms[58].fir});
        res.insert_or_assign("signalBank.ms[59].fir", DumpEntry{signalBank.ms[59].fir});
        res.insert_or_assign("signalBank.ms[60].fir", DumpEntry{signalBank.ms[60].fir});
        res.insert_or_assign("signalBank.ms[61].fir", DumpEntry{signalBank.ms[61].fir});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir::ChannelArrayItem::RFir`
    //!
    //! @param rFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rFir
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir::ChannelArrayItem::RFir& rFir)
    {
        DumpMap res{rFir.base()};
        res.insert_or_assign("rFir.m", DumpEntry{rFir.m});
        res.insert_or_assign("rFir.n", DumpEntry{rFir.n});
        res.insert_or_assign("rFir.s", DumpEntry{rFir.s});
        res.insert_or_assign("rFir.r", DumpEntry{rFir.r});
        res.insert_or_assign("rFir.tSc", DumpEntry{rFir.tSc});
        res.insert_or_assign("rFir.phase", DumpEntry{rFir.phase});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir::ChannelArrayItem::VFir`
    //!
    //! @param vFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under vFir
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir::ChannelArrayItem::VFir& vFir)
    {
        DumpMap res{vFir.base()};
        res.insert_or_assign("vFir.m", DumpEntry{vFir.m});
        res.insert_or_assign("vFir.n", DumpEntry{vFir.n});
        res.insert_or_assign("vFir.s", DumpEntry{vFir.s});
        res.insert_or_assign("vFir.r", DumpEntry{vFir.r});
        res.insert_or_assign("vFir.tSc", DumpEntry{vFir.tSc});
        res.insert_or_assign("vFir.phase", DumpEntry{vFir.phase});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir::ChannelArrayItem::MmFir`
    //!
    //! @param mmFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under mmFir
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir::ChannelArrayItem::MmFir& mmFir)
    {
        DumpMap res{mmFir.base()};
        res.insert_or_assign("mmFir.m", DumpEntry{mmFir.m});
        res.insert_or_assign("mmFir.n", DumpEntry{mmFir.n});
        res.insert_or_assign("mmFir.s", DumpEntry{mmFir.s});
        res.insert_or_assign("mmFir.r", DumpEntry{mmFir.r});
        res.insert_or_assign("mmFir.tSc", DumpEntry{mmFir.tSc});
        res.insert_or_assign("mmFir.phase", DumpEntry{mmFir.phase});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir::ChannelArrayItem::Limit`
    //!
    //! @param limit A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under limit
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir::ChannelArrayItem::Limit& limit)
    {
        DumpMap res{limit.base()};
        res.insert_or_assign("limit.maxLimit", DumpEntry{limit.maxLimit});
        res.insert_or_assign("limit.minLimit", DumpEntry{limit.minLimit});
        res.insert_or_assign("limit.filterLength", DumpEntry{limit.filterLength});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir::ChannelArray`
    //!
    //! @param channel A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under channel
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir::ChannelArray& channel)
    {
        DumpMap res{channel.base()};
        res.insert_or_assign("channel[0].rFir.m", DumpEntry{channel[0].rFir.m});
        res.insert_or_assign("channel[0].rFir.n", DumpEntry{channel[0].rFir.n});
        res.insert_or_assign("channel[0].rFir.s", DumpEntry{channel[0].rFir.s});
        res.insert_or_assign("channel[0].rFir.r", DumpEntry{channel[0].rFir.r});
        res.insert_or_assign("channel[0].rFir.tSc", DumpEntry{channel[0].rFir.tSc});
        res.insert_or_assign("channel[0].rFir.phase", DumpEntry{channel[0].rFir.phase});
        res.insert_or_assign("channel[0].vFir.m", DumpEntry{channel[0].vFir.m});
        res.insert_or_assign("channel[0].vFir.n", DumpEntry{channel[0].vFir.n});
        res.insert_or_assign("channel[0].vFir.s", DumpEntry{channel[0].vFir.s});
        res.insert_or_assign("channel[0].vFir.r", DumpEntry{channel[0].vFir.r});
        res.insert_or_assign("channel[0].vFir.tSc", DumpEntry{channel[0].vFir.tSc});
        res.insert_or_assign("channel[0].vFir.phase", DumpEntry{channel[0].vFir.phase});
        res.insert_or_assign("channel[0].mmFir.m", DumpEntry{channel[0].mmFir.m});
        res.insert_or_assign("channel[0].mmFir.n", DumpEntry{channel[0].mmFir.n});
        res.insert_or_assign("channel[0].mmFir.s", DumpEntry{channel[0].mmFir.s});
        res.insert_or_assign("channel[0].mmFir.r", DumpEntry{channel[0].mmFir.r});
        res.insert_or_assign("channel[0].mmFir.tSc", DumpEntry{channel[0].mmFir.tSc});
        res.insert_or_assign("channel[0].mmFir.phase", DumpEntry{channel[0].mmFir.phase});
        res.insert_or_assign("channel[0].limit.maxLimit", DumpEntry{channel[0].limit.maxLimit});
        res.insert_or_assign("channel[0].limit.minLimit", DumpEntry{channel[0].limit.minLimit});
        res.insert_or_assign("channel[0].limit.filterLength", DumpEntry{channel[0].limit.filterLength});
        res.insert_or_assign("channel[1].rFir.m", DumpEntry{channel[1].rFir.m});
        res.insert_or_assign("channel[1].rFir.n", DumpEntry{channel[1].rFir.n});
        res.insert_or_assign("channel[1].rFir.s", DumpEntry{channel[1].rFir.s});
        res.insert_or_assign("channel[1].rFir.r", DumpEntry{channel[1].rFir.r});
        res.insert_or_assign("channel[1].rFir.tSc", DumpEntry{channel[1].rFir.tSc});
        res.insert_or_assign("channel[1].rFir.phase", DumpEntry{channel[1].rFir.phase});
        res.insert_or_assign("channel[1].vFir.m", DumpEntry{channel[1].vFir.m});
        res.insert_or_assign("channel[1].vFir.n", DumpEntry{channel[1].vFir.n});
        res.insert_or_assign("channel[1].vFir.s", DumpEntry{channel[1].vFir.s});
        res.insert_or_assign("channel[1].vFir.r", DumpEntry{channel[1].vFir.r});
        res.insert_or_assign("channel[1].vFir.tSc", DumpEntry{channel[1].vFir.tSc});
        res.insert_or_assign("channel[1].vFir.phase", DumpEntry{channel[1].vFir.phase});
        res.insert_or_assign("channel[1].mmFir.m", DumpEntry{channel[1].mmFir.m});
        res.insert_or_assign("channel[1].mmFir.n", DumpEntry{channel[1].mmFir.n});
        res.insert_or_assign("channel[1].mmFir.s", DumpEntry{channel[1].mmFir.s});
        res.insert_or_assign("channel[1].mmFir.r", DumpEntry{channel[1].mmFir.r});
        res.insert_or_assign("channel[1].mmFir.tSc", DumpEntry{channel[1].mmFir.tSc});
        res.insert_or_assign("channel[1].mmFir.phase", DumpEntry{channel[1].mmFir.phase});
        res.insert_or_assign("channel[1].limit.maxLimit", DumpEntry{channel[1].limit.maxLimit});
        res.insert_or_assign("channel[1].limit.minLimit", DumpEntry{channel[1].limit.minLimit});
        res.insert_or_assign("channel[1].limit.filterLength", DumpEntry{channel[1].limit.filterLength});
        res.insert_or_assign("channel[2].rFir.m", DumpEntry{channel[2].rFir.m});
        res.insert_or_assign("channel[2].rFir.n", DumpEntry{channel[2].rFir.n});
        res.insert_or_assign("channel[2].rFir.s", DumpEntry{channel[2].rFir.s});
        res.insert_or_assign("channel[2].rFir.r", DumpEntry{channel[2].rFir.r});
        res.insert_or_assign("channel[2].rFir.tSc", DumpEntry{channel[2].rFir.tSc});
        res.insert_or_assign("channel[2].rFir.phase", DumpEntry{channel[2].rFir.phase});
        res.insert_or_assign("channel[2].vFir.m", DumpEntry{channel[2].vFir.m});
        res.insert_or_assign("channel[2].vFir.n", DumpEntry{channel[2].vFir.n});
        res.insert_or_assign("channel[2].vFir.s", DumpEntry{channel[2].vFir.s});
        res.insert_or_assign("channel[2].vFir.r", DumpEntry{channel[2].vFir.r});
        res.insert_or_assign("channel[2].vFir.tSc", DumpEntry{channel[2].vFir.tSc});
        res.insert_or_assign("channel[2].vFir.phase", DumpEntry{channel[2].vFir.phase});
        res.insert_or_assign("channel[2].mmFir.m", DumpEntry{channel[2].mmFir.m});
        res.insert_or_assign("channel[2].mmFir.n", DumpEntry{channel[2].mmFir.n});
        res.insert_or_assign("channel[2].mmFir.s", DumpEntry{channel[2].mmFir.s});
        res.insert_or_assign("channel[2].mmFir.r", DumpEntry{channel[2].mmFir.r});
        res.insert_or_assign("channel[2].mmFir.tSc", DumpEntry{channel[2].mmFir.tSc});
        res.insert_or_assign("channel[2].mmFir.phase", DumpEntry{channel[2].mmFir.phase});
        res.insert_or_assign("channel[2].limit.maxLimit", DumpEntry{channel[2].limit.maxLimit});
        res.insert_or_assign("channel[2].limit.minLimit", DumpEntry{channel[2].limit.minLimit});
        res.insert_or_assign("channel[2].limit.filterLength", DumpEntry{channel[2].limit.filterLength});
        res.insert_or_assign("channel[3].rFir.m", DumpEntry{channel[3].rFir.m});
        res.insert_or_assign("channel[3].rFir.n", DumpEntry{channel[3].rFir.n});
        res.insert_or_assign("channel[3].rFir.s", DumpEntry{channel[3].rFir.s});
        res.insert_or_assign("channel[3].rFir.r", DumpEntry{channel[3].rFir.r});
        res.insert_or_assign("channel[3].rFir.tSc", DumpEntry{channel[3].rFir.tSc});
        res.insert_or_assign("channel[3].rFir.phase", DumpEntry{channel[3].rFir.phase});
        res.insert_or_assign("channel[3].vFir.m", DumpEntry{channel[3].vFir.m});
        res.insert_or_assign("channel[3].vFir.n", DumpEntry{channel[3].vFir.n});
        res.insert_or_assign("channel[3].vFir.s", DumpEntry{channel[3].vFir.s});
        res.insert_or_assign("channel[3].vFir.r", DumpEntry{channel[3].vFir.r});
        res.insert_or_assign("channel[3].vFir.tSc", DumpEntry{channel[3].vFir.tSc});
        res.insert_or_assign("channel[3].vFir.phase", DumpEntry{channel[3].vFir.phase});
        res.insert_or_assign("channel[3].mmFir.m", DumpEntry{channel[3].mmFir.m});
        res.insert_or_assign("channel[3].mmFir.n", DumpEntry{channel[3].mmFir.n});
        res.insert_or_assign("channel[3].mmFir.s", DumpEntry{channel[3].mmFir.s});
        res.insert_or_assign("channel[3].mmFir.r", DumpEntry{channel[3].mmFir.r});
        res.insert_or_assign("channel[3].mmFir.tSc", DumpEntry{channel[3].mmFir.tSc});
        res.insert_or_assign("channel[3].mmFir.phase", DumpEntry{channel[3].mmFir.phase});
        res.insert_or_assign("channel[3].limit.maxLimit", DumpEntry{channel[3].limit.maxLimit});
        res.insert_or_assign("channel[3].limit.minLimit", DumpEntry{channel[3].limit.minLimit});
        res.insert_or_assign("channel[3].limit.filterLength", DumpEntry{channel[3].limit.filterLength});
        res.insert_or_assign("channel[4].rFir.m", DumpEntry{channel[4].rFir.m});
        res.insert_or_assign("channel[4].rFir.n", DumpEntry{channel[4].rFir.n});
        res.insert_or_assign("channel[4].rFir.s", DumpEntry{channel[4].rFir.s});
        res.insert_or_assign("channel[4].rFir.r", DumpEntry{channel[4].rFir.r});
        res.insert_or_assign("channel[4].rFir.tSc", DumpEntry{channel[4].rFir.tSc});
        res.insert_or_assign("channel[4].rFir.phase", DumpEntry{channel[4].rFir.phase});
        res.insert_or_assign("channel[4].vFir.m", DumpEntry{channel[4].vFir.m});
        res.insert_or_assign("channel[4].vFir.n", DumpEntry{channel[4].vFir.n});
        res.insert_or_assign("channel[4].vFir.s", DumpEntry{channel[4].vFir.s});
        res.insert_or_assign("channel[4].vFir.r", DumpEntry{channel[4].vFir.r});
        res.insert_or_assign("channel[4].vFir.tSc", DumpEntry{channel[4].vFir.tSc});
        res.insert_or_assign("channel[4].vFir.phase", DumpEntry{channel[4].vFir.phase});
        res.insert_or_assign("channel[4].mmFir.m", DumpEntry{channel[4].mmFir.m});
        res.insert_or_assign("channel[4].mmFir.n", DumpEntry{channel[4].mmFir.n});
        res.insert_or_assign("channel[4].mmFir.s", DumpEntry{channel[4].mmFir.s});
        res.insert_or_assign("channel[4].mmFir.r", DumpEntry{channel[4].mmFir.r});
        res.insert_or_assign("channel[4].mmFir.tSc", DumpEntry{channel[4].mmFir.tSc});
        res.insert_or_assign("channel[4].mmFir.phase", DumpEntry{channel[4].mmFir.phase});
        res.insert_or_assign("channel[4].limit.maxLimit", DumpEntry{channel[4].limit.maxLimit});
        res.insert_or_assign("channel[4].limit.minLimit", DumpEntry{channel[4].limit.minLimit});
        res.insert_or_assign("channel[4].limit.filterLength", DumpEntry{channel[4].limit.filterLength});
        res.insert_or_assign("channel[5].rFir.m", DumpEntry{channel[5].rFir.m});
        res.insert_or_assign("channel[5].rFir.n", DumpEntry{channel[5].rFir.n});
        res.insert_or_assign("channel[5].rFir.s", DumpEntry{channel[5].rFir.s});
        res.insert_or_assign("channel[5].rFir.r", DumpEntry{channel[5].rFir.r});
        res.insert_or_assign("channel[5].rFir.tSc", DumpEntry{channel[5].rFir.tSc});
        res.insert_or_assign("channel[5].rFir.phase", DumpEntry{channel[5].rFir.phase});
        res.insert_or_assign("channel[5].vFir.m", DumpEntry{channel[5].vFir.m});
        res.insert_or_assign("channel[5].vFir.n", DumpEntry{channel[5].vFir.n});
        res.insert_or_assign("channel[5].vFir.s", DumpEntry{channel[5].vFir.s});
        res.insert_or_assign("channel[5].vFir.r", DumpEntry{channel[5].vFir.r});
        res.insert_or_assign("channel[5].vFir.tSc", DumpEntry{channel[5].vFir.tSc});
        res.insert_or_assign("channel[5].vFir.phase", DumpEntry{channel[5].vFir.phase});
        res.insert_or_assign("channel[5].mmFir.m", DumpEntry{channel[5].mmFir.m});
        res.insert_or_assign("channel[5].mmFir.n", DumpEntry{channel[5].mmFir.n});
        res.insert_or_assign("channel[5].mmFir.s", DumpEntry{channel[5].mmFir.s});
        res.insert_or_assign("channel[5].mmFir.r", DumpEntry{channel[5].mmFir.r});
        res.insert_or_assign("channel[5].mmFir.tSc", DumpEntry{channel[5].mmFir.tSc});
        res.insert_or_assign("channel[5].mmFir.phase", DumpEntry{channel[5].mmFir.phase});
        res.insert_or_assign("channel[5].limit.maxLimit", DumpEntry{channel[5].limit.maxLimit});
        res.insert_or_assign("channel[5].limit.minLimit", DumpEntry{channel[5].limit.minLimit});
        res.insert_or_assign("channel[5].limit.filterLength", DumpEntry{channel[5].limit.filterLength});
        res.insert_or_assign("channel[6].rFir.m", DumpEntry{channel[6].rFir.m});
        res.insert_or_assign("channel[6].rFir.n", DumpEntry{channel[6].rFir.n});
        res.insert_or_assign("channel[6].rFir.s", DumpEntry{channel[6].rFir.s});
        res.insert_or_assign("channel[6].rFir.r", DumpEntry{channel[6].rFir.r});
        res.insert_or_assign("channel[6].rFir.tSc", DumpEntry{channel[6].rFir.tSc});
        res.insert_or_assign("channel[6].rFir.phase", DumpEntry{channel[6].rFir.phase});
        res.insert_or_assign("channel[6].vFir.m", DumpEntry{channel[6].vFir.m});
        res.insert_or_assign("channel[6].vFir.n", DumpEntry{channel[6].vFir.n});
        res.insert_or_assign("channel[6].vFir.s", DumpEntry{channel[6].vFir.s});
        res.insert_or_assign("channel[6].vFir.r", DumpEntry{channel[6].vFir.r});
        res.insert_or_assign("channel[6].vFir.tSc", DumpEntry{channel[6].vFir.tSc});
        res.insert_or_assign("channel[6].vFir.phase", DumpEntry{channel[6].vFir.phase});
        res.insert_or_assign("channel[6].mmFir.m", DumpEntry{channel[6].mmFir.m});
        res.insert_or_assign("channel[6].mmFir.n", DumpEntry{channel[6].mmFir.n});
        res.insert_or_assign("channel[6].mmFir.s", DumpEntry{channel[6].mmFir.s});
        res.insert_or_assign("channel[6].mmFir.r", DumpEntry{channel[6].mmFir.r});
        res.insert_or_assign("channel[6].mmFir.tSc", DumpEntry{channel[6].mmFir.tSc});
        res.insert_or_assign("channel[6].mmFir.phase", DumpEntry{channel[6].mmFir.phase});
        res.insert_or_assign("channel[6].limit.maxLimit", DumpEntry{channel[6].limit.maxLimit});
        res.insert_or_assign("channel[6].limit.minLimit", DumpEntry{channel[6].limit.minLimit});
        res.insert_or_assign("channel[6].limit.filterLength", DumpEntry{channel[6].limit.filterLength});
        res.insert_or_assign("channel[7].rFir.m", DumpEntry{channel[7].rFir.m});
        res.insert_or_assign("channel[7].rFir.n", DumpEntry{channel[7].rFir.n});
        res.insert_or_assign("channel[7].rFir.s", DumpEntry{channel[7].rFir.s});
        res.insert_or_assign("channel[7].rFir.r", DumpEntry{channel[7].rFir.r});
        res.insert_or_assign("channel[7].rFir.tSc", DumpEntry{channel[7].rFir.tSc});
        res.insert_or_assign("channel[7].rFir.phase", DumpEntry{channel[7].rFir.phase});
        res.insert_or_assign("channel[7].vFir.m", DumpEntry{channel[7].vFir.m});
        res.insert_or_assign("channel[7].vFir.n", DumpEntry{channel[7].vFir.n});
        res.insert_or_assign("channel[7].vFir.s", DumpEntry{channel[7].vFir.s});
        res.insert_or_assign("channel[7].vFir.r", DumpEntry{channel[7].vFir.r});
        res.insert_or_assign("channel[7].vFir.tSc", DumpEntry{channel[7].vFir.tSc});
        res.insert_or_assign("channel[7].vFir.phase", DumpEntry{channel[7].vFir.phase});
        res.insert_or_assign("channel[7].mmFir.m", DumpEntry{channel[7].mmFir.m});
        res.insert_or_assign("channel[7].mmFir.n", DumpEntry{channel[7].mmFir.n});
        res.insert_or_assign("channel[7].mmFir.s", DumpEntry{channel[7].mmFir.s});
        res.insert_or_assign("channel[7].mmFir.r", DumpEntry{channel[7].mmFir.r});
        res.insert_or_assign("channel[7].mmFir.tSc", DumpEntry{channel[7].mmFir.tSc});
        res.insert_or_assign("channel[7].mmFir.phase", DumpEntry{channel[7].mmFir.phase});
        res.insert_or_assign("channel[7].limit.maxLimit", DumpEntry{channel[7].limit.maxLimit});
        res.insert_or_assign("channel[7].limit.minLimit", DumpEntry{channel[7].limit.minLimit});
        res.insert_or_assign("channel[7].limit.filterLength", DumpEntry{channel[7].limit.filterLength});
        res.insert_or_assign("channel[8].rFir.m", DumpEntry{channel[8].rFir.m});
        res.insert_or_assign("channel[8].rFir.n", DumpEntry{channel[8].rFir.n});
        res.insert_or_assign("channel[8].rFir.s", DumpEntry{channel[8].rFir.s});
        res.insert_or_assign("channel[8].rFir.r", DumpEntry{channel[8].rFir.r});
        res.insert_or_assign("channel[8].rFir.tSc", DumpEntry{channel[8].rFir.tSc});
        res.insert_or_assign("channel[8].rFir.phase", DumpEntry{channel[8].rFir.phase});
        res.insert_or_assign("channel[8].vFir.m", DumpEntry{channel[8].vFir.m});
        res.insert_or_assign("channel[8].vFir.n", DumpEntry{channel[8].vFir.n});
        res.insert_or_assign("channel[8].vFir.s", DumpEntry{channel[8].vFir.s});
        res.insert_or_assign("channel[8].vFir.r", DumpEntry{channel[8].vFir.r});
        res.insert_or_assign("channel[8].vFir.tSc", DumpEntry{channel[8].vFir.tSc});
        res.insert_or_assign("channel[8].vFir.phase", DumpEntry{channel[8].vFir.phase});
        res.insert_or_assign("channel[8].mmFir.m", DumpEntry{channel[8].mmFir.m});
        res.insert_or_assign("channel[8].mmFir.n", DumpEntry{channel[8].mmFir.n});
        res.insert_or_assign("channel[8].mmFir.s", DumpEntry{channel[8].mmFir.s});
        res.insert_or_assign("channel[8].mmFir.r", DumpEntry{channel[8].mmFir.r});
        res.insert_or_assign("channel[8].mmFir.tSc", DumpEntry{channel[8].mmFir.tSc});
        res.insert_or_assign("channel[8].mmFir.phase", DumpEntry{channel[8].mmFir.phase});
        res.insert_or_assign("channel[8].limit.maxLimit", DumpEntry{channel[8].limit.maxLimit});
        res.insert_or_assign("channel[8].limit.minLimit", DumpEntry{channel[8].limit.minLimit});
        res.insert_or_assign("channel[8].limit.filterLength", DumpEntry{channel[8].limit.filterLength});
        res.insert_or_assign("channel[9].rFir.m", DumpEntry{channel[9].rFir.m});
        res.insert_or_assign("channel[9].rFir.n", DumpEntry{channel[9].rFir.n});
        res.insert_or_assign("channel[9].rFir.s", DumpEntry{channel[9].rFir.s});
        res.insert_or_assign("channel[9].rFir.r", DumpEntry{channel[9].rFir.r});
        res.insert_or_assign("channel[9].rFir.tSc", DumpEntry{channel[9].rFir.tSc});
        res.insert_or_assign("channel[9].rFir.phase", DumpEntry{channel[9].rFir.phase});
        res.insert_or_assign("channel[9].vFir.m", DumpEntry{channel[9].vFir.m});
        res.insert_or_assign("channel[9].vFir.n", DumpEntry{channel[9].vFir.n});
        res.insert_or_assign("channel[9].vFir.s", DumpEntry{channel[9].vFir.s});
        res.insert_or_assign("channel[9].vFir.r", DumpEntry{channel[9].vFir.r});
        res.insert_or_assign("channel[9].vFir.tSc", DumpEntry{channel[9].vFir.tSc});
        res.insert_or_assign("channel[9].vFir.phase", DumpEntry{channel[9].vFir.phase});
        res.insert_or_assign("channel[9].mmFir.m", DumpEntry{channel[9].mmFir.m});
        res.insert_or_assign("channel[9].mmFir.n", DumpEntry{channel[9].mmFir.n});
        res.insert_or_assign("channel[9].mmFir.s", DumpEntry{channel[9].mmFir.s});
        res.insert_or_assign("channel[9].mmFir.r", DumpEntry{channel[9].mmFir.r});
        res.insert_or_assign("channel[9].mmFir.tSc", DumpEntry{channel[9].mmFir.tSc});
        res.insert_or_assign("channel[9].mmFir.phase", DumpEntry{channel[9].mmFir.phase});
        res.insert_or_assign("channel[9].limit.maxLimit", DumpEntry{channel[9].limit.maxLimit});
        res.insert_or_assign("channel[9].limit.minLimit", DumpEntry{channel[9].limit.minLimit});
        res.insert_or_assign("channel[9].limit.filterLength", DumpEntry{channel[9].limit.filterLength});
        res.insert_or_assign("channel[10].rFir.m", DumpEntry{channel[10].rFir.m});
        res.insert_or_assign("channel[10].rFir.n", DumpEntry{channel[10].rFir.n});
        res.insert_or_assign("channel[10].rFir.s", DumpEntry{channel[10].rFir.s});
        res.insert_or_assign("channel[10].rFir.r", DumpEntry{channel[10].rFir.r});
        res.insert_or_assign("channel[10].rFir.tSc", DumpEntry{channel[10].rFir.tSc});
        res.insert_or_assign("channel[10].rFir.phase", DumpEntry{channel[10].rFir.phase});
        res.insert_or_assign("channel[10].vFir.m", DumpEntry{channel[10].vFir.m});
        res.insert_or_assign("channel[10].vFir.n", DumpEntry{channel[10].vFir.n});
        res.insert_or_assign("channel[10].vFir.s", DumpEntry{channel[10].vFir.s});
        res.insert_or_assign("channel[10].vFir.r", DumpEntry{channel[10].vFir.r});
        res.insert_or_assign("channel[10].vFir.tSc", DumpEntry{channel[10].vFir.tSc});
        res.insert_or_assign("channel[10].vFir.phase", DumpEntry{channel[10].vFir.phase});
        res.insert_or_assign("channel[10].mmFir.m", DumpEntry{channel[10].mmFir.m});
        res.insert_or_assign("channel[10].mmFir.n", DumpEntry{channel[10].mmFir.n});
        res.insert_or_assign("channel[10].mmFir.s", DumpEntry{channel[10].mmFir.s});
        res.insert_or_assign("channel[10].mmFir.r", DumpEntry{channel[10].mmFir.r});
        res.insert_or_assign("channel[10].mmFir.tSc", DumpEntry{channel[10].mmFir.tSc});
        res.insert_or_assign("channel[10].mmFir.phase", DumpEntry{channel[10].mmFir.phase});
        res.insert_or_assign("channel[10].limit.maxLimit", DumpEntry{channel[10].limit.maxLimit});
        res.insert_or_assign("channel[10].limit.minLimit", DumpEntry{channel[10].limit.minLimit});
        res.insert_or_assign("channel[10].limit.filterLength", DumpEntry{channel[10].limit.filterLength});
        res.insert_or_assign("channel[11].rFir.m", DumpEntry{channel[11].rFir.m});
        res.insert_or_assign("channel[11].rFir.n", DumpEntry{channel[11].rFir.n});
        res.insert_or_assign("channel[11].rFir.s", DumpEntry{channel[11].rFir.s});
        res.insert_or_assign("channel[11].rFir.r", DumpEntry{channel[11].rFir.r});
        res.insert_or_assign("channel[11].rFir.tSc", DumpEntry{channel[11].rFir.tSc});
        res.insert_or_assign("channel[11].rFir.phase", DumpEntry{channel[11].rFir.phase});
        res.insert_or_assign("channel[11].vFir.m", DumpEntry{channel[11].vFir.m});
        res.insert_or_assign("channel[11].vFir.n", DumpEntry{channel[11].vFir.n});
        res.insert_or_assign("channel[11].vFir.s", DumpEntry{channel[11].vFir.s});
        res.insert_or_assign("channel[11].vFir.r", DumpEntry{channel[11].vFir.r});
        res.insert_or_assign("channel[11].vFir.tSc", DumpEntry{channel[11].vFir.tSc});
        res.insert_or_assign("channel[11].vFir.phase", DumpEntry{channel[11].vFir.phase});
        res.insert_or_assign("channel[11].mmFir.m", DumpEntry{channel[11].mmFir.m});
        res.insert_or_assign("channel[11].mmFir.n", DumpEntry{channel[11].mmFir.n});
        res.insert_or_assign("channel[11].mmFir.s", DumpEntry{channel[11].mmFir.s});
        res.insert_or_assign("channel[11].mmFir.r", DumpEntry{channel[11].mmFir.r});
        res.insert_or_assign("channel[11].mmFir.tSc", DumpEntry{channel[11].mmFir.tSc});
        res.insert_or_assign("channel[11].mmFir.phase", DumpEntry{channel[11].mmFir.phase});
        res.insert_or_assign("channel[11].limit.maxLimit", DumpEntry{channel[11].limit.maxLimit});
        res.insert_or_assign("channel[11].limit.minLimit", DumpEntry{channel[11].limit.minLimit});
        res.insert_or_assign("channel[11].limit.filterLength", DumpEntry{channel[11].limit.filterLength});
        res.insert_or_assign("channel[12].rFir.m", DumpEntry{channel[12].rFir.m});
        res.insert_or_assign("channel[12].rFir.n", DumpEntry{channel[12].rFir.n});
        res.insert_or_assign("channel[12].rFir.s", DumpEntry{channel[12].rFir.s});
        res.insert_or_assign("channel[12].rFir.r", DumpEntry{channel[12].rFir.r});
        res.insert_or_assign("channel[12].rFir.tSc", DumpEntry{channel[12].rFir.tSc});
        res.insert_or_assign("channel[12].rFir.phase", DumpEntry{channel[12].rFir.phase});
        res.insert_or_assign("channel[12].vFir.m", DumpEntry{channel[12].vFir.m});
        res.insert_or_assign("channel[12].vFir.n", DumpEntry{channel[12].vFir.n});
        res.insert_or_assign("channel[12].vFir.s", DumpEntry{channel[12].vFir.s});
        res.insert_or_assign("channel[12].vFir.r", DumpEntry{channel[12].vFir.r});
        res.insert_or_assign("channel[12].vFir.tSc", DumpEntry{channel[12].vFir.tSc});
        res.insert_or_assign("channel[12].vFir.phase", DumpEntry{channel[12].vFir.phase});
        res.insert_or_assign("channel[12].mmFir.m", DumpEntry{channel[12].mmFir.m});
        res.insert_or_assign("channel[12].mmFir.n", DumpEntry{channel[12].mmFir.n});
        res.insert_or_assign("channel[12].mmFir.s", DumpEntry{channel[12].mmFir.s});
        res.insert_or_assign("channel[12].mmFir.r", DumpEntry{channel[12].mmFir.r});
        res.insert_or_assign("channel[12].mmFir.tSc", DumpEntry{channel[12].mmFir.tSc});
        res.insert_or_assign("channel[12].mmFir.phase", DumpEntry{channel[12].mmFir.phase});
        res.insert_or_assign("channel[12].limit.maxLimit", DumpEntry{channel[12].limit.maxLimit});
        res.insert_or_assign("channel[12].limit.minLimit", DumpEntry{channel[12].limit.minLimit});
        res.insert_or_assign("channel[12].limit.filterLength", DumpEntry{channel[12].limit.filterLength});
        res.insert_or_assign("channel[13].rFir.m", DumpEntry{channel[13].rFir.m});
        res.insert_or_assign("channel[13].rFir.n", DumpEntry{channel[13].rFir.n});
        res.insert_or_assign("channel[13].rFir.s", DumpEntry{channel[13].rFir.s});
        res.insert_or_assign("channel[13].rFir.r", DumpEntry{channel[13].rFir.r});
        res.insert_or_assign("channel[13].rFir.tSc", DumpEntry{channel[13].rFir.tSc});
        res.insert_or_assign("channel[13].rFir.phase", DumpEntry{channel[13].rFir.phase});
        res.insert_or_assign("channel[13].vFir.m", DumpEntry{channel[13].vFir.m});
        res.insert_or_assign("channel[13].vFir.n", DumpEntry{channel[13].vFir.n});
        res.insert_or_assign("channel[13].vFir.s", DumpEntry{channel[13].vFir.s});
        res.insert_or_assign("channel[13].vFir.r", DumpEntry{channel[13].vFir.r});
        res.insert_or_assign("channel[13].vFir.tSc", DumpEntry{channel[13].vFir.tSc});
        res.insert_or_assign("channel[13].vFir.phase", DumpEntry{channel[13].vFir.phase});
        res.insert_or_assign("channel[13].mmFir.m", DumpEntry{channel[13].mmFir.m});
        res.insert_or_assign("channel[13].mmFir.n", DumpEntry{channel[13].mmFir.n});
        res.insert_or_assign("channel[13].mmFir.s", DumpEntry{channel[13].mmFir.s});
        res.insert_or_assign("channel[13].mmFir.r", DumpEntry{channel[13].mmFir.r});
        res.insert_or_assign("channel[13].mmFir.tSc", DumpEntry{channel[13].mmFir.tSc});
        res.insert_or_assign("channel[13].mmFir.phase", DumpEntry{channel[13].mmFir.phase});
        res.insert_or_assign("channel[13].limit.maxLimit", DumpEntry{channel[13].limit.maxLimit});
        res.insert_or_assign("channel[13].limit.minLimit", DumpEntry{channel[13].limit.minLimit});
        res.insert_or_assign("channel[13].limit.filterLength", DumpEntry{channel[13].limit.filterLength});
        res.insert_or_assign("channel[14].rFir.m", DumpEntry{channel[14].rFir.m});
        res.insert_or_assign("channel[14].rFir.n", DumpEntry{channel[14].rFir.n});
        res.insert_or_assign("channel[14].rFir.s", DumpEntry{channel[14].rFir.s});
        res.insert_or_assign("channel[14].rFir.r", DumpEntry{channel[14].rFir.r});
        res.insert_or_assign("channel[14].rFir.tSc", DumpEntry{channel[14].rFir.tSc});
        res.insert_or_assign("channel[14].rFir.phase", DumpEntry{channel[14].rFir.phase});
        res.insert_or_assign("channel[14].vFir.m", DumpEntry{channel[14].vFir.m});
        res.insert_or_assign("channel[14].vFir.n", DumpEntry{channel[14].vFir.n});
        res.insert_or_assign("channel[14].vFir.s", DumpEntry{channel[14].vFir.s});
        res.insert_or_assign("channel[14].vFir.r", DumpEntry{channel[14].vFir.r});
        res.insert_or_assign("channel[14].vFir.tSc", DumpEntry{channel[14].vFir.tSc});
        res.insert_or_assign("channel[14].vFir.phase", DumpEntry{channel[14].vFir.phase});
        res.insert_or_assign("channel[14].mmFir.m", DumpEntry{channel[14].mmFir.m});
        res.insert_or_assign("channel[14].mmFir.n", DumpEntry{channel[14].mmFir.n});
        res.insert_or_assign("channel[14].mmFir.s", DumpEntry{channel[14].mmFir.s});
        res.insert_or_assign("channel[14].mmFir.r", DumpEntry{channel[14].mmFir.r});
        res.insert_or_assign("channel[14].mmFir.tSc", DumpEntry{channel[14].mmFir.tSc});
        res.insert_or_assign("channel[14].mmFir.phase", DumpEntry{channel[14].mmFir.phase});
        res.insert_or_assign("channel[14].limit.maxLimit", DumpEntry{channel[14].limit.maxLimit});
        res.insert_or_assign("channel[14].limit.minLimit", DumpEntry{channel[14].limit.minLimit});
        res.insert_or_assign("channel[14].limit.filterLength", DumpEntry{channel[14].limit.filterLength});
        res.insert_or_assign("channel[15].rFir.m", DumpEntry{channel[15].rFir.m});
        res.insert_or_assign("channel[15].rFir.n", DumpEntry{channel[15].rFir.n});
        res.insert_or_assign("channel[15].rFir.s", DumpEntry{channel[15].rFir.s});
        res.insert_or_assign("channel[15].rFir.r", DumpEntry{channel[15].rFir.r});
        res.insert_or_assign("channel[15].rFir.tSc", DumpEntry{channel[15].rFir.tSc});
        res.insert_or_assign("channel[15].rFir.phase", DumpEntry{channel[15].rFir.phase});
        res.insert_or_assign("channel[15].vFir.m", DumpEntry{channel[15].vFir.m});
        res.insert_or_assign("channel[15].vFir.n", DumpEntry{channel[15].vFir.n});
        res.insert_or_assign("channel[15].vFir.s", DumpEntry{channel[15].vFir.s});
        res.insert_or_assign("channel[15].vFir.r", DumpEntry{channel[15].vFir.r});
        res.insert_or_assign("channel[15].vFir.tSc", DumpEntry{channel[15].vFir.tSc});
        res.insert_or_assign("channel[15].vFir.phase", DumpEntry{channel[15].vFir.phase});
        res.insert_or_assign("channel[15].mmFir.m", DumpEntry{channel[15].mmFir.m});
        res.insert_or_assign("channel[15].mmFir.n", DumpEntry{channel[15].mmFir.n});
        res.insert_or_assign("channel[15].mmFir.s", DumpEntry{channel[15].mmFir.s});
        res.insert_or_assign("channel[15].mmFir.r", DumpEntry{channel[15].mmFir.r});
        res.insert_or_assign("channel[15].mmFir.tSc", DumpEntry{channel[15].mmFir.tSc});
        res.insert_or_assign("channel[15].mmFir.phase", DumpEntry{channel[15].mmFir.phase});
        res.insert_or_assign("channel[15].limit.maxLimit", DumpEntry{channel[15].limit.maxLimit});
        res.insert_or_assign("channel[15].limit.minLimit", DumpEntry{channel[15].limit.minLimit});
        res.insert_or_assign("channel[15].limit.filterLength", DumpEntry{channel[15].limit.filterLength});
        res.insert_or_assign("channel[16].rFir.m", DumpEntry{channel[16].rFir.m});
        res.insert_or_assign("channel[16].rFir.n", DumpEntry{channel[16].rFir.n});
        res.insert_or_assign("channel[16].rFir.s", DumpEntry{channel[16].rFir.s});
        res.insert_or_assign("channel[16].rFir.r", DumpEntry{channel[16].rFir.r});
        res.insert_or_assign("channel[16].rFir.tSc", DumpEntry{channel[16].rFir.tSc});
        res.insert_or_assign("channel[16].rFir.phase", DumpEntry{channel[16].rFir.phase});
        res.insert_or_assign("channel[16].vFir.m", DumpEntry{channel[16].vFir.m});
        res.insert_or_assign("channel[16].vFir.n", DumpEntry{channel[16].vFir.n});
        res.insert_or_assign("channel[16].vFir.s", DumpEntry{channel[16].vFir.s});
        res.insert_or_assign("channel[16].vFir.r", DumpEntry{channel[16].vFir.r});
        res.insert_or_assign("channel[16].vFir.tSc", DumpEntry{channel[16].vFir.tSc});
        res.insert_or_assign("channel[16].vFir.phase", DumpEntry{channel[16].vFir.phase});
        res.insert_or_assign("channel[16].mmFir.m", DumpEntry{channel[16].mmFir.m});
        res.insert_or_assign("channel[16].mmFir.n", DumpEntry{channel[16].mmFir.n});
        res.insert_or_assign("channel[16].mmFir.s", DumpEntry{channel[16].mmFir.s});
        res.insert_or_assign("channel[16].mmFir.r", DumpEntry{channel[16].mmFir.r});
        res.insert_or_assign("channel[16].mmFir.tSc", DumpEntry{channel[16].mmFir.tSc});
        res.insert_or_assign("channel[16].mmFir.phase", DumpEntry{channel[16].mmFir.phase});
        res.insert_or_assign("channel[16].limit.maxLimit", DumpEntry{channel[16].limit.maxLimit});
        res.insert_or_assign("channel[16].limit.minLimit", DumpEntry{channel[16].limit.minLimit});
        res.insert_or_assign("channel[16].limit.filterLength", DumpEntry{channel[16].limit.filterLength});
        res.insert_or_assign("channel[17].rFir.m", DumpEntry{channel[17].rFir.m});
        res.insert_or_assign("channel[17].rFir.n", DumpEntry{channel[17].rFir.n});
        res.insert_or_assign("channel[17].rFir.s", DumpEntry{channel[17].rFir.s});
        res.insert_or_assign("channel[17].rFir.r", DumpEntry{channel[17].rFir.r});
        res.insert_or_assign("channel[17].rFir.tSc", DumpEntry{channel[17].rFir.tSc});
        res.insert_or_assign("channel[17].rFir.phase", DumpEntry{channel[17].rFir.phase});
        res.insert_or_assign("channel[17].vFir.m", DumpEntry{channel[17].vFir.m});
        res.insert_or_assign("channel[17].vFir.n", DumpEntry{channel[17].vFir.n});
        res.insert_or_assign("channel[17].vFir.s", DumpEntry{channel[17].vFir.s});
        res.insert_or_assign("channel[17].vFir.r", DumpEntry{channel[17].vFir.r});
        res.insert_or_assign("channel[17].vFir.tSc", DumpEntry{channel[17].vFir.tSc});
        res.insert_or_assign("channel[17].vFir.phase", DumpEntry{channel[17].vFir.phase});
        res.insert_or_assign("channel[17].mmFir.m", DumpEntry{channel[17].mmFir.m});
        res.insert_or_assign("channel[17].mmFir.n", DumpEntry{channel[17].mmFir.n});
        res.insert_or_assign("channel[17].mmFir.s", DumpEntry{channel[17].mmFir.s});
        res.insert_or_assign("channel[17].mmFir.r", DumpEntry{channel[17].mmFir.r});
        res.insert_or_assign("channel[17].mmFir.tSc", DumpEntry{channel[17].mmFir.tSc});
        res.insert_or_assign("channel[17].mmFir.phase", DumpEntry{channel[17].mmFir.phase});
        res.insert_or_assign("channel[17].limit.maxLimit", DumpEntry{channel[17].limit.maxLimit});
        res.insert_or_assign("channel[17].limit.minLimit", DumpEntry{channel[17].limit.minLimit});
        res.insert_or_assign("channel[17].limit.filterLength", DumpEntry{channel[17].limit.filterLength});
        res.insert_or_assign("channel[18].rFir.m", DumpEntry{channel[18].rFir.m});
        res.insert_or_assign("channel[18].rFir.n", DumpEntry{channel[18].rFir.n});
        res.insert_or_assign("channel[18].rFir.s", DumpEntry{channel[18].rFir.s});
        res.insert_or_assign("channel[18].rFir.r", DumpEntry{channel[18].rFir.r});
        res.insert_or_assign("channel[18].rFir.tSc", DumpEntry{channel[18].rFir.tSc});
        res.insert_or_assign("channel[18].rFir.phase", DumpEntry{channel[18].rFir.phase});
        res.insert_or_assign("channel[18].vFir.m", DumpEntry{channel[18].vFir.m});
        res.insert_or_assign("channel[18].vFir.n", DumpEntry{channel[18].vFir.n});
        res.insert_or_assign("channel[18].vFir.s", DumpEntry{channel[18].vFir.s});
        res.insert_or_assign("channel[18].vFir.r", DumpEntry{channel[18].vFir.r});
        res.insert_or_assign("channel[18].vFir.tSc", DumpEntry{channel[18].vFir.tSc});
        res.insert_or_assign("channel[18].vFir.phase", DumpEntry{channel[18].vFir.phase});
        res.insert_or_assign("channel[18].mmFir.m", DumpEntry{channel[18].mmFir.m});
        res.insert_or_assign("channel[18].mmFir.n", DumpEntry{channel[18].mmFir.n});
        res.insert_or_assign("channel[18].mmFir.s", DumpEntry{channel[18].mmFir.s});
        res.insert_or_assign("channel[18].mmFir.r", DumpEntry{channel[18].mmFir.r});
        res.insert_or_assign("channel[18].mmFir.tSc", DumpEntry{channel[18].mmFir.tSc});
        res.insert_or_assign("channel[18].mmFir.phase", DumpEntry{channel[18].mmFir.phase});
        res.insert_or_assign("channel[18].limit.maxLimit", DumpEntry{channel[18].limit.maxLimit});
        res.insert_or_assign("channel[18].limit.minLimit", DumpEntry{channel[18].limit.minLimit});
        res.insert_or_assign("channel[18].limit.filterLength", DumpEntry{channel[18].limit.filterLength});
        res.insert_or_assign("channel[19].rFir.m", DumpEntry{channel[19].rFir.m});
        res.insert_or_assign("channel[19].rFir.n", DumpEntry{channel[19].rFir.n});
        res.insert_or_assign("channel[19].rFir.s", DumpEntry{channel[19].rFir.s});
        res.insert_or_assign("channel[19].rFir.r", DumpEntry{channel[19].rFir.r});
        res.insert_or_assign("channel[19].rFir.tSc", DumpEntry{channel[19].rFir.tSc});
        res.insert_or_assign("channel[19].rFir.phase", DumpEntry{channel[19].rFir.phase});
        res.insert_or_assign("channel[19].vFir.m", DumpEntry{channel[19].vFir.m});
        res.insert_or_assign("channel[19].vFir.n", DumpEntry{channel[19].vFir.n});
        res.insert_or_assign("channel[19].vFir.s", DumpEntry{channel[19].vFir.s});
        res.insert_or_assign("channel[19].vFir.r", DumpEntry{channel[19].vFir.r});
        res.insert_or_assign("channel[19].vFir.tSc", DumpEntry{channel[19].vFir.tSc});
        res.insert_or_assign("channel[19].vFir.phase", DumpEntry{channel[19].vFir.phase});
        res.insert_or_assign("channel[19].mmFir.m", DumpEntry{channel[19].mmFir.m});
        res.insert_or_assign("channel[19].mmFir.n", DumpEntry{channel[19].mmFir.n});
        res.insert_or_assign("channel[19].mmFir.s", DumpEntry{channel[19].mmFir.s});
        res.insert_or_assign("channel[19].mmFir.r", DumpEntry{channel[19].mmFir.r});
        res.insert_or_assign("channel[19].mmFir.tSc", DumpEntry{channel[19].mmFir.tSc});
        res.insert_or_assign("channel[19].mmFir.phase", DumpEntry{channel[19].mmFir.phase});
        res.insert_or_assign("channel[19].limit.maxLimit", DumpEntry{channel[19].limit.maxLimit});
        res.insert_or_assign("channel[19].limit.minLimit", DumpEntry{channel[19].limit.minLimit});
        res.insert_or_assign("channel[19].limit.filterLength", DumpEntry{channel[19].limit.filterLength});
        res.insert_or_assign("channel[20].rFir.m", DumpEntry{channel[20].rFir.m});
        res.insert_or_assign("channel[20].rFir.n", DumpEntry{channel[20].rFir.n});
        res.insert_or_assign("channel[20].rFir.s", DumpEntry{channel[20].rFir.s});
        res.insert_or_assign("channel[20].rFir.r", DumpEntry{channel[20].rFir.r});
        res.insert_or_assign("channel[20].rFir.tSc", DumpEntry{channel[20].rFir.tSc});
        res.insert_or_assign("channel[20].rFir.phase", DumpEntry{channel[20].rFir.phase});
        res.insert_or_assign("channel[20].vFir.m", DumpEntry{channel[20].vFir.m});
        res.insert_or_assign("channel[20].vFir.n", DumpEntry{channel[20].vFir.n});
        res.insert_or_assign("channel[20].vFir.s", DumpEntry{channel[20].vFir.s});
        res.insert_or_assign("channel[20].vFir.r", DumpEntry{channel[20].vFir.r});
        res.insert_or_assign("channel[20].vFir.tSc", DumpEntry{channel[20].vFir.tSc});
        res.insert_or_assign("channel[20].vFir.phase", DumpEntry{channel[20].vFir.phase});
        res.insert_or_assign("channel[20].mmFir.m", DumpEntry{channel[20].mmFir.m});
        res.insert_or_assign("channel[20].mmFir.n", DumpEntry{channel[20].mmFir.n});
        res.insert_or_assign("channel[20].mmFir.s", DumpEntry{channel[20].mmFir.s});
        res.insert_or_assign("channel[20].mmFir.r", DumpEntry{channel[20].mmFir.r});
        res.insert_or_assign("channel[20].mmFir.tSc", DumpEntry{channel[20].mmFir.tSc});
        res.insert_or_assign("channel[20].mmFir.phase", DumpEntry{channel[20].mmFir.phase});
        res.insert_or_assign("channel[20].limit.maxLimit", DumpEntry{channel[20].limit.maxLimit});
        res.insert_or_assign("channel[20].limit.minLimit", DumpEntry{channel[20].limit.minLimit});
        res.insert_or_assign("channel[20].limit.filterLength", DumpEntry{channel[20].limit.filterLength});
        res.insert_or_assign("channel[21].rFir.m", DumpEntry{channel[21].rFir.m});
        res.insert_or_assign("channel[21].rFir.n", DumpEntry{channel[21].rFir.n});
        res.insert_or_assign("channel[21].rFir.s", DumpEntry{channel[21].rFir.s});
        res.insert_or_assign("channel[21].rFir.r", DumpEntry{channel[21].rFir.r});
        res.insert_or_assign("channel[21].rFir.tSc", DumpEntry{channel[21].rFir.tSc});
        res.insert_or_assign("channel[21].rFir.phase", DumpEntry{channel[21].rFir.phase});
        res.insert_or_assign("channel[21].vFir.m", DumpEntry{channel[21].vFir.m});
        res.insert_or_assign("channel[21].vFir.n", DumpEntry{channel[21].vFir.n});
        res.insert_or_assign("channel[21].vFir.s", DumpEntry{channel[21].vFir.s});
        res.insert_or_assign("channel[21].vFir.r", DumpEntry{channel[21].vFir.r});
        res.insert_or_assign("channel[21].vFir.tSc", DumpEntry{channel[21].vFir.tSc});
        res.insert_or_assign("channel[21].vFir.phase", DumpEntry{channel[21].vFir.phase});
        res.insert_or_assign("channel[21].mmFir.m", DumpEntry{channel[21].mmFir.m});
        res.insert_or_assign("channel[21].mmFir.n", DumpEntry{channel[21].mmFir.n});
        res.insert_or_assign("channel[21].mmFir.s", DumpEntry{channel[21].mmFir.s});
        res.insert_or_assign("channel[21].mmFir.r", DumpEntry{channel[21].mmFir.r});
        res.insert_or_assign("channel[21].mmFir.tSc", DumpEntry{channel[21].mmFir.tSc});
        res.insert_or_assign("channel[21].mmFir.phase", DumpEntry{channel[21].mmFir.phase});
        res.insert_or_assign("channel[21].limit.maxLimit", DumpEntry{channel[21].limit.maxLimit});
        res.insert_or_assign("channel[21].limit.minLimit", DumpEntry{channel[21].limit.minLimit});
        res.insert_or_assign("channel[21].limit.filterLength", DumpEntry{channel[21].limit.filterLength});
        res.insert_or_assign("channel[22].rFir.m", DumpEntry{channel[22].rFir.m});
        res.insert_or_assign("channel[22].rFir.n", DumpEntry{channel[22].rFir.n});
        res.insert_or_assign("channel[22].rFir.s", DumpEntry{channel[22].rFir.s});
        res.insert_or_assign("channel[22].rFir.r", DumpEntry{channel[22].rFir.r});
        res.insert_or_assign("channel[22].rFir.tSc", DumpEntry{channel[22].rFir.tSc});
        res.insert_or_assign("channel[22].rFir.phase", DumpEntry{channel[22].rFir.phase});
        res.insert_or_assign("channel[22].vFir.m", DumpEntry{channel[22].vFir.m});
        res.insert_or_assign("channel[22].vFir.n", DumpEntry{channel[22].vFir.n});
        res.insert_or_assign("channel[22].vFir.s", DumpEntry{channel[22].vFir.s});
        res.insert_or_assign("channel[22].vFir.r", DumpEntry{channel[22].vFir.r});
        res.insert_or_assign("channel[22].vFir.tSc", DumpEntry{channel[22].vFir.tSc});
        res.insert_or_assign("channel[22].vFir.phase", DumpEntry{channel[22].vFir.phase});
        res.insert_or_assign("channel[22].mmFir.m", DumpEntry{channel[22].mmFir.m});
        res.insert_or_assign("channel[22].mmFir.n", DumpEntry{channel[22].mmFir.n});
        res.insert_or_assign("channel[22].mmFir.s", DumpEntry{channel[22].mmFir.s});
        res.insert_or_assign("channel[22].mmFir.r", DumpEntry{channel[22].mmFir.r});
        res.insert_or_assign("channel[22].mmFir.tSc", DumpEntry{channel[22].mmFir.tSc});
        res.insert_or_assign("channel[22].mmFir.phase", DumpEntry{channel[22].mmFir.phase});
        res.insert_or_assign("channel[22].limit.maxLimit", DumpEntry{channel[22].limit.maxLimit});
        res.insert_or_assign("channel[22].limit.minLimit", DumpEntry{channel[22].limit.minLimit});
        res.insert_or_assign("channel[22].limit.filterLength", DumpEntry{channel[22].limit.filterLength});
        res.insert_or_assign("channel[23].rFir.m", DumpEntry{channel[23].rFir.m});
        res.insert_or_assign("channel[23].rFir.n", DumpEntry{channel[23].rFir.n});
        res.insert_or_assign("channel[23].rFir.s", DumpEntry{channel[23].rFir.s});
        res.insert_or_assign("channel[23].rFir.r", DumpEntry{channel[23].rFir.r});
        res.insert_or_assign("channel[23].rFir.tSc", DumpEntry{channel[23].rFir.tSc});
        res.insert_or_assign("channel[23].rFir.phase", DumpEntry{channel[23].rFir.phase});
        res.insert_or_assign("channel[23].vFir.m", DumpEntry{channel[23].vFir.m});
        res.insert_or_assign("channel[23].vFir.n", DumpEntry{channel[23].vFir.n});
        res.insert_or_assign("channel[23].vFir.s", DumpEntry{channel[23].vFir.s});
        res.insert_or_assign("channel[23].vFir.r", DumpEntry{channel[23].vFir.r});
        res.insert_or_assign("channel[23].vFir.tSc", DumpEntry{channel[23].vFir.tSc});
        res.insert_or_assign("channel[23].vFir.phase", DumpEntry{channel[23].vFir.phase});
        res.insert_or_assign("channel[23].mmFir.m", DumpEntry{channel[23].mmFir.m});
        res.insert_or_assign("channel[23].mmFir.n", DumpEntry{channel[23].mmFir.n});
        res.insert_or_assign("channel[23].mmFir.s", DumpEntry{channel[23].mmFir.s});
        res.insert_or_assign("channel[23].mmFir.r", DumpEntry{channel[23].mmFir.r});
        res.insert_or_assign("channel[23].mmFir.tSc", DumpEntry{channel[23].mmFir.tSc});
        res.insert_or_assign("channel[23].mmFir.phase", DumpEntry{channel[23].mmFir.phase});
        res.insert_or_assign("channel[23].limit.maxLimit", DumpEntry{channel[23].limit.maxLimit});
        res.insert_or_assign("channel[23].limit.minLimit", DumpEntry{channel[23].limit.minLimit});
        res.insert_or_assign("channel[23].limit.filterLength", DumpEntry{channel[23].limit.filterLength});
        res.insert_or_assign("channel[24].rFir.m", DumpEntry{channel[24].rFir.m});
        res.insert_or_assign("channel[24].rFir.n", DumpEntry{channel[24].rFir.n});
        res.insert_or_assign("channel[24].rFir.s", DumpEntry{channel[24].rFir.s});
        res.insert_or_assign("channel[24].rFir.r", DumpEntry{channel[24].rFir.r});
        res.insert_or_assign("channel[24].rFir.tSc", DumpEntry{channel[24].rFir.tSc});
        res.insert_or_assign("channel[24].rFir.phase", DumpEntry{channel[24].rFir.phase});
        res.insert_or_assign("channel[24].vFir.m", DumpEntry{channel[24].vFir.m});
        res.insert_or_assign("channel[24].vFir.n", DumpEntry{channel[24].vFir.n});
        res.insert_or_assign("channel[24].vFir.s", DumpEntry{channel[24].vFir.s});
        res.insert_or_assign("channel[24].vFir.r", DumpEntry{channel[24].vFir.r});
        res.insert_or_assign("channel[24].vFir.tSc", DumpEntry{channel[24].vFir.tSc});
        res.insert_or_assign("channel[24].vFir.phase", DumpEntry{channel[24].vFir.phase});
        res.insert_or_assign("channel[24].mmFir.m", DumpEntry{channel[24].mmFir.m});
        res.insert_or_assign("channel[24].mmFir.n", DumpEntry{channel[24].mmFir.n});
        res.insert_or_assign("channel[24].mmFir.s", DumpEntry{channel[24].mmFir.s});
        res.insert_or_assign("channel[24].mmFir.r", DumpEntry{channel[24].mmFir.r});
        res.insert_or_assign("channel[24].mmFir.tSc", DumpEntry{channel[24].mmFir.tSc});
        res.insert_or_assign("channel[24].mmFir.phase", DumpEntry{channel[24].mmFir.phase});
        res.insert_or_assign("channel[24].limit.maxLimit", DumpEntry{channel[24].limit.maxLimit});
        res.insert_or_assign("channel[24].limit.minLimit", DumpEntry{channel[24].limit.minLimit});
        res.insert_or_assign("channel[24].limit.filterLength", DumpEntry{channel[24].limit.filterLength});
        res.insert_or_assign("channel[25].rFir.m", DumpEntry{channel[25].rFir.m});
        res.insert_or_assign("channel[25].rFir.n", DumpEntry{channel[25].rFir.n});
        res.insert_or_assign("channel[25].rFir.s", DumpEntry{channel[25].rFir.s});
        res.insert_or_assign("channel[25].rFir.r", DumpEntry{channel[25].rFir.r});
        res.insert_or_assign("channel[25].rFir.tSc", DumpEntry{channel[25].rFir.tSc});
        res.insert_or_assign("channel[25].rFir.phase", DumpEntry{channel[25].rFir.phase});
        res.insert_or_assign("channel[25].vFir.m", DumpEntry{channel[25].vFir.m});
        res.insert_or_assign("channel[25].vFir.n", DumpEntry{channel[25].vFir.n});
        res.insert_or_assign("channel[25].vFir.s", DumpEntry{channel[25].vFir.s});
        res.insert_or_assign("channel[25].vFir.r", DumpEntry{channel[25].vFir.r});
        res.insert_or_assign("channel[25].vFir.tSc", DumpEntry{channel[25].vFir.tSc});
        res.insert_or_assign("channel[25].vFir.phase", DumpEntry{channel[25].vFir.phase});
        res.insert_or_assign("channel[25].mmFir.m", DumpEntry{channel[25].mmFir.m});
        res.insert_or_assign("channel[25].mmFir.n", DumpEntry{channel[25].mmFir.n});
        res.insert_or_assign("channel[25].mmFir.s", DumpEntry{channel[25].mmFir.s});
        res.insert_or_assign("channel[25].mmFir.r", DumpEntry{channel[25].mmFir.r});
        res.insert_or_assign("channel[25].mmFir.tSc", DumpEntry{channel[25].mmFir.tSc});
        res.insert_or_assign("channel[25].mmFir.phase", DumpEntry{channel[25].mmFir.phase});
        res.insert_or_assign("channel[25].limit.maxLimit", DumpEntry{channel[25].limit.maxLimit});
        res.insert_or_assign("channel[25].limit.minLimit", DumpEntry{channel[25].limit.minLimit});
        res.insert_or_assign("channel[25].limit.filterLength", DumpEntry{channel[25].limit.filterLength});
        res.insert_or_assign("channel[26].rFir.m", DumpEntry{channel[26].rFir.m});
        res.insert_or_assign("channel[26].rFir.n", DumpEntry{channel[26].rFir.n});
        res.insert_or_assign("channel[26].rFir.s", DumpEntry{channel[26].rFir.s});
        res.insert_or_assign("channel[26].rFir.r", DumpEntry{channel[26].rFir.r});
        res.insert_or_assign("channel[26].rFir.tSc", DumpEntry{channel[26].rFir.tSc});
        res.insert_or_assign("channel[26].rFir.phase", DumpEntry{channel[26].rFir.phase});
        res.insert_or_assign("channel[26].vFir.m", DumpEntry{channel[26].vFir.m});
        res.insert_or_assign("channel[26].vFir.n", DumpEntry{channel[26].vFir.n});
        res.insert_or_assign("channel[26].vFir.s", DumpEntry{channel[26].vFir.s});
        res.insert_or_assign("channel[26].vFir.r", DumpEntry{channel[26].vFir.r});
        res.insert_or_assign("channel[26].vFir.tSc", DumpEntry{channel[26].vFir.tSc});
        res.insert_or_assign("channel[26].vFir.phase", DumpEntry{channel[26].vFir.phase});
        res.insert_or_assign("channel[26].mmFir.m", DumpEntry{channel[26].mmFir.m});
        res.insert_or_assign("channel[26].mmFir.n", DumpEntry{channel[26].mmFir.n});
        res.insert_or_assign("channel[26].mmFir.s", DumpEntry{channel[26].mmFir.s});
        res.insert_or_assign("channel[26].mmFir.r", DumpEntry{channel[26].mmFir.r});
        res.insert_or_assign("channel[26].mmFir.tSc", DumpEntry{channel[26].mmFir.tSc});
        res.insert_or_assign("channel[26].mmFir.phase", DumpEntry{channel[26].mmFir.phase});
        res.insert_or_assign("channel[26].limit.maxLimit", DumpEntry{channel[26].limit.maxLimit});
        res.insert_or_assign("channel[26].limit.minLimit", DumpEntry{channel[26].limit.minLimit});
        res.insert_or_assign("channel[26].limit.filterLength", DumpEntry{channel[26].limit.filterLength});
        res.insert_or_assign("channel[27].rFir.m", DumpEntry{channel[27].rFir.m});
        res.insert_or_assign("channel[27].rFir.n", DumpEntry{channel[27].rFir.n});
        res.insert_or_assign("channel[27].rFir.s", DumpEntry{channel[27].rFir.s});
        res.insert_or_assign("channel[27].rFir.r", DumpEntry{channel[27].rFir.r});
        res.insert_or_assign("channel[27].rFir.tSc", DumpEntry{channel[27].rFir.tSc});
        res.insert_or_assign("channel[27].rFir.phase", DumpEntry{channel[27].rFir.phase});
        res.insert_or_assign("channel[27].vFir.m", DumpEntry{channel[27].vFir.m});
        res.insert_or_assign("channel[27].vFir.n", DumpEntry{channel[27].vFir.n});
        res.insert_or_assign("channel[27].vFir.s", DumpEntry{channel[27].vFir.s});
        res.insert_or_assign("channel[27].vFir.r", DumpEntry{channel[27].vFir.r});
        res.insert_or_assign("channel[27].vFir.tSc", DumpEntry{channel[27].vFir.tSc});
        res.insert_or_assign("channel[27].vFir.phase", DumpEntry{channel[27].vFir.phase});
        res.insert_or_assign("channel[27].mmFir.m", DumpEntry{channel[27].mmFir.m});
        res.insert_or_assign("channel[27].mmFir.n", DumpEntry{channel[27].mmFir.n});
        res.insert_or_assign("channel[27].mmFir.s", DumpEntry{channel[27].mmFir.s});
        res.insert_or_assign("channel[27].mmFir.r", DumpEntry{channel[27].mmFir.r});
        res.insert_or_assign("channel[27].mmFir.tSc", DumpEntry{channel[27].mmFir.tSc});
        res.insert_or_assign("channel[27].mmFir.phase", DumpEntry{channel[27].mmFir.phase});
        res.insert_or_assign("channel[27].limit.maxLimit", DumpEntry{channel[27].limit.maxLimit});
        res.insert_or_assign("channel[27].limit.minLimit", DumpEntry{channel[27].limit.minLimit});
        res.insert_or_assign("channel[27].limit.filterLength", DumpEntry{channel[27].limit.filterLength});
        res.insert_or_assign("channel[28].rFir.m", DumpEntry{channel[28].rFir.m});
        res.insert_or_assign("channel[28].rFir.n", DumpEntry{channel[28].rFir.n});
        res.insert_or_assign("channel[28].rFir.s", DumpEntry{channel[28].rFir.s});
        res.insert_or_assign("channel[28].rFir.r", DumpEntry{channel[28].rFir.r});
        res.insert_or_assign("channel[28].rFir.tSc", DumpEntry{channel[28].rFir.tSc});
        res.insert_or_assign("channel[28].rFir.phase", DumpEntry{channel[28].rFir.phase});
        res.insert_or_assign("channel[28].vFir.m", DumpEntry{channel[28].vFir.m});
        res.insert_or_assign("channel[28].vFir.n", DumpEntry{channel[28].vFir.n});
        res.insert_or_assign("channel[28].vFir.s", DumpEntry{channel[28].vFir.s});
        res.insert_or_assign("channel[28].vFir.r", DumpEntry{channel[28].vFir.r});
        res.insert_or_assign("channel[28].vFir.tSc", DumpEntry{channel[28].vFir.tSc});
        res.insert_or_assign("channel[28].vFir.phase", DumpEntry{channel[28].vFir.phase});
        res.insert_or_assign("channel[28].mmFir.m", DumpEntry{channel[28].mmFir.m});
        res.insert_or_assign("channel[28].mmFir.n", DumpEntry{channel[28].mmFir.n});
        res.insert_or_assign("channel[28].mmFir.s", DumpEntry{channel[28].mmFir.s});
        res.insert_or_assign("channel[28].mmFir.r", DumpEntry{channel[28].mmFir.r});
        res.insert_or_assign("channel[28].mmFir.tSc", DumpEntry{channel[28].mmFir.tSc});
        res.insert_or_assign("channel[28].mmFir.phase", DumpEntry{channel[28].mmFir.phase});
        res.insert_or_assign("channel[28].limit.maxLimit", DumpEntry{channel[28].limit.maxLimit});
        res.insert_or_assign("channel[28].limit.minLimit", DumpEntry{channel[28].limit.minLimit});
        res.insert_or_assign("channel[28].limit.filterLength", DumpEntry{channel[28].limit.filterLength});
        res.insert_or_assign("channel[29].rFir.m", DumpEntry{channel[29].rFir.m});
        res.insert_or_assign("channel[29].rFir.n", DumpEntry{channel[29].rFir.n});
        res.insert_or_assign("channel[29].rFir.s", DumpEntry{channel[29].rFir.s});
        res.insert_or_assign("channel[29].rFir.r", DumpEntry{channel[29].rFir.r});
        res.insert_or_assign("channel[29].rFir.tSc", DumpEntry{channel[29].rFir.tSc});
        res.insert_or_assign("channel[29].rFir.phase", DumpEntry{channel[29].rFir.phase});
        res.insert_or_assign("channel[29].vFir.m", DumpEntry{channel[29].vFir.m});
        res.insert_or_assign("channel[29].vFir.n", DumpEntry{channel[29].vFir.n});
        res.insert_or_assign("channel[29].vFir.s", DumpEntry{channel[29].vFir.s});
        res.insert_or_assign("channel[29].vFir.r", DumpEntry{channel[29].vFir.r});
        res.insert_or_assign("channel[29].vFir.tSc", DumpEntry{channel[29].vFir.tSc});
        res.insert_or_assign("channel[29].vFir.phase", DumpEntry{channel[29].vFir.phase});
        res.insert_or_assign("channel[29].mmFir.m", DumpEntry{channel[29].mmFir.m});
        res.insert_or_assign("channel[29].mmFir.n", DumpEntry{channel[29].mmFir.n});
        res.insert_or_assign("channel[29].mmFir.s", DumpEntry{channel[29].mmFir.s});
        res.insert_or_assign("channel[29].mmFir.r", DumpEntry{channel[29].mmFir.r});
        res.insert_or_assign("channel[29].mmFir.tSc", DumpEntry{channel[29].mmFir.tSc});
        res.insert_or_assign("channel[29].mmFir.phase", DumpEntry{channel[29].mmFir.phase});
        res.insert_or_assign("channel[29].limit.maxLimit", DumpEntry{channel[29].limit.maxLimit});
        res.insert_or_assign("channel[29].limit.minLimit", DumpEntry{channel[29].limit.minLimit});
        res.insert_or_assign("channel[29].limit.filterLength", DumpEntry{channel[29].limit.filterLength});
        res.insert_or_assign("channel[30].rFir.m", DumpEntry{channel[30].rFir.m});
        res.insert_or_assign("channel[30].rFir.n", DumpEntry{channel[30].rFir.n});
        res.insert_or_assign("channel[30].rFir.s", DumpEntry{channel[30].rFir.s});
        res.insert_or_assign("channel[30].rFir.r", DumpEntry{channel[30].rFir.r});
        res.insert_or_assign("channel[30].rFir.tSc", DumpEntry{channel[30].rFir.tSc});
        res.insert_or_assign("channel[30].rFir.phase", DumpEntry{channel[30].rFir.phase});
        res.insert_or_assign("channel[30].vFir.m", DumpEntry{channel[30].vFir.m});
        res.insert_or_assign("channel[30].vFir.n", DumpEntry{channel[30].vFir.n});
        res.insert_or_assign("channel[30].vFir.s", DumpEntry{channel[30].vFir.s});
        res.insert_or_assign("channel[30].vFir.r", DumpEntry{channel[30].vFir.r});
        res.insert_or_assign("channel[30].vFir.tSc", DumpEntry{channel[30].vFir.tSc});
        res.insert_or_assign("channel[30].vFir.phase", DumpEntry{channel[30].vFir.phase});
        res.insert_or_assign("channel[30].mmFir.m", DumpEntry{channel[30].mmFir.m});
        res.insert_or_assign("channel[30].mmFir.n", DumpEntry{channel[30].mmFir.n});
        res.insert_or_assign("channel[30].mmFir.s", DumpEntry{channel[30].mmFir.s});
        res.insert_or_assign("channel[30].mmFir.r", DumpEntry{channel[30].mmFir.r});
        res.insert_or_assign("channel[30].mmFir.tSc", DumpEntry{channel[30].mmFir.tSc});
        res.insert_or_assign("channel[30].mmFir.phase", DumpEntry{channel[30].mmFir.phase});
        res.insert_or_assign("channel[30].limit.maxLimit", DumpEntry{channel[30].limit.maxLimit});
        res.insert_or_assign("channel[30].limit.minLimit", DumpEntry{channel[30].limit.minLimit});
        res.insert_or_assign("channel[30].limit.filterLength", DumpEntry{channel[30].limit.filterLength});
        res.insert_or_assign("channel[31].rFir.m", DumpEntry{channel[31].rFir.m});
        res.insert_or_assign("channel[31].rFir.n", DumpEntry{channel[31].rFir.n});
        res.insert_or_assign("channel[31].rFir.s", DumpEntry{channel[31].rFir.s});
        res.insert_or_assign("channel[31].rFir.r", DumpEntry{channel[31].rFir.r});
        res.insert_or_assign("channel[31].rFir.tSc", DumpEntry{channel[31].rFir.tSc});
        res.insert_or_assign("channel[31].rFir.phase", DumpEntry{channel[31].rFir.phase});
        res.insert_or_assign("channel[31].vFir.m", DumpEntry{channel[31].vFir.m});
        res.insert_or_assign("channel[31].vFir.n", DumpEntry{channel[31].vFir.n});
        res.insert_or_assign("channel[31].vFir.s", DumpEntry{channel[31].vFir.s});
        res.insert_or_assign("channel[31].vFir.r", DumpEntry{channel[31].vFir.r});
        res.insert_or_assign("channel[31].vFir.tSc", DumpEntry{channel[31].vFir.tSc});
        res.insert_or_assign("channel[31].vFir.phase", DumpEntry{channel[31].vFir.phase});
        res.insert_or_assign("channel[31].mmFir.m", DumpEntry{channel[31].mmFir.m});
        res.insert_or_assign("channel[31].mmFir.n", DumpEntry{channel[31].mmFir.n});
        res.insert_or_assign("channel[31].mmFir.s", DumpEntry{channel[31].mmFir.s});
        res.insert_or_assign("channel[31].mmFir.r", DumpEntry{channel[31].mmFir.r});
        res.insert_or_assign("channel[31].mmFir.tSc", DumpEntry{channel[31].mmFir.tSc});
        res.insert_or_assign("channel[31].mmFir.phase", DumpEntry{channel[31].mmFir.phase});
        res.insert_or_assign("channel[31].limit.maxLimit", DumpEntry{channel[31].limit.maxLimit});
        res.insert_or_assign("channel[31].limit.minLimit", DumpEntry{channel[31].limit.minLimit});
        res.insert_or_assign("channel[31].limit.filterLength", DumpEntry{channel[31].limit.filterLength});
        res.insert_or_assign("channel[32].rFir.m", DumpEntry{channel[32].rFir.m});
        res.insert_or_assign("channel[32].rFir.n", DumpEntry{channel[32].rFir.n});
        res.insert_or_assign("channel[32].rFir.s", DumpEntry{channel[32].rFir.s});
        res.insert_or_assign("channel[32].rFir.r", DumpEntry{channel[32].rFir.r});
        res.insert_or_assign("channel[32].rFir.tSc", DumpEntry{channel[32].rFir.tSc});
        res.insert_or_assign("channel[32].rFir.phase", DumpEntry{channel[32].rFir.phase});
        res.insert_or_assign("channel[32].vFir.m", DumpEntry{channel[32].vFir.m});
        res.insert_or_assign("channel[32].vFir.n", DumpEntry{channel[32].vFir.n});
        res.insert_or_assign("channel[32].vFir.s", DumpEntry{channel[32].vFir.s});
        res.insert_or_assign("channel[32].vFir.r", DumpEntry{channel[32].vFir.r});
        res.insert_or_assign("channel[32].vFir.tSc", DumpEntry{channel[32].vFir.tSc});
        res.insert_or_assign("channel[32].vFir.phase", DumpEntry{channel[32].vFir.phase});
        res.insert_or_assign("channel[32].mmFir.m", DumpEntry{channel[32].mmFir.m});
        res.insert_or_assign("channel[32].mmFir.n", DumpEntry{channel[32].mmFir.n});
        res.insert_or_assign("channel[32].mmFir.s", DumpEntry{channel[32].mmFir.s});
        res.insert_or_assign("channel[32].mmFir.r", DumpEntry{channel[32].mmFir.r});
        res.insert_or_assign("channel[32].mmFir.tSc", DumpEntry{channel[32].mmFir.tSc});
        res.insert_or_assign("channel[32].mmFir.phase", DumpEntry{channel[32].mmFir.phase});
        res.insert_or_assign("channel[32].limit.maxLimit", DumpEntry{channel[32].limit.maxLimit});
        res.insert_or_assign("channel[32].limit.minLimit", DumpEntry{channel[32].limit.minLimit});
        res.insert_or_assign("channel[32].limit.filterLength", DumpEntry{channel[32].limit.filterLength});
        res.insert_or_assign("channel[33].rFir.m", DumpEntry{channel[33].rFir.m});
        res.insert_or_assign("channel[33].rFir.n", DumpEntry{channel[33].rFir.n});
        res.insert_or_assign("channel[33].rFir.s", DumpEntry{channel[33].rFir.s});
        res.insert_or_assign("channel[33].rFir.r", DumpEntry{channel[33].rFir.r});
        res.insert_or_assign("channel[33].rFir.tSc", DumpEntry{channel[33].rFir.tSc});
        res.insert_or_assign("channel[33].rFir.phase", DumpEntry{channel[33].rFir.phase});
        res.insert_or_assign("channel[33].vFir.m", DumpEntry{channel[33].vFir.m});
        res.insert_or_assign("channel[33].vFir.n", DumpEntry{channel[33].vFir.n});
        res.insert_or_assign("channel[33].vFir.s", DumpEntry{channel[33].vFir.s});
        res.insert_or_assign("channel[33].vFir.r", DumpEntry{channel[33].vFir.r});
        res.insert_or_assign("channel[33].vFir.tSc", DumpEntry{channel[33].vFir.tSc});
        res.insert_or_assign("channel[33].vFir.phase", DumpEntry{channel[33].vFir.phase});
        res.insert_or_assign("channel[33].mmFir.m", DumpEntry{channel[33].mmFir.m});
        res.insert_or_assign("channel[33].mmFir.n", DumpEntry{channel[33].mmFir.n});
        res.insert_or_assign("channel[33].mmFir.s", DumpEntry{channel[33].mmFir.s});
        res.insert_or_assign("channel[33].mmFir.r", DumpEntry{channel[33].mmFir.r});
        res.insert_or_assign("channel[33].mmFir.tSc", DumpEntry{channel[33].mmFir.tSc});
        res.insert_or_assign("channel[33].mmFir.phase", DumpEntry{channel[33].mmFir.phase});
        res.insert_or_assign("channel[33].limit.maxLimit", DumpEntry{channel[33].limit.maxLimit});
        res.insert_or_assign("channel[33].limit.minLimit", DumpEntry{channel[33].limit.minLimit});
        res.insert_or_assign("channel[33].limit.filterLength", DumpEntry{channel[33].limit.filterLength});
        res.insert_or_assign("channel[34].rFir.m", DumpEntry{channel[34].rFir.m});
        res.insert_or_assign("channel[34].rFir.n", DumpEntry{channel[34].rFir.n});
        res.insert_or_assign("channel[34].rFir.s", DumpEntry{channel[34].rFir.s});
        res.insert_or_assign("channel[34].rFir.r", DumpEntry{channel[34].rFir.r});
        res.insert_or_assign("channel[34].rFir.tSc", DumpEntry{channel[34].rFir.tSc});
        res.insert_or_assign("channel[34].rFir.phase", DumpEntry{channel[34].rFir.phase});
        res.insert_or_assign("channel[34].vFir.m", DumpEntry{channel[34].vFir.m});
        res.insert_or_assign("channel[34].vFir.n", DumpEntry{channel[34].vFir.n});
        res.insert_or_assign("channel[34].vFir.s", DumpEntry{channel[34].vFir.s});
        res.insert_or_assign("channel[34].vFir.r", DumpEntry{channel[34].vFir.r});
        res.insert_or_assign("channel[34].vFir.tSc", DumpEntry{channel[34].vFir.tSc});
        res.insert_or_assign("channel[34].vFir.phase", DumpEntry{channel[34].vFir.phase});
        res.insert_or_assign("channel[34].mmFir.m", DumpEntry{channel[34].mmFir.m});
        res.insert_or_assign("channel[34].mmFir.n", DumpEntry{channel[34].mmFir.n});
        res.insert_or_assign("channel[34].mmFir.s", DumpEntry{channel[34].mmFir.s});
        res.insert_or_assign("channel[34].mmFir.r", DumpEntry{channel[34].mmFir.r});
        res.insert_or_assign("channel[34].mmFir.tSc", DumpEntry{channel[34].mmFir.tSc});
        res.insert_or_assign("channel[34].mmFir.phase", DumpEntry{channel[34].mmFir.phase});
        res.insert_or_assign("channel[34].limit.maxLimit", DumpEntry{channel[34].limit.maxLimit});
        res.insert_or_assign("channel[34].limit.minLimit", DumpEntry{channel[34].limit.minLimit});
        res.insert_or_assign("channel[34].limit.filterLength", DumpEntry{channel[34].limit.filterLength});
        res.insert_or_assign("channel[35].rFir.m", DumpEntry{channel[35].rFir.m});
        res.insert_or_assign("channel[35].rFir.n", DumpEntry{channel[35].rFir.n});
        res.insert_or_assign("channel[35].rFir.s", DumpEntry{channel[35].rFir.s});
        res.insert_or_assign("channel[35].rFir.r", DumpEntry{channel[35].rFir.r});
        res.insert_or_assign("channel[35].rFir.tSc", DumpEntry{channel[35].rFir.tSc});
        res.insert_or_assign("channel[35].rFir.phase", DumpEntry{channel[35].rFir.phase});
        res.insert_or_assign("channel[35].vFir.m", DumpEntry{channel[35].vFir.m});
        res.insert_or_assign("channel[35].vFir.n", DumpEntry{channel[35].vFir.n});
        res.insert_or_assign("channel[35].vFir.s", DumpEntry{channel[35].vFir.s});
        res.insert_or_assign("channel[35].vFir.r", DumpEntry{channel[35].vFir.r});
        res.insert_or_assign("channel[35].vFir.tSc", DumpEntry{channel[35].vFir.tSc});
        res.insert_or_assign("channel[35].vFir.phase", DumpEntry{channel[35].vFir.phase});
        res.insert_or_assign("channel[35].mmFir.m", DumpEntry{channel[35].mmFir.m});
        res.insert_or_assign("channel[35].mmFir.n", DumpEntry{channel[35].mmFir.n});
        res.insert_or_assign("channel[35].mmFir.s", DumpEntry{channel[35].mmFir.s});
        res.insert_or_assign("channel[35].mmFir.r", DumpEntry{channel[35].mmFir.r});
        res.insert_or_assign("channel[35].mmFir.tSc", DumpEntry{channel[35].mmFir.tSc});
        res.insert_or_assign("channel[35].mmFir.phase", DumpEntry{channel[35].mmFir.phase});
        res.insert_or_assign("channel[35].limit.maxLimit", DumpEntry{channel[35].limit.maxLimit});
        res.insert_or_assign("channel[35].limit.minLimit", DumpEntry{channel[35].limit.minLimit});
        res.insert_or_assign("channel[35].limit.filterLength", DumpEntry{channel[35].limit.filterLength});
        res.insert_or_assign("channel[36].rFir.m", DumpEntry{channel[36].rFir.m});
        res.insert_or_assign("channel[36].rFir.n", DumpEntry{channel[36].rFir.n});
        res.insert_or_assign("channel[36].rFir.s", DumpEntry{channel[36].rFir.s});
        res.insert_or_assign("channel[36].rFir.r", DumpEntry{channel[36].rFir.r});
        res.insert_or_assign("channel[36].rFir.tSc", DumpEntry{channel[36].rFir.tSc});
        res.insert_or_assign("channel[36].rFir.phase", DumpEntry{channel[36].rFir.phase});
        res.insert_or_assign("channel[36].vFir.m", DumpEntry{channel[36].vFir.m});
        res.insert_or_assign("channel[36].vFir.n", DumpEntry{channel[36].vFir.n});
        res.insert_or_assign("channel[36].vFir.s", DumpEntry{channel[36].vFir.s});
        res.insert_or_assign("channel[36].vFir.r", DumpEntry{channel[36].vFir.r});
        res.insert_or_assign("channel[36].vFir.tSc", DumpEntry{channel[36].vFir.tSc});
        res.insert_or_assign("channel[36].vFir.phase", DumpEntry{channel[36].vFir.phase});
        res.insert_or_assign("channel[36].mmFir.m", DumpEntry{channel[36].mmFir.m});
        res.insert_or_assign("channel[36].mmFir.n", DumpEntry{channel[36].mmFir.n});
        res.insert_or_assign("channel[36].mmFir.s", DumpEntry{channel[36].mmFir.s});
        res.insert_or_assign("channel[36].mmFir.r", DumpEntry{channel[36].mmFir.r});
        res.insert_or_assign("channel[36].mmFir.tSc", DumpEntry{channel[36].mmFir.tSc});
        res.insert_or_assign("channel[36].mmFir.phase", DumpEntry{channel[36].mmFir.phase});
        res.insert_or_assign("channel[36].limit.maxLimit", DumpEntry{channel[36].limit.maxLimit});
        res.insert_or_assign("channel[36].limit.minLimit", DumpEntry{channel[36].limit.minLimit});
        res.insert_or_assign("channel[36].limit.filterLength", DumpEntry{channel[36].limit.filterLength});
        res.insert_or_assign("channel[37].rFir.m", DumpEntry{channel[37].rFir.m});
        res.insert_or_assign("channel[37].rFir.n", DumpEntry{channel[37].rFir.n});
        res.insert_or_assign("channel[37].rFir.s", DumpEntry{channel[37].rFir.s});
        res.insert_or_assign("channel[37].rFir.r", DumpEntry{channel[37].rFir.r});
        res.insert_or_assign("channel[37].rFir.tSc", DumpEntry{channel[37].rFir.tSc});
        res.insert_or_assign("channel[37].rFir.phase", DumpEntry{channel[37].rFir.phase});
        res.insert_or_assign("channel[37].vFir.m", DumpEntry{channel[37].vFir.m});
        res.insert_or_assign("channel[37].vFir.n", DumpEntry{channel[37].vFir.n});
        res.insert_or_assign("channel[37].vFir.s", DumpEntry{channel[37].vFir.s});
        res.insert_or_assign("channel[37].vFir.r", DumpEntry{channel[37].vFir.r});
        res.insert_or_assign("channel[37].vFir.tSc", DumpEntry{channel[37].vFir.tSc});
        res.insert_or_assign("channel[37].vFir.phase", DumpEntry{channel[37].vFir.phase});
        res.insert_or_assign("channel[37].mmFir.m", DumpEntry{channel[37].mmFir.m});
        res.insert_or_assign("channel[37].mmFir.n", DumpEntry{channel[37].mmFir.n});
        res.insert_or_assign("channel[37].mmFir.s", DumpEntry{channel[37].mmFir.s});
        res.insert_or_assign("channel[37].mmFir.r", DumpEntry{channel[37].mmFir.r});
        res.insert_or_assign("channel[37].mmFir.tSc", DumpEntry{channel[37].mmFir.tSc});
        res.insert_or_assign("channel[37].mmFir.phase", DumpEntry{channel[37].mmFir.phase});
        res.insert_or_assign("channel[37].limit.maxLimit", DumpEntry{channel[37].limit.maxLimit});
        res.insert_or_assign("channel[37].limit.minLimit", DumpEntry{channel[37].limit.minLimit});
        res.insert_or_assign("channel[37].limit.filterLength", DumpEntry{channel[37].limit.filterLength});
        res.insert_or_assign("channel[38].rFir.m", DumpEntry{channel[38].rFir.m});
        res.insert_or_assign("channel[38].rFir.n", DumpEntry{channel[38].rFir.n});
        res.insert_or_assign("channel[38].rFir.s", DumpEntry{channel[38].rFir.s});
        res.insert_or_assign("channel[38].rFir.r", DumpEntry{channel[38].rFir.r});
        res.insert_or_assign("channel[38].rFir.tSc", DumpEntry{channel[38].rFir.tSc});
        res.insert_or_assign("channel[38].rFir.phase", DumpEntry{channel[38].rFir.phase});
        res.insert_or_assign("channel[38].vFir.m", DumpEntry{channel[38].vFir.m});
        res.insert_or_assign("channel[38].vFir.n", DumpEntry{channel[38].vFir.n});
        res.insert_or_assign("channel[38].vFir.s", DumpEntry{channel[38].vFir.s});
        res.insert_or_assign("channel[38].vFir.r", DumpEntry{channel[38].vFir.r});
        res.insert_or_assign("channel[38].vFir.tSc", DumpEntry{channel[38].vFir.tSc});
        res.insert_or_assign("channel[38].vFir.phase", DumpEntry{channel[38].vFir.phase});
        res.insert_or_assign("channel[38].mmFir.m", DumpEntry{channel[38].mmFir.m});
        res.insert_or_assign("channel[38].mmFir.n", DumpEntry{channel[38].mmFir.n});
        res.insert_or_assign("channel[38].mmFir.s", DumpEntry{channel[38].mmFir.s});
        res.insert_or_assign("channel[38].mmFir.r", DumpEntry{channel[38].mmFir.r});
        res.insert_or_assign("channel[38].mmFir.tSc", DumpEntry{channel[38].mmFir.tSc});
        res.insert_or_assign("channel[38].mmFir.phase", DumpEntry{channel[38].mmFir.phase});
        res.insert_or_assign("channel[38].limit.maxLimit", DumpEntry{channel[38].limit.maxLimit});
        res.insert_or_assign("channel[38].limit.minLimit", DumpEntry{channel[38].limit.minLimit});
        res.insert_or_assign("channel[38].limit.filterLength", DumpEntry{channel[38].limit.filterLength});
        res.insert_or_assign("channel[39].rFir.m", DumpEntry{channel[39].rFir.m});
        res.insert_or_assign("channel[39].rFir.n", DumpEntry{channel[39].rFir.n});
        res.insert_or_assign("channel[39].rFir.s", DumpEntry{channel[39].rFir.s});
        res.insert_or_assign("channel[39].rFir.r", DumpEntry{channel[39].rFir.r});
        res.insert_or_assign("channel[39].rFir.tSc", DumpEntry{channel[39].rFir.tSc});
        res.insert_or_assign("channel[39].rFir.phase", DumpEntry{channel[39].rFir.phase});
        res.insert_or_assign("channel[39].vFir.m", DumpEntry{channel[39].vFir.m});
        res.insert_or_assign("channel[39].vFir.n", DumpEntry{channel[39].vFir.n});
        res.insert_or_assign("channel[39].vFir.s", DumpEntry{channel[39].vFir.s});
        res.insert_or_assign("channel[39].vFir.r", DumpEntry{channel[39].vFir.r});
        res.insert_or_assign("channel[39].vFir.tSc", DumpEntry{channel[39].vFir.tSc});
        res.insert_or_assign("channel[39].vFir.phase", DumpEntry{channel[39].vFir.phase});
        res.insert_or_assign("channel[39].mmFir.m", DumpEntry{channel[39].mmFir.m});
        res.insert_or_assign("channel[39].mmFir.n", DumpEntry{channel[39].mmFir.n});
        res.insert_or_assign("channel[39].mmFir.s", DumpEntry{channel[39].mmFir.s});
        res.insert_or_assign("channel[39].mmFir.r", DumpEntry{channel[39].mmFir.r});
        res.insert_or_assign("channel[39].mmFir.tSc", DumpEntry{channel[39].mmFir.tSc});
        res.insert_or_assign("channel[39].mmFir.phase", DumpEntry{channel[39].mmFir.phase});
        res.insert_or_assign("channel[39].limit.maxLimit", DumpEntry{channel[39].limit.maxLimit});
        res.insert_or_assign("channel[39].limit.minLimit", DumpEntry{channel[39].limit.minLimit});
        res.insert_or_assign("channel[39].limit.filterLength", DumpEntry{channel[39].limit.filterLength});
        res.insert_or_assign("channel[40].rFir.m", DumpEntry{channel[40].rFir.m});
        res.insert_or_assign("channel[40].rFir.n", DumpEntry{channel[40].rFir.n});
        res.insert_or_assign("channel[40].rFir.s", DumpEntry{channel[40].rFir.s});
        res.insert_or_assign("channel[40].rFir.r", DumpEntry{channel[40].rFir.r});
        res.insert_or_assign("channel[40].rFir.tSc", DumpEntry{channel[40].rFir.tSc});
        res.insert_or_assign("channel[40].rFir.phase", DumpEntry{channel[40].rFir.phase});
        res.insert_or_assign("channel[40].vFir.m", DumpEntry{channel[40].vFir.m});
        res.insert_or_assign("channel[40].vFir.n", DumpEntry{channel[40].vFir.n});
        res.insert_or_assign("channel[40].vFir.s", DumpEntry{channel[40].vFir.s});
        res.insert_or_assign("channel[40].vFir.r", DumpEntry{channel[40].vFir.r});
        res.insert_or_assign("channel[40].vFir.tSc", DumpEntry{channel[40].vFir.tSc});
        res.insert_or_assign("channel[40].vFir.phase", DumpEntry{channel[40].vFir.phase});
        res.insert_or_assign("channel[40].mmFir.m", DumpEntry{channel[40].mmFir.m});
        res.insert_or_assign("channel[40].mmFir.n", DumpEntry{channel[40].mmFir.n});
        res.insert_or_assign("channel[40].mmFir.s", DumpEntry{channel[40].mmFir.s});
        res.insert_or_assign("channel[40].mmFir.r", DumpEntry{channel[40].mmFir.r});
        res.insert_or_assign("channel[40].mmFir.tSc", DumpEntry{channel[40].mmFir.tSc});
        res.insert_or_assign("channel[40].mmFir.phase", DumpEntry{channel[40].mmFir.phase});
        res.insert_or_assign("channel[40].limit.maxLimit", DumpEntry{channel[40].limit.maxLimit});
        res.insert_or_assign("channel[40].limit.minLimit", DumpEntry{channel[40].limit.minLimit});
        res.insert_or_assign("channel[40].limit.filterLength", DumpEntry{channel[40].limit.filterLength});
        res.insert_or_assign("channel[41].rFir.m", DumpEntry{channel[41].rFir.m});
        res.insert_or_assign("channel[41].rFir.n", DumpEntry{channel[41].rFir.n});
        res.insert_or_assign("channel[41].rFir.s", DumpEntry{channel[41].rFir.s});
        res.insert_or_assign("channel[41].rFir.r", DumpEntry{channel[41].rFir.r});
        res.insert_or_assign("channel[41].rFir.tSc", DumpEntry{channel[41].rFir.tSc});
        res.insert_or_assign("channel[41].rFir.phase", DumpEntry{channel[41].rFir.phase});
        res.insert_or_assign("channel[41].vFir.m", DumpEntry{channel[41].vFir.m});
        res.insert_or_assign("channel[41].vFir.n", DumpEntry{channel[41].vFir.n});
        res.insert_or_assign("channel[41].vFir.s", DumpEntry{channel[41].vFir.s});
        res.insert_or_assign("channel[41].vFir.r", DumpEntry{channel[41].vFir.r});
        res.insert_or_assign("channel[41].vFir.tSc", DumpEntry{channel[41].vFir.tSc});
        res.insert_or_assign("channel[41].vFir.phase", DumpEntry{channel[41].vFir.phase});
        res.insert_or_assign("channel[41].mmFir.m", DumpEntry{channel[41].mmFir.m});
        res.insert_or_assign("channel[41].mmFir.n", DumpEntry{channel[41].mmFir.n});
        res.insert_or_assign("channel[41].mmFir.s", DumpEntry{channel[41].mmFir.s});
        res.insert_or_assign("channel[41].mmFir.r", DumpEntry{channel[41].mmFir.r});
        res.insert_or_assign("channel[41].mmFir.tSc", DumpEntry{channel[41].mmFir.tSc});
        res.insert_or_assign("channel[41].mmFir.phase", DumpEntry{channel[41].mmFir.phase});
        res.insert_or_assign("channel[41].limit.maxLimit", DumpEntry{channel[41].limit.maxLimit});
        res.insert_or_assign("channel[41].limit.minLimit", DumpEntry{channel[41].limit.minLimit});
        res.insert_or_assign("channel[41].limit.filterLength", DumpEntry{channel[41].limit.filterLength});
        res.insert_or_assign("channel[42].rFir.m", DumpEntry{channel[42].rFir.m});
        res.insert_or_assign("channel[42].rFir.n", DumpEntry{channel[42].rFir.n});
        res.insert_or_assign("channel[42].rFir.s", DumpEntry{channel[42].rFir.s});
        res.insert_or_assign("channel[42].rFir.r", DumpEntry{channel[42].rFir.r});
        res.insert_or_assign("channel[42].rFir.tSc", DumpEntry{channel[42].rFir.tSc});
        res.insert_or_assign("channel[42].rFir.phase", DumpEntry{channel[42].rFir.phase});
        res.insert_or_assign("channel[42].vFir.m", DumpEntry{channel[42].vFir.m});
        res.insert_or_assign("channel[42].vFir.n", DumpEntry{channel[42].vFir.n});
        res.insert_or_assign("channel[42].vFir.s", DumpEntry{channel[42].vFir.s});
        res.insert_or_assign("channel[42].vFir.r", DumpEntry{channel[42].vFir.r});
        res.insert_or_assign("channel[42].vFir.tSc", DumpEntry{channel[42].vFir.tSc});
        res.insert_or_assign("channel[42].vFir.phase", DumpEntry{channel[42].vFir.phase});
        res.insert_or_assign("channel[42].mmFir.m", DumpEntry{channel[42].mmFir.m});
        res.insert_or_assign("channel[42].mmFir.n", DumpEntry{channel[42].mmFir.n});
        res.insert_or_assign("channel[42].mmFir.s", DumpEntry{channel[42].mmFir.s});
        res.insert_or_assign("channel[42].mmFir.r", DumpEntry{channel[42].mmFir.r});
        res.insert_or_assign("channel[42].mmFir.tSc", DumpEntry{channel[42].mmFir.tSc});
        res.insert_or_assign("channel[42].mmFir.phase", DumpEntry{channel[42].mmFir.phase});
        res.insert_or_assign("channel[42].limit.maxLimit", DumpEntry{channel[42].limit.maxLimit});
        res.insert_or_assign("channel[42].limit.minLimit", DumpEntry{channel[42].limit.minLimit});
        res.insert_or_assign("channel[42].limit.filterLength", DumpEntry{channel[42].limit.filterLength});
        res.insert_or_assign("channel[43].rFir.m", DumpEntry{channel[43].rFir.m});
        res.insert_or_assign("channel[43].rFir.n", DumpEntry{channel[43].rFir.n});
        res.insert_or_assign("channel[43].rFir.s", DumpEntry{channel[43].rFir.s});
        res.insert_or_assign("channel[43].rFir.r", DumpEntry{channel[43].rFir.r});
        res.insert_or_assign("channel[43].rFir.tSc", DumpEntry{channel[43].rFir.tSc});
        res.insert_or_assign("channel[43].rFir.phase", DumpEntry{channel[43].rFir.phase});
        res.insert_or_assign("channel[43].vFir.m", DumpEntry{channel[43].vFir.m});
        res.insert_or_assign("channel[43].vFir.n", DumpEntry{channel[43].vFir.n});
        res.insert_or_assign("channel[43].vFir.s", DumpEntry{channel[43].vFir.s});
        res.insert_or_assign("channel[43].vFir.r", DumpEntry{channel[43].vFir.r});
        res.insert_or_assign("channel[43].vFir.tSc", DumpEntry{channel[43].vFir.tSc});
        res.insert_or_assign("channel[43].vFir.phase", DumpEntry{channel[43].vFir.phase});
        res.insert_or_assign("channel[43].mmFir.m", DumpEntry{channel[43].mmFir.m});
        res.insert_or_assign("channel[43].mmFir.n", DumpEntry{channel[43].mmFir.n});
        res.insert_or_assign("channel[43].mmFir.s", DumpEntry{channel[43].mmFir.s});
        res.insert_or_assign("channel[43].mmFir.r", DumpEntry{channel[43].mmFir.r});
        res.insert_or_assign("channel[43].mmFir.tSc", DumpEntry{channel[43].mmFir.tSc});
        res.insert_or_assign("channel[43].mmFir.phase", DumpEntry{channel[43].mmFir.phase});
        res.insert_or_assign("channel[43].limit.maxLimit", DumpEntry{channel[43].limit.maxLimit});
        res.insert_or_assign("channel[43].limit.minLimit", DumpEntry{channel[43].limit.minLimit});
        res.insert_or_assign("channel[43].limit.filterLength", DumpEntry{channel[43].limit.filterLength});
        res.insert_or_assign("channel[44].rFir.m", DumpEntry{channel[44].rFir.m});
        res.insert_or_assign("channel[44].rFir.n", DumpEntry{channel[44].rFir.n});
        res.insert_or_assign("channel[44].rFir.s", DumpEntry{channel[44].rFir.s});
        res.insert_or_assign("channel[44].rFir.r", DumpEntry{channel[44].rFir.r});
        res.insert_or_assign("channel[44].rFir.tSc", DumpEntry{channel[44].rFir.tSc});
        res.insert_or_assign("channel[44].rFir.phase", DumpEntry{channel[44].rFir.phase});
        res.insert_or_assign("channel[44].vFir.m", DumpEntry{channel[44].vFir.m});
        res.insert_or_assign("channel[44].vFir.n", DumpEntry{channel[44].vFir.n});
        res.insert_or_assign("channel[44].vFir.s", DumpEntry{channel[44].vFir.s});
        res.insert_or_assign("channel[44].vFir.r", DumpEntry{channel[44].vFir.r});
        res.insert_or_assign("channel[44].vFir.tSc", DumpEntry{channel[44].vFir.tSc});
        res.insert_or_assign("channel[44].vFir.phase", DumpEntry{channel[44].vFir.phase});
        res.insert_or_assign("channel[44].mmFir.m", DumpEntry{channel[44].mmFir.m});
        res.insert_or_assign("channel[44].mmFir.n", DumpEntry{channel[44].mmFir.n});
        res.insert_or_assign("channel[44].mmFir.s", DumpEntry{channel[44].mmFir.s});
        res.insert_or_assign("channel[44].mmFir.r", DumpEntry{channel[44].mmFir.r});
        res.insert_or_assign("channel[44].mmFir.tSc", DumpEntry{channel[44].mmFir.tSc});
        res.insert_or_assign("channel[44].mmFir.phase", DumpEntry{channel[44].mmFir.phase});
        res.insert_or_assign("channel[44].limit.maxLimit", DumpEntry{channel[44].limit.maxLimit});
        res.insert_or_assign("channel[44].limit.minLimit", DumpEntry{channel[44].limit.minLimit});
        res.insert_or_assign("channel[44].limit.filterLength", DumpEntry{channel[44].limit.filterLength});
        res.insert_or_assign("channel[45].rFir.m", DumpEntry{channel[45].rFir.m});
        res.insert_or_assign("channel[45].rFir.n", DumpEntry{channel[45].rFir.n});
        res.insert_or_assign("channel[45].rFir.s", DumpEntry{channel[45].rFir.s});
        res.insert_or_assign("channel[45].rFir.r", DumpEntry{channel[45].rFir.r});
        res.insert_or_assign("channel[45].rFir.tSc", DumpEntry{channel[45].rFir.tSc});
        res.insert_or_assign("channel[45].rFir.phase", DumpEntry{channel[45].rFir.phase});
        res.insert_or_assign("channel[45].vFir.m", DumpEntry{channel[45].vFir.m});
        res.insert_or_assign("channel[45].vFir.n", DumpEntry{channel[45].vFir.n});
        res.insert_or_assign("channel[45].vFir.s", DumpEntry{channel[45].vFir.s});
        res.insert_or_assign("channel[45].vFir.r", DumpEntry{channel[45].vFir.r});
        res.insert_or_assign("channel[45].vFir.tSc", DumpEntry{channel[45].vFir.tSc});
        res.insert_or_assign("channel[45].vFir.phase", DumpEntry{channel[45].vFir.phase});
        res.insert_or_assign("channel[45].mmFir.m", DumpEntry{channel[45].mmFir.m});
        res.insert_or_assign("channel[45].mmFir.n", DumpEntry{channel[45].mmFir.n});
        res.insert_or_assign("channel[45].mmFir.s", DumpEntry{channel[45].mmFir.s});
        res.insert_or_assign("channel[45].mmFir.r", DumpEntry{channel[45].mmFir.r});
        res.insert_or_assign("channel[45].mmFir.tSc", DumpEntry{channel[45].mmFir.tSc});
        res.insert_or_assign("channel[45].mmFir.phase", DumpEntry{channel[45].mmFir.phase});
        res.insert_or_assign("channel[45].limit.maxLimit", DumpEntry{channel[45].limit.maxLimit});
        res.insert_or_assign("channel[45].limit.minLimit", DumpEntry{channel[45].limit.minLimit});
        res.insert_or_assign("channel[45].limit.filterLength", DumpEntry{channel[45].limit.filterLength});
        res.insert_or_assign("channel[46].rFir.m", DumpEntry{channel[46].rFir.m});
        res.insert_or_assign("channel[46].rFir.n", DumpEntry{channel[46].rFir.n});
        res.insert_or_assign("channel[46].rFir.s", DumpEntry{channel[46].rFir.s});
        res.insert_or_assign("channel[46].rFir.r", DumpEntry{channel[46].rFir.r});
        res.insert_or_assign("channel[46].rFir.tSc", DumpEntry{channel[46].rFir.tSc});
        res.insert_or_assign("channel[46].rFir.phase", DumpEntry{channel[46].rFir.phase});
        res.insert_or_assign("channel[46].vFir.m", DumpEntry{channel[46].vFir.m});
        res.insert_or_assign("channel[46].vFir.n", DumpEntry{channel[46].vFir.n});
        res.insert_or_assign("channel[46].vFir.s", DumpEntry{channel[46].vFir.s});
        res.insert_or_assign("channel[46].vFir.r", DumpEntry{channel[46].vFir.r});
        res.insert_or_assign("channel[46].vFir.tSc", DumpEntry{channel[46].vFir.tSc});
        res.insert_or_assign("channel[46].vFir.phase", DumpEntry{channel[46].vFir.phase});
        res.insert_or_assign("channel[46].mmFir.m", DumpEntry{channel[46].mmFir.m});
        res.insert_or_assign("channel[46].mmFir.n", DumpEntry{channel[46].mmFir.n});
        res.insert_or_assign("channel[46].mmFir.s", DumpEntry{channel[46].mmFir.s});
        res.insert_or_assign("channel[46].mmFir.r", DumpEntry{channel[46].mmFir.r});
        res.insert_or_assign("channel[46].mmFir.tSc", DumpEntry{channel[46].mmFir.tSc});
        res.insert_or_assign("channel[46].mmFir.phase", DumpEntry{channel[46].mmFir.phase});
        res.insert_or_assign("channel[46].limit.maxLimit", DumpEntry{channel[46].limit.maxLimit});
        res.insert_or_assign("channel[46].limit.minLimit", DumpEntry{channel[46].limit.minLimit});
        res.insert_or_assign("channel[46].limit.filterLength", DumpEntry{channel[46].limit.filterLength});
        res.insert_or_assign("channel[47].rFir.m", DumpEntry{channel[47].rFir.m});
        res.insert_or_assign("channel[47].rFir.n", DumpEntry{channel[47].rFir.n});
        res.insert_or_assign("channel[47].rFir.s", DumpEntry{channel[47].rFir.s});
        res.insert_or_assign("channel[47].rFir.r", DumpEntry{channel[47].rFir.r});
        res.insert_or_assign("channel[47].rFir.tSc", DumpEntry{channel[47].rFir.tSc});
        res.insert_or_assign("channel[47].rFir.phase", DumpEntry{channel[47].rFir.phase});
        res.insert_or_assign("channel[47].vFir.m", DumpEntry{channel[47].vFir.m});
        res.insert_or_assign("channel[47].vFir.n", DumpEntry{channel[47].vFir.n});
        res.insert_or_assign("channel[47].vFir.s", DumpEntry{channel[47].vFir.s});
        res.insert_or_assign("channel[47].vFir.r", DumpEntry{channel[47].vFir.r});
        res.insert_or_assign("channel[47].vFir.tSc", DumpEntry{channel[47].vFir.tSc});
        res.insert_or_assign("channel[47].vFir.phase", DumpEntry{channel[47].vFir.phase});
        res.insert_or_assign("channel[47].mmFir.m", DumpEntry{channel[47].mmFir.m});
        res.insert_or_assign("channel[47].mmFir.n", DumpEntry{channel[47].mmFir.n});
        res.insert_or_assign("channel[47].mmFir.s", DumpEntry{channel[47].mmFir.s});
        res.insert_or_assign("channel[47].mmFir.r", DumpEntry{channel[47].mmFir.r});
        res.insert_or_assign("channel[47].mmFir.tSc", DumpEntry{channel[47].mmFir.tSc});
        res.insert_or_assign("channel[47].mmFir.phase", DumpEntry{channel[47].mmFir.phase});
        res.insert_or_assign("channel[47].limit.maxLimit", DumpEntry{channel[47].limit.maxLimit});
        res.insert_or_assign("channel[47].limit.minLimit", DumpEntry{channel[47].limit.minLimit});
        res.insert_or_assign("channel[47].limit.filterLength", DumpEntry{channel[47].limit.filterLength});
        res.insert_or_assign("channel[48].rFir.m", DumpEntry{channel[48].rFir.m});
        res.insert_or_assign("channel[48].rFir.n", DumpEntry{channel[48].rFir.n});
        res.insert_or_assign("channel[48].rFir.s", DumpEntry{channel[48].rFir.s});
        res.insert_or_assign("channel[48].rFir.r", DumpEntry{channel[48].rFir.r});
        res.insert_or_assign("channel[48].rFir.tSc", DumpEntry{channel[48].rFir.tSc});
        res.insert_or_assign("channel[48].rFir.phase", DumpEntry{channel[48].rFir.phase});
        res.insert_or_assign("channel[48].vFir.m", DumpEntry{channel[48].vFir.m});
        res.insert_or_assign("channel[48].vFir.n", DumpEntry{channel[48].vFir.n});
        res.insert_or_assign("channel[48].vFir.s", DumpEntry{channel[48].vFir.s});
        res.insert_or_assign("channel[48].vFir.r", DumpEntry{channel[48].vFir.r});
        res.insert_or_assign("channel[48].vFir.tSc", DumpEntry{channel[48].vFir.tSc});
        res.insert_or_assign("channel[48].vFir.phase", DumpEntry{channel[48].vFir.phase});
        res.insert_or_assign("channel[48].mmFir.m", DumpEntry{channel[48].mmFir.m});
        res.insert_or_assign("channel[48].mmFir.n", DumpEntry{channel[48].mmFir.n});
        res.insert_or_assign("channel[48].mmFir.s", DumpEntry{channel[48].mmFir.s});
        res.insert_or_assign("channel[48].mmFir.r", DumpEntry{channel[48].mmFir.r});
        res.insert_or_assign("channel[48].mmFir.tSc", DumpEntry{channel[48].mmFir.tSc});
        res.insert_or_assign("channel[48].mmFir.phase", DumpEntry{channel[48].mmFir.phase});
        res.insert_or_assign("channel[48].limit.maxLimit", DumpEntry{channel[48].limit.maxLimit});
        res.insert_or_assign("channel[48].limit.minLimit", DumpEntry{channel[48].limit.minLimit});
        res.insert_or_assign("channel[48].limit.filterLength", DumpEntry{channel[48].limit.filterLength});
        res.insert_or_assign("channel[49].rFir.m", DumpEntry{channel[49].rFir.m});
        res.insert_or_assign("channel[49].rFir.n", DumpEntry{channel[49].rFir.n});
        res.insert_or_assign("channel[49].rFir.s", DumpEntry{channel[49].rFir.s});
        res.insert_or_assign("channel[49].rFir.r", DumpEntry{channel[49].rFir.r});
        res.insert_or_assign("channel[49].rFir.tSc", DumpEntry{channel[49].rFir.tSc});
        res.insert_or_assign("channel[49].rFir.phase", DumpEntry{channel[49].rFir.phase});
        res.insert_or_assign("channel[49].vFir.m", DumpEntry{channel[49].vFir.m});
        res.insert_or_assign("channel[49].vFir.n", DumpEntry{channel[49].vFir.n});
        res.insert_or_assign("channel[49].vFir.s", DumpEntry{channel[49].vFir.s});
        res.insert_or_assign("channel[49].vFir.r", DumpEntry{channel[49].vFir.r});
        res.insert_or_assign("channel[49].vFir.tSc", DumpEntry{channel[49].vFir.tSc});
        res.insert_or_assign("channel[49].vFir.phase", DumpEntry{channel[49].vFir.phase});
        res.insert_or_assign("channel[49].mmFir.m", DumpEntry{channel[49].mmFir.m});
        res.insert_or_assign("channel[49].mmFir.n", DumpEntry{channel[49].mmFir.n});
        res.insert_or_assign("channel[49].mmFir.s", DumpEntry{channel[49].mmFir.s});
        res.insert_or_assign("channel[49].mmFir.r", DumpEntry{channel[49].mmFir.r});
        res.insert_or_assign("channel[49].mmFir.tSc", DumpEntry{channel[49].mmFir.tSc});
        res.insert_or_assign("channel[49].mmFir.phase", DumpEntry{channel[49].mmFir.phase});
        res.insert_or_assign("channel[49].limit.maxLimit", DumpEntry{channel[49].limit.maxLimit});
        res.insert_or_assign("channel[49].limit.minLimit", DumpEntry{channel[49].limit.minLimit});
        res.insert_or_assign("channel[49].limit.filterLength", DumpEntry{channel[49].limit.filterLength});
        res.insert_or_assign("channel[50].rFir.m", DumpEntry{channel[50].rFir.m});
        res.insert_or_assign("channel[50].rFir.n", DumpEntry{channel[50].rFir.n});
        res.insert_or_assign("channel[50].rFir.s", DumpEntry{channel[50].rFir.s});
        res.insert_or_assign("channel[50].rFir.r", DumpEntry{channel[50].rFir.r});
        res.insert_or_assign("channel[50].rFir.tSc", DumpEntry{channel[50].rFir.tSc});
        res.insert_or_assign("channel[50].rFir.phase", DumpEntry{channel[50].rFir.phase});
        res.insert_or_assign("channel[50].vFir.m", DumpEntry{channel[50].vFir.m});
        res.insert_or_assign("channel[50].vFir.n", DumpEntry{channel[50].vFir.n});
        res.insert_or_assign("channel[50].vFir.s", DumpEntry{channel[50].vFir.s});
        res.insert_or_assign("channel[50].vFir.r", DumpEntry{channel[50].vFir.r});
        res.insert_or_assign("channel[50].vFir.tSc", DumpEntry{channel[50].vFir.tSc});
        res.insert_or_assign("channel[50].vFir.phase", DumpEntry{channel[50].vFir.phase});
        res.insert_or_assign("channel[50].mmFir.m", DumpEntry{channel[50].mmFir.m});
        res.insert_or_assign("channel[50].mmFir.n", DumpEntry{channel[50].mmFir.n});
        res.insert_or_assign("channel[50].mmFir.s", DumpEntry{channel[50].mmFir.s});
        res.insert_or_assign("channel[50].mmFir.r", DumpEntry{channel[50].mmFir.r});
        res.insert_or_assign("channel[50].mmFir.tSc", DumpEntry{channel[50].mmFir.tSc});
        res.insert_or_assign("channel[50].mmFir.phase", DumpEntry{channel[50].mmFir.phase});
        res.insert_or_assign("channel[50].limit.maxLimit", DumpEntry{channel[50].limit.maxLimit});
        res.insert_or_assign("channel[50].limit.minLimit", DumpEntry{channel[50].limit.minLimit});
        res.insert_or_assign("channel[50].limit.filterLength", DumpEntry{channel[50].limit.filterLength});
        res.insert_or_assign("channel[51].rFir.m", DumpEntry{channel[51].rFir.m});
        res.insert_or_assign("channel[51].rFir.n", DumpEntry{channel[51].rFir.n});
        res.insert_or_assign("channel[51].rFir.s", DumpEntry{channel[51].rFir.s});
        res.insert_or_assign("channel[51].rFir.r", DumpEntry{channel[51].rFir.r});
        res.insert_or_assign("channel[51].rFir.tSc", DumpEntry{channel[51].rFir.tSc});
        res.insert_or_assign("channel[51].rFir.phase", DumpEntry{channel[51].rFir.phase});
        res.insert_or_assign("channel[51].vFir.m", DumpEntry{channel[51].vFir.m});
        res.insert_or_assign("channel[51].vFir.n", DumpEntry{channel[51].vFir.n});
        res.insert_or_assign("channel[51].vFir.s", DumpEntry{channel[51].vFir.s});
        res.insert_or_assign("channel[51].vFir.r", DumpEntry{channel[51].vFir.r});
        res.insert_or_assign("channel[51].vFir.tSc", DumpEntry{channel[51].vFir.tSc});
        res.insert_or_assign("channel[51].vFir.phase", DumpEntry{channel[51].vFir.phase});
        res.insert_or_assign("channel[51].mmFir.m", DumpEntry{channel[51].mmFir.m});
        res.insert_or_assign("channel[51].mmFir.n", DumpEntry{channel[51].mmFir.n});
        res.insert_or_assign("channel[51].mmFir.s", DumpEntry{channel[51].mmFir.s});
        res.insert_or_assign("channel[51].mmFir.r", DumpEntry{channel[51].mmFir.r});
        res.insert_or_assign("channel[51].mmFir.tSc", DumpEntry{channel[51].mmFir.tSc});
        res.insert_or_assign("channel[51].mmFir.phase", DumpEntry{channel[51].mmFir.phase});
        res.insert_or_assign("channel[51].limit.maxLimit", DumpEntry{channel[51].limit.maxLimit});
        res.insert_or_assign("channel[51].limit.minLimit", DumpEntry{channel[51].limit.minLimit});
        res.insert_or_assign("channel[51].limit.filterLength", DumpEntry{channel[51].limit.filterLength});
        res.insert_or_assign("channel[52].rFir.m", DumpEntry{channel[52].rFir.m});
        res.insert_or_assign("channel[52].rFir.n", DumpEntry{channel[52].rFir.n});
        res.insert_or_assign("channel[52].rFir.s", DumpEntry{channel[52].rFir.s});
        res.insert_or_assign("channel[52].rFir.r", DumpEntry{channel[52].rFir.r});
        res.insert_or_assign("channel[52].rFir.tSc", DumpEntry{channel[52].rFir.tSc});
        res.insert_or_assign("channel[52].rFir.phase", DumpEntry{channel[52].rFir.phase});
        res.insert_or_assign("channel[52].vFir.m", DumpEntry{channel[52].vFir.m});
        res.insert_or_assign("channel[52].vFir.n", DumpEntry{channel[52].vFir.n});
        res.insert_or_assign("channel[52].vFir.s", DumpEntry{channel[52].vFir.s});
        res.insert_or_assign("channel[52].vFir.r", DumpEntry{channel[52].vFir.r});
        res.insert_or_assign("channel[52].vFir.tSc", DumpEntry{channel[52].vFir.tSc});
        res.insert_or_assign("channel[52].vFir.phase", DumpEntry{channel[52].vFir.phase});
        res.insert_or_assign("channel[52].mmFir.m", DumpEntry{channel[52].mmFir.m});
        res.insert_or_assign("channel[52].mmFir.n", DumpEntry{channel[52].mmFir.n});
        res.insert_or_assign("channel[52].mmFir.s", DumpEntry{channel[52].mmFir.s});
        res.insert_or_assign("channel[52].mmFir.r", DumpEntry{channel[52].mmFir.r});
        res.insert_or_assign("channel[52].mmFir.tSc", DumpEntry{channel[52].mmFir.tSc});
        res.insert_or_assign("channel[52].mmFir.phase", DumpEntry{channel[52].mmFir.phase});
        res.insert_or_assign("channel[52].limit.maxLimit", DumpEntry{channel[52].limit.maxLimit});
        res.insert_or_assign("channel[52].limit.minLimit", DumpEntry{channel[52].limit.minLimit});
        res.insert_or_assign("channel[52].limit.filterLength", DumpEntry{channel[52].limit.filterLength});
        res.insert_or_assign("channel[53].rFir.m", DumpEntry{channel[53].rFir.m});
        res.insert_or_assign("channel[53].rFir.n", DumpEntry{channel[53].rFir.n});
        res.insert_or_assign("channel[53].rFir.s", DumpEntry{channel[53].rFir.s});
        res.insert_or_assign("channel[53].rFir.r", DumpEntry{channel[53].rFir.r});
        res.insert_or_assign("channel[53].rFir.tSc", DumpEntry{channel[53].rFir.tSc});
        res.insert_or_assign("channel[53].rFir.phase", DumpEntry{channel[53].rFir.phase});
        res.insert_or_assign("channel[53].vFir.m", DumpEntry{channel[53].vFir.m});
        res.insert_or_assign("channel[53].vFir.n", DumpEntry{channel[53].vFir.n});
        res.insert_or_assign("channel[53].vFir.s", DumpEntry{channel[53].vFir.s});
        res.insert_or_assign("channel[53].vFir.r", DumpEntry{channel[53].vFir.r});
        res.insert_or_assign("channel[53].vFir.tSc", DumpEntry{channel[53].vFir.tSc});
        res.insert_or_assign("channel[53].vFir.phase", DumpEntry{channel[53].vFir.phase});
        res.insert_or_assign("channel[53].mmFir.m", DumpEntry{channel[53].mmFir.m});
        res.insert_or_assign("channel[53].mmFir.n", DumpEntry{channel[53].mmFir.n});
        res.insert_or_assign("channel[53].mmFir.s", DumpEntry{channel[53].mmFir.s});
        res.insert_or_assign("channel[53].mmFir.r", DumpEntry{channel[53].mmFir.r});
        res.insert_or_assign("channel[53].mmFir.tSc", DumpEntry{channel[53].mmFir.tSc});
        res.insert_or_assign("channel[53].mmFir.phase", DumpEntry{channel[53].mmFir.phase});
        res.insert_or_assign("channel[53].limit.maxLimit", DumpEntry{channel[53].limit.maxLimit});
        res.insert_or_assign("channel[53].limit.minLimit", DumpEntry{channel[53].limit.minLimit});
        res.insert_or_assign("channel[53].limit.filterLength", DumpEntry{channel[53].limit.filterLength});
        res.insert_or_assign("channel[54].rFir.m", DumpEntry{channel[54].rFir.m});
        res.insert_or_assign("channel[54].rFir.n", DumpEntry{channel[54].rFir.n});
        res.insert_or_assign("channel[54].rFir.s", DumpEntry{channel[54].rFir.s});
        res.insert_or_assign("channel[54].rFir.r", DumpEntry{channel[54].rFir.r});
        res.insert_or_assign("channel[54].rFir.tSc", DumpEntry{channel[54].rFir.tSc});
        res.insert_or_assign("channel[54].rFir.phase", DumpEntry{channel[54].rFir.phase});
        res.insert_or_assign("channel[54].vFir.m", DumpEntry{channel[54].vFir.m});
        res.insert_or_assign("channel[54].vFir.n", DumpEntry{channel[54].vFir.n});
        res.insert_or_assign("channel[54].vFir.s", DumpEntry{channel[54].vFir.s});
        res.insert_or_assign("channel[54].vFir.r", DumpEntry{channel[54].vFir.r});
        res.insert_or_assign("channel[54].vFir.tSc", DumpEntry{channel[54].vFir.tSc});
        res.insert_or_assign("channel[54].vFir.phase", DumpEntry{channel[54].vFir.phase});
        res.insert_or_assign("channel[54].mmFir.m", DumpEntry{channel[54].mmFir.m});
        res.insert_or_assign("channel[54].mmFir.n", DumpEntry{channel[54].mmFir.n});
        res.insert_or_assign("channel[54].mmFir.s", DumpEntry{channel[54].mmFir.s});
        res.insert_or_assign("channel[54].mmFir.r", DumpEntry{channel[54].mmFir.r});
        res.insert_or_assign("channel[54].mmFir.tSc", DumpEntry{channel[54].mmFir.tSc});
        res.insert_or_assign("channel[54].mmFir.phase", DumpEntry{channel[54].mmFir.phase});
        res.insert_or_assign("channel[54].limit.maxLimit", DumpEntry{channel[54].limit.maxLimit});
        res.insert_or_assign("channel[54].limit.minLimit", DumpEntry{channel[54].limit.minLimit});
        res.insert_or_assign("channel[54].limit.filterLength", DumpEntry{channel[54].limit.filterLength});
        res.insert_or_assign("channel[55].rFir.m", DumpEntry{channel[55].rFir.m});
        res.insert_or_assign("channel[55].rFir.n", DumpEntry{channel[55].rFir.n});
        res.insert_or_assign("channel[55].rFir.s", DumpEntry{channel[55].rFir.s});
        res.insert_or_assign("channel[55].rFir.r", DumpEntry{channel[55].rFir.r});
        res.insert_or_assign("channel[55].rFir.tSc", DumpEntry{channel[55].rFir.tSc});
        res.insert_or_assign("channel[55].rFir.phase", DumpEntry{channel[55].rFir.phase});
        res.insert_or_assign("channel[55].vFir.m", DumpEntry{channel[55].vFir.m});
        res.insert_or_assign("channel[55].vFir.n", DumpEntry{channel[55].vFir.n});
        res.insert_or_assign("channel[55].vFir.s", DumpEntry{channel[55].vFir.s});
        res.insert_or_assign("channel[55].vFir.r", DumpEntry{channel[55].vFir.r});
        res.insert_or_assign("channel[55].vFir.tSc", DumpEntry{channel[55].vFir.tSc});
        res.insert_or_assign("channel[55].vFir.phase", DumpEntry{channel[55].vFir.phase});
        res.insert_or_assign("channel[55].mmFir.m", DumpEntry{channel[55].mmFir.m});
        res.insert_or_assign("channel[55].mmFir.n", DumpEntry{channel[55].mmFir.n});
        res.insert_or_assign("channel[55].mmFir.s", DumpEntry{channel[55].mmFir.s});
        res.insert_or_assign("channel[55].mmFir.r", DumpEntry{channel[55].mmFir.r});
        res.insert_or_assign("channel[55].mmFir.tSc", DumpEntry{channel[55].mmFir.tSc});
        res.insert_or_assign("channel[55].mmFir.phase", DumpEntry{channel[55].mmFir.phase});
        res.insert_or_assign("channel[55].limit.maxLimit", DumpEntry{channel[55].limit.maxLimit});
        res.insert_or_assign("channel[55].limit.minLimit", DumpEntry{channel[55].limit.minLimit});
        res.insert_or_assign("channel[55].limit.filterLength", DumpEntry{channel[55].limit.filterLength});
        res.insert_or_assign("channel[56].rFir.m", DumpEntry{channel[56].rFir.m});
        res.insert_or_assign("channel[56].rFir.n", DumpEntry{channel[56].rFir.n});
        res.insert_or_assign("channel[56].rFir.s", DumpEntry{channel[56].rFir.s});
        res.insert_or_assign("channel[56].rFir.r", DumpEntry{channel[56].rFir.r});
        res.insert_or_assign("channel[56].rFir.tSc", DumpEntry{channel[56].rFir.tSc});
        res.insert_or_assign("channel[56].rFir.phase", DumpEntry{channel[56].rFir.phase});
        res.insert_or_assign("channel[56].vFir.m", DumpEntry{channel[56].vFir.m});
        res.insert_or_assign("channel[56].vFir.n", DumpEntry{channel[56].vFir.n});
        res.insert_or_assign("channel[56].vFir.s", DumpEntry{channel[56].vFir.s});
        res.insert_or_assign("channel[56].vFir.r", DumpEntry{channel[56].vFir.r});
        res.insert_or_assign("channel[56].vFir.tSc", DumpEntry{channel[56].vFir.tSc});
        res.insert_or_assign("channel[56].vFir.phase", DumpEntry{channel[56].vFir.phase});
        res.insert_or_assign("channel[56].mmFir.m", DumpEntry{channel[56].mmFir.m});
        res.insert_or_assign("channel[56].mmFir.n", DumpEntry{channel[56].mmFir.n});
        res.insert_or_assign("channel[56].mmFir.s", DumpEntry{channel[56].mmFir.s});
        res.insert_or_assign("channel[56].mmFir.r", DumpEntry{channel[56].mmFir.r});
        res.insert_or_assign("channel[56].mmFir.tSc", DumpEntry{channel[56].mmFir.tSc});
        res.insert_or_assign("channel[56].mmFir.phase", DumpEntry{channel[56].mmFir.phase});
        res.insert_or_assign("channel[56].limit.maxLimit", DumpEntry{channel[56].limit.maxLimit});
        res.insert_or_assign("channel[56].limit.minLimit", DumpEntry{channel[56].limit.minLimit});
        res.insert_or_assign("channel[56].limit.filterLength", DumpEntry{channel[56].limit.filterLength});
        res.insert_or_assign("channel[57].rFir.m", DumpEntry{channel[57].rFir.m});
        res.insert_or_assign("channel[57].rFir.n", DumpEntry{channel[57].rFir.n});
        res.insert_or_assign("channel[57].rFir.s", DumpEntry{channel[57].rFir.s});
        res.insert_or_assign("channel[57].rFir.r", DumpEntry{channel[57].rFir.r});
        res.insert_or_assign("channel[57].rFir.tSc", DumpEntry{channel[57].rFir.tSc});
        res.insert_or_assign("channel[57].rFir.phase", DumpEntry{channel[57].rFir.phase});
        res.insert_or_assign("channel[57].vFir.m", DumpEntry{channel[57].vFir.m});
        res.insert_or_assign("channel[57].vFir.n", DumpEntry{channel[57].vFir.n});
        res.insert_or_assign("channel[57].vFir.s", DumpEntry{channel[57].vFir.s});
        res.insert_or_assign("channel[57].vFir.r", DumpEntry{channel[57].vFir.r});
        res.insert_or_assign("channel[57].vFir.tSc", DumpEntry{channel[57].vFir.tSc});
        res.insert_or_assign("channel[57].vFir.phase", DumpEntry{channel[57].vFir.phase});
        res.insert_or_assign("channel[57].mmFir.m", DumpEntry{channel[57].mmFir.m});
        res.insert_or_assign("channel[57].mmFir.n", DumpEntry{channel[57].mmFir.n});
        res.insert_or_assign("channel[57].mmFir.s", DumpEntry{channel[57].mmFir.s});
        res.insert_or_assign("channel[57].mmFir.r", DumpEntry{channel[57].mmFir.r});
        res.insert_or_assign("channel[57].mmFir.tSc", DumpEntry{channel[57].mmFir.tSc});
        res.insert_or_assign("channel[57].mmFir.phase", DumpEntry{channel[57].mmFir.phase});
        res.insert_or_assign("channel[57].limit.maxLimit", DumpEntry{channel[57].limit.maxLimit});
        res.insert_or_assign("channel[57].limit.minLimit", DumpEntry{channel[57].limit.minLimit});
        res.insert_or_assign("channel[57].limit.filterLength", DumpEntry{channel[57].limit.filterLength});
        res.insert_or_assign("channel[58].rFir.m", DumpEntry{channel[58].rFir.m});
        res.insert_or_assign("channel[58].rFir.n", DumpEntry{channel[58].rFir.n});
        res.insert_or_assign("channel[58].rFir.s", DumpEntry{channel[58].rFir.s});
        res.insert_or_assign("channel[58].rFir.r", DumpEntry{channel[58].rFir.r});
        res.insert_or_assign("channel[58].rFir.tSc", DumpEntry{channel[58].rFir.tSc});
        res.insert_or_assign("channel[58].rFir.phase", DumpEntry{channel[58].rFir.phase});
        res.insert_or_assign("channel[58].vFir.m", DumpEntry{channel[58].vFir.m});
        res.insert_or_assign("channel[58].vFir.n", DumpEntry{channel[58].vFir.n});
        res.insert_or_assign("channel[58].vFir.s", DumpEntry{channel[58].vFir.s});
        res.insert_or_assign("channel[58].vFir.r", DumpEntry{channel[58].vFir.r});
        res.insert_or_assign("channel[58].vFir.tSc", DumpEntry{channel[58].vFir.tSc});
        res.insert_or_assign("channel[58].vFir.phase", DumpEntry{channel[58].vFir.phase});
        res.insert_or_assign("channel[58].mmFir.m", DumpEntry{channel[58].mmFir.m});
        res.insert_or_assign("channel[58].mmFir.n", DumpEntry{channel[58].mmFir.n});
        res.insert_or_assign("channel[58].mmFir.s", DumpEntry{channel[58].mmFir.s});
        res.insert_or_assign("channel[58].mmFir.r", DumpEntry{channel[58].mmFir.r});
        res.insert_or_assign("channel[58].mmFir.tSc", DumpEntry{channel[58].mmFir.tSc});
        res.insert_or_assign("channel[58].mmFir.phase", DumpEntry{channel[58].mmFir.phase});
        res.insert_or_assign("channel[58].limit.maxLimit", DumpEntry{channel[58].limit.maxLimit});
        res.insert_or_assign("channel[58].limit.minLimit", DumpEntry{channel[58].limit.minLimit});
        res.insert_or_assign("channel[58].limit.filterLength", DumpEntry{channel[58].limit.filterLength});
        res.insert_or_assign("channel[59].rFir.m", DumpEntry{channel[59].rFir.m});
        res.insert_or_assign("channel[59].rFir.n", DumpEntry{channel[59].rFir.n});
        res.insert_or_assign("channel[59].rFir.s", DumpEntry{channel[59].rFir.s});
        res.insert_or_assign("channel[59].rFir.r", DumpEntry{channel[59].rFir.r});
        res.insert_or_assign("channel[59].rFir.tSc", DumpEntry{channel[59].rFir.tSc});
        res.insert_or_assign("channel[59].rFir.phase", DumpEntry{channel[59].rFir.phase});
        res.insert_or_assign("channel[59].vFir.m", DumpEntry{channel[59].vFir.m});
        res.insert_or_assign("channel[59].vFir.n", DumpEntry{channel[59].vFir.n});
        res.insert_or_assign("channel[59].vFir.s", DumpEntry{channel[59].vFir.s});
        res.insert_or_assign("channel[59].vFir.r", DumpEntry{channel[59].vFir.r});
        res.insert_or_assign("channel[59].vFir.tSc", DumpEntry{channel[59].vFir.tSc});
        res.insert_or_assign("channel[59].vFir.phase", DumpEntry{channel[59].vFir.phase});
        res.insert_or_assign("channel[59].mmFir.m", DumpEntry{channel[59].mmFir.m});
        res.insert_or_assign("channel[59].mmFir.n", DumpEntry{channel[59].mmFir.n});
        res.insert_or_assign("channel[59].mmFir.s", DumpEntry{channel[59].mmFir.s});
        res.insert_or_assign("channel[59].mmFir.r", DumpEntry{channel[59].mmFir.r});
        res.insert_or_assign("channel[59].mmFir.tSc", DumpEntry{channel[59].mmFir.tSc});
        res.insert_or_assign("channel[59].mmFir.phase", DumpEntry{channel[59].mmFir.phase});
        res.insert_or_assign("channel[59].limit.maxLimit", DumpEntry{channel[59].limit.maxLimit});
        res.insert_or_assign("channel[59].limit.minLimit", DumpEntry{channel[59].limit.minLimit});
        res.insert_or_assign("channel[59].limit.filterLength", DumpEntry{channel[59].limit.filterLength});
        res.insert_or_assign("channel[60].rFir.m", DumpEntry{channel[60].rFir.m});
        res.insert_or_assign("channel[60].rFir.n", DumpEntry{channel[60].rFir.n});
        res.insert_or_assign("channel[60].rFir.s", DumpEntry{channel[60].rFir.s});
        res.insert_or_assign("channel[60].rFir.r", DumpEntry{channel[60].rFir.r});
        res.insert_or_assign("channel[60].rFir.tSc", DumpEntry{channel[60].rFir.tSc});
        res.insert_or_assign("channel[60].rFir.phase", DumpEntry{channel[60].rFir.phase});
        res.insert_or_assign("channel[60].vFir.m", DumpEntry{channel[60].vFir.m});
        res.insert_or_assign("channel[60].vFir.n", DumpEntry{channel[60].vFir.n});
        res.insert_or_assign("channel[60].vFir.s", DumpEntry{channel[60].vFir.s});
        res.insert_or_assign("channel[60].vFir.r", DumpEntry{channel[60].vFir.r});
        res.insert_or_assign("channel[60].vFir.tSc", DumpEntry{channel[60].vFir.tSc});
        res.insert_or_assign("channel[60].vFir.phase", DumpEntry{channel[60].vFir.phase});
        res.insert_or_assign("channel[60].mmFir.m", DumpEntry{channel[60].mmFir.m});
        res.insert_or_assign("channel[60].mmFir.n", DumpEntry{channel[60].mmFir.n});
        res.insert_or_assign("channel[60].mmFir.s", DumpEntry{channel[60].mmFir.s});
        res.insert_or_assign("channel[60].mmFir.r", DumpEntry{channel[60].mmFir.r});
        res.insert_or_assign("channel[60].mmFir.tSc", DumpEntry{channel[60].mmFir.tSc});
        res.insert_or_assign("channel[60].mmFir.phase", DumpEntry{channel[60].mmFir.phase});
        res.insert_or_assign("channel[60].limit.maxLimit", DumpEntry{channel[60].limit.maxLimit});
        res.insert_or_assign("channel[60].limit.minLimit", DumpEntry{channel[60].limit.minLimit});
        res.insert_or_assign("channel[60].limit.filterLength", DumpEntry{channel[60].limit.filterLength});
        res.insert_or_assign("channel[61].rFir.m", DumpEntry{channel[61].rFir.m});
        res.insert_or_assign("channel[61].rFir.n", DumpEntry{channel[61].rFir.n});
        res.insert_or_assign("channel[61].rFir.s", DumpEntry{channel[61].rFir.s});
        res.insert_or_assign("channel[61].rFir.r", DumpEntry{channel[61].rFir.r});
        res.insert_or_assign("channel[61].rFir.tSc", DumpEntry{channel[61].rFir.tSc});
        res.insert_or_assign("channel[61].rFir.phase", DumpEntry{channel[61].rFir.phase});
        res.insert_or_assign("channel[61].vFir.m", DumpEntry{channel[61].vFir.m});
        res.insert_or_assign("channel[61].vFir.n", DumpEntry{channel[61].vFir.n});
        res.insert_or_assign("channel[61].vFir.s", DumpEntry{channel[61].vFir.s});
        res.insert_or_assign("channel[61].vFir.r", DumpEntry{channel[61].vFir.r});
        res.insert_or_assign("channel[61].vFir.tSc", DumpEntry{channel[61].vFir.tSc});
        res.insert_or_assign("channel[61].vFir.phase", DumpEntry{channel[61].vFir.phase});
        res.insert_or_assign("channel[61].mmFir.m", DumpEntry{channel[61].mmFir.m});
        res.insert_or_assign("channel[61].mmFir.n", DumpEntry{channel[61].mmFir.n});
        res.insert_or_assign("channel[61].mmFir.s", DumpEntry{channel[61].mmFir.s});
        res.insert_or_assign("channel[61].mmFir.r", DumpEntry{channel[61].mmFir.r});
        res.insert_or_assign("channel[61].mmFir.tSc", DumpEntry{channel[61].mmFir.tSc});
        res.insert_or_assign("channel[61].mmFir.phase", DumpEntry{channel[61].mmFir.phase});
        res.insert_or_assign("channel[61].limit.maxLimit", DumpEntry{channel[61].limit.maxLimit});
        res.insert_or_assign("channel[61].limit.minLimit", DumpEntry{channel[61].limit.minLimit});
        res.insert_or_assign("channel[61].limit.filterLength", DumpEntry{channel[61].limit.filterLength});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogFir`
    //!
    //! @param analogFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under analogFir
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogFir& analogFir)
    {
        DumpMap res{analogFir.base()};
        res.insert_or_assign("analogFir.channel[0].rFir.m", DumpEntry{analogFir.channel[0].rFir.m});
        res.insert_or_assign("analogFir.channel[0].rFir.n", DumpEntry{analogFir.channel[0].rFir.n});
        res.insert_or_assign("analogFir.channel[0].rFir.s", DumpEntry{analogFir.channel[0].rFir.s});
        res.insert_or_assign("analogFir.channel[0].rFir.r", DumpEntry{analogFir.channel[0].rFir.r});
        res.insert_or_assign("analogFir.channel[0].rFir.tSc", DumpEntry{analogFir.channel[0].rFir.tSc});
        res.insert_or_assign("analogFir.channel[0].rFir.phase", DumpEntry{analogFir.channel[0].rFir.phase});
        res.insert_or_assign("analogFir.channel[0].vFir.m", DumpEntry{analogFir.channel[0].vFir.m});
        res.insert_or_assign("analogFir.channel[0].vFir.n", DumpEntry{analogFir.channel[0].vFir.n});
        res.insert_or_assign("analogFir.channel[0].vFir.s", DumpEntry{analogFir.channel[0].vFir.s});
        res.insert_or_assign("analogFir.channel[0].vFir.r", DumpEntry{analogFir.channel[0].vFir.r});
        res.insert_or_assign("analogFir.channel[0].vFir.tSc", DumpEntry{analogFir.channel[0].vFir.tSc});
        res.insert_or_assign("analogFir.channel[0].vFir.phase", DumpEntry{analogFir.channel[0].vFir.phase});
        res.insert_or_assign("analogFir.channel[0].mmFir.m", DumpEntry{analogFir.channel[0].mmFir.m});
        res.insert_or_assign("analogFir.channel[0].mmFir.n", DumpEntry{analogFir.channel[0].mmFir.n});
        res.insert_or_assign("analogFir.channel[0].mmFir.s", DumpEntry{analogFir.channel[0].mmFir.s});
        res.insert_or_assign("analogFir.channel[0].mmFir.r", DumpEntry{analogFir.channel[0].mmFir.r});
        res.insert_or_assign("analogFir.channel[0].mmFir.tSc", DumpEntry{analogFir.channel[0].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[0].mmFir.phase", DumpEntry{analogFir.channel[0].mmFir.phase});
        res.insert_or_assign("analogFir.channel[0].limit.maxLimit", DumpEntry{analogFir.channel[0].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[0].limit.minLimit", DumpEntry{analogFir.channel[0].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[0].limit.filterLength", DumpEntry{analogFir.channel[0].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[1].rFir.m", DumpEntry{analogFir.channel[1].rFir.m});
        res.insert_or_assign("analogFir.channel[1].rFir.n", DumpEntry{analogFir.channel[1].rFir.n});
        res.insert_or_assign("analogFir.channel[1].rFir.s", DumpEntry{analogFir.channel[1].rFir.s});
        res.insert_or_assign("analogFir.channel[1].rFir.r", DumpEntry{analogFir.channel[1].rFir.r});
        res.insert_or_assign("analogFir.channel[1].rFir.tSc", DumpEntry{analogFir.channel[1].rFir.tSc});
        res.insert_or_assign("analogFir.channel[1].rFir.phase", DumpEntry{analogFir.channel[1].rFir.phase});
        res.insert_or_assign("analogFir.channel[1].vFir.m", DumpEntry{analogFir.channel[1].vFir.m});
        res.insert_or_assign("analogFir.channel[1].vFir.n", DumpEntry{analogFir.channel[1].vFir.n});
        res.insert_or_assign("analogFir.channel[1].vFir.s", DumpEntry{analogFir.channel[1].vFir.s});
        res.insert_or_assign("analogFir.channel[1].vFir.r", DumpEntry{analogFir.channel[1].vFir.r});
        res.insert_or_assign("analogFir.channel[1].vFir.tSc", DumpEntry{analogFir.channel[1].vFir.tSc});
        res.insert_or_assign("analogFir.channel[1].vFir.phase", DumpEntry{analogFir.channel[1].vFir.phase});
        res.insert_or_assign("analogFir.channel[1].mmFir.m", DumpEntry{analogFir.channel[1].mmFir.m});
        res.insert_or_assign("analogFir.channel[1].mmFir.n", DumpEntry{analogFir.channel[1].mmFir.n});
        res.insert_or_assign("analogFir.channel[1].mmFir.s", DumpEntry{analogFir.channel[1].mmFir.s});
        res.insert_or_assign("analogFir.channel[1].mmFir.r", DumpEntry{analogFir.channel[1].mmFir.r});
        res.insert_or_assign("analogFir.channel[1].mmFir.tSc", DumpEntry{analogFir.channel[1].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[1].mmFir.phase", DumpEntry{analogFir.channel[1].mmFir.phase});
        res.insert_or_assign("analogFir.channel[1].limit.maxLimit", DumpEntry{analogFir.channel[1].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[1].limit.minLimit", DumpEntry{analogFir.channel[1].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[1].limit.filterLength", DumpEntry{analogFir.channel[1].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[2].rFir.m", DumpEntry{analogFir.channel[2].rFir.m});
        res.insert_or_assign("analogFir.channel[2].rFir.n", DumpEntry{analogFir.channel[2].rFir.n});
        res.insert_or_assign("analogFir.channel[2].rFir.s", DumpEntry{analogFir.channel[2].rFir.s});
        res.insert_or_assign("analogFir.channel[2].rFir.r", DumpEntry{analogFir.channel[2].rFir.r});
        res.insert_or_assign("analogFir.channel[2].rFir.tSc", DumpEntry{analogFir.channel[2].rFir.tSc});
        res.insert_or_assign("analogFir.channel[2].rFir.phase", DumpEntry{analogFir.channel[2].rFir.phase});
        res.insert_or_assign("analogFir.channel[2].vFir.m", DumpEntry{analogFir.channel[2].vFir.m});
        res.insert_or_assign("analogFir.channel[2].vFir.n", DumpEntry{analogFir.channel[2].vFir.n});
        res.insert_or_assign("analogFir.channel[2].vFir.s", DumpEntry{analogFir.channel[2].vFir.s});
        res.insert_or_assign("analogFir.channel[2].vFir.r", DumpEntry{analogFir.channel[2].vFir.r});
        res.insert_or_assign("analogFir.channel[2].vFir.tSc", DumpEntry{analogFir.channel[2].vFir.tSc});
        res.insert_or_assign("analogFir.channel[2].vFir.phase", DumpEntry{analogFir.channel[2].vFir.phase});
        res.insert_or_assign("analogFir.channel[2].mmFir.m", DumpEntry{analogFir.channel[2].mmFir.m});
        res.insert_or_assign("analogFir.channel[2].mmFir.n", DumpEntry{analogFir.channel[2].mmFir.n});
        res.insert_or_assign("analogFir.channel[2].mmFir.s", DumpEntry{analogFir.channel[2].mmFir.s});
        res.insert_or_assign("analogFir.channel[2].mmFir.r", DumpEntry{analogFir.channel[2].mmFir.r});
        res.insert_or_assign("analogFir.channel[2].mmFir.tSc", DumpEntry{analogFir.channel[2].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[2].mmFir.phase", DumpEntry{analogFir.channel[2].mmFir.phase});
        res.insert_or_assign("analogFir.channel[2].limit.maxLimit", DumpEntry{analogFir.channel[2].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[2].limit.minLimit", DumpEntry{analogFir.channel[2].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[2].limit.filterLength", DumpEntry{analogFir.channel[2].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[3].rFir.m", DumpEntry{analogFir.channel[3].rFir.m});
        res.insert_or_assign("analogFir.channel[3].rFir.n", DumpEntry{analogFir.channel[3].rFir.n});
        res.insert_or_assign("analogFir.channel[3].rFir.s", DumpEntry{analogFir.channel[3].rFir.s});
        res.insert_or_assign("analogFir.channel[3].rFir.r", DumpEntry{analogFir.channel[3].rFir.r});
        res.insert_or_assign("analogFir.channel[3].rFir.tSc", DumpEntry{analogFir.channel[3].rFir.tSc});
        res.insert_or_assign("analogFir.channel[3].rFir.phase", DumpEntry{analogFir.channel[3].rFir.phase});
        res.insert_or_assign("analogFir.channel[3].vFir.m", DumpEntry{analogFir.channel[3].vFir.m});
        res.insert_or_assign("analogFir.channel[3].vFir.n", DumpEntry{analogFir.channel[3].vFir.n});
        res.insert_or_assign("analogFir.channel[3].vFir.s", DumpEntry{analogFir.channel[3].vFir.s});
        res.insert_or_assign("analogFir.channel[3].vFir.r", DumpEntry{analogFir.channel[3].vFir.r});
        res.insert_or_assign("analogFir.channel[3].vFir.tSc", DumpEntry{analogFir.channel[3].vFir.tSc});
        res.insert_or_assign("analogFir.channel[3].vFir.phase", DumpEntry{analogFir.channel[3].vFir.phase});
        res.insert_or_assign("analogFir.channel[3].mmFir.m", DumpEntry{analogFir.channel[3].mmFir.m});
        res.insert_or_assign("analogFir.channel[3].mmFir.n", DumpEntry{analogFir.channel[3].mmFir.n});
        res.insert_or_assign("analogFir.channel[3].mmFir.s", DumpEntry{analogFir.channel[3].mmFir.s});
        res.insert_or_assign("analogFir.channel[3].mmFir.r", DumpEntry{analogFir.channel[3].mmFir.r});
        res.insert_or_assign("analogFir.channel[3].mmFir.tSc", DumpEntry{analogFir.channel[3].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[3].mmFir.phase", DumpEntry{analogFir.channel[3].mmFir.phase});
        res.insert_or_assign("analogFir.channel[3].limit.maxLimit", DumpEntry{analogFir.channel[3].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[3].limit.minLimit", DumpEntry{analogFir.channel[3].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[3].limit.filterLength", DumpEntry{analogFir.channel[3].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[4].rFir.m", DumpEntry{analogFir.channel[4].rFir.m});
        res.insert_or_assign("analogFir.channel[4].rFir.n", DumpEntry{analogFir.channel[4].rFir.n});
        res.insert_or_assign("analogFir.channel[4].rFir.s", DumpEntry{analogFir.channel[4].rFir.s});
        res.insert_or_assign("analogFir.channel[4].rFir.r", DumpEntry{analogFir.channel[4].rFir.r});
        res.insert_or_assign("analogFir.channel[4].rFir.tSc", DumpEntry{analogFir.channel[4].rFir.tSc});
        res.insert_or_assign("analogFir.channel[4].rFir.phase", DumpEntry{analogFir.channel[4].rFir.phase});
        res.insert_or_assign("analogFir.channel[4].vFir.m", DumpEntry{analogFir.channel[4].vFir.m});
        res.insert_or_assign("analogFir.channel[4].vFir.n", DumpEntry{analogFir.channel[4].vFir.n});
        res.insert_or_assign("analogFir.channel[4].vFir.s", DumpEntry{analogFir.channel[4].vFir.s});
        res.insert_or_assign("analogFir.channel[4].vFir.r", DumpEntry{analogFir.channel[4].vFir.r});
        res.insert_or_assign("analogFir.channel[4].vFir.tSc", DumpEntry{analogFir.channel[4].vFir.tSc});
        res.insert_or_assign("analogFir.channel[4].vFir.phase", DumpEntry{analogFir.channel[4].vFir.phase});
        res.insert_or_assign("analogFir.channel[4].mmFir.m", DumpEntry{analogFir.channel[4].mmFir.m});
        res.insert_or_assign("analogFir.channel[4].mmFir.n", DumpEntry{analogFir.channel[4].mmFir.n});
        res.insert_or_assign("analogFir.channel[4].mmFir.s", DumpEntry{analogFir.channel[4].mmFir.s});
        res.insert_or_assign("analogFir.channel[4].mmFir.r", DumpEntry{analogFir.channel[4].mmFir.r});
        res.insert_or_assign("analogFir.channel[4].mmFir.tSc", DumpEntry{analogFir.channel[4].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[4].mmFir.phase", DumpEntry{analogFir.channel[4].mmFir.phase});
        res.insert_or_assign("analogFir.channel[4].limit.maxLimit", DumpEntry{analogFir.channel[4].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[4].limit.minLimit", DumpEntry{analogFir.channel[4].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[4].limit.filterLength", DumpEntry{analogFir.channel[4].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[5].rFir.m", DumpEntry{analogFir.channel[5].rFir.m});
        res.insert_or_assign("analogFir.channel[5].rFir.n", DumpEntry{analogFir.channel[5].rFir.n});
        res.insert_or_assign("analogFir.channel[5].rFir.s", DumpEntry{analogFir.channel[5].rFir.s});
        res.insert_or_assign("analogFir.channel[5].rFir.r", DumpEntry{analogFir.channel[5].rFir.r});
        res.insert_or_assign("analogFir.channel[5].rFir.tSc", DumpEntry{analogFir.channel[5].rFir.tSc});
        res.insert_or_assign("analogFir.channel[5].rFir.phase", DumpEntry{analogFir.channel[5].rFir.phase});
        res.insert_or_assign("analogFir.channel[5].vFir.m", DumpEntry{analogFir.channel[5].vFir.m});
        res.insert_or_assign("analogFir.channel[5].vFir.n", DumpEntry{analogFir.channel[5].vFir.n});
        res.insert_or_assign("analogFir.channel[5].vFir.s", DumpEntry{analogFir.channel[5].vFir.s});
        res.insert_or_assign("analogFir.channel[5].vFir.r", DumpEntry{analogFir.channel[5].vFir.r});
        res.insert_or_assign("analogFir.channel[5].vFir.tSc", DumpEntry{analogFir.channel[5].vFir.tSc});
        res.insert_or_assign("analogFir.channel[5].vFir.phase", DumpEntry{analogFir.channel[5].vFir.phase});
        res.insert_or_assign("analogFir.channel[5].mmFir.m", DumpEntry{analogFir.channel[5].mmFir.m});
        res.insert_or_assign("analogFir.channel[5].mmFir.n", DumpEntry{analogFir.channel[5].mmFir.n});
        res.insert_or_assign("analogFir.channel[5].mmFir.s", DumpEntry{analogFir.channel[5].mmFir.s});
        res.insert_or_assign("analogFir.channel[5].mmFir.r", DumpEntry{analogFir.channel[5].mmFir.r});
        res.insert_or_assign("analogFir.channel[5].mmFir.tSc", DumpEntry{analogFir.channel[5].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[5].mmFir.phase", DumpEntry{analogFir.channel[5].mmFir.phase});
        res.insert_or_assign("analogFir.channel[5].limit.maxLimit", DumpEntry{analogFir.channel[5].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[5].limit.minLimit", DumpEntry{analogFir.channel[5].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[5].limit.filterLength", DumpEntry{analogFir.channel[5].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[6].rFir.m", DumpEntry{analogFir.channel[6].rFir.m});
        res.insert_or_assign("analogFir.channel[6].rFir.n", DumpEntry{analogFir.channel[6].rFir.n});
        res.insert_or_assign("analogFir.channel[6].rFir.s", DumpEntry{analogFir.channel[6].rFir.s});
        res.insert_or_assign("analogFir.channel[6].rFir.r", DumpEntry{analogFir.channel[6].rFir.r});
        res.insert_or_assign("analogFir.channel[6].rFir.tSc", DumpEntry{analogFir.channel[6].rFir.tSc});
        res.insert_or_assign("analogFir.channel[6].rFir.phase", DumpEntry{analogFir.channel[6].rFir.phase});
        res.insert_or_assign("analogFir.channel[6].vFir.m", DumpEntry{analogFir.channel[6].vFir.m});
        res.insert_or_assign("analogFir.channel[6].vFir.n", DumpEntry{analogFir.channel[6].vFir.n});
        res.insert_or_assign("analogFir.channel[6].vFir.s", DumpEntry{analogFir.channel[6].vFir.s});
        res.insert_or_assign("analogFir.channel[6].vFir.r", DumpEntry{analogFir.channel[6].vFir.r});
        res.insert_or_assign("analogFir.channel[6].vFir.tSc", DumpEntry{analogFir.channel[6].vFir.tSc});
        res.insert_or_assign("analogFir.channel[6].vFir.phase", DumpEntry{analogFir.channel[6].vFir.phase});
        res.insert_or_assign("analogFir.channel[6].mmFir.m", DumpEntry{analogFir.channel[6].mmFir.m});
        res.insert_or_assign("analogFir.channel[6].mmFir.n", DumpEntry{analogFir.channel[6].mmFir.n});
        res.insert_or_assign("analogFir.channel[6].mmFir.s", DumpEntry{analogFir.channel[6].mmFir.s});
        res.insert_or_assign("analogFir.channel[6].mmFir.r", DumpEntry{analogFir.channel[6].mmFir.r});
        res.insert_or_assign("analogFir.channel[6].mmFir.tSc", DumpEntry{analogFir.channel[6].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[6].mmFir.phase", DumpEntry{analogFir.channel[6].mmFir.phase});
        res.insert_or_assign("analogFir.channel[6].limit.maxLimit", DumpEntry{analogFir.channel[6].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[6].limit.minLimit", DumpEntry{analogFir.channel[6].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[6].limit.filterLength", DumpEntry{analogFir.channel[6].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[7].rFir.m", DumpEntry{analogFir.channel[7].rFir.m});
        res.insert_or_assign("analogFir.channel[7].rFir.n", DumpEntry{analogFir.channel[7].rFir.n});
        res.insert_or_assign("analogFir.channel[7].rFir.s", DumpEntry{analogFir.channel[7].rFir.s});
        res.insert_or_assign("analogFir.channel[7].rFir.r", DumpEntry{analogFir.channel[7].rFir.r});
        res.insert_or_assign("analogFir.channel[7].rFir.tSc", DumpEntry{analogFir.channel[7].rFir.tSc});
        res.insert_or_assign("analogFir.channel[7].rFir.phase", DumpEntry{analogFir.channel[7].rFir.phase});
        res.insert_or_assign("analogFir.channel[7].vFir.m", DumpEntry{analogFir.channel[7].vFir.m});
        res.insert_or_assign("analogFir.channel[7].vFir.n", DumpEntry{analogFir.channel[7].vFir.n});
        res.insert_or_assign("analogFir.channel[7].vFir.s", DumpEntry{analogFir.channel[7].vFir.s});
        res.insert_or_assign("analogFir.channel[7].vFir.r", DumpEntry{analogFir.channel[7].vFir.r});
        res.insert_or_assign("analogFir.channel[7].vFir.tSc", DumpEntry{analogFir.channel[7].vFir.tSc});
        res.insert_or_assign("analogFir.channel[7].vFir.phase", DumpEntry{analogFir.channel[7].vFir.phase});
        res.insert_or_assign("analogFir.channel[7].mmFir.m", DumpEntry{analogFir.channel[7].mmFir.m});
        res.insert_or_assign("analogFir.channel[7].mmFir.n", DumpEntry{analogFir.channel[7].mmFir.n});
        res.insert_or_assign("analogFir.channel[7].mmFir.s", DumpEntry{analogFir.channel[7].mmFir.s});
        res.insert_or_assign("analogFir.channel[7].mmFir.r", DumpEntry{analogFir.channel[7].mmFir.r});
        res.insert_or_assign("analogFir.channel[7].mmFir.tSc", DumpEntry{analogFir.channel[7].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[7].mmFir.phase", DumpEntry{analogFir.channel[7].mmFir.phase});
        res.insert_or_assign("analogFir.channel[7].limit.maxLimit", DumpEntry{analogFir.channel[7].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[7].limit.minLimit", DumpEntry{analogFir.channel[7].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[7].limit.filterLength", DumpEntry{analogFir.channel[7].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[8].rFir.m", DumpEntry{analogFir.channel[8].rFir.m});
        res.insert_or_assign("analogFir.channel[8].rFir.n", DumpEntry{analogFir.channel[8].rFir.n});
        res.insert_or_assign("analogFir.channel[8].rFir.s", DumpEntry{analogFir.channel[8].rFir.s});
        res.insert_or_assign("analogFir.channel[8].rFir.r", DumpEntry{analogFir.channel[8].rFir.r});
        res.insert_or_assign("analogFir.channel[8].rFir.tSc", DumpEntry{analogFir.channel[8].rFir.tSc});
        res.insert_or_assign("analogFir.channel[8].rFir.phase", DumpEntry{analogFir.channel[8].rFir.phase});
        res.insert_or_assign("analogFir.channel[8].vFir.m", DumpEntry{analogFir.channel[8].vFir.m});
        res.insert_or_assign("analogFir.channel[8].vFir.n", DumpEntry{analogFir.channel[8].vFir.n});
        res.insert_or_assign("analogFir.channel[8].vFir.s", DumpEntry{analogFir.channel[8].vFir.s});
        res.insert_or_assign("analogFir.channel[8].vFir.r", DumpEntry{analogFir.channel[8].vFir.r});
        res.insert_or_assign("analogFir.channel[8].vFir.tSc", DumpEntry{analogFir.channel[8].vFir.tSc});
        res.insert_or_assign("analogFir.channel[8].vFir.phase", DumpEntry{analogFir.channel[8].vFir.phase});
        res.insert_or_assign("analogFir.channel[8].mmFir.m", DumpEntry{analogFir.channel[8].mmFir.m});
        res.insert_or_assign("analogFir.channel[8].mmFir.n", DumpEntry{analogFir.channel[8].mmFir.n});
        res.insert_or_assign("analogFir.channel[8].mmFir.s", DumpEntry{analogFir.channel[8].mmFir.s});
        res.insert_or_assign("analogFir.channel[8].mmFir.r", DumpEntry{analogFir.channel[8].mmFir.r});
        res.insert_or_assign("analogFir.channel[8].mmFir.tSc", DumpEntry{analogFir.channel[8].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[8].mmFir.phase", DumpEntry{analogFir.channel[8].mmFir.phase});
        res.insert_or_assign("analogFir.channel[8].limit.maxLimit", DumpEntry{analogFir.channel[8].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[8].limit.minLimit", DumpEntry{analogFir.channel[8].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[8].limit.filterLength", DumpEntry{analogFir.channel[8].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[9].rFir.m", DumpEntry{analogFir.channel[9].rFir.m});
        res.insert_or_assign("analogFir.channel[9].rFir.n", DumpEntry{analogFir.channel[9].rFir.n});
        res.insert_or_assign("analogFir.channel[9].rFir.s", DumpEntry{analogFir.channel[9].rFir.s});
        res.insert_or_assign("analogFir.channel[9].rFir.r", DumpEntry{analogFir.channel[9].rFir.r});
        res.insert_or_assign("analogFir.channel[9].rFir.tSc", DumpEntry{analogFir.channel[9].rFir.tSc});
        res.insert_or_assign("analogFir.channel[9].rFir.phase", DumpEntry{analogFir.channel[9].rFir.phase});
        res.insert_or_assign("analogFir.channel[9].vFir.m", DumpEntry{analogFir.channel[9].vFir.m});
        res.insert_or_assign("analogFir.channel[9].vFir.n", DumpEntry{analogFir.channel[9].vFir.n});
        res.insert_or_assign("analogFir.channel[9].vFir.s", DumpEntry{analogFir.channel[9].vFir.s});
        res.insert_or_assign("analogFir.channel[9].vFir.r", DumpEntry{analogFir.channel[9].vFir.r});
        res.insert_or_assign("analogFir.channel[9].vFir.tSc", DumpEntry{analogFir.channel[9].vFir.tSc});
        res.insert_or_assign("analogFir.channel[9].vFir.phase", DumpEntry{analogFir.channel[9].vFir.phase});
        res.insert_or_assign("analogFir.channel[9].mmFir.m", DumpEntry{analogFir.channel[9].mmFir.m});
        res.insert_or_assign("analogFir.channel[9].mmFir.n", DumpEntry{analogFir.channel[9].mmFir.n});
        res.insert_or_assign("analogFir.channel[9].mmFir.s", DumpEntry{analogFir.channel[9].mmFir.s});
        res.insert_or_assign("analogFir.channel[9].mmFir.r", DumpEntry{analogFir.channel[9].mmFir.r});
        res.insert_or_assign("analogFir.channel[9].mmFir.tSc", DumpEntry{analogFir.channel[9].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[9].mmFir.phase", DumpEntry{analogFir.channel[9].mmFir.phase});
        res.insert_or_assign("analogFir.channel[9].limit.maxLimit", DumpEntry{analogFir.channel[9].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[9].limit.minLimit", DumpEntry{analogFir.channel[9].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[9].limit.filterLength", DumpEntry{analogFir.channel[9].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[10].rFir.m", DumpEntry{analogFir.channel[10].rFir.m});
        res.insert_or_assign("analogFir.channel[10].rFir.n", DumpEntry{analogFir.channel[10].rFir.n});
        res.insert_or_assign("analogFir.channel[10].rFir.s", DumpEntry{analogFir.channel[10].rFir.s});
        res.insert_or_assign("analogFir.channel[10].rFir.r", DumpEntry{analogFir.channel[10].rFir.r});
        res.insert_or_assign("analogFir.channel[10].rFir.tSc", DumpEntry{analogFir.channel[10].rFir.tSc});
        res.insert_or_assign("analogFir.channel[10].rFir.phase", DumpEntry{analogFir.channel[10].rFir.phase});
        res.insert_or_assign("analogFir.channel[10].vFir.m", DumpEntry{analogFir.channel[10].vFir.m});
        res.insert_or_assign("analogFir.channel[10].vFir.n", DumpEntry{analogFir.channel[10].vFir.n});
        res.insert_or_assign("analogFir.channel[10].vFir.s", DumpEntry{analogFir.channel[10].vFir.s});
        res.insert_or_assign("analogFir.channel[10].vFir.r", DumpEntry{analogFir.channel[10].vFir.r});
        res.insert_or_assign("analogFir.channel[10].vFir.tSc", DumpEntry{analogFir.channel[10].vFir.tSc});
        res.insert_or_assign("analogFir.channel[10].vFir.phase", DumpEntry{analogFir.channel[10].vFir.phase});
        res.insert_or_assign("analogFir.channel[10].mmFir.m", DumpEntry{analogFir.channel[10].mmFir.m});
        res.insert_or_assign("analogFir.channel[10].mmFir.n", DumpEntry{analogFir.channel[10].mmFir.n});
        res.insert_or_assign("analogFir.channel[10].mmFir.s", DumpEntry{analogFir.channel[10].mmFir.s});
        res.insert_or_assign("analogFir.channel[10].mmFir.r", DumpEntry{analogFir.channel[10].mmFir.r});
        res.insert_or_assign("analogFir.channel[10].mmFir.tSc", DumpEntry{analogFir.channel[10].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[10].mmFir.phase", DumpEntry{analogFir.channel[10].mmFir.phase});
        res.insert_or_assign("analogFir.channel[10].limit.maxLimit", DumpEntry{analogFir.channel[10].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[10].limit.minLimit", DumpEntry{analogFir.channel[10].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[10].limit.filterLength", DumpEntry{analogFir.channel[10].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[11].rFir.m", DumpEntry{analogFir.channel[11].rFir.m});
        res.insert_or_assign("analogFir.channel[11].rFir.n", DumpEntry{analogFir.channel[11].rFir.n});
        res.insert_or_assign("analogFir.channel[11].rFir.s", DumpEntry{analogFir.channel[11].rFir.s});
        res.insert_or_assign("analogFir.channel[11].rFir.r", DumpEntry{analogFir.channel[11].rFir.r});
        res.insert_or_assign("analogFir.channel[11].rFir.tSc", DumpEntry{analogFir.channel[11].rFir.tSc});
        res.insert_or_assign("analogFir.channel[11].rFir.phase", DumpEntry{analogFir.channel[11].rFir.phase});
        res.insert_or_assign("analogFir.channel[11].vFir.m", DumpEntry{analogFir.channel[11].vFir.m});
        res.insert_or_assign("analogFir.channel[11].vFir.n", DumpEntry{analogFir.channel[11].vFir.n});
        res.insert_or_assign("analogFir.channel[11].vFir.s", DumpEntry{analogFir.channel[11].vFir.s});
        res.insert_or_assign("analogFir.channel[11].vFir.r", DumpEntry{analogFir.channel[11].vFir.r});
        res.insert_or_assign("analogFir.channel[11].vFir.tSc", DumpEntry{analogFir.channel[11].vFir.tSc});
        res.insert_or_assign("analogFir.channel[11].vFir.phase", DumpEntry{analogFir.channel[11].vFir.phase});
        res.insert_or_assign("analogFir.channel[11].mmFir.m", DumpEntry{analogFir.channel[11].mmFir.m});
        res.insert_or_assign("analogFir.channel[11].mmFir.n", DumpEntry{analogFir.channel[11].mmFir.n});
        res.insert_or_assign("analogFir.channel[11].mmFir.s", DumpEntry{analogFir.channel[11].mmFir.s});
        res.insert_or_assign("analogFir.channel[11].mmFir.r", DumpEntry{analogFir.channel[11].mmFir.r});
        res.insert_or_assign("analogFir.channel[11].mmFir.tSc", DumpEntry{analogFir.channel[11].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[11].mmFir.phase", DumpEntry{analogFir.channel[11].mmFir.phase});
        res.insert_or_assign("analogFir.channel[11].limit.maxLimit", DumpEntry{analogFir.channel[11].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[11].limit.minLimit", DumpEntry{analogFir.channel[11].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[11].limit.filterLength", DumpEntry{analogFir.channel[11].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[12].rFir.m", DumpEntry{analogFir.channel[12].rFir.m});
        res.insert_or_assign("analogFir.channel[12].rFir.n", DumpEntry{analogFir.channel[12].rFir.n});
        res.insert_or_assign("analogFir.channel[12].rFir.s", DumpEntry{analogFir.channel[12].rFir.s});
        res.insert_or_assign("analogFir.channel[12].rFir.r", DumpEntry{analogFir.channel[12].rFir.r});
        res.insert_or_assign("analogFir.channel[12].rFir.tSc", DumpEntry{analogFir.channel[12].rFir.tSc});
        res.insert_or_assign("analogFir.channel[12].rFir.phase", DumpEntry{analogFir.channel[12].rFir.phase});
        res.insert_or_assign("analogFir.channel[12].vFir.m", DumpEntry{analogFir.channel[12].vFir.m});
        res.insert_or_assign("analogFir.channel[12].vFir.n", DumpEntry{analogFir.channel[12].vFir.n});
        res.insert_or_assign("analogFir.channel[12].vFir.s", DumpEntry{analogFir.channel[12].vFir.s});
        res.insert_or_assign("analogFir.channel[12].vFir.r", DumpEntry{analogFir.channel[12].vFir.r});
        res.insert_or_assign("analogFir.channel[12].vFir.tSc", DumpEntry{analogFir.channel[12].vFir.tSc});
        res.insert_or_assign("analogFir.channel[12].vFir.phase", DumpEntry{analogFir.channel[12].vFir.phase});
        res.insert_or_assign("analogFir.channel[12].mmFir.m", DumpEntry{analogFir.channel[12].mmFir.m});
        res.insert_or_assign("analogFir.channel[12].mmFir.n", DumpEntry{analogFir.channel[12].mmFir.n});
        res.insert_or_assign("analogFir.channel[12].mmFir.s", DumpEntry{analogFir.channel[12].mmFir.s});
        res.insert_or_assign("analogFir.channel[12].mmFir.r", DumpEntry{analogFir.channel[12].mmFir.r});
        res.insert_or_assign("analogFir.channel[12].mmFir.tSc", DumpEntry{analogFir.channel[12].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[12].mmFir.phase", DumpEntry{analogFir.channel[12].mmFir.phase});
        res.insert_or_assign("analogFir.channel[12].limit.maxLimit", DumpEntry{analogFir.channel[12].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[12].limit.minLimit", DumpEntry{analogFir.channel[12].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[12].limit.filterLength", DumpEntry{analogFir.channel[12].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[13].rFir.m", DumpEntry{analogFir.channel[13].rFir.m});
        res.insert_or_assign("analogFir.channel[13].rFir.n", DumpEntry{analogFir.channel[13].rFir.n});
        res.insert_or_assign("analogFir.channel[13].rFir.s", DumpEntry{analogFir.channel[13].rFir.s});
        res.insert_or_assign("analogFir.channel[13].rFir.r", DumpEntry{analogFir.channel[13].rFir.r});
        res.insert_or_assign("analogFir.channel[13].rFir.tSc", DumpEntry{analogFir.channel[13].rFir.tSc});
        res.insert_or_assign("analogFir.channel[13].rFir.phase", DumpEntry{analogFir.channel[13].rFir.phase});
        res.insert_or_assign("analogFir.channel[13].vFir.m", DumpEntry{analogFir.channel[13].vFir.m});
        res.insert_or_assign("analogFir.channel[13].vFir.n", DumpEntry{analogFir.channel[13].vFir.n});
        res.insert_or_assign("analogFir.channel[13].vFir.s", DumpEntry{analogFir.channel[13].vFir.s});
        res.insert_or_assign("analogFir.channel[13].vFir.r", DumpEntry{analogFir.channel[13].vFir.r});
        res.insert_or_assign("analogFir.channel[13].vFir.tSc", DumpEntry{analogFir.channel[13].vFir.tSc});
        res.insert_or_assign("analogFir.channel[13].vFir.phase", DumpEntry{analogFir.channel[13].vFir.phase});
        res.insert_or_assign("analogFir.channel[13].mmFir.m", DumpEntry{analogFir.channel[13].mmFir.m});
        res.insert_or_assign("analogFir.channel[13].mmFir.n", DumpEntry{analogFir.channel[13].mmFir.n});
        res.insert_or_assign("analogFir.channel[13].mmFir.s", DumpEntry{analogFir.channel[13].mmFir.s});
        res.insert_or_assign("analogFir.channel[13].mmFir.r", DumpEntry{analogFir.channel[13].mmFir.r});
        res.insert_or_assign("analogFir.channel[13].mmFir.tSc", DumpEntry{analogFir.channel[13].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[13].mmFir.phase", DumpEntry{analogFir.channel[13].mmFir.phase});
        res.insert_or_assign("analogFir.channel[13].limit.maxLimit", DumpEntry{analogFir.channel[13].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[13].limit.minLimit", DumpEntry{analogFir.channel[13].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[13].limit.filterLength", DumpEntry{analogFir.channel[13].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[14].rFir.m", DumpEntry{analogFir.channel[14].rFir.m});
        res.insert_or_assign("analogFir.channel[14].rFir.n", DumpEntry{analogFir.channel[14].rFir.n});
        res.insert_or_assign("analogFir.channel[14].rFir.s", DumpEntry{analogFir.channel[14].rFir.s});
        res.insert_or_assign("analogFir.channel[14].rFir.r", DumpEntry{analogFir.channel[14].rFir.r});
        res.insert_or_assign("analogFir.channel[14].rFir.tSc", DumpEntry{analogFir.channel[14].rFir.tSc});
        res.insert_or_assign("analogFir.channel[14].rFir.phase", DumpEntry{analogFir.channel[14].rFir.phase});
        res.insert_or_assign("analogFir.channel[14].vFir.m", DumpEntry{analogFir.channel[14].vFir.m});
        res.insert_or_assign("analogFir.channel[14].vFir.n", DumpEntry{analogFir.channel[14].vFir.n});
        res.insert_or_assign("analogFir.channel[14].vFir.s", DumpEntry{analogFir.channel[14].vFir.s});
        res.insert_or_assign("analogFir.channel[14].vFir.r", DumpEntry{analogFir.channel[14].vFir.r});
        res.insert_or_assign("analogFir.channel[14].vFir.tSc", DumpEntry{analogFir.channel[14].vFir.tSc});
        res.insert_or_assign("analogFir.channel[14].vFir.phase", DumpEntry{analogFir.channel[14].vFir.phase});
        res.insert_or_assign("analogFir.channel[14].mmFir.m", DumpEntry{analogFir.channel[14].mmFir.m});
        res.insert_or_assign("analogFir.channel[14].mmFir.n", DumpEntry{analogFir.channel[14].mmFir.n});
        res.insert_or_assign("analogFir.channel[14].mmFir.s", DumpEntry{analogFir.channel[14].mmFir.s});
        res.insert_or_assign("analogFir.channel[14].mmFir.r", DumpEntry{analogFir.channel[14].mmFir.r});
        res.insert_or_assign("analogFir.channel[14].mmFir.tSc", DumpEntry{analogFir.channel[14].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[14].mmFir.phase", DumpEntry{analogFir.channel[14].mmFir.phase});
        res.insert_or_assign("analogFir.channel[14].limit.maxLimit", DumpEntry{analogFir.channel[14].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[14].limit.minLimit", DumpEntry{analogFir.channel[14].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[14].limit.filterLength", DumpEntry{analogFir.channel[14].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[15].rFir.m", DumpEntry{analogFir.channel[15].rFir.m});
        res.insert_or_assign("analogFir.channel[15].rFir.n", DumpEntry{analogFir.channel[15].rFir.n});
        res.insert_or_assign("analogFir.channel[15].rFir.s", DumpEntry{analogFir.channel[15].rFir.s});
        res.insert_or_assign("analogFir.channel[15].rFir.r", DumpEntry{analogFir.channel[15].rFir.r});
        res.insert_or_assign("analogFir.channel[15].rFir.tSc", DumpEntry{analogFir.channel[15].rFir.tSc});
        res.insert_or_assign("analogFir.channel[15].rFir.phase", DumpEntry{analogFir.channel[15].rFir.phase});
        res.insert_or_assign("analogFir.channel[15].vFir.m", DumpEntry{analogFir.channel[15].vFir.m});
        res.insert_or_assign("analogFir.channel[15].vFir.n", DumpEntry{analogFir.channel[15].vFir.n});
        res.insert_or_assign("analogFir.channel[15].vFir.s", DumpEntry{analogFir.channel[15].vFir.s});
        res.insert_or_assign("analogFir.channel[15].vFir.r", DumpEntry{analogFir.channel[15].vFir.r});
        res.insert_or_assign("analogFir.channel[15].vFir.tSc", DumpEntry{analogFir.channel[15].vFir.tSc});
        res.insert_or_assign("analogFir.channel[15].vFir.phase", DumpEntry{analogFir.channel[15].vFir.phase});
        res.insert_or_assign("analogFir.channel[15].mmFir.m", DumpEntry{analogFir.channel[15].mmFir.m});
        res.insert_or_assign("analogFir.channel[15].mmFir.n", DumpEntry{analogFir.channel[15].mmFir.n});
        res.insert_or_assign("analogFir.channel[15].mmFir.s", DumpEntry{analogFir.channel[15].mmFir.s});
        res.insert_or_assign("analogFir.channel[15].mmFir.r", DumpEntry{analogFir.channel[15].mmFir.r});
        res.insert_or_assign("analogFir.channel[15].mmFir.tSc", DumpEntry{analogFir.channel[15].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[15].mmFir.phase", DumpEntry{analogFir.channel[15].mmFir.phase});
        res.insert_or_assign("analogFir.channel[15].limit.maxLimit", DumpEntry{analogFir.channel[15].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[15].limit.minLimit", DumpEntry{analogFir.channel[15].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[15].limit.filterLength", DumpEntry{analogFir.channel[15].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[16].rFir.m", DumpEntry{analogFir.channel[16].rFir.m});
        res.insert_or_assign("analogFir.channel[16].rFir.n", DumpEntry{analogFir.channel[16].rFir.n});
        res.insert_or_assign("analogFir.channel[16].rFir.s", DumpEntry{analogFir.channel[16].rFir.s});
        res.insert_or_assign("analogFir.channel[16].rFir.r", DumpEntry{analogFir.channel[16].rFir.r});
        res.insert_or_assign("analogFir.channel[16].rFir.tSc", DumpEntry{analogFir.channel[16].rFir.tSc});
        res.insert_or_assign("analogFir.channel[16].rFir.phase", DumpEntry{analogFir.channel[16].rFir.phase});
        res.insert_or_assign("analogFir.channel[16].vFir.m", DumpEntry{analogFir.channel[16].vFir.m});
        res.insert_or_assign("analogFir.channel[16].vFir.n", DumpEntry{analogFir.channel[16].vFir.n});
        res.insert_or_assign("analogFir.channel[16].vFir.s", DumpEntry{analogFir.channel[16].vFir.s});
        res.insert_or_assign("analogFir.channel[16].vFir.r", DumpEntry{analogFir.channel[16].vFir.r});
        res.insert_or_assign("analogFir.channel[16].vFir.tSc", DumpEntry{analogFir.channel[16].vFir.tSc});
        res.insert_or_assign("analogFir.channel[16].vFir.phase", DumpEntry{analogFir.channel[16].vFir.phase});
        res.insert_or_assign("analogFir.channel[16].mmFir.m", DumpEntry{analogFir.channel[16].mmFir.m});
        res.insert_or_assign("analogFir.channel[16].mmFir.n", DumpEntry{analogFir.channel[16].mmFir.n});
        res.insert_or_assign("analogFir.channel[16].mmFir.s", DumpEntry{analogFir.channel[16].mmFir.s});
        res.insert_or_assign("analogFir.channel[16].mmFir.r", DumpEntry{analogFir.channel[16].mmFir.r});
        res.insert_or_assign("analogFir.channel[16].mmFir.tSc", DumpEntry{analogFir.channel[16].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[16].mmFir.phase", DumpEntry{analogFir.channel[16].mmFir.phase});
        res.insert_or_assign("analogFir.channel[16].limit.maxLimit", DumpEntry{analogFir.channel[16].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[16].limit.minLimit", DumpEntry{analogFir.channel[16].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[16].limit.filterLength", DumpEntry{analogFir.channel[16].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[17].rFir.m", DumpEntry{analogFir.channel[17].rFir.m});
        res.insert_or_assign("analogFir.channel[17].rFir.n", DumpEntry{analogFir.channel[17].rFir.n});
        res.insert_or_assign("analogFir.channel[17].rFir.s", DumpEntry{analogFir.channel[17].rFir.s});
        res.insert_or_assign("analogFir.channel[17].rFir.r", DumpEntry{analogFir.channel[17].rFir.r});
        res.insert_or_assign("analogFir.channel[17].rFir.tSc", DumpEntry{analogFir.channel[17].rFir.tSc});
        res.insert_or_assign("analogFir.channel[17].rFir.phase", DumpEntry{analogFir.channel[17].rFir.phase});
        res.insert_or_assign("analogFir.channel[17].vFir.m", DumpEntry{analogFir.channel[17].vFir.m});
        res.insert_or_assign("analogFir.channel[17].vFir.n", DumpEntry{analogFir.channel[17].vFir.n});
        res.insert_or_assign("analogFir.channel[17].vFir.s", DumpEntry{analogFir.channel[17].vFir.s});
        res.insert_or_assign("analogFir.channel[17].vFir.r", DumpEntry{analogFir.channel[17].vFir.r});
        res.insert_or_assign("analogFir.channel[17].vFir.tSc", DumpEntry{analogFir.channel[17].vFir.tSc});
        res.insert_or_assign("analogFir.channel[17].vFir.phase", DumpEntry{analogFir.channel[17].vFir.phase});
        res.insert_or_assign("analogFir.channel[17].mmFir.m", DumpEntry{analogFir.channel[17].mmFir.m});
        res.insert_or_assign("analogFir.channel[17].mmFir.n", DumpEntry{analogFir.channel[17].mmFir.n});
        res.insert_or_assign("analogFir.channel[17].mmFir.s", DumpEntry{analogFir.channel[17].mmFir.s});
        res.insert_or_assign("analogFir.channel[17].mmFir.r", DumpEntry{analogFir.channel[17].mmFir.r});
        res.insert_or_assign("analogFir.channel[17].mmFir.tSc", DumpEntry{analogFir.channel[17].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[17].mmFir.phase", DumpEntry{analogFir.channel[17].mmFir.phase});
        res.insert_or_assign("analogFir.channel[17].limit.maxLimit", DumpEntry{analogFir.channel[17].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[17].limit.minLimit", DumpEntry{analogFir.channel[17].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[17].limit.filterLength", DumpEntry{analogFir.channel[17].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[18].rFir.m", DumpEntry{analogFir.channel[18].rFir.m});
        res.insert_or_assign("analogFir.channel[18].rFir.n", DumpEntry{analogFir.channel[18].rFir.n});
        res.insert_or_assign("analogFir.channel[18].rFir.s", DumpEntry{analogFir.channel[18].rFir.s});
        res.insert_or_assign("analogFir.channel[18].rFir.r", DumpEntry{analogFir.channel[18].rFir.r});
        res.insert_or_assign("analogFir.channel[18].rFir.tSc", DumpEntry{analogFir.channel[18].rFir.tSc});
        res.insert_or_assign("analogFir.channel[18].rFir.phase", DumpEntry{analogFir.channel[18].rFir.phase});
        res.insert_or_assign("analogFir.channel[18].vFir.m", DumpEntry{analogFir.channel[18].vFir.m});
        res.insert_or_assign("analogFir.channel[18].vFir.n", DumpEntry{analogFir.channel[18].vFir.n});
        res.insert_or_assign("analogFir.channel[18].vFir.s", DumpEntry{analogFir.channel[18].vFir.s});
        res.insert_or_assign("analogFir.channel[18].vFir.r", DumpEntry{analogFir.channel[18].vFir.r});
        res.insert_or_assign("analogFir.channel[18].vFir.tSc", DumpEntry{analogFir.channel[18].vFir.tSc});
        res.insert_or_assign("analogFir.channel[18].vFir.phase", DumpEntry{analogFir.channel[18].vFir.phase});
        res.insert_or_assign("analogFir.channel[18].mmFir.m", DumpEntry{analogFir.channel[18].mmFir.m});
        res.insert_or_assign("analogFir.channel[18].mmFir.n", DumpEntry{analogFir.channel[18].mmFir.n});
        res.insert_or_assign("analogFir.channel[18].mmFir.s", DumpEntry{analogFir.channel[18].mmFir.s});
        res.insert_or_assign("analogFir.channel[18].mmFir.r", DumpEntry{analogFir.channel[18].mmFir.r});
        res.insert_or_assign("analogFir.channel[18].mmFir.tSc", DumpEntry{analogFir.channel[18].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[18].mmFir.phase", DumpEntry{analogFir.channel[18].mmFir.phase});
        res.insert_or_assign("analogFir.channel[18].limit.maxLimit", DumpEntry{analogFir.channel[18].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[18].limit.minLimit", DumpEntry{analogFir.channel[18].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[18].limit.filterLength", DumpEntry{analogFir.channel[18].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[19].rFir.m", DumpEntry{analogFir.channel[19].rFir.m});
        res.insert_or_assign("analogFir.channel[19].rFir.n", DumpEntry{analogFir.channel[19].rFir.n});
        res.insert_or_assign("analogFir.channel[19].rFir.s", DumpEntry{analogFir.channel[19].rFir.s});
        res.insert_or_assign("analogFir.channel[19].rFir.r", DumpEntry{analogFir.channel[19].rFir.r});
        res.insert_or_assign("analogFir.channel[19].rFir.tSc", DumpEntry{analogFir.channel[19].rFir.tSc});
        res.insert_or_assign("analogFir.channel[19].rFir.phase", DumpEntry{analogFir.channel[19].rFir.phase});
        res.insert_or_assign("analogFir.channel[19].vFir.m", DumpEntry{analogFir.channel[19].vFir.m});
        res.insert_or_assign("analogFir.channel[19].vFir.n", DumpEntry{analogFir.channel[19].vFir.n});
        res.insert_or_assign("analogFir.channel[19].vFir.s", DumpEntry{analogFir.channel[19].vFir.s});
        res.insert_or_assign("analogFir.channel[19].vFir.r", DumpEntry{analogFir.channel[19].vFir.r});
        res.insert_or_assign("analogFir.channel[19].vFir.tSc", DumpEntry{analogFir.channel[19].vFir.tSc});
        res.insert_or_assign("analogFir.channel[19].vFir.phase", DumpEntry{analogFir.channel[19].vFir.phase});
        res.insert_or_assign("analogFir.channel[19].mmFir.m", DumpEntry{analogFir.channel[19].mmFir.m});
        res.insert_or_assign("analogFir.channel[19].mmFir.n", DumpEntry{analogFir.channel[19].mmFir.n});
        res.insert_or_assign("analogFir.channel[19].mmFir.s", DumpEntry{analogFir.channel[19].mmFir.s});
        res.insert_or_assign("analogFir.channel[19].mmFir.r", DumpEntry{analogFir.channel[19].mmFir.r});
        res.insert_or_assign("analogFir.channel[19].mmFir.tSc", DumpEntry{analogFir.channel[19].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[19].mmFir.phase", DumpEntry{analogFir.channel[19].mmFir.phase});
        res.insert_or_assign("analogFir.channel[19].limit.maxLimit", DumpEntry{analogFir.channel[19].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[19].limit.minLimit", DumpEntry{analogFir.channel[19].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[19].limit.filterLength", DumpEntry{analogFir.channel[19].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[20].rFir.m", DumpEntry{analogFir.channel[20].rFir.m});
        res.insert_or_assign("analogFir.channel[20].rFir.n", DumpEntry{analogFir.channel[20].rFir.n});
        res.insert_or_assign("analogFir.channel[20].rFir.s", DumpEntry{analogFir.channel[20].rFir.s});
        res.insert_or_assign("analogFir.channel[20].rFir.r", DumpEntry{analogFir.channel[20].rFir.r});
        res.insert_or_assign("analogFir.channel[20].rFir.tSc", DumpEntry{analogFir.channel[20].rFir.tSc});
        res.insert_or_assign("analogFir.channel[20].rFir.phase", DumpEntry{analogFir.channel[20].rFir.phase});
        res.insert_or_assign("analogFir.channel[20].vFir.m", DumpEntry{analogFir.channel[20].vFir.m});
        res.insert_or_assign("analogFir.channel[20].vFir.n", DumpEntry{analogFir.channel[20].vFir.n});
        res.insert_or_assign("analogFir.channel[20].vFir.s", DumpEntry{analogFir.channel[20].vFir.s});
        res.insert_or_assign("analogFir.channel[20].vFir.r", DumpEntry{analogFir.channel[20].vFir.r});
        res.insert_or_assign("analogFir.channel[20].vFir.tSc", DumpEntry{analogFir.channel[20].vFir.tSc});
        res.insert_or_assign("analogFir.channel[20].vFir.phase", DumpEntry{analogFir.channel[20].vFir.phase});
        res.insert_or_assign("analogFir.channel[20].mmFir.m", DumpEntry{analogFir.channel[20].mmFir.m});
        res.insert_or_assign("analogFir.channel[20].mmFir.n", DumpEntry{analogFir.channel[20].mmFir.n});
        res.insert_or_assign("analogFir.channel[20].mmFir.s", DumpEntry{analogFir.channel[20].mmFir.s});
        res.insert_or_assign("analogFir.channel[20].mmFir.r", DumpEntry{analogFir.channel[20].mmFir.r});
        res.insert_or_assign("analogFir.channel[20].mmFir.tSc", DumpEntry{analogFir.channel[20].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[20].mmFir.phase", DumpEntry{analogFir.channel[20].mmFir.phase});
        res.insert_or_assign("analogFir.channel[20].limit.maxLimit", DumpEntry{analogFir.channel[20].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[20].limit.minLimit", DumpEntry{analogFir.channel[20].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[20].limit.filterLength", DumpEntry{analogFir.channel[20].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[21].rFir.m", DumpEntry{analogFir.channel[21].rFir.m});
        res.insert_or_assign("analogFir.channel[21].rFir.n", DumpEntry{analogFir.channel[21].rFir.n});
        res.insert_or_assign("analogFir.channel[21].rFir.s", DumpEntry{analogFir.channel[21].rFir.s});
        res.insert_or_assign("analogFir.channel[21].rFir.r", DumpEntry{analogFir.channel[21].rFir.r});
        res.insert_or_assign("analogFir.channel[21].rFir.tSc", DumpEntry{analogFir.channel[21].rFir.tSc});
        res.insert_or_assign("analogFir.channel[21].rFir.phase", DumpEntry{analogFir.channel[21].rFir.phase});
        res.insert_or_assign("analogFir.channel[21].vFir.m", DumpEntry{analogFir.channel[21].vFir.m});
        res.insert_or_assign("analogFir.channel[21].vFir.n", DumpEntry{analogFir.channel[21].vFir.n});
        res.insert_or_assign("analogFir.channel[21].vFir.s", DumpEntry{analogFir.channel[21].vFir.s});
        res.insert_or_assign("analogFir.channel[21].vFir.r", DumpEntry{analogFir.channel[21].vFir.r});
        res.insert_or_assign("analogFir.channel[21].vFir.tSc", DumpEntry{analogFir.channel[21].vFir.tSc});
        res.insert_or_assign("analogFir.channel[21].vFir.phase", DumpEntry{analogFir.channel[21].vFir.phase});
        res.insert_or_assign("analogFir.channel[21].mmFir.m", DumpEntry{analogFir.channel[21].mmFir.m});
        res.insert_or_assign("analogFir.channel[21].mmFir.n", DumpEntry{analogFir.channel[21].mmFir.n});
        res.insert_or_assign("analogFir.channel[21].mmFir.s", DumpEntry{analogFir.channel[21].mmFir.s});
        res.insert_or_assign("analogFir.channel[21].mmFir.r", DumpEntry{analogFir.channel[21].mmFir.r});
        res.insert_or_assign("analogFir.channel[21].mmFir.tSc", DumpEntry{analogFir.channel[21].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[21].mmFir.phase", DumpEntry{analogFir.channel[21].mmFir.phase});
        res.insert_or_assign("analogFir.channel[21].limit.maxLimit", DumpEntry{analogFir.channel[21].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[21].limit.minLimit", DumpEntry{analogFir.channel[21].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[21].limit.filterLength", DumpEntry{analogFir.channel[21].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[22].rFir.m", DumpEntry{analogFir.channel[22].rFir.m});
        res.insert_or_assign("analogFir.channel[22].rFir.n", DumpEntry{analogFir.channel[22].rFir.n});
        res.insert_or_assign("analogFir.channel[22].rFir.s", DumpEntry{analogFir.channel[22].rFir.s});
        res.insert_or_assign("analogFir.channel[22].rFir.r", DumpEntry{analogFir.channel[22].rFir.r});
        res.insert_or_assign("analogFir.channel[22].rFir.tSc", DumpEntry{analogFir.channel[22].rFir.tSc});
        res.insert_or_assign("analogFir.channel[22].rFir.phase", DumpEntry{analogFir.channel[22].rFir.phase});
        res.insert_or_assign("analogFir.channel[22].vFir.m", DumpEntry{analogFir.channel[22].vFir.m});
        res.insert_or_assign("analogFir.channel[22].vFir.n", DumpEntry{analogFir.channel[22].vFir.n});
        res.insert_or_assign("analogFir.channel[22].vFir.s", DumpEntry{analogFir.channel[22].vFir.s});
        res.insert_or_assign("analogFir.channel[22].vFir.r", DumpEntry{analogFir.channel[22].vFir.r});
        res.insert_or_assign("analogFir.channel[22].vFir.tSc", DumpEntry{analogFir.channel[22].vFir.tSc});
        res.insert_or_assign("analogFir.channel[22].vFir.phase", DumpEntry{analogFir.channel[22].vFir.phase});
        res.insert_or_assign("analogFir.channel[22].mmFir.m", DumpEntry{analogFir.channel[22].mmFir.m});
        res.insert_or_assign("analogFir.channel[22].mmFir.n", DumpEntry{analogFir.channel[22].mmFir.n});
        res.insert_or_assign("analogFir.channel[22].mmFir.s", DumpEntry{analogFir.channel[22].mmFir.s});
        res.insert_or_assign("analogFir.channel[22].mmFir.r", DumpEntry{analogFir.channel[22].mmFir.r});
        res.insert_or_assign("analogFir.channel[22].mmFir.tSc", DumpEntry{analogFir.channel[22].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[22].mmFir.phase", DumpEntry{analogFir.channel[22].mmFir.phase});
        res.insert_or_assign("analogFir.channel[22].limit.maxLimit", DumpEntry{analogFir.channel[22].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[22].limit.minLimit", DumpEntry{analogFir.channel[22].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[22].limit.filterLength", DumpEntry{analogFir.channel[22].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[23].rFir.m", DumpEntry{analogFir.channel[23].rFir.m});
        res.insert_or_assign("analogFir.channel[23].rFir.n", DumpEntry{analogFir.channel[23].rFir.n});
        res.insert_or_assign("analogFir.channel[23].rFir.s", DumpEntry{analogFir.channel[23].rFir.s});
        res.insert_or_assign("analogFir.channel[23].rFir.r", DumpEntry{analogFir.channel[23].rFir.r});
        res.insert_or_assign("analogFir.channel[23].rFir.tSc", DumpEntry{analogFir.channel[23].rFir.tSc});
        res.insert_or_assign("analogFir.channel[23].rFir.phase", DumpEntry{analogFir.channel[23].rFir.phase});
        res.insert_or_assign("analogFir.channel[23].vFir.m", DumpEntry{analogFir.channel[23].vFir.m});
        res.insert_or_assign("analogFir.channel[23].vFir.n", DumpEntry{analogFir.channel[23].vFir.n});
        res.insert_or_assign("analogFir.channel[23].vFir.s", DumpEntry{analogFir.channel[23].vFir.s});
        res.insert_or_assign("analogFir.channel[23].vFir.r", DumpEntry{analogFir.channel[23].vFir.r});
        res.insert_or_assign("analogFir.channel[23].vFir.tSc", DumpEntry{analogFir.channel[23].vFir.tSc});
        res.insert_or_assign("analogFir.channel[23].vFir.phase", DumpEntry{analogFir.channel[23].vFir.phase});
        res.insert_or_assign("analogFir.channel[23].mmFir.m", DumpEntry{analogFir.channel[23].mmFir.m});
        res.insert_or_assign("analogFir.channel[23].mmFir.n", DumpEntry{analogFir.channel[23].mmFir.n});
        res.insert_or_assign("analogFir.channel[23].mmFir.s", DumpEntry{analogFir.channel[23].mmFir.s});
        res.insert_or_assign("analogFir.channel[23].mmFir.r", DumpEntry{analogFir.channel[23].mmFir.r});
        res.insert_or_assign("analogFir.channel[23].mmFir.tSc", DumpEntry{analogFir.channel[23].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[23].mmFir.phase", DumpEntry{analogFir.channel[23].mmFir.phase});
        res.insert_or_assign("analogFir.channel[23].limit.maxLimit", DumpEntry{analogFir.channel[23].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[23].limit.minLimit", DumpEntry{analogFir.channel[23].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[23].limit.filterLength", DumpEntry{analogFir.channel[23].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[24].rFir.m", DumpEntry{analogFir.channel[24].rFir.m});
        res.insert_or_assign("analogFir.channel[24].rFir.n", DumpEntry{analogFir.channel[24].rFir.n});
        res.insert_or_assign("analogFir.channel[24].rFir.s", DumpEntry{analogFir.channel[24].rFir.s});
        res.insert_or_assign("analogFir.channel[24].rFir.r", DumpEntry{analogFir.channel[24].rFir.r});
        res.insert_or_assign("analogFir.channel[24].rFir.tSc", DumpEntry{analogFir.channel[24].rFir.tSc});
        res.insert_or_assign("analogFir.channel[24].rFir.phase", DumpEntry{analogFir.channel[24].rFir.phase});
        res.insert_or_assign("analogFir.channel[24].vFir.m", DumpEntry{analogFir.channel[24].vFir.m});
        res.insert_or_assign("analogFir.channel[24].vFir.n", DumpEntry{analogFir.channel[24].vFir.n});
        res.insert_or_assign("analogFir.channel[24].vFir.s", DumpEntry{analogFir.channel[24].vFir.s});
        res.insert_or_assign("analogFir.channel[24].vFir.r", DumpEntry{analogFir.channel[24].vFir.r});
        res.insert_or_assign("analogFir.channel[24].vFir.tSc", DumpEntry{analogFir.channel[24].vFir.tSc});
        res.insert_or_assign("analogFir.channel[24].vFir.phase", DumpEntry{analogFir.channel[24].vFir.phase});
        res.insert_or_assign("analogFir.channel[24].mmFir.m", DumpEntry{analogFir.channel[24].mmFir.m});
        res.insert_or_assign("analogFir.channel[24].mmFir.n", DumpEntry{analogFir.channel[24].mmFir.n});
        res.insert_or_assign("analogFir.channel[24].mmFir.s", DumpEntry{analogFir.channel[24].mmFir.s});
        res.insert_or_assign("analogFir.channel[24].mmFir.r", DumpEntry{analogFir.channel[24].mmFir.r});
        res.insert_or_assign("analogFir.channel[24].mmFir.tSc", DumpEntry{analogFir.channel[24].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[24].mmFir.phase", DumpEntry{analogFir.channel[24].mmFir.phase});
        res.insert_or_assign("analogFir.channel[24].limit.maxLimit", DumpEntry{analogFir.channel[24].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[24].limit.minLimit", DumpEntry{analogFir.channel[24].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[24].limit.filterLength", DumpEntry{analogFir.channel[24].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[25].rFir.m", DumpEntry{analogFir.channel[25].rFir.m});
        res.insert_or_assign("analogFir.channel[25].rFir.n", DumpEntry{analogFir.channel[25].rFir.n});
        res.insert_or_assign("analogFir.channel[25].rFir.s", DumpEntry{analogFir.channel[25].rFir.s});
        res.insert_or_assign("analogFir.channel[25].rFir.r", DumpEntry{analogFir.channel[25].rFir.r});
        res.insert_or_assign("analogFir.channel[25].rFir.tSc", DumpEntry{analogFir.channel[25].rFir.tSc});
        res.insert_or_assign("analogFir.channel[25].rFir.phase", DumpEntry{analogFir.channel[25].rFir.phase});
        res.insert_or_assign("analogFir.channel[25].vFir.m", DumpEntry{analogFir.channel[25].vFir.m});
        res.insert_or_assign("analogFir.channel[25].vFir.n", DumpEntry{analogFir.channel[25].vFir.n});
        res.insert_or_assign("analogFir.channel[25].vFir.s", DumpEntry{analogFir.channel[25].vFir.s});
        res.insert_or_assign("analogFir.channel[25].vFir.r", DumpEntry{analogFir.channel[25].vFir.r});
        res.insert_or_assign("analogFir.channel[25].vFir.tSc", DumpEntry{analogFir.channel[25].vFir.tSc});
        res.insert_or_assign("analogFir.channel[25].vFir.phase", DumpEntry{analogFir.channel[25].vFir.phase});
        res.insert_or_assign("analogFir.channel[25].mmFir.m", DumpEntry{analogFir.channel[25].mmFir.m});
        res.insert_or_assign("analogFir.channel[25].mmFir.n", DumpEntry{analogFir.channel[25].mmFir.n});
        res.insert_or_assign("analogFir.channel[25].mmFir.s", DumpEntry{analogFir.channel[25].mmFir.s});
        res.insert_or_assign("analogFir.channel[25].mmFir.r", DumpEntry{analogFir.channel[25].mmFir.r});
        res.insert_or_assign("analogFir.channel[25].mmFir.tSc", DumpEntry{analogFir.channel[25].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[25].mmFir.phase", DumpEntry{analogFir.channel[25].mmFir.phase});
        res.insert_or_assign("analogFir.channel[25].limit.maxLimit", DumpEntry{analogFir.channel[25].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[25].limit.minLimit", DumpEntry{analogFir.channel[25].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[25].limit.filterLength", DumpEntry{analogFir.channel[25].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[26].rFir.m", DumpEntry{analogFir.channel[26].rFir.m});
        res.insert_or_assign("analogFir.channel[26].rFir.n", DumpEntry{analogFir.channel[26].rFir.n});
        res.insert_or_assign("analogFir.channel[26].rFir.s", DumpEntry{analogFir.channel[26].rFir.s});
        res.insert_or_assign("analogFir.channel[26].rFir.r", DumpEntry{analogFir.channel[26].rFir.r});
        res.insert_or_assign("analogFir.channel[26].rFir.tSc", DumpEntry{analogFir.channel[26].rFir.tSc});
        res.insert_or_assign("analogFir.channel[26].rFir.phase", DumpEntry{analogFir.channel[26].rFir.phase});
        res.insert_or_assign("analogFir.channel[26].vFir.m", DumpEntry{analogFir.channel[26].vFir.m});
        res.insert_or_assign("analogFir.channel[26].vFir.n", DumpEntry{analogFir.channel[26].vFir.n});
        res.insert_or_assign("analogFir.channel[26].vFir.s", DumpEntry{analogFir.channel[26].vFir.s});
        res.insert_or_assign("analogFir.channel[26].vFir.r", DumpEntry{analogFir.channel[26].vFir.r});
        res.insert_or_assign("analogFir.channel[26].vFir.tSc", DumpEntry{analogFir.channel[26].vFir.tSc});
        res.insert_or_assign("analogFir.channel[26].vFir.phase", DumpEntry{analogFir.channel[26].vFir.phase});
        res.insert_or_assign("analogFir.channel[26].mmFir.m", DumpEntry{analogFir.channel[26].mmFir.m});
        res.insert_or_assign("analogFir.channel[26].mmFir.n", DumpEntry{analogFir.channel[26].mmFir.n});
        res.insert_or_assign("analogFir.channel[26].mmFir.s", DumpEntry{analogFir.channel[26].mmFir.s});
        res.insert_or_assign("analogFir.channel[26].mmFir.r", DumpEntry{analogFir.channel[26].mmFir.r});
        res.insert_or_assign("analogFir.channel[26].mmFir.tSc", DumpEntry{analogFir.channel[26].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[26].mmFir.phase", DumpEntry{analogFir.channel[26].mmFir.phase});
        res.insert_or_assign("analogFir.channel[26].limit.maxLimit", DumpEntry{analogFir.channel[26].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[26].limit.minLimit", DumpEntry{analogFir.channel[26].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[26].limit.filterLength", DumpEntry{analogFir.channel[26].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[27].rFir.m", DumpEntry{analogFir.channel[27].rFir.m});
        res.insert_or_assign("analogFir.channel[27].rFir.n", DumpEntry{analogFir.channel[27].rFir.n});
        res.insert_or_assign("analogFir.channel[27].rFir.s", DumpEntry{analogFir.channel[27].rFir.s});
        res.insert_or_assign("analogFir.channel[27].rFir.r", DumpEntry{analogFir.channel[27].rFir.r});
        res.insert_or_assign("analogFir.channel[27].rFir.tSc", DumpEntry{analogFir.channel[27].rFir.tSc});
        res.insert_or_assign("analogFir.channel[27].rFir.phase", DumpEntry{analogFir.channel[27].rFir.phase});
        res.insert_or_assign("analogFir.channel[27].vFir.m", DumpEntry{analogFir.channel[27].vFir.m});
        res.insert_or_assign("analogFir.channel[27].vFir.n", DumpEntry{analogFir.channel[27].vFir.n});
        res.insert_or_assign("analogFir.channel[27].vFir.s", DumpEntry{analogFir.channel[27].vFir.s});
        res.insert_or_assign("analogFir.channel[27].vFir.r", DumpEntry{analogFir.channel[27].vFir.r});
        res.insert_or_assign("analogFir.channel[27].vFir.tSc", DumpEntry{analogFir.channel[27].vFir.tSc});
        res.insert_or_assign("analogFir.channel[27].vFir.phase", DumpEntry{analogFir.channel[27].vFir.phase});
        res.insert_or_assign("analogFir.channel[27].mmFir.m", DumpEntry{analogFir.channel[27].mmFir.m});
        res.insert_or_assign("analogFir.channel[27].mmFir.n", DumpEntry{analogFir.channel[27].mmFir.n});
        res.insert_or_assign("analogFir.channel[27].mmFir.s", DumpEntry{analogFir.channel[27].mmFir.s});
        res.insert_or_assign("analogFir.channel[27].mmFir.r", DumpEntry{analogFir.channel[27].mmFir.r});
        res.insert_or_assign("analogFir.channel[27].mmFir.tSc", DumpEntry{analogFir.channel[27].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[27].mmFir.phase", DumpEntry{analogFir.channel[27].mmFir.phase});
        res.insert_or_assign("analogFir.channel[27].limit.maxLimit", DumpEntry{analogFir.channel[27].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[27].limit.minLimit", DumpEntry{analogFir.channel[27].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[27].limit.filterLength", DumpEntry{analogFir.channel[27].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[28].rFir.m", DumpEntry{analogFir.channel[28].rFir.m});
        res.insert_or_assign("analogFir.channel[28].rFir.n", DumpEntry{analogFir.channel[28].rFir.n});
        res.insert_or_assign("analogFir.channel[28].rFir.s", DumpEntry{analogFir.channel[28].rFir.s});
        res.insert_or_assign("analogFir.channel[28].rFir.r", DumpEntry{analogFir.channel[28].rFir.r});
        res.insert_or_assign("analogFir.channel[28].rFir.tSc", DumpEntry{analogFir.channel[28].rFir.tSc});
        res.insert_or_assign("analogFir.channel[28].rFir.phase", DumpEntry{analogFir.channel[28].rFir.phase});
        res.insert_or_assign("analogFir.channel[28].vFir.m", DumpEntry{analogFir.channel[28].vFir.m});
        res.insert_or_assign("analogFir.channel[28].vFir.n", DumpEntry{analogFir.channel[28].vFir.n});
        res.insert_or_assign("analogFir.channel[28].vFir.s", DumpEntry{analogFir.channel[28].vFir.s});
        res.insert_or_assign("analogFir.channel[28].vFir.r", DumpEntry{analogFir.channel[28].vFir.r});
        res.insert_or_assign("analogFir.channel[28].vFir.tSc", DumpEntry{analogFir.channel[28].vFir.tSc});
        res.insert_or_assign("analogFir.channel[28].vFir.phase", DumpEntry{analogFir.channel[28].vFir.phase});
        res.insert_or_assign("analogFir.channel[28].mmFir.m", DumpEntry{analogFir.channel[28].mmFir.m});
        res.insert_or_assign("analogFir.channel[28].mmFir.n", DumpEntry{analogFir.channel[28].mmFir.n});
        res.insert_or_assign("analogFir.channel[28].mmFir.s", DumpEntry{analogFir.channel[28].mmFir.s});
        res.insert_or_assign("analogFir.channel[28].mmFir.r", DumpEntry{analogFir.channel[28].mmFir.r});
        res.insert_or_assign("analogFir.channel[28].mmFir.tSc", DumpEntry{analogFir.channel[28].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[28].mmFir.phase", DumpEntry{analogFir.channel[28].mmFir.phase});
        res.insert_or_assign("analogFir.channel[28].limit.maxLimit", DumpEntry{analogFir.channel[28].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[28].limit.minLimit", DumpEntry{analogFir.channel[28].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[28].limit.filterLength", DumpEntry{analogFir.channel[28].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[29].rFir.m", DumpEntry{analogFir.channel[29].rFir.m});
        res.insert_or_assign("analogFir.channel[29].rFir.n", DumpEntry{analogFir.channel[29].rFir.n});
        res.insert_or_assign("analogFir.channel[29].rFir.s", DumpEntry{analogFir.channel[29].rFir.s});
        res.insert_or_assign("analogFir.channel[29].rFir.r", DumpEntry{analogFir.channel[29].rFir.r});
        res.insert_or_assign("analogFir.channel[29].rFir.tSc", DumpEntry{analogFir.channel[29].rFir.tSc});
        res.insert_or_assign("analogFir.channel[29].rFir.phase", DumpEntry{analogFir.channel[29].rFir.phase});
        res.insert_or_assign("analogFir.channel[29].vFir.m", DumpEntry{analogFir.channel[29].vFir.m});
        res.insert_or_assign("analogFir.channel[29].vFir.n", DumpEntry{analogFir.channel[29].vFir.n});
        res.insert_or_assign("analogFir.channel[29].vFir.s", DumpEntry{analogFir.channel[29].vFir.s});
        res.insert_or_assign("analogFir.channel[29].vFir.r", DumpEntry{analogFir.channel[29].vFir.r});
        res.insert_or_assign("analogFir.channel[29].vFir.tSc", DumpEntry{analogFir.channel[29].vFir.tSc});
        res.insert_or_assign("analogFir.channel[29].vFir.phase", DumpEntry{analogFir.channel[29].vFir.phase});
        res.insert_or_assign("analogFir.channel[29].mmFir.m", DumpEntry{analogFir.channel[29].mmFir.m});
        res.insert_or_assign("analogFir.channel[29].mmFir.n", DumpEntry{analogFir.channel[29].mmFir.n});
        res.insert_or_assign("analogFir.channel[29].mmFir.s", DumpEntry{analogFir.channel[29].mmFir.s});
        res.insert_or_assign("analogFir.channel[29].mmFir.r", DumpEntry{analogFir.channel[29].mmFir.r});
        res.insert_or_assign("analogFir.channel[29].mmFir.tSc", DumpEntry{analogFir.channel[29].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[29].mmFir.phase", DumpEntry{analogFir.channel[29].mmFir.phase});
        res.insert_or_assign("analogFir.channel[29].limit.maxLimit", DumpEntry{analogFir.channel[29].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[29].limit.minLimit", DumpEntry{analogFir.channel[29].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[29].limit.filterLength", DumpEntry{analogFir.channel[29].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[30].rFir.m", DumpEntry{analogFir.channel[30].rFir.m});
        res.insert_or_assign("analogFir.channel[30].rFir.n", DumpEntry{analogFir.channel[30].rFir.n});
        res.insert_or_assign("analogFir.channel[30].rFir.s", DumpEntry{analogFir.channel[30].rFir.s});
        res.insert_or_assign("analogFir.channel[30].rFir.r", DumpEntry{analogFir.channel[30].rFir.r});
        res.insert_or_assign("analogFir.channel[30].rFir.tSc", DumpEntry{analogFir.channel[30].rFir.tSc});
        res.insert_or_assign("analogFir.channel[30].rFir.phase", DumpEntry{analogFir.channel[30].rFir.phase});
        res.insert_or_assign("analogFir.channel[30].vFir.m", DumpEntry{analogFir.channel[30].vFir.m});
        res.insert_or_assign("analogFir.channel[30].vFir.n", DumpEntry{analogFir.channel[30].vFir.n});
        res.insert_or_assign("analogFir.channel[30].vFir.s", DumpEntry{analogFir.channel[30].vFir.s});
        res.insert_or_assign("analogFir.channel[30].vFir.r", DumpEntry{analogFir.channel[30].vFir.r});
        res.insert_or_assign("analogFir.channel[30].vFir.tSc", DumpEntry{analogFir.channel[30].vFir.tSc});
        res.insert_or_assign("analogFir.channel[30].vFir.phase", DumpEntry{analogFir.channel[30].vFir.phase});
        res.insert_or_assign("analogFir.channel[30].mmFir.m", DumpEntry{analogFir.channel[30].mmFir.m});
        res.insert_or_assign("analogFir.channel[30].mmFir.n", DumpEntry{analogFir.channel[30].mmFir.n});
        res.insert_or_assign("analogFir.channel[30].mmFir.s", DumpEntry{analogFir.channel[30].mmFir.s});
        res.insert_or_assign("analogFir.channel[30].mmFir.r", DumpEntry{analogFir.channel[30].mmFir.r});
        res.insert_or_assign("analogFir.channel[30].mmFir.tSc", DumpEntry{analogFir.channel[30].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[30].mmFir.phase", DumpEntry{analogFir.channel[30].mmFir.phase});
        res.insert_or_assign("analogFir.channel[30].limit.maxLimit", DumpEntry{analogFir.channel[30].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[30].limit.minLimit", DumpEntry{analogFir.channel[30].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[30].limit.filterLength", DumpEntry{analogFir.channel[30].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[31].rFir.m", DumpEntry{analogFir.channel[31].rFir.m});
        res.insert_or_assign("analogFir.channel[31].rFir.n", DumpEntry{analogFir.channel[31].rFir.n});
        res.insert_or_assign("analogFir.channel[31].rFir.s", DumpEntry{analogFir.channel[31].rFir.s});
        res.insert_or_assign("analogFir.channel[31].rFir.r", DumpEntry{analogFir.channel[31].rFir.r});
        res.insert_or_assign("analogFir.channel[31].rFir.tSc", DumpEntry{analogFir.channel[31].rFir.tSc});
        res.insert_or_assign("analogFir.channel[31].rFir.phase", DumpEntry{analogFir.channel[31].rFir.phase});
        res.insert_or_assign("analogFir.channel[31].vFir.m", DumpEntry{analogFir.channel[31].vFir.m});
        res.insert_or_assign("analogFir.channel[31].vFir.n", DumpEntry{analogFir.channel[31].vFir.n});
        res.insert_or_assign("analogFir.channel[31].vFir.s", DumpEntry{analogFir.channel[31].vFir.s});
        res.insert_or_assign("analogFir.channel[31].vFir.r", DumpEntry{analogFir.channel[31].vFir.r});
        res.insert_or_assign("analogFir.channel[31].vFir.tSc", DumpEntry{analogFir.channel[31].vFir.tSc});
        res.insert_or_assign("analogFir.channel[31].vFir.phase", DumpEntry{analogFir.channel[31].vFir.phase});
        res.insert_or_assign("analogFir.channel[31].mmFir.m", DumpEntry{analogFir.channel[31].mmFir.m});
        res.insert_or_assign("analogFir.channel[31].mmFir.n", DumpEntry{analogFir.channel[31].mmFir.n});
        res.insert_or_assign("analogFir.channel[31].mmFir.s", DumpEntry{analogFir.channel[31].mmFir.s});
        res.insert_or_assign("analogFir.channel[31].mmFir.r", DumpEntry{analogFir.channel[31].mmFir.r});
        res.insert_or_assign("analogFir.channel[31].mmFir.tSc", DumpEntry{analogFir.channel[31].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[31].mmFir.phase", DumpEntry{analogFir.channel[31].mmFir.phase});
        res.insert_or_assign("analogFir.channel[31].limit.maxLimit", DumpEntry{analogFir.channel[31].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[31].limit.minLimit", DumpEntry{analogFir.channel[31].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[31].limit.filterLength", DumpEntry{analogFir.channel[31].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[32].rFir.m", DumpEntry{analogFir.channel[32].rFir.m});
        res.insert_or_assign("analogFir.channel[32].rFir.n", DumpEntry{analogFir.channel[32].rFir.n});
        res.insert_or_assign("analogFir.channel[32].rFir.s", DumpEntry{analogFir.channel[32].rFir.s});
        res.insert_or_assign("analogFir.channel[32].rFir.r", DumpEntry{analogFir.channel[32].rFir.r});
        res.insert_or_assign("analogFir.channel[32].rFir.tSc", DumpEntry{analogFir.channel[32].rFir.tSc});
        res.insert_or_assign("analogFir.channel[32].rFir.phase", DumpEntry{analogFir.channel[32].rFir.phase});
        res.insert_or_assign("analogFir.channel[32].vFir.m", DumpEntry{analogFir.channel[32].vFir.m});
        res.insert_or_assign("analogFir.channel[32].vFir.n", DumpEntry{analogFir.channel[32].vFir.n});
        res.insert_or_assign("analogFir.channel[32].vFir.s", DumpEntry{analogFir.channel[32].vFir.s});
        res.insert_or_assign("analogFir.channel[32].vFir.r", DumpEntry{analogFir.channel[32].vFir.r});
        res.insert_or_assign("analogFir.channel[32].vFir.tSc", DumpEntry{analogFir.channel[32].vFir.tSc});
        res.insert_or_assign("analogFir.channel[32].vFir.phase", DumpEntry{analogFir.channel[32].vFir.phase});
        res.insert_or_assign("analogFir.channel[32].mmFir.m", DumpEntry{analogFir.channel[32].mmFir.m});
        res.insert_or_assign("analogFir.channel[32].mmFir.n", DumpEntry{analogFir.channel[32].mmFir.n});
        res.insert_or_assign("analogFir.channel[32].mmFir.s", DumpEntry{analogFir.channel[32].mmFir.s});
        res.insert_or_assign("analogFir.channel[32].mmFir.r", DumpEntry{analogFir.channel[32].mmFir.r});
        res.insert_or_assign("analogFir.channel[32].mmFir.tSc", DumpEntry{analogFir.channel[32].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[32].mmFir.phase", DumpEntry{analogFir.channel[32].mmFir.phase});
        res.insert_or_assign("analogFir.channel[32].limit.maxLimit", DumpEntry{analogFir.channel[32].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[32].limit.minLimit", DumpEntry{analogFir.channel[32].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[32].limit.filterLength", DumpEntry{analogFir.channel[32].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[33].rFir.m", DumpEntry{analogFir.channel[33].rFir.m});
        res.insert_or_assign("analogFir.channel[33].rFir.n", DumpEntry{analogFir.channel[33].rFir.n});
        res.insert_or_assign("analogFir.channel[33].rFir.s", DumpEntry{analogFir.channel[33].rFir.s});
        res.insert_or_assign("analogFir.channel[33].rFir.r", DumpEntry{analogFir.channel[33].rFir.r});
        res.insert_or_assign("analogFir.channel[33].rFir.tSc", DumpEntry{analogFir.channel[33].rFir.tSc});
        res.insert_or_assign("analogFir.channel[33].rFir.phase", DumpEntry{analogFir.channel[33].rFir.phase});
        res.insert_or_assign("analogFir.channel[33].vFir.m", DumpEntry{analogFir.channel[33].vFir.m});
        res.insert_or_assign("analogFir.channel[33].vFir.n", DumpEntry{analogFir.channel[33].vFir.n});
        res.insert_or_assign("analogFir.channel[33].vFir.s", DumpEntry{analogFir.channel[33].vFir.s});
        res.insert_or_assign("analogFir.channel[33].vFir.r", DumpEntry{analogFir.channel[33].vFir.r});
        res.insert_or_assign("analogFir.channel[33].vFir.tSc", DumpEntry{analogFir.channel[33].vFir.tSc});
        res.insert_or_assign("analogFir.channel[33].vFir.phase", DumpEntry{analogFir.channel[33].vFir.phase});
        res.insert_or_assign("analogFir.channel[33].mmFir.m", DumpEntry{analogFir.channel[33].mmFir.m});
        res.insert_or_assign("analogFir.channel[33].mmFir.n", DumpEntry{analogFir.channel[33].mmFir.n});
        res.insert_or_assign("analogFir.channel[33].mmFir.s", DumpEntry{analogFir.channel[33].mmFir.s});
        res.insert_or_assign("analogFir.channel[33].mmFir.r", DumpEntry{analogFir.channel[33].mmFir.r});
        res.insert_or_assign("analogFir.channel[33].mmFir.tSc", DumpEntry{analogFir.channel[33].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[33].mmFir.phase", DumpEntry{analogFir.channel[33].mmFir.phase});
        res.insert_or_assign("analogFir.channel[33].limit.maxLimit", DumpEntry{analogFir.channel[33].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[33].limit.minLimit", DumpEntry{analogFir.channel[33].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[33].limit.filterLength", DumpEntry{analogFir.channel[33].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[34].rFir.m", DumpEntry{analogFir.channel[34].rFir.m});
        res.insert_or_assign("analogFir.channel[34].rFir.n", DumpEntry{analogFir.channel[34].rFir.n});
        res.insert_or_assign("analogFir.channel[34].rFir.s", DumpEntry{analogFir.channel[34].rFir.s});
        res.insert_or_assign("analogFir.channel[34].rFir.r", DumpEntry{analogFir.channel[34].rFir.r});
        res.insert_or_assign("analogFir.channel[34].rFir.tSc", DumpEntry{analogFir.channel[34].rFir.tSc});
        res.insert_or_assign("analogFir.channel[34].rFir.phase", DumpEntry{analogFir.channel[34].rFir.phase});
        res.insert_or_assign("analogFir.channel[34].vFir.m", DumpEntry{analogFir.channel[34].vFir.m});
        res.insert_or_assign("analogFir.channel[34].vFir.n", DumpEntry{analogFir.channel[34].vFir.n});
        res.insert_or_assign("analogFir.channel[34].vFir.s", DumpEntry{analogFir.channel[34].vFir.s});
        res.insert_or_assign("analogFir.channel[34].vFir.r", DumpEntry{analogFir.channel[34].vFir.r});
        res.insert_or_assign("analogFir.channel[34].vFir.tSc", DumpEntry{analogFir.channel[34].vFir.tSc});
        res.insert_or_assign("analogFir.channel[34].vFir.phase", DumpEntry{analogFir.channel[34].vFir.phase});
        res.insert_or_assign("analogFir.channel[34].mmFir.m", DumpEntry{analogFir.channel[34].mmFir.m});
        res.insert_or_assign("analogFir.channel[34].mmFir.n", DumpEntry{analogFir.channel[34].mmFir.n});
        res.insert_or_assign("analogFir.channel[34].mmFir.s", DumpEntry{analogFir.channel[34].mmFir.s});
        res.insert_or_assign("analogFir.channel[34].mmFir.r", DumpEntry{analogFir.channel[34].mmFir.r});
        res.insert_or_assign("analogFir.channel[34].mmFir.tSc", DumpEntry{analogFir.channel[34].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[34].mmFir.phase", DumpEntry{analogFir.channel[34].mmFir.phase});
        res.insert_or_assign("analogFir.channel[34].limit.maxLimit", DumpEntry{analogFir.channel[34].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[34].limit.minLimit", DumpEntry{analogFir.channel[34].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[34].limit.filterLength", DumpEntry{analogFir.channel[34].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[35].rFir.m", DumpEntry{analogFir.channel[35].rFir.m});
        res.insert_or_assign("analogFir.channel[35].rFir.n", DumpEntry{analogFir.channel[35].rFir.n});
        res.insert_or_assign("analogFir.channel[35].rFir.s", DumpEntry{analogFir.channel[35].rFir.s});
        res.insert_or_assign("analogFir.channel[35].rFir.r", DumpEntry{analogFir.channel[35].rFir.r});
        res.insert_or_assign("analogFir.channel[35].rFir.tSc", DumpEntry{analogFir.channel[35].rFir.tSc});
        res.insert_or_assign("analogFir.channel[35].rFir.phase", DumpEntry{analogFir.channel[35].rFir.phase});
        res.insert_or_assign("analogFir.channel[35].vFir.m", DumpEntry{analogFir.channel[35].vFir.m});
        res.insert_or_assign("analogFir.channel[35].vFir.n", DumpEntry{analogFir.channel[35].vFir.n});
        res.insert_or_assign("analogFir.channel[35].vFir.s", DumpEntry{analogFir.channel[35].vFir.s});
        res.insert_or_assign("analogFir.channel[35].vFir.r", DumpEntry{analogFir.channel[35].vFir.r});
        res.insert_or_assign("analogFir.channel[35].vFir.tSc", DumpEntry{analogFir.channel[35].vFir.tSc});
        res.insert_or_assign("analogFir.channel[35].vFir.phase", DumpEntry{analogFir.channel[35].vFir.phase});
        res.insert_or_assign("analogFir.channel[35].mmFir.m", DumpEntry{analogFir.channel[35].mmFir.m});
        res.insert_or_assign("analogFir.channel[35].mmFir.n", DumpEntry{analogFir.channel[35].mmFir.n});
        res.insert_or_assign("analogFir.channel[35].mmFir.s", DumpEntry{analogFir.channel[35].mmFir.s});
        res.insert_or_assign("analogFir.channel[35].mmFir.r", DumpEntry{analogFir.channel[35].mmFir.r});
        res.insert_or_assign("analogFir.channel[35].mmFir.tSc", DumpEntry{analogFir.channel[35].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[35].mmFir.phase", DumpEntry{analogFir.channel[35].mmFir.phase});
        res.insert_or_assign("analogFir.channel[35].limit.maxLimit", DumpEntry{analogFir.channel[35].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[35].limit.minLimit", DumpEntry{analogFir.channel[35].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[35].limit.filterLength", DumpEntry{analogFir.channel[35].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[36].rFir.m", DumpEntry{analogFir.channel[36].rFir.m});
        res.insert_or_assign("analogFir.channel[36].rFir.n", DumpEntry{analogFir.channel[36].rFir.n});
        res.insert_or_assign("analogFir.channel[36].rFir.s", DumpEntry{analogFir.channel[36].rFir.s});
        res.insert_or_assign("analogFir.channel[36].rFir.r", DumpEntry{analogFir.channel[36].rFir.r});
        res.insert_or_assign("analogFir.channel[36].rFir.tSc", DumpEntry{analogFir.channel[36].rFir.tSc});
        res.insert_or_assign("analogFir.channel[36].rFir.phase", DumpEntry{analogFir.channel[36].rFir.phase});
        res.insert_or_assign("analogFir.channel[36].vFir.m", DumpEntry{analogFir.channel[36].vFir.m});
        res.insert_or_assign("analogFir.channel[36].vFir.n", DumpEntry{analogFir.channel[36].vFir.n});
        res.insert_or_assign("analogFir.channel[36].vFir.s", DumpEntry{analogFir.channel[36].vFir.s});
        res.insert_or_assign("analogFir.channel[36].vFir.r", DumpEntry{analogFir.channel[36].vFir.r});
        res.insert_or_assign("analogFir.channel[36].vFir.tSc", DumpEntry{analogFir.channel[36].vFir.tSc});
        res.insert_or_assign("analogFir.channel[36].vFir.phase", DumpEntry{analogFir.channel[36].vFir.phase});
        res.insert_or_assign("analogFir.channel[36].mmFir.m", DumpEntry{analogFir.channel[36].mmFir.m});
        res.insert_or_assign("analogFir.channel[36].mmFir.n", DumpEntry{analogFir.channel[36].mmFir.n});
        res.insert_or_assign("analogFir.channel[36].mmFir.s", DumpEntry{analogFir.channel[36].mmFir.s});
        res.insert_or_assign("analogFir.channel[36].mmFir.r", DumpEntry{analogFir.channel[36].mmFir.r});
        res.insert_or_assign("analogFir.channel[36].mmFir.tSc", DumpEntry{analogFir.channel[36].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[36].mmFir.phase", DumpEntry{analogFir.channel[36].mmFir.phase});
        res.insert_or_assign("analogFir.channel[36].limit.maxLimit", DumpEntry{analogFir.channel[36].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[36].limit.minLimit", DumpEntry{analogFir.channel[36].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[36].limit.filterLength", DumpEntry{analogFir.channel[36].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[37].rFir.m", DumpEntry{analogFir.channel[37].rFir.m});
        res.insert_or_assign("analogFir.channel[37].rFir.n", DumpEntry{analogFir.channel[37].rFir.n});
        res.insert_or_assign("analogFir.channel[37].rFir.s", DumpEntry{analogFir.channel[37].rFir.s});
        res.insert_or_assign("analogFir.channel[37].rFir.r", DumpEntry{analogFir.channel[37].rFir.r});
        res.insert_or_assign("analogFir.channel[37].rFir.tSc", DumpEntry{analogFir.channel[37].rFir.tSc});
        res.insert_or_assign("analogFir.channel[37].rFir.phase", DumpEntry{analogFir.channel[37].rFir.phase});
        res.insert_or_assign("analogFir.channel[37].vFir.m", DumpEntry{analogFir.channel[37].vFir.m});
        res.insert_or_assign("analogFir.channel[37].vFir.n", DumpEntry{analogFir.channel[37].vFir.n});
        res.insert_or_assign("analogFir.channel[37].vFir.s", DumpEntry{analogFir.channel[37].vFir.s});
        res.insert_or_assign("analogFir.channel[37].vFir.r", DumpEntry{analogFir.channel[37].vFir.r});
        res.insert_or_assign("analogFir.channel[37].vFir.tSc", DumpEntry{analogFir.channel[37].vFir.tSc});
        res.insert_or_assign("analogFir.channel[37].vFir.phase", DumpEntry{analogFir.channel[37].vFir.phase});
        res.insert_or_assign("analogFir.channel[37].mmFir.m", DumpEntry{analogFir.channel[37].mmFir.m});
        res.insert_or_assign("analogFir.channel[37].mmFir.n", DumpEntry{analogFir.channel[37].mmFir.n});
        res.insert_or_assign("analogFir.channel[37].mmFir.s", DumpEntry{analogFir.channel[37].mmFir.s});
        res.insert_or_assign("analogFir.channel[37].mmFir.r", DumpEntry{analogFir.channel[37].mmFir.r});
        res.insert_or_assign("analogFir.channel[37].mmFir.tSc", DumpEntry{analogFir.channel[37].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[37].mmFir.phase", DumpEntry{analogFir.channel[37].mmFir.phase});
        res.insert_or_assign("analogFir.channel[37].limit.maxLimit", DumpEntry{analogFir.channel[37].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[37].limit.minLimit", DumpEntry{analogFir.channel[37].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[37].limit.filterLength", DumpEntry{analogFir.channel[37].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[38].rFir.m", DumpEntry{analogFir.channel[38].rFir.m});
        res.insert_or_assign("analogFir.channel[38].rFir.n", DumpEntry{analogFir.channel[38].rFir.n});
        res.insert_or_assign("analogFir.channel[38].rFir.s", DumpEntry{analogFir.channel[38].rFir.s});
        res.insert_or_assign("analogFir.channel[38].rFir.r", DumpEntry{analogFir.channel[38].rFir.r});
        res.insert_or_assign("analogFir.channel[38].rFir.tSc", DumpEntry{analogFir.channel[38].rFir.tSc});
        res.insert_or_assign("analogFir.channel[38].rFir.phase", DumpEntry{analogFir.channel[38].rFir.phase});
        res.insert_or_assign("analogFir.channel[38].vFir.m", DumpEntry{analogFir.channel[38].vFir.m});
        res.insert_or_assign("analogFir.channel[38].vFir.n", DumpEntry{analogFir.channel[38].vFir.n});
        res.insert_or_assign("analogFir.channel[38].vFir.s", DumpEntry{analogFir.channel[38].vFir.s});
        res.insert_or_assign("analogFir.channel[38].vFir.r", DumpEntry{analogFir.channel[38].vFir.r});
        res.insert_or_assign("analogFir.channel[38].vFir.tSc", DumpEntry{analogFir.channel[38].vFir.tSc});
        res.insert_or_assign("analogFir.channel[38].vFir.phase", DumpEntry{analogFir.channel[38].vFir.phase});
        res.insert_or_assign("analogFir.channel[38].mmFir.m", DumpEntry{analogFir.channel[38].mmFir.m});
        res.insert_or_assign("analogFir.channel[38].mmFir.n", DumpEntry{analogFir.channel[38].mmFir.n});
        res.insert_or_assign("analogFir.channel[38].mmFir.s", DumpEntry{analogFir.channel[38].mmFir.s});
        res.insert_or_assign("analogFir.channel[38].mmFir.r", DumpEntry{analogFir.channel[38].mmFir.r});
        res.insert_or_assign("analogFir.channel[38].mmFir.tSc", DumpEntry{analogFir.channel[38].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[38].mmFir.phase", DumpEntry{analogFir.channel[38].mmFir.phase});
        res.insert_or_assign("analogFir.channel[38].limit.maxLimit", DumpEntry{analogFir.channel[38].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[38].limit.minLimit", DumpEntry{analogFir.channel[38].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[38].limit.filterLength", DumpEntry{analogFir.channel[38].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[39].rFir.m", DumpEntry{analogFir.channel[39].rFir.m});
        res.insert_or_assign("analogFir.channel[39].rFir.n", DumpEntry{analogFir.channel[39].rFir.n});
        res.insert_or_assign("analogFir.channel[39].rFir.s", DumpEntry{analogFir.channel[39].rFir.s});
        res.insert_or_assign("analogFir.channel[39].rFir.r", DumpEntry{analogFir.channel[39].rFir.r});
        res.insert_or_assign("analogFir.channel[39].rFir.tSc", DumpEntry{analogFir.channel[39].rFir.tSc});
        res.insert_or_assign("analogFir.channel[39].rFir.phase", DumpEntry{analogFir.channel[39].rFir.phase});
        res.insert_or_assign("analogFir.channel[39].vFir.m", DumpEntry{analogFir.channel[39].vFir.m});
        res.insert_or_assign("analogFir.channel[39].vFir.n", DumpEntry{analogFir.channel[39].vFir.n});
        res.insert_or_assign("analogFir.channel[39].vFir.s", DumpEntry{analogFir.channel[39].vFir.s});
        res.insert_or_assign("analogFir.channel[39].vFir.r", DumpEntry{analogFir.channel[39].vFir.r});
        res.insert_or_assign("analogFir.channel[39].vFir.tSc", DumpEntry{analogFir.channel[39].vFir.tSc});
        res.insert_or_assign("analogFir.channel[39].vFir.phase", DumpEntry{analogFir.channel[39].vFir.phase});
        res.insert_or_assign("analogFir.channel[39].mmFir.m", DumpEntry{analogFir.channel[39].mmFir.m});
        res.insert_or_assign("analogFir.channel[39].mmFir.n", DumpEntry{analogFir.channel[39].mmFir.n});
        res.insert_or_assign("analogFir.channel[39].mmFir.s", DumpEntry{analogFir.channel[39].mmFir.s});
        res.insert_or_assign("analogFir.channel[39].mmFir.r", DumpEntry{analogFir.channel[39].mmFir.r});
        res.insert_or_assign("analogFir.channel[39].mmFir.tSc", DumpEntry{analogFir.channel[39].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[39].mmFir.phase", DumpEntry{analogFir.channel[39].mmFir.phase});
        res.insert_or_assign("analogFir.channel[39].limit.maxLimit", DumpEntry{analogFir.channel[39].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[39].limit.minLimit", DumpEntry{analogFir.channel[39].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[39].limit.filterLength", DumpEntry{analogFir.channel[39].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[40].rFir.m", DumpEntry{analogFir.channel[40].rFir.m});
        res.insert_or_assign("analogFir.channel[40].rFir.n", DumpEntry{analogFir.channel[40].rFir.n});
        res.insert_or_assign("analogFir.channel[40].rFir.s", DumpEntry{analogFir.channel[40].rFir.s});
        res.insert_or_assign("analogFir.channel[40].rFir.r", DumpEntry{analogFir.channel[40].rFir.r});
        res.insert_or_assign("analogFir.channel[40].rFir.tSc", DumpEntry{analogFir.channel[40].rFir.tSc});
        res.insert_or_assign("analogFir.channel[40].rFir.phase", DumpEntry{analogFir.channel[40].rFir.phase});
        res.insert_or_assign("analogFir.channel[40].vFir.m", DumpEntry{analogFir.channel[40].vFir.m});
        res.insert_or_assign("analogFir.channel[40].vFir.n", DumpEntry{analogFir.channel[40].vFir.n});
        res.insert_or_assign("analogFir.channel[40].vFir.s", DumpEntry{analogFir.channel[40].vFir.s});
        res.insert_or_assign("analogFir.channel[40].vFir.r", DumpEntry{analogFir.channel[40].vFir.r});
        res.insert_or_assign("analogFir.channel[40].vFir.tSc", DumpEntry{analogFir.channel[40].vFir.tSc});
        res.insert_or_assign("analogFir.channel[40].vFir.phase", DumpEntry{analogFir.channel[40].vFir.phase});
        res.insert_or_assign("analogFir.channel[40].mmFir.m", DumpEntry{analogFir.channel[40].mmFir.m});
        res.insert_or_assign("analogFir.channel[40].mmFir.n", DumpEntry{analogFir.channel[40].mmFir.n});
        res.insert_or_assign("analogFir.channel[40].mmFir.s", DumpEntry{analogFir.channel[40].mmFir.s});
        res.insert_or_assign("analogFir.channel[40].mmFir.r", DumpEntry{analogFir.channel[40].mmFir.r});
        res.insert_or_assign("analogFir.channel[40].mmFir.tSc", DumpEntry{analogFir.channel[40].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[40].mmFir.phase", DumpEntry{analogFir.channel[40].mmFir.phase});
        res.insert_or_assign("analogFir.channel[40].limit.maxLimit", DumpEntry{analogFir.channel[40].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[40].limit.minLimit", DumpEntry{analogFir.channel[40].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[40].limit.filterLength", DumpEntry{analogFir.channel[40].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[41].rFir.m", DumpEntry{analogFir.channel[41].rFir.m});
        res.insert_or_assign("analogFir.channel[41].rFir.n", DumpEntry{analogFir.channel[41].rFir.n});
        res.insert_or_assign("analogFir.channel[41].rFir.s", DumpEntry{analogFir.channel[41].rFir.s});
        res.insert_or_assign("analogFir.channel[41].rFir.r", DumpEntry{analogFir.channel[41].rFir.r});
        res.insert_or_assign("analogFir.channel[41].rFir.tSc", DumpEntry{analogFir.channel[41].rFir.tSc});
        res.insert_or_assign("analogFir.channel[41].rFir.phase", DumpEntry{analogFir.channel[41].rFir.phase});
        res.insert_or_assign("analogFir.channel[41].vFir.m", DumpEntry{analogFir.channel[41].vFir.m});
        res.insert_or_assign("analogFir.channel[41].vFir.n", DumpEntry{analogFir.channel[41].vFir.n});
        res.insert_or_assign("analogFir.channel[41].vFir.s", DumpEntry{analogFir.channel[41].vFir.s});
        res.insert_or_assign("analogFir.channel[41].vFir.r", DumpEntry{analogFir.channel[41].vFir.r});
        res.insert_or_assign("analogFir.channel[41].vFir.tSc", DumpEntry{analogFir.channel[41].vFir.tSc});
        res.insert_or_assign("analogFir.channel[41].vFir.phase", DumpEntry{analogFir.channel[41].vFir.phase});
        res.insert_or_assign("analogFir.channel[41].mmFir.m", DumpEntry{analogFir.channel[41].mmFir.m});
        res.insert_or_assign("analogFir.channel[41].mmFir.n", DumpEntry{analogFir.channel[41].mmFir.n});
        res.insert_or_assign("analogFir.channel[41].mmFir.s", DumpEntry{analogFir.channel[41].mmFir.s});
        res.insert_or_assign("analogFir.channel[41].mmFir.r", DumpEntry{analogFir.channel[41].mmFir.r});
        res.insert_or_assign("analogFir.channel[41].mmFir.tSc", DumpEntry{analogFir.channel[41].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[41].mmFir.phase", DumpEntry{analogFir.channel[41].mmFir.phase});
        res.insert_or_assign("analogFir.channel[41].limit.maxLimit", DumpEntry{analogFir.channel[41].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[41].limit.minLimit", DumpEntry{analogFir.channel[41].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[41].limit.filterLength", DumpEntry{analogFir.channel[41].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[42].rFir.m", DumpEntry{analogFir.channel[42].rFir.m});
        res.insert_or_assign("analogFir.channel[42].rFir.n", DumpEntry{analogFir.channel[42].rFir.n});
        res.insert_or_assign("analogFir.channel[42].rFir.s", DumpEntry{analogFir.channel[42].rFir.s});
        res.insert_or_assign("analogFir.channel[42].rFir.r", DumpEntry{analogFir.channel[42].rFir.r});
        res.insert_or_assign("analogFir.channel[42].rFir.tSc", DumpEntry{analogFir.channel[42].rFir.tSc});
        res.insert_or_assign("analogFir.channel[42].rFir.phase", DumpEntry{analogFir.channel[42].rFir.phase});
        res.insert_or_assign("analogFir.channel[42].vFir.m", DumpEntry{analogFir.channel[42].vFir.m});
        res.insert_or_assign("analogFir.channel[42].vFir.n", DumpEntry{analogFir.channel[42].vFir.n});
        res.insert_or_assign("analogFir.channel[42].vFir.s", DumpEntry{analogFir.channel[42].vFir.s});
        res.insert_or_assign("analogFir.channel[42].vFir.r", DumpEntry{analogFir.channel[42].vFir.r});
        res.insert_or_assign("analogFir.channel[42].vFir.tSc", DumpEntry{analogFir.channel[42].vFir.tSc});
        res.insert_or_assign("analogFir.channel[42].vFir.phase", DumpEntry{analogFir.channel[42].vFir.phase});
        res.insert_or_assign("analogFir.channel[42].mmFir.m", DumpEntry{analogFir.channel[42].mmFir.m});
        res.insert_or_assign("analogFir.channel[42].mmFir.n", DumpEntry{analogFir.channel[42].mmFir.n});
        res.insert_or_assign("analogFir.channel[42].mmFir.s", DumpEntry{analogFir.channel[42].mmFir.s});
        res.insert_or_assign("analogFir.channel[42].mmFir.r", DumpEntry{analogFir.channel[42].mmFir.r});
        res.insert_or_assign("analogFir.channel[42].mmFir.tSc", DumpEntry{analogFir.channel[42].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[42].mmFir.phase", DumpEntry{analogFir.channel[42].mmFir.phase});
        res.insert_or_assign("analogFir.channel[42].limit.maxLimit", DumpEntry{analogFir.channel[42].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[42].limit.minLimit", DumpEntry{analogFir.channel[42].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[42].limit.filterLength", DumpEntry{analogFir.channel[42].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[43].rFir.m", DumpEntry{analogFir.channel[43].rFir.m});
        res.insert_or_assign("analogFir.channel[43].rFir.n", DumpEntry{analogFir.channel[43].rFir.n});
        res.insert_or_assign("analogFir.channel[43].rFir.s", DumpEntry{analogFir.channel[43].rFir.s});
        res.insert_or_assign("analogFir.channel[43].rFir.r", DumpEntry{analogFir.channel[43].rFir.r});
        res.insert_or_assign("analogFir.channel[43].rFir.tSc", DumpEntry{analogFir.channel[43].rFir.tSc});
        res.insert_or_assign("analogFir.channel[43].rFir.phase", DumpEntry{analogFir.channel[43].rFir.phase});
        res.insert_or_assign("analogFir.channel[43].vFir.m", DumpEntry{analogFir.channel[43].vFir.m});
        res.insert_or_assign("analogFir.channel[43].vFir.n", DumpEntry{analogFir.channel[43].vFir.n});
        res.insert_or_assign("analogFir.channel[43].vFir.s", DumpEntry{analogFir.channel[43].vFir.s});
        res.insert_or_assign("analogFir.channel[43].vFir.r", DumpEntry{analogFir.channel[43].vFir.r});
        res.insert_or_assign("analogFir.channel[43].vFir.tSc", DumpEntry{analogFir.channel[43].vFir.tSc});
        res.insert_or_assign("analogFir.channel[43].vFir.phase", DumpEntry{analogFir.channel[43].vFir.phase});
        res.insert_or_assign("analogFir.channel[43].mmFir.m", DumpEntry{analogFir.channel[43].mmFir.m});
        res.insert_or_assign("analogFir.channel[43].mmFir.n", DumpEntry{analogFir.channel[43].mmFir.n});
        res.insert_or_assign("analogFir.channel[43].mmFir.s", DumpEntry{analogFir.channel[43].mmFir.s});
        res.insert_or_assign("analogFir.channel[43].mmFir.r", DumpEntry{analogFir.channel[43].mmFir.r});
        res.insert_or_assign("analogFir.channel[43].mmFir.tSc", DumpEntry{analogFir.channel[43].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[43].mmFir.phase", DumpEntry{analogFir.channel[43].mmFir.phase});
        res.insert_or_assign("analogFir.channel[43].limit.maxLimit", DumpEntry{analogFir.channel[43].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[43].limit.minLimit", DumpEntry{analogFir.channel[43].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[43].limit.filterLength", DumpEntry{analogFir.channel[43].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[44].rFir.m", DumpEntry{analogFir.channel[44].rFir.m});
        res.insert_or_assign("analogFir.channel[44].rFir.n", DumpEntry{analogFir.channel[44].rFir.n});
        res.insert_or_assign("analogFir.channel[44].rFir.s", DumpEntry{analogFir.channel[44].rFir.s});
        res.insert_or_assign("analogFir.channel[44].rFir.r", DumpEntry{analogFir.channel[44].rFir.r});
        res.insert_or_assign("analogFir.channel[44].rFir.tSc", DumpEntry{analogFir.channel[44].rFir.tSc});
        res.insert_or_assign("analogFir.channel[44].rFir.phase", DumpEntry{analogFir.channel[44].rFir.phase});
        res.insert_or_assign("analogFir.channel[44].vFir.m", DumpEntry{analogFir.channel[44].vFir.m});
        res.insert_or_assign("analogFir.channel[44].vFir.n", DumpEntry{analogFir.channel[44].vFir.n});
        res.insert_or_assign("analogFir.channel[44].vFir.s", DumpEntry{analogFir.channel[44].vFir.s});
        res.insert_or_assign("analogFir.channel[44].vFir.r", DumpEntry{analogFir.channel[44].vFir.r});
        res.insert_or_assign("analogFir.channel[44].vFir.tSc", DumpEntry{analogFir.channel[44].vFir.tSc});
        res.insert_or_assign("analogFir.channel[44].vFir.phase", DumpEntry{analogFir.channel[44].vFir.phase});
        res.insert_or_assign("analogFir.channel[44].mmFir.m", DumpEntry{analogFir.channel[44].mmFir.m});
        res.insert_or_assign("analogFir.channel[44].mmFir.n", DumpEntry{analogFir.channel[44].mmFir.n});
        res.insert_or_assign("analogFir.channel[44].mmFir.s", DumpEntry{analogFir.channel[44].mmFir.s});
        res.insert_or_assign("analogFir.channel[44].mmFir.r", DumpEntry{analogFir.channel[44].mmFir.r});
        res.insert_or_assign("analogFir.channel[44].mmFir.tSc", DumpEntry{analogFir.channel[44].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[44].mmFir.phase", DumpEntry{analogFir.channel[44].mmFir.phase});
        res.insert_or_assign("analogFir.channel[44].limit.maxLimit", DumpEntry{analogFir.channel[44].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[44].limit.minLimit", DumpEntry{analogFir.channel[44].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[44].limit.filterLength", DumpEntry{analogFir.channel[44].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[45].rFir.m", DumpEntry{analogFir.channel[45].rFir.m});
        res.insert_or_assign("analogFir.channel[45].rFir.n", DumpEntry{analogFir.channel[45].rFir.n});
        res.insert_or_assign("analogFir.channel[45].rFir.s", DumpEntry{analogFir.channel[45].rFir.s});
        res.insert_or_assign("analogFir.channel[45].rFir.r", DumpEntry{analogFir.channel[45].rFir.r});
        res.insert_or_assign("analogFir.channel[45].rFir.tSc", DumpEntry{analogFir.channel[45].rFir.tSc});
        res.insert_or_assign("analogFir.channel[45].rFir.phase", DumpEntry{analogFir.channel[45].rFir.phase});
        res.insert_or_assign("analogFir.channel[45].vFir.m", DumpEntry{analogFir.channel[45].vFir.m});
        res.insert_or_assign("analogFir.channel[45].vFir.n", DumpEntry{analogFir.channel[45].vFir.n});
        res.insert_or_assign("analogFir.channel[45].vFir.s", DumpEntry{analogFir.channel[45].vFir.s});
        res.insert_or_assign("analogFir.channel[45].vFir.r", DumpEntry{analogFir.channel[45].vFir.r});
        res.insert_or_assign("analogFir.channel[45].vFir.tSc", DumpEntry{analogFir.channel[45].vFir.tSc});
        res.insert_or_assign("analogFir.channel[45].vFir.phase", DumpEntry{analogFir.channel[45].vFir.phase});
        res.insert_or_assign("analogFir.channel[45].mmFir.m", DumpEntry{analogFir.channel[45].mmFir.m});
        res.insert_or_assign("analogFir.channel[45].mmFir.n", DumpEntry{analogFir.channel[45].mmFir.n});
        res.insert_or_assign("analogFir.channel[45].mmFir.s", DumpEntry{analogFir.channel[45].mmFir.s});
        res.insert_or_assign("analogFir.channel[45].mmFir.r", DumpEntry{analogFir.channel[45].mmFir.r});
        res.insert_or_assign("analogFir.channel[45].mmFir.tSc", DumpEntry{analogFir.channel[45].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[45].mmFir.phase", DumpEntry{analogFir.channel[45].mmFir.phase});
        res.insert_or_assign("analogFir.channel[45].limit.maxLimit", DumpEntry{analogFir.channel[45].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[45].limit.minLimit", DumpEntry{analogFir.channel[45].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[45].limit.filterLength", DumpEntry{analogFir.channel[45].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[46].rFir.m", DumpEntry{analogFir.channel[46].rFir.m});
        res.insert_or_assign("analogFir.channel[46].rFir.n", DumpEntry{analogFir.channel[46].rFir.n});
        res.insert_or_assign("analogFir.channel[46].rFir.s", DumpEntry{analogFir.channel[46].rFir.s});
        res.insert_or_assign("analogFir.channel[46].rFir.r", DumpEntry{analogFir.channel[46].rFir.r});
        res.insert_or_assign("analogFir.channel[46].rFir.tSc", DumpEntry{analogFir.channel[46].rFir.tSc});
        res.insert_or_assign("analogFir.channel[46].rFir.phase", DumpEntry{analogFir.channel[46].rFir.phase});
        res.insert_or_assign("analogFir.channel[46].vFir.m", DumpEntry{analogFir.channel[46].vFir.m});
        res.insert_or_assign("analogFir.channel[46].vFir.n", DumpEntry{analogFir.channel[46].vFir.n});
        res.insert_or_assign("analogFir.channel[46].vFir.s", DumpEntry{analogFir.channel[46].vFir.s});
        res.insert_or_assign("analogFir.channel[46].vFir.r", DumpEntry{analogFir.channel[46].vFir.r});
        res.insert_or_assign("analogFir.channel[46].vFir.tSc", DumpEntry{analogFir.channel[46].vFir.tSc});
        res.insert_or_assign("analogFir.channel[46].vFir.phase", DumpEntry{analogFir.channel[46].vFir.phase});
        res.insert_or_assign("analogFir.channel[46].mmFir.m", DumpEntry{analogFir.channel[46].mmFir.m});
        res.insert_or_assign("analogFir.channel[46].mmFir.n", DumpEntry{analogFir.channel[46].mmFir.n});
        res.insert_or_assign("analogFir.channel[46].mmFir.s", DumpEntry{analogFir.channel[46].mmFir.s});
        res.insert_or_assign("analogFir.channel[46].mmFir.r", DumpEntry{analogFir.channel[46].mmFir.r});
        res.insert_or_assign("analogFir.channel[46].mmFir.tSc", DumpEntry{analogFir.channel[46].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[46].mmFir.phase", DumpEntry{analogFir.channel[46].mmFir.phase});
        res.insert_or_assign("analogFir.channel[46].limit.maxLimit", DumpEntry{analogFir.channel[46].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[46].limit.minLimit", DumpEntry{analogFir.channel[46].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[46].limit.filterLength", DumpEntry{analogFir.channel[46].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[47].rFir.m", DumpEntry{analogFir.channel[47].rFir.m});
        res.insert_or_assign("analogFir.channel[47].rFir.n", DumpEntry{analogFir.channel[47].rFir.n});
        res.insert_or_assign("analogFir.channel[47].rFir.s", DumpEntry{analogFir.channel[47].rFir.s});
        res.insert_or_assign("analogFir.channel[47].rFir.r", DumpEntry{analogFir.channel[47].rFir.r});
        res.insert_or_assign("analogFir.channel[47].rFir.tSc", DumpEntry{analogFir.channel[47].rFir.tSc});
        res.insert_or_assign("analogFir.channel[47].rFir.phase", DumpEntry{analogFir.channel[47].rFir.phase});
        res.insert_or_assign("analogFir.channel[47].vFir.m", DumpEntry{analogFir.channel[47].vFir.m});
        res.insert_or_assign("analogFir.channel[47].vFir.n", DumpEntry{analogFir.channel[47].vFir.n});
        res.insert_or_assign("analogFir.channel[47].vFir.s", DumpEntry{analogFir.channel[47].vFir.s});
        res.insert_or_assign("analogFir.channel[47].vFir.r", DumpEntry{analogFir.channel[47].vFir.r});
        res.insert_or_assign("analogFir.channel[47].vFir.tSc", DumpEntry{analogFir.channel[47].vFir.tSc});
        res.insert_or_assign("analogFir.channel[47].vFir.phase", DumpEntry{analogFir.channel[47].vFir.phase});
        res.insert_or_assign("analogFir.channel[47].mmFir.m", DumpEntry{analogFir.channel[47].mmFir.m});
        res.insert_or_assign("analogFir.channel[47].mmFir.n", DumpEntry{analogFir.channel[47].mmFir.n});
        res.insert_or_assign("analogFir.channel[47].mmFir.s", DumpEntry{analogFir.channel[47].mmFir.s});
        res.insert_or_assign("analogFir.channel[47].mmFir.r", DumpEntry{analogFir.channel[47].mmFir.r});
        res.insert_or_assign("analogFir.channel[47].mmFir.tSc", DumpEntry{analogFir.channel[47].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[47].mmFir.phase", DumpEntry{analogFir.channel[47].mmFir.phase});
        res.insert_or_assign("analogFir.channel[47].limit.maxLimit", DumpEntry{analogFir.channel[47].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[47].limit.minLimit", DumpEntry{analogFir.channel[47].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[47].limit.filterLength", DumpEntry{analogFir.channel[47].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[48].rFir.m", DumpEntry{analogFir.channel[48].rFir.m});
        res.insert_or_assign("analogFir.channel[48].rFir.n", DumpEntry{analogFir.channel[48].rFir.n});
        res.insert_or_assign("analogFir.channel[48].rFir.s", DumpEntry{analogFir.channel[48].rFir.s});
        res.insert_or_assign("analogFir.channel[48].rFir.r", DumpEntry{analogFir.channel[48].rFir.r});
        res.insert_or_assign("analogFir.channel[48].rFir.tSc", DumpEntry{analogFir.channel[48].rFir.tSc});
        res.insert_or_assign("analogFir.channel[48].rFir.phase", DumpEntry{analogFir.channel[48].rFir.phase});
        res.insert_or_assign("analogFir.channel[48].vFir.m", DumpEntry{analogFir.channel[48].vFir.m});
        res.insert_or_assign("analogFir.channel[48].vFir.n", DumpEntry{analogFir.channel[48].vFir.n});
        res.insert_or_assign("analogFir.channel[48].vFir.s", DumpEntry{analogFir.channel[48].vFir.s});
        res.insert_or_assign("analogFir.channel[48].vFir.r", DumpEntry{analogFir.channel[48].vFir.r});
        res.insert_or_assign("analogFir.channel[48].vFir.tSc", DumpEntry{analogFir.channel[48].vFir.tSc});
        res.insert_or_assign("analogFir.channel[48].vFir.phase", DumpEntry{analogFir.channel[48].vFir.phase});
        res.insert_or_assign("analogFir.channel[48].mmFir.m", DumpEntry{analogFir.channel[48].mmFir.m});
        res.insert_or_assign("analogFir.channel[48].mmFir.n", DumpEntry{analogFir.channel[48].mmFir.n});
        res.insert_or_assign("analogFir.channel[48].mmFir.s", DumpEntry{analogFir.channel[48].mmFir.s});
        res.insert_or_assign("analogFir.channel[48].mmFir.r", DumpEntry{analogFir.channel[48].mmFir.r});
        res.insert_or_assign("analogFir.channel[48].mmFir.tSc", DumpEntry{analogFir.channel[48].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[48].mmFir.phase", DumpEntry{analogFir.channel[48].mmFir.phase});
        res.insert_or_assign("analogFir.channel[48].limit.maxLimit", DumpEntry{analogFir.channel[48].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[48].limit.minLimit", DumpEntry{analogFir.channel[48].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[48].limit.filterLength", DumpEntry{analogFir.channel[48].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[49].rFir.m", DumpEntry{analogFir.channel[49].rFir.m});
        res.insert_or_assign("analogFir.channel[49].rFir.n", DumpEntry{analogFir.channel[49].rFir.n});
        res.insert_or_assign("analogFir.channel[49].rFir.s", DumpEntry{analogFir.channel[49].rFir.s});
        res.insert_or_assign("analogFir.channel[49].rFir.r", DumpEntry{analogFir.channel[49].rFir.r});
        res.insert_or_assign("analogFir.channel[49].rFir.tSc", DumpEntry{analogFir.channel[49].rFir.tSc});
        res.insert_or_assign("analogFir.channel[49].rFir.phase", DumpEntry{analogFir.channel[49].rFir.phase});
        res.insert_or_assign("analogFir.channel[49].vFir.m", DumpEntry{analogFir.channel[49].vFir.m});
        res.insert_or_assign("analogFir.channel[49].vFir.n", DumpEntry{analogFir.channel[49].vFir.n});
        res.insert_or_assign("analogFir.channel[49].vFir.s", DumpEntry{analogFir.channel[49].vFir.s});
        res.insert_or_assign("analogFir.channel[49].vFir.r", DumpEntry{analogFir.channel[49].vFir.r});
        res.insert_or_assign("analogFir.channel[49].vFir.tSc", DumpEntry{analogFir.channel[49].vFir.tSc});
        res.insert_or_assign("analogFir.channel[49].vFir.phase", DumpEntry{analogFir.channel[49].vFir.phase});
        res.insert_or_assign("analogFir.channel[49].mmFir.m", DumpEntry{analogFir.channel[49].mmFir.m});
        res.insert_or_assign("analogFir.channel[49].mmFir.n", DumpEntry{analogFir.channel[49].mmFir.n});
        res.insert_or_assign("analogFir.channel[49].mmFir.s", DumpEntry{analogFir.channel[49].mmFir.s});
        res.insert_or_assign("analogFir.channel[49].mmFir.r", DumpEntry{analogFir.channel[49].mmFir.r});
        res.insert_or_assign("analogFir.channel[49].mmFir.tSc", DumpEntry{analogFir.channel[49].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[49].mmFir.phase", DumpEntry{analogFir.channel[49].mmFir.phase});
        res.insert_or_assign("analogFir.channel[49].limit.maxLimit", DumpEntry{analogFir.channel[49].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[49].limit.minLimit", DumpEntry{analogFir.channel[49].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[49].limit.filterLength", DumpEntry{analogFir.channel[49].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[50].rFir.m", DumpEntry{analogFir.channel[50].rFir.m});
        res.insert_or_assign("analogFir.channel[50].rFir.n", DumpEntry{analogFir.channel[50].rFir.n});
        res.insert_or_assign("analogFir.channel[50].rFir.s", DumpEntry{analogFir.channel[50].rFir.s});
        res.insert_or_assign("analogFir.channel[50].rFir.r", DumpEntry{analogFir.channel[50].rFir.r});
        res.insert_or_assign("analogFir.channel[50].rFir.tSc", DumpEntry{analogFir.channel[50].rFir.tSc});
        res.insert_or_assign("analogFir.channel[50].rFir.phase", DumpEntry{analogFir.channel[50].rFir.phase});
        res.insert_or_assign("analogFir.channel[50].vFir.m", DumpEntry{analogFir.channel[50].vFir.m});
        res.insert_or_assign("analogFir.channel[50].vFir.n", DumpEntry{analogFir.channel[50].vFir.n});
        res.insert_or_assign("analogFir.channel[50].vFir.s", DumpEntry{analogFir.channel[50].vFir.s});
        res.insert_or_assign("analogFir.channel[50].vFir.r", DumpEntry{analogFir.channel[50].vFir.r});
        res.insert_or_assign("analogFir.channel[50].vFir.tSc", DumpEntry{analogFir.channel[50].vFir.tSc});
        res.insert_or_assign("analogFir.channel[50].vFir.phase", DumpEntry{analogFir.channel[50].vFir.phase});
        res.insert_or_assign("analogFir.channel[50].mmFir.m", DumpEntry{analogFir.channel[50].mmFir.m});
        res.insert_or_assign("analogFir.channel[50].mmFir.n", DumpEntry{analogFir.channel[50].mmFir.n});
        res.insert_or_assign("analogFir.channel[50].mmFir.s", DumpEntry{analogFir.channel[50].mmFir.s});
        res.insert_or_assign("analogFir.channel[50].mmFir.r", DumpEntry{analogFir.channel[50].mmFir.r});
        res.insert_or_assign("analogFir.channel[50].mmFir.tSc", DumpEntry{analogFir.channel[50].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[50].mmFir.phase", DumpEntry{analogFir.channel[50].mmFir.phase});
        res.insert_or_assign("analogFir.channel[50].limit.maxLimit", DumpEntry{analogFir.channel[50].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[50].limit.minLimit", DumpEntry{analogFir.channel[50].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[50].limit.filterLength", DumpEntry{analogFir.channel[50].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[51].rFir.m", DumpEntry{analogFir.channel[51].rFir.m});
        res.insert_or_assign("analogFir.channel[51].rFir.n", DumpEntry{analogFir.channel[51].rFir.n});
        res.insert_or_assign("analogFir.channel[51].rFir.s", DumpEntry{analogFir.channel[51].rFir.s});
        res.insert_or_assign("analogFir.channel[51].rFir.r", DumpEntry{analogFir.channel[51].rFir.r});
        res.insert_or_assign("analogFir.channel[51].rFir.tSc", DumpEntry{analogFir.channel[51].rFir.tSc});
        res.insert_or_assign("analogFir.channel[51].rFir.phase", DumpEntry{analogFir.channel[51].rFir.phase});
        res.insert_or_assign("analogFir.channel[51].vFir.m", DumpEntry{analogFir.channel[51].vFir.m});
        res.insert_or_assign("analogFir.channel[51].vFir.n", DumpEntry{analogFir.channel[51].vFir.n});
        res.insert_or_assign("analogFir.channel[51].vFir.s", DumpEntry{analogFir.channel[51].vFir.s});
        res.insert_or_assign("analogFir.channel[51].vFir.r", DumpEntry{analogFir.channel[51].vFir.r});
        res.insert_or_assign("analogFir.channel[51].vFir.tSc", DumpEntry{analogFir.channel[51].vFir.tSc});
        res.insert_or_assign("analogFir.channel[51].vFir.phase", DumpEntry{analogFir.channel[51].vFir.phase});
        res.insert_or_assign("analogFir.channel[51].mmFir.m", DumpEntry{analogFir.channel[51].mmFir.m});
        res.insert_or_assign("analogFir.channel[51].mmFir.n", DumpEntry{analogFir.channel[51].mmFir.n});
        res.insert_or_assign("analogFir.channel[51].mmFir.s", DumpEntry{analogFir.channel[51].mmFir.s});
        res.insert_or_assign("analogFir.channel[51].mmFir.r", DumpEntry{analogFir.channel[51].mmFir.r});
        res.insert_or_assign("analogFir.channel[51].mmFir.tSc", DumpEntry{analogFir.channel[51].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[51].mmFir.phase", DumpEntry{analogFir.channel[51].mmFir.phase});
        res.insert_or_assign("analogFir.channel[51].limit.maxLimit", DumpEntry{analogFir.channel[51].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[51].limit.minLimit", DumpEntry{analogFir.channel[51].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[51].limit.filterLength", DumpEntry{analogFir.channel[51].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[52].rFir.m", DumpEntry{analogFir.channel[52].rFir.m});
        res.insert_or_assign("analogFir.channel[52].rFir.n", DumpEntry{analogFir.channel[52].rFir.n});
        res.insert_or_assign("analogFir.channel[52].rFir.s", DumpEntry{analogFir.channel[52].rFir.s});
        res.insert_or_assign("analogFir.channel[52].rFir.r", DumpEntry{analogFir.channel[52].rFir.r});
        res.insert_or_assign("analogFir.channel[52].rFir.tSc", DumpEntry{analogFir.channel[52].rFir.tSc});
        res.insert_or_assign("analogFir.channel[52].rFir.phase", DumpEntry{analogFir.channel[52].rFir.phase});
        res.insert_or_assign("analogFir.channel[52].vFir.m", DumpEntry{analogFir.channel[52].vFir.m});
        res.insert_or_assign("analogFir.channel[52].vFir.n", DumpEntry{analogFir.channel[52].vFir.n});
        res.insert_or_assign("analogFir.channel[52].vFir.s", DumpEntry{analogFir.channel[52].vFir.s});
        res.insert_or_assign("analogFir.channel[52].vFir.r", DumpEntry{analogFir.channel[52].vFir.r});
        res.insert_or_assign("analogFir.channel[52].vFir.tSc", DumpEntry{analogFir.channel[52].vFir.tSc});
        res.insert_or_assign("analogFir.channel[52].vFir.phase", DumpEntry{analogFir.channel[52].vFir.phase});
        res.insert_or_assign("analogFir.channel[52].mmFir.m", DumpEntry{analogFir.channel[52].mmFir.m});
        res.insert_or_assign("analogFir.channel[52].mmFir.n", DumpEntry{analogFir.channel[52].mmFir.n});
        res.insert_or_assign("analogFir.channel[52].mmFir.s", DumpEntry{analogFir.channel[52].mmFir.s});
        res.insert_or_assign("analogFir.channel[52].mmFir.r", DumpEntry{analogFir.channel[52].mmFir.r});
        res.insert_or_assign("analogFir.channel[52].mmFir.tSc", DumpEntry{analogFir.channel[52].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[52].mmFir.phase", DumpEntry{analogFir.channel[52].mmFir.phase});
        res.insert_or_assign("analogFir.channel[52].limit.maxLimit", DumpEntry{analogFir.channel[52].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[52].limit.minLimit", DumpEntry{analogFir.channel[52].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[52].limit.filterLength", DumpEntry{analogFir.channel[52].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[53].rFir.m", DumpEntry{analogFir.channel[53].rFir.m});
        res.insert_or_assign("analogFir.channel[53].rFir.n", DumpEntry{analogFir.channel[53].rFir.n});
        res.insert_or_assign("analogFir.channel[53].rFir.s", DumpEntry{analogFir.channel[53].rFir.s});
        res.insert_or_assign("analogFir.channel[53].rFir.r", DumpEntry{analogFir.channel[53].rFir.r});
        res.insert_or_assign("analogFir.channel[53].rFir.tSc", DumpEntry{analogFir.channel[53].rFir.tSc});
        res.insert_or_assign("analogFir.channel[53].rFir.phase", DumpEntry{analogFir.channel[53].rFir.phase});
        res.insert_or_assign("analogFir.channel[53].vFir.m", DumpEntry{analogFir.channel[53].vFir.m});
        res.insert_or_assign("analogFir.channel[53].vFir.n", DumpEntry{analogFir.channel[53].vFir.n});
        res.insert_or_assign("analogFir.channel[53].vFir.s", DumpEntry{analogFir.channel[53].vFir.s});
        res.insert_or_assign("analogFir.channel[53].vFir.r", DumpEntry{analogFir.channel[53].vFir.r});
        res.insert_or_assign("analogFir.channel[53].vFir.tSc", DumpEntry{analogFir.channel[53].vFir.tSc});
        res.insert_or_assign("analogFir.channel[53].vFir.phase", DumpEntry{analogFir.channel[53].vFir.phase});
        res.insert_or_assign("analogFir.channel[53].mmFir.m", DumpEntry{analogFir.channel[53].mmFir.m});
        res.insert_or_assign("analogFir.channel[53].mmFir.n", DumpEntry{analogFir.channel[53].mmFir.n});
        res.insert_or_assign("analogFir.channel[53].mmFir.s", DumpEntry{analogFir.channel[53].mmFir.s});
        res.insert_or_assign("analogFir.channel[53].mmFir.r", DumpEntry{analogFir.channel[53].mmFir.r});
        res.insert_or_assign("analogFir.channel[53].mmFir.tSc", DumpEntry{analogFir.channel[53].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[53].mmFir.phase", DumpEntry{analogFir.channel[53].mmFir.phase});
        res.insert_or_assign("analogFir.channel[53].limit.maxLimit", DumpEntry{analogFir.channel[53].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[53].limit.minLimit", DumpEntry{analogFir.channel[53].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[53].limit.filterLength", DumpEntry{analogFir.channel[53].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[54].rFir.m", DumpEntry{analogFir.channel[54].rFir.m});
        res.insert_or_assign("analogFir.channel[54].rFir.n", DumpEntry{analogFir.channel[54].rFir.n});
        res.insert_or_assign("analogFir.channel[54].rFir.s", DumpEntry{analogFir.channel[54].rFir.s});
        res.insert_or_assign("analogFir.channel[54].rFir.r", DumpEntry{analogFir.channel[54].rFir.r});
        res.insert_or_assign("analogFir.channel[54].rFir.tSc", DumpEntry{analogFir.channel[54].rFir.tSc});
        res.insert_or_assign("analogFir.channel[54].rFir.phase", DumpEntry{analogFir.channel[54].rFir.phase});
        res.insert_or_assign("analogFir.channel[54].vFir.m", DumpEntry{analogFir.channel[54].vFir.m});
        res.insert_or_assign("analogFir.channel[54].vFir.n", DumpEntry{analogFir.channel[54].vFir.n});
        res.insert_or_assign("analogFir.channel[54].vFir.s", DumpEntry{analogFir.channel[54].vFir.s});
        res.insert_or_assign("analogFir.channel[54].vFir.r", DumpEntry{analogFir.channel[54].vFir.r});
        res.insert_or_assign("analogFir.channel[54].vFir.tSc", DumpEntry{analogFir.channel[54].vFir.tSc});
        res.insert_or_assign("analogFir.channel[54].vFir.phase", DumpEntry{analogFir.channel[54].vFir.phase});
        res.insert_or_assign("analogFir.channel[54].mmFir.m", DumpEntry{analogFir.channel[54].mmFir.m});
        res.insert_or_assign("analogFir.channel[54].mmFir.n", DumpEntry{analogFir.channel[54].mmFir.n});
        res.insert_or_assign("analogFir.channel[54].mmFir.s", DumpEntry{analogFir.channel[54].mmFir.s});
        res.insert_or_assign("analogFir.channel[54].mmFir.r", DumpEntry{analogFir.channel[54].mmFir.r});
        res.insert_or_assign("analogFir.channel[54].mmFir.tSc", DumpEntry{analogFir.channel[54].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[54].mmFir.phase", DumpEntry{analogFir.channel[54].mmFir.phase});
        res.insert_or_assign("analogFir.channel[54].limit.maxLimit", DumpEntry{analogFir.channel[54].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[54].limit.minLimit", DumpEntry{analogFir.channel[54].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[54].limit.filterLength", DumpEntry{analogFir.channel[54].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[55].rFir.m", DumpEntry{analogFir.channel[55].rFir.m});
        res.insert_or_assign("analogFir.channel[55].rFir.n", DumpEntry{analogFir.channel[55].rFir.n});
        res.insert_or_assign("analogFir.channel[55].rFir.s", DumpEntry{analogFir.channel[55].rFir.s});
        res.insert_or_assign("analogFir.channel[55].rFir.r", DumpEntry{analogFir.channel[55].rFir.r});
        res.insert_or_assign("analogFir.channel[55].rFir.tSc", DumpEntry{analogFir.channel[55].rFir.tSc});
        res.insert_or_assign("analogFir.channel[55].rFir.phase", DumpEntry{analogFir.channel[55].rFir.phase});
        res.insert_or_assign("analogFir.channel[55].vFir.m", DumpEntry{analogFir.channel[55].vFir.m});
        res.insert_or_assign("analogFir.channel[55].vFir.n", DumpEntry{analogFir.channel[55].vFir.n});
        res.insert_or_assign("analogFir.channel[55].vFir.s", DumpEntry{analogFir.channel[55].vFir.s});
        res.insert_or_assign("analogFir.channel[55].vFir.r", DumpEntry{analogFir.channel[55].vFir.r});
        res.insert_or_assign("analogFir.channel[55].vFir.tSc", DumpEntry{analogFir.channel[55].vFir.tSc});
        res.insert_or_assign("analogFir.channel[55].vFir.phase", DumpEntry{analogFir.channel[55].vFir.phase});
        res.insert_or_assign("analogFir.channel[55].mmFir.m", DumpEntry{analogFir.channel[55].mmFir.m});
        res.insert_or_assign("analogFir.channel[55].mmFir.n", DumpEntry{analogFir.channel[55].mmFir.n});
        res.insert_or_assign("analogFir.channel[55].mmFir.s", DumpEntry{analogFir.channel[55].mmFir.s});
        res.insert_or_assign("analogFir.channel[55].mmFir.r", DumpEntry{analogFir.channel[55].mmFir.r});
        res.insert_or_assign("analogFir.channel[55].mmFir.tSc", DumpEntry{analogFir.channel[55].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[55].mmFir.phase", DumpEntry{analogFir.channel[55].mmFir.phase});
        res.insert_or_assign("analogFir.channel[55].limit.maxLimit", DumpEntry{analogFir.channel[55].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[55].limit.minLimit", DumpEntry{analogFir.channel[55].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[55].limit.filterLength", DumpEntry{analogFir.channel[55].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[56].rFir.m", DumpEntry{analogFir.channel[56].rFir.m});
        res.insert_or_assign("analogFir.channel[56].rFir.n", DumpEntry{analogFir.channel[56].rFir.n});
        res.insert_or_assign("analogFir.channel[56].rFir.s", DumpEntry{analogFir.channel[56].rFir.s});
        res.insert_or_assign("analogFir.channel[56].rFir.r", DumpEntry{analogFir.channel[56].rFir.r});
        res.insert_or_assign("analogFir.channel[56].rFir.tSc", DumpEntry{analogFir.channel[56].rFir.tSc});
        res.insert_or_assign("analogFir.channel[56].rFir.phase", DumpEntry{analogFir.channel[56].rFir.phase});
        res.insert_or_assign("analogFir.channel[56].vFir.m", DumpEntry{analogFir.channel[56].vFir.m});
        res.insert_or_assign("analogFir.channel[56].vFir.n", DumpEntry{analogFir.channel[56].vFir.n});
        res.insert_or_assign("analogFir.channel[56].vFir.s", DumpEntry{analogFir.channel[56].vFir.s});
        res.insert_or_assign("analogFir.channel[56].vFir.r", DumpEntry{analogFir.channel[56].vFir.r});
        res.insert_or_assign("analogFir.channel[56].vFir.tSc", DumpEntry{analogFir.channel[56].vFir.tSc});
        res.insert_or_assign("analogFir.channel[56].vFir.phase", DumpEntry{analogFir.channel[56].vFir.phase});
        res.insert_or_assign("analogFir.channel[56].mmFir.m", DumpEntry{analogFir.channel[56].mmFir.m});
        res.insert_or_assign("analogFir.channel[56].mmFir.n", DumpEntry{analogFir.channel[56].mmFir.n});
        res.insert_or_assign("analogFir.channel[56].mmFir.s", DumpEntry{analogFir.channel[56].mmFir.s});
        res.insert_or_assign("analogFir.channel[56].mmFir.r", DumpEntry{analogFir.channel[56].mmFir.r});
        res.insert_or_assign("analogFir.channel[56].mmFir.tSc", DumpEntry{analogFir.channel[56].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[56].mmFir.phase", DumpEntry{analogFir.channel[56].mmFir.phase});
        res.insert_or_assign("analogFir.channel[56].limit.maxLimit", DumpEntry{analogFir.channel[56].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[56].limit.minLimit", DumpEntry{analogFir.channel[56].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[56].limit.filterLength", DumpEntry{analogFir.channel[56].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[57].rFir.m", DumpEntry{analogFir.channel[57].rFir.m});
        res.insert_or_assign("analogFir.channel[57].rFir.n", DumpEntry{analogFir.channel[57].rFir.n});
        res.insert_or_assign("analogFir.channel[57].rFir.s", DumpEntry{analogFir.channel[57].rFir.s});
        res.insert_or_assign("analogFir.channel[57].rFir.r", DumpEntry{analogFir.channel[57].rFir.r});
        res.insert_or_assign("analogFir.channel[57].rFir.tSc", DumpEntry{analogFir.channel[57].rFir.tSc});
        res.insert_or_assign("analogFir.channel[57].rFir.phase", DumpEntry{analogFir.channel[57].rFir.phase});
        res.insert_or_assign("analogFir.channel[57].vFir.m", DumpEntry{analogFir.channel[57].vFir.m});
        res.insert_or_assign("analogFir.channel[57].vFir.n", DumpEntry{analogFir.channel[57].vFir.n});
        res.insert_or_assign("analogFir.channel[57].vFir.s", DumpEntry{analogFir.channel[57].vFir.s});
        res.insert_or_assign("analogFir.channel[57].vFir.r", DumpEntry{analogFir.channel[57].vFir.r});
        res.insert_or_assign("analogFir.channel[57].vFir.tSc", DumpEntry{analogFir.channel[57].vFir.tSc});
        res.insert_or_assign("analogFir.channel[57].vFir.phase", DumpEntry{analogFir.channel[57].vFir.phase});
        res.insert_or_assign("analogFir.channel[57].mmFir.m", DumpEntry{analogFir.channel[57].mmFir.m});
        res.insert_or_assign("analogFir.channel[57].mmFir.n", DumpEntry{analogFir.channel[57].mmFir.n});
        res.insert_or_assign("analogFir.channel[57].mmFir.s", DumpEntry{analogFir.channel[57].mmFir.s});
        res.insert_or_assign("analogFir.channel[57].mmFir.r", DumpEntry{analogFir.channel[57].mmFir.r});
        res.insert_or_assign("analogFir.channel[57].mmFir.tSc", DumpEntry{analogFir.channel[57].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[57].mmFir.phase", DumpEntry{analogFir.channel[57].mmFir.phase});
        res.insert_or_assign("analogFir.channel[57].limit.maxLimit", DumpEntry{analogFir.channel[57].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[57].limit.minLimit", DumpEntry{analogFir.channel[57].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[57].limit.filterLength", DumpEntry{analogFir.channel[57].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[58].rFir.m", DumpEntry{analogFir.channel[58].rFir.m});
        res.insert_or_assign("analogFir.channel[58].rFir.n", DumpEntry{analogFir.channel[58].rFir.n});
        res.insert_or_assign("analogFir.channel[58].rFir.s", DumpEntry{analogFir.channel[58].rFir.s});
        res.insert_or_assign("analogFir.channel[58].rFir.r", DumpEntry{analogFir.channel[58].rFir.r});
        res.insert_or_assign("analogFir.channel[58].rFir.tSc", DumpEntry{analogFir.channel[58].rFir.tSc});
        res.insert_or_assign("analogFir.channel[58].rFir.phase", DumpEntry{analogFir.channel[58].rFir.phase});
        res.insert_or_assign("analogFir.channel[58].vFir.m", DumpEntry{analogFir.channel[58].vFir.m});
        res.insert_or_assign("analogFir.channel[58].vFir.n", DumpEntry{analogFir.channel[58].vFir.n});
        res.insert_or_assign("analogFir.channel[58].vFir.s", DumpEntry{analogFir.channel[58].vFir.s});
        res.insert_or_assign("analogFir.channel[58].vFir.r", DumpEntry{analogFir.channel[58].vFir.r});
        res.insert_or_assign("analogFir.channel[58].vFir.tSc", DumpEntry{analogFir.channel[58].vFir.tSc});
        res.insert_or_assign("analogFir.channel[58].vFir.phase", DumpEntry{analogFir.channel[58].vFir.phase});
        res.insert_or_assign("analogFir.channel[58].mmFir.m", DumpEntry{analogFir.channel[58].mmFir.m});
        res.insert_or_assign("analogFir.channel[58].mmFir.n", DumpEntry{analogFir.channel[58].mmFir.n});
        res.insert_or_assign("analogFir.channel[58].mmFir.s", DumpEntry{analogFir.channel[58].mmFir.s});
        res.insert_or_assign("analogFir.channel[58].mmFir.r", DumpEntry{analogFir.channel[58].mmFir.r});
        res.insert_or_assign("analogFir.channel[58].mmFir.tSc", DumpEntry{analogFir.channel[58].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[58].mmFir.phase", DumpEntry{analogFir.channel[58].mmFir.phase});
        res.insert_or_assign("analogFir.channel[58].limit.maxLimit", DumpEntry{analogFir.channel[58].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[58].limit.minLimit", DumpEntry{analogFir.channel[58].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[58].limit.filterLength", DumpEntry{analogFir.channel[58].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[59].rFir.m", DumpEntry{analogFir.channel[59].rFir.m});
        res.insert_or_assign("analogFir.channel[59].rFir.n", DumpEntry{analogFir.channel[59].rFir.n});
        res.insert_or_assign("analogFir.channel[59].rFir.s", DumpEntry{analogFir.channel[59].rFir.s});
        res.insert_or_assign("analogFir.channel[59].rFir.r", DumpEntry{analogFir.channel[59].rFir.r});
        res.insert_or_assign("analogFir.channel[59].rFir.tSc", DumpEntry{analogFir.channel[59].rFir.tSc});
        res.insert_or_assign("analogFir.channel[59].rFir.phase", DumpEntry{analogFir.channel[59].rFir.phase});
        res.insert_or_assign("analogFir.channel[59].vFir.m", DumpEntry{analogFir.channel[59].vFir.m});
        res.insert_or_assign("analogFir.channel[59].vFir.n", DumpEntry{analogFir.channel[59].vFir.n});
        res.insert_or_assign("analogFir.channel[59].vFir.s", DumpEntry{analogFir.channel[59].vFir.s});
        res.insert_or_assign("analogFir.channel[59].vFir.r", DumpEntry{analogFir.channel[59].vFir.r});
        res.insert_or_assign("analogFir.channel[59].vFir.tSc", DumpEntry{analogFir.channel[59].vFir.tSc});
        res.insert_or_assign("analogFir.channel[59].vFir.phase", DumpEntry{analogFir.channel[59].vFir.phase});
        res.insert_or_assign("analogFir.channel[59].mmFir.m", DumpEntry{analogFir.channel[59].mmFir.m});
        res.insert_or_assign("analogFir.channel[59].mmFir.n", DumpEntry{analogFir.channel[59].mmFir.n});
        res.insert_or_assign("analogFir.channel[59].mmFir.s", DumpEntry{analogFir.channel[59].mmFir.s});
        res.insert_or_assign("analogFir.channel[59].mmFir.r", DumpEntry{analogFir.channel[59].mmFir.r});
        res.insert_or_assign("analogFir.channel[59].mmFir.tSc", DumpEntry{analogFir.channel[59].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[59].mmFir.phase", DumpEntry{analogFir.channel[59].mmFir.phase});
        res.insert_or_assign("analogFir.channel[59].limit.maxLimit", DumpEntry{analogFir.channel[59].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[59].limit.minLimit", DumpEntry{analogFir.channel[59].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[59].limit.filterLength", DumpEntry{analogFir.channel[59].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[60].rFir.m", DumpEntry{analogFir.channel[60].rFir.m});
        res.insert_or_assign("analogFir.channel[60].rFir.n", DumpEntry{analogFir.channel[60].rFir.n});
        res.insert_or_assign("analogFir.channel[60].rFir.s", DumpEntry{analogFir.channel[60].rFir.s});
        res.insert_or_assign("analogFir.channel[60].rFir.r", DumpEntry{analogFir.channel[60].rFir.r});
        res.insert_or_assign("analogFir.channel[60].rFir.tSc", DumpEntry{analogFir.channel[60].rFir.tSc});
        res.insert_or_assign("analogFir.channel[60].rFir.phase", DumpEntry{analogFir.channel[60].rFir.phase});
        res.insert_or_assign("analogFir.channel[60].vFir.m", DumpEntry{analogFir.channel[60].vFir.m});
        res.insert_or_assign("analogFir.channel[60].vFir.n", DumpEntry{analogFir.channel[60].vFir.n});
        res.insert_or_assign("analogFir.channel[60].vFir.s", DumpEntry{analogFir.channel[60].vFir.s});
        res.insert_or_assign("analogFir.channel[60].vFir.r", DumpEntry{analogFir.channel[60].vFir.r});
        res.insert_or_assign("analogFir.channel[60].vFir.tSc", DumpEntry{analogFir.channel[60].vFir.tSc});
        res.insert_or_assign("analogFir.channel[60].vFir.phase", DumpEntry{analogFir.channel[60].vFir.phase});
        res.insert_or_assign("analogFir.channel[60].mmFir.m", DumpEntry{analogFir.channel[60].mmFir.m});
        res.insert_or_assign("analogFir.channel[60].mmFir.n", DumpEntry{analogFir.channel[60].mmFir.n});
        res.insert_or_assign("analogFir.channel[60].mmFir.s", DumpEntry{analogFir.channel[60].mmFir.s});
        res.insert_or_assign("analogFir.channel[60].mmFir.r", DumpEntry{analogFir.channel[60].mmFir.r});
        res.insert_or_assign("analogFir.channel[60].mmFir.tSc", DumpEntry{analogFir.channel[60].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[60].mmFir.phase", DumpEntry{analogFir.channel[60].mmFir.phase});
        res.insert_or_assign("analogFir.channel[60].limit.maxLimit", DumpEntry{analogFir.channel[60].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[60].limit.minLimit", DumpEntry{analogFir.channel[60].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[60].limit.filterLength", DumpEntry{analogFir.channel[60].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[61].rFir.m", DumpEntry{analogFir.channel[61].rFir.m});
        res.insert_or_assign("analogFir.channel[61].rFir.n", DumpEntry{analogFir.channel[61].rFir.n});
        res.insert_or_assign("analogFir.channel[61].rFir.s", DumpEntry{analogFir.channel[61].rFir.s});
        res.insert_or_assign("analogFir.channel[61].rFir.r", DumpEntry{analogFir.channel[61].rFir.r});
        res.insert_or_assign("analogFir.channel[61].rFir.tSc", DumpEntry{analogFir.channel[61].rFir.tSc});
        res.insert_or_assign("analogFir.channel[61].rFir.phase", DumpEntry{analogFir.channel[61].rFir.phase});
        res.insert_or_assign("analogFir.channel[61].vFir.m", DumpEntry{analogFir.channel[61].vFir.m});
        res.insert_or_assign("analogFir.channel[61].vFir.n", DumpEntry{analogFir.channel[61].vFir.n});
        res.insert_or_assign("analogFir.channel[61].vFir.s", DumpEntry{analogFir.channel[61].vFir.s});
        res.insert_or_assign("analogFir.channel[61].vFir.r", DumpEntry{analogFir.channel[61].vFir.r});
        res.insert_or_assign("analogFir.channel[61].vFir.tSc", DumpEntry{analogFir.channel[61].vFir.tSc});
        res.insert_or_assign("analogFir.channel[61].vFir.phase", DumpEntry{analogFir.channel[61].vFir.phase});
        res.insert_or_assign("analogFir.channel[61].mmFir.m", DumpEntry{analogFir.channel[61].mmFir.m});
        res.insert_or_assign("analogFir.channel[61].mmFir.n", DumpEntry{analogFir.channel[61].mmFir.n});
        res.insert_or_assign("analogFir.channel[61].mmFir.s", DumpEntry{analogFir.channel[61].mmFir.s});
        res.insert_or_assign("analogFir.channel[61].mmFir.r", DumpEntry{analogFir.channel[61].mmFir.r});
        res.insert_or_assign("analogFir.channel[61].mmFir.tSc", DumpEntry{analogFir.channel[61].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[61].mmFir.phase", DumpEntry{analogFir.channel[61].mmFir.phase});
        res.insert_or_assign("analogFir.channel[61].limit.maxLimit", DumpEntry{analogFir.channel[61].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[61].limit.minLimit", DumpEntry{analogFir.channel[61].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[61].limit.filterLength", DumpEntry{analogFir.channel[61].limit.filterLength}
        );
        res.insert_or_assign("analogFir.mmTrip", DumpEntry{analogFir.mmTrip});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogMs::ChannelArrayItem::Ms`
    //!
    //! @param ms A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ms
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogMs::ChannelArrayItem::Ms& ms)
    {
        DumpMap res{ms.base()};
        res.insert_or_assign("ms.algorithms", DumpEntry{ms.algorithms});
        res.insert_or_assign("ms.algorithms.alg", DumpEntry{ms.algorithms.alg});
        res.insert_or_assign("ms.offset", DumpEntry{ms.offset});
        res.insert_or_assign("ms.iirA", DumpEntry{ms.iirA});
        res.insert_or_assign("ms.iirB", DumpEntry{ms.iirB});
        res.insert_or_assign("ms.maxLimit", DumpEntry{ms.maxLimit});
        res.insert_or_assign("ms.minLimit", DumpEntry{ms.minLimit});
        res.insert_or_assign("ms.accLength", DumpEntry{ms.accLength});
        res.insert_or_assign("ms.firMask", DumpEntry{ms.firMask});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogMs::ChannelArray`
    //!
    //! @param channel A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under channel
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogMs::ChannelArray& channel)
    {
        DumpMap res{channel.base()};
        res.insert_or_assign("channel[0].ms.algorithms", DumpEntry{channel[0].ms.algorithms});
        res.insert_or_assign("channel[0].ms.algorithms.alg", DumpEntry{channel[0].ms.algorithms.alg});
        res.insert_or_assign("channel[0].ms.offset", DumpEntry{channel[0].ms.offset});
        res.insert_or_assign("channel[0].ms.iirA", DumpEntry{channel[0].ms.iirA});
        res.insert_or_assign("channel[0].ms.iirB", DumpEntry{channel[0].ms.iirB});
        res.insert_or_assign("channel[0].ms.maxLimit", DumpEntry{channel[0].ms.maxLimit});
        res.insert_or_assign("channel[0].ms.minLimit", DumpEntry{channel[0].ms.minLimit});
        res.insert_or_assign("channel[0].ms.accLength", DumpEntry{channel[0].ms.accLength});
        res.insert_or_assign("channel[0].ms.firMask", DumpEntry{channel[0].ms.firMask});
        res.insert_or_assign("channel[1].ms.algorithms", DumpEntry{channel[1].ms.algorithms});
        res.insert_or_assign("channel[1].ms.algorithms.alg", DumpEntry{channel[1].ms.algorithms.alg});
        res.insert_or_assign("channel[1].ms.offset", DumpEntry{channel[1].ms.offset});
        res.insert_or_assign("channel[1].ms.iirA", DumpEntry{channel[1].ms.iirA});
        res.insert_or_assign("channel[1].ms.iirB", DumpEntry{channel[1].ms.iirB});
        res.insert_or_assign("channel[1].ms.maxLimit", DumpEntry{channel[1].ms.maxLimit});
        res.insert_or_assign("channel[1].ms.minLimit", DumpEntry{channel[1].ms.minLimit});
        res.insert_or_assign("channel[1].ms.accLength", DumpEntry{channel[1].ms.accLength});
        res.insert_or_assign("channel[1].ms.firMask", DumpEntry{channel[1].ms.firMask});
        res.insert_or_assign("channel[2].ms.algorithms", DumpEntry{channel[2].ms.algorithms});
        res.insert_or_assign("channel[2].ms.algorithms.alg", DumpEntry{channel[2].ms.algorithms.alg});
        res.insert_or_assign("channel[2].ms.offset", DumpEntry{channel[2].ms.offset});
        res.insert_or_assign("channel[2].ms.iirA", DumpEntry{channel[2].ms.iirA});
        res.insert_or_assign("channel[2].ms.iirB", DumpEntry{channel[2].ms.iirB});
        res.insert_or_assign("channel[2].ms.maxLimit", DumpEntry{channel[2].ms.maxLimit});
        res.insert_or_assign("channel[2].ms.minLimit", DumpEntry{channel[2].ms.minLimit});
        res.insert_or_assign("channel[2].ms.accLength", DumpEntry{channel[2].ms.accLength});
        res.insert_or_assign("channel[2].ms.firMask", DumpEntry{channel[2].ms.firMask});
        res.insert_or_assign("channel[3].ms.algorithms", DumpEntry{channel[3].ms.algorithms});
        res.insert_or_assign("channel[3].ms.algorithms.alg", DumpEntry{channel[3].ms.algorithms.alg});
        res.insert_or_assign("channel[3].ms.offset", DumpEntry{channel[3].ms.offset});
        res.insert_or_assign("channel[3].ms.iirA", DumpEntry{channel[3].ms.iirA});
        res.insert_or_assign("channel[3].ms.iirB", DumpEntry{channel[3].ms.iirB});
        res.insert_or_assign("channel[3].ms.maxLimit", DumpEntry{channel[3].ms.maxLimit});
        res.insert_or_assign("channel[3].ms.minLimit", DumpEntry{channel[3].ms.minLimit});
        res.insert_or_assign("channel[3].ms.accLength", DumpEntry{channel[3].ms.accLength});
        res.insert_or_assign("channel[3].ms.firMask", DumpEntry{channel[3].ms.firMask});
        res.insert_or_assign("channel[4].ms.algorithms", DumpEntry{channel[4].ms.algorithms});
        res.insert_or_assign("channel[4].ms.algorithms.alg", DumpEntry{channel[4].ms.algorithms.alg});
        res.insert_or_assign("channel[4].ms.offset", DumpEntry{channel[4].ms.offset});
        res.insert_or_assign("channel[4].ms.iirA", DumpEntry{channel[4].ms.iirA});
        res.insert_or_assign("channel[4].ms.iirB", DumpEntry{channel[4].ms.iirB});
        res.insert_or_assign("channel[4].ms.maxLimit", DumpEntry{channel[4].ms.maxLimit});
        res.insert_or_assign("channel[4].ms.minLimit", DumpEntry{channel[4].ms.minLimit});
        res.insert_or_assign("channel[4].ms.accLength", DumpEntry{channel[4].ms.accLength});
        res.insert_or_assign("channel[4].ms.firMask", DumpEntry{channel[4].ms.firMask});
        res.insert_or_assign("channel[5].ms.algorithms", DumpEntry{channel[5].ms.algorithms});
        res.insert_or_assign("channel[5].ms.algorithms.alg", DumpEntry{channel[5].ms.algorithms.alg});
        res.insert_or_assign("channel[5].ms.offset", DumpEntry{channel[5].ms.offset});
        res.insert_or_assign("channel[5].ms.iirA", DumpEntry{channel[5].ms.iirA});
        res.insert_or_assign("channel[5].ms.iirB", DumpEntry{channel[5].ms.iirB});
        res.insert_or_assign("channel[5].ms.maxLimit", DumpEntry{channel[5].ms.maxLimit});
        res.insert_or_assign("channel[5].ms.minLimit", DumpEntry{channel[5].ms.minLimit});
        res.insert_or_assign("channel[5].ms.accLength", DumpEntry{channel[5].ms.accLength});
        res.insert_or_assign("channel[5].ms.firMask", DumpEntry{channel[5].ms.firMask});
        res.insert_or_assign("channel[6].ms.algorithms", DumpEntry{channel[6].ms.algorithms});
        res.insert_or_assign("channel[6].ms.algorithms.alg", DumpEntry{channel[6].ms.algorithms.alg});
        res.insert_or_assign("channel[6].ms.offset", DumpEntry{channel[6].ms.offset});
        res.insert_or_assign("channel[6].ms.iirA", DumpEntry{channel[6].ms.iirA});
        res.insert_or_assign("channel[6].ms.iirB", DumpEntry{channel[6].ms.iirB});
        res.insert_or_assign("channel[6].ms.maxLimit", DumpEntry{channel[6].ms.maxLimit});
        res.insert_or_assign("channel[6].ms.minLimit", DumpEntry{channel[6].ms.minLimit});
        res.insert_or_assign("channel[6].ms.accLength", DumpEntry{channel[6].ms.accLength});
        res.insert_or_assign("channel[6].ms.firMask", DumpEntry{channel[6].ms.firMask});
        res.insert_or_assign("channel[7].ms.algorithms", DumpEntry{channel[7].ms.algorithms});
        res.insert_or_assign("channel[7].ms.algorithms.alg", DumpEntry{channel[7].ms.algorithms.alg});
        res.insert_or_assign("channel[7].ms.offset", DumpEntry{channel[7].ms.offset});
        res.insert_or_assign("channel[7].ms.iirA", DumpEntry{channel[7].ms.iirA});
        res.insert_or_assign("channel[7].ms.iirB", DumpEntry{channel[7].ms.iirB});
        res.insert_or_assign("channel[7].ms.maxLimit", DumpEntry{channel[7].ms.maxLimit});
        res.insert_or_assign("channel[7].ms.minLimit", DumpEntry{channel[7].ms.minLimit});
        res.insert_or_assign("channel[7].ms.accLength", DumpEntry{channel[7].ms.accLength});
        res.insert_or_assign("channel[7].ms.firMask", DumpEntry{channel[7].ms.firMask});
        res.insert_or_assign("channel[8].ms.algorithms", DumpEntry{channel[8].ms.algorithms});
        res.insert_or_assign("channel[8].ms.algorithms.alg", DumpEntry{channel[8].ms.algorithms.alg});
        res.insert_or_assign("channel[8].ms.offset", DumpEntry{channel[8].ms.offset});
        res.insert_or_assign("channel[8].ms.iirA", DumpEntry{channel[8].ms.iirA});
        res.insert_or_assign("channel[8].ms.iirB", DumpEntry{channel[8].ms.iirB});
        res.insert_or_assign("channel[8].ms.maxLimit", DumpEntry{channel[8].ms.maxLimit});
        res.insert_or_assign("channel[8].ms.minLimit", DumpEntry{channel[8].ms.minLimit});
        res.insert_or_assign("channel[8].ms.accLength", DumpEntry{channel[8].ms.accLength});
        res.insert_or_assign("channel[8].ms.firMask", DumpEntry{channel[8].ms.firMask});
        res.insert_or_assign("channel[9].ms.algorithms", DumpEntry{channel[9].ms.algorithms});
        res.insert_or_assign("channel[9].ms.algorithms.alg", DumpEntry{channel[9].ms.algorithms.alg});
        res.insert_or_assign("channel[9].ms.offset", DumpEntry{channel[9].ms.offset});
        res.insert_or_assign("channel[9].ms.iirA", DumpEntry{channel[9].ms.iirA});
        res.insert_or_assign("channel[9].ms.iirB", DumpEntry{channel[9].ms.iirB});
        res.insert_or_assign("channel[9].ms.maxLimit", DumpEntry{channel[9].ms.maxLimit});
        res.insert_or_assign("channel[9].ms.minLimit", DumpEntry{channel[9].ms.minLimit});
        res.insert_or_assign("channel[9].ms.accLength", DumpEntry{channel[9].ms.accLength});
        res.insert_or_assign("channel[9].ms.firMask", DumpEntry{channel[9].ms.firMask});
        res.insert_or_assign("channel[10].ms.algorithms", DumpEntry{channel[10].ms.algorithms});
        res.insert_or_assign("channel[10].ms.algorithms.alg", DumpEntry{channel[10].ms.algorithms.alg});
        res.insert_or_assign("channel[10].ms.offset", DumpEntry{channel[10].ms.offset});
        res.insert_or_assign("channel[10].ms.iirA", DumpEntry{channel[10].ms.iirA});
        res.insert_or_assign("channel[10].ms.iirB", DumpEntry{channel[10].ms.iirB});
        res.insert_or_assign("channel[10].ms.maxLimit", DumpEntry{channel[10].ms.maxLimit});
        res.insert_or_assign("channel[10].ms.minLimit", DumpEntry{channel[10].ms.minLimit});
        res.insert_or_assign("channel[10].ms.accLength", DumpEntry{channel[10].ms.accLength});
        res.insert_or_assign("channel[10].ms.firMask", DumpEntry{channel[10].ms.firMask});
        res.insert_or_assign("channel[11].ms.algorithms", DumpEntry{channel[11].ms.algorithms});
        res.insert_or_assign("channel[11].ms.algorithms.alg", DumpEntry{channel[11].ms.algorithms.alg});
        res.insert_or_assign("channel[11].ms.offset", DumpEntry{channel[11].ms.offset});
        res.insert_or_assign("channel[11].ms.iirA", DumpEntry{channel[11].ms.iirA});
        res.insert_or_assign("channel[11].ms.iirB", DumpEntry{channel[11].ms.iirB});
        res.insert_or_assign("channel[11].ms.maxLimit", DumpEntry{channel[11].ms.maxLimit});
        res.insert_or_assign("channel[11].ms.minLimit", DumpEntry{channel[11].ms.minLimit});
        res.insert_or_assign("channel[11].ms.accLength", DumpEntry{channel[11].ms.accLength});
        res.insert_or_assign("channel[11].ms.firMask", DumpEntry{channel[11].ms.firMask});
        res.insert_or_assign("channel[12].ms.algorithms", DumpEntry{channel[12].ms.algorithms});
        res.insert_or_assign("channel[12].ms.algorithms.alg", DumpEntry{channel[12].ms.algorithms.alg});
        res.insert_or_assign("channel[12].ms.offset", DumpEntry{channel[12].ms.offset});
        res.insert_or_assign("channel[12].ms.iirA", DumpEntry{channel[12].ms.iirA});
        res.insert_or_assign("channel[12].ms.iirB", DumpEntry{channel[12].ms.iirB});
        res.insert_or_assign("channel[12].ms.maxLimit", DumpEntry{channel[12].ms.maxLimit});
        res.insert_or_assign("channel[12].ms.minLimit", DumpEntry{channel[12].ms.minLimit});
        res.insert_or_assign("channel[12].ms.accLength", DumpEntry{channel[12].ms.accLength});
        res.insert_or_assign("channel[12].ms.firMask", DumpEntry{channel[12].ms.firMask});
        res.insert_or_assign("channel[13].ms.algorithms", DumpEntry{channel[13].ms.algorithms});
        res.insert_or_assign("channel[13].ms.algorithms.alg", DumpEntry{channel[13].ms.algorithms.alg});
        res.insert_or_assign("channel[13].ms.offset", DumpEntry{channel[13].ms.offset});
        res.insert_or_assign("channel[13].ms.iirA", DumpEntry{channel[13].ms.iirA});
        res.insert_or_assign("channel[13].ms.iirB", DumpEntry{channel[13].ms.iirB});
        res.insert_or_assign("channel[13].ms.maxLimit", DumpEntry{channel[13].ms.maxLimit});
        res.insert_or_assign("channel[13].ms.minLimit", DumpEntry{channel[13].ms.minLimit});
        res.insert_or_assign("channel[13].ms.accLength", DumpEntry{channel[13].ms.accLength});
        res.insert_or_assign("channel[13].ms.firMask", DumpEntry{channel[13].ms.firMask});
        res.insert_or_assign("channel[14].ms.algorithms", DumpEntry{channel[14].ms.algorithms});
        res.insert_or_assign("channel[14].ms.algorithms.alg", DumpEntry{channel[14].ms.algorithms.alg});
        res.insert_or_assign("channel[14].ms.offset", DumpEntry{channel[14].ms.offset});
        res.insert_or_assign("channel[14].ms.iirA", DumpEntry{channel[14].ms.iirA});
        res.insert_or_assign("channel[14].ms.iirB", DumpEntry{channel[14].ms.iirB});
        res.insert_or_assign("channel[14].ms.maxLimit", DumpEntry{channel[14].ms.maxLimit});
        res.insert_or_assign("channel[14].ms.minLimit", DumpEntry{channel[14].ms.minLimit});
        res.insert_or_assign("channel[14].ms.accLength", DumpEntry{channel[14].ms.accLength});
        res.insert_or_assign("channel[14].ms.firMask", DumpEntry{channel[14].ms.firMask});
        res.insert_or_assign("channel[15].ms.algorithms", DumpEntry{channel[15].ms.algorithms});
        res.insert_or_assign("channel[15].ms.algorithms.alg", DumpEntry{channel[15].ms.algorithms.alg});
        res.insert_or_assign("channel[15].ms.offset", DumpEntry{channel[15].ms.offset});
        res.insert_or_assign("channel[15].ms.iirA", DumpEntry{channel[15].ms.iirA});
        res.insert_or_assign("channel[15].ms.iirB", DumpEntry{channel[15].ms.iirB});
        res.insert_or_assign("channel[15].ms.maxLimit", DumpEntry{channel[15].ms.maxLimit});
        res.insert_or_assign("channel[15].ms.minLimit", DumpEntry{channel[15].ms.minLimit});
        res.insert_or_assign("channel[15].ms.accLength", DumpEntry{channel[15].ms.accLength});
        res.insert_or_assign("channel[15].ms.firMask", DumpEntry{channel[15].ms.firMask});
        res.insert_or_assign("channel[16].ms.algorithms", DumpEntry{channel[16].ms.algorithms});
        res.insert_or_assign("channel[16].ms.algorithms.alg", DumpEntry{channel[16].ms.algorithms.alg});
        res.insert_or_assign("channel[16].ms.offset", DumpEntry{channel[16].ms.offset});
        res.insert_or_assign("channel[16].ms.iirA", DumpEntry{channel[16].ms.iirA});
        res.insert_or_assign("channel[16].ms.iirB", DumpEntry{channel[16].ms.iirB});
        res.insert_or_assign("channel[16].ms.maxLimit", DumpEntry{channel[16].ms.maxLimit});
        res.insert_or_assign("channel[16].ms.minLimit", DumpEntry{channel[16].ms.minLimit});
        res.insert_or_assign("channel[16].ms.accLength", DumpEntry{channel[16].ms.accLength});
        res.insert_or_assign("channel[16].ms.firMask", DumpEntry{channel[16].ms.firMask});
        res.insert_or_assign("channel[17].ms.algorithms", DumpEntry{channel[17].ms.algorithms});
        res.insert_or_assign("channel[17].ms.algorithms.alg", DumpEntry{channel[17].ms.algorithms.alg});
        res.insert_or_assign("channel[17].ms.offset", DumpEntry{channel[17].ms.offset});
        res.insert_or_assign("channel[17].ms.iirA", DumpEntry{channel[17].ms.iirA});
        res.insert_or_assign("channel[17].ms.iirB", DumpEntry{channel[17].ms.iirB});
        res.insert_or_assign("channel[17].ms.maxLimit", DumpEntry{channel[17].ms.maxLimit});
        res.insert_or_assign("channel[17].ms.minLimit", DumpEntry{channel[17].ms.minLimit});
        res.insert_or_assign("channel[17].ms.accLength", DumpEntry{channel[17].ms.accLength});
        res.insert_or_assign("channel[17].ms.firMask", DumpEntry{channel[17].ms.firMask});
        res.insert_or_assign("channel[18].ms.algorithms", DumpEntry{channel[18].ms.algorithms});
        res.insert_or_assign("channel[18].ms.algorithms.alg", DumpEntry{channel[18].ms.algorithms.alg});
        res.insert_or_assign("channel[18].ms.offset", DumpEntry{channel[18].ms.offset});
        res.insert_or_assign("channel[18].ms.iirA", DumpEntry{channel[18].ms.iirA});
        res.insert_or_assign("channel[18].ms.iirB", DumpEntry{channel[18].ms.iirB});
        res.insert_or_assign("channel[18].ms.maxLimit", DumpEntry{channel[18].ms.maxLimit});
        res.insert_or_assign("channel[18].ms.minLimit", DumpEntry{channel[18].ms.minLimit});
        res.insert_or_assign("channel[18].ms.accLength", DumpEntry{channel[18].ms.accLength});
        res.insert_or_assign("channel[18].ms.firMask", DumpEntry{channel[18].ms.firMask});
        res.insert_or_assign("channel[19].ms.algorithms", DumpEntry{channel[19].ms.algorithms});
        res.insert_or_assign("channel[19].ms.algorithms.alg", DumpEntry{channel[19].ms.algorithms.alg});
        res.insert_or_assign("channel[19].ms.offset", DumpEntry{channel[19].ms.offset});
        res.insert_or_assign("channel[19].ms.iirA", DumpEntry{channel[19].ms.iirA});
        res.insert_or_assign("channel[19].ms.iirB", DumpEntry{channel[19].ms.iirB});
        res.insert_or_assign("channel[19].ms.maxLimit", DumpEntry{channel[19].ms.maxLimit});
        res.insert_or_assign("channel[19].ms.minLimit", DumpEntry{channel[19].ms.minLimit});
        res.insert_or_assign("channel[19].ms.accLength", DumpEntry{channel[19].ms.accLength});
        res.insert_or_assign("channel[19].ms.firMask", DumpEntry{channel[19].ms.firMask});
        res.insert_or_assign("channel[20].ms.algorithms", DumpEntry{channel[20].ms.algorithms});
        res.insert_or_assign("channel[20].ms.algorithms.alg", DumpEntry{channel[20].ms.algorithms.alg});
        res.insert_or_assign("channel[20].ms.offset", DumpEntry{channel[20].ms.offset});
        res.insert_or_assign("channel[20].ms.iirA", DumpEntry{channel[20].ms.iirA});
        res.insert_or_assign("channel[20].ms.iirB", DumpEntry{channel[20].ms.iirB});
        res.insert_or_assign("channel[20].ms.maxLimit", DumpEntry{channel[20].ms.maxLimit});
        res.insert_or_assign("channel[20].ms.minLimit", DumpEntry{channel[20].ms.minLimit});
        res.insert_or_assign("channel[20].ms.accLength", DumpEntry{channel[20].ms.accLength});
        res.insert_or_assign("channel[20].ms.firMask", DumpEntry{channel[20].ms.firMask});
        res.insert_or_assign("channel[21].ms.algorithms", DumpEntry{channel[21].ms.algorithms});
        res.insert_or_assign("channel[21].ms.algorithms.alg", DumpEntry{channel[21].ms.algorithms.alg});
        res.insert_or_assign("channel[21].ms.offset", DumpEntry{channel[21].ms.offset});
        res.insert_or_assign("channel[21].ms.iirA", DumpEntry{channel[21].ms.iirA});
        res.insert_or_assign("channel[21].ms.iirB", DumpEntry{channel[21].ms.iirB});
        res.insert_or_assign("channel[21].ms.maxLimit", DumpEntry{channel[21].ms.maxLimit});
        res.insert_or_assign("channel[21].ms.minLimit", DumpEntry{channel[21].ms.minLimit});
        res.insert_or_assign("channel[21].ms.accLength", DumpEntry{channel[21].ms.accLength});
        res.insert_or_assign("channel[21].ms.firMask", DumpEntry{channel[21].ms.firMask});
        res.insert_or_assign("channel[22].ms.algorithms", DumpEntry{channel[22].ms.algorithms});
        res.insert_or_assign("channel[22].ms.algorithms.alg", DumpEntry{channel[22].ms.algorithms.alg});
        res.insert_or_assign("channel[22].ms.offset", DumpEntry{channel[22].ms.offset});
        res.insert_or_assign("channel[22].ms.iirA", DumpEntry{channel[22].ms.iirA});
        res.insert_or_assign("channel[22].ms.iirB", DumpEntry{channel[22].ms.iirB});
        res.insert_or_assign("channel[22].ms.maxLimit", DumpEntry{channel[22].ms.maxLimit});
        res.insert_or_assign("channel[22].ms.minLimit", DumpEntry{channel[22].ms.minLimit});
        res.insert_or_assign("channel[22].ms.accLength", DumpEntry{channel[22].ms.accLength});
        res.insert_or_assign("channel[22].ms.firMask", DumpEntry{channel[22].ms.firMask});
        res.insert_or_assign("channel[23].ms.algorithms", DumpEntry{channel[23].ms.algorithms});
        res.insert_or_assign("channel[23].ms.algorithms.alg", DumpEntry{channel[23].ms.algorithms.alg});
        res.insert_or_assign("channel[23].ms.offset", DumpEntry{channel[23].ms.offset});
        res.insert_or_assign("channel[23].ms.iirA", DumpEntry{channel[23].ms.iirA});
        res.insert_or_assign("channel[23].ms.iirB", DumpEntry{channel[23].ms.iirB});
        res.insert_or_assign("channel[23].ms.maxLimit", DumpEntry{channel[23].ms.maxLimit});
        res.insert_or_assign("channel[23].ms.minLimit", DumpEntry{channel[23].ms.minLimit});
        res.insert_or_assign("channel[23].ms.accLength", DumpEntry{channel[23].ms.accLength});
        res.insert_or_assign("channel[23].ms.firMask", DumpEntry{channel[23].ms.firMask});
        res.insert_or_assign("channel[24].ms.algorithms", DumpEntry{channel[24].ms.algorithms});
        res.insert_or_assign("channel[24].ms.algorithms.alg", DumpEntry{channel[24].ms.algorithms.alg});
        res.insert_or_assign("channel[24].ms.offset", DumpEntry{channel[24].ms.offset});
        res.insert_or_assign("channel[24].ms.iirA", DumpEntry{channel[24].ms.iirA});
        res.insert_or_assign("channel[24].ms.iirB", DumpEntry{channel[24].ms.iirB});
        res.insert_or_assign("channel[24].ms.maxLimit", DumpEntry{channel[24].ms.maxLimit});
        res.insert_or_assign("channel[24].ms.minLimit", DumpEntry{channel[24].ms.minLimit});
        res.insert_or_assign("channel[24].ms.accLength", DumpEntry{channel[24].ms.accLength});
        res.insert_or_assign("channel[24].ms.firMask", DumpEntry{channel[24].ms.firMask});
        res.insert_or_assign("channel[25].ms.algorithms", DumpEntry{channel[25].ms.algorithms});
        res.insert_or_assign("channel[25].ms.algorithms.alg", DumpEntry{channel[25].ms.algorithms.alg});
        res.insert_or_assign("channel[25].ms.offset", DumpEntry{channel[25].ms.offset});
        res.insert_or_assign("channel[25].ms.iirA", DumpEntry{channel[25].ms.iirA});
        res.insert_or_assign("channel[25].ms.iirB", DumpEntry{channel[25].ms.iirB});
        res.insert_or_assign("channel[25].ms.maxLimit", DumpEntry{channel[25].ms.maxLimit});
        res.insert_or_assign("channel[25].ms.minLimit", DumpEntry{channel[25].ms.minLimit});
        res.insert_or_assign("channel[25].ms.accLength", DumpEntry{channel[25].ms.accLength});
        res.insert_or_assign("channel[25].ms.firMask", DumpEntry{channel[25].ms.firMask});
        res.insert_or_assign("channel[26].ms.algorithms", DumpEntry{channel[26].ms.algorithms});
        res.insert_or_assign("channel[26].ms.algorithms.alg", DumpEntry{channel[26].ms.algorithms.alg});
        res.insert_or_assign("channel[26].ms.offset", DumpEntry{channel[26].ms.offset});
        res.insert_or_assign("channel[26].ms.iirA", DumpEntry{channel[26].ms.iirA});
        res.insert_or_assign("channel[26].ms.iirB", DumpEntry{channel[26].ms.iirB});
        res.insert_or_assign("channel[26].ms.maxLimit", DumpEntry{channel[26].ms.maxLimit});
        res.insert_or_assign("channel[26].ms.minLimit", DumpEntry{channel[26].ms.minLimit});
        res.insert_or_assign("channel[26].ms.accLength", DumpEntry{channel[26].ms.accLength});
        res.insert_or_assign("channel[26].ms.firMask", DumpEntry{channel[26].ms.firMask});
        res.insert_or_assign("channel[27].ms.algorithms", DumpEntry{channel[27].ms.algorithms});
        res.insert_or_assign("channel[27].ms.algorithms.alg", DumpEntry{channel[27].ms.algorithms.alg});
        res.insert_or_assign("channel[27].ms.offset", DumpEntry{channel[27].ms.offset});
        res.insert_or_assign("channel[27].ms.iirA", DumpEntry{channel[27].ms.iirA});
        res.insert_or_assign("channel[27].ms.iirB", DumpEntry{channel[27].ms.iirB});
        res.insert_or_assign("channel[27].ms.maxLimit", DumpEntry{channel[27].ms.maxLimit});
        res.insert_or_assign("channel[27].ms.minLimit", DumpEntry{channel[27].ms.minLimit});
        res.insert_or_assign("channel[27].ms.accLength", DumpEntry{channel[27].ms.accLength});
        res.insert_or_assign("channel[27].ms.firMask", DumpEntry{channel[27].ms.firMask});
        res.insert_or_assign("channel[28].ms.algorithms", DumpEntry{channel[28].ms.algorithms});
        res.insert_or_assign("channel[28].ms.algorithms.alg", DumpEntry{channel[28].ms.algorithms.alg});
        res.insert_or_assign("channel[28].ms.offset", DumpEntry{channel[28].ms.offset});
        res.insert_or_assign("channel[28].ms.iirA", DumpEntry{channel[28].ms.iirA});
        res.insert_or_assign("channel[28].ms.iirB", DumpEntry{channel[28].ms.iirB});
        res.insert_or_assign("channel[28].ms.maxLimit", DumpEntry{channel[28].ms.maxLimit});
        res.insert_or_assign("channel[28].ms.minLimit", DumpEntry{channel[28].ms.minLimit});
        res.insert_or_assign("channel[28].ms.accLength", DumpEntry{channel[28].ms.accLength});
        res.insert_or_assign("channel[28].ms.firMask", DumpEntry{channel[28].ms.firMask});
        res.insert_or_assign("channel[29].ms.algorithms", DumpEntry{channel[29].ms.algorithms});
        res.insert_or_assign("channel[29].ms.algorithms.alg", DumpEntry{channel[29].ms.algorithms.alg});
        res.insert_or_assign("channel[29].ms.offset", DumpEntry{channel[29].ms.offset});
        res.insert_or_assign("channel[29].ms.iirA", DumpEntry{channel[29].ms.iirA});
        res.insert_or_assign("channel[29].ms.iirB", DumpEntry{channel[29].ms.iirB});
        res.insert_or_assign("channel[29].ms.maxLimit", DumpEntry{channel[29].ms.maxLimit});
        res.insert_or_assign("channel[29].ms.minLimit", DumpEntry{channel[29].ms.minLimit});
        res.insert_or_assign("channel[29].ms.accLength", DumpEntry{channel[29].ms.accLength});
        res.insert_or_assign("channel[29].ms.firMask", DumpEntry{channel[29].ms.firMask});
        res.insert_or_assign("channel[30].ms.algorithms", DumpEntry{channel[30].ms.algorithms});
        res.insert_or_assign("channel[30].ms.algorithms.alg", DumpEntry{channel[30].ms.algorithms.alg});
        res.insert_or_assign("channel[30].ms.offset", DumpEntry{channel[30].ms.offset});
        res.insert_or_assign("channel[30].ms.iirA", DumpEntry{channel[30].ms.iirA});
        res.insert_or_assign("channel[30].ms.iirB", DumpEntry{channel[30].ms.iirB});
        res.insert_or_assign("channel[30].ms.maxLimit", DumpEntry{channel[30].ms.maxLimit});
        res.insert_or_assign("channel[30].ms.minLimit", DumpEntry{channel[30].ms.minLimit});
        res.insert_or_assign("channel[30].ms.accLength", DumpEntry{channel[30].ms.accLength});
        res.insert_or_assign("channel[30].ms.firMask", DumpEntry{channel[30].ms.firMask});
        res.insert_or_assign("channel[31].ms.algorithms", DumpEntry{channel[31].ms.algorithms});
        res.insert_or_assign("channel[31].ms.algorithms.alg", DumpEntry{channel[31].ms.algorithms.alg});
        res.insert_or_assign("channel[31].ms.offset", DumpEntry{channel[31].ms.offset});
        res.insert_or_assign("channel[31].ms.iirA", DumpEntry{channel[31].ms.iirA});
        res.insert_or_assign("channel[31].ms.iirB", DumpEntry{channel[31].ms.iirB});
        res.insert_or_assign("channel[31].ms.maxLimit", DumpEntry{channel[31].ms.maxLimit});
        res.insert_or_assign("channel[31].ms.minLimit", DumpEntry{channel[31].ms.minLimit});
        res.insert_or_assign("channel[31].ms.accLength", DumpEntry{channel[31].ms.accLength});
        res.insert_or_assign("channel[31].ms.firMask", DumpEntry{channel[31].ms.firMask});
        res.insert_or_assign("channel[32].ms.algorithms", DumpEntry{channel[32].ms.algorithms});
        res.insert_or_assign("channel[32].ms.algorithms.alg", DumpEntry{channel[32].ms.algorithms.alg});
        res.insert_or_assign("channel[32].ms.offset", DumpEntry{channel[32].ms.offset});
        res.insert_or_assign("channel[32].ms.iirA", DumpEntry{channel[32].ms.iirA});
        res.insert_or_assign("channel[32].ms.iirB", DumpEntry{channel[32].ms.iirB});
        res.insert_or_assign("channel[32].ms.maxLimit", DumpEntry{channel[32].ms.maxLimit});
        res.insert_or_assign("channel[32].ms.minLimit", DumpEntry{channel[32].ms.minLimit});
        res.insert_or_assign("channel[32].ms.accLength", DumpEntry{channel[32].ms.accLength});
        res.insert_or_assign("channel[32].ms.firMask", DumpEntry{channel[32].ms.firMask});
        res.insert_or_assign("channel[33].ms.algorithms", DumpEntry{channel[33].ms.algorithms});
        res.insert_or_assign("channel[33].ms.algorithms.alg", DumpEntry{channel[33].ms.algorithms.alg});
        res.insert_or_assign("channel[33].ms.offset", DumpEntry{channel[33].ms.offset});
        res.insert_or_assign("channel[33].ms.iirA", DumpEntry{channel[33].ms.iirA});
        res.insert_or_assign("channel[33].ms.iirB", DumpEntry{channel[33].ms.iirB});
        res.insert_or_assign("channel[33].ms.maxLimit", DumpEntry{channel[33].ms.maxLimit});
        res.insert_or_assign("channel[33].ms.minLimit", DumpEntry{channel[33].ms.minLimit});
        res.insert_or_assign("channel[33].ms.accLength", DumpEntry{channel[33].ms.accLength});
        res.insert_or_assign("channel[33].ms.firMask", DumpEntry{channel[33].ms.firMask});
        res.insert_or_assign("channel[34].ms.algorithms", DumpEntry{channel[34].ms.algorithms});
        res.insert_or_assign("channel[34].ms.algorithms.alg", DumpEntry{channel[34].ms.algorithms.alg});
        res.insert_or_assign("channel[34].ms.offset", DumpEntry{channel[34].ms.offset});
        res.insert_or_assign("channel[34].ms.iirA", DumpEntry{channel[34].ms.iirA});
        res.insert_or_assign("channel[34].ms.iirB", DumpEntry{channel[34].ms.iirB});
        res.insert_or_assign("channel[34].ms.maxLimit", DumpEntry{channel[34].ms.maxLimit});
        res.insert_or_assign("channel[34].ms.minLimit", DumpEntry{channel[34].ms.minLimit});
        res.insert_or_assign("channel[34].ms.accLength", DumpEntry{channel[34].ms.accLength});
        res.insert_or_assign("channel[34].ms.firMask", DumpEntry{channel[34].ms.firMask});
        res.insert_or_assign("channel[35].ms.algorithms", DumpEntry{channel[35].ms.algorithms});
        res.insert_or_assign("channel[35].ms.algorithms.alg", DumpEntry{channel[35].ms.algorithms.alg});
        res.insert_or_assign("channel[35].ms.offset", DumpEntry{channel[35].ms.offset});
        res.insert_or_assign("channel[35].ms.iirA", DumpEntry{channel[35].ms.iirA});
        res.insert_or_assign("channel[35].ms.iirB", DumpEntry{channel[35].ms.iirB});
        res.insert_or_assign("channel[35].ms.maxLimit", DumpEntry{channel[35].ms.maxLimit});
        res.insert_or_assign("channel[35].ms.minLimit", DumpEntry{channel[35].ms.minLimit});
        res.insert_or_assign("channel[35].ms.accLength", DumpEntry{channel[35].ms.accLength});
        res.insert_or_assign("channel[35].ms.firMask", DumpEntry{channel[35].ms.firMask});
        res.insert_or_assign("channel[36].ms.algorithms", DumpEntry{channel[36].ms.algorithms});
        res.insert_or_assign("channel[36].ms.algorithms.alg", DumpEntry{channel[36].ms.algorithms.alg});
        res.insert_or_assign("channel[36].ms.offset", DumpEntry{channel[36].ms.offset});
        res.insert_or_assign("channel[36].ms.iirA", DumpEntry{channel[36].ms.iirA});
        res.insert_or_assign("channel[36].ms.iirB", DumpEntry{channel[36].ms.iirB});
        res.insert_or_assign("channel[36].ms.maxLimit", DumpEntry{channel[36].ms.maxLimit});
        res.insert_or_assign("channel[36].ms.minLimit", DumpEntry{channel[36].ms.minLimit});
        res.insert_or_assign("channel[36].ms.accLength", DumpEntry{channel[36].ms.accLength});
        res.insert_or_assign("channel[36].ms.firMask", DumpEntry{channel[36].ms.firMask});
        res.insert_or_assign("channel[37].ms.algorithms", DumpEntry{channel[37].ms.algorithms});
        res.insert_or_assign("channel[37].ms.algorithms.alg", DumpEntry{channel[37].ms.algorithms.alg});
        res.insert_or_assign("channel[37].ms.offset", DumpEntry{channel[37].ms.offset});
        res.insert_or_assign("channel[37].ms.iirA", DumpEntry{channel[37].ms.iirA});
        res.insert_or_assign("channel[37].ms.iirB", DumpEntry{channel[37].ms.iirB});
        res.insert_or_assign("channel[37].ms.maxLimit", DumpEntry{channel[37].ms.maxLimit});
        res.insert_or_assign("channel[37].ms.minLimit", DumpEntry{channel[37].ms.minLimit});
        res.insert_or_assign("channel[37].ms.accLength", DumpEntry{channel[37].ms.accLength});
        res.insert_or_assign("channel[37].ms.firMask", DumpEntry{channel[37].ms.firMask});
        res.insert_or_assign("channel[38].ms.algorithms", DumpEntry{channel[38].ms.algorithms});
        res.insert_or_assign("channel[38].ms.algorithms.alg", DumpEntry{channel[38].ms.algorithms.alg});
        res.insert_or_assign("channel[38].ms.offset", DumpEntry{channel[38].ms.offset});
        res.insert_or_assign("channel[38].ms.iirA", DumpEntry{channel[38].ms.iirA});
        res.insert_or_assign("channel[38].ms.iirB", DumpEntry{channel[38].ms.iirB});
        res.insert_or_assign("channel[38].ms.maxLimit", DumpEntry{channel[38].ms.maxLimit});
        res.insert_or_assign("channel[38].ms.minLimit", DumpEntry{channel[38].ms.minLimit});
        res.insert_or_assign("channel[38].ms.accLength", DumpEntry{channel[38].ms.accLength});
        res.insert_or_assign("channel[38].ms.firMask", DumpEntry{channel[38].ms.firMask});
        res.insert_or_assign("channel[39].ms.algorithms", DumpEntry{channel[39].ms.algorithms});
        res.insert_or_assign("channel[39].ms.algorithms.alg", DumpEntry{channel[39].ms.algorithms.alg});
        res.insert_or_assign("channel[39].ms.offset", DumpEntry{channel[39].ms.offset});
        res.insert_or_assign("channel[39].ms.iirA", DumpEntry{channel[39].ms.iirA});
        res.insert_or_assign("channel[39].ms.iirB", DumpEntry{channel[39].ms.iirB});
        res.insert_or_assign("channel[39].ms.maxLimit", DumpEntry{channel[39].ms.maxLimit});
        res.insert_or_assign("channel[39].ms.minLimit", DumpEntry{channel[39].ms.minLimit});
        res.insert_or_assign("channel[39].ms.accLength", DumpEntry{channel[39].ms.accLength});
        res.insert_or_assign("channel[39].ms.firMask", DumpEntry{channel[39].ms.firMask});
        res.insert_or_assign("channel[40].ms.algorithms", DumpEntry{channel[40].ms.algorithms});
        res.insert_or_assign("channel[40].ms.algorithms.alg", DumpEntry{channel[40].ms.algorithms.alg});
        res.insert_or_assign("channel[40].ms.offset", DumpEntry{channel[40].ms.offset});
        res.insert_or_assign("channel[40].ms.iirA", DumpEntry{channel[40].ms.iirA});
        res.insert_or_assign("channel[40].ms.iirB", DumpEntry{channel[40].ms.iirB});
        res.insert_or_assign("channel[40].ms.maxLimit", DumpEntry{channel[40].ms.maxLimit});
        res.insert_or_assign("channel[40].ms.minLimit", DumpEntry{channel[40].ms.minLimit});
        res.insert_or_assign("channel[40].ms.accLength", DumpEntry{channel[40].ms.accLength});
        res.insert_or_assign("channel[40].ms.firMask", DumpEntry{channel[40].ms.firMask});
        res.insert_or_assign("channel[41].ms.algorithms", DumpEntry{channel[41].ms.algorithms});
        res.insert_or_assign("channel[41].ms.algorithms.alg", DumpEntry{channel[41].ms.algorithms.alg});
        res.insert_or_assign("channel[41].ms.offset", DumpEntry{channel[41].ms.offset});
        res.insert_or_assign("channel[41].ms.iirA", DumpEntry{channel[41].ms.iirA});
        res.insert_or_assign("channel[41].ms.iirB", DumpEntry{channel[41].ms.iirB});
        res.insert_or_assign("channel[41].ms.maxLimit", DumpEntry{channel[41].ms.maxLimit});
        res.insert_or_assign("channel[41].ms.minLimit", DumpEntry{channel[41].ms.minLimit});
        res.insert_or_assign("channel[41].ms.accLength", DumpEntry{channel[41].ms.accLength});
        res.insert_or_assign("channel[41].ms.firMask", DumpEntry{channel[41].ms.firMask});
        res.insert_or_assign("channel[42].ms.algorithms", DumpEntry{channel[42].ms.algorithms});
        res.insert_or_assign("channel[42].ms.algorithms.alg", DumpEntry{channel[42].ms.algorithms.alg});
        res.insert_or_assign("channel[42].ms.offset", DumpEntry{channel[42].ms.offset});
        res.insert_or_assign("channel[42].ms.iirA", DumpEntry{channel[42].ms.iirA});
        res.insert_or_assign("channel[42].ms.iirB", DumpEntry{channel[42].ms.iirB});
        res.insert_or_assign("channel[42].ms.maxLimit", DumpEntry{channel[42].ms.maxLimit});
        res.insert_or_assign("channel[42].ms.minLimit", DumpEntry{channel[42].ms.minLimit});
        res.insert_or_assign("channel[42].ms.accLength", DumpEntry{channel[42].ms.accLength});
        res.insert_or_assign("channel[42].ms.firMask", DumpEntry{channel[42].ms.firMask});
        res.insert_or_assign("channel[43].ms.algorithms", DumpEntry{channel[43].ms.algorithms});
        res.insert_or_assign("channel[43].ms.algorithms.alg", DumpEntry{channel[43].ms.algorithms.alg});
        res.insert_or_assign("channel[43].ms.offset", DumpEntry{channel[43].ms.offset});
        res.insert_or_assign("channel[43].ms.iirA", DumpEntry{channel[43].ms.iirA});
        res.insert_or_assign("channel[43].ms.iirB", DumpEntry{channel[43].ms.iirB});
        res.insert_or_assign("channel[43].ms.maxLimit", DumpEntry{channel[43].ms.maxLimit});
        res.insert_or_assign("channel[43].ms.minLimit", DumpEntry{channel[43].ms.minLimit});
        res.insert_or_assign("channel[43].ms.accLength", DumpEntry{channel[43].ms.accLength});
        res.insert_or_assign("channel[43].ms.firMask", DumpEntry{channel[43].ms.firMask});
        res.insert_or_assign("channel[44].ms.algorithms", DumpEntry{channel[44].ms.algorithms});
        res.insert_or_assign("channel[44].ms.algorithms.alg", DumpEntry{channel[44].ms.algorithms.alg});
        res.insert_or_assign("channel[44].ms.offset", DumpEntry{channel[44].ms.offset});
        res.insert_or_assign("channel[44].ms.iirA", DumpEntry{channel[44].ms.iirA});
        res.insert_or_assign("channel[44].ms.iirB", DumpEntry{channel[44].ms.iirB});
        res.insert_or_assign("channel[44].ms.maxLimit", DumpEntry{channel[44].ms.maxLimit});
        res.insert_or_assign("channel[44].ms.minLimit", DumpEntry{channel[44].ms.minLimit});
        res.insert_or_assign("channel[44].ms.accLength", DumpEntry{channel[44].ms.accLength});
        res.insert_or_assign("channel[44].ms.firMask", DumpEntry{channel[44].ms.firMask});
        res.insert_or_assign("channel[45].ms.algorithms", DumpEntry{channel[45].ms.algorithms});
        res.insert_or_assign("channel[45].ms.algorithms.alg", DumpEntry{channel[45].ms.algorithms.alg});
        res.insert_or_assign("channel[45].ms.offset", DumpEntry{channel[45].ms.offset});
        res.insert_or_assign("channel[45].ms.iirA", DumpEntry{channel[45].ms.iirA});
        res.insert_or_assign("channel[45].ms.iirB", DumpEntry{channel[45].ms.iirB});
        res.insert_or_assign("channel[45].ms.maxLimit", DumpEntry{channel[45].ms.maxLimit});
        res.insert_or_assign("channel[45].ms.minLimit", DumpEntry{channel[45].ms.minLimit});
        res.insert_or_assign("channel[45].ms.accLength", DumpEntry{channel[45].ms.accLength});
        res.insert_or_assign("channel[45].ms.firMask", DumpEntry{channel[45].ms.firMask});
        res.insert_or_assign("channel[46].ms.algorithms", DumpEntry{channel[46].ms.algorithms});
        res.insert_or_assign("channel[46].ms.algorithms.alg", DumpEntry{channel[46].ms.algorithms.alg});
        res.insert_or_assign("channel[46].ms.offset", DumpEntry{channel[46].ms.offset});
        res.insert_or_assign("channel[46].ms.iirA", DumpEntry{channel[46].ms.iirA});
        res.insert_or_assign("channel[46].ms.iirB", DumpEntry{channel[46].ms.iirB});
        res.insert_or_assign("channel[46].ms.maxLimit", DumpEntry{channel[46].ms.maxLimit});
        res.insert_or_assign("channel[46].ms.minLimit", DumpEntry{channel[46].ms.minLimit});
        res.insert_or_assign("channel[46].ms.accLength", DumpEntry{channel[46].ms.accLength});
        res.insert_or_assign("channel[46].ms.firMask", DumpEntry{channel[46].ms.firMask});
        res.insert_or_assign("channel[47].ms.algorithms", DumpEntry{channel[47].ms.algorithms});
        res.insert_or_assign("channel[47].ms.algorithms.alg", DumpEntry{channel[47].ms.algorithms.alg});
        res.insert_or_assign("channel[47].ms.offset", DumpEntry{channel[47].ms.offset});
        res.insert_or_assign("channel[47].ms.iirA", DumpEntry{channel[47].ms.iirA});
        res.insert_or_assign("channel[47].ms.iirB", DumpEntry{channel[47].ms.iirB});
        res.insert_or_assign("channel[47].ms.maxLimit", DumpEntry{channel[47].ms.maxLimit});
        res.insert_or_assign("channel[47].ms.minLimit", DumpEntry{channel[47].ms.minLimit});
        res.insert_or_assign("channel[47].ms.accLength", DumpEntry{channel[47].ms.accLength});
        res.insert_or_assign("channel[47].ms.firMask", DumpEntry{channel[47].ms.firMask});
        res.insert_or_assign("channel[48].ms.algorithms", DumpEntry{channel[48].ms.algorithms});
        res.insert_or_assign("channel[48].ms.algorithms.alg", DumpEntry{channel[48].ms.algorithms.alg});
        res.insert_or_assign("channel[48].ms.offset", DumpEntry{channel[48].ms.offset});
        res.insert_or_assign("channel[48].ms.iirA", DumpEntry{channel[48].ms.iirA});
        res.insert_or_assign("channel[48].ms.iirB", DumpEntry{channel[48].ms.iirB});
        res.insert_or_assign("channel[48].ms.maxLimit", DumpEntry{channel[48].ms.maxLimit});
        res.insert_or_assign("channel[48].ms.minLimit", DumpEntry{channel[48].ms.minLimit});
        res.insert_or_assign("channel[48].ms.accLength", DumpEntry{channel[48].ms.accLength});
        res.insert_or_assign("channel[48].ms.firMask", DumpEntry{channel[48].ms.firMask});
        res.insert_or_assign("channel[49].ms.algorithms", DumpEntry{channel[49].ms.algorithms});
        res.insert_or_assign("channel[49].ms.algorithms.alg", DumpEntry{channel[49].ms.algorithms.alg});
        res.insert_or_assign("channel[49].ms.offset", DumpEntry{channel[49].ms.offset});
        res.insert_or_assign("channel[49].ms.iirA", DumpEntry{channel[49].ms.iirA});
        res.insert_or_assign("channel[49].ms.iirB", DumpEntry{channel[49].ms.iirB});
        res.insert_or_assign("channel[49].ms.maxLimit", DumpEntry{channel[49].ms.maxLimit});
        res.insert_or_assign("channel[49].ms.minLimit", DumpEntry{channel[49].ms.minLimit});
        res.insert_or_assign("channel[49].ms.accLength", DumpEntry{channel[49].ms.accLength});
        res.insert_or_assign("channel[49].ms.firMask", DumpEntry{channel[49].ms.firMask});
        res.insert_or_assign("channel[50].ms.algorithms", DumpEntry{channel[50].ms.algorithms});
        res.insert_or_assign("channel[50].ms.algorithms.alg", DumpEntry{channel[50].ms.algorithms.alg});
        res.insert_or_assign("channel[50].ms.offset", DumpEntry{channel[50].ms.offset});
        res.insert_or_assign("channel[50].ms.iirA", DumpEntry{channel[50].ms.iirA});
        res.insert_or_assign("channel[50].ms.iirB", DumpEntry{channel[50].ms.iirB});
        res.insert_or_assign("channel[50].ms.maxLimit", DumpEntry{channel[50].ms.maxLimit});
        res.insert_or_assign("channel[50].ms.minLimit", DumpEntry{channel[50].ms.minLimit});
        res.insert_or_assign("channel[50].ms.accLength", DumpEntry{channel[50].ms.accLength});
        res.insert_or_assign("channel[50].ms.firMask", DumpEntry{channel[50].ms.firMask});
        res.insert_or_assign("channel[51].ms.algorithms", DumpEntry{channel[51].ms.algorithms});
        res.insert_or_assign("channel[51].ms.algorithms.alg", DumpEntry{channel[51].ms.algorithms.alg});
        res.insert_or_assign("channel[51].ms.offset", DumpEntry{channel[51].ms.offset});
        res.insert_or_assign("channel[51].ms.iirA", DumpEntry{channel[51].ms.iirA});
        res.insert_or_assign("channel[51].ms.iirB", DumpEntry{channel[51].ms.iirB});
        res.insert_or_assign("channel[51].ms.maxLimit", DumpEntry{channel[51].ms.maxLimit});
        res.insert_or_assign("channel[51].ms.minLimit", DumpEntry{channel[51].ms.minLimit});
        res.insert_or_assign("channel[51].ms.accLength", DumpEntry{channel[51].ms.accLength});
        res.insert_or_assign("channel[51].ms.firMask", DumpEntry{channel[51].ms.firMask});
        res.insert_or_assign("channel[52].ms.algorithms", DumpEntry{channel[52].ms.algorithms});
        res.insert_or_assign("channel[52].ms.algorithms.alg", DumpEntry{channel[52].ms.algorithms.alg});
        res.insert_or_assign("channel[52].ms.offset", DumpEntry{channel[52].ms.offset});
        res.insert_or_assign("channel[52].ms.iirA", DumpEntry{channel[52].ms.iirA});
        res.insert_or_assign("channel[52].ms.iirB", DumpEntry{channel[52].ms.iirB});
        res.insert_or_assign("channel[52].ms.maxLimit", DumpEntry{channel[52].ms.maxLimit});
        res.insert_or_assign("channel[52].ms.minLimit", DumpEntry{channel[52].ms.minLimit});
        res.insert_or_assign("channel[52].ms.accLength", DumpEntry{channel[52].ms.accLength});
        res.insert_or_assign("channel[52].ms.firMask", DumpEntry{channel[52].ms.firMask});
        res.insert_or_assign("channel[53].ms.algorithms", DumpEntry{channel[53].ms.algorithms});
        res.insert_or_assign("channel[53].ms.algorithms.alg", DumpEntry{channel[53].ms.algorithms.alg});
        res.insert_or_assign("channel[53].ms.offset", DumpEntry{channel[53].ms.offset});
        res.insert_or_assign("channel[53].ms.iirA", DumpEntry{channel[53].ms.iirA});
        res.insert_or_assign("channel[53].ms.iirB", DumpEntry{channel[53].ms.iirB});
        res.insert_or_assign("channel[53].ms.maxLimit", DumpEntry{channel[53].ms.maxLimit});
        res.insert_or_assign("channel[53].ms.minLimit", DumpEntry{channel[53].ms.minLimit});
        res.insert_or_assign("channel[53].ms.accLength", DumpEntry{channel[53].ms.accLength});
        res.insert_or_assign("channel[53].ms.firMask", DumpEntry{channel[53].ms.firMask});
        res.insert_or_assign("channel[54].ms.algorithms", DumpEntry{channel[54].ms.algorithms});
        res.insert_or_assign("channel[54].ms.algorithms.alg", DumpEntry{channel[54].ms.algorithms.alg});
        res.insert_or_assign("channel[54].ms.offset", DumpEntry{channel[54].ms.offset});
        res.insert_or_assign("channel[54].ms.iirA", DumpEntry{channel[54].ms.iirA});
        res.insert_or_assign("channel[54].ms.iirB", DumpEntry{channel[54].ms.iirB});
        res.insert_or_assign("channel[54].ms.maxLimit", DumpEntry{channel[54].ms.maxLimit});
        res.insert_or_assign("channel[54].ms.minLimit", DumpEntry{channel[54].ms.minLimit});
        res.insert_or_assign("channel[54].ms.accLength", DumpEntry{channel[54].ms.accLength});
        res.insert_or_assign("channel[54].ms.firMask", DumpEntry{channel[54].ms.firMask});
        res.insert_or_assign("channel[55].ms.algorithms", DumpEntry{channel[55].ms.algorithms});
        res.insert_or_assign("channel[55].ms.algorithms.alg", DumpEntry{channel[55].ms.algorithms.alg});
        res.insert_or_assign("channel[55].ms.offset", DumpEntry{channel[55].ms.offset});
        res.insert_or_assign("channel[55].ms.iirA", DumpEntry{channel[55].ms.iirA});
        res.insert_or_assign("channel[55].ms.iirB", DumpEntry{channel[55].ms.iirB});
        res.insert_or_assign("channel[55].ms.maxLimit", DumpEntry{channel[55].ms.maxLimit});
        res.insert_or_assign("channel[55].ms.minLimit", DumpEntry{channel[55].ms.minLimit});
        res.insert_or_assign("channel[55].ms.accLength", DumpEntry{channel[55].ms.accLength});
        res.insert_or_assign("channel[55].ms.firMask", DumpEntry{channel[55].ms.firMask});
        res.insert_or_assign("channel[56].ms.algorithms", DumpEntry{channel[56].ms.algorithms});
        res.insert_or_assign("channel[56].ms.algorithms.alg", DumpEntry{channel[56].ms.algorithms.alg});
        res.insert_or_assign("channel[56].ms.offset", DumpEntry{channel[56].ms.offset});
        res.insert_or_assign("channel[56].ms.iirA", DumpEntry{channel[56].ms.iirA});
        res.insert_or_assign("channel[56].ms.iirB", DumpEntry{channel[56].ms.iirB});
        res.insert_or_assign("channel[56].ms.maxLimit", DumpEntry{channel[56].ms.maxLimit});
        res.insert_or_assign("channel[56].ms.minLimit", DumpEntry{channel[56].ms.minLimit});
        res.insert_or_assign("channel[56].ms.accLength", DumpEntry{channel[56].ms.accLength});
        res.insert_or_assign("channel[56].ms.firMask", DumpEntry{channel[56].ms.firMask});
        res.insert_or_assign("channel[57].ms.algorithms", DumpEntry{channel[57].ms.algorithms});
        res.insert_or_assign("channel[57].ms.algorithms.alg", DumpEntry{channel[57].ms.algorithms.alg});
        res.insert_or_assign("channel[57].ms.offset", DumpEntry{channel[57].ms.offset});
        res.insert_or_assign("channel[57].ms.iirA", DumpEntry{channel[57].ms.iirA});
        res.insert_or_assign("channel[57].ms.iirB", DumpEntry{channel[57].ms.iirB});
        res.insert_or_assign("channel[57].ms.maxLimit", DumpEntry{channel[57].ms.maxLimit});
        res.insert_or_assign("channel[57].ms.minLimit", DumpEntry{channel[57].ms.minLimit});
        res.insert_or_assign("channel[57].ms.accLength", DumpEntry{channel[57].ms.accLength});
        res.insert_or_assign("channel[57].ms.firMask", DumpEntry{channel[57].ms.firMask});
        res.insert_or_assign("channel[58].ms.algorithms", DumpEntry{channel[58].ms.algorithms});
        res.insert_or_assign("channel[58].ms.algorithms.alg", DumpEntry{channel[58].ms.algorithms.alg});
        res.insert_or_assign("channel[58].ms.offset", DumpEntry{channel[58].ms.offset});
        res.insert_or_assign("channel[58].ms.iirA", DumpEntry{channel[58].ms.iirA});
        res.insert_or_assign("channel[58].ms.iirB", DumpEntry{channel[58].ms.iirB});
        res.insert_or_assign("channel[58].ms.maxLimit", DumpEntry{channel[58].ms.maxLimit});
        res.insert_or_assign("channel[58].ms.minLimit", DumpEntry{channel[58].ms.minLimit});
        res.insert_or_assign("channel[58].ms.accLength", DumpEntry{channel[58].ms.accLength});
        res.insert_or_assign("channel[58].ms.firMask", DumpEntry{channel[58].ms.firMask});
        res.insert_or_assign("channel[59].ms.algorithms", DumpEntry{channel[59].ms.algorithms});
        res.insert_or_assign("channel[59].ms.algorithms.alg", DumpEntry{channel[59].ms.algorithms.alg});
        res.insert_or_assign("channel[59].ms.offset", DumpEntry{channel[59].ms.offset});
        res.insert_or_assign("channel[59].ms.iirA", DumpEntry{channel[59].ms.iirA});
        res.insert_or_assign("channel[59].ms.iirB", DumpEntry{channel[59].ms.iirB});
        res.insert_or_assign("channel[59].ms.maxLimit", DumpEntry{channel[59].ms.maxLimit});
        res.insert_or_assign("channel[59].ms.minLimit", DumpEntry{channel[59].ms.minLimit});
        res.insert_or_assign("channel[59].ms.accLength", DumpEntry{channel[59].ms.accLength});
        res.insert_or_assign("channel[59].ms.firMask", DumpEntry{channel[59].ms.firMask});
        res.insert_or_assign("channel[60].ms.algorithms", DumpEntry{channel[60].ms.algorithms});
        res.insert_or_assign("channel[60].ms.algorithms.alg", DumpEntry{channel[60].ms.algorithms.alg});
        res.insert_or_assign("channel[60].ms.offset", DumpEntry{channel[60].ms.offset});
        res.insert_or_assign("channel[60].ms.iirA", DumpEntry{channel[60].ms.iirA});
        res.insert_or_assign("channel[60].ms.iirB", DumpEntry{channel[60].ms.iirB});
        res.insert_or_assign("channel[60].ms.maxLimit", DumpEntry{channel[60].ms.maxLimit});
        res.insert_or_assign("channel[60].ms.minLimit", DumpEntry{channel[60].ms.minLimit});
        res.insert_or_assign("channel[60].ms.accLength", DumpEntry{channel[60].ms.accLength});
        res.insert_or_assign("channel[60].ms.firMask", DumpEntry{channel[60].ms.firMask});
        res.insert_or_assign("channel[61].ms.algorithms", DumpEntry{channel[61].ms.algorithms});
        res.insert_or_assign("channel[61].ms.algorithms.alg", DumpEntry{channel[61].ms.algorithms.alg});
        res.insert_or_assign("channel[61].ms.offset", DumpEntry{channel[61].ms.offset});
        res.insert_or_assign("channel[61].ms.iirA", DumpEntry{channel[61].ms.iirA});
        res.insert_or_assign("channel[61].ms.iirB", DumpEntry{channel[61].ms.iirB});
        res.insert_or_assign("channel[61].ms.maxLimit", DumpEntry{channel[61].ms.maxLimit});
        res.insert_or_assign("channel[61].ms.minLimit", DumpEntry{channel[61].ms.minLimit});
        res.insert_or_assign("channel[61].ms.accLength", DumpEntry{channel[61].ms.accLength});
        res.insert_or_assign("channel[61].ms.firMask", DumpEntry{channel[61].ms.firMask});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::AnalogMs`
    //!
    //! @param analogMs A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under analogMs
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::AnalogMs& analogMs)
    {
        DumpMap res{analogMs.base()};
        res.insert_or_assign("analogMs.channel[0].ms.algorithms", DumpEntry{analogMs.channel[0].ms.algorithms});
        res.insert_or_assign("analogMs.channel[0].ms.algorithms.alg", DumpEntry{analogMs.channel[0].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[0].ms.offset", DumpEntry{analogMs.channel[0].ms.offset});
        res.insert_or_assign("analogMs.channel[0].ms.iirA", DumpEntry{analogMs.channel[0].ms.iirA});
        res.insert_or_assign("analogMs.channel[0].ms.iirB", DumpEntry{analogMs.channel[0].ms.iirB});
        res.insert_or_assign("analogMs.channel[0].ms.maxLimit", DumpEntry{analogMs.channel[0].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[0].ms.minLimit", DumpEntry{analogMs.channel[0].ms.minLimit});
        res.insert_or_assign("analogMs.channel[0].ms.accLength", DumpEntry{analogMs.channel[0].ms.accLength});
        res.insert_or_assign("analogMs.channel[0].ms.firMask", DumpEntry{analogMs.channel[0].ms.firMask});
        res.insert_or_assign("analogMs.channel[1].ms.algorithms", DumpEntry{analogMs.channel[1].ms.algorithms});
        res.insert_or_assign("analogMs.channel[1].ms.algorithms.alg", DumpEntry{analogMs.channel[1].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[1].ms.offset", DumpEntry{analogMs.channel[1].ms.offset});
        res.insert_or_assign("analogMs.channel[1].ms.iirA", DumpEntry{analogMs.channel[1].ms.iirA});
        res.insert_or_assign("analogMs.channel[1].ms.iirB", DumpEntry{analogMs.channel[1].ms.iirB});
        res.insert_or_assign("analogMs.channel[1].ms.maxLimit", DumpEntry{analogMs.channel[1].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[1].ms.minLimit", DumpEntry{analogMs.channel[1].ms.minLimit});
        res.insert_or_assign("analogMs.channel[1].ms.accLength", DumpEntry{analogMs.channel[1].ms.accLength});
        res.insert_or_assign("analogMs.channel[1].ms.firMask", DumpEntry{analogMs.channel[1].ms.firMask});
        res.insert_or_assign("analogMs.channel[2].ms.algorithms", DumpEntry{analogMs.channel[2].ms.algorithms});
        res.insert_or_assign("analogMs.channel[2].ms.algorithms.alg", DumpEntry{analogMs.channel[2].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[2].ms.offset", DumpEntry{analogMs.channel[2].ms.offset});
        res.insert_or_assign("analogMs.channel[2].ms.iirA", DumpEntry{analogMs.channel[2].ms.iirA});
        res.insert_or_assign("analogMs.channel[2].ms.iirB", DumpEntry{analogMs.channel[2].ms.iirB});
        res.insert_or_assign("analogMs.channel[2].ms.maxLimit", DumpEntry{analogMs.channel[2].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[2].ms.minLimit", DumpEntry{analogMs.channel[2].ms.minLimit});
        res.insert_or_assign("analogMs.channel[2].ms.accLength", DumpEntry{analogMs.channel[2].ms.accLength});
        res.insert_or_assign("analogMs.channel[2].ms.firMask", DumpEntry{analogMs.channel[2].ms.firMask});
        res.insert_or_assign("analogMs.channel[3].ms.algorithms", DumpEntry{analogMs.channel[3].ms.algorithms});
        res.insert_or_assign("analogMs.channel[3].ms.algorithms.alg", DumpEntry{analogMs.channel[3].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[3].ms.offset", DumpEntry{analogMs.channel[3].ms.offset});
        res.insert_or_assign("analogMs.channel[3].ms.iirA", DumpEntry{analogMs.channel[3].ms.iirA});
        res.insert_or_assign("analogMs.channel[3].ms.iirB", DumpEntry{analogMs.channel[3].ms.iirB});
        res.insert_or_assign("analogMs.channel[3].ms.maxLimit", DumpEntry{analogMs.channel[3].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[3].ms.minLimit", DumpEntry{analogMs.channel[3].ms.minLimit});
        res.insert_or_assign("analogMs.channel[3].ms.accLength", DumpEntry{analogMs.channel[3].ms.accLength});
        res.insert_or_assign("analogMs.channel[3].ms.firMask", DumpEntry{analogMs.channel[3].ms.firMask});
        res.insert_or_assign("analogMs.channel[4].ms.algorithms", DumpEntry{analogMs.channel[4].ms.algorithms});
        res.insert_or_assign("analogMs.channel[4].ms.algorithms.alg", DumpEntry{analogMs.channel[4].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[4].ms.offset", DumpEntry{analogMs.channel[4].ms.offset});
        res.insert_or_assign("analogMs.channel[4].ms.iirA", DumpEntry{analogMs.channel[4].ms.iirA});
        res.insert_or_assign("analogMs.channel[4].ms.iirB", DumpEntry{analogMs.channel[4].ms.iirB});
        res.insert_or_assign("analogMs.channel[4].ms.maxLimit", DumpEntry{analogMs.channel[4].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[4].ms.minLimit", DumpEntry{analogMs.channel[4].ms.minLimit});
        res.insert_or_assign("analogMs.channel[4].ms.accLength", DumpEntry{analogMs.channel[4].ms.accLength});
        res.insert_or_assign("analogMs.channel[4].ms.firMask", DumpEntry{analogMs.channel[4].ms.firMask});
        res.insert_or_assign("analogMs.channel[5].ms.algorithms", DumpEntry{analogMs.channel[5].ms.algorithms});
        res.insert_or_assign("analogMs.channel[5].ms.algorithms.alg", DumpEntry{analogMs.channel[5].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[5].ms.offset", DumpEntry{analogMs.channel[5].ms.offset});
        res.insert_or_assign("analogMs.channel[5].ms.iirA", DumpEntry{analogMs.channel[5].ms.iirA});
        res.insert_or_assign("analogMs.channel[5].ms.iirB", DumpEntry{analogMs.channel[5].ms.iirB});
        res.insert_or_assign("analogMs.channel[5].ms.maxLimit", DumpEntry{analogMs.channel[5].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[5].ms.minLimit", DumpEntry{analogMs.channel[5].ms.minLimit});
        res.insert_or_assign("analogMs.channel[5].ms.accLength", DumpEntry{analogMs.channel[5].ms.accLength});
        res.insert_or_assign("analogMs.channel[5].ms.firMask", DumpEntry{analogMs.channel[5].ms.firMask});
        res.insert_or_assign("analogMs.channel[6].ms.algorithms", DumpEntry{analogMs.channel[6].ms.algorithms});
        res.insert_or_assign("analogMs.channel[6].ms.algorithms.alg", DumpEntry{analogMs.channel[6].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[6].ms.offset", DumpEntry{analogMs.channel[6].ms.offset});
        res.insert_or_assign("analogMs.channel[6].ms.iirA", DumpEntry{analogMs.channel[6].ms.iirA});
        res.insert_or_assign("analogMs.channel[6].ms.iirB", DumpEntry{analogMs.channel[6].ms.iirB});
        res.insert_or_assign("analogMs.channel[6].ms.maxLimit", DumpEntry{analogMs.channel[6].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[6].ms.minLimit", DumpEntry{analogMs.channel[6].ms.minLimit});
        res.insert_or_assign("analogMs.channel[6].ms.accLength", DumpEntry{analogMs.channel[6].ms.accLength});
        res.insert_or_assign("analogMs.channel[6].ms.firMask", DumpEntry{analogMs.channel[6].ms.firMask});
        res.insert_or_assign("analogMs.channel[7].ms.algorithms", DumpEntry{analogMs.channel[7].ms.algorithms});
        res.insert_or_assign("analogMs.channel[7].ms.algorithms.alg", DumpEntry{analogMs.channel[7].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[7].ms.offset", DumpEntry{analogMs.channel[7].ms.offset});
        res.insert_or_assign("analogMs.channel[7].ms.iirA", DumpEntry{analogMs.channel[7].ms.iirA});
        res.insert_or_assign("analogMs.channel[7].ms.iirB", DumpEntry{analogMs.channel[7].ms.iirB});
        res.insert_or_assign("analogMs.channel[7].ms.maxLimit", DumpEntry{analogMs.channel[7].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[7].ms.minLimit", DumpEntry{analogMs.channel[7].ms.minLimit});
        res.insert_or_assign("analogMs.channel[7].ms.accLength", DumpEntry{analogMs.channel[7].ms.accLength});
        res.insert_or_assign("analogMs.channel[7].ms.firMask", DumpEntry{analogMs.channel[7].ms.firMask});
        res.insert_or_assign("analogMs.channel[8].ms.algorithms", DumpEntry{analogMs.channel[8].ms.algorithms});
        res.insert_or_assign("analogMs.channel[8].ms.algorithms.alg", DumpEntry{analogMs.channel[8].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[8].ms.offset", DumpEntry{analogMs.channel[8].ms.offset});
        res.insert_or_assign("analogMs.channel[8].ms.iirA", DumpEntry{analogMs.channel[8].ms.iirA});
        res.insert_or_assign("analogMs.channel[8].ms.iirB", DumpEntry{analogMs.channel[8].ms.iirB});
        res.insert_or_assign("analogMs.channel[8].ms.maxLimit", DumpEntry{analogMs.channel[8].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[8].ms.minLimit", DumpEntry{analogMs.channel[8].ms.minLimit});
        res.insert_or_assign("analogMs.channel[8].ms.accLength", DumpEntry{analogMs.channel[8].ms.accLength});
        res.insert_or_assign("analogMs.channel[8].ms.firMask", DumpEntry{analogMs.channel[8].ms.firMask});
        res.insert_or_assign("analogMs.channel[9].ms.algorithms", DumpEntry{analogMs.channel[9].ms.algorithms});
        res.insert_or_assign("analogMs.channel[9].ms.algorithms.alg", DumpEntry{analogMs.channel[9].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[9].ms.offset", DumpEntry{analogMs.channel[9].ms.offset});
        res.insert_or_assign("analogMs.channel[9].ms.iirA", DumpEntry{analogMs.channel[9].ms.iirA});
        res.insert_or_assign("analogMs.channel[9].ms.iirB", DumpEntry{analogMs.channel[9].ms.iirB});
        res.insert_or_assign("analogMs.channel[9].ms.maxLimit", DumpEntry{analogMs.channel[9].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[9].ms.minLimit", DumpEntry{analogMs.channel[9].ms.minLimit});
        res.insert_or_assign("analogMs.channel[9].ms.accLength", DumpEntry{analogMs.channel[9].ms.accLength});
        res.insert_or_assign("analogMs.channel[9].ms.firMask", DumpEntry{analogMs.channel[9].ms.firMask});
        res.insert_or_assign("analogMs.channel[10].ms.algorithms", DumpEntry{analogMs.channel[10].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[10].ms.algorithms.alg", DumpEntry{analogMs.channel[10].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[10].ms.offset", DumpEntry{analogMs.channel[10].ms.offset});
        res.insert_or_assign("analogMs.channel[10].ms.iirA", DumpEntry{analogMs.channel[10].ms.iirA});
        res.insert_or_assign("analogMs.channel[10].ms.iirB", DumpEntry{analogMs.channel[10].ms.iirB});
        res.insert_or_assign("analogMs.channel[10].ms.maxLimit", DumpEntry{analogMs.channel[10].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[10].ms.minLimit", DumpEntry{analogMs.channel[10].ms.minLimit});
        res.insert_or_assign("analogMs.channel[10].ms.accLength", DumpEntry{analogMs.channel[10].ms.accLength});
        res.insert_or_assign("analogMs.channel[10].ms.firMask", DumpEntry{analogMs.channel[10].ms.firMask});
        res.insert_or_assign("analogMs.channel[11].ms.algorithms", DumpEntry{analogMs.channel[11].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[11].ms.algorithms.alg", DumpEntry{analogMs.channel[11].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[11].ms.offset", DumpEntry{analogMs.channel[11].ms.offset});
        res.insert_or_assign("analogMs.channel[11].ms.iirA", DumpEntry{analogMs.channel[11].ms.iirA});
        res.insert_or_assign("analogMs.channel[11].ms.iirB", DumpEntry{analogMs.channel[11].ms.iirB});
        res.insert_or_assign("analogMs.channel[11].ms.maxLimit", DumpEntry{analogMs.channel[11].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[11].ms.minLimit", DumpEntry{analogMs.channel[11].ms.minLimit});
        res.insert_or_assign("analogMs.channel[11].ms.accLength", DumpEntry{analogMs.channel[11].ms.accLength});
        res.insert_or_assign("analogMs.channel[11].ms.firMask", DumpEntry{analogMs.channel[11].ms.firMask});
        res.insert_or_assign("analogMs.channel[12].ms.algorithms", DumpEntry{analogMs.channel[12].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[12].ms.algorithms.alg", DumpEntry{analogMs.channel[12].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[12].ms.offset", DumpEntry{analogMs.channel[12].ms.offset});
        res.insert_or_assign("analogMs.channel[12].ms.iirA", DumpEntry{analogMs.channel[12].ms.iirA});
        res.insert_or_assign("analogMs.channel[12].ms.iirB", DumpEntry{analogMs.channel[12].ms.iirB});
        res.insert_or_assign("analogMs.channel[12].ms.maxLimit", DumpEntry{analogMs.channel[12].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[12].ms.minLimit", DumpEntry{analogMs.channel[12].ms.minLimit});
        res.insert_or_assign("analogMs.channel[12].ms.accLength", DumpEntry{analogMs.channel[12].ms.accLength});
        res.insert_or_assign("analogMs.channel[12].ms.firMask", DumpEntry{analogMs.channel[12].ms.firMask});
        res.insert_or_assign("analogMs.channel[13].ms.algorithms", DumpEntry{analogMs.channel[13].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[13].ms.algorithms.alg", DumpEntry{analogMs.channel[13].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[13].ms.offset", DumpEntry{analogMs.channel[13].ms.offset});
        res.insert_or_assign("analogMs.channel[13].ms.iirA", DumpEntry{analogMs.channel[13].ms.iirA});
        res.insert_or_assign("analogMs.channel[13].ms.iirB", DumpEntry{analogMs.channel[13].ms.iirB});
        res.insert_or_assign("analogMs.channel[13].ms.maxLimit", DumpEntry{analogMs.channel[13].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[13].ms.minLimit", DumpEntry{analogMs.channel[13].ms.minLimit});
        res.insert_or_assign("analogMs.channel[13].ms.accLength", DumpEntry{analogMs.channel[13].ms.accLength});
        res.insert_or_assign("analogMs.channel[13].ms.firMask", DumpEntry{analogMs.channel[13].ms.firMask});
        res.insert_or_assign("analogMs.channel[14].ms.algorithms", DumpEntry{analogMs.channel[14].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[14].ms.algorithms.alg", DumpEntry{analogMs.channel[14].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[14].ms.offset", DumpEntry{analogMs.channel[14].ms.offset});
        res.insert_or_assign("analogMs.channel[14].ms.iirA", DumpEntry{analogMs.channel[14].ms.iirA});
        res.insert_or_assign("analogMs.channel[14].ms.iirB", DumpEntry{analogMs.channel[14].ms.iirB});
        res.insert_or_assign("analogMs.channel[14].ms.maxLimit", DumpEntry{analogMs.channel[14].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[14].ms.minLimit", DumpEntry{analogMs.channel[14].ms.minLimit});
        res.insert_or_assign("analogMs.channel[14].ms.accLength", DumpEntry{analogMs.channel[14].ms.accLength});
        res.insert_or_assign("analogMs.channel[14].ms.firMask", DumpEntry{analogMs.channel[14].ms.firMask});
        res.insert_or_assign("analogMs.channel[15].ms.algorithms", DumpEntry{analogMs.channel[15].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[15].ms.algorithms.alg", DumpEntry{analogMs.channel[15].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[15].ms.offset", DumpEntry{analogMs.channel[15].ms.offset});
        res.insert_or_assign("analogMs.channel[15].ms.iirA", DumpEntry{analogMs.channel[15].ms.iirA});
        res.insert_or_assign("analogMs.channel[15].ms.iirB", DumpEntry{analogMs.channel[15].ms.iirB});
        res.insert_or_assign("analogMs.channel[15].ms.maxLimit", DumpEntry{analogMs.channel[15].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[15].ms.minLimit", DumpEntry{analogMs.channel[15].ms.minLimit});
        res.insert_or_assign("analogMs.channel[15].ms.accLength", DumpEntry{analogMs.channel[15].ms.accLength});
        res.insert_or_assign("analogMs.channel[15].ms.firMask", DumpEntry{analogMs.channel[15].ms.firMask});
        res.insert_or_assign("analogMs.channel[16].ms.algorithms", DumpEntry{analogMs.channel[16].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[16].ms.algorithms.alg", DumpEntry{analogMs.channel[16].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[16].ms.offset", DumpEntry{analogMs.channel[16].ms.offset});
        res.insert_or_assign("analogMs.channel[16].ms.iirA", DumpEntry{analogMs.channel[16].ms.iirA});
        res.insert_or_assign("analogMs.channel[16].ms.iirB", DumpEntry{analogMs.channel[16].ms.iirB});
        res.insert_or_assign("analogMs.channel[16].ms.maxLimit", DumpEntry{analogMs.channel[16].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[16].ms.minLimit", DumpEntry{analogMs.channel[16].ms.minLimit});
        res.insert_or_assign("analogMs.channel[16].ms.accLength", DumpEntry{analogMs.channel[16].ms.accLength});
        res.insert_or_assign("analogMs.channel[16].ms.firMask", DumpEntry{analogMs.channel[16].ms.firMask});
        res.insert_or_assign("analogMs.channel[17].ms.algorithms", DumpEntry{analogMs.channel[17].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[17].ms.algorithms.alg", DumpEntry{analogMs.channel[17].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[17].ms.offset", DumpEntry{analogMs.channel[17].ms.offset});
        res.insert_or_assign("analogMs.channel[17].ms.iirA", DumpEntry{analogMs.channel[17].ms.iirA});
        res.insert_or_assign("analogMs.channel[17].ms.iirB", DumpEntry{analogMs.channel[17].ms.iirB});
        res.insert_or_assign("analogMs.channel[17].ms.maxLimit", DumpEntry{analogMs.channel[17].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[17].ms.minLimit", DumpEntry{analogMs.channel[17].ms.minLimit});
        res.insert_or_assign("analogMs.channel[17].ms.accLength", DumpEntry{analogMs.channel[17].ms.accLength});
        res.insert_or_assign("analogMs.channel[17].ms.firMask", DumpEntry{analogMs.channel[17].ms.firMask});
        res.insert_or_assign("analogMs.channel[18].ms.algorithms", DumpEntry{analogMs.channel[18].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[18].ms.algorithms.alg", DumpEntry{analogMs.channel[18].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[18].ms.offset", DumpEntry{analogMs.channel[18].ms.offset});
        res.insert_or_assign("analogMs.channel[18].ms.iirA", DumpEntry{analogMs.channel[18].ms.iirA});
        res.insert_or_assign("analogMs.channel[18].ms.iirB", DumpEntry{analogMs.channel[18].ms.iirB});
        res.insert_or_assign("analogMs.channel[18].ms.maxLimit", DumpEntry{analogMs.channel[18].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[18].ms.minLimit", DumpEntry{analogMs.channel[18].ms.minLimit});
        res.insert_or_assign("analogMs.channel[18].ms.accLength", DumpEntry{analogMs.channel[18].ms.accLength});
        res.insert_or_assign("analogMs.channel[18].ms.firMask", DumpEntry{analogMs.channel[18].ms.firMask});
        res.insert_or_assign("analogMs.channel[19].ms.algorithms", DumpEntry{analogMs.channel[19].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[19].ms.algorithms.alg", DumpEntry{analogMs.channel[19].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[19].ms.offset", DumpEntry{analogMs.channel[19].ms.offset});
        res.insert_or_assign("analogMs.channel[19].ms.iirA", DumpEntry{analogMs.channel[19].ms.iirA});
        res.insert_or_assign("analogMs.channel[19].ms.iirB", DumpEntry{analogMs.channel[19].ms.iirB});
        res.insert_or_assign("analogMs.channel[19].ms.maxLimit", DumpEntry{analogMs.channel[19].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[19].ms.minLimit", DumpEntry{analogMs.channel[19].ms.minLimit});
        res.insert_or_assign("analogMs.channel[19].ms.accLength", DumpEntry{analogMs.channel[19].ms.accLength});
        res.insert_or_assign("analogMs.channel[19].ms.firMask", DumpEntry{analogMs.channel[19].ms.firMask});
        res.insert_or_assign("analogMs.channel[20].ms.algorithms", DumpEntry{analogMs.channel[20].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[20].ms.algorithms.alg", DumpEntry{analogMs.channel[20].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[20].ms.offset", DumpEntry{analogMs.channel[20].ms.offset});
        res.insert_or_assign("analogMs.channel[20].ms.iirA", DumpEntry{analogMs.channel[20].ms.iirA});
        res.insert_or_assign("analogMs.channel[20].ms.iirB", DumpEntry{analogMs.channel[20].ms.iirB});
        res.insert_or_assign("analogMs.channel[20].ms.maxLimit", DumpEntry{analogMs.channel[20].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[20].ms.minLimit", DumpEntry{analogMs.channel[20].ms.minLimit});
        res.insert_or_assign("analogMs.channel[20].ms.accLength", DumpEntry{analogMs.channel[20].ms.accLength});
        res.insert_or_assign("analogMs.channel[20].ms.firMask", DumpEntry{analogMs.channel[20].ms.firMask});
        res.insert_or_assign("analogMs.channel[21].ms.algorithms", DumpEntry{analogMs.channel[21].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[21].ms.algorithms.alg", DumpEntry{analogMs.channel[21].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[21].ms.offset", DumpEntry{analogMs.channel[21].ms.offset});
        res.insert_or_assign("analogMs.channel[21].ms.iirA", DumpEntry{analogMs.channel[21].ms.iirA});
        res.insert_or_assign("analogMs.channel[21].ms.iirB", DumpEntry{analogMs.channel[21].ms.iirB});
        res.insert_or_assign("analogMs.channel[21].ms.maxLimit", DumpEntry{analogMs.channel[21].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[21].ms.minLimit", DumpEntry{analogMs.channel[21].ms.minLimit});
        res.insert_or_assign("analogMs.channel[21].ms.accLength", DumpEntry{analogMs.channel[21].ms.accLength});
        res.insert_or_assign("analogMs.channel[21].ms.firMask", DumpEntry{analogMs.channel[21].ms.firMask});
        res.insert_or_assign("analogMs.channel[22].ms.algorithms", DumpEntry{analogMs.channel[22].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[22].ms.algorithms.alg", DumpEntry{analogMs.channel[22].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[22].ms.offset", DumpEntry{analogMs.channel[22].ms.offset});
        res.insert_or_assign("analogMs.channel[22].ms.iirA", DumpEntry{analogMs.channel[22].ms.iirA});
        res.insert_or_assign("analogMs.channel[22].ms.iirB", DumpEntry{analogMs.channel[22].ms.iirB});
        res.insert_or_assign("analogMs.channel[22].ms.maxLimit", DumpEntry{analogMs.channel[22].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[22].ms.minLimit", DumpEntry{analogMs.channel[22].ms.minLimit});
        res.insert_or_assign("analogMs.channel[22].ms.accLength", DumpEntry{analogMs.channel[22].ms.accLength});
        res.insert_or_assign("analogMs.channel[22].ms.firMask", DumpEntry{analogMs.channel[22].ms.firMask});
        res.insert_or_assign("analogMs.channel[23].ms.algorithms", DumpEntry{analogMs.channel[23].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[23].ms.algorithms.alg", DumpEntry{analogMs.channel[23].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[23].ms.offset", DumpEntry{analogMs.channel[23].ms.offset});
        res.insert_or_assign("analogMs.channel[23].ms.iirA", DumpEntry{analogMs.channel[23].ms.iirA});
        res.insert_or_assign("analogMs.channel[23].ms.iirB", DumpEntry{analogMs.channel[23].ms.iirB});
        res.insert_or_assign("analogMs.channel[23].ms.maxLimit", DumpEntry{analogMs.channel[23].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[23].ms.minLimit", DumpEntry{analogMs.channel[23].ms.minLimit});
        res.insert_or_assign("analogMs.channel[23].ms.accLength", DumpEntry{analogMs.channel[23].ms.accLength});
        res.insert_or_assign("analogMs.channel[23].ms.firMask", DumpEntry{analogMs.channel[23].ms.firMask});
        res.insert_or_assign("analogMs.channel[24].ms.algorithms", DumpEntry{analogMs.channel[24].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[24].ms.algorithms.alg", DumpEntry{analogMs.channel[24].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[24].ms.offset", DumpEntry{analogMs.channel[24].ms.offset});
        res.insert_or_assign("analogMs.channel[24].ms.iirA", DumpEntry{analogMs.channel[24].ms.iirA});
        res.insert_or_assign("analogMs.channel[24].ms.iirB", DumpEntry{analogMs.channel[24].ms.iirB});
        res.insert_or_assign("analogMs.channel[24].ms.maxLimit", DumpEntry{analogMs.channel[24].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[24].ms.minLimit", DumpEntry{analogMs.channel[24].ms.minLimit});
        res.insert_or_assign("analogMs.channel[24].ms.accLength", DumpEntry{analogMs.channel[24].ms.accLength});
        res.insert_or_assign("analogMs.channel[24].ms.firMask", DumpEntry{analogMs.channel[24].ms.firMask});
        res.insert_or_assign("analogMs.channel[25].ms.algorithms", DumpEntry{analogMs.channel[25].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[25].ms.algorithms.alg", DumpEntry{analogMs.channel[25].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[25].ms.offset", DumpEntry{analogMs.channel[25].ms.offset});
        res.insert_or_assign("analogMs.channel[25].ms.iirA", DumpEntry{analogMs.channel[25].ms.iirA});
        res.insert_or_assign("analogMs.channel[25].ms.iirB", DumpEntry{analogMs.channel[25].ms.iirB});
        res.insert_or_assign("analogMs.channel[25].ms.maxLimit", DumpEntry{analogMs.channel[25].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[25].ms.minLimit", DumpEntry{analogMs.channel[25].ms.minLimit});
        res.insert_or_assign("analogMs.channel[25].ms.accLength", DumpEntry{analogMs.channel[25].ms.accLength});
        res.insert_or_assign("analogMs.channel[25].ms.firMask", DumpEntry{analogMs.channel[25].ms.firMask});
        res.insert_or_assign("analogMs.channel[26].ms.algorithms", DumpEntry{analogMs.channel[26].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[26].ms.algorithms.alg", DumpEntry{analogMs.channel[26].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[26].ms.offset", DumpEntry{analogMs.channel[26].ms.offset});
        res.insert_or_assign("analogMs.channel[26].ms.iirA", DumpEntry{analogMs.channel[26].ms.iirA});
        res.insert_or_assign("analogMs.channel[26].ms.iirB", DumpEntry{analogMs.channel[26].ms.iirB});
        res.insert_or_assign("analogMs.channel[26].ms.maxLimit", DumpEntry{analogMs.channel[26].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[26].ms.minLimit", DumpEntry{analogMs.channel[26].ms.minLimit});
        res.insert_or_assign("analogMs.channel[26].ms.accLength", DumpEntry{analogMs.channel[26].ms.accLength});
        res.insert_or_assign("analogMs.channel[26].ms.firMask", DumpEntry{analogMs.channel[26].ms.firMask});
        res.insert_or_assign("analogMs.channel[27].ms.algorithms", DumpEntry{analogMs.channel[27].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[27].ms.algorithms.alg", DumpEntry{analogMs.channel[27].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[27].ms.offset", DumpEntry{analogMs.channel[27].ms.offset});
        res.insert_or_assign("analogMs.channel[27].ms.iirA", DumpEntry{analogMs.channel[27].ms.iirA});
        res.insert_or_assign("analogMs.channel[27].ms.iirB", DumpEntry{analogMs.channel[27].ms.iirB});
        res.insert_or_assign("analogMs.channel[27].ms.maxLimit", DumpEntry{analogMs.channel[27].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[27].ms.minLimit", DumpEntry{analogMs.channel[27].ms.minLimit});
        res.insert_or_assign("analogMs.channel[27].ms.accLength", DumpEntry{analogMs.channel[27].ms.accLength});
        res.insert_or_assign("analogMs.channel[27].ms.firMask", DumpEntry{analogMs.channel[27].ms.firMask});
        res.insert_or_assign("analogMs.channel[28].ms.algorithms", DumpEntry{analogMs.channel[28].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[28].ms.algorithms.alg", DumpEntry{analogMs.channel[28].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[28].ms.offset", DumpEntry{analogMs.channel[28].ms.offset});
        res.insert_or_assign("analogMs.channel[28].ms.iirA", DumpEntry{analogMs.channel[28].ms.iirA});
        res.insert_or_assign("analogMs.channel[28].ms.iirB", DumpEntry{analogMs.channel[28].ms.iirB});
        res.insert_or_assign("analogMs.channel[28].ms.maxLimit", DumpEntry{analogMs.channel[28].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[28].ms.minLimit", DumpEntry{analogMs.channel[28].ms.minLimit});
        res.insert_or_assign("analogMs.channel[28].ms.accLength", DumpEntry{analogMs.channel[28].ms.accLength});
        res.insert_or_assign("analogMs.channel[28].ms.firMask", DumpEntry{analogMs.channel[28].ms.firMask});
        res.insert_or_assign("analogMs.channel[29].ms.algorithms", DumpEntry{analogMs.channel[29].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[29].ms.algorithms.alg", DumpEntry{analogMs.channel[29].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[29].ms.offset", DumpEntry{analogMs.channel[29].ms.offset});
        res.insert_or_assign("analogMs.channel[29].ms.iirA", DumpEntry{analogMs.channel[29].ms.iirA});
        res.insert_or_assign("analogMs.channel[29].ms.iirB", DumpEntry{analogMs.channel[29].ms.iirB});
        res.insert_or_assign("analogMs.channel[29].ms.maxLimit", DumpEntry{analogMs.channel[29].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[29].ms.minLimit", DumpEntry{analogMs.channel[29].ms.minLimit});
        res.insert_or_assign("analogMs.channel[29].ms.accLength", DumpEntry{analogMs.channel[29].ms.accLength});
        res.insert_or_assign("analogMs.channel[29].ms.firMask", DumpEntry{analogMs.channel[29].ms.firMask});
        res.insert_or_assign("analogMs.channel[30].ms.algorithms", DumpEntry{analogMs.channel[30].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[30].ms.algorithms.alg", DumpEntry{analogMs.channel[30].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[30].ms.offset", DumpEntry{analogMs.channel[30].ms.offset});
        res.insert_or_assign("analogMs.channel[30].ms.iirA", DumpEntry{analogMs.channel[30].ms.iirA});
        res.insert_or_assign("analogMs.channel[30].ms.iirB", DumpEntry{analogMs.channel[30].ms.iirB});
        res.insert_or_assign("analogMs.channel[30].ms.maxLimit", DumpEntry{analogMs.channel[30].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[30].ms.minLimit", DumpEntry{analogMs.channel[30].ms.minLimit});
        res.insert_or_assign("analogMs.channel[30].ms.accLength", DumpEntry{analogMs.channel[30].ms.accLength});
        res.insert_or_assign("analogMs.channel[30].ms.firMask", DumpEntry{analogMs.channel[30].ms.firMask});
        res.insert_or_assign("analogMs.channel[31].ms.algorithms", DumpEntry{analogMs.channel[31].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[31].ms.algorithms.alg", DumpEntry{analogMs.channel[31].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[31].ms.offset", DumpEntry{analogMs.channel[31].ms.offset});
        res.insert_or_assign("analogMs.channel[31].ms.iirA", DumpEntry{analogMs.channel[31].ms.iirA});
        res.insert_or_assign("analogMs.channel[31].ms.iirB", DumpEntry{analogMs.channel[31].ms.iirB});
        res.insert_or_assign("analogMs.channel[31].ms.maxLimit", DumpEntry{analogMs.channel[31].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[31].ms.minLimit", DumpEntry{analogMs.channel[31].ms.minLimit});
        res.insert_or_assign("analogMs.channel[31].ms.accLength", DumpEntry{analogMs.channel[31].ms.accLength});
        res.insert_or_assign("analogMs.channel[31].ms.firMask", DumpEntry{analogMs.channel[31].ms.firMask});
        res.insert_or_assign("analogMs.channel[32].ms.algorithms", DumpEntry{analogMs.channel[32].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[32].ms.algorithms.alg", DumpEntry{analogMs.channel[32].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[32].ms.offset", DumpEntry{analogMs.channel[32].ms.offset});
        res.insert_or_assign("analogMs.channel[32].ms.iirA", DumpEntry{analogMs.channel[32].ms.iirA});
        res.insert_or_assign("analogMs.channel[32].ms.iirB", DumpEntry{analogMs.channel[32].ms.iirB});
        res.insert_or_assign("analogMs.channel[32].ms.maxLimit", DumpEntry{analogMs.channel[32].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[32].ms.minLimit", DumpEntry{analogMs.channel[32].ms.minLimit});
        res.insert_or_assign("analogMs.channel[32].ms.accLength", DumpEntry{analogMs.channel[32].ms.accLength});
        res.insert_or_assign("analogMs.channel[32].ms.firMask", DumpEntry{analogMs.channel[32].ms.firMask});
        res.insert_or_assign("analogMs.channel[33].ms.algorithms", DumpEntry{analogMs.channel[33].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[33].ms.algorithms.alg", DumpEntry{analogMs.channel[33].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[33].ms.offset", DumpEntry{analogMs.channel[33].ms.offset});
        res.insert_or_assign("analogMs.channel[33].ms.iirA", DumpEntry{analogMs.channel[33].ms.iirA});
        res.insert_or_assign("analogMs.channel[33].ms.iirB", DumpEntry{analogMs.channel[33].ms.iirB});
        res.insert_or_assign("analogMs.channel[33].ms.maxLimit", DumpEntry{analogMs.channel[33].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[33].ms.minLimit", DumpEntry{analogMs.channel[33].ms.minLimit});
        res.insert_or_assign("analogMs.channel[33].ms.accLength", DumpEntry{analogMs.channel[33].ms.accLength});
        res.insert_or_assign("analogMs.channel[33].ms.firMask", DumpEntry{analogMs.channel[33].ms.firMask});
        res.insert_or_assign("analogMs.channel[34].ms.algorithms", DumpEntry{analogMs.channel[34].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[34].ms.algorithms.alg", DumpEntry{analogMs.channel[34].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[34].ms.offset", DumpEntry{analogMs.channel[34].ms.offset});
        res.insert_or_assign("analogMs.channel[34].ms.iirA", DumpEntry{analogMs.channel[34].ms.iirA});
        res.insert_or_assign("analogMs.channel[34].ms.iirB", DumpEntry{analogMs.channel[34].ms.iirB});
        res.insert_or_assign("analogMs.channel[34].ms.maxLimit", DumpEntry{analogMs.channel[34].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[34].ms.minLimit", DumpEntry{analogMs.channel[34].ms.minLimit});
        res.insert_or_assign("analogMs.channel[34].ms.accLength", DumpEntry{analogMs.channel[34].ms.accLength});
        res.insert_or_assign("analogMs.channel[34].ms.firMask", DumpEntry{analogMs.channel[34].ms.firMask});
        res.insert_or_assign("analogMs.channel[35].ms.algorithms", DumpEntry{analogMs.channel[35].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[35].ms.algorithms.alg", DumpEntry{analogMs.channel[35].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[35].ms.offset", DumpEntry{analogMs.channel[35].ms.offset});
        res.insert_or_assign("analogMs.channel[35].ms.iirA", DumpEntry{analogMs.channel[35].ms.iirA});
        res.insert_or_assign("analogMs.channel[35].ms.iirB", DumpEntry{analogMs.channel[35].ms.iirB});
        res.insert_or_assign("analogMs.channel[35].ms.maxLimit", DumpEntry{analogMs.channel[35].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[35].ms.minLimit", DumpEntry{analogMs.channel[35].ms.minLimit});
        res.insert_or_assign("analogMs.channel[35].ms.accLength", DumpEntry{analogMs.channel[35].ms.accLength});
        res.insert_or_assign("analogMs.channel[35].ms.firMask", DumpEntry{analogMs.channel[35].ms.firMask});
        res.insert_or_assign("analogMs.channel[36].ms.algorithms", DumpEntry{analogMs.channel[36].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[36].ms.algorithms.alg", DumpEntry{analogMs.channel[36].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[36].ms.offset", DumpEntry{analogMs.channel[36].ms.offset});
        res.insert_or_assign("analogMs.channel[36].ms.iirA", DumpEntry{analogMs.channel[36].ms.iirA});
        res.insert_or_assign("analogMs.channel[36].ms.iirB", DumpEntry{analogMs.channel[36].ms.iirB});
        res.insert_or_assign("analogMs.channel[36].ms.maxLimit", DumpEntry{analogMs.channel[36].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[36].ms.minLimit", DumpEntry{analogMs.channel[36].ms.minLimit});
        res.insert_or_assign("analogMs.channel[36].ms.accLength", DumpEntry{analogMs.channel[36].ms.accLength});
        res.insert_or_assign("analogMs.channel[36].ms.firMask", DumpEntry{analogMs.channel[36].ms.firMask});
        res.insert_or_assign("analogMs.channel[37].ms.algorithms", DumpEntry{analogMs.channel[37].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[37].ms.algorithms.alg", DumpEntry{analogMs.channel[37].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[37].ms.offset", DumpEntry{analogMs.channel[37].ms.offset});
        res.insert_or_assign("analogMs.channel[37].ms.iirA", DumpEntry{analogMs.channel[37].ms.iirA});
        res.insert_or_assign("analogMs.channel[37].ms.iirB", DumpEntry{analogMs.channel[37].ms.iirB});
        res.insert_or_assign("analogMs.channel[37].ms.maxLimit", DumpEntry{analogMs.channel[37].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[37].ms.minLimit", DumpEntry{analogMs.channel[37].ms.minLimit});
        res.insert_or_assign("analogMs.channel[37].ms.accLength", DumpEntry{analogMs.channel[37].ms.accLength});
        res.insert_or_assign("analogMs.channel[37].ms.firMask", DumpEntry{analogMs.channel[37].ms.firMask});
        res.insert_or_assign("analogMs.channel[38].ms.algorithms", DumpEntry{analogMs.channel[38].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[38].ms.algorithms.alg", DumpEntry{analogMs.channel[38].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[38].ms.offset", DumpEntry{analogMs.channel[38].ms.offset});
        res.insert_or_assign("analogMs.channel[38].ms.iirA", DumpEntry{analogMs.channel[38].ms.iirA});
        res.insert_or_assign("analogMs.channel[38].ms.iirB", DumpEntry{analogMs.channel[38].ms.iirB});
        res.insert_or_assign("analogMs.channel[38].ms.maxLimit", DumpEntry{analogMs.channel[38].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[38].ms.minLimit", DumpEntry{analogMs.channel[38].ms.minLimit});
        res.insert_or_assign("analogMs.channel[38].ms.accLength", DumpEntry{analogMs.channel[38].ms.accLength});
        res.insert_or_assign("analogMs.channel[38].ms.firMask", DumpEntry{analogMs.channel[38].ms.firMask});
        res.insert_or_assign("analogMs.channel[39].ms.algorithms", DumpEntry{analogMs.channel[39].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[39].ms.algorithms.alg", DumpEntry{analogMs.channel[39].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[39].ms.offset", DumpEntry{analogMs.channel[39].ms.offset});
        res.insert_or_assign("analogMs.channel[39].ms.iirA", DumpEntry{analogMs.channel[39].ms.iirA});
        res.insert_or_assign("analogMs.channel[39].ms.iirB", DumpEntry{analogMs.channel[39].ms.iirB});
        res.insert_or_assign("analogMs.channel[39].ms.maxLimit", DumpEntry{analogMs.channel[39].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[39].ms.minLimit", DumpEntry{analogMs.channel[39].ms.minLimit});
        res.insert_or_assign("analogMs.channel[39].ms.accLength", DumpEntry{analogMs.channel[39].ms.accLength});
        res.insert_or_assign("analogMs.channel[39].ms.firMask", DumpEntry{analogMs.channel[39].ms.firMask});
        res.insert_or_assign("analogMs.channel[40].ms.algorithms", DumpEntry{analogMs.channel[40].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[40].ms.algorithms.alg", DumpEntry{analogMs.channel[40].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[40].ms.offset", DumpEntry{analogMs.channel[40].ms.offset});
        res.insert_or_assign("analogMs.channel[40].ms.iirA", DumpEntry{analogMs.channel[40].ms.iirA});
        res.insert_or_assign("analogMs.channel[40].ms.iirB", DumpEntry{analogMs.channel[40].ms.iirB});
        res.insert_or_assign("analogMs.channel[40].ms.maxLimit", DumpEntry{analogMs.channel[40].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[40].ms.minLimit", DumpEntry{analogMs.channel[40].ms.minLimit});
        res.insert_or_assign("analogMs.channel[40].ms.accLength", DumpEntry{analogMs.channel[40].ms.accLength});
        res.insert_or_assign("analogMs.channel[40].ms.firMask", DumpEntry{analogMs.channel[40].ms.firMask});
        res.insert_or_assign("analogMs.channel[41].ms.algorithms", DumpEntry{analogMs.channel[41].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[41].ms.algorithms.alg", DumpEntry{analogMs.channel[41].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[41].ms.offset", DumpEntry{analogMs.channel[41].ms.offset});
        res.insert_or_assign("analogMs.channel[41].ms.iirA", DumpEntry{analogMs.channel[41].ms.iirA});
        res.insert_or_assign("analogMs.channel[41].ms.iirB", DumpEntry{analogMs.channel[41].ms.iirB});
        res.insert_or_assign("analogMs.channel[41].ms.maxLimit", DumpEntry{analogMs.channel[41].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[41].ms.minLimit", DumpEntry{analogMs.channel[41].ms.minLimit});
        res.insert_or_assign("analogMs.channel[41].ms.accLength", DumpEntry{analogMs.channel[41].ms.accLength});
        res.insert_or_assign("analogMs.channel[41].ms.firMask", DumpEntry{analogMs.channel[41].ms.firMask});
        res.insert_or_assign("analogMs.channel[42].ms.algorithms", DumpEntry{analogMs.channel[42].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[42].ms.algorithms.alg", DumpEntry{analogMs.channel[42].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[42].ms.offset", DumpEntry{analogMs.channel[42].ms.offset});
        res.insert_or_assign("analogMs.channel[42].ms.iirA", DumpEntry{analogMs.channel[42].ms.iirA});
        res.insert_or_assign("analogMs.channel[42].ms.iirB", DumpEntry{analogMs.channel[42].ms.iirB});
        res.insert_or_assign("analogMs.channel[42].ms.maxLimit", DumpEntry{analogMs.channel[42].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[42].ms.minLimit", DumpEntry{analogMs.channel[42].ms.minLimit});
        res.insert_or_assign("analogMs.channel[42].ms.accLength", DumpEntry{analogMs.channel[42].ms.accLength});
        res.insert_or_assign("analogMs.channel[42].ms.firMask", DumpEntry{analogMs.channel[42].ms.firMask});
        res.insert_or_assign("analogMs.channel[43].ms.algorithms", DumpEntry{analogMs.channel[43].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[43].ms.algorithms.alg", DumpEntry{analogMs.channel[43].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[43].ms.offset", DumpEntry{analogMs.channel[43].ms.offset});
        res.insert_or_assign("analogMs.channel[43].ms.iirA", DumpEntry{analogMs.channel[43].ms.iirA});
        res.insert_or_assign("analogMs.channel[43].ms.iirB", DumpEntry{analogMs.channel[43].ms.iirB});
        res.insert_or_assign("analogMs.channel[43].ms.maxLimit", DumpEntry{analogMs.channel[43].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[43].ms.minLimit", DumpEntry{analogMs.channel[43].ms.minLimit});
        res.insert_or_assign("analogMs.channel[43].ms.accLength", DumpEntry{analogMs.channel[43].ms.accLength});
        res.insert_or_assign("analogMs.channel[43].ms.firMask", DumpEntry{analogMs.channel[43].ms.firMask});
        res.insert_or_assign("analogMs.channel[44].ms.algorithms", DumpEntry{analogMs.channel[44].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[44].ms.algorithms.alg", DumpEntry{analogMs.channel[44].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[44].ms.offset", DumpEntry{analogMs.channel[44].ms.offset});
        res.insert_or_assign("analogMs.channel[44].ms.iirA", DumpEntry{analogMs.channel[44].ms.iirA});
        res.insert_or_assign("analogMs.channel[44].ms.iirB", DumpEntry{analogMs.channel[44].ms.iirB});
        res.insert_or_assign("analogMs.channel[44].ms.maxLimit", DumpEntry{analogMs.channel[44].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[44].ms.minLimit", DumpEntry{analogMs.channel[44].ms.minLimit});
        res.insert_or_assign("analogMs.channel[44].ms.accLength", DumpEntry{analogMs.channel[44].ms.accLength});
        res.insert_or_assign("analogMs.channel[44].ms.firMask", DumpEntry{analogMs.channel[44].ms.firMask});
        res.insert_or_assign("analogMs.channel[45].ms.algorithms", DumpEntry{analogMs.channel[45].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[45].ms.algorithms.alg", DumpEntry{analogMs.channel[45].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[45].ms.offset", DumpEntry{analogMs.channel[45].ms.offset});
        res.insert_or_assign("analogMs.channel[45].ms.iirA", DumpEntry{analogMs.channel[45].ms.iirA});
        res.insert_or_assign("analogMs.channel[45].ms.iirB", DumpEntry{analogMs.channel[45].ms.iirB});
        res.insert_or_assign("analogMs.channel[45].ms.maxLimit", DumpEntry{analogMs.channel[45].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[45].ms.minLimit", DumpEntry{analogMs.channel[45].ms.minLimit});
        res.insert_or_assign("analogMs.channel[45].ms.accLength", DumpEntry{analogMs.channel[45].ms.accLength});
        res.insert_or_assign("analogMs.channel[45].ms.firMask", DumpEntry{analogMs.channel[45].ms.firMask});
        res.insert_or_assign("analogMs.channel[46].ms.algorithms", DumpEntry{analogMs.channel[46].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[46].ms.algorithms.alg", DumpEntry{analogMs.channel[46].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[46].ms.offset", DumpEntry{analogMs.channel[46].ms.offset});
        res.insert_or_assign("analogMs.channel[46].ms.iirA", DumpEntry{analogMs.channel[46].ms.iirA});
        res.insert_or_assign("analogMs.channel[46].ms.iirB", DumpEntry{analogMs.channel[46].ms.iirB});
        res.insert_or_assign("analogMs.channel[46].ms.maxLimit", DumpEntry{analogMs.channel[46].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[46].ms.minLimit", DumpEntry{analogMs.channel[46].ms.minLimit});
        res.insert_or_assign("analogMs.channel[46].ms.accLength", DumpEntry{analogMs.channel[46].ms.accLength});
        res.insert_or_assign("analogMs.channel[46].ms.firMask", DumpEntry{analogMs.channel[46].ms.firMask});
        res.insert_or_assign("analogMs.channel[47].ms.algorithms", DumpEntry{analogMs.channel[47].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[47].ms.algorithms.alg", DumpEntry{analogMs.channel[47].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[47].ms.offset", DumpEntry{analogMs.channel[47].ms.offset});
        res.insert_or_assign("analogMs.channel[47].ms.iirA", DumpEntry{analogMs.channel[47].ms.iirA});
        res.insert_or_assign("analogMs.channel[47].ms.iirB", DumpEntry{analogMs.channel[47].ms.iirB});
        res.insert_or_assign("analogMs.channel[47].ms.maxLimit", DumpEntry{analogMs.channel[47].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[47].ms.minLimit", DumpEntry{analogMs.channel[47].ms.minLimit});
        res.insert_or_assign("analogMs.channel[47].ms.accLength", DumpEntry{analogMs.channel[47].ms.accLength});
        res.insert_or_assign("analogMs.channel[47].ms.firMask", DumpEntry{analogMs.channel[47].ms.firMask});
        res.insert_or_assign("analogMs.channel[48].ms.algorithms", DumpEntry{analogMs.channel[48].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[48].ms.algorithms.alg", DumpEntry{analogMs.channel[48].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[48].ms.offset", DumpEntry{analogMs.channel[48].ms.offset});
        res.insert_or_assign("analogMs.channel[48].ms.iirA", DumpEntry{analogMs.channel[48].ms.iirA});
        res.insert_or_assign("analogMs.channel[48].ms.iirB", DumpEntry{analogMs.channel[48].ms.iirB});
        res.insert_or_assign("analogMs.channel[48].ms.maxLimit", DumpEntry{analogMs.channel[48].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[48].ms.minLimit", DumpEntry{analogMs.channel[48].ms.minLimit});
        res.insert_or_assign("analogMs.channel[48].ms.accLength", DumpEntry{analogMs.channel[48].ms.accLength});
        res.insert_or_assign("analogMs.channel[48].ms.firMask", DumpEntry{analogMs.channel[48].ms.firMask});
        res.insert_or_assign("analogMs.channel[49].ms.algorithms", DumpEntry{analogMs.channel[49].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[49].ms.algorithms.alg", DumpEntry{analogMs.channel[49].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[49].ms.offset", DumpEntry{analogMs.channel[49].ms.offset});
        res.insert_or_assign("analogMs.channel[49].ms.iirA", DumpEntry{analogMs.channel[49].ms.iirA});
        res.insert_or_assign("analogMs.channel[49].ms.iirB", DumpEntry{analogMs.channel[49].ms.iirB});
        res.insert_or_assign("analogMs.channel[49].ms.maxLimit", DumpEntry{analogMs.channel[49].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[49].ms.minLimit", DumpEntry{analogMs.channel[49].ms.minLimit});
        res.insert_or_assign("analogMs.channel[49].ms.accLength", DumpEntry{analogMs.channel[49].ms.accLength});
        res.insert_or_assign("analogMs.channel[49].ms.firMask", DumpEntry{analogMs.channel[49].ms.firMask});
        res.insert_or_assign("analogMs.channel[50].ms.algorithms", DumpEntry{analogMs.channel[50].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[50].ms.algorithms.alg", DumpEntry{analogMs.channel[50].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[50].ms.offset", DumpEntry{analogMs.channel[50].ms.offset});
        res.insert_or_assign("analogMs.channel[50].ms.iirA", DumpEntry{analogMs.channel[50].ms.iirA});
        res.insert_or_assign("analogMs.channel[50].ms.iirB", DumpEntry{analogMs.channel[50].ms.iirB});
        res.insert_or_assign("analogMs.channel[50].ms.maxLimit", DumpEntry{analogMs.channel[50].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[50].ms.minLimit", DumpEntry{analogMs.channel[50].ms.minLimit});
        res.insert_or_assign("analogMs.channel[50].ms.accLength", DumpEntry{analogMs.channel[50].ms.accLength});
        res.insert_or_assign("analogMs.channel[50].ms.firMask", DumpEntry{analogMs.channel[50].ms.firMask});
        res.insert_or_assign("analogMs.channel[51].ms.algorithms", DumpEntry{analogMs.channel[51].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[51].ms.algorithms.alg", DumpEntry{analogMs.channel[51].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[51].ms.offset", DumpEntry{analogMs.channel[51].ms.offset});
        res.insert_or_assign("analogMs.channel[51].ms.iirA", DumpEntry{analogMs.channel[51].ms.iirA});
        res.insert_or_assign("analogMs.channel[51].ms.iirB", DumpEntry{analogMs.channel[51].ms.iirB});
        res.insert_or_assign("analogMs.channel[51].ms.maxLimit", DumpEntry{analogMs.channel[51].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[51].ms.minLimit", DumpEntry{analogMs.channel[51].ms.minLimit});
        res.insert_or_assign("analogMs.channel[51].ms.accLength", DumpEntry{analogMs.channel[51].ms.accLength});
        res.insert_or_assign("analogMs.channel[51].ms.firMask", DumpEntry{analogMs.channel[51].ms.firMask});
        res.insert_or_assign("analogMs.channel[52].ms.algorithms", DumpEntry{analogMs.channel[52].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[52].ms.algorithms.alg", DumpEntry{analogMs.channel[52].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[52].ms.offset", DumpEntry{analogMs.channel[52].ms.offset});
        res.insert_or_assign("analogMs.channel[52].ms.iirA", DumpEntry{analogMs.channel[52].ms.iirA});
        res.insert_or_assign("analogMs.channel[52].ms.iirB", DumpEntry{analogMs.channel[52].ms.iirB});
        res.insert_or_assign("analogMs.channel[52].ms.maxLimit", DumpEntry{analogMs.channel[52].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[52].ms.minLimit", DumpEntry{analogMs.channel[52].ms.minLimit});
        res.insert_or_assign("analogMs.channel[52].ms.accLength", DumpEntry{analogMs.channel[52].ms.accLength});
        res.insert_or_assign("analogMs.channel[52].ms.firMask", DumpEntry{analogMs.channel[52].ms.firMask});
        res.insert_or_assign("analogMs.channel[53].ms.algorithms", DumpEntry{analogMs.channel[53].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[53].ms.algorithms.alg", DumpEntry{analogMs.channel[53].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[53].ms.offset", DumpEntry{analogMs.channel[53].ms.offset});
        res.insert_or_assign("analogMs.channel[53].ms.iirA", DumpEntry{analogMs.channel[53].ms.iirA});
        res.insert_or_assign("analogMs.channel[53].ms.iirB", DumpEntry{analogMs.channel[53].ms.iirB});
        res.insert_or_assign("analogMs.channel[53].ms.maxLimit", DumpEntry{analogMs.channel[53].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[53].ms.minLimit", DumpEntry{analogMs.channel[53].ms.minLimit});
        res.insert_or_assign("analogMs.channel[53].ms.accLength", DumpEntry{analogMs.channel[53].ms.accLength});
        res.insert_or_assign("analogMs.channel[53].ms.firMask", DumpEntry{analogMs.channel[53].ms.firMask});
        res.insert_or_assign("analogMs.channel[54].ms.algorithms", DumpEntry{analogMs.channel[54].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[54].ms.algorithms.alg", DumpEntry{analogMs.channel[54].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[54].ms.offset", DumpEntry{analogMs.channel[54].ms.offset});
        res.insert_or_assign("analogMs.channel[54].ms.iirA", DumpEntry{analogMs.channel[54].ms.iirA});
        res.insert_or_assign("analogMs.channel[54].ms.iirB", DumpEntry{analogMs.channel[54].ms.iirB});
        res.insert_or_assign("analogMs.channel[54].ms.maxLimit", DumpEntry{analogMs.channel[54].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[54].ms.minLimit", DumpEntry{analogMs.channel[54].ms.minLimit});
        res.insert_or_assign("analogMs.channel[54].ms.accLength", DumpEntry{analogMs.channel[54].ms.accLength});
        res.insert_or_assign("analogMs.channel[54].ms.firMask", DumpEntry{analogMs.channel[54].ms.firMask});
        res.insert_or_assign("analogMs.channel[55].ms.algorithms", DumpEntry{analogMs.channel[55].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[55].ms.algorithms.alg", DumpEntry{analogMs.channel[55].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[55].ms.offset", DumpEntry{analogMs.channel[55].ms.offset});
        res.insert_or_assign("analogMs.channel[55].ms.iirA", DumpEntry{analogMs.channel[55].ms.iirA});
        res.insert_or_assign("analogMs.channel[55].ms.iirB", DumpEntry{analogMs.channel[55].ms.iirB});
        res.insert_or_assign("analogMs.channel[55].ms.maxLimit", DumpEntry{analogMs.channel[55].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[55].ms.minLimit", DumpEntry{analogMs.channel[55].ms.minLimit});
        res.insert_or_assign("analogMs.channel[55].ms.accLength", DumpEntry{analogMs.channel[55].ms.accLength});
        res.insert_or_assign("analogMs.channel[55].ms.firMask", DumpEntry{analogMs.channel[55].ms.firMask});
        res.insert_or_assign("analogMs.channel[56].ms.algorithms", DumpEntry{analogMs.channel[56].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[56].ms.algorithms.alg", DumpEntry{analogMs.channel[56].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[56].ms.offset", DumpEntry{analogMs.channel[56].ms.offset});
        res.insert_or_assign("analogMs.channel[56].ms.iirA", DumpEntry{analogMs.channel[56].ms.iirA});
        res.insert_or_assign("analogMs.channel[56].ms.iirB", DumpEntry{analogMs.channel[56].ms.iirB});
        res.insert_or_assign("analogMs.channel[56].ms.maxLimit", DumpEntry{analogMs.channel[56].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[56].ms.minLimit", DumpEntry{analogMs.channel[56].ms.minLimit});
        res.insert_or_assign("analogMs.channel[56].ms.accLength", DumpEntry{analogMs.channel[56].ms.accLength});
        res.insert_or_assign("analogMs.channel[56].ms.firMask", DumpEntry{analogMs.channel[56].ms.firMask});
        res.insert_or_assign("analogMs.channel[57].ms.algorithms", DumpEntry{analogMs.channel[57].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[57].ms.algorithms.alg", DumpEntry{analogMs.channel[57].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[57].ms.offset", DumpEntry{analogMs.channel[57].ms.offset});
        res.insert_or_assign("analogMs.channel[57].ms.iirA", DumpEntry{analogMs.channel[57].ms.iirA});
        res.insert_or_assign("analogMs.channel[57].ms.iirB", DumpEntry{analogMs.channel[57].ms.iirB});
        res.insert_or_assign("analogMs.channel[57].ms.maxLimit", DumpEntry{analogMs.channel[57].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[57].ms.minLimit", DumpEntry{analogMs.channel[57].ms.minLimit});
        res.insert_or_assign("analogMs.channel[57].ms.accLength", DumpEntry{analogMs.channel[57].ms.accLength});
        res.insert_or_assign("analogMs.channel[57].ms.firMask", DumpEntry{analogMs.channel[57].ms.firMask});
        res.insert_or_assign("analogMs.channel[58].ms.algorithms", DumpEntry{analogMs.channel[58].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[58].ms.algorithms.alg", DumpEntry{analogMs.channel[58].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[58].ms.offset", DumpEntry{analogMs.channel[58].ms.offset});
        res.insert_or_assign("analogMs.channel[58].ms.iirA", DumpEntry{analogMs.channel[58].ms.iirA});
        res.insert_or_assign("analogMs.channel[58].ms.iirB", DumpEntry{analogMs.channel[58].ms.iirB});
        res.insert_or_assign("analogMs.channel[58].ms.maxLimit", DumpEntry{analogMs.channel[58].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[58].ms.minLimit", DumpEntry{analogMs.channel[58].ms.minLimit});
        res.insert_or_assign("analogMs.channel[58].ms.accLength", DumpEntry{analogMs.channel[58].ms.accLength});
        res.insert_or_assign("analogMs.channel[58].ms.firMask", DumpEntry{analogMs.channel[58].ms.firMask});
        res.insert_or_assign("analogMs.channel[59].ms.algorithms", DumpEntry{analogMs.channel[59].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[59].ms.algorithms.alg", DumpEntry{analogMs.channel[59].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[59].ms.offset", DumpEntry{analogMs.channel[59].ms.offset});
        res.insert_or_assign("analogMs.channel[59].ms.iirA", DumpEntry{analogMs.channel[59].ms.iirA});
        res.insert_or_assign("analogMs.channel[59].ms.iirB", DumpEntry{analogMs.channel[59].ms.iirB});
        res.insert_or_assign("analogMs.channel[59].ms.maxLimit", DumpEntry{analogMs.channel[59].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[59].ms.minLimit", DumpEntry{analogMs.channel[59].ms.minLimit});
        res.insert_or_assign("analogMs.channel[59].ms.accLength", DumpEntry{analogMs.channel[59].ms.accLength});
        res.insert_or_assign("analogMs.channel[59].ms.firMask", DumpEntry{analogMs.channel[59].ms.firMask});
        res.insert_or_assign("analogMs.channel[60].ms.algorithms", DumpEntry{analogMs.channel[60].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[60].ms.algorithms.alg", DumpEntry{analogMs.channel[60].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[60].ms.offset", DumpEntry{analogMs.channel[60].ms.offset});
        res.insert_or_assign("analogMs.channel[60].ms.iirA", DumpEntry{analogMs.channel[60].ms.iirA});
        res.insert_or_assign("analogMs.channel[60].ms.iirB", DumpEntry{analogMs.channel[60].ms.iirB});
        res.insert_or_assign("analogMs.channel[60].ms.maxLimit", DumpEntry{analogMs.channel[60].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[60].ms.minLimit", DumpEntry{analogMs.channel[60].ms.minLimit});
        res.insert_or_assign("analogMs.channel[60].ms.accLength", DumpEntry{analogMs.channel[60].ms.accLength});
        res.insert_or_assign("analogMs.channel[60].ms.firMask", DumpEntry{analogMs.channel[60].ms.firMask});
        res.insert_or_assign("analogMs.channel[61].ms.algorithms", DumpEntry{analogMs.channel[61].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[61].ms.algorithms.alg", DumpEntry{analogMs.channel[61].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[61].ms.offset", DumpEntry{analogMs.channel[61].ms.offset});
        res.insert_or_assign("analogMs.channel[61].ms.iirA", DumpEntry{analogMs.channel[61].ms.iirA});
        res.insert_or_assign("analogMs.channel[61].ms.iirB", DumpEntry{analogMs.channel[61].ms.iirB});
        res.insert_or_assign("analogMs.channel[61].ms.maxLimit", DumpEntry{analogMs.channel[61].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[61].ms.minLimit", DumpEntry{analogMs.channel[61].ms.minLimit});
        res.insert_or_assign("analogMs.channel[61].ms.accLength", DumpEntry{analogMs.channel[61].ms.accLength});
        res.insert_or_assign("analogMs.channel[61].ms.firMask", DumpEntry{analogMs.channel[61].ms.firMask});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI0::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI0::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI0::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI0::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI0`
    //!
    //! @param digI0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digI0
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI0& digI0)
    {
        DumpMap res{digI0.base()};
        res.insert_or_assign("digI0.staticParams", DumpEntry{digI0.staticParams});
        res.insert_or_assign("digI0.staticParams.invertIsEn", DumpEntry{digI0.staticParams.invertIsEn});
        res.insert_or_assign("digI0.staticParams.enableIsEn", DumpEntry{digI0.staticParams.enableIsEn});
        res.insert_or_assign("digI0.staticParams.latchIsEn", DumpEntry{digI0.staticParams.latchIsEn});
        res.insert_or_assign("digI0.staticParams.deglitchIsEn", DumpEntry{digI0.staticParams.deglitchIsEn});
        res.insert_or_assign("digI0.staticParams.reTimeIsEn", DumpEntry{digI0.staticParams.reTimeIsEn});
        res.insert_or_assign("digI0.staticParams.numChannels", DumpEntry{digI0.staticParams.numChannels});
        res.insert_or_assign("digI0.data", DumpEntry{digI0.data});
        res.insert_or_assign("digI0.dataChanged", DumpEntry{digI0.dataChanged});
        res.insert_or_assign("digI0.invert", DumpEntry{digI0.invert});
        res.insert_or_assign("digI0.enable", DumpEntry{digI0.enable});
        res.insert_or_assign("digI0.latch", DumpEntry{digI0.latch});
        res.insert_or_assign("digI0.rstLatch", DumpEntry{digI0.rstLatch});
        res.insert_or_assign("digI0.risingInterrupt", DumpEntry{digI0.risingInterrupt});
        res.insert_or_assign("digI0.fallingInterrupt", DumpEntry{digI0.fallingInterrupt});
        res.insert_or_assign("digI0.fastFilterSc[0].val", DumpEntry{digI0.fastFilterSc[0].val});
        res.insert_or_assign("digI0.fastFilterSc[1].val", DumpEntry{digI0.fastFilterSc[1].val});
        res.insert_or_assign("digI0.fastFilterSc[2].val", DumpEntry{digI0.fastFilterSc[2].val});
        res.insert_or_assign("digI0.fastFilterSc[3].val", DumpEntry{digI0.fastFilterSc[3].val});
        res.insert_or_assign("digI0.fastFilterSc[4].val", DumpEntry{digI0.fastFilterSc[4].val});
        res.insert_or_assign("digI0.fastFilterSc[5].val", DumpEntry{digI0.fastFilterSc[5].val});
        res.insert_or_assign("digI0.fastFilterSc[6].val", DumpEntry{digI0.fastFilterSc[6].val});
        res.insert_or_assign("digI0.fastFilterSc[7].val", DumpEntry{digI0.fastFilterSc[7].val});
        res.insert_or_assign("digI0.fastFilterSc[8].val", DumpEntry{digI0.fastFilterSc[8].val});
        res.insert_or_assign("digI0.fastFilterSc[9].val", DumpEntry{digI0.fastFilterSc[9].val});
        res.insert_or_assign("digI0.fastFilterSc[10].val", DumpEntry{digI0.fastFilterSc[10].val});
        res.insert_or_assign("digI0.fastFilterSc[11].val", DumpEntry{digI0.fastFilterSc[11].val});
        res.insert_or_assign("digI0.fastFilterSc[12].val", DumpEntry{digI0.fastFilterSc[12].val});
        res.insert_or_assign("digI0.fastFilterSc[13].val", DumpEntry{digI0.fastFilterSc[13].val});
        res.insert_or_assign("digI0.fastFilterSc[14].val", DumpEntry{digI0.fastFilterSc[14].val});
        res.insert_or_assign("digI0.fastFilterSc[15].val", DumpEntry{digI0.fastFilterSc[15].val});
        res.insert_or_assign("digI0.fastFilterSc[16].val", DumpEntry{digI0.fastFilterSc[16].val});
        res.insert_or_assign("digI0.fastFilterSc[17].val", DumpEntry{digI0.fastFilterSc[17].val});
        res.insert_or_assign("digI0.fastFilterSc[18].val", DumpEntry{digI0.fastFilterSc[18].val});
        res.insert_or_assign("digI0.fastFilterSc[19].val", DumpEntry{digI0.fastFilterSc[19].val});
        res.insert_or_assign("digI0.fastFilterSc[20].val", DumpEntry{digI0.fastFilterSc[20].val});
        res.insert_or_assign("digI0.fastFilterSc[21].val", DumpEntry{digI0.fastFilterSc[21].val});
        res.insert_or_assign("digI0.fastFilterSc[22].val", DumpEntry{digI0.fastFilterSc[22].val});
        res.insert_or_assign("digI0.fastFilterSc[23].val", DumpEntry{digI0.fastFilterSc[23].val});
        res.insert_or_assign("digI0.fastFilterSc[24].val", DumpEntry{digI0.fastFilterSc[24].val});
        res.insert_or_assign("digI0.fastFilterSc[25].val", DumpEntry{digI0.fastFilterSc[25].val});
        res.insert_or_assign("digI0.fastFilterSc[26].val", DumpEntry{digI0.fastFilterSc[26].val});
        res.insert_or_assign("digI0.fastFilterSc[27].val", DumpEntry{digI0.fastFilterSc[27].val});
        res.insert_or_assign("digI0.fastFilterSc[28].val", DumpEntry{digI0.fastFilterSc[28].val});
        res.insert_or_assign("digI0.fastFilterSc[29].val", DumpEntry{digI0.fastFilterSc[29].val});
        res.insert_or_assign("digI0.fastFilterSc[30].val", DumpEntry{digI0.fastFilterSc[30].val});
        res.insert_or_assign("digI0.fastFilterSc[31].val", DumpEntry{digI0.fastFilterSc[31].val});
        res.insert_or_assign("digI0.slowFilterSc[0].val", DumpEntry{digI0.slowFilterSc[0].val});
        res.insert_or_assign("digI0.slowFilterSc[1].val", DumpEntry{digI0.slowFilterSc[1].val});
        res.insert_or_assign("digI0.slowFilterSc[2].val", DumpEntry{digI0.slowFilterSc[2].val});
        res.insert_or_assign("digI0.slowFilterSc[3].val", DumpEntry{digI0.slowFilterSc[3].val});
        res.insert_or_assign("digI0.slowFilterSc[4].val", DumpEntry{digI0.slowFilterSc[4].val});
        res.insert_or_assign("digI0.slowFilterSc[5].val", DumpEntry{digI0.slowFilterSc[5].val});
        res.insert_or_assign("digI0.slowFilterSc[6].val", DumpEntry{digI0.slowFilterSc[6].val});
        res.insert_or_assign("digI0.slowFilterSc[7].val", DumpEntry{digI0.slowFilterSc[7].val});
        res.insert_or_assign("digI0.slowFilterSc[8].val", DumpEntry{digI0.slowFilterSc[8].val});
        res.insert_or_assign("digI0.slowFilterSc[9].val", DumpEntry{digI0.slowFilterSc[9].val});
        res.insert_or_assign("digI0.slowFilterSc[10].val", DumpEntry{digI0.slowFilterSc[10].val});
        res.insert_or_assign("digI0.slowFilterSc[11].val", DumpEntry{digI0.slowFilterSc[11].val});
        res.insert_or_assign("digI0.slowFilterSc[12].val", DumpEntry{digI0.slowFilterSc[12].val});
        res.insert_or_assign("digI0.slowFilterSc[13].val", DumpEntry{digI0.slowFilterSc[13].val});
        res.insert_or_assign("digI0.slowFilterSc[14].val", DumpEntry{digI0.slowFilterSc[14].val});
        res.insert_or_assign("digI0.slowFilterSc[15].val", DumpEntry{digI0.slowFilterSc[15].val});
        res.insert_or_assign("digI0.slowFilterSc[16].val", DumpEntry{digI0.slowFilterSc[16].val});
        res.insert_or_assign("digI0.slowFilterSc[17].val", DumpEntry{digI0.slowFilterSc[17].val});
        res.insert_or_assign("digI0.slowFilterSc[18].val", DumpEntry{digI0.slowFilterSc[18].val});
        res.insert_or_assign("digI0.slowFilterSc[19].val", DumpEntry{digI0.slowFilterSc[19].val});
        res.insert_or_assign("digI0.slowFilterSc[20].val", DumpEntry{digI0.slowFilterSc[20].val});
        res.insert_or_assign("digI0.slowFilterSc[21].val", DumpEntry{digI0.slowFilterSc[21].val});
        res.insert_or_assign("digI0.slowFilterSc[22].val", DumpEntry{digI0.slowFilterSc[22].val});
        res.insert_or_assign("digI0.slowFilterSc[23].val", DumpEntry{digI0.slowFilterSc[23].val});
        res.insert_or_assign("digI0.slowFilterSc[24].val", DumpEntry{digI0.slowFilterSc[24].val});
        res.insert_or_assign("digI0.slowFilterSc[25].val", DumpEntry{digI0.slowFilterSc[25].val});
        res.insert_or_assign("digI0.slowFilterSc[26].val", DumpEntry{digI0.slowFilterSc[26].val});
        res.insert_or_assign("digI0.slowFilterSc[27].val", DumpEntry{digI0.slowFilterSc[27].val});
        res.insert_or_assign("digI0.slowFilterSc[28].val", DumpEntry{digI0.slowFilterSc[28].val});
        res.insert_or_assign("digI0.slowFilterSc[29].val", DumpEntry{digI0.slowFilterSc[29].val});
        res.insert_or_assign("digI0.slowFilterSc[30].val", DumpEntry{digI0.slowFilterSc[30].val});
        res.insert_or_assign("digI0.slowFilterSc[31].val", DumpEntry{digI0.slowFilterSc[31].val});
        res.insert_or_assign("digI0.reTime[0].s", DumpEntry{digI0.reTime[0].s});
        res.insert_or_assign("digI0.reTime[0].ns", DumpEntry{digI0.reTime[0].ns});
        res.insert_or_assign("digI0.reTime[1].s", DumpEntry{digI0.reTime[1].s});
        res.insert_or_assign("digI0.reTime[1].ns", DumpEntry{digI0.reTime[1].ns});
        res.insert_or_assign("digI0.reTime[2].s", DumpEntry{digI0.reTime[2].s});
        res.insert_or_assign("digI0.reTime[2].ns", DumpEntry{digI0.reTime[2].ns});
        res.insert_or_assign("digI0.reTime[3].s", DumpEntry{digI0.reTime[3].s});
        res.insert_or_assign("digI0.reTime[3].ns", DumpEntry{digI0.reTime[3].ns});
        res.insert_or_assign("digI0.reTime[4].s", DumpEntry{digI0.reTime[4].s});
        res.insert_or_assign("digI0.reTime[4].ns", DumpEntry{digI0.reTime[4].ns});
        res.insert_or_assign("digI0.reTime[5].s", DumpEntry{digI0.reTime[5].s});
        res.insert_or_assign("digI0.reTime[5].ns", DumpEntry{digI0.reTime[5].ns});
        res.insert_or_assign("digI0.reTime[6].s", DumpEntry{digI0.reTime[6].s});
        res.insert_or_assign("digI0.reTime[6].ns", DumpEntry{digI0.reTime[6].ns});
        res.insert_or_assign("digI0.reTime[7].s", DumpEntry{digI0.reTime[7].s});
        res.insert_or_assign("digI0.reTime[7].ns", DumpEntry{digI0.reTime[7].ns});
        res.insert_or_assign("digI0.reTime[8].s", DumpEntry{digI0.reTime[8].s});
        res.insert_or_assign("digI0.reTime[8].ns", DumpEntry{digI0.reTime[8].ns});
        res.insert_or_assign("digI0.reTime[9].s", DumpEntry{digI0.reTime[9].s});
        res.insert_or_assign("digI0.reTime[9].ns", DumpEntry{digI0.reTime[9].ns});
        res.insert_or_assign("digI0.reTime[10].s", DumpEntry{digI0.reTime[10].s});
        res.insert_or_assign("digI0.reTime[10].ns", DumpEntry{digI0.reTime[10].ns});
        res.insert_or_assign("digI0.reTime[11].s", DumpEntry{digI0.reTime[11].s});
        res.insert_or_assign("digI0.reTime[11].ns", DumpEntry{digI0.reTime[11].ns});
        res.insert_or_assign("digI0.reTime[12].s", DumpEntry{digI0.reTime[12].s});
        res.insert_or_assign("digI0.reTime[12].ns", DumpEntry{digI0.reTime[12].ns});
        res.insert_or_assign("digI0.reTime[13].s", DumpEntry{digI0.reTime[13].s});
        res.insert_or_assign("digI0.reTime[13].ns", DumpEntry{digI0.reTime[13].ns});
        res.insert_or_assign("digI0.reTime[14].s", DumpEntry{digI0.reTime[14].s});
        res.insert_or_assign("digI0.reTime[14].ns", DumpEntry{digI0.reTime[14].ns});
        res.insert_or_assign("digI0.reTime[15].s", DumpEntry{digI0.reTime[15].s});
        res.insert_or_assign("digI0.reTime[15].ns", DumpEntry{digI0.reTime[15].ns});
        res.insert_or_assign("digI0.reTime[16].s", DumpEntry{digI0.reTime[16].s});
        res.insert_or_assign("digI0.reTime[16].ns", DumpEntry{digI0.reTime[16].ns});
        res.insert_or_assign("digI0.reTime[17].s", DumpEntry{digI0.reTime[17].s});
        res.insert_or_assign("digI0.reTime[17].ns", DumpEntry{digI0.reTime[17].ns});
        res.insert_or_assign("digI0.reTime[18].s", DumpEntry{digI0.reTime[18].s});
        res.insert_or_assign("digI0.reTime[18].ns", DumpEntry{digI0.reTime[18].ns});
        res.insert_or_assign("digI0.reTime[19].s", DumpEntry{digI0.reTime[19].s});
        res.insert_or_assign("digI0.reTime[19].ns", DumpEntry{digI0.reTime[19].ns});
        res.insert_or_assign("digI0.reTime[20].s", DumpEntry{digI0.reTime[20].s});
        res.insert_or_assign("digI0.reTime[20].ns", DumpEntry{digI0.reTime[20].ns});
        res.insert_or_assign("digI0.reTime[21].s", DumpEntry{digI0.reTime[21].s});
        res.insert_or_assign("digI0.reTime[21].ns", DumpEntry{digI0.reTime[21].ns});
        res.insert_or_assign("digI0.reTime[22].s", DumpEntry{digI0.reTime[22].s});
        res.insert_or_assign("digI0.reTime[22].ns", DumpEntry{digI0.reTime[22].ns});
        res.insert_or_assign("digI0.reTime[23].s", DumpEntry{digI0.reTime[23].s});
        res.insert_or_assign("digI0.reTime[23].ns", DumpEntry{digI0.reTime[23].ns});
        res.insert_or_assign("digI0.reTime[24].s", DumpEntry{digI0.reTime[24].s});
        res.insert_or_assign("digI0.reTime[24].ns", DumpEntry{digI0.reTime[24].ns});
        res.insert_or_assign("digI0.reTime[25].s", DumpEntry{digI0.reTime[25].s});
        res.insert_or_assign("digI0.reTime[25].ns", DumpEntry{digI0.reTime[25].ns});
        res.insert_or_assign("digI0.reTime[26].s", DumpEntry{digI0.reTime[26].s});
        res.insert_or_assign("digI0.reTime[26].ns", DumpEntry{digI0.reTime[26].ns});
        res.insert_or_assign("digI0.reTime[27].s", DumpEntry{digI0.reTime[27].s});
        res.insert_or_assign("digI0.reTime[27].ns", DumpEntry{digI0.reTime[27].ns});
        res.insert_or_assign("digI0.reTime[28].s", DumpEntry{digI0.reTime[28].s});
        res.insert_or_assign("digI0.reTime[28].ns", DumpEntry{digI0.reTime[28].ns});
        res.insert_or_assign("digI0.reTime[29].s", DumpEntry{digI0.reTime[29].s});
        res.insert_or_assign("digI0.reTime[29].ns", DumpEntry{digI0.reTime[29].ns});
        res.insert_or_assign("digI0.reTime[30].s", DumpEntry{digI0.reTime[30].s});
        res.insert_or_assign("digI0.reTime[30].ns", DumpEntry{digI0.reTime[30].ns});
        res.insert_or_assign("digI0.reTime[31].s", DumpEntry{digI0.reTime[31].s});
        res.insert_or_assign("digI0.reTime[31].ns", DumpEntry{digI0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI1::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI1::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI1::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI1::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigI1`
    //!
    //! @param digI1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digI1
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigI1& digI1)
    {
        DumpMap res{digI1.base()};
        res.insert_or_assign("digI1.staticParams", DumpEntry{digI1.staticParams});
        res.insert_or_assign("digI1.staticParams.invertIsEn", DumpEntry{digI1.staticParams.invertIsEn});
        res.insert_or_assign("digI1.staticParams.enableIsEn", DumpEntry{digI1.staticParams.enableIsEn});
        res.insert_or_assign("digI1.staticParams.latchIsEn", DumpEntry{digI1.staticParams.latchIsEn});
        res.insert_or_assign("digI1.staticParams.deglitchIsEn", DumpEntry{digI1.staticParams.deglitchIsEn});
        res.insert_or_assign("digI1.staticParams.reTimeIsEn", DumpEntry{digI1.staticParams.reTimeIsEn});
        res.insert_or_assign("digI1.staticParams.numChannels", DumpEntry{digI1.staticParams.numChannels});
        res.insert_or_assign("digI1.data", DumpEntry{digI1.data});
        res.insert_or_assign("digI1.dataChanged", DumpEntry{digI1.dataChanged});
        res.insert_or_assign("digI1.invert", DumpEntry{digI1.invert});
        res.insert_or_assign("digI1.enable", DumpEntry{digI1.enable});
        res.insert_or_assign("digI1.latch", DumpEntry{digI1.latch});
        res.insert_or_assign("digI1.rstLatch", DumpEntry{digI1.rstLatch});
        res.insert_or_assign("digI1.risingInterrupt", DumpEntry{digI1.risingInterrupt});
        res.insert_or_assign("digI1.fallingInterrupt", DumpEntry{digI1.fallingInterrupt});
        res.insert_or_assign("digI1.fastFilterSc[0].val", DumpEntry{digI1.fastFilterSc[0].val});
        res.insert_or_assign("digI1.fastFilterSc[1].val", DumpEntry{digI1.fastFilterSc[1].val});
        res.insert_or_assign("digI1.fastFilterSc[2].val", DumpEntry{digI1.fastFilterSc[2].val});
        res.insert_or_assign("digI1.fastFilterSc[3].val", DumpEntry{digI1.fastFilterSc[3].val});
        res.insert_or_assign("digI1.fastFilterSc[4].val", DumpEntry{digI1.fastFilterSc[4].val});
        res.insert_or_assign("digI1.fastFilterSc[5].val", DumpEntry{digI1.fastFilterSc[5].val});
        res.insert_or_assign("digI1.fastFilterSc[6].val", DumpEntry{digI1.fastFilterSc[6].val});
        res.insert_or_assign("digI1.fastFilterSc[7].val", DumpEntry{digI1.fastFilterSc[7].val});
        res.insert_or_assign("digI1.fastFilterSc[8].val", DumpEntry{digI1.fastFilterSc[8].val});
        res.insert_or_assign("digI1.fastFilterSc[9].val", DumpEntry{digI1.fastFilterSc[9].val});
        res.insert_or_assign("digI1.fastFilterSc[10].val", DumpEntry{digI1.fastFilterSc[10].val});
        res.insert_or_assign("digI1.fastFilterSc[11].val", DumpEntry{digI1.fastFilterSc[11].val});
        res.insert_or_assign("digI1.fastFilterSc[12].val", DumpEntry{digI1.fastFilterSc[12].val});
        res.insert_or_assign("digI1.fastFilterSc[13].val", DumpEntry{digI1.fastFilterSc[13].val});
        res.insert_or_assign("digI1.fastFilterSc[14].val", DumpEntry{digI1.fastFilterSc[14].val});
        res.insert_or_assign("digI1.fastFilterSc[15].val", DumpEntry{digI1.fastFilterSc[15].val});
        res.insert_or_assign("digI1.fastFilterSc[16].val", DumpEntry{digI1.fastFilterSc[16].val});
        res.insert_or_assign("digI1.fastFilterSc[17].val", DumpEntry{digI1.fastFilterSc[17].val});
        res.insert_or_assign("digI1.fastFilterSc[18].val", DumpEntry{digI1.fastFilterSc[18].val});
        res.insert_or_assign("digI1.fastFilterSc[19].val", DumpEntry{digI1.fastFilterSc[19].val});
        res.insert_or_assign("digI1.fastFilterSc[20].val", DumpEntry{digI1.fastFilterSc[20].val});
        res.insert_or_assign("digI1.fastFilterSc[21].val", DumpEntry{digI1.fastFilterSc[21].val});
        res.insert_or_assign("digI1.fastFilterSc[22].val", DumpEntry{digI1.fastFilterSc[22].val});
        res.insert_or_assign("digI1.fastFilterSc[23].val", DumpEntry{digI1.fastFilterSc[23].val});
        res.insert_or_assign("digI1.fastFilterSc[24].val", DumpEntry{digI1.fastFilterSc[24].val});
        res.insert_or_assign("digI1.fastFilterSc[25].val", DumpEntry{digI1.fastFilterSc[25].val});
        res.insert_or_assign("digI1.fastFilterSc[26].val", DumpEntry{digI1.fastFilterSc[26].val});
        res.insert_or_assign("digI1.fastFilterSc[27].val", DumpEntry{digI1.fastFilterSc[27].val});
        res.insert_or_assign("digI1.fastFilterSc[28].val", DumpEntry{digI1.fastFilterSc[28].val});
        res.insert_or_assign("digI1.fastFilterSc[29].val", DumpEntry{digI1.fastFilterSc[29].val});
        res.insert_or_assign("digI1.fastFilterSc[30].val", DumpEntry{digI1.fastFilterSc[30].val});
        res.insert_or_assign("digI1.fastFilterSc[31].val", DumpEntry{digI1.fastFilterSc[31].val});
        res.insert_or_assign("digI1.slowFilterSc[0].val", DumpEntry{digI1.slowFilterSc[0].val});
        res.insert_or_assign("digI1.slowFilterSc[1].val", DumpEntry{digI1.slowFilterSc[1].val});
        res.insert_or_assign("digI1.slowFilterSc[2].val", DumpEntry{digI1.slowFilterSc[2].val});
        res.insert_or_assign("digI1.slowFilterSc[3].val", DumpEntry{digI1.slowFilterSc[3].val});
        res.insert_or_assign("digI1.slowFilterSc[4].val", DumpEntry{digI1.slowFilterSc[4].val});
        res.insert_or_assign("digI1.slowFilterSc[5].val", DumpEntry{digI1.slowFilterSc[5].val});
        res.insert_or_assign("digI1.slowFilterSc[6].val", DumpEntry{digI1.slowFilterSc[6].val});
        res.insert_or_assign("digI1.slowFilterSc[7].val", DumpEntry{digI1.slowFilterSc[7].val});
        res.insert_or_assign("digI1.slowFilterSc[8].val", DumpEntry{digI1.slowFilterSc[8].val});
        res.insert_or_assign("digI1.slowFilterSc[9].val", DumpEntry{digI1.slowFilterSc[9].val});
        res.insert_or_assign("digI1.slowFilterSc[10].val", DumpEntry{digI1.slowFilterSc[10].val});
        res.insert_or_assign("digI1.slowFilterSc[11].val", DumpEntry{digI1.slowFilterSc[11].val});
        res.insert_or_assign("digI1.slowFilterSc[12].val", DumpEntry{digI1.slowFilterSc[12].val});
        res.insert_or_assign("digI1.slowFilterSc[13].val", DumpEntry{digI1.slowFilterSc[13].val});
        res.insert_or_assign("digI1.slowFilterSc[14].val", DumpEntry{digI1.slowFilterSc[14].val});
        res.insert_or_assign("digI1.slowFilterSc[15].val", DumpEntry{digI1.slowFilterSc[15].val});
        res.insert_or_assign("digI1.slowFilterSc[16].val", DumpEntry{digI1.slowFilterSc[16].val});
        res.insert_or_assign("digI1.slowFilterSc[17].val", DumpEntry{digI1.slowFilterSc[17].val});
        res.insert_or_assign("digI1.slowFilterSc[18].val", DumpEntry{digI1.slowFilterSc[18].val});
        res.insert_or_assign("digI1.slowFilterSc[19].val", DumpEntry{digI1.slowFilterSc[19].val});
        res.insert_or_assign("digI1.slowFilterSc[20].val", DumpEntry{digI1.slowFilterSc[20].val});
        res.insert_or_assign("digI1.slowFilterSc[21].val", DumpEntry{digI1.slowFilterSc[21].val});
        res.insert_or_assign("digI1.slowFilterSc[22].val", DumpEntry{digI1.slowFilterSc[22].val});
        res.insert_or_assign("digI1.slowFilterSc[23].val", DumpEntry{digI1.slowFilterSc[23].val});
        res.insert_or_assign("digI1.slowFilterSc[24].val", DumpEntry{digI1.slowFilterSc[24].val});
        res.insert_or_assign("digI1.slowFilterSc[25].val", DumpEntry{digI1.slowFilterSc[25].val});
        res.insert_or_assign("digI1.slowFilterSc[26].val", DumpEntry{digI1.slowFilterSc[26].val});
        res.insert_or_assign("digI1.slowFilterSc[27].val", DumpEntry{digI1.slowFilterSc[27].val});
        res.insert_or_assign("digI1.slowFilterSc[28].val", DumpEntry{digI1.slowFilterSc[28].val});
        res.insert_or_assign("digI1.slowFilterSc[29].val", DumpEntry{digI1.slowFilterSc[29].val});
        res.insert_or_assign("digI1.slowFilterSc[30].val", DumpEntry{digI1.slowFilterSc[30].val});
        res.insert_or_assign("digI1.slowFilterSc[31].val", DumpEntry{digI1.slowFilterSc[31].val});
        res.insert_or_assign("digI1.reTime[0].s", DumpEntry{digI1.reTime[0].s});
        res.insert_or_assign("digI1.reTime[0].ns", DumpEntry{digI1.reTime[0].ns});
        res.insert_or_assign("digI1.reTime[1].s", DumpEntry{digI1.reTime[1].s});
        res.insert_or_assign("digI1.reTime[1].ns", DumpEntry{digI1.reTime[1].ns});
        res.insert_or_assign("digI1.reTime[2].s", DumpEntry{digI1.reTime[2].s});
        res.insert_or_assign("digI1.reTime[2].ns", DumpEntry{digI1.reTime[2].ns});
        res.insert_or_assign("digI1.reTime[3].s", DumpEntry{digI1.reTime[3].s});
        res.insert_or_assign("digI1.reTime[3].ns", DumpEntry{digI1.reTime[3].ns});
        res.insert_or_assign("digI1.reTime[4].s", DumpEntry{digI1.reTime[4].s});
        res.insert_or_assign("digI1.reTime[4].ns", DumpEntry{digI1.reTime[4].ns});
        res.insert_or_assign("digI1.reTime[5].s", DumpEntry{digI1.reTime[5].s});
        res.insert_or_assign("digI1.reTime[5].ns", DumpEntry{digI1.reTime[5].ns});
        res.insert_or_assign("digI1.reTime[6].s", DumpEntry{digI1.reTime[6].s});
        res.insert_or_assign("digI1.reTime[6].ns", DumpEntry{digI1.reTime[6].ns});
        res.insert_or_assign("digI1.reTime[7].s", DumpEntry{digI1.reTime[7].s});
        res.insert_or_assign("digI1.reTime[7].ns", DumpEntry{digI1.reTime[7].ns});
        res.insert_or_assign("digI1.reTime[8].s", DumpEntry{digI1.reTime[8].s});
        res.insert_or_assign("digI1.reTime[8].ns", DumpEntry{digI1.reTime[8].ns});
        res.insert_or_assign("digI1.reTime[9].s", DumpEntry{digI1.reTime[9].s});
        res.insert_or_assign("digI1.reTime[9].ns", DumpEntry{digI1.reTime[9].ns});
        res.insert_or_assign("digI1.reTime[10].s", DumpEntry{digI1.reTime[10].s});
        res.insert_or_assign("digI1.reTime[10].ns", DumpEntry{digI1.reTime[10].ns});
        res.insert_or_assign("digI1.reTime[11].s", DumpEntry{digI1.reTime[11].s});
        res.insert_or_assign("digI1.reTime[11].ns", DumpEntry{digI1.reTime[11].ns});
        res.insert_or_assign("digI1.reTime[12].s", DumpEntry{digI1.reTime[12].s});
        res.insert_or_assign("digI1.reTime[12].ns", DumpEntry{digI1.reTime[12].ns});
        res.insert_or_assign("digI1.reTime[13].s", DumpEntry{digI1.reTime[13].s});
        res.insert_or_assign("digI1.reTime[13].ns", DumpEntry{digI1.reTime[13].ns});
        res.insert_or_assign("digI1.reTime[14].s", DumpEntry{digI1.reTime[14].s});
        res.insert_or_assign("digI1.reTime[14].ns", DumpEntry{digI1.reTime[14].ns});
        res.insert_or_assign("digI1.reTime[15].s", DumpEntry{digI1.reTime[15].s});
        res.insert_or_assign("digI1.reTime[15].ns", DumpEntry{digI1.reTime[15].ns});
        res.insert_or_assign("digI1.reTime[16].s", DumpEntry{digI1.reTime[16].s});
        res.insert_or_assign("digI1.reTime[16].ns", DumpEntry{digI1.reTime[16].ns});
        res.insert_or_assign("digI1.reTime[17].s", DumpEntry{digI1.reTime[17].s});
        res.insert_or_assign("digI1.reTime[17].ns", DumpEntry{digI1.reTime[17].ns});
        res.insert_or_assign("digI1.reTime[18].s", DumpEntry{digI1.reTime[18].s});
        res.insert_or_assign("digI1.reTime[18].ns", DumpEntry{digI1.reTime[18].ns});
        res.insert_or_assign("digI1.reTime[19].s", DumpEntry{digI1.reTime[19].s});
        res.insert_or_assign("digI1.reTime[19].ns", DumpEntry{digI1.reTime[19].ns});
        res.insert_or_assign("digI1.reTime[20].s", DumpEntry{digI1.reTime[20].s});
        res.insert_or_assign("digI1.reTime[20].ns", DumpEntry{digI1.reTime[20].ns});
        res.insert_or_assign("digI1.reTime[21].s", DumpEntry{digI1.reTime[21].s});
        res.insert_or_assign("digI1.reTime[21].ns", DumpEntry{digI1.reTime[21].ns});
        res.insert_or_assign("digI1.reTime[22].s", DumpEntry{digI1.reTime[22].s});
        res.insert_or_assign("digI1.reTime[22].ns", DumpEntry{digI1.reTime[22].ns});
        res.insert_or_assign("digI1.reTime[23].s", DumpEntry{digI1.reTime[23].s});
        res.insert_or_assign("digI1.reTime[23].ns", DumpEntry{digI1.reTime[23].ns});
        res.insert_or_assign("digI1.reTime[24].s", DumpEntry{digI1.reTime[24].s});
        res.insert_or_assign("digI1.reTime[24].ns", DumpEntry{digI1.reTime[24].ns});
        res.insert_or_assign("digI1.reTime[25].s", DumpEntry{digI1.reTime[25].s});
        res.insert_or_assign("digI1.reTime[25].ns", DumpEntry{digI1.reTime[25].ns});
        res.insert_or_assign("digI1.reTime[26].s", DumpEntry{digI1.reTime[26].s});
        res.insert_or_assign("digI1.reTime[26].ns", DumpEntry{digI1.reTime[26].ns});
        res.insert_or_assign("digI1.reTime[27].s", DumpEntry{digI1.reTime[27].s});
        res.insert_or_assign("digI1.reTime[27].ns", DumpEntry{digI1.reTime[27].ns});
        res.insert_or_assign("digI1.reTime[28].s", DumpEntry{digI1.reTime[28].s});
        res.insert_or_assign("digI1.reTime[28].ns", DumpEntry{digI1.reTime[28].ns});
        res.insert_or_assign("digI1.reTime[29].s", DumpEntry{digI1.reTime[29].s});
        res.insert_or_assign("digI1.reTime[29].ns", DumpEntry{digI1.reTime[29].ns});
        res.insert_or_assign("digI1.reTime[30].s", DumpEntry{digI1.reTime[30].s});
        res.insert_or_assign("digI1.reTime[30].ns", DumpEntry{digI1.reTime[30].ns});
        res.insert_or_assign("digI1.reTime[31].s", DumpEntry{digI1.reTime[31].s});
        res.insert_or_assign("digI1.reTime[31].ns", DumpEntry{digI1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigIndI::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigIndI::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigIndI::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigIndI::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigIndI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigIndI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::DigIndI`
    //!
    //! @param digIndI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digIndI
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::DigIndI& digIndI)
    {
        DumpMap res{digIndI.base()};
        res.insert_or_assign("digIndI.staticParams", DumpEntry{digIndI.staticParams});
        res.insert_or_assign("digIndI.staticParams.invertIsEn", DumpEntry{digIndI.staticParams.invertIsEn});
        res.insert_or_assign("digIndI.staticParams.enableIsEn", DumpEntry{digIndI.staticParams.enableIsEn});
        res.insert_or_assign("digIndI.staticParams.latchIsEn", DumpEntry{digIndI.staticParams.latchIsEn});
        res.insert_or_assign("digIndI.staticParams.deglitchIsEn", DumpEntry{digIndI.staticParams.deglitchIsEn});
        res.insert_or_assign("digIndI.staticParams.reTimeIsEn", DumpEntry{digIndI.staticParams.reTimeIsEn});
        res.insert_or_assign("digIndI.staticParams.numChannels", DumpEntry{digIndI.staticParams.numChannels});
        res.insert_or_assign("digIndI.data", DumpEntry{digIndI.data});
        res.insert_or_assign("digIndI.dataChanged", DumpEntry{digIndI.dataChanged});
        res.insert_or_assign("digIndI.invert", DumpEntry{digIndI.invert});
        res.insert_or_assign("digIndI.enable", DumpEntry{digIndI.enable});
        res.insert_or_assign("digIndI.latch", DumpEntry{digIndI.latch});
        res.insert_or_assign("digIndI.rstLatch", DumpEntry{digIndI.rstLatch});
        res.insert_or_assign("digIndI.risingInterrupt", DumpEntry{digIndI.risingInterrupt});
        res.insert_or_assign("digIndI.fallingInterrupt", DumpEntry{digIndI.fallingInterrupt});
        res.insert_or_assign("digIndI.fastFilterSc[0].val", DumpEntry{digIndI.fastFilterSc[0].val});
        res.insert_or_assign("digIndI.fastFilterSc[1].val", DumpEntry{digIndI.fastFilterSc[1].val});
        res.insert_or_assign("digIndI.fastFilterSc[2].val", DumpEntry{digIndI.fastFilterSc[2].val});
        res.insert_or_assign("digIndI.fastFilterSc[3].val", DumpEntry{digIndI.fastFilterSc[3].val});
        res.insert_or_assign("digIndI.fastFilterSc[4].val", DumpEntry{digIndI.fastFilterSc[4].val});
        res.insert_or_assign("digIndI.fastFilterSc[5].val", DumpEntry{digIndI.fastFilterSc[5].val});
        res.insert_or_assign("digIndI.fastFilterSc[6].val", DumpEntry{digIndI.fastFilterSc[6].val});
        res.insert_or_assign("digIndI.fastFilterSc[7].val", DumpEntry{digIndI.fastFilterSc[7].val});
        res.insert_or_assign("digIndI.fastFilterSc[8].val", DumpEntry{digIndI.fastFilterSc[8].val});
        res.insert_or_assign("digIndI.fastFilterSc[9].val", DumpEntry{digIndI.fastFilterSc[9].val});
        res.insert_or_assign("digIndI.fastFilterSc[10].val", DumpEntry{digIndI.fastFilterSc[10].val});
        res.insert_or_assign("digIndI.fastFilterSc[11].val", DumpEntry{digIndI.fastFilterSc[11].val});
        res.insert_or_assign("digIndI.fastFilterSc[12].val", DumpEntry{digIndI.fastFilterSc[12].val});
        res.insert_or_assign("digIndI.fastFilterSc[13].val", DumpEntry{digIndI.fastFilterSc[13].val});
        res.insert_or_assign("digIndI.fastFilterSc[14].val", DumpEntry{digIndI.fastFilterSc[14].val});
        res.insert_or_assign("digIndI.fastFilterSc[15].val", DumpEntry{digIndI.fastFilterSc[15].val});
        res.insert_or_assign("digIndI.fastFilterSc[16].val", DumpEntry{digIndI.fastFilterSc[16].val});
        res.insert_or_assign("digIndI.fastFilterSc[17].val", DumpEntry{digIndI.fastFilterSc[17].val});
        res.insert_or_assign("digIndI.fastFilterSc[18].val", DumpEntry{digIndI.fastFilterSc[18].val});
        res.insert_or_assign("digIndI.fastFilterSc[19].val", DumpEntry{digIndI.fastFilterSc[19].val});
        res.insert_or_assign("digIndI.fastFilterSc[20].val", DumpEntry{digIndI.fastFilterSc[20].val});
        res.insert_or_assign("digIndI.fastFilterSc[21].val", DumpEntry{digIndI.fastFilterSc[21].val});
        res.insert_or_assign("digIndI.fastFilterSc[22].val", DumpEntry{digIndI.fastFilterSc[22].val});
        res.insert_or_assign("digIndI.fastFilterSc[23].val", DumpEntry{digIndI.fastFilterSc[23].val});
        res.insert_or_assign("digIndI.fastFilterSc[24].val", DumpEntry{digIndI.fastFilterSc[24].val});
        res.insert_or_assign("digIndI.fastFilterSc[25].val", DumpEntry{digIndI.fastFilterSc[25].val});
        res.insert_or_assign("digIndI.fastFilterSc[26].val", DumpEntry{digIndI.fastFilterSc[26].val});
        res.insert_or_assign("digIndI.fastFilterSc[27].val", DumpEntry{digIndI.fastFilterSc[27].val});
        res.insert_or_assign("digIndI.fastFilterSc[28].val", DumpEntry{digIndI.fastFilterSc[28].val});
        res.insert_or_assign("digIndI.fastFilterSc[29].val", DumpEntry{digIndI.fastFilterSc[29].val});
        res.insert_or_assign("digIndI.fastFilterSc[30].val", DumpEntry{digIndI.fastFilterSc[30].val});
        res.insert_or_assign("digIndI.fastFilterSc[31].val", DumpEntry{digIndI.fastFilterSc[31].val});
        res.insert_or_assign("digIndI.slowFilterSc[0].val", DumpEntry{digIndI.slowFilterSc[0].val});
        res.insert_or_assign("digIndI.slowFilterSc[1].val", DumpEntry{digIndI.slowFilterSc[1].val});
        res.insert_or_assign("digIndI.slowFilterSc[2].val", DumpEntry{digIndI.slowFilterSc[2].val});
        res.insert_or_assign("digIndI.slowFilterSc[3].val", DumpEntry{digIndI.slowFilterSc[3].val});
        res.insert_or_assign("digIndI.slowFilterSc[4].val", DumpEntry{digIndI.slowFilterSc[4].val});
        res.insert_or_assign("digIndI.slowFilterSc[5].val", DumpEntry{digIndI.slowFilterSc[5].val});
        res.insert_or_assign("digIndI.slowFilterSc[6].val", DumpEntry{digIndI.slowFilterSc[6].val});
        res.insert_or_assign("digIndI.slowFilterSc[7].val", DumpEntry{digIndI.slowFilterSc[7].val});
        res.insert_or_assign("digIndI.slowFilterSc[8].val", DumpEntry{digIndI.slowFilterSc[8].val});
        res.insert_or_assign("digIndI.slowFilterSc[9].val", DumpEntry{digIndI.slowFilterSc[9].val});
        res.insert_or_assign("digIndI.slowFilterSc[10].val", DumpEntry{digIndI.slowFilterSc[10].val});
        res.insert_or_assign("digIndI.slowFilterSc[11].val", DumpEntry{digIndI.slowFilterSc[11].val});
        res.insert_or_assign("digIndI.slowFilterSc[12].val", DumpEntry{digIndI.slowFilterSc[12].val});
        res.insert_or_assign("digIndI.slowFilterSc[13].val", DumpEntry{digIndI.slowFilterSc[13].val});
        res.insert_or_assign("digIndI.slowFilterSc[14].val", DumpEntry{digIndI.slowFilterSc[14].val});
        res.insert_or_assign("digIndI.slowFilterSc[15].val", DumpEntry{digIndI.slowFilterSc[15].val});
        res.insert_or_assign("digIndI.slowFilterSc[16].val", DumpEntry{digIndI.slowFilterSc[16].val});
        res.insert_or_assign("digIndI.slowFilterSc[17].val", DumpEntry{digIndI.slowFilterSc[17].val});
        res.insert_or_assign("digIndI.slowFilterSc[18].val", DumpEntry{digIndI.slowFilterSc[18].val});
        res.insert_or_assign("digIndI.slowFilterSc[19].val", DumpEntry{digIndI.slowFilterSc[19].val});
        res.insert_or_assign("digIndI.slowFilterSc[20].val", DumpEntry{digIndI.slowFilterSc[20].val});
        res.insert_or_assign("digIndI.slowFilterSc[21].val", DumpEntry{digIndI.slowFilterSc[21].val});
        res.insert_or_assign("digIndI.slowFilterSc[22].val", DumpEntry{digIndI.slowFilterSc[22].val});
        res.insert_or_assign("digIndI.slowFilterSc[23].val", DumpEntry{digIndI.slowFilterSc[23].val});
        res.insert_or_assign("digIndI.slowFilterSc[24].val", DumpEntry{digIndI.slowFilterSc[24].val});
        res.insert_or_assign("digIndI.slowFilterSc[25].val", DumpEntry{digIndI.slowFilterSc[25].val});
        res.insert_or_assign("digIndI.slowFilterSc[26].val", DumpEntry{digIndI.slowFilterSc[26].val});
        res.insert_or_assign("digIndI.slowFilterSc[27].val", DumpEntry{digIndI.slowFilterSc[27].val});
        res.insert_or_assign("digIndI.slowFilterSc[28].val", DumpEntry{digIndI.slowFilterSc[28].val});
        res.insert_or_assign("digIndI.slowFilterSc[29].val", DumpEntry{digIndI.slowFilterSc[29].val});
        res.insert_or_assign("digIndI.slowFilterSc[30].val", DumpEntry{digIndI.slowFilterSc[30].val});
        res.insert_or_assign("digIndI.slowFilterSc[31].val", DumpEntry{digIndI.slowFilterSc[31].val});
        res.insert_or_assign("digIndI.reTime[0].s", DumpEntry{digIndI.reTime[0].s});
        res.insert_or_assign("digIndI.reTime[0].ns", DumpEntry{digIndI.reTime[0].ns});
        res.insert_or_assign("digIndI.reTime[1].s", DumpEntry{digIndI.reTime[1].s});
        res.insert_or_assign("digIndI.reTime[1].ns", DumpEntry{digIndI.reTime[1].ns});
        res.insert_or_assign("digIndI.reTime[2].s", DumpEntry{digIndI.reTime[2].s});
        res.insert_or_assign("digIndI.reTime[2].ns", DumpEntry{digIndI.reTime[2].ns});
        res.insert_or_assign("digIndI.reTime[3].s", DumpEntry{digIndI.reTime[3].s});
        res.insert_or_assign("digIndI.reTime[3].ns", DumpEntry{digIndI.reTime[3].ns});
        res.insert_or_assign("digIndI.reTime[4].s", DumpEntry{digIndI.reTime[4].s});
        res.insert_or_assign("digIndI.reTime[4].ns", DumpEntry{digIndI.reTime[4].ns});
        res.insert_or_assign("digIndI.reTime[5].s", DumpEntry{digIndI.reTime[5].s});
        res.insert_or_assign("digIndI.reTime[5].ns", DumpEntry{digIndI.reTime[5].ns});
        res.insert_or_assign("digIndI.reTime[6].s", DumpEntry{digIndI.reTime[6].s});
        res.insert_or_assign("digIndI.reTime[6].ns", DumpEntry{digIndI.reTime[6].ns});
        res.insert_or_assign("digIndI.reTime[7].s", DumpEntry{digIndI.reTime[7].s});
        res.insert_or_assign("digIndI.reTime[7].ns", DumpEntry{digIndI.reTime[7].ns});
        res.insert_or_assign("digIndI.reTime[8].s", DumpEntry{digIndI.reTime[8].s});
        res.insert_or_assign("digIndI.reTime[8].ns", DumpEntry{digIndI.reTime[8].ns});
        res.insert_or_assign("digIndI.reTime[9].s", DumpEntry{digIndI.reTime[9].s});
        res.insert_or_assign("digIndI.reTime[9].ns", DumpEntry{digIndI.reTime[9].ns});
        res.insert_or_assign("digIndI.reTime[10].s", DumpEntry{digIndI.reTime[10].s});
        res.insert_or_assign("digIndI.reTime[10].ns", DumpEntry{digIndI.reTime[10].ns});
        res.insert_or_assign("digIndI.reTime[11].s", DumpEntry{digIndI.reTime[11].s});
        res.insert_or_assign("digIndI.reTime[11].ns", DumpEntry{digIndI.reTime[11].ns});
        res.insert_or_assign("digIndI.reTime[12].s", DumpEntry{digIndI.reTime[12].s});
        res.insert_or_assign("digIndI.reTime[12].ns", DumpEntry{digIndI.reTime[12].ns});
        res.insert_or_assign("digIndI.reTime[13].s", DumpEntry{digIndI.reTime[13].s});
        res.insert_or_assign("digIndI.reTime[13].ns", DumpEntry{digIndI.reTime[13].ns});
        res.insert_or_assign("digIndI.reTime[14].s", DumpEntry{digIndI.reTime[14].s});
        res.insert_or_assign("digIndI.reTime[14].ns", DumpEntry{digIndI.reTime[14].ns});
        res.insert_or_assign("digIndI.reTime[15].s", DumpEntry{digIndI.reTime[15].s});
        res.insert_or_assign("digIndI.reTime[15].ns", DumpEntry{digIndI.reTime[15].ns});
        res.insert_or_assign("digIndI.reTime[16].s", DumpEntry{digIndI.reTime[16].s});
        res.insert_or_assign("digIndI.reTime[16].ns", DumpEntry{digIndI.reTime[16].ns});
        res.insert_or_assign("digIndI.reTime[17].s", DumpEntry{digIndI.reTime[17].s});
        res.insert_or_assign("digIndI.reTime[17].ns", DumpEntry{digIndI.reTime[17].ns});
        res.insert_or_assign("digIndI.reTime[18].s", DumpEntry{digIndI.reTime[18].s});
        res.insert_or_assign("digIndI.reTime[18].ns", DumpEntry{digIndI.reTime[18].ns});
        res.insert_or_assign("digIndI.reTime[19].s", DumpEntry{digIndI.reTime[19].s});
        res.insert_or_assign("digIndI.reTime[19].ns", DumpEntry{digIndI.reTime[19].ns});
        res.insert_or_assign("digIndI.reTime[20].s", DumpEntry{digIndI.reTime[20].s});
        res.insert_or_assign("digIndI.reTime[20].ns", DumpEntry{digIndI.reTime[20].ns});
        res.insert_or_assign("digIndI.reTime[21].s", DumpEntry{digIndI.reTime[21].s});
        res.insert_or_assign("digIndI.reTime[21].ns", DumpEntry{digIndI.reTime[21].ns});
        res.insert_or_assign("digIndI.reTime[22].s", DumpEntry{digIndI.reTime[22].s});
        res.insert_or_assign("digIndI.reTime[22].ns", DumpEntry{digIndI.reTime[22].ns});
        res.insert_or_assign("digIndI.reTime[23].s", DumpEntry{digIndI.reTime[23].s});
        res.insert_or_assign("digIndI.reTime[23].ns", DumpEntry{digIndI.reTime[23].ns});
        res.insert_or_assign("digIndI.reTime[24].s", DumpEntry{digIndI.reTime[24].s});
        res.insert_or_assign("digIndI.reTime[24].ns", DumpEntry{digIndI.reTime[24].ns});
        res.insert_or_assign("digIndI.reTime[25].s", DumpEntry{digIndI.reTime[25].s});
        res.insert_or_assign("digIndI.reTime[25].ns", DumpEntry{digIndI.reTime[25].ns});
        res.insert_or_assign("digIndI.reTime[26].s", DumpEntry{digIndI.reTime[26].s});
        res.insert_or_assign("digIndI.reTime[26].ns", DumpEntry{digIndI.reTime[26].ns});
        res.insert_or_assign("digIndI.reTime[27].s", DumpEntry{digIndI.reTime[27].s});
        res.insert_or_assign("digIndI.reTime[27].ns", DumpEntry{digIndI.reTime[27].ns});
        res.insert_or_assign("digIndI.reTime[28].s", DumpEntry{digIndI.reTime[28].s});
        res.insert_or_assign("digIndI.reTime[28].ns", DumpEntry{digIndI.reTime[28].ns});
        res.insert_or_assign("digIndI.reTime[29].s", DumpEntry{digIndI.reTime[29].s});
        res.insert_or_assign("digIndI.reTime[29].ns", DumpEntry{digIndI.reTime[29].ns});
        res.insert_or_assign("digIndI.reTime[30].s", DumpEntry{digIndI.reTime[30].s});
        res.insert_or_assign("digIndI.reTime[30].ns", DumpEntry{digIndI.reTime[30].ns});
        res.insert_or_assign("digIndI.reTime[31].s", DumpEntry{digIndI.reTime[31].s});
        res.insert_or_assign("digIndI.reTime[31].ns", DumpEntry{digIndI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::ContactI::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::ContactI::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::ContactI::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::ContactI::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::ContactI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::ContactI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::ContactI`
    //!
    //! @param contactI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under contactI
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::ContactI& contactI)
    {
        DumpMap res{contactI.base()};
        res.insert_or_assign("contactI.staticParams", DumpEntry{contactI.staticParams});
        res.insert_or_assign("contactI.staticParams.invertIsEn", DumpEntry{contactI.staticParams.invertIsEn});
        res.insert_or_assign("contactI.staticParams.enableIsEn", DumpEntry{contactI.staticParams.enableIsEn});
        res.insert_or_assign("contactI.staticParams.latchIsEn", DumpEntry{contactI.staticParams.latchIsEn});
        res.insert_or_assign("contactI.staticParams.deglitchIsEn", DumpEntry{contactI.staticParams.deglitchIsEn});
        res.insert_or_assign("contactI.staticParams.reTimeIsEn", DumpEntry{contactI.staticParams.reTimeIsEn});
        res.insert_or_assign("contactI.staticParams.numChannels", DumpEntry{contactI.staticParams.numChannels});
        res.insert_or_assign("contactI.data", DumpEntry{contactI.data});
        res.insert_or_assign("contactI.dataChanged", DumpEntry{contactI.dataChanged});
        res.insert_or_assign("contactI.invert", DumpEntry{contactI.invert});
        res.insert_or_assign("contactI.enable", DumpEntry{contactI.enable});
        res.insert_or_assign("contactI.latch", DumpEntry{contactI.latch});
        res.insert_or_assign("contactI.rstLatch", DumpEntry{contactI.rstLatch});
        res.insert_or_assign("contactI.risingInterrupt", DumpEntry{contactI.risingInterrupt});
        res.insert_or_assign("contactI.fallingInterrupt", DumpEntry{contactI.fallingInterrupt});
        res.insert_or_assign("contactI.fastFilterSc[0].val", DumpEntry{contactI.fastFilterSc[0].val});
        res.insert_or_assign("contactI.fastFilterSc[1].val", DumpEntry{contactI.fastFilterSc[1].val});
        res.insert_or_assign("contactI.fastFilterSc[2].val", DumpEntry{contactI.fastFilterSc[2].val});
        res.insert_or_assign("contactI.fastFilterSc[3].val", DumpEntry{contactI.fastFilterSc[3].val});
        res.insert_or_assign("contactI.fastFilterSc[4].val", DumpEntry{contactI.fastFilterSc[4].val});
        res.insert_or_assign("contactI.fastFilterSc[5].val", DumpEntry{contactI.fastFilterSc[5].val});
        res.insert_or_assign("contactI.fastFilterSc[6].val", DumpEntry{contactI.fastFilterSc[6].val});
        res.insert_or_assign("contactI.fastFilterSc[7].val", DumpEntry{contactI.fastFilterSc[7].val});
        res.insert_or_assign("contactI.fastFilterSc[8].val", DumpEntry{contactI.fastFilterSc[8].val});
        res.insert_or_assign("contactI.fastFilterSc[9].val", DumpEntry{contactI.fastFilterSc[9].val});
        res.insert_or_assign("contactI.fastFilterSc[10].val", DumpEntry{contactI.fastFilterSc[10].val});
        res.insert_or_assign("contactI.fastFilterSc[11].val", DumpEntry{contactI.fastFilterSc[11].val});
        res.insert_or_assign("contactI.fastFilterSc[12].val", DumpEntry{contactI.fastFilterSc[12].val});
        res.insert_or_assign("contactI.fastFilterSc[13].val", DumpEntry{contactI.fastFilterSc[13].val});
        res.insert_or_assign("contactI.fastFilterSc[14].val", DumpEntry{contactI.fastFilterSc[14].val});
        res.insert_or_assign("contactI.fastFilterSc[15].val", DumpEntry{contactI.fastFilterSc[15].val});
        res.insert_or_assign("contactI.fastFilterSc[16].val", DumpEntry{contactI.fastFilterSc[16].val});
        res.insert_or_assign("contactI.fastFilterSc[17].val", DumpEntry{contactI.fastFilterSc[17].val});
        res.insert_or_assign("contactI.fastFilterSc[18].val", DumpEntry{contactI.fastFilterSc[18].val});
        res.insert_or_assign("contactI.fastFilterSc[19].val", DumpEntry{contactI.fastFilterSc[19].val});
        res.insert_or_assign("contactI.fastFilterSc[20].val", DumpEntry{contactI.fastFilterSc[20].val});
        res.insert_or_assign("contactI.fastFilterSc[21].val", DumpEntry{contactI.fastFilterSc[21].val});
        res.insert_or_assign("contactI.fastFilterSc[22].val", DumpEntry{contactI.fastFilterSc[22].val});
        res.insert_or_assign("contactI.fastFilterSc[23].val", DumpEntry{contactI.fastFilterSc[23].val});
        res.insert_or_assign("contactI.fastFilterSc[24].val", DumpEntry{contactI.fastFilterSc[24].val});
        res.insert_or_assign("contactI.fastFilterSc[25].val", DumpEntry{contactI.fastFilterSc[25].val});
        res.insert_or_assign("contactI.fastFilterSc[26].val", DumpEntry{contactI.fastFilterSc[26].val});
        res.insert_or_assign("contactI.fastFilterSc[27].val", DumpEntry{contactI.fastFilterSc[27].val});
        res.insert_or_assign("contactI.fastFilterSc[28].val", DumpEntry{contactI.fastFilterSc[28].val});
        res.insert_or_assign("contactI.fastFilterSc[29].val", DumpEntry{contactI.fastFilterSc[29].val});
        res.insert_or_assign("contactI.fastFilterSc[30].val", DumpEntry{contactI.fastFilterSc[30].val});
        res.insert_or_assign("contactI.fastFilterSc[31].val", DumpEntry{contactI.fastFilterSc[31].val});
        res.insert_or_assign("contactI.slowFilterSc[0].val", DumpEntry{contactI.slowFilterSc[0].val});
        res.insert_or_assign("contactI.slowFilterSc[1].val", DumpEntry{contactI.slowFilterSc[1].val});
        res.insert_or_assign("contactI.slowFilterSc[2].val", DumpEntry{contactI.slowFilterSc[2].val});
        res.insert_or_assign("contactI.slowFilterSc[3].val", DumpEntry{contactI.slowFilterSc[3].val});
        res.insert_or_assign("contactI.slowFilterSc[4].val", DumpEntry{contactI.slowFilterSc[4].val});
        res.insert_or_assign("contactI.slowFilterSc[5].val", DumpEntry{contactI.slowFilterSc[5].val});
        res.insert_or_assign("contactI.slowFilterSc[6].val", DumpEntry{contactI.slowFilterSc[6].val});
        res.insert_or_assign("contactI.slowFilterSc[7].val", DumpEntry{contactI.slowFilterSc[7].val});
        res.insert_or_assign("contactI.slowFilterSc[8].val", DumpEntry{contactI.slowFilterSc[8].val});
        res.insert_or_assign("contactI.slowFilterSc[9].val", DumpEntry{contactI.slowFilterSc[9].val});
        res.insert_or_assign("contactI.slowFilterSc[10].val", DumpEntry{contactI.slowFilterSc[10].val});
        res.insert_or_assign("contactI.slowFilterSc[11].val", DumpEntry{contactI.slowFilterSc[11].val});
        res.insert_or_assign("contactI.slowFilterSc[12].val", DumpEntry{contactI.slowFilterSc[12].val});
        res.insert_or_assign("contactI.slowFilterSc[13].val", DumpEntry{contactI.slowFilterSc[13].val});
        res.insert_or_assign("contactI.slowFilterSc[14].val", DumpEntry{contactI.slowFilterSc[14].val});
        res.insert_or_assign("contactI.slowFilterSc[15].val", DumpEntry{contactI.slowFilterSc[15].val});
        res.insert_or_assign("contactI.slowFilterSc[16].val", DumpEntry{contactI.slowFilterSc[16].val});
        res.insert_or_assign("contactI.slowFilterSc[17].val", DumpEntry{contactI.slowFilterSc[17].val});
        res.insert_or_assign("contactI.slowFilterSc[18].val", DumpEntry{contactI.slowFilterSc[18].val});
        res.insert_or_assign("contactI.slowFilterSc[19].val", DumpEntry{contactI.slowFilterSc[19].val});
        res.insert_or_assign("contactI.slowFilterSc[20].val", DumpEntry{contactI.slowFilterSc[20].val});
        res.insert_or_assign("contactI.slowFilterSc[21].val", DumpEntry{contactI.slowFilterSc[21].val});
        res.insert_or_assign("contactI.slowFilterSc[22].val", DumpEntry{contactI.slowFilterSc[22].val});
        res.insert_or_assign("contactI.slowFilterSc[23].val", DumpEntry{contactI.slowFilterSc[23].val});
        res.insert_or_assign("contactI.slowFilterSc[24].val", DumpEntry{contactI.slowFilterSc[24].val});
        res.insert_or_assign("contactI.slowFilterSc[25].val", DumpEntry{contactI.slowFilterSc[25].val});
        res.insert_or_assign("contactI.slowFilterSc[26].val", DumpEntry{contactI.slowFilterSc[26].val});
        res.insert_or_assign("contactI.slowFilterSc[27].val", DumpEntry{contactI.slowFilterSc[27].val});
        res.insert_or_assign("contactI.slowFilterSc[28].val", DumpEntry{contactI.slowFilterSc[28].val});
        res.insert_or_assign("contactI.slowFilterSc[29].val", DumpEntry{contactI.slowFilterSc[29].val});
        res.insert_or_assign("contactI.slowFilterSc[30].val", DumpEntry{contactI.slowFilterSc[30].val});
        res.insert_or_assign("contactI.slowFilterSc[31].val", DumpEntry{contactI.slowFilterSc[31].val});
        res.insert_or_assign("contactI.reTime[0].s", DumpEntry{contactI.reTime[0].s});
        res.insert_or_assign("contactI.reTime[0].ns", DumpEntry{contactI.reTime[0].ns});
        res.insert_or_assign("contactI.reTime[1].s", DumpEntry{contactI.reTime[1].s});
        res.insert_or_assign("contactI.reTime[1].ns", DumpEntry{contactI.reTime[1].ns});
        res.insert_or_assign("contactI.reTime[2].s", DumpEntry{contactI.reTime[2].s});
        res.insert_or_assign("contactI.reTime[2].ns", DumpEntry{contactI.reTime[2].ns});
        res.insert_or_assign("contactI.reTime[3].s", DumpEntry{contactI.reTime[3].s});
        res.insert_or_assign("contactI.reTime[3].ns", DumpEntry{contactI.reTime[3].ns});
        res.insert_or_assign("contactI.reTime[4].s", DumpEntry{contactI.reTime[4].s});
        res.insert_or_assign("contactI.reTime[4].ns", DumpEntry{contactI.reTime[4].ns});
        res.insert_or_assign("contactI.reTime[5].s", DumpEntry{contactI.reTime[5].s});
        res.insert_or_assign("contactI.reTime[5].ns", DumpEntry{contactI.reTime[5].ns});
        res.insert_or_assign("contactI.reTime[6].s", DumpEntry{contactI.reTime[6].s});
        res.insert_or_assign("contactI.reTime[6].ns", DumpEntry{contactI.reTime[6].ns});
        res.insert_or_assign("contactI.reTime[7].s", DumpEntry{contactI.reTime[7].s});
        res.insert_or_assign("contactI.reTime[7].ns", DumpEntry{contactI.reTime[7].ns});
        res.insert_or_assign("contactI.reTime[8].s", DumpEntry{contactI.reTime[8].s});
        res.insert_or_assign("contactI.reTime[8].ns", DumpEntry{contactI.reTime[8].ns});
        res.insert_or_assign("contactI.reTime[9].s", DumpEntry{contactI.reTime[9].s});
        res.insert_or_assign("contactI.reTime[9].ns", DumpEntry{contactI.reTime[9].ns});
        res.insert_or_assign("contactI.reTime[10].s", DumpEntry{contactI.reTime[10].s});
        res.insert_or_assign("contactI.reTime[10].ns", DumpEntry{contactI.reTime[10].ns});
        res.insert_or_assign("contactI.reTime[11].s", DumpEntry{contactI.reTime[11].s});
        res.insert_or_assign("contactI.reTime[11].ns", DumpEntry{contactI.reTime[11].ns});
        res.insert_or_assign("contactI.reTime[12].s", DumpEntry{contactI.reTime[12].s});
        res.insert_or_assign("contactI.reTime[12].ns", DumpEntry{contactI.reTime[12].ns});
        res.insert_or_assign("contactI.reTime[13].s", DumpEntry{contactI.reTime[13].s});
        res.insert_or_assign("contactI.reTime[13].ns", DumpEntry{contactI.reTime[13].ns});
        res.insert_or_assign("contactI.reTime[14].s", DumpEntry{contactI.reTime[14].s});
        res.insert_or_assign("contactI.reTime[14].ns", DumpEntry{contactI.reTime[14].ns});
        res.insert_or_assign("contactI.reTime[15].s", DumpEntry{contactI.reTime[15].s});
        res.insert_or_assign("contactI.reTime[15].ns", DumpEntry{contactI.reTime[15].ns});
        res.insert_or_assign("contactI.reTime[16].s", DumpEntry{contactI.reTime[16].s});
        res.insert_or_assign("contactI.reTime[16].ns", DumpEntry{contactI.reTime[16].ns});
        res.insert_or_assign("contactI.reTime[17].s", DumpEntry{contactI.reTime[17].s});
        res.insert_or_assign("contactI.reTime[17].ns", DumpEntry{contactI.reTime[17].ns});
        res.insert_or_assign("contactI.reTime[18].s", DumpEntry{contactI.reTime[18].s});
        res.insert_or_assign("contactI.reTime[18].ns", DumpEntry{contactI.reTime[18].ns});
        res.insert_or_assign("contactI.reTime[19].s", DumpEntry{contactI.reTime[19].s});
        res.insert_or_assign("contactI.reTime[19].ns", DumpEntry{contactI.reTime[19].ns});
        res.insert_or_assign("contactI.reTime[20].s", DumpEntry{contactI.reTime[20].s});
        res.insert_or_assign("contactI.reTime[20].ns", DumpEntry{contactI.reTime[20].ns});
        res.insert_or_assign("contactI.reTime[21].s", DumpEntry{contactI.reTime[21].s});
        res.insert_or_assign("contactI.reTime[21].ns", DumpEntry{contactI.reTime[21].ns});
        res.insert_or_assign("contactI.reTime[22].s", DumpEntry{contactI.reTime[22].s});
        res.insert_or_assign("contactI.reTime[22].ns", DumpEntry{contactI.reTime[22].ns});
        res.insert_or_assign("contactI.reTime[23].s", DumpEntry{contactI.reTime[23].s});
        res.insert_or_assign("contactI.reTime[23].ns", DumpEntry{contactI.reTime[23].ns});
        res.insert_or_assign("contactI.reTime[24].s", DumpEntry{contactI.reTime[24].s});
        res.insert_or_assign("contactI.reTime[24].ns", DumpEntry{contactI.reTime[24].ns});
        res.insert_or_assign("contactI.reTime[25].s", DumpEntry{contactI.reTime[25].s});
        res.insert_or_assign("contactI.reTime[25].ns", DumpEntry{contactI.reTime[25].ns});
        res.insert_or_assign("contactI.reTime[26].s", DumpEntry{contactI.reTime[26].s});
        res.insert_or_assign("contactI.reTime[26].ns", DumpEntry{contactI.reTime[26].ns});
        res.insert_or_assign("contactI.reTime[27].s", DumpEntry{contactI.reTime[27].s});
        res.insert_or_assign("contactI.reTime[27].ns", DumpEntry{contactI.reTime[27].ns});
        res.insert_or_assign("contactI.reTime[28].s", DumpEntry{contactI.reTime[28].s});
        res.insert_or_assign("contactI.reTime[28].ns", DumpEntry{contactI.reTime[28].ns});
        res.insert_or_assign("contactI.reTime[29].s", DumpEntry{contactI.reTime[29].s});
        res.insert_or_assign("contactI.reTime[29].ns", DumpEntry{contactI.reTime[29].ns});
        res.insert_or_assign("contactI.reTime[30].s", DumpEntry{contactI.reTime[30].s});
        res.insert_or_assign("contactI.reTime[30].ns", DumpEntry{contactI.reTime[30].ns});
        res.insert_or_assign("contactI.reTime[31].s", DumpEntry{contactI.reTime[31].s});
        res.insert_or_assign("contactI.reTime[31].ns", DumpEntry{contactI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::OpticalI::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::OpticalI::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::OpticalI::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::OpticalI::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::OpticalI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::OpticalI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::OpticalI`
    //!
    //! @param opticalI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under opticalI
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::OpticalI& opticalI)
    {
        DumpMap res{opticalI.base()};
        res.insert_or_assign("opticalI.staticParams", DumpEntry{opticalI.staticParams});
        res.insert_or_assign("opticalI.staticParams.invertIsEn", DumpEntry{opticalI.staticParams.invertIsEn});
        res.insert_or_assign("opticalI.staticParams.enableIsEn", DumpEntry{opticalI.staticParams.enableIsEn});
        res.insert_or_assign("opticalI.staticParams.latchIsEn", DumpEntry{opticalI.staticParams.latchIsEn});
        res.insert_or_assign("opticalI.staticParams.deglitchIsEn", DumpEntry{opticalI.staticParams.deglitchIsEn});
        res.insert_or_assign("opticalI.staticParams.reTimeIsEn", DumpEntry{opticalI.staticParams.reTimeIsEn});
        res.insert_or_assign("opticalI.staticParams.numChannels", DumpEntry{opticalI.staticParams.numChannels});
        res.insert_or_assign("opticalI.data", DumpEntry{opticalI.data});
        res.insert_or_assign("opticalI.dataChanged", DumpEntry{opticalI.dataChanged});
        res.insert_or_assign("opticalI.invert", DumpEntry{opticalI.invert});
        res.insert_or_assign("opticalI.enable", DumpEntry{opticalI.enable});
        res.insert_or_assign("opticalI.latch", DumpEntry{opticalI.latch});
        res.insert_or_assign("opticalI.rstLatch", DumpEntry{opticalI.rstLatch});
        res.insert_or_assign("opticalI.risingInterrupt", DumpEntry{opticalI.risingInterrupt});
        res.insert_or_assign("opticalI.fallingInterrupt", DumpEntry{opticalI.fallingInterrupt});
        res.insert_or_assign("opticalI.fastFilterSc[0].val", DumpEntry{opticalI.fastFilterSc[0].val});
        res.insert_or_assign("opticalI.fastFilterSc[1].val", DumpEntry{opticalI.fastFilterSc[1].val});
        res.insert_or_assign("opticalI.fastFilterSc[2].val", DumpEntry{opticalI.fastFilterSc[2].val});
        res.insert_or_assign("opticalI.fastFilterSc[3].val", DumpEntry{opticalI.fastFilterSc[3].val});
        res.insert_or_assign("opticalI.fastFilterSc[4].val", DumpEntry{opticalI.fastFilterSc[4].val});
        res.insert_or_assign("opticalI.fastFilterSc[5].val", DumpEntry{opticalI.fastFilterSc[5].val});
        res.insert_or_assign("opticalI.fastFilterSc[6].val", DumpEntry{opticalI.fastFilterSc[6].val});
        res.insert_or_assign("opticalI.fastFilterSc[7].val", DumpEntry{opticalI.fastFilterSc[7].val});
        res.insert_or_assign("opticalI.fastFilterSc[8].val", DumpEntry{opticalI.fastFilterSc[8].val});
        res.insert_or_assign("opticalI.fastFilterSc[9].val", DumpEntry{opticalI.fastFilterSc[9].val});
        res.insert_or_assign("opticalI.fastFilterSc[10].val", DumpEntry{opticalI.fastFilterSc[10].val});
        res.insert_or_assign("opticalI.fastFilterSc[11].val", DumpEntry{opticalI.fastFilterSc[11].val});
        res.insert_or_assign("opticalI.fastFilterSc[12].val", DumpEntry{opticalI.fastFilterSc[12].val});
        res.insert_or_assign("opticalI.fastFilterSc[13].val", DumpEntry{opticalI.fastFilterSc[13].val});
        res.insert_or_assign("opticalI.fastFilterSc[14].val", DumpEntry{opticalI.fastFilterSc[14].val});
        res.insert_or_assign("opticalI.fastFilterSc[15].val", DumpEntry{opticalI.fastFilterSc[15].val});
        res.insert_or_assign("opticalI.fastFilterSc[16].val", DumpEntry{opticalI.fastFilterSc[16].val});
        res.insert_or_assign("opticalI.fastFilterSc[17].val", DumpEntry{opticalI.fastFilterSc[17].val});
        res.insert_or_assign("opticalI.fastFilterSc[18].val", DumpEntry{opticalI.fastFilterSc[18].val});
        res.insert_or_assign("opticalI.fastFilterSc[19].val", DumpEntry{opticalI.fastFilterSc[19].val});
        res.insert_or_assign("opticalI.fastFilterSc[20].val", DumpEntry{opticalI.fastFilterSc[20].val});
        res.insert_or_assign("opticalI.fastFilterSc[21].val", DumpEntry{opticalI.fastFilterSc[21].val});
        res.insert_or_assign("opticalI.fastFilterSc[22].val", DumpEntry{opticalI.fastFilterSc[22].val});
        res.insert_or_assign("opticalI.fastFilterSc[23].val", DumpEntry{opticalI.fastFilterSc[23].val});
        res.insert_or_assign("opticalI.fastFilterSc[24].val", DumpEntry{opticalI.fastFilterSc[24].val});
        res.insert_or_assign("opticalI.fastFilterSc[25].val", DumpEntry{opticalI.fastFilterSc[25].val});
        res.insert_or_assign("opticalI.fastFilterSc[26].val", DumpEntry{opticalI.fastFilterSc[26].val});
        res.insert_or_assign("opticalI.fastFilterSc[27].val", DumpEntry{opticalI.fastFilterSc[27].val});
        res.insert_or_assign("opticalI.fastFilterSc[28].val", DumpEntry{opticalI.fastFilterSc[28].val});
        res.insert_or_assign("opticalI.fastFilterSc[29].val", DumpEntry{opticalI.fastFilterSc[29].val});
        res.insert_or_assign("opticalI.fastFilterSc[30].val", DumpEntry{opticalI.fastFilterSc[30].val});
        res.insert_or_assign("opticalI.fastFilterSc[31].val", DumpEntry{opticalI.fastFilterSc[31].val});
        res.insert_or_assign("opticalI.slowFilterSc[0].val", DumpEntry{opticalI.slowFilterSc[0].val});
        res.insert_or_assign("opticalI.slowFilterSc[1].val", DumpEntry{opticalI.slowFilterSc[1].val});
        res.insert_or_assign("opticalI.slowFilterSc[2].val", DumpEntry{opticalI.slowFilterSc[2].val});
        res.insert_or_assign("opticalI.slowFilterSc[3].val", DumpEntry{opticalI.slowFilterSc[3].val});
        res.insert_or_assign("opticalI.slowFilterSc[4].val", DumpEntry{opticalI.slowFilterSc[4].val});
        res.insert_or_assign("opticalI.slowFilterSc[5].val", DumpEntry{opticalI.slowFilterSc[5].val});
        res.insert_or_assign("opticalI.slowFilterSc[6].val", DumpEntry{opticalI.slowFilterSc[6].val});
        res.insert_or_assign("opticalI.slowFilterSc[7].val", DumpEntry{opticalI.slowFilterSc[7].val});
        res.insert_or_assign("opticalI.slowFilterSc[8].val", DumpEntry{opticalI.slowFilterSc[8].val});
        res.insert_or_assign("opticalI.slowFilterSc[9].val", DumpEntry{opticalI.slowFilterSc[9].val});
        res.insert_or_assign("opticalI.slowFilterSc[10].val", DumpEntry{opticalI.slowFilterSc[10].val});
        res.insert_or_assign("opticalI.slowFilterSc[11].val", DumpEntry{opticalI.slowFilterSc[11].val});
        res.insert_or_assign("opticalI.slowFilterSc[12].val", DumpEntry{opticalI.slowFilterSc[12].val});
        res.insert_or_assign("opticalI.slowFilterSc[13].val", DumpEntry{opticalI.slowFilterSc[13].val});
        res.insert_or_assign("opticalI.slowFilterSc[14].val", DumpEntry{opticalI.slowFilterSc[14].val});
        res.insert_or_assign("opticalI.slowFilterSc[15].val", DumpEntry{opticalI.slowFilterSc[15].val});
        res.insert_or_assign("opticalI.slowFilterSc[16].val", DumpEntry{opticalI.slowFilterSc[16].val});
        res.insert_or_assign("opticalI.slowFilterSc[17].val", DumpEntry{opticalI.slowFilterSc[17].val});
        res.insert_or_assign("opticalI.slowFilterSc[18].val", DumpEntry{opticalI.slowFilterSc[18].val});
        res.insert_or_assign("opticalI.slowFilterSc[19].val", DumpEntry{opticalI.slowFilterSc[19].val});
        res.insert_or_assign("opticalI.slowFilterSc[20].val", DumpEntry{opticalI.slowFilterSc[20].val});
        res.insert_or_assign("opticalI.slowFilterSc[21].val", DumpEntry{opticalI.slowFilterSc[21].val});
        res.insert_or_assign("opticalI.slowFilterSc[22].val", DumpEntry{opticalI.slowFilterSc[22].val});
        res.insert_or_assign("opticalI.slowFilterSc[23].val", DumpEntry{opticalI.slowFilterSc[23].val});
        res.insert_or_assign("opticalI.slowFilterSc[24].val", DumpEntry{opticalI.slowFilterSc[24].val});
        res.insert_or_assign("opticalI.slowFilterSc[25].val", DumpEntry{opticalI.slowFilterSc[25].val});
        res.insert_or_assign("opticalI.slowFilterSc[26].val", DumpEntry{opticalI.slowFilterSc[26].val});
        res.insert_or_assign("opticalI.slowFilterSc[27].val", DumpEntry{opticalI.slowFilterSc[27].val});
        res.insert_or_assign("opticalI.slowFilterSc[28].val", DumpEntry{opticalI.slowFilterSc[28].val});
        res.insert_or_assign("opticalI.slowFilterSc[29].val", DumpEntry{opticalI.slowFilterSc[29].val});
        res.insert_or_assign("opticalI.slowFilterSc[30].val", DumpEntry{opticalI.slowFilterSc[30].val});
        res.insert_or_assign("opticalI.slowFilterSc[31].val", DumpEntry{opticalI.slowFilterSc[31].val});
        res.insert_or_assign("opticalI.reTime[0].s", DumpEntry{opticalI.reTime[0].s});
        res.insert_or_assign("opticalI.reTime[0].ns", DumpEntry{opticalI.reTime[0].ns});
        res.insert_or_assign("opticalI.reTime[1].s", DumpEntry{opticalI.reTime[1].s});
        res.insert_or_assign("opticalI.reTime[1].ns", DumpEntry{opticalI.reTime[1].ns});
        res.insert_or_assign("opticalI.reTime[2].s", DumpEntry{opticalI.reTime[2].s});
        res.insert_or_assign("opticalI.reTime[2].ns", DumpEntry{opticalI.reTime[2].ns});
        res.insert_or_assign("opticalI.reTime[3].s", DumpEntry{opticalI.reTime[3].s});
        res.insert_or_assign("opticalI.reTime[3].ns", DumpEntry{opticalI.reTime[3].ns});
        res.insert_or_assign("opticalI.reTime[4].s", DumpEntry{opticalI.reTime[4].s});
        res.insert_or_assign("opticalI.reTime[4].ns", DumpEntry{opticalI.reTime[4].ns});
        res.insert_or_assign("opticalI.reTime[5].s", DumpEntry{opticalI.reTime[5].s});
        res.insert_or_assign("opticalI.reTime[5].ns", DumpEntry{opticalI.reTime[5].ns});
        res.insert_or_assign("opticalI.reTime[6].s", DumpEntry{opticalI.reTime[6].s});
        res.insert_or_assign("opticalI.reTime[6].ns", DumpEntry{opticalI.reTime[6].ns});
        res.insert_or_assign("opticalI.reTime[7].s", DumpEntry{opticalI.reTime[7].s});
        res.insert_or_assign("opticalI.reTime[7].ns", DumpEntry{opticalI.reTime[7].ns});
        res.insert_or_assign("opticalI.reTime[8].s", DumpEntry{opticalI.reTime[8].s});
        res.insert_or_assign("opticalI.reTime[8].ns", DumpEntry{opticalI.reTime[8].ns});
        res.insert_or_assign("opticalI.reTime[9].s", DumpEntry{opticalI.reTime[9].s});
        res.insert_or_assign("opticalI.reTime[9].ns", DumpEntry{opticalI.reTime[9].ns});
        res.insert_or_assign("opticalI.reTime[10].s", DumpEntry{opticalI.reTime[10].s});
        res.insert_or_assign("opticalI.reTime[10].ns", DumpEntry{opticalI.reTime[10].ns});
        res.insert_or_assign("opticalI.reTime[11].s", DumpEntry{opticalI.reTime[11].s});
        res.insert_or_assign("opticalI.reTime[11].ns", DumpEntry{opticalI.reTime[11].ns});
        res.insert_or_assign("opticalI.reTime[12].s", DumpEntry{opticalI.reTime[12].s});
        res.insert_or_assign("opticalI.reTime[12].ns", DumpEntry{opticalI.reTime[12].ns});
        res.insert_or_assign("opticalI.reTime[13].s", DumpEntry{opticalI.reTime[13].s});
        res.insert_or_assign("opticalI.reTime[13].ns", DumpEntry{opticalI.reTime[13].ns});
        res.insert_or_assign("opticalI.reTime[14].s", DumpEntry{opticalI.reTime[14].s});
        res.insert_or_assign("opticalI.reTime[14].ns", DumpEntry{opticalI.reTime[14].ns});
        res.insert_or_assign("opticalI.reTime[15].s", DumpEntry{opticalI.reTime[15].s});
        res.insert_or_assign("opticalI.reTime[15].ns", DumpEntry{opticalI.reTime[15].ns});
        res.insert_or_assign("opticalI.reTime[16].s", DumpEntry{opticalI.reTime[16].s});
        res.insert_or_assign("opticalI.reTime[16].ns", DumpEntry{opticalI.reTime[16].ns});
        res.insert_or_assign("opticalI.reTime[17].s", DumpEntry{opticalI.reTime[17].s});
        res.insert_or_assign("opticalI.reTime[17].ns", DumpEntry{opticalI.reTime[17].ns});
        res.insert_or_assign("opticalI.reTime[18].s", DumpEntry{opticalI.reTime[18].s});
        res.insert_or_assign("opticalI.reTime[18].ns", DumpEntry{opticalI.reTime[18].ns});
        res.insert_or_assign("opticalI.reTime[19].s", DumpEntry{opticalI.reTime[19].s});
        res.insert_or_assign("opticalI.reTime[19].ns", DumpEntry{opticalI.reTime[19].ns});
        res.insert_or_assign("opticalI.reTime[20].s", DumpEntry{opticalI.reTime[20].s});
        res.insert_or_assign("opticalI.reTime[20].ns", DumpEntry{opticalI.reTime[20].ns});
        res.insert_or_assign("opticalI.reTime[21].s", DumpEntry{opticalI.reTime[21].s});
        res.insert_or_assign("opticalI.reTime[21].ns", DumpEntry{opticalI.reTime[21].ns});
        res.insert_or_assign("opticalI.reTime[22].s", DumpEntry{opticalI.reTime[22].s});
        res.insert_or_assign("opticalI.reTime[22].ns", DumpEntry{opticalI.reTime[22].ns});
        res.insert_or_assign("opticalI.reTime[23].s", DumpEntry{opticalI.reTime[23].s});
        res.insert_or_assign("opticalI.reTime[23].ns", DumpEntry{opticalI.reTime[23].ns});
        res.insert_or_assign("opticalI.reTime[24].s", DumpEntry{opticalI.reTime[24].s});
        res.insert_or_assign("opticalI.reTime[24].ns", DumpEntry{opticalI.reTime[24].ns});
        res.insert_or_assign("opticalI.reTime[25].s", DumpEntry{opticalI.reTime[25].s});
        res.insert_or_assign("opticalI.reTime[25].ns", DumpEntry{opticalI.reTime[25].ns});
        res.insert_or_assign("opticalI.reTime[26].s", DumpEntry{opticalI.reTime[26].s});
        res.insert_or_assign("opticalI.reTime[26].ns", DumpEntry{opticalI.reTime[26].ns});
        res.insert_or_assign("opticalI.reTime[27].s", DumpEntry{opticalI.reTime[27].s});
        res.insert_or_assign("opticalI.reTime[27].ns", DumpEntry{opticalI.reTime[27].ns});
        res.insert_or_assign("opticalI.reTime[28].s", DumpEntry{opticalI.reTime[28].s});
        res.insert_or_assign("opticalI.reTime[28].ns", DumpEntry{opticalI.reTime[28].ns});
        res.insert_or_assign("opticalI.reTime[29].s", DumpEntry{opticalI.reTime[29].s});
        res.insert_or_assign("opticalI.reTime[29].ns", DumpEntry{opticalI.reTime[29].ns});
        res.insert_or_assign("opticalI.reTime[30].s", DumpEntry{opticalI.reTime[30].s});
        res.insert_or_assign("opticalI.reTime[30].ns", DumpEntry{opticalI.reTime[30].ns});
        res.insert_or_assign("opticalI.reTime[31].s", DumpEntry{opticalI.reTime[31].s});
        res.insert_or_assign("opticalI.reTime[31].ns", DumpEntry{opticalI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim0::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim0::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim0::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim0::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim0`
    //!
    //! @param minMaxLim0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under minMaxLim0
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim0& minMaxLim0)
    {
        DumpMap res{minMaxLim0.base()};
        res.insert_or_assign("minMaxLim0.staticParams", DumpEntry{minMaxLim0.staticParams});
        res.insert_or_assign("minMaxLim0.staticParams.invertIsEn", DumpEntry{minMaxLim0.staticParams.invertIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.enableIsEn", DumpEntry{minMaxLim0.staticParams.enableIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.latchIsEn", DumpEntry{minMaxLim0.staticParams.latchIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.deglitchIsEn", DumpEntry{minMaxLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.reTimeIsEn", DumpEntry{minMaxLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.numChannels", DumpEntry{minMaxLim0.staticParams.numChannels});
        res.insert_or_assign("minMaxLim0.data", DumpEntry{minMaxLim0.data});
        res.insert_or_assign("minMaxLim0.dataChanged", DumpEntry{minMaxLim0.dataChanged});
        res.insert_or_assign("minMaxLim0.invert", DumpEntry{minMaxLim0.invert});
        res.insert_or_assign("minMaxLim0.enable", DumpEntry{minMaxLim0.enable});
        res.insert_or_assign("minMaxLim0.latch", DumpEntry{minMaxLim0.latch});
        res.insert_or_assign("minMaxLim0.rstLatch", DumpEntry{minMaxLim0.rstLatch});
        res.insert_or_assign("minMaxLim0.risingInterrupt", DumpEntry{minMaxLim0.risingInterrupt});
        res.insert_or_assign("minMaxLim0.fallingInterrupt", DumpEntry{minMaxLim0.fallingInterrupt});
        res.insert_or_assign("minMaxLim0.fastFilterSc[0].val", DumpEntry{minMaxLim0.fastFilterSc[0].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[1].val", DumpEntry{minMaxLim0.fastFilterSc[1].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[2].val", DumpEntry{minMaxLim0.fastFilterSc[2].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[3].val", DumpEntry{minMaxLim0.fastFilterSc[3].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[4].val", DumpEntry{minMaxLim0.fastFilterSc[4].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[5].val", DumpEntry{minMaxLim0.fastFilterSc[5].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[6].val", DumpEntry{minMaxLim0.fastFilterSc[6].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[7].val", DumpEntry{minMaxLim0.fastFilterSc[7].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[8].val", DumpEntry{minMaxLim0.fastFilterSc[8].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[9].val", DumpEntry{minMaxLim0.fastFilterSc[9].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[10].val", DumpEntry{minMaxLim0.fastFilterSc[10].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[11].val", DumpEntry{minMaxLim0.fastFilterSc[11].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[12].val", DumpEntry{minMaxLim0.fastFilterSc[12].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[13].val", DumpEntry{minMaxLim0.fastFilterSc[13].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[14].val", DumpEntry{minMaxLim0.fastFilterSc[14].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[15].val", DumpEntry{minMaxLim0.fastFilterSc[15].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[16].val", DumpEntry{minMaxLim0.fastFilterSc[16].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[17].val", DumpEntry{minMaxLim0.fastFilterSc[17].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[18].val", DumpEntry{minMaxLim0.fastFilterSc[18].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[19].val", DumpEntry{minMaxLim0.fastFilterSc[19].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[20].val", DumpEntry{minMaxLim0.fastFilterSc[20].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[21].val", DumpEntry{minMaxLim0.fastFilterSc[21].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[22].val", DumpEntry{minMaxLim0.fastFilterSc[22].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[23].val", DumpEntry{minMaxLim0.fastFilterSc[23].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[24].val", DumpEntry{minMaxLim0.fastFilterSc[24].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[25].val", DumpEntry{minMaxLim0.fastFilterSc[25].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[26].val", DumpEntry{minMaxLim0.fastFilterSc[26].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[27].val", DumpEntry{minMaxLim0.fastFilterSc[27].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[28].val", DumpEntry{minMaxLim0.fastFilterSc[28].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[29].val", DumpEntry{minMaxLim0.fastFilterSc[29].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[30].val", DumpEntry{minMaxLim0.fastFilterSc[30].val});
        res.insert_or_assign("minMaxLim0.fastFilterSc[31].val", DumpEntry{minMaxLim0.fastFilterSc[31].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[0].val", DumpEntry{minMaxLim0.slowFilterSc[0].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[1].val", DumpEntry{minMaxLim0.slowFilterSc[1].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[2].val", DumpEntry{minMaxLim0.slowFilterSc[2].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[3].val", DumpEntry{minMaxLim0.slowFilterSc[3].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[4].val", DumpEntry{minMaxLim0.slowFilterSc[4].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[5].val", DumpEntry{minMaxLim0.slowFilterSc[5].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[6].val", DumpEntry{minMaxLim0.slowFilterSc[6].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[7].val", DumpEntry{minMaxLim0.slowFilterSc[7].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[8].val", DumpEntry{minMaxLim0.slowFilterSc[8].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[9].val", DumpEntry{minMaxLim0.slowFilterSc[9].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[10].val", DumpEntry{minMaxLim0.slowFilterSc[10].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[11].val", DumpEntry{minMaxLim0.slowFilterSc[11].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[12].val", DumpEntry{minMaxLim0.slowFilterSc[12].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[13].val", DumpEntry{minMaxLim0.slowFilterSc[13].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[14].val", DumpEntry{minMaxLim0.slowFilterSc[14].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[15].val", DumpEntry{minMaxLim0.slowFilterSc[15].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[16].val", DumpEntry{minMaxLim0.slowFilterSc[16].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[17].val", DumpEntry{minMaxLim0.slowFilterSc[17].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[18].val", DumpEntry{minMaxLim0.slowFilterSc[18].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[19].val", DumpEntry{minMaxLim0.slowFilterSc[19].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[20].val", DumpEntry{minMaxLim0.slowFilterSc[20].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[21].val", DumpEntry{minMaxLim0.slowFilterSc[21].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[22].val", DumpEntry{minMaxLim0.slowFilterSc[22].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[23].val", DumpEntry{minMaxLim0.slowFilterSc[23].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[24].val", DumpEntry{minMaxLim0.slowFilterSc[24].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[25].val", DumpEntry{minMaxLim0.slowFilterSc[25].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[26].val", DumpEntry{minMaxLim0.slowFilterSc[26].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[27].val", DumpEntry{minMaxLim0.slowFilterSc[27].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[28].val", DumpEntry{minMaxLim0.slowFilterSc[28].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[29].val", DumpEntry{minMaxLim0.slowFilterSc[29].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[30].val", DumpEntry{minMaxLim0.slowFilterSc[30].val});
        res.insert_or_assign("minMaxLim0.slowFilterSc[31].val", DumpEntry{minMaxLim0.slowFilterSc[31].val});
        res.insert_or_assign("minMaxLim0.reTime[0].s", DumpEntry{minMaxLim0.reTime[0].s});
        res.insert_or_assign("minMaxLim0.reTime[0].ns", DumpEntry{minMaxLim0.reTime[0].ns});
        res.insert_or_assign("minMaxLim0.reTime[1].s", DumpEntry{minMaxLim0.reTime[1].s});
        res.insert_or_assign("minMaxLim0.reTime[1].ns", DumpEntry{minMaxLim0.reTime[1].ns});
        res.insert_or_assign("minMaxLim0.reTime[2].s", DumpEntry{minMaxLim0.reTime[2].s});
        res.insert_or_assign("minMaxLim0.reTime[2].ns", DumpEntry{minMaxLim0.reTime[2].ns});
        res.insert_or_assign("minMaxLim0.reTime[3].s", DumpEntry{minMaxLim0.reTime[3].s});
        res.insert_or_assign("minMaxLim0.reTime[3].ns", DumpEntry{minMaxLim0.reTime[3].ns});
        res.insert_or_assign("minMaxLim0.reTime[4].s", DumpEntry{minMaxLim0.reTime[4].s});
        res.insert_or_assign("minMaxLim0.reTime[4].ns", DumpEntry{minMaxLim0.reTime[4].ns});
        res.insert_or_assign("minMaxLim0.reTime[5].s", DumpEntry{minMaxLim0.reTime[5].s});
        res.insert_or_assign("minMaxLim0.reTime[5].ns", DumpEntry{minMaxLim0.reTime[5].ns});
        res.insert_or_assign("minMaxLim0.reTime[6].s", DumpEntry{minMaxLim0.reTime[6].s});
        res.insert_or_assign("minMaxLim0.reTime[6].ns", DumpEntry{minMaxLim0.reTime[6].ns});
        res.insert_or_assign("minMaxLim0.reTime[7].s", DumpEntry{minMaxLim0.reTime[7].s});
        res.insert_or_assign("minMaxLim0.reTime[7].ns", DumpEntry{minMaxLim0.reTime[7].ns});
        res.insert_or_assign("minMaxLim0.reTime[8].s", DumpEntry{minMaxLim0.reTime[8].s});
        res.insert_or_assign("minMaxLim0.reTime[8].ns", DumpEntry{minMaxLim0.reTime[8].ns});
        res.insert_or_assign("minMaxLim0.reTime[9].s", DumpEntry{minMaxLim0.reTime[9].s});
        res.insert_or_assign("minMaxLim0.reTime[9].ns", DumpEntry{minMaxLim0.reTime[9].ns});
        res.insert_or_assign("minMaxLim0.reTime[10].s", DumpEntry{minMaxLim0.reTime[10].s});
        res.insert_or_assign("minMaxLim0.reTime[10].ns", DumpEntry{minMaxLim0.reTime[10].ns});
        res.insert_or_assign("minMaxLim0.reTime[11].s", DumpEntry{minMaxLim0.reTime[11].s});
        res.insert_or_assign("minMaxLim0.reTime[11].ns", DumpEntry{minMaxLim0.reTime[11].ns});
        res.insert_or_assign("minMaxLim0.reTime[12].s", DumpEntry{minMaxLim0.reTime[12].s});
        res.insert_or_assign("minMaxLim0.reTime[12].ns", DumpEntry{minMaxLim0.reTime[12].ns});
        res.insert_or_assign("minMaxLim0.reTime[13].s", DumpEntry{minMaxLim0.reTime[13].s});
        res.insert_or_assign("minMaxLim0.reTime[13].ns", DumpEntry{minMaxLim0.reTime[13].ns});
        res.insert_or_assign("minMaxLim0.reTime[14].s", DumpEntry{minMaxLim0.reTime[14].s});
        res.insert_or_assign("minMaxLim0.reTime[14].ns", DumpEntry{minMaxLim0.reTime[14].ns});
        res.insert_or_assign("minMaxLim0.reTime[15].s", DumpEntry{minMaxLim0.reTime[15].s});
        res.insert_or_assign("minMaxLim0.reTime[15].ns", DumpEntry{minMaxLim0.reTime[15].ns});
        res.insert_or_assign("minMaxLim0.reTime[16].s", DumpEntry{minMaxLim0.reTime[16].s});
        res.insert_or_assign("minMaxLim0.reTime[16].ns", DumpEntry{minMaxLim0.reTime[16].ns});
        res.insert_or_assign("minMaxLim0.reTime[17].s", DumpEntry{minMaxLim0.reTime[17].s});
        res.insert_or_assign("minMaxLim0.reTime[17].ns", DumpEntry{minMaxLim0.reTime[17].ns});
        res.insert_or_assign("minMaxLim0.reTime[18].s", DumpEntry{minMaxLim0.reTime[18].s});
        res.insert_or_assign("minMaxLim0.reTime[18].ns", DumpEntry{minMaxLim0.reTime[18].ns});
        res.insert_or_assign("minMaxLim0.reTime[19].s", DumpEntry{minMaxLim0.reTime[19].s});
        res.insert_or_assign("minMaxLim0.reTime[19].ns", DumpEntry{minMaxLim0.reTime[19].ns});
        res.insert_or_assign("minMaxLim0.reTime[20].s", DumpEntry{minMaxLim0.reTime[20].s});
        res.insert_or_assign("minMaxLim0.reTime[20].ns", DumpEntry{minMaxLim0.reTime[20].ns});
        res.insert_or_assign("minMaxLim0.reTime[21].s", DumpEntry{minMaxLim0.reTime[21].s});
        res.insert_or_assign("minMaxLim0.reTime[21].ns", DumpEntry{minMaxLim0.reTime[21].ns});
        res.insert_or_assign("minMaxLim0.reTime[22].s", DumpEntry{minMaxLim0.reTime[22].s});
        res.insert_or_assign("minMaxLim0.reTime[22].ns", DumpEntry{minMaxLim0.reTime[22].ns});
        res.insert_or_assign("minMaxLim0.reTime[23].s", DumpEntry{minMaxLim0.reTime[23].s});
        res.insert_or_assign("minMaxLim0.reTime[23].ns", DumpEntry{minMaxLim0.reTime[23].ns});
        res.insert_or_assign("minMaxLim0.reTime[24].s", DumpEntry{minMaxLim0.reTime[24].s});
        res.insert_or_assign("minMaxLim0.reTime[24].ns", DumpEntry{minMaxLim0.reTime[24].ns});
        res.insert_or_assign("minMaxLim0.reTime[25].s", DumpEntry{minMaxLim0.reTime[25].s});
        res.insert_or_assign("minMaxLim0.reTime[25].ns", DumpEntry{minMaxLim0.reTime[25].ns});
        res.insert_or_assign("minMaxLim0.reTime[26].s", DumpEntry{minMaxLim0.reTime[26].s});
        res.insert_or_assign("minMaxLim0.reTime[26].ns", DumpEntry{minMaxLim0.reTime[26].ns});
        res.insert_or_assign("minMaxLim0.reTime[27].s", DumpEntry{minMaxLim0.reTime[27].s});
        res.insert_or_assign("minMaxLim0.reTime[27].ns", DumpEntry{minMaxLim0.reTime[27].ns});
        res.insert_or_assign("minMaxLim0.reTime[28].s", DumpEntry{minMaxLim0.reTime[28].s});
        res.insert_or_assign("minMaxLim0.reTime[28].ns", DumpEntry{minMaxLim0.reTime[28].ns});
        res.insert_or_assign("minMaxLim0.reTime[29].s", DumpEntry{minMaxLim0.reTime[29].s});
        res.insert_or_assign("minMaxLim0.reTime[29].ns", DumpEntry{minMaxLim0.reTime[29].ns});
        res.insert_or_assign("minMaxLim0.reTime[30].s", DumpEntry{minMaxLim0.reTime[30].s});
        res.insert_or_assign("minMaxLim0.reTime[30].ns", DumpEntry{minMaxLim0.reTime[30].ns});
        res.insert_or_assign("minMaxLim0.reTime[31].s", DumpEntry{minMaxLim0.reTime[31].s});
        res.insert_or_assign("minMaxLim0.reTime[31].ns", DumpEntry{minMaxLim0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim1::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim1::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim1::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim1::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::MinMaxLim1`
    //!
    //! @param minMaxLim1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under minMaxLim1
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::MinMaxLim1& minMaxLim1)
    {
        DumpMap res{minMaxLim1.base()};
        res.insert_or_assign("minMaxLim1.staticParams", DumpEntry{minMaxLim1.staticParams});
        res.insert_or_assign("minMaxLim1.staticParams.invertIsEn", DumpEntry{minMaxLim1.staticParams.invertIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.enableIsEn", DumpEntry{minMaxLim1.staticParams.enableIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.latchIsEn", DumpEntry{minMaxLim1.staticParams.latchIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.deglitchIsEn", DumpEntry{minMaxLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.reTimeIsEn", DumpEntry{minMaxLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.numChannels", DumpEntry{minMaxLim1.staticParams.numChannels});
        res.insert_or_assign("minMaxLim1.data", DumpEntry{minMaxLim1.data});
        res.insert_or_assign("minMaxLim1.dataChanged", DumpEntry{minMaxLim1.dataChanged});
        res.insert_or_assign("minMaxLim1.invert", DumpEntry{minMaxLim1.invert});
        res.insert_or_assign("minMaxLim1.enable", DumpEntry{minMaxLim1.enable});
        res.insert_or_assign("minMaxLim1.latch", DumpEntry{minMaxLim1.latch});
        res.insert_or_assign("minMaxLim1.rstLatch", DumpEntry{minMaxLim1.rstLatch});
        res.insert_or_assign("minMaxLim1.risingInterrupt", DumpEntry{minMaxLim1.risingInterrupt});
        res.insert_or_assign("minMaxLim1.fallingInterrupt", DumpEntry{minMaxLim1.fallingInterrupt});
        res.insert_or_assign("minMaxLim1.fastFilterSc[0].val", DumpEntry{minMaxLim1.fastFilterSc[0].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[1].val", DumpEntry{minMaxLim1.fastFilterSc[1].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[2].val", DumpEntry{minMaxLim1.fastFilterSc[2].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[3].val", DumpEntry{minMaxLim1.fastFilterSc[3].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[4].val", DumpEntry{minMaxLim1.fastFilterSc[4].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[5].val", DumpEntry{minMaxLim1.fastFilterSc[5].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[6].val", DumpEntry{minMaxLim1.fastFilterSc[6].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[7].val", DumpEntry{minMaxLim1.fastFilterSc[7].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[8].val", DumpEntry{minMaxLim1.fastFilterSc[8].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[9].val", DumpEntry{minMaxLim1.fastFilterSc[9].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[10].val", DumpEntry{minMaxLim1.fastFilterSc[10].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[11].val", DumpEntry{minMaxLim1.fastFilterSc[11].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[12].val", DumpEntry{minMaxLim1.fastFilterSc[12].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[13].val", DumpEntry{minMaxLim1.fastFilterSc[13].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[14].val", DumpEntry{minMaxLim1.fastFilterSc[14].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[15].val", DumpEntry{minMaxLim1.fastFilterSc[15].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[16].val", DumpEntry{minMaxLim1.fastFilterSc[16].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[17].val", DumpEntry{minMaxLim1.fastFilterSc[17].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[18].val", DumpEntry{minMaxLim1.fastFilterSc[18].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[19].val", DumpEntry{minMaxLim1.fastFilterSc[19].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[20].val", DumpEntry{minMaxLim1.fastFilterSc[20].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[21].val", DumpEntry{minMaxLim1.fastFilterSc[21].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[22].val", DumpEntry{minMaxLim1.fastFilterSc[22].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[23].val", DumpEntry{minMaxLim1.fastFilterSc[23].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[24].val", DumpEntry{minMaxLim1.fastFilterSc[24].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[25].val", DumpEntry{minMaxLim1.fastFilterSc[25].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[26].val", DumpEntry{minMaxLim1.fastFilterSc[26].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[27].val", DumpEntry{minMaxLim1.fastFilterSc[27].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[28].val", DumpEntry{minMaxLim1.fastFilterSc[28].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[29].val", DumpEntry{minMaxLim1.fastFilterSc[29].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[30].val", DumpEntry{minMaxLim1.fastFilterSc[30].val});
        res.insert_or_assign("minMaxLim1.fastFilterSc[31].val", DumpEntry{minMaxLim1.fastFilterSc[31].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[0].val", DumpEntry{minMaxLim1.slowFilterSc[0].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[1].val", DumpEntry{minMaxLim1.slowFilterSc[1].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[2].val", DumpEntry{minMaxLim1.slowFilterSc[2].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[3].val", DumpEntry{minMaxLim1.slowFilterSc[3].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[4].val", DumpEntry{minMaxLim1.slowFilterSc[4].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[5].val", DumpEntry{minMaxLim1.slowFilterSc[5].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[6].val", DumpEntry{minMaxLim1.slowFilterSc[6].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[7].val", DumpEntry{minMaxLim1.slowFilterSc[7].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[8].val", DumpEntry{minMaxLim1.slowFilterSc[8].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[9].val", DumpEntry{minMaxLim1.slowFilterSc[9].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[10].val", DumpEntry{minMaxLim1.slowFilterSc[10].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[11].val", DumpEntry{minMaxLim1.slowFilterSc[11].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[12].val", DumpEntry{minMaxLim1.slowFilterSc[12].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[13].val", DumpEntry{minMaxLim1.slowFilterSc[13].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[14].val", DumpEntry{minMaxLim1.slowFilterSc[14].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[15].val", DumpEntry{minMaxLim1.slowFilterSc[15].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[16].val", DumpEntry{minMaxLim1.slowFilterSc[16].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[17].val", DumpEntry{minMaxLim1.slowFilterSc[17].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[18].val", DumpEntry{minMaxLim1.slowFilterSc[18].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[19].val", DumpEntry{minMaxLim1.slowFilterSc[19].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[20].val", DumpEntry{minMaxLim1.slowFilterSc[20].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[21].val", DumpEntry{minMaxLim1.slowFilterSc[21].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[22].val", DumpEntry{minMaxLim1.slowFilterSc[22].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[23].val", DumpEntry{minMaxLim1.slowFilterSc[23].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[24].val", DumpEntry{minMaxLim1.slowFilterSc[24].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[25].val", DumpEntry{minMaxLim1.slowFilterSc[25].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[26].val", DumpEntry{minMaxLim1.slowFilterSc[26].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[27].val", DumpEntry{minMaxLim1.slowFilterSc[27].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[28].val", DumpEntry{minMaxLim1.slowFilterSc[28].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[29].val", DumpEntry{minMaxLim1.slowFilterSc[29].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[30].val", DumpEntry{minMaxLim1.slowFilterSc[30].val});
        res.insert_or_assign("minMaxLim1.slowFilterSc[31].val", DumpEntry{minMaxLim1.slowFilterSc[31].val});
        res.insert_or_assign("minMaxLim1.reTime[0].s", DumpEntry{minMaxLim1.reTime[0].s});
        res.insert_or_assign("minMaxLim1.reTime[0].ns", DumpEntry{minMaxLim1.reTime[0].ns});
        res.insert_or_assign("minMaxLim1.reTime[1].s", DumpEntry{minMaxLim1.reTime[1].s});
        res.insert_or_assign("minMaxLim1.reTime[1].ns", DumpEntry{minMaxLim1.reTime[1].ns});
        res.insert_or_assign("minMaxLim1.reTime[2].s", DumpEntry{minMaxLim1.reTime[2].s});
        res.insert_or_assign("minMaxLim1.reTime[2].ns", DumpEntry{minMaxLim1.reTime[2].ns});
        res.insert_or_assign("minMaxLim1.reTime[3].s", DumpEntry{minMaxLim1.reTime[3].s});
        res.insert_or_assign("minMaxLim1.reTime[3].ns", DumpEntry{minMaxLim1.reTime[3].ns});
        res.insert_or_assign("minMaxLim1.reTime[4].s", DumpEntry{minMaxLim1.reTime[4].s});
        res.insert_or_assign("minMaxLim1.reTime[4].ns", DumpEntry{minMaxLim1.reTime[4].ns});
        res.insert_or_assign("minMaxLim1.reTime[5].s", DumpEntry{minMaxLim1.reTime[5].s});
        res.insert_or_assign("minMaxLim1.reTime[5].ns", DumpEntry{minMaxLim1.reTime[5].ns});
        res.insert_or_assign("minMaxLim1.reTime[6].s", DumpEntry{minMaxLim1.reTime[6].s});
        res.insert_or_assign("minMaxLim1.reTime[6].ns", DumpEntry{minMaxLim1.reTime[6].ns});
        res.insert_or_assign("minMaxLim1.reTime[7].s", DumpEntry{minMaxLim1.reTime[7].s});
        res.insert_or_assign("minMaxLim1.reTime[7].ns", DumpEntry{minMaxLim1.reTime[7].ns});
        res.insert_or_assign("minMaxLim1.reTime[8].s", DumpEntry{minMaxLim1.reTime[8].s});
        res.insert_or_assign("minMaxLim1.reTime[8].ns", DumpEntry{minMaxLim1.reTime[8].ns});
        res.insert_or_assign("minMaxLim1.reTime[9].s", DumpEntry{minMaxLim1.reTime[9].s});
        res.insert_or_assign("minMaxLim1.reTime[9].ns", DumpEntry{minMaxLim1.reTime[9].ns});
        res.insert_or_assign("minMaxLim1.reTime[10].s", DumpEntry{minMaxLim1.reTime[10].s});
        res.insert_or_assign("minMaxLim1.reTime[10].ns", DumpEntry{minMaxLim1.reTime[10].ns});
        res.insert_or_assign("minMaxLim1.reTime[11].s", DumpEntry{minMaxLim1.reTime[11].s});
        res.insert_or_assign("minMaxLim1.reTime[11].ns", DumpEntry{minMaxLim1.reTime[11].ns});
        res.insert_or_assign("minMaxLim1.reTime[12].s", DumpEntry{minMaxLim1.reTime[12].s});
        res.insert_or_assign("minMaxLim1.reTime[12].ns", DumpEntry{minMaxLim1.reTime[12].ns});
        res.insert_or_assign("minMaxLim1.reTime[13].s", DumpEntry{minMaxLim1.reTime[13].s});
        res.insert_or_assign("minMaxLim1.reTime[13].ns", DumpEntry{minMaxLim1.reTime[13].ns});
        res.insert_or_assign("minMaxLim1.reTime[14].s", DumpEntry{minMaxLim1.reTime[14].s});
        res.insert_or_assign("minMaxLim1.reTime[14].ns", DumpEntry{minMaxLim1.reTime[14].ns});
        res.insert_or_assign("minMaxLim1.reTime[15].s", DumpEntry{minMaxLim1.reTime[15].s});
        res.insert_or_assign("minMaxLim1.reTime[15].ns", DumpEntry{minMaxLim1.reTime[15].ns});
        res.insert_or_assign("minMaxLim1.reTime[16].s", DumpEntry{minMaxLim1.reTime[16].s});
        res.insert_or_assign("minMaxLim1.reTime[16].ns", DumpEntry{minMaxLim1.reTime[16].ns});
        res.insert_or_assign("minMaxLim1.reTime[17].s", DumpEntry{minMaxLim1.reTime[17].s});
        res.insert_or_assign("minMaxLim1.reTime[17].ns", DumpEntry{minMaxLim1.reTime[17].ns});
        res.insert_or_assign("minMaxLim1.reTime[18].s", DumpEntry{minMaxLim1.reTime[18].s});
        res.insert_or_assign("minMaxLim1.reTime[18].ns", DumpEntry{minMaxLim1.reTime[18].ns});
        res.insert_or_assign("minMaxLim1.reTime[19].s", DumpEntry{minMaxLim1.reTime[19].s});
        res.insert_or_assign("minMaxLim1.reTime[19].ns", DumpEntry{minMaxLim1.reTime[19].ns});
        res.insert_or_assign("minMaxLim1.reTime[20].s", DumpEntry{minMaxLim1.reTime[20].s});
        res.insert_or_assign("minMaxLim1.reTime[20].ns", DumpEntry{minMaxLim1.reTime[20].ns});
        res.insert_or_assign("minMaxLim1.reTime[21].s", DumpEntry{minMaxLim1.reTime[21].s});
        res.insert_or_assign("minMaxLim1.reTime[21].ns", DumpEntry{minMaxLim1.reTime[21].ns});
        res.insert_or_assign("minMaxLim1.reTime[22].s", DumpEntry{minMaxLim1.reTime[22].s});
        res.insert_or_assign("minMaxLim1.reTime[22].ns", DumpEntry{minMaxLim1.reTime[22].ns});
        res.insert_or_assign("minMaxLim1.reTime[23].s", DumpEntry{minMaxLim1.reTime[23].s});
        res.insert_or_assign("minMaxLim1.reTime[23].ns", DumpEntry{minMaxLim1.reTime[23].ns});
        res.insert_or_assign("minMaxLim1.reTime[24].s", DumpEntry{minMaxLim1.reTime[24].s});
        res.insert_or_assign("minMaxLim1.reTime[24].ns", DumpEntry{minMaxLim1.reTime[24].ns});
        res.insert_or_assign("minMaxLim1.reTime[25].s", DumpEntry{minMaxLim1.reTime[25].s});
        res.insert_or_assign("minMaxLim1.reTime[25].ns", DumpEntry{minMaxLim1.reTime[25].ns});
        res.insert_or_assign("minMaxLim1.reTime[26].s", DumpEntry{minMaxLim1.reTime[26].s});
        res.insert_or_assign("minMaxLim1.reTime[26].ns", DumpEntry{minMaxLim1.reTime[26].ns});
        res.insert_or_assign("minMaxLim1.reTime[27].s", DumpEntry{minMaxLim1.reTime[27].s});
        res.insert_or_assign("minMaxLim1.reTime[27].ns", DumpEntry{minMaxLim1.reTime[27].ns});
        res.insert_or_assign("minMaxLim1.reTime[28].s", DumpEntry{minMaxLim1.reTime[28].s});
        res.insert_or_assign("minMaxLim1.reTime[28].ns", DumpEntry{minMaxLim1.reTime[28].ns});
        res.insert_or_assign("minMaxLim1.reTime[29].s", DumpEntry{minMaxLim1.reTime[29].s});
        res.insert_or_assign("minMaxLim1.reTime[29].ns", DumpEntry{minMaxLim1.reTime[29].ns});
        res.insert_or_assign("minMaxLim1.reTime[30].s", DumpEntry{minMaxLim1.reTime[30].s});
        res.insert_or_assign("minMaxLim1.reTime[30].ns", DumpEntry{minMaxLim1.reTime[30].ns});
        res.insert_or_assign("minMaxLim1.reTime[31].s", DumpEntry{minMaxLim1.reTime[31].s});
        res.insert_or_assign("minMaxLim1.reTime[31].ns", DumpEntry{minMaxLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim0::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim0::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim0::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim0::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim0`
    //!
    //! @param rmsLim0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rmsLim0
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim0& rmsLim0)
    {
        DumpMap res{rmsLim0.base()};
        res.insert_or_assign("rmsLim0.staticParams", DumpEntry{rmsLim0.staticParams});
        res.insert_or_assign("rmsLim0.staticParams.invertIsEn", DumpEntry{rmsLim0.staticParams.invertIsEn});
        res.insert_or_assign("rmsLim0.staticParams.enableIsEn", DumpEntry{rmsLim0.staticParams.enableIsEn});
        res.insert_or_assign("rmsLim0.staticParams.latchIsEn", DumpEntry{rmsLim0.staticParams.latchIsEn});
        res.insert_or_assign("rmsLim0.staticParams.deglitchIsEn", DumpEntry{rmsLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("rmsLim0.staticParams.reTimeIsEn", DumpEntry{rmsLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("rmsLim0.staticParams.numChannels", DumpEntry{rmsLim0.staticParams.numChannels});
        res.insert_or_assign("rmsLim0.data", DumpEntry{rmsLim0.data});
        res.insert_or_assign("rmsLim0.dataChanged", DumpEntry{rmsLim0.dataChanged});
        res.insert_or_assign("rmsLim0.invert", DumpEntry{rmsLim0.invert});
        res.insert_or_assign("rmsLim0.enable", DumpEntry{rmsLim0.enable});
        res.insert_or_assign("rmsLim0.latch", DumpEntry{rmsLim0.latch});
        res.insert_or_assign("rmsLim0.rstLatch", DumpEntry{rmsLim0.rstLatch});
        res.insert_or_assign("rmsLim0.risingInterrupt", DumpEntry{rmsLim0.risingInterrupt});
        res.insert_or_assign("rmsLim0.fallingInterrupt", DumpEntry{rmsLim0.fallingInterrupt});
        res.insert_or_assign("rmsLim0.fastFilterSc[0].val", DumpEntry{rmsLim0.fastFilterSc[0].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[1].val", DumpEntry{rmsLim0.fastFilterSc[1].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[2].val", DumpEntry{rmsLim0.fastFilterSc[2].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[3].val", DumpEntry{rmsLim0.fastFilterSc[3].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[4].val", DumpEntry{rmsLim0.fastFilterSc[4].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[5].val", DumpEntry{rmsLim0.fastFilterSc[5].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[6].val", DumpEntry{rmsLim0.fastFilterSc[6].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[7].val", DumpEntry{rmsLim0.fastFilterSc[7].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[8].val", DumpEntry{rmsLim0.fastFilterSc[8].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[9].val", DumpEntry{rmsLim0.fastFilterSc[9].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[10].val", DumpEntry{rmsLim0.fastFilterSc[10].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[11].val", DumpEntry{rmsLim0.fastFilterSc[11].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[12].val", DumpEntry{rmsLim0.fastFilterSc[12].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[13].val", DumpEntry{rmsLim0.fastFilterSc[13].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[14].val", DumpEntry{rmsLim0.fastFilterSc[14].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[15].val", DumpEntry{rmsLim0.fastFilterSc[15].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[16].val", DumpEntry{rmsLim0.fastFilterSc[16].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[17].val", DumpEntry{rmsLim0.fastFilterSc[17].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[18].val", DumpEntry{rmsLim0.fastFilterSc[18].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[19].val", DumpEntry{rmsLim0.fastFilterSc[19].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[20].val", DumpEntry{rmsLim0.fastFilterSc[20].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[21].val", DumpEntry{rmsLim0.fastFilterSc[21].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[22].val", DumpEntry{rmsLim0.fastFilterSc[22].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[23].val", DumpEntry{rmsLim0.fastFilterSc[23].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[24].val", DumpEntry{rmsLim0.fastFilterSc[24].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[25].val", DumpEntry{rmsLim0.fastFilterSc[25].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[26].val", DumpEntry{rmsLim0.fastFilterSc[26].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[27].val", DumpEntry{rmsLim0.fastFilterSc[27].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[28].val", DumpEntry{rmsLim0.fastFilterSc[28].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[29].val", DumpEntry{rmsLim0.fastFilterSc[29].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[30].val", DumpEntry{rmsLim0.fastFilterSc[30].val});
        res.insert_or_assign("rmsLim0.fastFilterSc[31].val", DumpEntry{rmsLim0.fastFilterSc[31].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[0].val", DumpEntry{rmsLim0.slowFilterSc[0].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[1].val", DumpEntry{rmsLim0.slowFilterSc[1].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[2].val", DumpEntry{rmsLim0.slowFilterSc[2].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[3].val", DumpEntry{rmsLim0.slowFilterSc[3].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[4].val", DumpEntry{rmsLim0.slowFilterSc[4].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[5].val", DumpEntry{rmsLim0.slowFilterSc[5].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[6].val", DumpEntry{rmsLim0.slowFilterSc[6].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[7].val", DumpEntry{rmsLim0.slowFilterSc[7].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[8].val", DumpEntry{rmsLim0.slowFilterSc[8].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[9].val", DumpEntry{rmsLim0.slowFilterSc[9].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[10].val", DumpEntry{rmsLim0.slowFilterSc[10].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[11].val", DumpEntry{rmsLim0.slowFilterSc[11].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[12].val", DumpEntry{rmsLim0.slowFilterSc[12].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[13].val", DumpEntry{rmsLim0.slowFilterSc[13].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[14].val", DumpEntry{rmsLim0.slowFilterSc[14].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[15].val", DumpEntry{rmsLim0.slowFilterSc[15].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[16].val", DumpEntry{rmsLim0.slowFilterSc[16].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[17].val", DumpEntry{rmsLim0.slowFilterSc[17].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[18].val", DumpEntry{rmsLim0.slowFilterSc[18].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[19].val", DumpEntry{rmsLim0.slowFilterSc[19].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[20].val", DumpEntry{rmsLim0.slowFilterSc[20].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[21].val", DumpEntry{rmsLim0.slowFilterSc[21].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[22].val", DumpEntry{rmsLim0.slowFilterSc[22].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[23].val", DumpEntry{rmsLim0.slowFilterSc[23].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[24].val", DumpEntry{rmsLim0.slowFilterSc[24].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[25].val", DumpEntry{rmsLim0.slowFilterSc[25].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[26].val", DumpEntry{rmsLim0.slowFilterSc[26].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[27].val", DumpEntry{rmsLim0.slowFilterSc[27].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[28].val", DumpEntry{rmsLim0.slowFilterSc[28].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[29].val", DumpEntry{rmsLim0.slowFilterSc[29].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[30].val", DumpEntry{rmsLim0.slowFilterSc[30].val});
        res.insert_or_assign("rmsLim0.slowFilterSc[31].val", DumpEntry{rmsLim0.slowFilterSc[31].val});
        res.insert_or_assign("rmsLim0.reTime[0].s", DumpEntry{rmsLim0.reTime[0].s});
        res.insert_or_assign("rmsLim0.reTime[0].ns", DumpEntry{rmsLim0.reTime[0].ns});
        res.insert_or_assign("rmsLim0.reTime[1].s", DumpEntry{rmsLim0.reTime[1].s});
        res.insert_or_assign("rmsLim0.reTime[1].ns", DumpEntry{rmsLim0.reTime[1].ns});
        res.insert_or_assign("rmsLim0.reTime[2].s", DumpEntry{rmsLim0.reTime[2].s});
        res.insert_or_assign("rmsLim0.reTime[2].ns", DumpEntry{rmsLim0.reTime[2].ns});
        res.insert_or_assign("rmsLim0.reTime[3].s", DumpEntry{rmsLim0.reTime[3].s});
        res.insert_or_assign("rmsLim0.reTime[3].ns", DumpEntry{rmsLim0.reTime[3].ns});
        res.insert_or_assign("rmsLim0.reTime[4].s", DumpEntry{rmsLim0.reTime[4].s});
        res.insert_or_assign("rmsLim0.reTime[4].ns", DumpEntry{rmsLim0.reTime[4].ns});
        res.insert_or_assign("rmsLim0.reTime[5].s", DumpEntry{rmsLim0.reTime[5].s});
        res.insert_or_assign("rmsLim0.reTime[5].ns", DumpEntry{rmsLim0.reTime[5].ns});
        res.insert_or_assign("rmsLim0.reTime[6].s", DumpEntry{rmsLim0.reTime[6].s});
        res.insert_or_assign("rmsLim0.reTime[6].ns", DumpEntry{rmsLim0.reTime[6].ns});
        res.insert_or_assign("rmsLim0.reTime[7].s", DumpEntry{rmsLim0.reTime[7].s});
        res.insert_or_assign("rmsLim0.reTime[7].ns", DumpEntry{rmsLim0.reTime[7].ns});
        res.insert_or_assign("rmsLim0.reTime[8].s", DumpEntry{rmsLim0.reTime[8].s});
        res.insert_or_assign("rmsLim0.reTime[8].ns", DumpEntry{rmsLim0.reTime[8].ns});
        res.insert_or_assign("rmsLim0.reTime[9].s", DumpEntry{rmsLim0.reTime[9].s});
        res.insert_or_assign("rmsLim0.reTime[9].ns", DumpEntry{rmsLim0.reTime[9].ns});
        res.insert_or_assign("rmsLim0.reTime[10].s", DumpEntry{rmsLim0.reTime[10].s});
        res.insert_or_assign("rmsLim0.reTime[10].ns", DumpEntry{rmsLim0.reTime[10].ns});
        res.insert_or_assign("rmsLim0.reTime[11].s", DumpEntry{rmsLim0.reTime[11].s});
        res.insert_or_assign("rmsLim0.reTime[11].ns", DumpEntry{rmsLim0.reTime[11].ns});
        res.insert_or_assign("rmsLim0.reTime[12].s", DumpEntry{rmsLim0.reTime[12].s});
        res.insert_or_assign("rmsLim0.reTime[12].ns", DumpEntry{rmsLim0.reTime[12].ns});
        res.insert_or_assign("rmsLim0.reTime[13].s", DumpEntry{rmsLim0.reTime[13].s});
        res.insert_or_assign("rmsLim0.reTime[13].ns", DumpEntry{rmsLim0.reTime[13].ns});
        res.insert_or_assign("rmsLim0.reTime[14].s", DumpEntry{rmsLim0.reTime[14].s});
        res.insert_or_assign("rmsLim0.reTime[14].ns", DumpEntry{rmsLim0.reTime[14].ns});
        res.insert_or_assign("rmsLim0.reTime[15].s", DumpEntry{rmsLim0.reTime[15].s});
        res.insert_or_assign("rmsLim0.reTime[15].ns", DumpEntry{rmsLim0.reTime[15].ns});
        res.insert_or_assign("rmsLim0.reTime[16].s", DumpEntry{rmsLim0.reTime[16].s});
        res.insert_or_assign("rmsLim0.reTime[16].ns", DumpEntry{rmsLim0.reTime[16].ns});
        res.insert_or_assign("rmsLim0.reTime[17].s", DumpEntry{rmsLim0.reTime[17].s});
        res.insert_or_assign("rmsLim0.reTime[17].ns", DumpEntry{rmsLim0.reTime[17].ns});
        res.insert_or_assign("rmsLim0.reTime[18].s", DumpEntry{rmsLim0.reTime[18].s});
        res.insert_or_assign("rmsLim0.reTime[18].ns", DumpEntry{rmsLim0.reTime[18].ns});
        res.insert_or_assign("rmsLim0.reTime[19].s", DumpEntry{rmsLim0.reTime[19].s});
        res.insert_or_assign("rmsLim0.reTime[19].ns", DumpEntry{rmsLim0.reTime[19].ns});
        res.insert_or_assign("rmsLim0.reTime[20].s", DumpEntry{rmsLim0.reTime[20].s});
        res.insert_or_assign("rmsLim0.reTime[20].ns", DumpEntry{rmsLim0.reTime[20].ns});
        res.insert_or_assign("rmsLim0.reTime[21].s", DumpEntry{rmsLim0.reTime[21].s});
        res.insert_or_assign("rmsLim0.reTime[21].ns", DumpEntry{rmsLim0.reTime[21].ns});
        res.insert_or_assign("rmsLim0.reTime[22].s", DumpEntry{rmsLim0.reTime[22].s});
        res.insert_or_assign("rmsLim0.reTime[22].ns", DumpEntry{rmsLim0.reTime[22].ns});
        res.insert_or_assign("rmsLim0.reTime[23].s", DumpEntry{rmsLim0.reTime[23].s});
        res.insert_or_assign("rmsLim0.reTime[23].ns", DumpEntry{rmsLim0.reTime[23].ns});
        res.insert_or_assign("rmsLim0.reTime[24].s", DumpEntry{rmsLim0.reTime[24].s});
        res.insert_or_assign("rmsLim0.reTime[24].ns", DumpEntry{rmsLim0.reTime[24].ns});
        res.insert_or_assign("rmsLim0.reTime[25].s", DumpEntry{rmsLim0.reTime[25].s});
        res.insert_or_assign("rmsLim0.reTime[25].ns", DumpEntry{rmsLim0.reTime[25].ns});
        res.insert_or_assign("rmsLim0.reTime[26].s", DumpEntry{rmsLim0.reTime[26].s});
        res.insert_or_assign("rmsLim0.reTime[26].ns", DumpEntry{rmsLim0.reTime[26].ns});
        res.insert_or_assign("rmsLim0.reTime[27].s", DumpEntry{rmsLim0.reTime[27].s});
        res.insert_or_assign("rmsLim0.reTime[27].ns", DumpEntry{rmsLim0.reTime[27].ns});
        res.insert_or_assign("rmsLim0.reTime[28].s", DumpEntry{rmsLim0.reTime[28].s});
        res.insert_or_assign("rmsLim0.reTime[28].ns", DumpEntry{rmsLim0.reTime[28].ns});
        res.insert_or_assign("rmsLim0.reTime[29].s", DumpEntry{rmsLim0.reTime[29].s});
        res.insert_or_assign("rmsLim0.reTime[29].ns", DumpEntry{rmsLim0.reTime[29].ns});
        res.insert_or_assign("rmsLim0.reTime[30].s", DumpEntry{rmsLim0.reTime[30].s});
        res.insert_or_assign("rmsLim0.reTime[30].ns", DumpEntry{rmsLim0.reTime[30].ns});
        res.insert_or_assign("rmsLim0.reTime[31].s", DumpEntry{rmsLim0.reTime[31].s});
        res.insert_or_assign("rmsLim0.reTime[31].ns", DumpEntry{rmsLim0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim1::FastFilterScArray`
    //!
    //! @param fastFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under fastFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim1::FastFilterScArray& fastFilterSc)
    {
        DumpMap res{fastFilterSc.base()};
        res.insert_or_assign("fastFilterSc[0].val", DumpEntry{fastFilterSc[0].val});
        res.insert_or_assign("fastFilterSc[1].val", DumpEntry{fastFilterSc[1].val});
        res.insert_or_assign("fastFilterSc[2].val", DumpEntry{fastFilterSc[2].val});
        res.insert_or_assign("fastFilterSc[3].val", DumpEntry{fastFilterSc[3].val});
        res.insert_or_assign("fastFilterSc[4].val", DumpEntry{fastFilterSc[4].val});
        res.insert_or_assign("fastFilterSc[5].val", DumpEntry{fastFilterSc[5].val});
        res.insert_or_assign("fastFilterSc[6].val", DumpEntry{fastFilterSc[6].val});
        res.insert_or_assign("fastFilterSc[7].val", DumpEntry{fastFilterSc[7].val});
        res.insert_or_assign("fastFilterSc[8].val", DumpEntry{fastFilterSc[8].val});
        res.insert_or_assign("fastFilterSc[9].val", DumpEntry{fastFilterSc[9].val});
        res.insert_or_assign("fastFilterSc[10].val", DumpEntry{fastFilterSc[10].val});
        res.insert_or_assign("fastFilterSc[11].val", DumpEntry{fastFilterSc[11].val});
        res.insert_or_assign("fastFilterSc[12].val", DumpEntry{fastFilterSc[12].val});
        res.insert_or_assign("fastFilterSc[13].val", DumpEntry{fastFilterSc[13].val});
        res.insert_or_assign("fastFilterSc[14].val", DumpEntry{fastFilterSc[14].val});
        res.insert_or_assign("fastFilterSc[15].val", DumpEntry{fastFilterSc[15].val});
        res.insert_or_assign("fastFilterSc[16].val", DumpEntry{fastFilterSc[16].val});
        res.insert_or_assign("fastFilterSc[17].val", DumpEntry{fastFilterSc[17].val});
        res.insert_or_assign("fastFilterSc[18].val", DumpEntry{fastFilterSc[18].val});
        res.insert_or_assign("fastFilterSc[19].val", DumpEntry{fastFilterSc[19].val});
        res.insert_or_assign("fastFilterSc[20].val", DumpEntry{fastFilterSc[20].val});
        res.insert_or_assign("fastFilterSc[21].val", DumpEntry{fastFilterSc[21].val});
        res.insert_or_assign("fastFilterSc[22].val", DumpEntry{fastFilterSc[22].val});
        res.insert_or_assign("fastFilterSc[23].val", DumpEntry{fastFilterSc[23].val});
        res.insert_or_assign("fastFilterSc[24].val", DumpEntry{fastFilterSc[24].val});
        res.insert_or_assign("fastFilterSc[25].val", DumpEntry{fastFilterSc[25].val});
        res.insert_or_assign("fastFilterSc[26].val", DumpEntry{fastFilterSc[26].val});
        res.insert_or_assign("fastFilterSc[27].val", DumpEntry{fastFilterSc[27].val});
        res.insert_or_assign("fastFilterSc[28].val", DumpEntry{fastFilterSc[28].val});
        res.insert_or_assign("fastFilterSc[29].val", DumpEntry{fastFilterSc[29].val});
        res.insert_or_assign("fastFilterSc[30].val", DumpEntry{fastFilterSc[30].val});
        res.insert_or_assign("fastFilterSc[31].val", DumpEntry{fastFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim1::SlowFilterScArray`
    //!
    //! @param slowFilterSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under slowFilterSc
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim1::SlowFilterScArray& slowFilterSc)
    {
        DumpMap res{slowFilterSc.base()};
        res.insert_or_assign("slowFilterSc[0].val", DumpEntry{slowFilterSc[0].val});
        res.insert_or_assign("slowFilterSc[1].val", DumpEntry{slowFilterSc[1].val});
        res.insert_or_assign("slowFilterSc[2].val", DumpEntry{slowFilterSc[2].val});
        res.insert_or_assign("slowFilterSc[3].val", DumpEntry{slowFilterSc[3].val});
        res.insert_or_assign("slowFilterSc[4].val", DumpEntry{slowFilterSc[4].val});
        res.insert_or_assign("slowFilterSc[5].val", DumpEntry{slowFilterSc[5].val});
        res.insert_or_assign("slowFilterSc[6].val", DumpEntry{slowFilterSc[6].val});
        res.insert_or_assign("slowFilterSc[7].val", DumpEntry{slowFilterSc[7].val});
        res.insert_or_assign("slowFilterSc[8].val", DumpEntry{slowFilterSc[8].val});
        res.insert_or_assign("slowFilterSc[9].val", DumpEntry{slowFilterSc[9].val});
        res.insert_or_assign("slowFilterSc[10].val", DumpEntry{slowFilterSc[10].val});
        res.insert_or_assign("slowFilterSc[11].val", DumpEntry{slowFilterSc[11].val});
        res.insert_or_assign("slowFilterSc[12].val", DumpEntry{slowFilterSc[12].val});
        res.insert_or_assign("slowFilterSc[13].val", DumpEntry{slowFilterSc[13].val});
        res.insert_or_assign("slowFilterSc[14].val", DumpEntry{slowFilterSc[14].val});
        res.insert_or_assign("slowFilterSc[15].val", DumpEntry{slowFilterSc[15].val});
        res.insert_or_assign("slowFilterSc[16].val", DumpEntry{slowFilterSc[16].val});
        res.insert_or_assign("slowFilterSc[17].val", DumpEntry{slowFilterSc[17].val});
        res.insert_or_assign("slowFilterSc[18].val", DumpEntry{slowFilterSc[18].val});
        res.insert_or_assign("slowFilterSc[19].val", DumpEntry{slowFilterSc[19].val});
        res.insert_or_assign("slowFilterSc[20].val", DumpEntry{slowFilterSc[20].val});
        res.insert_or_assign("slowFilterSc[21].val", DumpEntry{slowFilterSc[21].val});
        res.insert_or_assign("slowFilterSc[22].val", DumpEntry{slowFilterSc[22].val});
        res.insert_or_assign("slowFilterSc[23].val", DumpEntry{slowFilterSc[23].val});
        res.insert_or_assign("slowFilterSc[24].val", DumpEntry{slowFilterSc[24].val});
        res.insert_or_assign("slowFilterSc[25].val", DumpEntry{slowFilterSc[25].val});
        res.insert_or_assign("slowFilterSc[26].val", DumpEntry{slowFilterSc[26].val});
        res.insert_or_assign("slowFilterSc[27].val", DumpEntry{slowFilterSc[27].val});
        res.insert_or_assign("slowFilterSc[28].val", DumpEntry{slowFilterSc[28].val});
        res.insert_or_assign("slowFilterSc[29].val", DumpEntry{slowFilterSc[29].val});
        res.insert_or_assign("slowFilterSc[30].val", DumpEntry{slowFilterSc[30].val});
        res.insert_or_assign("slowFilterSc[31].val", DumpEntry{slowFilterSc[31].val});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig::RmsLim1`
    //!
    //! @param rmsLim1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rmsLim1
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig::RmsLim1& rmsLim1)
    {
        DumpMap res{rmsLim1.base()};
        res.insert_or_assign("rmsLim1.staticParams", DumpEntry{rmsLim1.staticParams});
        res.insert_or_assign("rmsLim1.staticParams.invertIsEn", DumpEntry{rmsLim1.staticParams.invertIsEn});
        res.insert_or_assign("rmsLim1.staticParams.enableIsEn", DumpEntry{rmsLim1.staticParams.enableIsEn});
        res.insert_or_assign("rmsLim1.staticParams.latchIsEn", DumpEntry{rmsLim1.staticParams.latchIsEn});
        res.insert_or_assign("rmsLim1.staticParams.deglitchIsEn", DumpEntry{rmsLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("rmsLim1.staticParams.reTimeIsEn", DumpEntry{rmsLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("rmsLim1.staticParams.numChannels", DumpEntry{rmsLim1.staticParams.numChannels});
        res.insert_or_assign("rmsLim1.data", DumpEntry{rmsLim1.data});
        res.insert_or_assign("rmsLim1.dataChanged", DumpEntry{rmsLim1.dataChanged});
        res.insert_or_assign("rmsLim1.invert", DumpEntry{rmsLim1.invert});
        res.insert_or_assign("rmsLim1.enable", DumpEntry{rmsLim1.enable});
        res.insert_or_assign("rmsLim1.latch", DumpEntry{rmsLim1.latch});
        res.insert_or_assign("rmsLim1.rstLatch", DumpEntry{rmsLim1.rstLatch});
        res.insert_or_assign("rmsLim1.risingInterrupt", DumpEntry{rmsLim1.risingInterrupt});
        res.insert_or_assign("rmsLim1.fallingInterrupt", DumpEntry{rmsLim1.fallingInterrupt});
        res.insert_or_assign("rmsLim1.fastFilterSc[0].val", DumpEntry{rmsLim1.fastFilterSc[0].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[1].val", DumpEntry{rmsLim1.fastFilterSc[1].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[2].val", DumpEntry{rmsLim1.fastFilterSc[2].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[3].val", DumpEntry{rmsLim1.fastFilterSc[3].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[4].val", DumpEntry{rmsLim1.fastFilterSc[4].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[5].val", DumpEntry{rmsLim1.fastFilterSc[5].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[6].val", DumpEntry{rmsLim1.fastFilterSc[6].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[7].val", DumpEntry{rmsLim1.fastFilterSc[7].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[8].val", DumpEntry{rmsLim1.fastFilterSc[8].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[9].val", DumpEntry{rmsLim1.fastFilterSc[9].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[10].val", DumpEntry{rmsLim1.fastFilterSc[10].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[11].val", DumpEntry{rmsLim1.fastFilterSc[11].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[12].val", DumpEntry{rmsLim1.fastFilterSc[12].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[13].val", DumpEntry{rmsLim1.fastFilterSc[13].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[14].val", DumpEntry{rmsLim1.fastFilterSc[14].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[15].val", DumpEntry{rmsLim1.fastFilterSc[15].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[16].val", DumpEntry{rmsLim1.fastFilterSc[16].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[17].val", DumpEntry{rmsLim1.fastFilterSc[17].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[18].val", DumpEntry{rmsLim1.fastFilterSc[18].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[19].val", DumpEntry{rmsLim1.fastFilterSc[19].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[20].val", DumpEntry{rmsLim1.fastFilterSc[20].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[21].val", DumpEntry{rmsLim1.fastFilterSc[21].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[22].val", DumpEntry{rmsLim1.fastFilterSc[22].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[23].val", DumpEntry{rmsLim1.fastFilterSc[23].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[24].val", DumpEntry{rmsLim1.fastFilterSc[24].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[25].val", DumpEntry{rmsLim1.fastFilterSc[25].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[26].val", DumpEntry{rmsLim1.fastFilterSc[26].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[27].val", DumpEntry{rmsLim1.fastFilterSc[27].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[28].val", DumpEntry{rmsLim1.fastFilterSc[28].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[29].val", DumpEntry{rmsLim1.fastFilterSc[29].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[30].val", DumpEntry{rmsLim1.fastFilterSc[30].val});
        res.insert_or_assign("rmsLim1.fastFilterSc[31].val", DumpEntry{rmsLim1.fastFilterSc[31].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[0].val", DumpEntry{rmsLim1.slowFilterSc[0].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[1].val", DumpEntry{rmsLim1.slowFilterSc[1].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[2].val", DumpEntry{rmsLim1.slowFilterSc[2].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[3].val", DumpEntry{rmsLim1.slowFilterSc[3].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[4].val", DumpEntry{rmsLim1.slowFilterSc[4].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[5].val", DumpEntry{rmsLim1.slowFilterSc[5].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[6].val", DumpEntry{rmsLim1.slowFilterSc[6].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[7].val", DumpEntry{rmsLim1.slowFilterSc[7].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[8].val", DumpEntry{rmsLim1.slowFilterSc[8].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[9].val", DumpEntry{rmsLim1.slowFilterSc[9].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[10].val", DumpEntry{rmsLim1.slowFilterSc[10].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[11].val", DumpEntry{rmsLim1.slowFilterSc[11].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[12].val", DumpEntry{rmsLim1.slowFilterSc[12].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[13].val", DumpEntry{rmsLim1.slowFilterSc[13].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[14].val", DumpEntry{rmsLim1.slowFilterSc[14].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[15].val", DumpEntry{rmsLim1.slowFilterSc[15].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[16].val", DumpEntry{rmsLim1.slowFilterSc[16].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[17].val", DumpEntry{rmsLim1.slowFilterSc[17].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[18].val", DumpEntry{rmsLim1.slowFilterSc[18].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[19].val", DumpEntry{rmsLim1.slowFilterSc[19].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[20].val", DumpEntry{rmsLim1.slowFilterSc[20].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[21].val", DumpEntry{rmsLim1.slowFilterSc[21].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[22].val", DumpEntry{rmsLim1.slowFilterSc[22].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[23].val", DumpEntry{rmsLim1.slowFilterSc[23].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[24].val", DumpEntry{rmsLim1.slowFilterSc[24].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[25].val", DumpEntry{rmsLim1.slowFilterSc[25].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[26].val", DumpEntry{rmsLim1.slowFilterSc[26].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[27].val", DumpEntry{rmsLim1.slowFilterSc[27].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[28].val", DumpEntry{rmsLim1.slowFilterSc[28].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[29].val", DumpEntry{rmsLim1.slowFilterSc[29].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[30].val", DumpEntry{rmsLim1.slowFilterSc[30].val});
        res.insert_or_assign("rmsLim1.slowFilterSc[31].val", DumpEntry{rmsLim1.slowFilterSc[31].val});
        res.insert_or_assign("rmsLim1.reTime[0].s", DumpEntry{rmsLim1.reTime[0].s});
        res.insert_or_assign("rmsLim1.reTime[0].ns", DumpEntry{rmsLim1.reTime[0].ns});
        res.insert_or_assign("rmsLim1.reTime[1].s", DumpEntry{rmsLim1.reTime[1].s});
        res.insert_or_assign("rmsLim1.reTime[1].ns", DumpEntry{rmsLim1.reTime[1].ns});
        res.insert_or_assign("rmsLim1.reTime[2].s", DumpEntry{rmsLim1.reTime[2].s});
        res.insert_or_assign("rmsLim1.reTime[2].ns", DumpEntry{rmsLim1.reTime[2].ns});
        res.insert_or_assign("rmsLim1.reTime[3].s", DumpEntry{rmsLim1.reTime[3].s});
        res.insert_or_assign("rmsLim1.reTime[3].ns", DumpEntry{rmsLim1.reTime[3].ns});
        res.insert_or_assign("rmsLim1.reTime[4].s", DumpEntry{rmsLim1.reTime[4].s});
        res.insert_or_assign("rmsLim1.reTime[4].ns", DumpEntry{rmsLim1.reTime[4].ns});
        res.insert_or_assign("rmsLim1.reTime[5].s", DumpEntry{rmsLim1.reTime[5].s});
        res.insert_or_assign("rmsLim1.reTime[5].ns", DumpEntry{rmsLim1.reTime[5].ns});
        res.insert_or_assign("rmsLim1.reTime[6].s", DumpEntry{rmsLim1.reTime[6].s});
        res.insert_or_assign("rmsLim1.reTime[6].ns", DumpEntry{rmsLim1.reTime[6].ns});
        res.insert_or_assign("rmsLim1.reTime[7].s", DumpEntry{rmsLim1.reTime[7].s});
        res.insert_or_assign("rmsLim1.reTime[7].ns", DumpEntry{rmsLim1.reTime[7].ns});
        res.insert_or_assign("rmsLim1.reTime[8].s", DumpEntry{rmsLim1.reTime[8].s});
        res.insert_or_assign("rmsLim1.reTime[8].ns", DumpEntry{rmsLim1.reTime[8].ns});
        res.insert_or_assign("rmsLim1.reTime[9].s", DumpEntry{rmsLim1.reTime[9].s});
        res.insert_or_assign("rmsLim1.reTime[9].ns", DumpEntry{rmsLim1.reTime[9].ns});
        res.insert_or_assign("rmsLim1.reTime[10].s", DumpEntry{rmsLim1.reTime[10].s});
        res.insert_or_assign("rmsLim1.reTime[10].ns", DumpEntry{rmsLim1.reTime[10].ns});
        res.insert_or_assign("rmsLim1.reTime[11].s", DumpEntry{rmsLim1.reTime[11].s});
        res.insert_or_assign("rmsLim1.reTime[11].ns", DumpEntry{rmsLim1.reTime[11].ns});
        res.insert_or_assign("rmsLim1.reTime[12].s", DumpEntry{rmsLim1.reTime[12].s});
        res.insert_or_assign("rmsLim1.reTime[12].ns", DumpEntry{rmsLim1.reTime[12].ns});
        res.insert_or_assign("rmsLim1.reTime[13].s", DumpEntry{rmsLim1.reTime[13].s});
        res.insert_or_assign("rmsLim1.reTime[13].ns", DumpEntry{rmsLim1.reTime[13].ns});
        res.insert_or_assign("rmsLim1.reTime[14].s", DumpEntry{rmsLim1.reTime[14].s});
        res.insert_or_assign("rmsLim1.reTime[14].ns", DumpEntry{rmsLim1.reTime[14].ns});
        res.insert_or_assign("rmsLim1.reTime[15].s", DumpEntry{rmsLim1.reTime[15].s});
        res.insert_or_assign("rmsLim1.reTime[15].ns", DumpEntry{rmsLim1.reTime[15].ns});
        res.insert_or_assign("rmsLim1.reTime[16].s", DumpEntry{rmsLim1.reTime[16].s});
        res.insert_or_assign("rmsLim1.reTime[16].ns", DumpEntry{rmsLim1.reTime[16].ns});
        res.insert_or_assign("rmsLim1.reTime[17].s", DumpEntry{rmsLim1.reTime[17].s});
        res.insert_or_assign("rmsLim1.reTime[17].ns", DumpEntry{rmsLim1.reTime[17].ns});
        res.insert_or_assign("rmsLim1.reTime[18].s", DumpEntry{rmsLim1.reTime[18].s});
        res.insert_or_assign("rmsLim1.reTime[18].ns", DumpEntry{rmsLim1.reTime[18].ns});
        res.insert_or_assign("rmsLim1.reTime[19].s", DumpEntry{rmsLim1.reTime[19].s});
        res.insert_or_assign("rmsLim1.reTime[19].ns", DumpEntry{rmsLim1.reTime[19].ns});
        res.insert_or_assign("rmsLim1.reTime[20].s", DumpEntry{rmsLim1.reTime[20].s});
        res.insert_or_assign("rmsLim1.reTime[20].ns", DumpEntry{rmsLim1.reTime[20].ns});
        res.insert_or_assign("rmsLim1.reTime[21].s", DumpEntry{rmsLim1.reTime[21].s});
        res.insert_or_assign("rmsLim1.reTime[21].ns", DumpEntry{rmsLim1.reTime[21].ns});
        res.insert_or_assign("rmsLim1.reTime[22].s", DumpEntry{rmsLim1.reTime[22].s});
        res.insert_or_assign("rmsLim1.reTime[22].ns", DumpEntry{rmsLim1.reTime[22].ns});
        res.insert_or_assign("rmsLim1.reTime[23].s", DumpEntry{rmsLim1.reTime[23].s});
        res.insert_or_assign("rmsLim1.reTime[23].ns", DumpEntry{rmsLim1.reTime[23].ns});
        res.insert_or_assign("rmsLim1.reTime[24].s", DumpEntry{rmsLim1.reTime[24].s});
        res.insert_or_assign("rmsLim1.reTime[24].ns", DumpEntry{rmsLim1.reTime[24].ns});
        res.insert_or_assign("rmsLim1.reTime[25].s", DumpEntry{rmsLim1.reTime[25].s});
        res.insert_or_assign("rmsLim1.reTime[25].ns", DumpEntry{rmsLim1.reTime[25].ns});
        res.insert_or_assign("rmsLim1.reTime[26].s", DumpEntry{rmsLim1.reTime[26].s});
        res.insert_or_assign("rmsLim1.reTime[26].ns", DumpEntry{rmsLim1.reTime[26].ns});
        res.insert_or_assign("rmsLim1.reTime[27].s", DumpEntry{rmsLim1.reTime[27].s});
        res.insert_or_assign("rmsLim1.reTime[27].ns", DumpEntry{rmsLim1.reTime[27].ns});
        res.insert_or_assign("rmsLim1.reTime[28].s", DumpEntry{rmsLim1.reTime[28].s});
        res.insert_or_assign("rmsLim1.reTime[28].ns", DumpEntry{rmsLim1.reTime[28].ns});
        res.insert_or_assign("rmsLim1.reTime[29].s", DumpEntry{rmsLim1.reTime[29].s});
        res.insert_or_assign("rmsLim1.reTime[29].ns", DumpEntry{rmsLim1.reTime[29].ns});
        res.insert_or_assign("rmsLim1.reTime[30].s", DumpEntry{rmsLim1.reTime[30].s});
        res.insert_or_assign("rmsLim1.reTime[30].ns", DumpEntry{rmsLim1.reTime[30].ns});
        res.insert_or_assign("rmsLim1.reTime[31].s", DumpEntry{rmsLim1.reTime[31].s});
        res.insert_or_assign("rmsLim1.reTime[31].ns", DumpEntry{rmsLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Dig`
    //!
    //! @param dig A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dig
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Dig& dig)
    {
        DumpMap res{dig.base()};
        res.insert_or_assign("dig.digI0.staticParams", DumpEntry{dig.digI0.staticParams});
        res.insert_or_assign("dig.digI0.staticParams.invertIsEn", DumpEntry{dig.digI0.staticParams.invertIsEn});
        res.insert_or_assign("dig.digI0.staticParams.enableIsEn", DumpEntry{dig.digI0.staticParams.enableIsEn});
        res.insert_or_assign("dig.digI0.staticParams.latchIsEn", DumpEntry{dig.digI0.staticParams.latchIsEn});
        res.insert_or_assign("dig.digI0.staticParams.deglitchIsEn", DumpEntry{dig.digI0.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digI0.staticParams.reTimeIsEn", DumpEntry{dig.digI0.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digI0.staticParams.numChannels", DumpEntry{dig.digI0.staticParams.numChannels});
        res.insert_or_assign("dig.digI0.data", DumpEntry{dig.digI0.data});
        res.insert_or_assign("dig.digI0.dataChanged", DumpEntry{dig.digI0.dataChanged});
        res.insert_or_assign("dig.digI0.invert", DumpEntry{dig.digI0.invert});
        res.insert_or_assign("dig.digI0.enable", DumpEntry{dig.digI0.enable});
        res.insert_or_assign("dig.digI0.latch", DumpEntry{dig.digI0.latch});
        res.insert_or_assign("dig.digI0.rstLatch", DumpEntry{dig.digI0.rstLatch});
        res.insert_or_assign("dig.digI0.risingInterrupt", DumpEntry{dig.digI0.risingInterrupt});
        res.insert_or_assign("dig.digI0.fallingInterrupt", DumpEntry{dig.digI0.fallingInterrupt});
        res.insert_or_assign("dig.digI0.fastFilterSc[0].val", DumpEntry{dig.digI0.fastFilterSc[0].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[1].val", DumpEntry{dig.digI0.fastFilterSc[1].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[2].val", DumpEntry{dig.digI0.fastFilterSc[2].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[3].val", DumpEntry{dig.digI0.fastFilterSc[3].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[4].val", DumpEntry{dig.digI0.fastFilterSc[4].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[5].val", DumpEntry{dig.digI0.fastFilterSc[5].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[6].val", DumpEntry{dig.digI0.fastFilterSc[6].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[7].val", DumpEntry{dig.digI0.fastFilterSc[7].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[8].val", DumpEntry{dig.digI0.fastFilterSc[8].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[9].val", DumpEntry{dig.digI0.fastFilterSc[9].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[10].val", DumpEntry{dig.digI0.fastFilterSc[10].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[11].val", DumpEntry{dig.digI0.fastFilterSc[11].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[12].val", DumpEntry{dig.digI0.fastFilterSc[12].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[13].val", DumpEntry{dig.digI0.fastFilterSc[13].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[14].val", DumpEntry{dig.digI0.fastFilterSc[14].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[15].val", DumpEntry{dig.digI0.fastFilterSc[15].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[16].val", DumpEntry{dig.digI0.fastFilterSc[16].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[17].val", DumpEntry{dig.digI0.fastFilterSc[17].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[18].val", DumpEntry{dig.digI0.fastFilterSc[18].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[19].val", DumpEntry{dig.digI0.fastFilterSc[19].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[20].val", DumpEntry{dig.digI0.fastFilterSc[20].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[21].val", DumpEntry{dig.digI0.fastFilterSc[21].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[22].val", DumpEntry{dig.digI0.fastFilterSc[22].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[23].val", DumpEntry{dig.digI0.fastFilterSc[23].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[24].val", DumpEntry{dig.digI0.fastFilterSc[24].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[25].val", DumpEntry{dig.digI0.fastFilterSc[25].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[26].val", DumpEntry{dig.digI0.fastFilterSc[26].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[27].val", DumpEntry{dig.digI0.fastFilterSc[27].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[28].val", DumpEntry{dig.digI0.fastFilterSc[28].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[29].val", DumpEntry{dig.digI0.fastFilterSc[29].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[30].val", DumpEntry{dig.digI0.fastFilterSc[30].val});
        res.insert_or_assign("dig.digI0.fastFilterSc[31].val", DumpEntry{dig.digI0.fastFilterSc[31].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[0].val", DumpEntry{dig.digI0.slowFilterSc[0].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[1].val", DumpEntry{dig.digI0.slowFilterSc[1].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[2].val", DumpEntry{dig.digI0.slowFilterSc[2].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[3].val", DumpEntry{dig.digI0.slowFilterSc[3].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[4].val", DumpEntry{dig.digI0.slowFilterSc[4].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[5].val", DumpEntry{dig.digI0.slowFilterSc[5].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[6].val", DumpEntry{dig.digI0.slowFilterSc[6].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[7].val", DumpEntry{dig.digI0.slowFilterSc[7].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[8].val", DumpEntry{dig.digI0.slowFilterSc[8].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[9].val", DumpEntry{dig.digI0.slowFilterSc[9].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[10].val", DumpEntry{dig.digI0.slowFilterSc[10].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[11].val", DumpEntry{dig.digI0.slowFilterSc[11].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[12].val", DumpEntry{dig.digI0.slowFilterSc[12].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[13].val", DumpEntry{dig.digI0.slowFilterSc[13].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[14].val", DumpEntry{dig.digI0.slowFilterSc[14].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[15].val", DumpEntry{dig.digI0.slowFilterSc[15].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[16].val", DumpEntry{dig.digI0.slowFilterSc[16].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[17].val", DumpEntry{dig.digI0.slowFilterSc[17].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[18].val", DumpEntry{dig.digI0.slowFilterSc[18].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[19].val", DumpEntry{dig.digI0.slowFilterSc[19].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[20].val", DumpEntry{dig.digI0.slowFilterSc[20].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[21].val", DumpEntry{dig.digI0.slowFilterSc[21].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[22].val", DumpEntry{dig.digI0.slowFilterSc[22].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[23].val", DumpEntry{dig.digI0.slowFilterSc[23].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[24].val", DumpEntry{dig.digI0.slowFilterSc[24].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[25].val", DumpEntry{dig.digI0.slowFilterSc[25].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[26].val", DumpEntry{dig.digI0.slowFilterSc[26].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[27].val", DumpEntry{dig.digI0.slowFilterSc[27].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[28].val", DumpEntry{dig.digI0.slowFilterSc[28].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[29].val", DumpEntry{dig.digI0.slowFilterSc[29].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[30].val", DumpEntry{dig.digI0.slowFilterSc[30].val});
        res.insert_or_assign("dig.digI0.slowFilterSc[31].val", DumpEntry{dig.digI0.slowFilterSc[31].val});
        res.insert_or_assign("dig.digI0.reTime[0].s", DumpEntry{dig.digI0.reTime[0].s});
        res.insert_or_assign("dig.digI0.reTime[0].ns", DumpEntry{dig.digI0.reTime[0].ns});
        res.insert_or_assign("dig.digI0.reTime[1].s", DumpEntry{dig.digI0.reTime[1].s});
        res.insert_or_assign("dig.digI0.reTime[1].ns", DumpEntry{dig.digI0.reTime[1].ns});
        res.insert_or_assign("dig.digI0.reTime[2].s", DumpEntry{dig.digI0.reTime[2].s});
        res.insert_or_assign("dig.digI0.reTime[2].ns", DumpEntry{dig.digI0.reTime[2].ns});
        res.insert_or_assign("dig.digI0.reTime[3].s", DumpEntry{dig.digI0.reTime[3].s});
        res.insert_or_assign("dig.digI0.reTime[3].ns", DumpEntry{dig.digI0.reTime[3].ns});
        res.insert_or_assign("dig.digI0.reTime[4].s", DumpEntry{dig.digI0.reTime[4].s});
        res.insert_or_assign("dig.digI0.reTime[4].ns", DumpEntry{dig.digI0.reTime[4].ns});
        res.insert_or_assign("dig.digI0.reTime[5].s", DumpEntry{dig.digI0.reTime[5].s});
        res.insert_or_assign("dig.digI0.reTime[5].ns", DumpEntry{dig.digI0.reTime[5].ns});
        res.insert_or_assign("dig.digI0.reTime[6].s", DumpEntry{dig.digI0.reTime[6].s});
        res.insert_or_assign("dig.digI0.reTime[6].ns", DumpEntry{dig.digI0.reTime[6].ns});
        res.insert_or_assign("dig.digI0.reTime[7].s", DumpEntry{dig.digI0.reTime[7].s});
        res.insert_or_assign("dig.digI0.reTime[7].ns", DumpEntry{dig.digI0.reTime[7].ns});
        res.insert_or_assign("dig.digI0.reTime[8].s", DumpEntry{dig.digI0.reTime[8].s});
        res.insert_or_assign("dig.digI0.reTime[8].ns", DumpEntry{dig.digI0.reTime[8].ns});
        res.insert_or_assign("dig.digI0.reTime[9].s", DumpEntry{dig.digI0.reTime[9].s});
        res.insert_or_assign("dig.digI0.reTime[9].ns", DumpEntry{dig.digI0.reTime[9].ns});
        res.insert_or_assign("dig.digI0.reTime[10].s", DumpEntry{dig.digI0.reTime[10].s});
        res.insert_or_assign("dig.digI0.reTime[10].ns", DumpEntry{dig.digI0.reTime[10].ns});
        res.insert_or_assign("dig.digI0.reTime[11].s", DumpEntry{dig.digI0.reTime[11].s});
        res.insert_or_assign("dig.digI0.reTime[11].ns", DumpEntry{dig.digI0.reTime[11].ns});
        res.insert_or_assign("dig.digI0.reTime[12].s", DumpEntry{dig.digI0.reTime[12].s});
        res.insert_or_assign("dig.digI0.reTime[12].ns", DumpEntry{dig.digI0.reTime[12].ns});
        res.insert_or_assign("dig.digI0.reTime[13].s", DumpEntry{dig.digI0.reTime[13].s});
        res.insert_or_assign("dig.digI0.reTime[13].ns", DumpEntry{dig.digI0.reTime[13].ns});
        res.insert_or_assign("dig.digI0.reTime[14].s", DumpEntry{dig.digI0.reTime[14].s});
        res.insert_or_assign("dig.digI0.reTime[14].ns", DumpEntry{dig.digI0.reTime[14].ns});
        res.insert_or_assign("dig.digI0.reTime[15].s", DumpEntry{dig.digI0.reTime[15].s});
        res.insert_or_assign("dig.digI0.reTime[15].ns", DumpEntry{dig.digI0.reTime[15].ns});
        res.insert_or_assign("dig.digI0.reTime[16].s", DumpEntry{dig.digI0.reTime[16].s});
        res.insert_or_assign("dig.digI0.reTime[16].ns", DumpEntry{dig.digI0.reTime[16].ns});
        res.insert_or_assign("dig.digI0.reTime[17].s", DumpEntry{dig.digI0.reTime[17].s});
        res.insert_or_assign("dig.digI0.reTime[17].ns", DumpEntry{dig.digI0.reTime[17].ns});
        res.insert_or_assign("dig.digI0.reTime[18].s", DumpEntry{dig.digI0.reTime[18].s});
        res.insert_or_assign("dig.digI0.reTime[18].ns", DumpEntry{dig.digI0.reTime[18].ns});
        res.insert_or_assign("dig.digI0.reTime[19].s", DumpEntry{dig.digI0.reTime[19].s});
        res.insert_or_assign("dig.digI0.reTime[19].ns", DumpEntry{dig.digI0.reTime[19].ns});
        res.insert_or_assign("dig.digI0.reTime[20].s", DumpEntry{dig.digI0.reTime[20].s});
        res.insert_or_assign("dig.digI0.reTime[20].ns", DumpEntry{dig.digI0.reTime[20].ns});
        res.insert_or_assign("dig.digI0.reTime[21].s", DumpEntry{dig.digI0.reTime[21].s});
        res.insert_or_assign("dig.digI0.reTime[21].ns", DumpEntry{dig.digI0.reTime[21].ns});
        res.insert_or_assign("dig.digI0.reTime[22].s", DumpEntry{dig.digI0.reTime[22].s});
        res.insert_or_assign("dig.digI0.reTime[22].ns", DumpEntry{dig.digI0.reTime[22].ns});
        res.insert_or_assign("dig.digI0.reTime[23].s", DumpEntry{dig.digI0.reTime[23].s});
        res.insert_or_assign("dig.digI0.reTime[23].ns", DumpEntry{dig.digI0.reTime[23].ns});
        res.insert_or_assign("dig.digI0.reTime[24].s", DumpEntry{dig.digI0.reTime[24].s});
        res.insert_or_assign("dig.digI0.reTime[24].ns", DumpEntry{dig.digI0.reTime[24].ns});
        res.insert_or_assign("dig.digI0.reTime[25].s", DumpEntry{dig.digI0.reTime[25].s});
        res.insert_or_assign("dig.digI0.reTime[25].ns", DumpEntry{dig.digI0.reTime[25].ns});
        res.insert_or_assign("dig.digI0.reTime[26].s", DumpEntry{dig.digI0.reTime[26].s});
        res.insert_or_assign("dig.digI0.reTime[26].ns", DumpEntry{dig.digI0.reTime[26].ns});
        res.insert_or_assign("dig.digI0.reTime[27].s", DumpEntry{dig.digI0.reTime[27].s});
        res.insert_or_assign("dig.digI0.reTime[27].ns", DumpEntry{dig.digI0.reTime[27].ns});
        res.insert_or_assign("dig.digI0.reTime[28].s", DumpEntry{dig.digI0.reTime[28].s});
        res.insert_or_assign("dig.digI0.reTime[28].ns", DumpEntry{dig.digI0.reTime[28].ns});
        res.insert_or_assign("dig.digI0.reTime[29].s", DumpEntry{dig.digI0.reTime[29].s});
        res.insert_or_assign("dig.digI0.reTime[29].ns", DumpEntry{dig.digI0.reTime[29].ns});
        res.insert_or_assign("dig.digI0.reTime[30].s", DumpEntry{dig.digI0.reTime[30].s});
        res.insert_or_assign("dig.digI0.reTime[30].ns", DumpEntry{dig.digI0.reTime[30].ns});
        res.insert_or_assign("dig.digI0.reTime[31].s", DumpEntry{dig.digI0.reTime[31].s});
        res.insert_or_assign("dig.digI0.reTime[31].ns", DumpEntry{dig.digI0.reTime[31].ns});
        res.insert_or_assign("dig.digI1.staticParams", DumpEntry{dig.digI1.staticParams});
        res.insert_or_assign("dig.digI1.staticParams.invertIsEn", DumpEntry{dig.digI1.staticParams.invertIsEn});
        res.insert_or_assign("dig.digI1.staticParams.enableIsEn", DumpEntry{dig.digI1.staticParams.enableIsEn});
        res.insert_or_assign("dig.digI1.staticParams.latchIsEn", DumpEntry{dig.digI1.staticParams.latchIsEn});
        res.insert_or_assign("dig.digI1.staticParams.deglitchIsEn", DumpEntry{dig.digI1.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digI1.staticParams.reTimeIsEn", DumpEntry{dig.digI1.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digI1.staticParams.numChannels", DumpEntry{dig.digI1.staticParams.numChannels});
        res.insert_or_assign("dig.digI1.data", DumpEntry{dig.digI1.data});
        res.insert_or_assign("dig.digI1.dataChanged", DumpEntry{dig.digI1.dataChanged});
        res.insert_or_assign("dig.digI1.invert", DumpEntry{dig.digI1.invert});
        res.insert_or_assign("dig.digI1.enable", DumpEntry{dig.digI1.enable});
        res.insert_or_assign("dig.digI1.latch", DumpEntry{dig.digI1.latch});
        res.insert_or_assign("dig.digI1.rstLatch", DumpEntry{dig.digI1.rstLatch});
        res.insert_or_assign("dig.digI1.risingInterrupt", DumpEntry{dig.digI1.risingInterrupt});
        res.insert_or_assign("dig.digI1.fallingInterrupt", DumpEntry{dig.digI1.fallingInterrupt});
        res.insert_or_assign("dig.digI1.fastFilterSc[0].val", DumpEntry{dig.digI1.fastFilterSc[0].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[1].val", DumpEntry{dig.digI1.fastFilterSc[1].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[2].val", DumpEntry{dig.digI1.fastFilterSc[2].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[3].val", DumpEntry{dig.digI1.fastFilterSc[3].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[4].val", DumpEntry{dig.digI1.fastFilterSc[4].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[5].val", DumpEntry{dig.digI1.fastFilterSc[5].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[6].val", DumpEntry{dig.digI1.fastFilterSc[6].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[7].val", DumpEntry{dig.digI1.fastFilterSc[7].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[8].val", DumpEntry{dig.digI1.fastFilterSc[8].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[9].val", DumpEntry{dig.digI1.fastFilterSc[9].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[10].val", DumpEntry{dig.digI1.fastFilterSc[10].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[11].val", DumpEntry{dig.digI1.fastFilterSc[11].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[12].val", DumpEntry{dig.digI1.fastFilterSc[12].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[13].val", DumpEntry{dig.digI1.fastFilterSc[13].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[14].val", DumpEntry{dig.digI1.fastFilterSc[14].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[15].val", DumpEntry{dig.digI1.fastFilterSc[15].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[16].val", DumpEntry{dig.digI1.fastFilterSc[16].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[17].val", DumpEntry{dig.digI1.fastFilterSc[17].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[18].val", DumpEntry{dig.digI1.fastFilterSc[18].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[19].val", DumpEntry{dig.digI1.fastFilterSc[19].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[20].val", DumpEntry{dig.digI1.fastFilterSc[20].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[21].val", DumpEntry{dig.digI1.fastFilterSc[21].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[22].val", DumpEntry{dig.digI1.fastFilterSc[22].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[23].val", DumpEntry{dig.digI1.fastFilterSc[23].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[24].val", DumpEntry{dig.digI1.fastFilterSc[24].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[25].val", DumpEntry{dig.digI1.fastFilterSc[25].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[26].val", DumpEntry{dig.digI1.fastFilterSc[26].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[27].val", DumpEntry{dig.digI1.fastFilterSc[27].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[28].val", DumpEntry{dig.digI1.fastFilterSc[28].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[29].val", DumpEntry{dig.digI1.fastFilterSc[29].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[30].val", DumpEntry{dig.digI1.fastFilterSc[30].val});
        res.insert_or_assign("dig.digI1.fastFilterSc[31].val", DumpEntry{dig.digI1.fastFilterSc[31].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[0].val", DumpEntry{dig.digI1.slowFilterSc[0].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[1].val", DumpEntry{dig.digI1.slowFilterSc[1].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[2].val", DumpEntry{dig.digI1.slowFilterSc[2].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[3].val", DumpEntry{dig.digI1.slowFilterSc[3].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[4].val", DumpEntry{dig.digI1.slowFilterSc[4].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[5].val", DumpEntry{dig.digI1.slowFilterSc[5].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[6].val", DumpEntry{dig.digI1.slowFilterSc[6].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[7].val", DumpEntry{dig.digI1.slowFilterSc[7].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[8].val", DumpEntry{dig.digI1.slowFilterSc[8].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[9].val", DumpEntry{dig.digI1.slowFilterSc[9].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[10].val", DumpEntry{dig.digI1.slowFilterSc[10].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[11].val", DumpEntry{dig.digI1.slowFilterSc[11].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[12].val", DumpEntry{dig.digI1.slowFilterSc[12].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[13].val", DumpEntry{dig.digI1.slowFilterSc[13].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[14].val", DumpEntry{dig.digI1.slowFilterSc[14].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[15].val", DumpEntry{dig.digI1.slowFilterSc[15].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[16].val", DumpEntry{dig.digI1.slowFilterSc[16].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[17].val", DumpEntry{dig.digI1.slowFilterSc[17].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[18].val", DumpEntry{dig.digI1.slowFilterSc[18].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[19].val", DumpEntry{dig.digI1.slowFilterSc[19].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[20].val", DumpEntry{dig.digI1.slowFilterSc[20].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[21].val", DumpEntry{dig.digI1.slowFilterSc[21].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[22].val", DumpEntry{dig.digI1.slowFilterSc[22].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[23].val", DumpEntry{dig.digI1.slowFilterSc[23].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[24].val", DumpEntry{dig.digI1.slowFilterSc[24].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[25].val", DumpEntry{dig.digI1.slowFilterSc[25].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[26].val", DumpEntry{dig.digI1.slowFilterSc[26].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[27].val", DumpEntry{dig.digI1.slowFilterSc[27].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[28].val", DumpEntry{dig.digI1.slowFilterSc[28].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[29].val", DumpEntry{dig.digI1.slowFilterSc[29].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[30].val", DumpEntry{dig.digI1.slowFilterSc[30].val});
        res.insert_or_assign("dig.digI1.slowFilterSc[31].val", DumpEntry{dig.digI1.slowFilterSc[31].val});
        res.insert_or_assign("dig.digI1.reTime[0].s", DumpEntry{dig.digI1.reTime[0].s});
        res.insert_or_assign("dig.digI1.reTime[0].ns", DumpEntry{dig.digI1.reTime[0].ns});
        res.insert_or_assign("dig.digI1.reTime[1].s", DumpEntry{dig.digI1.reTime[1].s});
        res.insert_or_assign("dig.digI1.reTime[1].ns", DumpEntry{dig.digI1.reTime[1].ns});
        res.insert_or_assign("dig.digI1.reTime[2].s", DumpEntry{dig.digI1.reTime[2].s});
        res.insert_or_assign("dig.digI1.reTime[2].ns", DumpEntry{dig.digI1.reTime[2].ns});
        res.insert_or_assign("dig.digI1.reTime[3].s", DumpEntry{dig.digI1.reTime[3].s});
        res.insert_or_assign("dig.digI1.reTime[3].ns", DumpEntry{dig.digI1.reTime[3].ns});
        res.insert_or_assign("dig.digI1.reTime[4].s", DumpEntry{dig.digI1.reTime[4].s});
        res.insert_or_assign("dig.digI1.reTime[4].ns", DumpEntry{dig.digI1.reTime[4].ns});
        res.insert_or_assign("dig.digI1.reTime[5].s", DumpEntry{dig.digI1.reTime[5].s});
        res.insert_or_assign("dig.digI1.reTime[5].ns", DumpEntry{dig.digI1.reTime[5].ns});
        res.insert_or_assign("dig.digI1.reTime[6].s", DumpEntry{dig.digI1.reTime[6].s});
        res.insert_or_assign("dig.digI1.reTime[6].ns", DumpEntry{dig.digI1.reTime[6].ns});
        res.insert_or_assign("dig.digI1.reTime[7].s", DumpEntry{dig.digI1.reTime[7].s});
        res.insert_or_assign("dig.digI1.reTime[7].ns", DumpEntry{dig.digI1.reTime[7].ns});
        res.insert_or_assign("dig.digI1.reTime[8].s", DumpEntry{dig.digI1.reTime[8].s});
        res.insert_or_assign("dig.digI1.reTime[8].ns", DumpEntry{dig.digI1.reTime[8].ns});
        res.insert_or_assign("dig.digI1.reTime[9].s", DumpEntry{dig.digI1.reTime[9].s});
        res.insert_or_assign("dig.digI1.reTime[9].ns", DumpEntry{dig.digI1.reTime[9].ns});
        res.insert_or_assign("dig.digI1.reTime[10].s", DumpEntry{dig.digI1.reTime[10].s});
        res.insert_or_assign("dig.digI1.reTime[10].ns", DumpEntry{dig.digI1.reTime[10].ns});
        res.insert_or_assign("dig.digI1.reTime[11].s", DumpEntry{dig.digI1.reTime[11].s});
        res.insert_or_assign("dig.digI1.reTime[11].ns", DumpEntry{dig.digI1.reTime[11].ns});
        res.insert_or_assign("dig.digI1.reTime[12].s", DumpEntry{dig.digI1.reTime[12].s});
        res.insert_or_assign("dig.digI1.reTime[12].ns", DumpEntry{dig.digI1.reTime[12].ns});
        res.insert_or_assign("dig.digI1.reTime[13].s", DumpEntry{dig.digI1.reTime[13].s});
        res.insert_or_assign("dig.digI1.reTime[13].ns", DumpEntry{dig.digI1.reTime[13].ns});
        res.insert_or_assign("dig.digI1.reTime[14].s", DumpEntry{dig.digI1.reTime[14].s});
        res.insert_or_assign("dig.digI1.reTime[14].ns", DumpEntry{dig.digI1.reTime[14].ns});
        res.insert_or_assign("dig.digI1.reTime[15].s", DumpEntry{dig.digI1.reTime[15].s});
        res.insert_or_assign("dig.digI1.reTime[15].ns", DumpEntry{dig.digI1.reTime[15].ns});
        res.insert_or_assign("dig.digI1.reTime[16].s", DumpEntry{dig.digI1.reTime[16].s});
        res.insert_or_assign("dig.digI1.reTime[16].ns", DumpEntry{dig.digI1.reTime[16].ns});
        res.insert_or_assign("dig.digI1.reTime[17].s", DumpEntry{dig.digI1.reTime[17].s});
        res.insert_or_assign("dig.digI1.reTime[17].ns", DumpEntry{dig.digI1.reTime[17].ns});
        res.insert_or_assign("dig.digI1.reTime[18].s", DumpEntry{dig.digI1.reTime[18].s});
        res.insert_or_assign("dig.digI1.reTime[18].ns", DumpEntry{dig.digI1.reTime[18].ns});
        res.insert_or_assign("dig.digI1.reTime[19].s", DumpEntry{dig.digI1.reTime[19].s});
        res.insert_or_assign("dig.digI1.reTime[19].ns", DumpEntry{dig.digI1.reTime[19].ns});
        res.insert_or_assign("dig.digI1.reTime[20].s", DumpEntry{dig.digI1.reTime[20].s});
        res.insert_or_assign("dig.digI1.reTime[20].ns", DumpEntry{dig.digI1.reTime[20].ns});
        res.insert_or_assign("dig.digI1.reTime[21].s", DumpEntry{dig.digI1.reTime[21].s});
        res.insert_or_assign("dig.digI1.reTime[21].ns", DumpEntry{dig.digI1.reTime[21].ns});
        res.insert_or_assign("dig.digI1.reTime[22].s", DumpEntry{dig.digI1.reTime[22].s});
        res.insert_or_assign("dig.digI1.reTime[22].ns", DumpEntry{dig.digI1.reTime[22].ns});
        res.insert_or_assign("dig.digI1.reTime[23].s", DumpEntry{dig.digI1.reTime[23].s});
        res.insert_or_assign("dig.digI1.reTime[23].ns", DumpEntry{dig.digI1.reTime[23].ns});
        res.insert_or_assign("dig.digI1.reTime[24].s", DumpEntry{dig.digI1.reTime[24].s});
        res.insert_or_assign("dig.digI1.reTime[24].ns", DumpEntry{dig.digI1.reTime[24].ns});
        res.insert_or_assign("dig.digI1.reTime[25].s", DumpEntry{dig.digI1.reTime[25].s});
        res.insert_or_assign("dig.digI1.reTime[25].ns", DumpEntry{dig.digI1.reTime[25].ns});
        res.insert_or_assign("dig.digI1.reTime[26].s", DumpEntry{dig.digI1.reTime[26].s});
        res.insert_or_assign("dig.digI1.reTime[26].ns", DumpEntry{dig.digI1.reTime[26].ns});
        res.insert_or_assign("dig.digI1.reTime[27].s", DumpEntry{dig.digI1.reTime[27].s});
        res.insert_or_assign("dig.digI1.reTime[27].ns", DumpEntry{dig.digI1.reTime[27].ns});
        res.insert_or_assign("dig.digI1.reTime[28].s", DumpEntry{dig.digI1.reTime[28].s});
        res.insert_or_assign("dig.digI1.reTime[28].ns", DumpEntry{dig.digI1.reTime[28].ns});
        res.insert_or_assign("dig.digI1.reTime[29].s", DumpEntry{dig.digI1.reTime[29].s});
        res.insert_or_assign("dig.digI1.reTime[29].ns", DumpEntry{dig.digI1.reTime[29].ns});
        res.insert_or_assign("dig.digI1.reTime[30].s", DumpEntry{dig.digI1.reTime[30].s});
        res.insert_or_assign("dig.digI1.reTime[30].ns", DumpEntry{dig.digI1.reTime[30].ns});
        res.insert_or_assign("dig.digI1.reTime[31].s", DumpEntry{dig.digI1.reTime[31].s});
        res.insert_or_assign("dig.digI1.reTime[31].ns", DumpEntry{dig.digI1.reTime[31].ns});
        res.insert_or_assign("dig.digIndI.staticParams", DumpEntry{dig.digIndI.staticParams});
        res.insert_or_assign("dig.digIndI.staticParams.invertIsEn", DumpEntry{dig.digIndI.staticParams.invertIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.enableIsEn", DumpEntry{dig.digIndI.staticParams.enableIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.latchIsEn", DumpEntry{dig.digIndI.staticParams.latchIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.deglitchIsEn", DumpEntry{dig.digIndI.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.reTimeIsEn", DumpEntry{dig.digIndI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.numChannels", DumpEntry{dig.digIndI.staticParams.numChannels});
        res.insert_or_assign("dig.digIndI.data", DumpEntry{dig.digIndI.data});
        res.insert_or_assign("dig.digIndI.dataChanged", DumpEntry{dig.digIndI.dataChanged});
        res.insert_or_assign("dig.digIndI.invert", DumpEntry{dig.digIndI.invert});
        res.insert_or_assign("dig.digIndI.enable", DumpEntry{dig.digIndI.enable});
        res.insert_or_assign("dig.digIndI.latch", DumpEntry{dig.digIndI.latch});
        res.insert_or_assign("dig.digIndI.rstLatch", DumpEntry{dig.digIndI.rstLatch});
        res.insert_or_assign("dig.digIndI.risingInterrupt", DumpEntry{dig.digIndI.risingInterrupt});
        res.insert_or_assign("dig.digIndI.fallingInterrupt", DumpEntry{dig.digIndI.fallingInterrupt});
        res.insert_or_assign("dig.digIndI.fastFilterSc[0].val", DumpEntry{dig.digIndI.fastFilterSc[0].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[1].val", DumpEntry{dig.digIndI.fastFilterSc[1].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[2].val", DumpEntry{dig.digIndI.fastFilterSc[2].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[3].val", DumpEntry{dig.digIndI.fastFilterSc[3].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[4].val", DumpEntry{dig.digIndI.fastFilterSc[4].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[5].val", DumpEntry{dig.digIndI.fastFilterSc[5].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[6].val", DumpEntry{dig.digIndI.fastFilterSc[6].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[7].val", DumpEntry{dig.digIndI.fastFilterSc[7].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[8].val", DumpEntry{dig.digIndI.fastFilterSc[8].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[9].val", DumpEntry{dig.digIndI.fastFilterSc[9].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[10].val", DumpEntry{dig.digIndI.fastFilterSc[10].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[11].val", DumpEntry{dig.digIndI.fastFilterSc[11].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[12].val", DumpEntry{dig.digIndI.fastFilterSc[12].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[13].val", DumpEntry{dig.digIndI.fastFilterSc[13].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[14].val", DumpEntry{dig.digIndI.fastFilterSc[14].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[15].val", DumpEntry{dig.digIndI.fastFilterSc[15].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[16].val", DumpEntry{dig.digIndI.fastFilterSc[16].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[17].val", DumpEntry{dig.digIndI.fastFilterSc[17].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[18].val", DumpEntry{dig.digIndI.fastFilterSc[18].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[19].val", DumpEntry{dig.digIndI.fastFilterSc[19].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[20].val", DumpEntry{dig.digIndI.fastFilterSc[20].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[21].val", DumpEntry{dig.digIndI.fastFilterSc[21].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[22].val", DumpEntry{dig.digIndI.fastFilterSc[22].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[23].val", DumpEntry{dig.digIndI.fastFilterSc[23].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[24].val", DumpEntry{dig.digIndI.fastFilterSc[24].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[25].val", DumpEntry{dig.digIndI.fastFilterSc[25].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[26].val", DumpEntry{dig.digIndI.fastFilterSc[26].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[27].val", DumpEntry{dig.digIndI.fastFilterSc[27].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[28].val", DumpEntry{dig.digIndI.fastFilterSc[28].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[29].val", DumpEntry{dig.digIndI.fastFilterSc[29].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[30].val", DumpEntry{dig.digIndI.fastFilterSc[30].val});
        res.insert_or_assign("dig.digIndI.fastFilterSc[31].val", DumpEntry{dig.digIndI.fastFilterSc[31].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[0].val", DumpEntry{dig.digIndI.slowFilterSc[0].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[1].val", DumpEntry{dig.digIndI.slowFilterSc[1].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[2].val", DumpEntry{dig.digIndI.slowFilterSc[2].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[3].val", DumpEntry{dig.digIndI.slowFilterSc[3].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[4].val", DumpEntry{dig.digIndI.slowFilterSc[4].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[5].val", DumpEntry{dig.digIndI.slowFilterSc[5].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[6].val", DumpEntry{dig.digIndI.slowFilterSc[6].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[7].val", DumpEntry{dig.digIndI.slowFilterSc[7].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[8].val", DumpEntry{dig.digIndI.slowFilterSc[8].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[9].val", DumpEntry{dig.digIndI.slowFilterSc[9].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[10].val", DumpEntry{dig.digIndI.slowFilterSc[10].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[11].val", DumpEntry{dig.digIndI.slowFilterSc[11].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[12].val", DumpEntry{dig.digIndI.slowFilterSc[12].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[13].val", DumpEntry{dig.digIndI.slowFilterSc[13].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[14].val", DumpEntry{dig.digIndI.slowFilterSc[14].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[15].val", DumpEntry{dig.digIndI.slowFilterSc[15].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[16].val", DumpEntry{dig.digIndI.slowFilterSc[16].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[17].val", DumpEntry{dig.digIndI.slowFilterSc[17].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[18].val", DumpEntry{dig.digIndI.slowFilterSc[18].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[19].val", DumpEntry{dig.digIndI.slowFilterSc[19].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[20].val", DumpEntry{dig.digIndI.slowFilterSc[20].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[21].val", DumpEntry{dig.digIndI.slowFilterSc[21].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[22].val", DumpEntry{dig.digIndI.slowFilterSc[22].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[23].val", DumpEntry{dig.digIndI.slowFilterSc[23].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[24].val", DumpEntry{dig.digIndI.slowFilterSc[24].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[25].val", DumpEntry{dig.digIndI.slowFilterSc[25].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[26].val", DumpEntry{dig.digIndI.slowFilterSc[26].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[27].val", DumpEntry{dig.digIndI.slowFilterSc[27].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[28].val", DumpEntry{dig.digIndI.slowFilterSc[28].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[29].val", DumpEntry{dig.digIndI.slowFilterSc[29].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[30].val", DumpEntry{dig.digIndI.slowFilterSc[30].val});
        res.insert_or_assign("dig.digIndI.slowFilterSc[31].val", DumpEntry{dig.digIndI.slowFilterSc[31].val});
        res.insert_or_assign("dig.digIndI.reTime[0].s", DumpEntry{dig.digIndI.reTime[0].s});
        res.insert_or_assign("dig.digIndI.reTime[0].ns", DumpEntry{dig.digIndI.reTime[0].ns});
        res.insert_or_assign("dig.digIndI.reTime[1].s", DumpEntry{dig.digIndI.reTime[1].s});
        res.insert_or_assign("dig.digIndI.reTime[1].ns", DumpEntry{dig.digIndI.reTime[1].ns});
        res.insert_or_assign("dig.digIndI.reTime[2].s", DumpEntry{dig.digIndI.reTime[2].s});
        res.insert_or_assign("dig.digIndI.reTime[2].ns", DumpEntry{dig.digIndI.reTime[2].ns});
        res.insert_or_assign("dig.digIndI.reTime[3].s", DumpEntry{dig.digIndI.reTime[3].s});
        res.insert_or_assign("dig.digIndI.reTime[3].ns", DumpEntry{dig.digIndI.reTime[3].ns});
        res.insert_or_assign("dig.digIndI.reTime[4].s", DumpEntry{dig.digIndI.reTime[4].s});
        res.insert_or_assign("dig.digIndI.reTime[4].ns", DumpEntry{dig.digIndI.reTime[4].ns});
        res.insert_or_assign("dig.digIndI.reTime[5].s", DumpEntry{dig.digIndI.reTime[5].s});
        res.insert_or_assign("dig.digIndI.reTime[5].ns", DumpEntry{dig.digIndI.reTime[5].ns});
        res.insert_or_assign("dig.digIndI.reTime[6].s", DumpEntry{dig.digIndI.reTime[6].s});
        res.insert_or_assign("dig.digIndI.reTime[6].ns", DumpEntry{dig.digIndI.reTime[6].ns});
        res.insert_or_assign("dig.digIndI.reTime[7].s", DumpEntry{dig.digIndI.reTime[7].s});
        res.insert_or_assign("dig.digIndI.reTime[7].ns", DumpEntry{dig.digIndI.reTime[7].ns});
        res.insert_or_assign("dig.digIndI.reTime[8].s", DumpEntry{dig.digIndI.reTime[8].s});
        res.insert_or_assign("dig.digIndI.reTime[8].ns", DumpEntry{dig.digIndI.reTime[8].ns});
        res.insert_or_assign("dig.digIndI.reTime[9].s", DumpEntry{dig.digIndI.reTime[9].s});
        res.insert_or_assign("dig.digIndI.reTime[9].ns", DumpEntry{dig.digIndI.reTime[9].ns});
        res.insert_or_assign("dig.digIndI.reTime[10].s", DumpEntry{dig.digIndI.reTime[10].s});
        res.insert_or_assign("dig.digIndI.reTime[10].ns", DumpEntry{dig.digIndI.reTime[10].ns});
        res.insert_or_assign("dig.digIndI.reTime[11].s", DumpEntry{dig.digIndI.reTime[11].s});
        res.insert_or_assign("dig.digIndI.reTime[11].ns", DumpEntry{dig.digIndI.reTime[11].ns});
        res.insert_or_assign("dig.digIndI.reTime[12].s", DumpEntry{dig.digIndI.reTime[12].s});
        res.insert_or_assign("dig.digIndI.reTime[12].ns", DumpEntry{dig.digIndI.reTime[12].ns});
        res.insert_or_assign("dig.digIndI.reTime[13].s", DumpEntry{dig.digIndI.reTime[13].s});
        res.insert_or_assign("dig.digIndI.reTime[13].ns", DumpEntry{dig.digIndI.reTime[13].ns});
        res.insert_or_assign("dig.digIndI.reTime[14].s", DumpEntry{dig.digIndI.reTime[14].s});
        res.insert_or_assign("dig.digIndI.reTime[14].ns", DumpEntry{dig.digIndI.reTime[14].ns});
        res.insert_or_assign("dig.digIndI.reTime[15].s", DumpEntry{dig.digIndI.reTime[15].s});
        res.insert_or_assign("dig.digIndI.reTime[15].ns", DumpEntry{dig.digIndI.reTime[15].ns});
        res.insert_or_assign("dig.digIndI.reTime[16].s", DumpEntry{dig.digIndI.reTime[16].s});
        res.insert_or_assign("dig.digIndI.reTime[16].ns", DumpEntry{dig.digIndI.reTime[16].ns});
        res.insert_or_assign("dig.digIndI.reTime[17].s", DumpEntry{dig.digIndI.reTime[17].s});
        res.insert_or_assign("dig.digIndI.reTime[17].ns", DumpEntry{dig.digIndI.reTime[17].ns});
        res.insert_or_assign("dig.digIndI.reTime[18].s", DumpEntry{dig.digIndI.reTime[18].s});
        res.insert_or_assign("dig.digIndI.reTime[18].ns", DumpEntry{dig.digIndI.reTime[18].ns});
        res.insert_or_assign("dig.digIndI.reTime[19].s", DumpEntry{dig.digIndI.reTime[19].s});
        res.insert_or_assign("dig.digIndI.reTime[19].ns", DumpEntry{dig.digIndI.reTime[19].ns});
        res.insert_or_assign("dig.digIndI.reTime[20].s", DumpEntry{dig.digIndI.reTime[20].s});
        res.insert_or_assign("dig.digIndI.reTime[20].ns", DumpEntry{dig.digIndI.reTime[20].ns});
        res.insert_or_assign("dig.digIndI.reTime[21].s", DumpEntry{dig.digIndI.reTime[21].s});
        res.insert_or_assign("dig.digIndI.reTime[21].ns", DumpEntry{dig.digIndI.reTime[21].ns});
        res.insert_or_assign("dig.digIndI.reTime[22].s", DumpEntry{dig.digIndI.reTime[22].s});
        res.insert_or_assign("dig.digIndI.reTime[22].ns", DumpEntry{dig.digIndI.reTime[22].ns});
        res.insert_or_assign("dig.digIndI.reTime[23].s", DumpEntry{dig.digIndI.reTime[23].s});
        res.insert_or_assign("dig.digIndI.reTime[23].ns", DumpEntry{dig.digIndI.reTime[23].ns});
        res.insert_or_assign("dig.digIndI.reTime[24].s", DumpEntry{dig.digIndI.reTime[24].s});
        res.insert_or_assign("dig.digIndI.reTime[24].ns", DumpEntry{dig.digIndI.reTime[24].ns});
        res.insert_or_assign("dig.digIndI.reTime[25].s", DumpEntry{dig.digIndI.reTime[25].s});
        res.insert_or_assign("dig.digIndI.reTime[25].ns", DumpEntry{dig.digIndI.reTime[25].ns});
        res.insert_or_assign("dig.digIndI.reTime[26].s", DumpEntry{dig.digIndI.reTime[26].s});
        res.insert_or_assign("dig.digIndI.reTime[26].ns", DumpEntry{dig.digIndI.reTime[26].ns});
        res.insert_or_assign("dig.digIndI.reTime[27].s", DumpEntry{dig.digIndI.reTime[27].s});
        res.insert_or_assign("dig.digIndI.reTime[27].ns", DumpEntry{dig.digIndI.reTime[27].ns});
        res.insert_or_assign("dig.digIndI.reTime[28].s", DumpEntry{dig.digIndI.reTime[28].s});
        res.insert_or_assign("dig.digIndI.reTime[28].ns", DumpEntry{dig.digIndI.reTime[28].ns});
        res.insert_or_assign("dig.digIndI.reTime[29].s", DumpEntry{dig.digIndI.reTime[29].s});
        res.insert_or_assign("dig.digIndI.reTime[29].ns", DumpEntry{dig.digIndI.reTime[29].ns});
        res.insert_or_assign("dig.digIndI.reTime[30].s", DumpEntry{dig.digIndI.reTime[30].s});
        res.insert_or_assign("dig.digIndI.reTime[30].ns", DumpEntry{dig.digIndI.reTime[30].ns});
        res.insert_or_assign("dig.digIndI.reTime[31].s", DumpEntry{dig.digIndI.reTime[31].s});
        res.insert_or_assign("dig.digIndI.reTime[31].ns", DumpEntry{dig.digIndI.reTime[31].ns});
        res.insert_or_assign("dig.contactI.staticParams", DumpEntry{dig.contactI.staticParams});
        res.insert_or_assign("dig.contactI.staticParams.invertIsEn", DumpEntry{dig.contactI.staticParams.invertIsEn});
        res.insert_or_assign("dig.contactI.staticParams.enableIsEn", DumpEntry{dig.contactI.staticParams.enableIsEn});
        res.insert_or_assign("dig.contactI.staticParams.latchIsEn", DumpEntry{dig.contactI.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.contactI.staticParams.deglitchIsEn", DumpEntry{dig.contactI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("dig.contactI.staticParams.reTimeIsEn", DumpEntry{dig.contactI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.contactI.staticParams.numChannels", DumpEntry{dig.contactI.staticParams.numChannels});
        res.insert_or_assign("dig.contactI.data", DumpEntry{dig.contactI.data});
        res.insert_or_assign("dig.contactI.dataChanged", DumpEntry{dig.contactI.dataChanged});
        res.insert_or_assign("dig.contactI.invert", DumpEntry{dig.contactI.invert});
        res.insert_or_assign("dig.contactI.enable", DumpEntry{dig.contactI.enable});
        res.insert_or_assign("dig.contactI.latch", DumpEntry{dig.contactI.latch});
        res.insert_or_assign("dig.contactI.rstLatch", DumpEntry{dig.contactI.rstLatch});
        res.insert_or_assign("dig.contactI.risingInterrupt", DumpEntry{dig.contactI.risingInterrupt});
        res.insert_or_assign("dig.contactI.fallingInterrupt", DumpEntry{dig.contactI.fallingInterrupt});
        res.insert_or_assign("dig.contactI.fastFilterSc[0].val", DumpEntry{dig.contactI.fastFilterSc[0].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[1].val", DumpEntry{dig.contactI.fastFilterSc[1].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[2].val", DumpEntry{dig.contactI.fastFilterSc[2].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[3].val", DumpEntry{dig.contactI.fastFilterSc[3].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[4].val", DumpEntry{dig.contactI.fastFilterSc[4].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[5].val", DumpEntry{dig.contactI.fastFilterSc[5].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[6].val", DumpEntry{dig.contactI.fastFilterSc[6].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[7].val", DumpEntry{dig.contactI.fastFilterSc[7].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[8].val", DumpEntry{dig.contactI.fastFilterSc[8].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[9].val", DumpEntry{dig.contactI.fastFilterSc[9].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[10].val", DumpEntry{dig.contactI.fastFilterSc[10].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[11].val", DumpEntry{dig.contactI.fastFilterSc[11].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[12].val", DumpEntry{dig.contactI.fastFilterSc[12].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[13].val", DumpEntry{dig.contactI.fastFilterSc[13].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[14].val", DumpEntry{dig.contactI.fastFilterSc[14].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[15].val", DumpEntry{dig.contactI.fastFilterSc[15].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[16].val", DumpEntry{dig.contactI.fastFilterSc[16].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[17].val", DumpEntry{dig.contactI.fastFilterSc[17].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[18].val", DumpEntry{dig.contactI.fastFilterSc[18].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[19].val", DumpEntry{dig.contactI.fastFilterSc[19].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[20].val", DumpEntry{dig.contactI.fastFilterSc[20].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[21].val", DumpEntry{dig.contactI.fastFilterSc[21].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[22].val", DumpEntry{dig.contactI.fastFilterSc[22].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[23].val", DumpEntry{dig.contactI.fastFilterSc[23].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[24].val", DumpEntry{dig.contactI.fastFilterSc[24].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[25].val", DumpEntry{dig.contactI.fastFilterSc[25].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[26].val", DumpEntry{dig.contactI.fastFilterSc[26].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[27].val", DumpEntry{dig.contactI.fastFilterSc[27].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[28].val", DumpEntry{dig.contactI.fastFilterSc[28].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[29].val", DumpEntry{dig.contactI.fastFilterSc[29].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[30].val", DumpEntry{dig.contactI.fastFilterSc[30].val});
        res.insert_or_assign("dig.contactI.fastFilterSc[31].val", DumpEntry{dig.contactI.fastFilterSc[31].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[0].val", DumpEntry{dig.contactI.slowFilterSc[0].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[1].val", DumpEntry{dig.contactI.slowFilterSc[1].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[2].val", DumpEntry{dig.contactI.slowFilterSc[2].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[3].val", DumpEntry{dig.contactI.slowFilterSc[3].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[4].val", DumpEntry{dig.contactI.slowFilterSc[4].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[5].val", DumpEntry{dig.contactI.slowFilterSc[5].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[6].val", DumpEntry{dig.contactI.slowFilterSc[6].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[7].val", DumpEntry{dig.contactI.slowFilterSc[7].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[8].val", DumpEntry{dig.contactI.slowFilterSc[8].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[9].val", DumpEntry{dig.contactI.slowFilterSc[9].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[10].val", DumpEntry{dig.contactI.slowFilterSc[10].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[11].val", DumpEntry{dig.contactI.slowFilterSc[11].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[12].val", DumpEntry{dig.contactI.slowFilterSc[12].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[13].val", DumpEntry{dig.contactI.slowFilterSc[13].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[14].val", DumpEntry{dig.contactI.slowFilterSc[14].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[15].val", DumpEntry{dig.contactI.slowFilterSc[15].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[16].val", DumpEntry{dig.contactI.slowFilterSc[16].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[17].val", DumpEntry{dig.contactI.slowFilterSc[17].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[18].val", DumpEntry{dig.contactI.slowFilterSc[18].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[19].val", DumpEntry{dig.contactI.slowFilterSc[19].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[20].val", DumpEntry{dig.contactI.slowFilterSc[20].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[21].val", DumpEntry{dig.contactI.slowFilterSc[21].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[22].val", DumpEntry{dig.contactI.slowFilterSc[22].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[23].val", DumpEntry{dig.contactI.slowFilterSc[23].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[24].val", DumpEntry{dig.contactI.slowFilterSc[24].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[25].val", DumpEntry{dig.contactI.slowFilterSc[25].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[26].val", DumpEntry{dig.contactI.slowFilterSc[26].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[27].val", DumpEntry{dig.contactI.slowFilterSc[27].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[28].val", DumpEntry{dig.contactI.slowFilterSc[28].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[29].val", DumpEntry{dig.contactI.slowFilterSc[29].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[30].val", DumpEntry{dig.contactI.slowFilterSc[30].val});
        res.insert_or_assign("dig.contactI.slowFilterSc[31].val", DumpEntry{dig.contactI.slowFilterSc[31].val});
        res.insert_or_assign("dig.contactI.reTime[0].s", DumpEntry{dig.contactI.reTime[0].s});
        res.insert_or_assign("dig.contactI.reTime[0].ns", DumpEntry{dig.contactI.reTime[0].ns});
        res.insert_or_assign("dig.contactI.reTime[1].s", DumpEntry{dig.contactI.reTime[1].s});
        res.insert_or_assign("dig.contactI.reTime[1].ns", DumpEntry{dig.contactI.reTime[1].ns});
        res.insert_or_assign("dig.contactI.reTime[2].s", DumpEntry{dig.contactI.reTime[2].s});
        res.insert_or_assign("dig.contactI.reTime[2].ns", DumpEntry{dig.contactI.reTime[2].ns});
        res.insert_or_assign("dig.contactI.reTime[3].s", DumpEntry{dig.contactI.reTime[3].s});
        res.insert_or_assign("dig.contactI.reTime[3].ns", DumpEntry{dig.contactI.reTime[3].ns});
        res.insert_or_assign("dig.contactI.reTime[4].s", DumpEntry{dig.contactI.reTime[4].s});
        res.insert_or_assign("dig.contactI.reTime[4].ns", DumpEntry{dig.contactI.reTime[4].ns});
        res.insert_or_assign("dig.contactI.reTime[5].s", DumpEntry{dig.contactI.reTime[5].s});
        res.insert_or_assign("dig.contactI.reTime[5].ns", DumpEntry{dig.contactI.reTime[5].ns});
        res.insert_or_assign("dig.contactI.reTime[6].s", DumpEntry{dig.contactI.reTime[6].s});
        res.insert_or_assign("dig.contactI.reTime[6].ns", DumpEntry{dig.contactI.reTime[6].ns});
        res.insert_or_assign("dig.contactI.reTime[7].s", DumpEntry{dig.contactI.reTime[7].s});
        res.insert_or_assign("dig.contactI.reTime[7].ns", DumpEntry{dig.contactI.reTime[7].ns});
        res.insert_or_assign("dig.contactI.reTime[8].s", DumpEntry{dig.contactI.reTime[8].s});
        res.insert_or_assign("dig.contactI.reTime[8].ns", DumpEntry{dig.contactI.reTime[8].ns});
        res.insert_or_assign("dig.contactI.reTime[9].s", DumpEntry{dig.contactI.reTime[9].s});
        res.insert_or_assign("dig.contactI.reTime[9].ns", DumpEntry{dig.contactI.reTime[9].ns});
        res.insert_or_assign("dig.contactI.reTime[10].s", DumpEntry{dig.contactI.reTime[10].s});
        res.insert_or_assign("dig.contactI.reTime[10].ns", DumpEntry{dig.contactI.reTime[10].ns});
        res.insert_or_assign("dig.contactI.reTime[11].s", DumpEntry{dig.contactI.reTime[11].s});
        res.insert_or_assign("dig.contactI.reTime[11].ns", DumpEntry{dig.contactI.reTime[11].ns});
        res.insert_or_assign("dig.contactI.reTime[12].s", DumpEntry{dig.contactI.reTime[12].s});
        res.insert_or_assign("dig.contactI.reTime[12].ns", DumpEntry{dig.contactI.reTime[12].ns});
        res.insert_or_assign("dig.contactI.reTime[13].s", DumpEntry{dig.contactI.reTime[13].s});
        res.insert_or_assign("dig.contactI.reTime[13].ns", DumpEntry{dig.contactI.reTime[13].ns});
        res.insert_or_assign("dig.contactI.reTime[14].s", DumpEntry{dig.contactI.reTime[14].s});
        res.insert_or_assign("dig.contactI.reTime[14].ns", DumpEntry{dig.contactI.reTime[14].ns});
        res.insert_or_assign("dig.contactI.reTime[15].s", DumpEntry{dig.contactI.reTime[15].s});
        res.insert_or_assign("dig.contactI.reTime[15].ns", DumpEntry{dig.contactI.reTime[15].ns});
        res.insert_or_assign("dig.contactI.reTime[16].s", DumpEntry{dig.contactI.reTime[16].s});
        res.insert_or_assign("dig.contactI.reTime[16].ns", DumpEntry{dig.contactI.reTime[16].ns});
        res.insert_or_assign("dig.contactI.reTime[17].s", DumpEntry{dig.contactI.reTime[17].s});
        res.insert_or_assign("dig.contactI.reTime[17].ns", DumpEntry{dig.contactI.reTime[17].ns});
        res.insert_or_assign("dig.contactI.reTime[18].s", DumpEntry{dig.contactI.reTime[18].s});
        res.insert_or_assign("dig.contactI.reTime[18].ns", DumpEntry{dig.contactI.reTime[18].ns});
        res.insert_or_assign("dig.contactI.reTime[19].s", DumpEntry{dig.contactI.reTime[19].s});
        res.insert_or_assign("dig.contactI.reTime[19].ns", DumpEntry{dig.contactI.reTime[19].ns});
        res.insert_or_assign("dig.contactI.reTime[20].s", DumpEntry{dig.contactI.reTime[20].s});
        res.insert_or_assign("dig.contactI.reTime[20].ns", DumpEntry{dig.contactI.reTime[20].ns});
        res.insert_or_assign("dig.contactI.reTime[21].s", DumpEntry{dig.contactI.reTime[21].s});
        res.insert_or_assign("dig.contactI.reTime[21].ns", DumpEntry{dig.contactI.reTime[21].ns});
        res.insert_or_assign("dig.contactI.reTime[22].s", DumpEntry{dig.contactI.reTime[22].s});
        res.insert_or_assign("dig.contactI.reTime[22].ns", DumpEntry{dig.contactI.reTime[22].ns});
        res.insert_or_assign("dig.contactI.reTime[23].s", DumpEntry{dig.contactI.reTime[23].s});
        res.insert_or_assign("dig.contactI.reTime[23].ns", DumpEntry{dig.contactI.reTime[23].ns});
        res.insert_or_assign("dig.contactI.reTime[24].s", DumpEntry{dig.contactI.reTime[24].s});
        res.insert_or_assign("dig.contactI.reTime[24].ns", DumpEntry{dig.contactI.reTime[24].ns});
        res.insert_or_assign("dig.contactI.reTime[25].s", DumpEntry{dig.contactI.reTime[25].s});
        res.insert_or_assign("dig.contactI.reTime[25].ns", DumpEntry{dig.contactI.reTime[25].ns});
        res.insert_or_assign("dig.contactI.reTime[26].s", DumpEntry{dig.contactI.reTime[26].s});
        res.insert_or_assign("dig.contactI.reTime[26].ns", DumpEntry{dig.contactI.reTime[26].ns});
        res.insert_or_assign("dig.contactI.reTime[27].s", DumpEntry{dig.contactI.reTime[27].s});
        res.insert_or_assign("dig.contactI.reTime[27].ns", DumpEntry{dig.contactI.reTime[27].ns});
        res.insert_or_assign("dig.contactI.reTime[28].s", DumpEntry{dig.contactI.reTime[28].s});
        res.insert_or_assign("dig.contactI.reTime[28].ns", DumpEntry{dig.contactI.reTime[28].ns});
        res.insert_or_assign("dig.contactI.reTime[29].s", DumpEntry{dig.contactI.reTime[29].s});
        res.insert_or_assign("dig.contactI.reTime[29].ns", DumpEntry{dig.contactI.reTime[29].ns});
        res.insert_or_assign("dig.contactI.reTime[30].s", DumpEntry{dig.contactI.reTime[30].s});
        res.insert_or_assign("dig.contactI.reTime[30].ns", DumpEntry{dig.contactI.reTime[30].ns});
        res.insert_or_assign("dig.contactI.reTime[31].s", DumpEntry{dig.contactI.reTime[31].s});
        res.insert_or_assign("dig.contactI.reTime[31].ns", DumpEntry{dig.contactI.reTime[31].ns});
        res.insert_or_assign("dig.opticalI.staticParams", DumpEntry{dig.opticalI.staticParams});
        res.insert_or_assign("dig.opticalI.staticParams.invertIsEn", DumpEntry{dig.opticalI.staticParams.invertIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.enableIsEn", DumpEntry{dig.opticalI.staticParams.enableIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.latchIsEn", DumpEntry{dig.opticalI.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.opticalI.staticParams.deglitchIsEn", DumpEntry{dig.opticalI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("dig.opticalI.staticParams.reTimeIsEn", DumpEntry{dig.opticalI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.numChannels", DumpEntry{dig.opticalI.staticParams.numChannels});
        res.insert_or_assign("dig.opticalI.data", DumpEntry{dig.opticalI.data});
        res.insert_or_assign("dig.opticalI.dataChanged", DumpEntry{dig.opticalI.dataChanged});
        res.insert_or_assign("dig.opticalI.invert", DumpEntry{dig.opticalI.invert});
        res.insert_or_assign("dig.opticalI.enable", DumpEntry{dig.opticalI.enable});
        res.insert_or_assign("dig.opticalI.latch", DumpEntry{dig.opticalI.latch});
        res.insert_or_assign("dig.opticalI.rstLatch", DumpEntry{dig.opticalI.rstLatch});
        res.insert_or_assign("dig.opticalI.risingInterrupt", DumpEntry{dig.opticalI.risingInterrupt});
        res.insert_or_assign("dig.opticalI.fallingInterrupt", DumpEntry{dig.opticalI.fallingInterrupt});
        res.insert_or_assign("dig.opticalI.fastFilterSc[0].val", DumpEntry{dig.opticalI.fastFilterSc[0].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[1].val", DumpEntry{dig.opticalI.fastFilterSc[1].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[2].val", DumpEntry{dig.opticalI.fastFilterSc[2].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[3].val", DumpEntry{dig.opticalI.fastFilterSc[3].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[4].val", DumpEntry{dig.opticalI.fastFilterSc[4].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[5].val", DumpEntry{dig.opticalI.fastFilterSc[5].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[6].val", DumpEntry{dig.opticalI.fastFilterSc[6].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[7].val", DumpEntry{dig.opticalI.fastFilterSc[7].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[8].val", DumpEntry{dig.opticalI.fastFilterSc[8].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[9].val", DumpEntry{dig.opticalI.fastFilterSc[9].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[10].val", DumpEntry{dig.opticalI.fastFilterSc[10].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[11].val", DumpEntry{dig.opticalI.fastFilterSc[11].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[12].val", DumpEntry{dig.opticalI.fastFilterSc[12].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[13].val", DumpEntry{dig.opticalI.fastFilterSc[13].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[14].val", DumpEntry{dig.opticalI.fastFilterSc[14].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[15].val", DumpEntry{dig.opticalI.fastFilterSc[15].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[16].val", DumpEntry{dig.opticalI.fastFilterSc[16].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[17].val", DumpEntry{dig.opticalI.fastFilterSc[17].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[18].val", DumpEntry{dig.opticalI.fastFilterSc[18].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[19].val", DumpEntry{dig.opticalI.fastFilterSc[19].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[20].val", DumpEntry{dig.opticalI.fastFilterSc[20].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[21].val", DumpEntry{dig.opticalI.fastFilterSc[21].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[22].val", DumpEntry{dig.opticalI.fastFilterSc[22].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[23].val", DumpEntry{dig.opticalI.fastFilterSc[23].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[24].val", DumpEntry{dig.opticalI.fastFilterSc[24].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[25].val", DumpEntry{dig.opticalI.fastFilterSc[25].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[26].val", DumpEntry{dig.opticalI.fastFilterSc[26].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[27].val", DumpEntry{dig.opticalI.fastFilterSc[27].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[28].val", DumpEntry{dig.opticalI.fastFilterSc[28].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[29].val", DumpEntry{dig.opticalI.fastFilterSc[29].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[30].val", DumpEntry{dig.opticalI.fastFilterSc[30].val});
        res.insert_or_assign("dig.opticalI.fastFilterSc[31].val", DumpEntry{dig.opticalI.fastFilterSc[31].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[0].val", DumpEntry{dig.opticalI.slowFilterSc[0].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[1].val", DumpEntry{dig.opticalI.slowFilterSc[1].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[2].val", DumpEntry{dig.opticalI.slowFilterSc[2].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[3].val", DumpEntry{dig.opticalI.slowFilterSc[3].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[4].val", DumpEntry{dig.opticalI.slowFilterSc[4].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[5].val", DumpEntry{dig.opticalI.slowFilterSc[5].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[6].val", DumpEntry{dig.opticalI.slowFilterSc[6].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[7].val", DumpEntry{dig.opticalI.slowFilterSc[7].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[8].val", DumpEntry{dig.opticalI.slowFilterSc[8].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[9].val", DumpEntry{dig.opticalI.slowFilterSc[9].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[10].val", DumpEntry{dig.opticalI.slowFilterSc[10].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[11].val", DumpEntry{dig.opticalI.slowFilterSc[11].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[12].val", DumpEntry{dig.opticalI.slowFilterSc[12].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[13].val", DumpEntry{dig.opticalI.slowFilterSc[13].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[14].val", DumpEntry{dig.opticalI.slowFilterSc[14].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[15].val", DumpEntry{dig.opticalI.slowFilterSc[15].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[16].val", DumpEntry{dig.opticalI.slowFilterSc[16].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[17].val", DumpEntry{dig.opticalI.slowFilterSc[17].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[18].val", DumpEntry{dig.opticalI.slowFilterSc[18].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[19].val", DumpEntry{dig.opticalI.slowFilterSc[19].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[20].val", DumpEntry{dig.opticalI.slowFilterSc[20].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[21].val", DumpEntry{dig.opticalI.slowFilterSc[21].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[22].val", DumpEntry{dig.opticalI.slowFilterSc[22].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[23].val", DumpEntry{dig.opticalI.slowFilterSc[23].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[24].val", DumpEntry{dig.opticalI.slowFilterSc[24].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[25].val", DumpEntry{dig.opticalI.slowFilterSc[25].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[26].val", DumpEntry{dig.opticalI.slowFilterSc[26].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[27].val", DumpEntry{dig.opticalI.slowFilterSc[27].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[28].val", DumpEntry{dig.opticalI.slowFilterSc[28].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[29].val", DumpEntry{dig.opticalI.slowFilterSc[29].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[30].val", DumpEntry{dig.opticalI.slowFilterSc[30].val});
        res.insert_or_assign("dig.opticalI.slowFilterSc[31].val", DumpEntry{dig.opticalI.slowFilterSc[31].val});
        res.insert_or_assign("dig.opticalI.reTime[0].s", DumpEntry{dig.opticalI.reTime[0].s});
        res.insert_or_assign("dig.opticalI.reTime[0].ns", DumpEntry{dig.opticalI.reTime[0].ns});
        res.insert_or_assign("dig.opticalI.reTime[1].s", DumpEntry{dig.opticalI.reTime[1].s});
        res.insert_or_assign("dig.opticalI.reTime[1].ns", DumpEntry{dig.opticalI.reTime[1].ns});
        res.insert_or_assign("dig.opticalI.reTime[2].s", DumpEntry{dig.opticalI.reTime[2].s});
        res.insert_or_assign("dig.opticalI.reTime[2].ns", DumpEntry{dig.opticalI.reTime[2].ns});
        res.insert_or_assign("dig.opticalI.reTime[3].s", DumpEntry{dig.opticalI.reTime[3].s});
        res.insert_or_assign("dig.opticalI.reTime[3].ns", DumpEntry{dig.opticalI.reTime[3].ns});
        res.insert_or_assign("dig.opticalI.reTime[4].s", DumpEntry{dig.opticalI.reTime[4].s});
        res.insert_or_assign("dig.opticalI.reTime[4].ns", DumpEntry{dig.opticalI.reTime[4].ns});
        res.insert_or_assign("dig.opticalI.reTime[5].s", DumpEntry{dig.opticalI.reTime[5].s});
        res.insert_or_assign("dig.opticalI.reTime[5].ns", DumpEntry{dig.opticalI.reTime[5].ns});
        res.insert_or_assign("dig.opticalI.reTime[6].s", DumpEntry{dig.opticalI.reTime[6].s});
        res.insert_or_assign("dig.opticalI.reTime[6].ns", DumpEntry{dig.opticalI.reTime[6].ns});
        res.insert_or_assign("dig.opticalI.reTime[7].s", DumpEntry{dig.opticalI.reTime[7].s});
        res.insert_or_assign("dig.opticalI.reTime[7].ns", DumpEntry{dig.opticalI.reTime[7].ns});
        res.insert_or_assign("dig.opticalI.reTime[8].s", DumpEntry{dig.opticalI.reTime[8].s});
        res.insert_or_assign("dig.opticalI.reTime[8].ns", DumpEntry{dig.opticalI.reTime[8].ns});
        res.insert_or_assign("dig.opticalI.reTime[9].s", DumpEntry{dig.opticalI.reTime[9].s});
        res.insert_or_assign("dig.opticalI.reTime[9].ns", DumpEntry{dig.opticalI.reTime[9].ns});
        res.insert_or_assign("dig.opticalI.reTime[10].s", DumpEntry{dig.opticalI.reTime[10].s});
        res.insert_or_assign("dig.opticalI.reTime[10].ns", DumpEntry{dig.opticalI.reTime[10].ns});
        res.insert_or_assign("dig.opticalI.reTime[11].s", DumpEntry{dig.opticalI.reTime[11].s});
        res.insert_or_assign("dig.opticalI.reTime[11].ns", DumpEntry{dig.opticalI.reTime[11].ns});
        res.insert_or_assign("dig.opticalI.reTime[12].s", DumpEntry{dig.opticalI.reTime[12].s});
        res.insert_or_assign("dig.opticalI.reTime[12].ns", DumpEntry{dig.opticalI.reTime[12].ns});
        res.insert_or_assign("dig.opticalI.reTime[13].s", DumpEntry{dig.opticalI.reTime[13].s});
        res.insert_or_assign("dig.opticalI.reTime[13].ns", DumpEntry{dig.opticalI.reTime[13].ns});
        res.insert_or_assign("dig.opticalI.reTime[14].s", DumpEntry{dig.opticalI.reTime[14].s});
        res.insert_or_assign("dig.opticalI.reTime[14].ns", DumpEntry{dig.opticalI.reTime[14].ns});
        res.insert_or_assign("dig.opticalI.reTime[15].s", DumpEntry{dig.opticalI.reTime[15].s});
        res.insert_or_assign("dig.opticalI.reTime[15].ns", DumpEntry{dig.opticalI.reTime[15].ns});
        res.insert_or_assign("dig.opticalI.reTime[16].s", DumpEntry{dig.opticalI.reTime[16].s});
        res.insert_or_assign("dig.opticalI.reTime[16].ns", DumpEntry{dig.opticalI.reTime[16].ns});
        res.insert_or_assign("dig.opticalI.reTime[17].s", DumpEntry{dig.opticalI.reTime[17].s});
        res.insert_or_assign("dig.opticalI.reTime[17].ns", DumpEntry{dig.opticalI.reTime[17].ns});
        res.insert_or_assign("dig.opticalI.reTime[18].s", DumpEntry{dig.opticalI.reTime[18].s});
        res.insert_or_assign("dig.opticalI.reTime[18].ns", DumpEntry{dig.opticalI.reTime[18].ns});
        res.insert_or_assign("dig.opticalI.reTime[19].s", DumpEntry{dig.opticalI.reTime[19].s});
        res.insert_or_assign("dig.opticalI.reTime[19].ns", DumpEntry{dig.opticalI.reTime[19].ns});
        res.insert_or_assign("dig.opticalI.reTime[20].s", DumpEntry{dig.opticalI.reTime[20].s});
        res.insert_or_assign("dig.opticalI.reTime[20].ns", DumpEntry{dig.opticalI.reTime[20].ns});
        res.insert_or_assign("dig.opticalI.reTime[21].s", DumpEntry{dig.opticalI.reTime[21].s});
        res.insert_or_assign("dig.opticalI.reTime[21].ns", DumpEntry{dig.opticalI.reTime[21].ns});
        res.insert_or_assign("dig.opticalI.reTime[22].s", DumpEntry{dig.opticalI.reTime[22].s});
        res.insert_or_assign("dig.opticalI.reTime[22].ns", DumpEntry{dig.opticalI.reTime[22].ns});
        res.insert_or_assign("dig.opticalI.reTime[23].s", DumpEntry{dig.opticalI.reTime[23].s});
        res.insert_or_assign("dig.opticalI.reTime[23].ns", DumpEntry{dig.opticalI.reTime[23].ns});
        res.insert_or_assign("dig.opticalI.reTime[24].s", DumpEntry{dig.opticalI.reTime[24].s});
        res.insert_or_assign("dig.opticalI.reTime[24].ns", DumpEntry{dig.opticalI.reTime[24].ns});
        res.insert_or_assign("dig.opticalI.reTime[25].s", DumpEntry{dig.opticalI.reTime[25].s});
        res.insert_or_assign("dig.opticalI.reTime[25].ns", DumpEntry{dig.opticalI.reTime[25].ns});
        res.insert_or_assign("dig.opticalI.reTime[26].s", DumpEntry{dig.opticalI.reTime[26].s});
        res.insert_or_assign("dig.opticalI.reTime[26].ns", DumpEntry{dig.opticalI.reTime[26].ns});
        res.insert_or_assign("dig.opticalI.reTime[27].s", DumpEntry{dig.opticalI.reTime[27].s});
        res.insert_or_assign("dig.opticalI.reTime[27].ns", DumpEntry{dig.opticalI.reTime[27].ns});
        res.insert_or_assign("dig.opticalI.reTime[28].s", DumpEntry{dig.opticalI.reTime[28].s});
        res.insert_or_assign("dig.opticalI.reTime[28].ns", DumpEntry{dig.opticalI.reTime[28].ns});
        res.insert_or_assign("dig.opticalI.reTime[29].s", DumpEntry{dig.opticalI.reTime[29].s});
        res.insert_or_assign("dig.opticalI.reTime[29].ns", DumpEntry{dig.opticalI.reTime[29].ns});
        res.insert_or_assign("dig.opticalI.reTime[30].s", DumpEntry{dig.opticalI.reTime[30].s});
        res.insert_or_assign("dig.opticalI.reTime[30].ns", DumpEntry{dig.opticalI.reTime[30].ns});
        res.insert_or_assign("dig.opticalI.reTime[31].s", DumpEntry{dig.opticalI.reTime[31].s});
        res.insert_or_assign("dig.opticalI.reTime[31].ns", DumpEntry{dig.opticalI.reTime[31].ns});
        res.insert_or_assign("dig.minMaxLim0.staticParams", DumpEntry{dig.minMaxLim0.staticParams});
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.invertIsEn", DumpEntry{dig.minMaxLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.enableIsEn", DumpEntry{dig.minMaxLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign("dig.minMaxLim0.staticParams.latchIsEn", DumpEntry{dig.minMaxLim0.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.deglitchIsEn", DumpEntry{dig.minMaxLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.reTimeIsEn", DumpEntry{dig.minMaxLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.numChannels", DumpEntry{dig.minMaxLim0.staticParams.numChannels}
        );
        res.insert_or_assign("dig.minMaxLim0.data", DumpEntry{dig.minMaxLim0.data});
        res.insert_or_assign("dig.minMaxLim0.dataChanged", DumpEntry{dig.minMaxLim0.dataChanged});
        res.insert_or_assign("dig.minMaxLim0.invert", DumpEntry{dig.minMaxLim0.invert});
        res.insert_or_assign("dig.minMaxLim0.enable", DumpEntry{dig.minMaxLim0.enable});
        res.insert_or_assign("dig.minMaxLim0.latch", DumpEntry{dig.minMaxLim0.latch});
        res.insert_or_assign("dig.minMaxLim0.rstLatch", DumpEntry{dig.minMaxLim0.rstLatch});
        res.insert_or_assign("dig.minMaxLim0.risingInterrupt", DumpEntry{dig.minMaxLim0.risingInterrupt});
        res.insert_or_assign("dig.minMaxLim0.fallingInterrupt", DumpEntry{dig.minMaxLim0.fallingInterrupt});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[0].val", DumpEntry{dig.minMaxLim0.fastFilterSc[0].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[1].val", DumpEntry{dig.minMaxLim0.fastFilterSc[1].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[2].val", DumpEntry{dig.minMaxLim0.fastFilterSc[2].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[3].val", DumpEntry{dig.minMaxLim0.fastFilterSc[3].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[4].val", DumpEntry{dig.minMaxLim0.fastFilterSc[4].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[5].val", DumpEntry{dig.minMaxLim0.fastFilterSc[5].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[6].val", DumpEntry{dig.minMaxLim0.fastFilterSc[6].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[7].val", DumpEntry{dig.minMaxLim0.fastFilterSc[7].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[8].val", DumpEntry{dig.minMaxLim0.fastFilterSc[8].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[9].val", DumpEntry{dig.minMaxLim0.fastFilterSc[9].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[10].val", DumpEntry{dig.minMaxLim0.fastFilterSc[10].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[11].val", DumpEntry{dig.minMaxLim0.fastFilterSc[11].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[12].val", DumpEntry{dig.minMaxLim0.fastFilterSc[12].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[13].val", DumpEntry{dig.minMaxLim0.fastFilterSc[13].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[14].val", DumpEntry{dig.minMaxLim0.fastFilterSc[14].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[15].val", DumpEntry{dig.minMaxLim0.fastFilterSc[15].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[16].val", DumpEntry{dig.minMaxLim0.fastFilterSc[16].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[17].val", DumpEntry{dig.minMaxLim0.fastFilterSc[17].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[18].val", DumpEntry{dig.minMaxLim0.fastFilterSc[18].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[19].val", DumpEntry{dig.minMaxLim0.fastFilterSc[19].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[20].val", DumpEntry{dig.minMaxLim0.fastFilterSc[20].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[21].val", DumpEntry{dig.minMaxLim0.fastFilterSc[21].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[22].val", DumpEntry{dig.minMaxLim0.fastFilterSc[22].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[23].val", DumpEntry{dig.minMaxLim0.fastFilterSc[23].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[24].val", DumpEntry{dig.minMaxLim0.fastFilterSc[24].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[25].val", DumpEntry{dig.minMaxLim0.fastFilterSc[25].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[26].val", DumpEntry{dig.minMaxLim0.fastFilterSc[26].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[27].val", DumpEntry{dig.minMaxLim0.fastFilterSc[27].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[28].val", DumpEntry{dig.minMaxLim0.fastFilterSc[28].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[29].val", DumpEntry{dig.minMaxLim0.fastFilterSc[29].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[30].val", DumpEntry{dig.minMaxLim0.fastFilterSc[30].val});
        res.insert_or_assign("dig.minMaxLim0.fastFilterSc[31].val", DumpEntry{dig.minMaxLim0.fastFilterSc[31].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[0].val", DumpEntry{dig.minMaxLim0.slowFilterSc[0].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[1].val", DumpEntry{dig.minMaxLim0.slowFilterSc[1].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[2].val", DumpEntry{dig.minMaxLim0.slowFilterSc[2].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[3].val", DumpEntry{dig.minMaxLim0.slowFilterSc[3].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[4].val", DumpEntry{dig.minMaxLim0.slowFilterSc[4].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[5].val", DumpEntry{dig.minMaxLim0.slowFilterSc[5].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[6].val", DumpEntry{dig.minMaxLim0.slowFilterSc[6].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[7].val", DumpEntry{dig.minMaxLim0.slowFilterSc[7].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[8].val", DumpEntry{dig.minMaxLim0.slowFilterSc[8].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[9].val", DumpEntry{dig.minMaxLim0.slowFilterSc[9].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[10].val", DumpEntry{dig.minMaxLim0.slowFilterSc[10].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[11].val", DumpEntry{dig.minMaxLim0.slowFilterSc[11].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[12].val", DumpEntry{dig.minMaxLim0.slowFilterSc[12].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[13].val", DumpEntry{dig.minMaxLim0.slowFilterSc[13].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[14].val", DumpEntry{dig.minMaxLim0.slowFilterSc[14].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[15].val", DumpEntry{dig.minMaxLim0.slowFilterSc[15].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[16].val", DumpEntry{dig.minMaxLim0.slowFilterSc[16].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[17].val", DumpEntry{dig.minMaxLim0.slowFilterSc[17].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[18].val", DumpEntry{dig.minMaxLim0.slowFilterSc[18].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[19].val", DumpEntry{dig.minMaxLim0.slowFilterSc[19].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[20].val", DumpEntry{dig.minMaxLim0.slowFilterSc[20].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[21].val", DumpEntry{dig.minMaxLim0.slowFilterSc[21].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[22].val", DumpEntry{dig.minMaxLim0.slowFilterSc[22].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[23].val", DumpEntry{dig.minMaxLim0.slowFilterSc[23].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[24].val", DumpEntry{dig.minMaxLim0.slowFilterSc[24].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[25].val", DumpEntry{dig.minMaxLim0.slowFilterSc[25].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[26].val", DumpEntry{dig.minMaxLim0.slowFilterSc[26].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[27].val", DumpEntry{dig.minMaxLim0.slowFilterSc[27].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[28].val", DumpEntry{dig.minMaxLim0.slowFilterSc[28].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[29].val", DumpEntry{dig.minMaxLim0.slowFilterSc[29].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[30].val", DumpEntry{dig.minMaxLim0.slowFilterSc[30].val});
        res.insert_or_assign("dig.minMaxLim0.slowFilterSc[31].val", DumpEntry{dig.minMaxLim0.slowFilterSc[31].val});
        res.insert_or_assign("dig.minMaxLim0.reTime[0].s", DumpEntry{dig.minMaxLim0.reTime[0].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[0].ns", DumpEntry{dig.minMaxLim0.reTime[0].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[1].s", DumpEntry{dig.minMaxLim0.reTime[1].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[1].ns", DumpEntry{dig.minMaxLim0.reTime[1].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[2].s", DumpEntry{dig.minMaxLim0.reTime[2].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[2].ns", DumpEntry{dig.minMaxLim0.reTime[2].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[3].s", DumpEntry{dig.minMaxLim0.reTime[3].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[3].ns", DumpEntry{dig.minMaxLim0.reTime[3].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[4].s", DumpEntry{dig.minMaxLim0.reTime[4].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[4].ns", DumpEntry{dig.minMaxLim0.reTime[4].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[5].s", DumpEntry{dig.minMaxLim0.reTime[5].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[5].ns", DumpEntry{dig.minMaxLim0.reTime[5].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[6].s", DumpEntry{dig.minMaxLim0.reTime[6].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[6].ns", DumpEntry{dig.minMaxLim0.reTime[6].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[7].s", DumpEntry{dig.minMaxLim0.reTime[7].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[7].ns", DumpEntry{dig.minMaxLim0.reTime[7].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[8].s", DumpEntry{dig.minMaxLim0.reTime[8].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[8].ns", DumpEntry{dig.minMaxLim0.reTime[8].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[9].s", DumpEntry{dig.minMaxLim0.reTime[9].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[9].ns", DumpEntry{dig.minMaxLim0.reTime[9].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[10].s", DumpEntry{dig.minMaxLim0.reTime[10].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[10].ns", DumpEntry{dig.minMaxLim0.reTime[10].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[11].s", DumpEntry{dig.minMaxLim0.reTime[11].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[11].ns", DumpEntry{dig.minMaxLim0.reTime[11].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[12].s", DumpEntry{dig.minMaxLim0.reTime[12].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[12].ns", DumpEntry{dig.minMaxLim0.reTime[12].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[13].s", DumpEntry{dig.minMaxLim0.reTime[13].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[13].ns", DumpEntry{dig.minMaxLim0.reTime[13].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[14].s", DumpEntry{dig.minMaxLim0.reTime[14].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[14].ns", DumpEntry{dig.minMaxLim0.reTime[14].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[15].s", DumpEntry{dig.minMaxLim0.reTime[15].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[15].ns", DumpEntry{dig.minMaxLim0.reTime[15].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[16].s", DumpEntry{dig.minMaxLim0.reTime[16].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[16].ns", DumpEntry{dig.minMaxLim0.reTime[16].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[17].s", DumpEntry{dig.minMaxLim0.reTime[17].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[17].ns", DumpEntry{dig.minMaxLim0.reTime[17].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[18].s", DumpEntry{dig.minMaxLim0.reTime[18].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[18].ns", DumpEntry{dig.minMaxLim0.reTime[18].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[19].s", DumpEntry{dig.minMaxLim0.reTime[19].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[19].ns", DumpEntry{dig.minMaxLim0.reTime[19].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[20].s", DumpEntry{dig.minMaxLim0.reTime[20].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[20].ns", DumpEntry{dig.minMaxLim0.reTime[20].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[21].s", DumpEntry{dig.minMaxLim0.reTime[21].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[21].ns", DumpEntry{dig.minMaxLim0.reTime[21].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[22].s", DumpEntry{dig.minMaxLim0.reTime[22].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[22].ns", DumpEntry{dig.minMaxLim0.reTime[22].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[23].s", DumpEntry{dig.minMaxLim0.reTime[23].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[23].ns", DumpEntry{dig.minMaxLim0.reTime[23].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[24].s", DumpEntry{dig.minMaxLim0.reTime[24].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[24].ns", DumpEntry{dig.minMaxLim0.reTime[24].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[25].s", DumpEntry{dig.minMaxLim0.reTime[25].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[25].ns", DumpEntry{dig.minMaxLim0.reTime[25].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[26].s", DumpEntry{dig.minMaxLim0.reTime[26].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[26].ns", DumpEntry{dig.minMaxLim0.reTime[26].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[27].s", DumpEntry{dig.minMaxLim0.reTime[27].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[27].ns", DumpEntry{dig.minMaxLim0.reTime[27].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[28].s", DumpEntry{dig.minMaxLim0.reTime[28].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[28].ns", DumpEntry{dig.minMaxLim0.reTime[28].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[29].s", DumpEntry{dig.minMaxLim0.reTime[29].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[29].ns", DumpEntry{dig.minMaxLim0.reTime[29].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[30].s", DumpEntry{dig.minMaxLim0.reTime[30].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[30].ns", DumpEntry{dig.minMaxLim0.reTime[30].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[31].s", DumpEntry{dig.minMaxLim0.reTime[31].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[31].ns", DumpEntry{dig.minMaxLim0.reTime[31].ns});
        res.insert_or_assign("dig.minMaxLim1.staticParams", DumpEntry{dig.minMaxLim1.staticParams});
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.invertIsEn", DumpEntry{dig.minMaxLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.enableIsEn", DumpEntry{dig.minMaxLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign("dig.minMaxLim1.staticParams.latchIsEn", DumpEntry{dig.minMaxLim1.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.deglitchIsEn", DumpEntry{dig.minMaxLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.reTimeIsEn", DumpEntry{dig.minMaxLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.numChannels", DumpEntry{dig.minMaxLim1.staticParams.numChannels}
        );
        res.insert_or_assign("dig.minMaxLim1.data", DumpEntry{dig.minMaxLim1.data});
        res.insert_or_assign("dig.minMaxLim1.dataChanged", DumpEntry{dig.minMaxLim1.dataChanged});
        res.insert_or_assign("dig.minMaxLim1.invert", DumpEntry{dig.minMaxLim1.invert});
        res.insert_or_assign("dig.minMaxLim1.enable", DumpEntry{dig.minMaxLim1.enable});
        res.insert_or_assign("dig.minMaxLim1.latch", DumpEntry{dig.minMaxLim1.latch});
        res.insert_or_assign("dig.minMaxLim1.rstLatch", DumpEntry{dig.minMaxLim1.rstLatch});
        res.insert_or_assign("dig.minMaxLim1.risingInterrupt", DumpEntry{dig.minMaxLim1.risingInterrupt});
        res.insert_or_assign("dig.minMaxLim1.fallingInterrupt", DumpEntry{dig.minMaxLim1.fallingInterrupt});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[0].val", DumpEntry{dig.minMaxLim1.fastFilterSc[0].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[1].val", DumpEntry{dig.minMaxLim1.fastFilterSc[1].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[2].val", DumpEntry{dig.minMaxLim1.fastFilterSc[2].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[3].val", DumpEntry{dig.minMaxLim1.fastFilterSc[3].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[4].val", DumpEntry{dig.minMaxLim1.fastFilterSc[4].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[5].val", DumpEntry{dig.minMaxLim1.fastFilterSc[5].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[6].val", DumpEntry{dig.minMaxLim1.fastFilterSc[6].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[7].val", DumpEntry{dig.minMaxLim1.fastFilterSc[7].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[8].val", DumpEntry{dig.minMaxLim1.fastFilterSc[8].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[9].val", DumpEntry{dig.minMaxLim1.fastFilterSc[9].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[10].val", DumpEntry{dig.minMaxLim1.fastFilterSc[10].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[11].val", DumpEntry{dig.minMaxLim1.fastFilterSc[11].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[12].val", DumpEntry{dig.minMaxLim1.fastFilterSc[12].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[13].val", DumpEntry{dig.minMaxLim1.fastFilterSc[13].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[14].val", DumpEntry{dig.minMaxLim1.fastFilterSc[14].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[15].val", DumpEntry{dig.minMaxLim1.fastFilterSc[15].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[16].val", DumpEntry{dig.minMaxLim1.fastFilterSc[16].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[17].val", DumpEntry{dig.minMaxLim1.fastFilterSc[17].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[18].val", DumpEntry{dig.minMaxLim1.fastFilterSc[18].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[19].val", DumpEntry{dig.minMaxLim1.fastFilterSc[19].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[20].val", DumpEntry{dig.minMaxLim1.fastFilterSc[20].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[21].val", DumpEntry{dig.minMaxLim1.fastFilterSc[21].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[22].val", DumpEntry{dig.minMaxLim1.fastFilterSc[22].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[23].val", DumpEntry{dig.minMaxLim1.fastFilterSc[23].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[24].val", DumpEntry{dig.minMaxLim1.fastFilterSc[24].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[25].val", DumpEntry{dig.minMaxLim1.fastFilterSc[25].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[26].val", DumpEntry{dig.minMaxLim1.fastFilterSc[26].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[27].val", DumpEntry{dig.minMaxLim1.fastFilterSc[27].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[28].val", DumpEntry{dig.minMaxLim1.fastFilterSc[28].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[29].val", DumpEntry{dig.minMaxLim1.fastFilterSc[29].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[30].val", DumpEntry{dig.minMaxLim1.fastFilterSc[30].val});
        res.insert_or_assign("dig.minMaxLim1.fastFilterSc[31].val", DumpEntry{dig.minMaxLim1.fastFilterSc[31].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[0].val", DumpEntry{dig.minMaxLim1.slowFilterSc[0].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[1].val", DumpEntry{dig.minMaxLim1.slowFilterSc[1].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[2].val", DumpEntry{dig.minMaxLim1.slowFilterSc[2].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[3].val", DumpEntry{dig.minMaxLim1.slowFilterSc[3].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[4].val", DumpEntry{dig.minMaxLim1.slowFilterSc[4].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[5].val", DumpEntry{dig.minMaxLim1.slowFilterSc[5].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[6].val", DumpEntry{dig.minMaxLim1.slowFilterSc[6].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[7].val", DumpEntry{dig.minMaxLim1.slowFilterSc[7].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[8].val", DumpEntry{dig.minMaxLim1.slowFilterSc[8].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[9].val", DumpEntry{dig.minMaxLim1.slowFilterSc[9].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[10].val", DumpEntry{dig.minMaxLim1.slowFilterSc[10].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[11].val", DumpEntry{dig.minMaxLim1.slowFilterSc[11].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[12].val", DumpEntry{dig.minMaxLim1.slowFilterSc[12].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[13].val", DumpEntry{dig.minMaxLim1.slowFilterSc[13].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[14].val", DumpEntry{dig.minMaxLim1.slowFilterSc[14].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[15].val", DumpEntry{dig.minMaxLim1.slowFilterSc[15].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[16].val", DumpEntry{dig.minMaxLim1.slowFilterSc[16].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[17].val", DumpEntry{dig.minMaxLim1.slowFilterSc[17].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[18].val", DumpEntry{dig.minMaxLim1.slowFilterSc[18].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[19].val", DumpEntry{dig.minMaxLim1.slowFilterSc[19].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[20].val", DumpEntry{dig.minMaxLim1.slowFilterSc[20].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[21].val", DumpEntry{dig.minMaxLim1.slowFilterSc[21].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[22].val", DumpEntry{dig.minMaxLim1.slowFilterSc[22].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[23].val", DumpEntry{dig.minMaxLim1.slowFilterSc[23].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[24].val", DumpEntry{dig.minMaxLim1.slowFilterSc[24].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[25].val", DumpEntry{dig.minMaxLim1.slowFilterSc[25].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[26].val", DumpEntry{dig.minMaxLim1.slowFilterSc[26].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[27].val", DumpEntry{dig.minMaxLim1.slowFilterSc[27].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[28].val", DumpEntry{dig.minMaxLim1.slowFilterSc[28].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[29].val", DumpEntry{dig.minMaxLim1.slowFilterSc[29].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[30].val", DumpEntry{dig.minMaxLim1.slowFilterSc[30].val});
        res.insert_or_assign("dig.minMaxLim1.slowFilterSc[31].val", DumpEntry{dig.minMaxLim1.slowFilterSc[31].val});
        res.insert_or_assign("dig.minMaxLim1.reTime[0].s", DumpEntry{dig.minMaxLim1.reTime[0].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[0].ns", DumpEntry{dig.minMaxLim1.reTime[0].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[1].s", DumpEntry{dig.minMaxLim1.reTime[1].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[1].ns", DumpEntry{dig.minMaxLim1.reTime[1].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[2].s", DumpEntry{dig.minMaxLim1.reTime[2].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[2].ns", DumpEntry{dig.minMaxLim1.reTime[2].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[3].s", DumpEntry{dig.minMaxLim1.reTime[3].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[3].ns", DumpEntry{dig.minMaxLim1.reTime[3].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[4].s", DumpEntry{dig.minMaxLim1.reTime[4].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[4].ns", DumpEntry{dig.minMaxLim1.reTime[4].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[5].s", DumpEntry{dig.minMaxLim1.reTime[5].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[5].ns", DumpEntry{dig.minMaxLim1.reTime[5].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[6].s", DumpEntry{dig.minMaxLim1.reTime[6].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[6].ns", DumpEntry{dig.minMaxLim1.reTime[6].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[7].s", DumpEntry{dig.minMaxLim1.reTime[7].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[7].ns", DumpEntry{dig.minMaxLim1.reTime[7].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[8].s", DumpEntry{dig.minMaxLim1.reTime[8].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[8].ns", DumpEntry{dig.minMaxLim1.reTime[8].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[9].s", DumpEntry{dig.minMaxLim1.reTime[9].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[9].ns", DumpEntry{dig.minMaxLim1.reTime[9].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[10].s", DumpEntry{dig.minMaxLim1.reTime[10].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[10].ns", DumpEntry{dig.minMaxLim1.reTime[10].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[11].s", DumpEntry{dig.minMaxLim1.reTime[11].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[11].ns", DumpEntry{dig.minMaxLim1.reTime[11].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[12].s", DumpEntry{dig.minMaxLim1.reTime[12].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[12].ns", DumpEntry{dig.minMaxLim1.reTime[12].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[13].s", DumpEntry{dig.minMaxLim1.reTime[13].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[13].ns", DumpEntry{dig.minMaxLim1.reTime[13].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[14].s", DumpEntry{dig.minMaxLim1.reTime[14].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[14].ns", DumpEntry{dig.minMaxLim1.reTime[14].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[15].s", DumpEntry{dig.minMaxLim1.reTime[15].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[15].ns", DumpEntry{dig.minMaxLim1.reTime[15].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[16].s", DumpEntry{dig.minMaxLim1.reTime[16].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[16].ns", DumpEntry{dig.minMaxLim1.reTime[16].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[17].s", DumpEntry{dig.minMaxLim1.reTime[17].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[17].ns", DumpEntry{dig.minMaxLim1.reTime[17].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[18].s", DumpEntry{dig.minMaxLim1.reTime[18].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[18].ns", DumpEntry{dig.minMaxLim1.reTime[18].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[19].s", DumpEntry{dig.minMaxLim1.reTime[19].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[19].ns", DumpEntry{dig.minMaxLim1.reTime[19].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[20].s", DumpEntry{dig.minMaxLim1.reTime[20].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[20].ns", DumpEntry{dig.minMaxLim1.reTime[20].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[21].s", DumpEntry{dig.minMaxLim1.reTime[21].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[21].ns", DumpEntry{dig.minMaxLim1.reTime[21].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[22].s", DumpEntry{dig.minMaxLim1.reTime[22].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[22].ns", DumpEntry{dig.minMaxLim1.reTime[22].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[23].s", DumpEntry{dig.minMaxLim1.reTime[23].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[23].ns", DumpEntry{dig.minMaxLim1.reTime[23].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[24].s", DumpEntry{dig.minMaxLim1.reTime[24].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[24].ns", DumpEntry{dig.minMaxLim1.reTime[24].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[25].s", DumpEntry{dig.minMaxLim1.reTime[25].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[25].ns", DumpEntry{dig.minMaxLim1.reTime[25].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[26].s", DumpEntry{dig.minMaxLim1.reTime[26].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[26].ns", DumpEntry{dig.minMaxLim1.reTime[26].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[27].s", DumpEntry{dig.minMaxLim1.reTime[27].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[27].ns", DumpEntry{dig.minMaxLim1.reTime[27].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[28].s", DumpEntry{dig.minMaxLim1.reTime[28].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[28].ns", DumpEntry{dig.minMaxLim1.reTime[28].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[29].s", DumpEntry{dig.minMaxLim1.reTime[29].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[29].ns", DumpEntry{dig.minMaxLim1.reTime[29].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[30].s", DumpEntry{dig.minMaxLim1.reTime[30].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[30].ns", DumpEntry{dig.minMaxLim1.reTime[30].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[31].s", DumpEntry{dig.minMaxLim1.reTime[31].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[31].ns", DumpEntry{dig.minMaxLim1.reTime[31].ns});
        res.insert_or_assign("dig.rmsLim0.staticParams", DumpEntry{dig.rmsLim0.staticParams});
        res.insert_or_assign("dig.rmsLim0.staticParams.invertIsEn", DumpEntry{dig.rmsLim0.staticParams.invertIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.enableIsEn", DumpEntry{dig.rmsLim0.staticParams.enableIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.latchIsEn", DumpEntry{dig.rmsLim0.staticParams.latchIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.deglitchIsEn", DumpEntry{dig.rmsLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.reTimeIsEn", DumpEntry{dig.rmsLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.numChannels", DumpEntry{dig.rmsLim0.staticParams.numChannels});
        res.insert_or_assign("dig.rmsLim0.data", DumpEntry{dig.rmsLim0.data});
        res.insert_or_assign("dig.rmsLim0.dataChanged", DumpEntry{dig.rmsLim0.dataChanged});
        res.insert_or_assign("dig.rmsLim0.invert", DumpEntry{dig.rmsLim0.invert});
        res.insert_or_assign("dig.rmsLim0.enable", DumpEntry{dig.rmsLim0.enable});
        res.insert_or_assign("dig.rmsLim0.latch", DumpEntry{dig.rmsLim0.latch});
        res.insert_or_assign("dig.rmsLim0.rstLatch", DumpEntry{dig.rmsLim0.rstLatch});
        res.insert_or_assign("dig.rmsLim0.risingInterrupt", DumpEntry{dig.rmsLim0.risingInterrupt});
        res.insert_or_assign("dig.rmsLim0.fallingInterrupt", DumpEntry{dig.rmsLim0.fallingInterrupt});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[0].val", DumpEntry{dig.rmsLim0.fastFilterSc[0].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[1].val", DumpEntry{dig.rmsLim0.fastFilterSc[1].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[2].val", DumpEntry{dig.rmsLim0.fastFilterSc[2].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[3].val", DumpEntry{dig.rmsLim0.fastFilterSc[3].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[4].val", DumpEntry{dig.rmsLim0.fastFilterSc[4].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[5].val", DumpEntry{dig.rmsLim0.fastFilterSc[5].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[6].val", DumpEntry{dig.rmsLim0.fastFilterSc[6].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[7].val", DumpEntry{dig.rmsLim0.fastFilterSc[7].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[8].val", DumpEntry{dig.rmsLim0.fastFilterSc[8].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[9].val", DumpEntry{dig.rmsLim0.fastFilterSc[9].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[10].val", DumpEntry{dig.rmsLim0.fastFilterSc[10].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[11].val", DumpEntry{dig.rmsLim0.fastFilterSc[11].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[12].val", DumpEntry{dig.rmsLim0.fastFilterSc[12].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[13].val", DumpEntry{dig.rmsLim0.fastFilterSc[13].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[14].val", DumpEntry{dig.rmsLim0.fastFilterSc[14].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[15].val", DumpEntry{dig.rmsLim0.fastFilterSc[15].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[16].val", DumpEntry{dig.rmsLim0.fastFilterSc[16].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[17].val", DumpEntry{dig.rmsLim0.fastFilterSc[17].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[18].val", DumpEntry{dig.rmsLim0.fastFilterSc[18].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[19].val", DumpEntry{dig.rmsLim0.fastFilterSc[19].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[20].val", DumpEntry{dig.rmsLim0.fastFilterSc[20].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[21].val", DumpEntry{dig.rmsLim0.fastFilterSc[21].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[22].val", DumpEntry{dig.rmsLim0.fastFilterSc[22].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[23].val", DumpEntry{dig.rmsLim0.fastFilterSc[23].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[24].val", DumpEntry{dig.rmsLim0.fastFilterSc[24].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[25].val", DumpEntry{dig.rmsLim0.fastFilterSc[25].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[26].val", DumpEntry{dig.rmsLim0.fastFilterSc[26].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[27].val", DumpEntry{dig.rmsLim0.fastFilterSc[27].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[28].val", DumpEntry{dig.rmsLim0.fastFilterSc[28].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[29].val", DumpEntry{dig.rmsLim0.fastFilterSc[29].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[30].val", DumpEntry{dig.rmsLim0.fastFilterSc[30].val});
        res.insert_or_assign("dig.rmsLim0.fastFilterSc[31].val", DumpEntry{dig.rmsLim0.fastFilterSc[31].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[0].val", DumpEntry{dig.rmsLim0.slowFilterSc[0].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[1].val", DumpEntry{dig.rmsLim0.slowFilterSc[1].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[2].val", DumpEntry{dig.rmsLim0.slowFilterSc[2].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[3].val", DumpEntry{dig.rmsLim0.slowFilterSc[3].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[4].val", DumpEntry{dig.rmsLim0.slowFilterSc[4].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[5].val", DumpEntry{dig.rmsLim0.slowFilterSc[5].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[6].val", DumpEntry{dig.rmsLim0.slowFilterSc[6].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[7].val", DumpEntry{dig.rmsLim0.slowFilterSc[7].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[8].val", DumpEntry{dig.rmsLim0.slowFilterSc[8].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[9].val", DumpEntry{dig.rmsLim0.slowFilterSc[9].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[10].val", DumpEntry{dig.rmsLim0.slowFilterSc[10].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[11].val", DumpEntry{dig.rmsLim0.slowFilterSc[11].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[12].val", DumpEntry{dig.rmsLim0.slowFilterSc[12].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[13].val", DumpEntry{dig.rmsLim0.slowFilterSc[13].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[14].val", DumpEntry{dig.rmsLim0.slowFilterSc[14].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[15].val", DumpEntry{dig.rmsLim0.slowFilterSc[15].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[16].val", DumpEntry{dig.rmsLim0.slowFilterSc[16].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[17].val", DumpEntry{dig.rmsLim0.slowFilterSc[17].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[18].val", DumpEntry{dig.rmsLim0.slowFilterSc[18].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[19].val", DumpEntry{dig.rmsLim0.slowFilterSc[19].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[20].val", DumpEntry{dig.rmsLim0.slowFilterSc[20].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[21].val", DumpEntry{dig.rmsLim0.slowFilterSc[21].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[22].val", DumpEntry{dig.rmsLim0.slowFilterSc[22].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[23].val", DumpEntry{dig.rmsLim0.slowFilterSc[23].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[24].val", DumpEntry{dig.rmsLim0.slowFilterSc[24].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[25].val", DumpEntry{dig.rmsLim0.slowFilterSc[25].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[26].val", DumpEntry{dig.rmsLim0.slowFilterSc[26].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[27].val", DumpEntry{dig.rmsLim0.slowFilterSc[27].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[28].val", DumpEntry{dig.rmsLim0.slowFilterSc[28].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[29].val", DumpEntry{dig.rmsLim0.slowFilterSc[29].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[30].val", DumpEntry{dig.rmsLim0.slowFilterSc[30].val});
        res.insert_or_assign("dig.rmsLim0.slowFilterSc[31].val", DumpEntry{dig.rmsLim0.slowFilterSc[31].val});
        res.insert_or_assign("dig.rmsLim0.reTime[0].s", DumpEntry{dig.rmsLim0.reTime[0].s});
        res.insert_or_assign("dig.rmsLim0.reTime[0].ns", DumpEntry{dig.rmsLim0.reTime[0].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[1].s", DumpEntry{dig.rmsLim0.reTime[1].s});
        res.insert_or_assign("dig.rmsLim0.reTime[1].ns", DumpEntry{dig.rmsLim0.reTime[1].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[2].s", DumpEntry{dig.rmsLim0.reTime[2].s});
        res.insert_or_assign("dig.rmsLim0.reTime[2].ns", DumpEntry{dig.rmsLim0.reTime[2].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[3].s", DumpEntry{dig.rmsLim0.reTime[3].s});
        res.insert_or_assign("dig.rmsLim0.reTime[3].ns", DumpEntry{dig.rmsLim0.reTime[3].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[4].s", DumpEntry{dig.rmsLim0.reTime[4].s});
        res.insert_or_assign("dig.rmsLim0.reTime[4].ns", DumpEntry{dig.rmsLim0.reTime[4].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[5].s", DumpEntry{dig.rmsLim0.reTime[5].s});
        res.insert_or_assign("dig.rmsLim0.reTime[5].ns", DumpEntry{dig.rmsLim0.reTime[5].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[6].s", DumpEntry{dig.rmsLim0.reTime[6].s});
        res.insert_or_assign("dig.rmsLim0.reTime[6].ns", DumpEntry{dig.rmsLim0.reTime[6].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[7].s", DumpEntry{dig.rmsLim0.reTime[7].s});
        res.insert_or_assign("dig.rmsLim0.reTime[7].ns", DumpEntry{dig.rmsLim0.reTime[7].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[8].s", DumpEntry{dig.rmsLim0.reTime[8].s});
        res.insert_or_assign("dig.rmsLim0.reTime[8].ns", DumpEntry{dig.rmsLim0.reTime[8].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[9].s", DumpEntry{dig.rmsLim0.reTime[9].s});
        res.insert_or_assign("dig.rmsLim0.reTime[9].ns", DumpEntry{dig.rmsLim0.reTime[9].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[10].s", DumpEntry{dig.rmsLim0.reTime[10].s});
        res.insert_or_assign("dig.rmsLim0.reTime[10].ns", DumpEntry{dig.rmsLim0.reTime[10].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[11].s", DumpEntry{dig.rmsLim0.reTime[11].s});
        res.insert_or_assign("dig.rmsLim0.reTime[11].ns", DumpEntry{dig.rmsLim0.reTime[11].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[12].s", DumpEntry{dig.rmsLim0.reTime[12].s});
        res.insert_or_assign("dig.rmsLim0.reTime[12].ns", DumpEntry{dig.rmsLim0.reTime[12].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[13].s", DumpEntry{dig.rmsLim0.reTime[13].s});
        res.insert_or_assign("dig.rmsLim0.reTime[13].ns", DumpEntry{dig.rmsLim0.reTime[13].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[14].s", DumpEntry{dig.rmsLim0.reTime[14].s});
        res.insert_or_assign("dig.rmsLim0.reTime[14].ns", DumpEntry{dig.rmsLim0.reTime[14].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[15].s", DumpEntry{dig.rmsLim0.reTime[15].s});
        res.insert_or_assign("dig.rmsLim0.reTime[15].ns", DumpEntry{dig.rmsLim0.reTime[15].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[16].s", DumpEntry{dig.rmsLim0.reTime[16].s});
        res.insert_or_assign("dig.rmsLim0.reTime[16].ns", DumpEntry{dig.rmsLim0.reTime[16].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[17].s", DumpEntry{dig.rmsLim0.reTime[17].s});
        res.insert_or_assign("dig.rmsLim0.reTime[17].ns", DumpEntry{dig.rmsLim0.reTime[17].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[18].s", DumpEntry{dig.rmsLim0.reTime[18].s});
        res.insert_or_assign("dig.rmsLim0.reTime[18].ns", DumpEntry{dig.rmsLim0.reTime[18].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[19].s", DumpEntry{dig.rmsLim0.reTime[19].s});
        res.insert_or_assign("dig.rmsLim0.reTime[19].ns", DumpEntry{dig.rmsLim0.reTime[19].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[20].s", DumpEntry{dig.rmsLim0.reTime[20].s});
        res.insert_or_assign("dig.rmsLim0.reTime[20].ns", DumpEntry{dig.rmsLim0.reTime[20].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[21].s", DumpEntry{dig.rmsLim0.reTime[21].s});
        res.insert_or_assign("dig.rmsLim0.reTime[21].ns", DumpEntry{dig.rmsLim0.reTime[21].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[22].s", DumpEntry{dig.rmsLim0.reTime[22].s});
        res.insert_or_assign("dig.rmsLim0.reTime[22].ns", DumpEntry{dig.rmsLim0.reTime[22].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[23].s", DumpEntry{dig.rmsLim0.reTime[23].s});
        res.insert_or_assign("dig.rmsLim0.reTime[23].ns", DumpEntry{dig.rmsLim0.reTime[23].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[24].s", DumpEntry{dig.rmsLim0.reTime[24].s});
        res.insert_or_assign("dig.rmsLim0.reTime[24].ns", DumpEntry{dig.rmsLim0.reTime[24].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[25].s", DumpEntry{dig.rmsLim0.reTime[25].s});
        res.insert_or_assign("dig.rmsLim0.reTime[25].ns", DumpEntry{dig.rmsLim0.reTime[25].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[26].s", DumpEntry{dig.rmsLim0.reTime[26].s});
        res.insert_or_assign("dig.rmsLim0.reTime[26].ns", DumpEntry{dig.rmsLim0.reTime[26].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[27].s", DumpEntry{dig.rmsLim0.reTime[27].s});
        res.insert_or_assign("dig.rmsLim0.reTime[27].ns", DumpEntry{dig.rmsLim0.reTime[27].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[28].s", DumpEntry{dig.rmsLim0.reTime[28].s});
        res.insert_or_assign("dig.rmsLim0.reTime[28].ns", DumpEntry{dig.rmsLim0.reTime[28].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[29].s", DumpEntry{dig.rmsLim0.reTime[29].s});
        res.insert_or_assign("dig.rmsLim0.reTime[29].ns", DumpEntry{dig.rmsLim0.reTime[29].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[30].s", DumpEntry{dig.rmsLim0.reTime[30].s});
        res.insert_or_assign("dig.rmsLim0.reTime[30].ns", DumpEntry{dig.rmsLim0.reTime[30].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[31].s", DumpEntry{dig.rmsLim0.reTime[31].s});
        res.insert_or_assign("dig.rmsLim0.reTime[31].ns", DumpEntry{dig.rmsLim0.reTime[31].ns});
        res.insert_or_assign("dig.rmsLim1.staticParams", DumpEntry{dig.rmsLim1.staticParams});
        res.insert_or_assign("dig.rmsLim1.staticParams.invertIsEn", DumpEntry{dig.rmsLim1.staticParams.invertIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.enableIsEn", DumpEntry{dig.rmsLim1.staticParams.enableIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.latchIsEn", DumpEntry{dig.rmsLim1.staticParams.latchIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.deglitchIsEn", DumpEntry{dig.rmsLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.reTimeIsEn", DumpEntry{dig.rmsLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.numChannels", DumpEntry{dig.rmsLim1.staticParams.numChannels});
        res.insert_or_assign("dig.rmsLim1.data", DumpEntry{dig.rmsLim1.data});
        res.insert_or_assign("dig.rmsLim1.dataChanged", DumpEntry{dig.rmsLim1.dataChanged});
        res.insert_or_assign("dig.rmsLim1.invert", DumpEntry{dig.rmsLim1.invert});
        res.insert_or_assign("dig.rmsLim1.enable", DumpEntry{dig.rmsLim1.enable});
        res.insert_or_assign("dig.rmsLim1.latch", DumpEntry{dig.rmsLim1.latch});
        res.insert_or_assign("dig.rmsLim1.rstLatch", DumpEntry{dig.rmsLim1.rstLatch});
        res.insert_or_assign("dig.rmsLim1.risingInterrupt", DumpEntry{dig.rmsLim1.risingInterrupt});
        res.insert_or_assign("dig.rmsLim1.fallingInterrupt", DumpEntry{dig.rmsLim1.fallingInterrupt});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[0].val", DumpEntry{dig.rmsLim1.fastFilterSc[0].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[1].val", DumpEntry{dig.rmsLim1.fastFilterSc[1].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[2].val", DumpEntry{dig.rmsLim1.fastFilterSc[2].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[3].val", DumpEntry{dig.rmsLim1.fastFilterSc[3].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[4].val", DumpEntry{dig.rmsLim1.fastFilterSc[4].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[5].val", DumpEntry{dig.rmsLim1.fastFilterSc[5].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[6].val", DumpEntry{dig.rmsLim1.fastFilterSc[6].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[7].val", DumpEntry{dig.rmsLim1.fastFilterSc[7].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[8].val", DumpEntry{dig.rmsLim1.fastFilterSc[8].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[9].val", DumpEntry{dig.rmsLim1.fastFilterSc[9].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[10].val", DumpEntry{dig.rmsLim1.fastFilterSc[10].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[11].val", DumpEntry{dig.rmsLim1.fastFilterSc[11].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[12].val", DumpEntry{dig.rmsLim1.fastFilterSc[12].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[13].val", DumpEntry{dig.rmsLim1.fastFilterSc[13].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[14].val", DumpEntry{dig.rmsLim1.fastFilterSc[14].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[15].val", DumpEntry{dig.rmsLim1.fastFilterSc[15].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[16].val", DumpEntry{dig.rmsLim1.fastFilterSc[16].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[17].val", DumpEntry{dig.rmsLim1.fastFilterSc[17].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[18].val", DumpEntry{dig.rmsLim1.fastFilterSc[18].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[19].val", DumpEntry{dig.rmsLim1.fastFilterSc[19].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[20].val", DumpEntry{dig.rmsLim1.fastFilterSc[20].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[21].val", DumpEntry{dig.rmsLim1.fastFilterSc[21].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[22].val", DumpEntry{dig.rmsLim1.fastFilterSc[22].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[23].val", DumpEntry{dig.rmsLim1.fastFilterSc[23].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[24].val", DumpEntry{dig.rmsLim1.fastFilterSc[24].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[25].val", DumpEntry{dig.rmsLim1.fastFilterSc[25].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[26].val", DumpEntry{dig.rmsLim1.fastFilterSc[26].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[27].val", DumpEntry{dig.rmsLim1.fastFilterSc[27].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[28].val", DumpEntry{dig.rmsLim1.fastFilterSc[28].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[29].val", DumpEntry{dig.rmsLim1.fastFilterSc[29].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[30].val", DumpEntry{dig.rmsLim1.fastFilterSc[30].val});
        res.insert_or_assign("dig.rmsLim1.fastFilterSc[31].val", DumpEntry{dig.rmsLim1.fastFilterSc[31].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[0].val", DumpEntry{dig.rmsLim1.slowFilterSc[0].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[1].val", DumpEntry{dig.rmsLim1.slowFilterSc[1].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[2].val", DumpEntry{dig.rmsLim1.slowFilterSc[2].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[3].val", DumpEntry{dig.rmsLim1.slowFilterSc[3].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[4].val", DumpEntry{dig.rmsLim1.slowFilterSc[4].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[5].val", DumpEntry{dig.rmsLim1.slowFilterSc[5].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[6].val", DumpEntry{dig.rmsLim1.slowFilterSc[6].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[7].val", DumpEntry{dig.rmsLim1.slowFilterSc[7].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[8].val", DumpEntry{dig.rmsLim1.slowFilterSc[8].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[9].val", DumpEntry{dig.rmsLim1.slowFilterSc[9].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[10].val", DumpEntry{dig.rmsLim1.slowFilterSc[10].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[11].val", DumpEntry{dig.rmsLim1.slowFilterSc[11].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[12].val", DumpEntry{dig.rmsLim1.slowFilterSc[12].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[13].val", DumpEntry{dig.rmsLim1.slowFilterSc[13].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[14].val", DumpEntry{dig.rmsLim1.slowFilterSc[14].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[15].val", DumpEntry{dig.rmsLim1.slowFilterSc[15].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[16].val", DumpEntry{dig.rmsLim1.slowFilterSc[16].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[17].val", DumpEntry{dig.rmsLim1.slowFilterSc[17].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[18].val", DumpEntry{dig.rmsLim1.slowFilterSc[18].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[19].val", DumpEntry{dig.rmsLim1.slowFilterSc[19].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[20].val", DumpEntry{dig.rmsLim1.slowFilterSc[20].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[21].val", DumpEntry{dig.rmsLim1.slowFilterSc[21].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[22].val", DumpEntry{dig.rmsLim1.slowFilterSc[22].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[23].val", DumpEntry{dig.rmsLim1.slowFilterSc[23].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[24].val", DumpEntry{dig.rmsLim1.slowFilterSc[24].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[25].val", DumpEntry{dig.rmsLim1.slowFilterSc[25].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[26].val", DumpEntry{dig.rmsLim1.slowFilterSc[26].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[27].val", DumpEntry{dig.rmsLim1.slowFilterSc[27].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[28].val", DumpEntry{dig.rmsLim1.slowFilterSc[28].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[29].val", DumpEntry{dig.rmsLim1.slowFilterSc[29].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[30].val", DumpEntry{dig.rmsLim1.slowFilterSc[30].val});
        res.insert_or_assign("dig.rmsLim1.slowFilterSc[31].val", DumpEntry{dig.rmsLim1.slowFilterSc[31].val});
        res.insert_or_assign("dig.rmsLim1.reTime[0].s", DumpEntry{dig.rmsLim1.reTime[0].s});
        res.insert_or_assign("dig.rmsLim1.reTime[0].ns", DumpEntry{dig.rmsLim1.reTime[0].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[1].s", DumpEntry{dig.rmsLim1.reTime[1].s});
        res.insert_or_assign("dig.rmsLim1.reTime[1].ns", DumpEntry{dig.rmsLim1.reTime[1].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[2].s", DumpEntry{dig.rmsLim1.reTime[2].s});
        res.insert_or_assign("dig.rmsLim1.reTime[2].ns", DumpEntry{dig.rmsLim1.reTime[2].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[3].s", DumpEntry{dig.rmsLim1.reTime[3].s});
        res.insert_or_assign("dig.rmsLim1.reTime[3].ns", DumpEntry{dig.rmsLim1.reTime[3].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[4].s", DumpEntry{dig.rmsLim1.reTime[4].s});
        res.insert_or_assign("dig.rmsLim1.reTime[4].ns", DumpEntry{dig.rmsLim1.reTime[4].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[5].s", DumpEntry{dig.rmsLim1.reTime[5].s});
        res.insert_or_assign("dig.rmsLim1.reTime[5].ns", DumpEntry{dig.rmsLim1.reTime[5].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[6].s", DumpEntry{dig.rmsLim1.reTime[6].s});
        res.insert_or_assign("dig.rmsLim1.reTime[6].ns", DumpEntry{dig.rmsLim1.reTime[6].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[7].s", DumpEntry{dig.rmsLim1.reTime[7].s});
        res.insert_or_assign("dig.rmsLim1.reTime[7].ns", DumpEntry{dig.rmsLim1.reTime[7].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[8].s", DumpEntry{dig.rmsLim1.reTime[8].s});
        res.insert_or_assign("dig.rmsLim1.reTime[8].ns", DumpEntry{dig.rmsLim1.reTime[8].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[9].s", DumpEntry{dig.rmsLim1.reTime[9].s});
        res.insert_or_assign("dig.rmsLim1.reTime[9].ns", DumpEntry{dig.rmsLim1.reTime[9].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[10].s", DumpEntry{dig.rmsLim1.reTime[10].s});
        res.insert_or_assign("dig.rmsLim1.reTime[10].ns", DumpEntry{dig.rmsLim1.reTime[10].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[11].s", DumpEntry{dig.rmsLim1.reTime[11].s});
        res.insert_or_assign("dig.rmsLim1.reTime[11].ns", DumpEntry{dig.rmsLim1.reTime[11].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[12].s", DumpEntry{dig.rmsLim1.reTime[12].s});
        res.insert_or_assign("dig.rmsLim1.reTime[12].ns", DumpEntry{dig.rmsLim1.reTime[12].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[13].s", DumpEntry{dig.rmsLim1.reTime[13].s});
        res.insert_or_assign("dig.rmsLim1.reTime[13].ns", DumpEntry{dig.rmsLim1.reTime[13].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[14].s", DumpEntry{dig.rmsLim1.reTime[14].s});
        res.insert_or_assign("dig.rmsLim1.reTime[14].ns", DumpEntry{dig.rmsLim1.reTime[14].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[15].s", DumpEntry{dig.rmsLim1.reTime[15].s});
        res.insert_or_assign("dig.rmsLim1.reTime[15].ns", DumpEntry{dig.rmsLim1.reTime[15].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[16].s", DumpEntry{dig.rmsLim1.reTime[16].s});
        res.insert_or_assign("dig.rmsLim1.reTime[16].ns", DumpEntry{dig.rmsLim1.reTime[16].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[17].s", DumpEntry{dig.rmsLim1.reTime[17].s});
        res.insert_or_assign("dig.rmsLim1.reTime[17].ns", DumpEntry{dig.rmsLim1.reTime[17].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[18].s", DumpEntry{dig.rmsLim1.reTime[18].s});
        res.insert_or_assign("dig.rmsLim1.reTime[18].ns", DumpEntry{dig.rmsLim1.reTime[18].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[19].s", DumpEntry{dig.rmsLim1.reTime[19].s});
        res.insert_or_assign("dig.rmsLim1.reTime[19].ns", DumpEntry{dig.rmsLim1.reTime[19].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[20].s", DumpEntry{dig.rmsLim1.reTime[20].s});
        res.insert_or_assign("dig.rmsLim1.reTime[20].ns", DumpEntry{dig.rmsLim1.reTime[20].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[21].s", DumpEntry{dig.rmsLim1.reTime[21].s});
        res.insert_or_assign("dig.rmsLim1.reTime[21].ns", DumpEntry{dig.rmsLim1.reTime[21].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[22].s", DumpEntry{dig.rmsLim1.reTime[22].s});
        res.insert_or_assign("dig.rmsLim1.reTime[22].ns", DumpEntry{dig.rmsLim1.reTime[22].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[23].s", DumpEntry{dig.rmsLim1.reTime[23].s});
        res.insert_or_assign("dig.rmsLim1.reTime[23].ns", DumpEntry{dig.rmsLim1.reTime[23].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[24].s", DumpEntry{dig.rmsLim1.reTime[24].s});
        res.insert_or_assign("dig.rmsLim1.reTime[24].ns", DumpEntry{dig.rmsLim1.reTime[24].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[25].s", DumpEntry{dig.rmsLim1.reTime[25].s});
        res.insert_or_assign("dig.rmsLim1.reTime[25].ns", DumpEntry{dig.rmsLim1.reTime[25].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[26].s", DumpEntry{dig.rmsLim1.reTime[26].s});
        res.insert_or_assign("dig.rmsLim1.reTime[26].ns", DumpEntry{dig.rmsLim1.reTime[26].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[27].s", DumpEntry{dig.rmsLim1.reTime[27].s});
        res.insert_or_assign("dig.rmsLim1.reTime[27].ns", DumpEntry{dig.rmsLim1.reTime[27].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[28].s", DumpEntry{dig.rmsLim1.reTime[28].s});
        res.insert_or_assign("dig.rmsLim1.reTime[28].ns", DumpEntry{dig.rmsLim1.reTime[28].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[29].s", DumpEntry{dig.rmsLim1.reTime[29].s});
        res.insert_or_assign("dig.rmsLim1.reTime[29].ns", DumpEntry{dig.rmsLim1.reTime[29].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[30].s", DumpEntry{dig.rmsLim1.reTime[30].s});
        res.insert_or_assign("dig.rmsLim1.reTime[30].ns", DumpEntry{dig.rmsLim1.reTime[30].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[31].s", DumpEntry{dig.rmsLim1.reTime[31].s});
        res.insert_or_assign("dig.rmsLim1.reTime[31].ns", DumpEntry{dig.rmsLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmArrayItem::Pwm`
    //!
    //! @param pwm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwm
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmArrayItem::Pwm& pwm)
    {
        DumpMap res{pwm.base()};
        res.insert_or_assign("pwm.ctrl", DumpEntry{pwm.ctrl});
        res.insert_or_assign("pwm.ctrl.enable", DumpEntry{pwm.ctrl.enable});
        res.insert_or_assign("pwm.ctrl.reset", DumpEntry{pwm.ctrl.reset});
        res.insert_or_assign("pwm.carrierBits", DumpEntry{pwm.carrierBits});
        res.insert_or_assign("pwm.deadtimeBits", DumpEntry{pwm.deadtimeBits});
        res.insert_or_assign("pwm.config", DumpEntry{pwm.config});
        res.insert_or_assign("pwm.config.updateType", DumpEntry{pwm.config.updateType});
        res.insert_or_assign("pwm.config.enablePwmCheck", DumpEntry{pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm.config.enableStCheck", DumpEntry{pwm.config.enableStCheck});
        res.insert_or_assign("pwm.config.enableValueCheck", DumpEntry{pwm.config.enableValueCheck});
        res.insert_or_assign("pwm.config.bypassDeadtime", DumpEntry{pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm.config.disableA", DumpEntry{pwm.config.disableA});
        res.insert_or_assign("pwm.config.disableB", DumpEntry{pwm.config.disableB});
        res.insert_or_assign("pwm.config.invert", DumpEntry{pwm.config.invert});
        res.insert_or_assign("pwm.config.decoupleCc1", DumpEntry{pwm.config.decoupleCc1});
        res.insert_or_assign("pwm.cc0Sc", DumpEntry{pwm.cc0Sc});
        res.insert_or_assign("pwm.cc1Sc", DumpEntry{pwm.cc1Sc});
        res.insert_or_assign("pwm.ctrhSc", DumpEntry{pwm.ctrhSc});
        res.insert_or_assign("pwm.deadtimeSc", DumpEntry{pwm.deadtimeSc});
        res.insert_or_assign("pwm.extendedDeadtimeSc", DumpEntry{pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm.minSwitchTimeSc", DumpEntry{pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm.minModIdxSc", DumpEntry{pwm.minModIdxSc});
        res.insert_or_assign("pwm.maxModIdxSc", DumpEntry{pwm.maxModIdxSc});
        res.insert_or_assign("pwm.numberCcErrors", DumpEntry{pwm.numberCcErrors});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmArray`
    //!
    //! @param pwm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwm
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmArray& pwm)
    {
        DumpMap res{pwm.base()};
        res.insert_or_assign("pwm[0].pwm.ctrl", DumpEntry{pwm[0].pwm.ctrl});
        res.insert_or_assign("pwm[0].pwm.ctrl.enable", DumpEntry{pwm[0].pwm.ctrl.enable});
        res.insert_or_assign("pwm[0].pwm.ctrl.reset", DumpEntry{pwm[0].pwm.ctrl.reset});
        res.insert_or_assign("pwm[0].pwm.carrierBits", DumpEntry{pwm[0].pwm.carrierBits});
        res.insert_or_assign("pwm[0].pwm.deadtimeBits", DumpEntry{pwm[0].pwm.deadtimeBits});
        res.insert_or_assign("pwm[0].pwm.config", DumpEntry{pwm[0].pwm.config});
        res.insert_or_assign("pwm[0].pwm.config.updateType", DumpEntry{pwm[0].pwm.config.updateType});
        res.insert_or_assign("pwm[0].pwm.config.enablePwmCheck", DumpEntry{pwm[0].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[0].pwm.config.enableStCheck", DumpEntry{pwm[0].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[0].pwm.config.enableValueCheck", DumpEntry{pwm[0].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[0].pwm.config.bypassDeadtime", DumpEntry{pwm[0].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[0].pwm.config.disableA", DumpEntry{pwm[0].pwm.config.disableA});
        res.insert_or_assign("pwm[0].pwm.config.disableB", DumpEntry{pwm[0].pwm.config.disableB});
        res.insert_or_assign("pwm[0].pwm.config.invert", DumpEntry{pwm[0].pwm.config.invert});
        res.insert_or_assign("pwm[0].pwm.config.decoupleCc1", DumpEntry{pwm[0].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[0].pwm.cc0Sc", DumpEntry{pwm[0].pwm.cc0Sc});
        res.insert_or_assign("pwm[0].pwm.cc1Sc", DumpEntry{pwm[0].pwm.cc1Sc});
        res.insert_or_assign("pwm[0].pwm.ctrhSc", DumpEntry{pwm[0].pwm.ctrhSc});
        res.insert_or_assign("pwm[0].pwm.deadtimeSc", DumpEntry{pwm[0].pwm.deadtimeSc});
        res.insert_or_assign("pwm[0].pwm.extendedDeadtimeSc", DumpEntry{pwm[0].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[0].pwm.minSwitchTimeSc", DumpEntry{pwm[0].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[0].pwm.minModIdxSc", DumpEntry{pwm[0].pwm.minModIdxSc});
        res.insert_or_assign("pwm[0].pwm.maxModIdxSc", DumpEntry{pwm[0].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[0].pwm.numberCcErrors", DumpEntry{pwm[0].pwm.numberCcErrors});
        res.insert_or_assign("pwm[1].pwm.ctrl", DumpEntry{pwm[1].pwm.ctrl});
        res.insert_or_assign("pwm[1].pwm.ctrl.enable", DumpEntry{pwm[1].pwm.ctrl.enable});
        res.insert_or_assign("pwm[1].pwm.ctrl.reset", DumpEntry{pwm[1].pwm.ctrl.reset});
        res.insert_or_assign("pwm[1].pwm.carrierBits", DumpEntry{pwm[1].pwm.carrierBits});
        res.insert_or_assign("pwm[1].pwm.deadtimeBits", DumpEntry{pwm[1].pwm.deadtimeBits});
        res.insert_or_assign("pwm[1].pwm.config", DumpEntry{pwm[1].pwm.config});
        res.insert_or_assign("pwm[1].pwm.config.updateType", DumpEntry{pwm[1].pwm.config.updateType});
        res.insert_or_assign("pwm[1].pwm.config.enablePwmCheck", DumpEntry{pwm[1].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[1].pwm.config.enableStCheck", DumpEntry{pwm[1].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[1].pwm.config.enableValueCheck", DumpEntry{pwm[1].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[1].pwm.config.bypassDeadtime", DumpEntry{pwm[1].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[1].pwm.config.disableA", DumpEntry{pwm[1].pwm.config.disableA});
        res.insert_or_assign("pwm[1].pwm.config.disableB", DumpEntry{pwm[1].pwm.config.disableB});
        res.insert_or_assign("pwm[1].pwm.config.invert", DumpEntry{pwm[1].pwm.config.invert});
        res.insert_or_assign("pwm[1].pwm.config.decoupleCc1", DumpEntry{pwm[1].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[1].pwm.cc0Sc", DumpEntry{pwm[1].pwm.cc0Sc});
        res.insert_or_assign("pwm[1].pwm.cc1Sc", DumpEntry{pwm[1].pwm.cc1Sc});
        res.insert_or_assign("pwm[1].pwm.ctrhSc", DumpEntry{pwm[1].pwm.ctrhSc});
        res.insert_or_assign("pwm[1].pwm.deadtimeSc", DumpEntry{pwm[1].pwm.deadtimeSc});
        res.insert_or_assign("pwm[1].pwm.extendedDeadtimeSc", DumpEntry{pwm[1].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[1].pwm.minSwitchTimeSc", DumpEntry{pwm[1].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[1].pwm.minModIdxSc", DumpEntry{pwm[1].pwm.minModIdxSc});
        res.insert_or_assign("pwm[1].pwm.maxModIdxSc", DumpEntry{pwm[1].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[1].pwm.numberCcErrors", DumpEntry{pwm[1].pwm.numberCcErrors});
        res.insert_or_assign("pwm[2].pwm.ctrl", DumpEntry{pwm[2].pwm.ctrl});
        res.insert_or_assign("pwm[2].pwm.ctrl.enable", DumpEntry{pwm[2].pwm.ctrl.enable});
        res.insert_or_assign("pwm[2].pwm.ctrl.reset", DumpEntry{pwm[2].pwm.ctrl.reset});
        res.insert_or_assign("pwm[2].pwm.carrierBits", DumpEntry{pwm[2].pwm.carrierBits});
        res.insert_or_assign("pwm[2].pwm.deadtimeBits", DumpEntry{pwm[2].pwm.deadtimeBits});
        res.insert_or_assign("pwm[2].pwm.config", DumpEntry{pwm[2].pwm.config});
        res.insert_or_assign("pwm[2].pwm.config.updateType", DumpEntry{pwm[2].pwm.config.updateType});
        res.insert_or_assign("pwm[2].pwm.config.enablePwmCheck", DumpEntry{pwm[2].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[2].pwm.config.enableStCheck", DumpEntry{pwm[2].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[2].pwm.config.enableValueCheck", DumpEntry{pwm[2].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[2].pwm.config.bypassDeadtime", DumpEntry{pwm[2].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[2].pwm.config.disableA", DumpEntry{pwm[2].pwm.config.disableA});
        res.insert_or_assign("pwm[2].pwm.config.disableB", DumpEntry{pwm[2].pwm.config.disableB});
        res.insert_or_assign("pwm[2].pwm.config.invert", DumpEntry{pwm[2].pwm.config.invert});
        res.insert_or_assign("pwm[2].pwm.config.decoupleCc1", DumpEntry{pwm[2].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[2].pwm.cc0Sc", DumpEntry{pwm[2].pwm.cc0Sc});
        res.insert_or_assign("pwm[2].pwm.cc1Sc", DumpEntry{pwm[2].pwm.cc1Sc});
        res.insert_or_assign("pwm[2].pwm.ctrhSc", DumpEntry{pwm[2].pwm.ctrhSc});
        res.insert_or_assign("pwm[2].pwm.deadtimeSc", DumpEntry{pwm[2].pwm.deadtimeSc});
        res.insert_or_assign("pwm[2].pwm.extendedDeadtimeSc", DumpEntry{pwm[2].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[2].pwm.minSwitchTimeSc", DumpEntry{pwm[2].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[2].pwm.minModIdxSc", DumpEntry{pwm[2].pwm.minModIdxSc});
        res.insert_or_assign("pwm[2].pwm.maxModIdxSc", DumpEntry{pwm[2].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[2].pwm.numberCcErrors", DumpEntry{pwm[2].pwm.numberCcErrors});
        res.insert_or_assign("pwm[3].pwm.ctrl", DumpEntry{pwm[3].pwm.ctrl});
        res.insert_or_assign("pwm[3].pwm.ctrl.enable", DumpEntry{pwm[3].pwm.ctrl.enable});
        res.insert_or_assign("pwm[3].pwm.ctrl.reset", DumpEntry{pwm[3].pwm.ctrl.reset});
        res.insert_or_assign("pwm[3].pwm.carrierBits", DumpEntry{pwm[3].pwm.carrierBits});
        res.insert_or_assign("pwm[3].pwm.deadtimeBits", DumpEntry{pwm[3].pwm.deadtimeBits});
        res.insert_or_assign("pwm[3].pwm.config", DumpEntry{pwm[3].pwm.config});
        res.insert_or_assign("pwm[3].pwm.config.updateType", DumpEntry{pwm[3].pwm.config.updateType});
        res.insert_or_assign("pwm[3].pwm.config.enablePwmCheck", DumpEntry{pwm[3].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[3].pwm.config.enableStCheck", DumpEntry{pwm[3].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[3].pwm.config.enableValueCheck", DumpEntry{pwm[3].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[3].pwm.config.bypassDeadtime", DumpEntry{pwm[3].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[3].pwm.config.disableA", DumpEntry{pwm[3].pwm.config.disableA});
        res.insert_or_assign("pwm[3].pwm.config.disableB", DumpEntry{pwm[3].pwm.config.disableB});
        res.insert_or_assign("pwm[3].pwm.config.invert", DumpEntry{pwm[3].pwm.config.invert});
        res.insert_or_assign("pwm[3].pwm.config.decoupleCc1", DumpEntry{pwm[3].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[3].pwm.cc0Sc", DumpEntry{pwm[3].pwm.cc0Sc});
        res.insert_or_assign("pwm[3].pwm.cc1Sc", DumpEntry{pwm[3].pwm.cc1Sc});
        res.insert_or_assign("pwm[3].pwm.ctrhSc", DumpEntry{pwm[3].pwm.ctrhSc});
        res.insert_or_assign("pwm[3].pwm.deadtimeSc", DumpEntry{pwm[3].pwm.deadtimeSc});
        res.insert_or_assign("pwm[3].pwm.extendedDeadtimeSc", DumpEntry{pwm[3].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[3].pwm.minSwitchTimeSc", DumpEntry{pwm[3].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[3].pwm.minModIdxSc", DumpEntry{pwm[3].pwm.minModIdxSc});
        res.insert_or_assign("pwm[3].pwm.maxModIdxSc", DumpEntry{pwm[3].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[3].pwm.numberCcErrors", DumpEntry{pwm[3].pwm.numberCcErrors});
        res.insert_or_assign("pwm[4].pwm.ctrl", DumpEntry{pwm[4].pwm.ctrl});
        res.insert_or_assign("pwm[4].pwm.ctrl.enable", DumpEntry{pwm[4].pwm.ctrl.enable});
        res.insert_or_assign("pwm[4].pwm.ctrl.reset", DumpEntry{pwm[4].pwm.ctrl.reset});
        res.insert_or_assign("pwm[4].pwm.carrierBits", DumpEntry{pwm[4].pwm.carrierBits});
        res.insert_or_assign("pwm[4].pwm.deadtimeBits", DumpEntry{pwm[4].pwm.deadtimeBits});
        res.insert_or_assign("pwm[4].pwm.config", DumpEntry{pwm[4].pwm.config});
        res.insert_or_assign("pwm[4].pwm.config.updateType", DumpEntry{pwm[4].pwm.config.updateType});
        res.insert_or_assign("pwm[4].pwm.config.enablePwmCheck", DumpEntry{pwm[4].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[4].pwm.config.enableStCheck", DumpEntry{pwm[4].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[4].pwm.config.enableValueCheck", DumpEntry{pwm[4].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[4].pwm.config.bypassDeadtime", DumpEntry{pwm[4].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[4].pwm.config.disableA", DumpEntry{pwm[4].pwm.config.disableA});
        res.insert_or_assign("pwm[4].pwm.config.disableB", DumpEntry{pwm[4].pwm.config.disableB});
        res.insert_or_assign("pwm[4].pwm.config.invert", DumpEntry{pwm[4].pwm.config.invert});
        res.insert_or_assign("pwm[4].pwm.config.decoupleCc1", DumpEntry{pwm[4].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[4].pwm.cc0Sc", DumpEntry{pwm[4].pwm.cc0Sc});
        res.insert_or_assign("pwm[4].pwm.cc1Sc", DumpEntry{pwm[4].pwm.cc1Sc});
        res.insert_or_assign("pwm[4].pwm.ctrhSc", DumpEntry{pwm[4].pwm.ctrhSc});
        res.insert_or_assign("pwm[4].pwm.deadtimeSc", DumpEntry{pwm[4].pwm.deadtimeSc});
        res.insert_or_assign("pwm[4].pwm.extendedDeadtimeSc", DumpEntry{pwm[4].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[4].pwm.minSwitchTimeSc", DumpEntry{pwm[4].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[4].pwm.minModIdxSc", DumpEntry{pwm[4].pwm.minModIdxSc});
        res.insert_or_assign("pwm[4].pwm.maxModIdxSc", DumpEntry{pwm[4].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[4].pwm.numberCcErrors", DumpEntry{pwm[4].pwm.numberCcErrors});
        res.insert_or_assign("pwm[5].pwm.ctrl", DumpEntry{pwm[5].pwm.ctrl});
        res.insert_or_assign("pwm[5].pwm.ctrl.enable", DumpEntry{pwm[5].pwm.ctrl.enable});
        res.insert_or_assign("pwm[5].pwm.ctrl.reset", DumpEntry{pwm[5].pwm.ctrl.reset});
        res.insert_or_assign("pwm[5].pwm.carrierBits", DumpEntry{pwm[5].pwm.carrierBits});
        res.insert_or_assign("pwm[5].pwm.deadtimeBits", DumpEntry{pwm[5].pwm.deadtimeBits});
        res.insert_or_assign("pwm[5].pwm.config", DumpEntry{pwm[5].pwm.config});
        res.insert_or_assign("pwm[5].pwm.config.updateType", DumpEntry{pwm[5].pwm.config.updateType});
        res.insert_or_assign("pwm[5].pwm.config.enablePwmCheck", DumpEntry{pwm[5].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[5].pwm.config.enableStCheck", DumpEntry{pwm[5].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[5].pwm.config.enableValueCheck", DumpEntry{pwm[5].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[5].pwm.config.bypassDeadtime", DumpEntry{pwm[5].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[5].pwm.config.disableA", DumpEntry{pwm[5].pwm.config.disableA});
        res.insert_or_assign("pwm[5].pwm.config.disableB", DumpEntry{pwm[5].pwm.config.disableB});
        res.insert_or_assign("pwm[5].pwm.config.invert", DumpEntry{pwm[5].pwm.config.invert});
        res.insert_or_assign("pwm[5].pwm.config.decoupleCc1", DumpEntry{pwm[5].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[5].pwm.cc0Sc", DumpEntry{pwm[5].pwm.cc0Sc});
        res.insert_or_assign("pwm[5].pwm.cc1Sc", DumpEntry{pwm[5].pwm.cc1Sc});
        res.insert_or_assign("pwm[5].pwm.ctrhSc", DumpEntry{pwm[5].pwm.ctrhSc});
        res.insert_or_assign("pwm[5].pwm.deadtimeSc", DumpEntry{pwm[5].pwm.deadtimeSc});
        res.insert_or_assign("pwm[5].pwm.extendedDeadtimeSc", DumpEntry{pwm[5].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[5].pwm.minSwitchTimeSc", DumpEntry{pwm[5].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[5].pwm.minModIdxSc", DumpEntry{pwm[5].pwm.minModIdxSc});
        res.insert_or_assign("pwm[5].pwm.maxModIdxSc", DumpEntry{pwm[5].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[5].pwm.numberCcErrors", DumpEntry{pwm[5].pwm.numberCcErrors});
        res.insert_or_assign("pwm[6].pwm.ctrl", DumpEntry{pwm[6].pwm.ctrl});
        res.insert_or_assign("pwm[6].pwm.ctrl.enable", DumpEntry{pwm[6].pwm.ctrl.enable});
        res.insert_or_assign("pwm[6].pwm.ctrl.reset", DumpEntry{pwm[6].pwm.ctrl.reset});
        res.insert_or_assign("pwm[6].pwm.carrierBits", DumpEntry{pwm[6].pwm.carrierBits});
        res.insert_or_assign("pwm[6].pwm.deadtimeBits", DumpEntry{pwm[6].pwm.deadtimeBits});
        res.insert_or_assign("pwm[6].pwm.config", DumpEntry{pwm[6].pwm.config});
        res.insert_or_assign("pwm[6].pwm.config.updateType", DumpEntry{pwm[6].pwm.config.updateType});
        res.insert_or_assign("pwm[6].pwm.config.enablePwmCheck", DumpEntry{pwm[6].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[6].pwm.config.enableStCheck", DumpEntry{pwm[6].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[6].pwm.config.enableValueCheck", DumpEntry{pwm[6].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[6].pwm.config.bypassDeadtime", DumpEntry{pwm[6].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[6].pwm.config.disableA", DumpEntry{pwm[6].pwm.config.disableA});
        res.insert_or_assign("pwm[6].pwm.config.disableB", DumpEntry{pwm[6].pwm.config.disableB});
        res.insert_or_assign("pwm[6].pwm.config.invert", DumpEntry{pwm[6].pwm.config.invert});
        res.insert_or_assign("pwm[6].pwm.config.decoupleCc1", DumpEntry{pwm[6].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[6].pwm.cc0Sc", DumpEntry{pwm[6].pwm.cc0Sc});
        res.insert_or_assign("pwm[6].pwm.cc1Sc", DumpEntry{pwm[6].pwm.cc1Sc});
        res.insert_or_assign("pwm[6].pwm.ctrhSc", DumpEntry{pwm[6].pwm.ctrhSc});
        res.insert_or_assign("pwm[6].pwm.deadtimeSc", DumpEntry{pwm[6].pwm.deadtimeSc});
        res.insert_or_assign("pwm[6].pwm.extendedDeadtimeSc", DumpEntry{pwm[6].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[6].pwm.minSwitchTimeSc", DumpEntry{pwm[6].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[6].pwm.minModIdxSc", DumpEntry{pwm[6].pwm.minModIdxSc});
        res.insert_or_assign("pwm[6].pwm.maxModIdxSc", DumpEntry{pwm[6].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[6].pwm.numberCcErrors", DumpEntry{pwm[6].pwm.numberCcErrors});
        res.insert_or_assign("pwm[7].pwm.ctrl", DumpEntry{pwm[7].pwm.ctrl});
        res.insert_or_assign("pwm[7].pwm.ctrl.enable", DumpEntry{pwm[7].pwm.ctrl.enable});
        res.insert_or_assign("pwm[7].pwm.ctrl.reset", DumpEntry{pwm[7].pwm.ctrl.reset});
        res.insert_or_assign("pwm[7].pwm.carrierBits", DumpEntry{pwm[7].pwm.carrierBits});
        res.insert_or_assign("pwm[7].pwm.deadtimeBits", DumpEntry{pwm[7].pwm.deadtimeBits});
        res.insert_or_assign("pwm[7].pwm.config", DumpEntry{pwm[7].pwm.config});
        res.insert_or_assign("pwm[7].pwm.config.updateType", DumpEntry{pwm[7].pwm.config.updateType});
        res.insert_or_assign("pwm[7].pwm.config.enablePwmCheck", DumpEntry{pwm[7].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[7].pwm.config.enableStCheck", DumpEntry{pwm[7].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[7].pwm.config.enableValueCheck", DumpEntry{pwm[7].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[7].pwm.config.bypassDeadtime", DumpEntry{pwm[7].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[7].pwm.config.disableA", DumpEntry{pwm[7].pwm.config.disableA});
        res.insert_or_assign("pwm[7].pwm.config.disableB", DumpEntry{pwm[7].pwm.config.disableB});
        res.insert_or_assign("pwm[7].pwm.config.invert", DumpEntry{pwm[7].pwm.config.invert});
        res.insert_or_assign("pwm[7].pwm.config.decoupleCc1", DumpEntry{pwm[7].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[7].pwm.cc0Sc", DumpEntry{pwm[7].pwm.cc0Sc});
        res.insert_or_assign("pwm[7].pwm.cc1Sc", DumpEntry{pwm[7].pwm.cc1Sc});
        res.insert_or_assign("pwm[7].pwm.ctrhSc", DumpEntry{pwm[7].pwm.ctrhSc});
        res.insert_or_assign("pwm[7].pwm.deadtimeSc", DumpEntry{pwm[7].pwm.deadtimeSc});
        res.insert_or_assign("pwm[7].pwm.extendedDeadtimeSc", DumpEntry{pwm[7].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[7].pwm.minSwitchTimeSc", DumpEntry{pwm[7].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[7].pwm.minModIdxSc", DumpEntry{pwm[7].pwm.minModIdxSc});
        res.insert_or_assign("pwm[7].pwm.maxModIdxSc", DumpEntry{pwm[7].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[7].pwm.numberCcErrors", DumpEntry{pwm[7].pwm.numberCcErrors});
        res.insert_or_assign("pwm[8].pwm.ctrl", DumpEntry{pwm[8].pwm.ctrl});
        res.insert_or_assign("pwm[8].pwm.ctrl.enable", DumpEntry{pwm[8].pwm.ctrl.enable});
        res.insert_or_assign("pwm[8].pwm.ctrl.reset", DumpEntry{pwm[8].pwm.ctrl.reset});
        res.insert_or_assign("pwm[8].pwm.carrierBits", DumpEntry{pwm[8].pwm.carrierBits});
        res.insert_or_assign("pwm[8].pwm.deadtimeBits", DumpEntry{pwm[8].pwm.deadtimeBits});
        res.insert_or_assign("pwm[8].pwm.config", DumpEntry{pwm[8].pwm.config});
        res.insert_or_assign("pwm[8].pwm.config.updateType", DumpEntry{pwm[8].pwm.config.updateType});
        res.insert_or_assign("pwm[8].pwm.config.enablePwmCheck", DumpEntry{pwm[8].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[8].pwm.config.enableStCheck", DumpEntry{pwm[8].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[8].pwm.config.enableValueCheck", DumpEntry{pwm[8].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[8].pwm.config.bypassDeadtime", DumpEntry{pwm[8].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[8].pwm.config.disableA", DumpEntry{pwm[8].pwm.config.disableA});
        res.insert_or_assign("pwm[8].pwm.config.disableB", DumpEntry{pwm[8].pwm.config.disableB});
        res.insert_or_assign("pwm[8].pwm.config.invert", DumpEntry{pwm[8].pwm.config.invert});
        res.insert_or_assign("pwm[8].pwm.config.decoupleCc1", DumpEntry{pwm[8].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[8].pwm.cc0Sc", DumpEntry{pwm[8].pwm.cc0Sc});
        res.insert_or_assign("pwm[8].pwm.cc1Sc", DumpEntry{pwm[8].pwm.cc1Sc});
        res.insert_or_assign("pwm[8].pwm.ctrhSc", DumpEntry{pwm[8].pwm.ctrhSc});
        res.insert_or_assign("pwm[8].pwm.deadtimeSc", DumpEntry{pwm[8].pwm.deadtimeSc});
        res.insert_or_assign("pwm[8].pwm.extendedDeadtimeSc", DumpEntry{pwm[8].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[8].pwm.minSwitchTimeSc", DumpEntry{pwm[8].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[8].pwm.minModIdxSc", DumpEntry{pwm[8].pwm.minModIdxSc});
        res.insert_or_assign("pwm[8].pwm.maxModIdxSc", DumpEntry{pwm[8].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[8].pwm.numberCcErrors", DumpEntry{pwm[8].pwm.numberCcErrors});
        res.insert_or_assign("pwm[9].pwm.ctrl", DumpEntry{pwm[9].pwm.ctrl});
        res.insert_or_assign("pwm[9].pwm.ctrl.enable", DumpEntry{pwm[9].pwm.ctrl.enable});
        res.insert_or_assign("pwm[9].pwm.ctrl.reset", DumpEntry{pwm[9].pwm.ctrl.reset});
        res.insert_or_assign("pwm[9].pwm.carrierBits", DumpEntry{pwm[9].pwm.carrierBits});
        res.insert_or_assign("pwm[9].pwm.deadtimeBits", DumpEntry{pwm[9].pwm.deadtimeBits});
        res.insert_or_assign("pwm[9].pwm.config", DumpEntry{pwm[9].pwm.config});
        res.insert_or_assign("pwm[9].pwm.config.updateType", DumpEntry{pwm[9].pwm.config.updateType});
        res.insert_or_assign("pwm[9].pwm.config.enablePwmCheck", DumpEntry{pwm[9].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[9].pwm.config.enableStCheck", DumpEntry{pwm[9].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[9].pwm.config.enableValueCheck", DumpEntry{pwm[9].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[9].pwm.config.bypassDeadtime", DumpEntry{pwm[9].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[9].pwm.config.disableA", DumpEntry{pwm[9].pwm.config.disableA});
        res.insert_or_assign("pwm[9].pwm.config.disableB", DumpEntry{pwm[9].pwm.config.disableB});
        res.insert_or_assign("pwm[9].pwm.config.invert", DumpEntry{pwm[9].pwm.config.invert});
        res.insert_or_assign("pwm[9].pwm.config.decoupleCc1", DumpEntry{pwm[9].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[9].pwm.cc0Sc", DumpEntry{pwm[9].pwm.cc0Sc});
        res.insert_or_assign("pwm[9].pwm.cc1Sc", DumpEntry{pwm[9].pwm.cc1Sc});
        res.insert_or_assign("pwm[9].pwm.ctrhSc", DumpEntry{pwm[9].pwm.ctrhSc});
        res.insert_or_assign("pwm[9].pwm.deadtimeSc", DumpEntry{pwm[9].pwm.deadtimeSc});
        res.insert_or_assign("pwm[9].pwm.extendedDeadtimeSc", DumpEntry{pwm[9].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[9].pwm.minSwitchTimeSc", DumpEntry{pwm[9].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[9].pwm.minModIdxSc", DumpEntry{pwm[9].pwm.minModIdxSc});
        res.insert_or_assign("pwm[9].pwm.maxModIdxSc", DumpEntry{pwm[9].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[9].pwm.numberCcErrors", DumpEntry{pwm[9].pwm.numberCcErrors});
        res.insert_or_assign("pwm[10].pwm.ctrl", DumpEntry{pwm[10].pwm.ctrl});
        res.insert_or_assign("pwm[10].pwm.ctrl.enable", DumpEntry{pwm[10].pwm.ctrl.enable});
        res.insert_or_assign("pwm[10].pwm.ctrl.reset", DumpEntry{pwm[10].pwm.ctrl.reset});
        res.insert_or_assign("pwm[10].pwm.carrierBits", DumpEntry{pwm[10].pwm.carrierBits});
        res.insert_or_assign("pwm[10].pwm.deadtimeBits", DumpEntry{pwm[10].pwm.deadtimeBits});
        res.insert_or_assign("pwm[10].pwm.config", DumpEntry{pwm[10].pwm.config});
        res.insert_or_assign("pwm[10].pwm.config.updateType", DumpEntry{pwm[10].pwm.config.updateType});
        res.insert_or_assign("pwm[10].pwm.config.enablePwmCheck", DumpEntry{pwm[10].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[10].pwm.config.enableStCheck", DumpEntry{pwm[10].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[10].pwm.config.enableValueCheck", DumpEntry{pwm[10].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[10].pwm.config.bypassDeadtime", DumpEntry{pwm[10].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[10].pwm.config.disableA", DumpEntry{pwm[10].pwm.config.disableA});
        res.insert_or_assign("pwm[10].pwm.config.disableB", DumpEntry{pwm[10].pwm.config.disableB});
        res.insert_or_assign("pwm[10].pwm.config.invert", DumpEntry{pwm[10].pwm.config.invert});
        res.insert_or_assign("pwm[10].pwm.config.decoupleCc1", DumpEntry{pwm[10].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[10].pwm.cc0Sc", DumpEntry{pwm[10].pwm.cc0Sc});
        res.insert_or_assign("pwm[10].pwm.cc1Sc", DumpEntry{pwm[10].pwm.cc1Sc});
        res.insert_or_assign("pwm[10].pwm.ctrhSc", DumpEntry{pwm[10].pwm.ctrhSc});
        res.insert_or_assign("pwm[10].pwm.deadtimeSc", DumpEntry{pwm[10].pwm.deadtimeSc});
        res.insert_or_assign("pwm[10].pwm.extendedDeadtimeSc", DumpEntry{pwm[10].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[10].pwm.minSwitchTimeSc", DumpEntry{pwm[10].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[10].pwm.minModIdxSc", DumpEntry{pwm[10].pwm.minModIdxSc});
        res.insert_or_assign("pwm[10].pwm.maxModIdxSc", DumpEntry{pwm[10].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[10].pwm.numberCcErrors", DumpEntry{pwm[10].pwm.numberCcErrors});
        res.insert_or_assign("pwm[11].pwm.ctrl", DumpEntry{pwm[11].pwm.ctrl});
        res.insert_or_assign("pwm[11].pwm.ctrl.enable", DumpEntry{pwm[11].pwm.ctrl.enable});
        res.insert_or_assign("pwm[11].pwm.ctrl.reset", DumpEntry{pwm[11].pwm.ctrl.reset});
        res.insert_or_assign("pwm[11].pwm.carrierBits", DumpEntry{pwm[11].pwm.carrierBits});
        res.insert_or_assign("pwm[11].pwm.deadtimeBits", DumpEntry{pwm[11].pwm.deadtimeBits});
        res.insert_or_assign("pwm[11].pwm.config", DumpEntry{pwm[11].pwm.config});
        res.insert_or_assign("pwm[11].pwm.config.updateType", DumpEntry{pwm[11].pwm.config.updateType});
        res.insert_or_assign("pwm[11].pwm.config.enablePwmCheck", DumpEntry{pwm[11].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[11].pwm.config.enableStCheck", DumpEntry{pwm[11].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[11].pwm.config.enableValueCheck", DumpEntry{pwm[11].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[11].pwm.config.bypassDeadtime", DumpEntry{pwm[11].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[11].pwm.config.disableA", DumpEntry{pwm[11].pwm.config.disableA});
        res.insert_or_assign("pwm[11].pwm.config.disableB", DumpEntry{pwm[11].pwm.config.disableB});
        res.insert_or_assign("pwm[11].pwm.config.invert", DumpEntry{pwm[11].pwm.config.invert});
        res.insert_or_assign("pwm[11].pwm.config.decoupleCc1", DumpEntry{pwm[11].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[11].pwm.cc0Sc", DumpEntry{pwm[11].pwm.cc0Sc});
        res.insert_or_assign("pwm[11].pwm.cc1Sc", DumpEntry{pwm[11].pwm.cc1Sc});
        res.insert_or_assign("pwm[11].pwm.ctrhSc", DumpEntry{pwm[11].pwm.ctrhSc});
        res.insert_or_assign("pwm[11].pwm.deadtimeSc", DumpEntry{pwm[11].pwm.deadtimeSc});
        res.insert_or_assign("pwm[11].pwm.extendedDeadtimeSc", DumpEntry{pwm[11].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[11].pwm.minSwitchTimeSc", DumpEntry{pwm[11].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[11].pwm.minModIdxSc", DumpEntry{pwm[11].pwm.minModIdxSc});
        res.insert_or_assign("pwm[11].pwm.maxModIdxSc", DumpEntry{pwm[11].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[11].pwm.numberCcErrors", DumpEntry{pwm[11].pwm.numberCcErrors});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Ddma::TdPl2psArray`
    //!
    //! @param tdPl2ps A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under tdPl2ps
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Ddma::TdPl2psArray& tdPl2ps)
    {
        DumpMap res{tdPl2ps.base()};
        res.insert_or_assign("tdPl2ps[0].srcAddr", DumpEntry{tdPl2ps[0].srcAddr});
        res.insert_or_assign("tdPl2ps[0].destAddr", DumpEntry{tdPl2ps[0].destAddr});
        res.insert_or_assign("tdPl2ps[0].wtt", DumpEntry{tdPl2ps[0].wtt});
        res.insert_or_assign("tdPl2ps[0].wtt.value", DumpEntry{tdPl2ps[0].wtt.value});
        res.insert_or_assign("tdPl2ps[1].srcAddr", DumpEntry{tdPl2ps[1].srcAddr});
        res.insert_or_assign("tdPl2ps[1].destAddr", DumpEntry{tdPl2ps[1].destAddr});
        res.insert_or_assign("tdPl2ps[1].wtt", DumpEntry{tdPl2ps[1].wtt});
        res.insert_or_assign("tdPl2ps[1].wtt.value", DumpEntry{tdPl2ps[1].wtt.value});
        res.insert_or_assign("tdPl2ps[2].srcAddr", DumpEntry{tdPl2ps[2].srcAddr});
        res.insert_or_assign("tdPl2ps[2].destAddr", DumpEntry{tdPl2ps[2].destAddr});
        res.insert_or_assign("tdPl2ps[2].wtt", DumpEntry{tdPl2ps[2].wtt});
        res.insert_or_assign("tdPl2ps[2].wtt.value", DumpEntry{tdPl2ps[2].wtt.value});
        res.insert_or_assign("tdPl2ps[3].srcAddr", DumpEntry{tdPl2ps[3].srcAddr});
        res.insert_or_assign("tdPl2ps[3].destAddr", DumpEntry{tdPl2ps[3].destAddr});
        res.insert_or_assign("tdPl2ps[3].wtt", DumpEntry{tdPl2ps[3].wtt});
        res.insert_or_assign("tdPl2ps[3].wtt.value", DumpEntry{tdPl2ps[3].wtt.value});
        res.insert_or_assign("tdPl2ps[4].srcAddr", DumpEntry{tdPl2ps[4].srcAddr});
        res.insert_or_assign("tdPl2ps[4].destAddr", DumpEntry{tdPl2ps[4].destAddr});
        res.insert_or_assign("tdPl2ps[4].wtt", DumpEntry{tdPl2ps[4].wtt});
        res.insert_or_assign("tdPl2ps[4].wtt.value", DumpEntry{tdPl2ps[4].wtt.value});
        res.insert_or_assign("tdPl2ps[5].srcAddr", DumpEntry{tdPl2ps[5].srcAddr});
        res.insert_or_assign("tdPl2ps[5].destAddr", DumpEntry{tdPl2ps[5].destAddr});
        res.insert_or_assign("tdPl2ps[5].wtt", DumpEntry{tdPl2ps[5].wtt});
        res.insert_or_assign("tdPl2ps[5].wtt.value", DumpEntry{tdPl2ps[5].wtt.value});
        res.insert_or_assign("tdPl2ps[6].srcAddr", DumpEntry{tdPl2ps[6].srcAddr});
        res.insert_or_assign("tdPl2ps[6].destAddr", DumpEntry{tdPl2ps[6].destAddr});
        res.insert_or_assign("tdPl2ps[6].wtt", DumpEntry{tdPl2ps[6].wtt});
        res.insert_or_assign("tdPl2ps[6].wtt.value", DumpEntry{tdPl2ps[6].wtt.value});
        res.insert_or_assign("tdPl2ps[7].srcAddr", DumpEntry{tdPl2ps[7].srcAddr});
        res.insert_or_assign("tdPl2ps[7].destAddr", DumpEntry{tdPl2ps[7].destAddr});
        res.insert_or_assign("tdPl2ps[7].wtt", DumpEntry{tdPl2ps[7].wtt});
        res.insert_or_assign("tdPl2ps[7].wtt.value", DumpEntry{tdPl2ps[7].wtt.value});
        res.insert_or_assign("tdPl2ps[8].srcAddr", DumpEntry{tdPl2ps[8].srcAddr});
        res.insert_or_assign("tdPl2ps[8].destAddr", DumpEntry{tdPl2ps[8].destAddr});
        res.insert_or_assign("tdPl2ps[8].wtt", DumpEntry{tdPl2ps[8].wtt});
        res.insert_or_assign("tdPl2ps[8].wtt.value", DumpEntry{tdPl2ps[8].wtt.value});
        res.insert_or_assign("tdPl2ps[9].srcAddr", DumpEntry{tdPl2ps[9].srcAddr});
        res.insert_or_assign("tdPl2ps[9].destAddr", DumpEntry{tdPl2ps[9].destAddr});
        res.insert_or_assign("tdPl2ps[9].wtt", DumpEntry{tdPl2ps[9].wtt});
        res.insert_or_assign("tdPl2ps[9].wtt.value", DumpEntry{tdPl2ps[9].wtt.value});
        res.insert_or_assign("tdPl2ps[10].srcAddr", DumpEntry{tdPl2ps[10].srcAddr});
        res.insert_or_assign("tdPl2ps[10].destAddr", DumpEntry{tdPl2ps[10].destAddr});
        res.insert_or_assign("tdPl2ps[10].wtt", DumpEntry{tdPl2ps[10].wtt});
        res.insert_or_assign("tdPl2ps[10].wtt.value", DumpEntry{tdPl2ps[10].wtt.value});
        res.insert_or_assign("tdPl2ps[11].srcAddr", DumpEntry{tdPl2ps[11].srcAddr});
        res.insert_or_assign("tdPl2ps[11].destAddr", DumpEntry{tdPl2ps[11].destAddr});
        res.insert_or_assign("tdPl2ps[11].wtt", DumpEntry{tdPl2ps[11].wtt});
        res.insert_or_assign("tdPl2ps[11].wtt.value", DumpEntry{tdPl2ps[11].wtt.value});
        res.insert_or_assign("tdPl2ps[12].srcAddr", DumpEntry{tdPl2ps[12].srcAddr});
        res.insert_or_assign("tdPl2ps[12].destAddr", DumpEntry{tdPl2ps[12].destAddr});
        res.insert_or_assign("tdPl2ps[12].wtt", DumpEntry{tdPl2ps[12].wtt});
        res.insert_or_assign("tdPl2ps[12].wtt.value", DumpEntry{tdPl2ps[12].wtt.value});
        res.insert_or_assign("tdPl2ps[13].srcAddr", DumpEntry{tdPl2ps[13].srcAddr});
        res.insert_or_assign("tdPl2ps[13].destAddr", DumpEntry{tdPl2ps[13].destAddr});
        res.insert_or_assign("tdPl2ps[13].wtt", DumpEntry{tdPl2ps[13].wtt});
        res.insert_or_assign("tdPl2ps[13].wtt.value", DumpEntry{tdPl2ps[13].wtt.value});
        res.insert_or_assign("tdPl2ps[14].srcAddr", DumpEntry{tdPl2ps[14].srcAddr});
        res.insert_or_assign("tdPl2ps[14].destAddr", DumpEntry{tdPl2ps[14].destAddr});
        res.insert_or_assign("tdPl2ps[14].wtt", DumpEntry{tdPl2ps[14].wtt});
        res.insert_or_assign("tdPl2ps[14].wtt.value", DumpEntry{tdPl2ps[14].wtt.value});
        res.insert_or_assign("tdPl2ps[15].srcAddr", DumpEntry{tdPl2ps[15].srcAddr});
        res.insert_or_assign("tdPl2ps[15].destAddr", DumpEntry{tdPl2ps[15].destAddr});
        res.insert_or_assign("tdPl2ps[15].wtt", DumpEntry{tdPl2ps[15].wtt});
        res.insert_or_assign("tdPl2ps[15].wtt.value", DumpEntry{tdPl2ps[15].wtt.value});
        res.insert_or_assign("tdPl2ps[16].srcAddr", DumpEntry{tdPl2ps[16].srcAddr});
        res.insert_or_assign("tdPl2ps[16].destAddr", DumpEntry{tdPl2ps[16].destAddr});
        res.insert_or_assign("tdPl2ps[16].wtt", DumpEntry{tdPl2ps[16].wtt});
        res.insert_or_assign("tdPl2ps[16].wtt.value", DumpEntry{tdPl2ps[16].wtt.value});
        res.insert_or_assign("tdPl2ps[17].srcAddr", DumpEntry{tdPl2ps[17].srcAddr});
        res.insert_or_assign("tdPl2ps[17].destAddr", DumpEntry{tdPl2ps[17].destAddr});
        res.insert_or_assign("tdPl2ps[17].wtt", DumpEntry{tdPl2ps[17].wtt});
        res.insert_or_assign("tdPl2ps[17].wtt.value", DumpEntry{tdPl2ps[17].wtt.value});
        res.insert_or_assign("tdPl2ps[18].srcAddr", DumpEntry{tdPl2ps[18].srcAddr});
        res.insert_or_assign("tdPl2ps[18].destAddr", DumpEntry{tdPl2ps[18].destAddr});
        res.insert_or_assign("tdPl2ps[18].wtt", DumpEntry{tdPl2ps[18].wtt});
        res.insert_or_assign("tdPl2ps[18].wtt.value", DumpEntry{tdPl2ps[18].wtt.value});
        res.insert_or_assign("tdPl2ps[19].srcAddr", DumpEntry{tdPl2ps[19].srcAddr});
        res.insert_or_assign("tdPl2ps[19].destAddr", DumpEntry{tdPl2ps[19].destAddr});
        res.insert_or_assign("tdPl2ps[19].wtt", DumpEntry{tdPl2ps[19].wtt});
        res.insert_or_assign("tdPl2ps[19].wtt.value", DumpEntry{tdPl2ps[19].wtt.value});
        res.insert_or_assign("tdPl2ps[20].srcAddr", DumpEntry{tdPl2ps[20].srcAddr});
        res.insert_or_assign("tdPl2ps[20].destAddr", DumpEntry{tdPl2ps[20].destAddr});
        res.insert_or_assign("tdPl2ps[20].wtt", DumpEntry{tdPl2ps[20].wtt});
        res.insert_or_assign("tdPl2ps[20].wtt.value", DumpEntry{tdPl2ps[20].wtt.value});
        res.insert_or_assign("tdPl2ps[21].srcAddr", DumpEntry{tdPl2ps[21].srcAddr});
        res.insert_or_assign("tdPl2ps[21].destAddr", DumpEntry{tdPl2ps[21].destAddr});
        res.insert_or_assign("tdPl2ps[21].wtt", DumpEntry{tdPl2ps[21].wtt});
        res.insert_or_assign("tdPl2ps[21].wtt.value", DumpEntry{tdPl2ps[21].wtt.value});
        res.insert_or_assign("tdPl2ps[22].srcAddr", DumpEntry{tdPl2ps[22].srcAddr});
        res.insert_or_assign("tdPl2ps[22].destAddr", DumpEntry{tdPl2ps[22].destAddr});
        res.insert_or_assign("tdPl2ps[22].wtt", DumpEntry{tdPl2ps[22].wtt});
        res.insert_or_assign("tdPl2ps[22].wtt.value", DumpEntry{tdPl2ps[22].wtt.value});
        res.insert_or_assign("tdPl2ps[23].srcAddr", DumpEntry{tdPl2ps[23].srcAddr});
        res.insert_or_assign("tdPl2ps[23].destAddr", DumpEntry{tdPl2ps[23].destAddr});
        res.insert_or_assign("tdPl2ps[23].wtt", DumpEntry{tdPl2ps[23].wtt});
        res.insert_or_assign("tdPl2ps[23].wtt.value", DumpEntry{tdPl2ps[23].wtt.value});
        res.insert_or_assign("tdPl2ps[24].srcAddr", DumpEntry{tdPl2ps[24].srcAddr});
        res.insert_or_assign("tdPl2ps[24].destAddr", DumpEntry{tdPl2ps[24].destAddr});
        res.insert_or_assign("tdPl2ps[24].wtt", DumpEntry{tdPl2ps[24].wtt});
        res.insert_or_assign("tdPl2ps[24].wtt.value", DumpEntry{tdPl2ps[24].wtt.value});
        res.insert_or_assign("tdPl2ps[25].srcAddr", DumpEntry{tdPl2ps[25].srcAddr});
        res.insert_or_assign("tdPl2ps[25].destAddr", DumpEntry{tdPl2ps[25].destAddr});
        res.insert_or_assign("tdPl2ps[25].wtt", DumpEntry{tdPl2ps[25].wtt});
        res.insert_or_assign("tdPl2ps[25].wtt.value", DumpEntry{tdPl2ps[25].wtt.value});
        res.insert_or_assign("tdPl2ps[26].srcAddr", DumpEntry{tdPl2ps[26].srcAddr});
        res.insert_or_assign("tdPl2ps[26].destAddr", DumpEntry{tdPl2ps[26].destAddr});
        res.insert_or_assign("tdPl2ps[26].wtt", DumpEntry{tdPl2ps[26].wtt});
        res.insert_or_assign("tdPl2ps[26].wtt.value", DumpEntry{tdPl2ps[26].wtt.value});
        res.insert_or_assign("tdPl2ps[27].srcAddr", DumpEntry{tdPl2ps[27].srcAddr});
        res.insert_or_assign("tdPl2ps[27].destAddr", DumpEntry{tdPl2ps[27].destAddr});
        res.insert_or_assign("tdPl2ps[27].wtt", DumpEntry{tdPl2ps[27].wtt});
        res.insert_or_assign("tdPl2ps[27].wtt.value", DumpEntry{tdPl2ps[27].wtt.value});
        res.insert_or_assign("tdPl2ps[28].srcAddr", DumpEntry{tdPl2ps[28].srcAddr});
        res.insert_or_assign("tdPl2ps[28].destAddr", DumpEntry{tdPl2ps[28].destAddr});
        res.insert_or_assign("tdPl2ps[28].wtt", DumpEntry{tdPl2ps[28].wtt});
        res.insert_or_assign("tdPl2ps[28].wtt.value", DumpEntry{tdPl2ps[28].wtt.value});
        res.insert_or_assign("tdPl2ps[29].srcAddr", DumpEntry{tdPl2ps[29].srcAddr});
        res.insert_or_assign("tdPl2ps[29].destAddr", DumpEntry{tdPl2ps[29].destAddr});
        res.insert_or_assign("tdPl2ps[29].wtt", DumpEntry{tdPl2ps[29].wtt});
        res.insert_or_assign("tdPl2ps[29].wtt.value", DumpEntry{tdPl2ps[29].wtt.value});
        res.insert_or_assign("tdPl2ps[30].srcAddr", DumpEntry{tdPl2ps[30].srcAddr});
        res.insert_or_assign("tdPl2ps[30].destAddr", DumpEntry{tdPl2ps[30].destAddr});
        res.insert_or_assign("tdPl2ps[30].wtt", DumpEntry{tdPl2ps[30].wtt});
        res.insert_or_assign("tdPl2ps[30].wtt.value", DumpEntry{tdPl2ps[30].wtt.value});
        res.insert_or_assign("tdPl2ps[31].srcAddr", DumpEntry{tdPl2ps[31].srcAddr});
        res.insert_or_assign("tdPl2ps[31].destAddr", DumpEntry{tdPl2ps[31].destAddr});
        res.insert_or_assign("tdPl2ps[31].wtt", DumpEntry{tdPl2ps[31].wtt});
        res.insert_or_assign("tdPl2ps[31].wtt.value", DumpEntry{tdPl2ps[31].wtt.value});
        res.insert_or_assign("tdPl2ps[32].srcAddr", DumpEntry{tdPl2ps[32].srcAddr});
        res.insert_or_assign("tdPl2ps[32].destAddr", DumpEntry{tdPl2ps[32].destAddr});
        res.insert_or_assign("tdPl2ps[32].wtt", DumpEntry{tdPl2ps[32].wtt});
        res.insert_or_assign("tdPl2ps[32].wtt.value", DumpEntry{tdPl2ps[32].wtt.value});
        res.insert_or_assign("tdPl2ps[33].srcAddr", DumpEntry{tdPl2ps[33].srcAddr});
        res.insert_or_assign("tdPl2ps[33].destAddr", DumpEntry{tdPl2ps[33].destAddr});
        res.insert_or_assign("tdPl2ps[33].wtt", DumpEntry{tdPl2ps[33].wtt});
        res.insert_or_assign("tdPl2ps[33].wtt.value", DumpEntry{tdPl2ps[33].wtt.value});
        res.insert_or_assign("tdPl2ps[34].srcAddr", DumpEntry{tdPl2ps[34].srcAddr});
        res.insert_or_assign("tdPl2ps[34].destAddr", DumpEntry{tdPl2ps[34].destAddr});
        res.insert_or_assign("tdPl2ps[34].wtt", DumpEntry{tdPl2ps[34].wtt});
        res.insert_or_assign("tdPl2ps[34].wtt.value", DumpEntry{tdPl2ps[34].wtt.value});
        res.insert_or_assign("tdPl2ps[35].srcAddr", DumpEntry{tdPl2ps[35].srcAddr});
        res.insert_or_assign("tdPl2ps[35].destAddr", DumpEntry{tdPl2ps[35].destAddr});
        res.insert_or_assign("tdPl2ps[35].wtt", DumpEntry{tdPl2ps[35].wtt});
        res.insert_or_assign("tdPl2ps[35].wtt.value", DumpEntry{tdPl2ps[35].wtt.value});
        res.insert_or_assign("tdPl2ps[36].srcAddr", DumpEntry{tdPl2ps[36].srcAddr});
        res.insert_or_assign("tdPl2ps[36].destAddr", DumpEntry{tdPl2ps[36].destAddr});
        res.insert_or_assign("tdPl2ps[36].wtt", DumpEntry{tdPl2ps[36].wtt});
        res.insert_or_assign("tdPl2ps[36].wtt.value", DumpEntry{tdPl2ps[36].wtt.value});
        res.insert_or_assign("tdPl2ps[37].srcAddr", DumpEntry{tdPl2ps[37].srcAddr});
        res.insert_or_assign("tdPl2ps[37].destAddr", DumpEntry{tdPl2ps[37].destAddr});
        res.insert_or_assign("tdPl2ps[37].wtt", DumpEntry{tdPl2ps[37].wtt});
        res.insert_or_assign("tdPl2ps[37].wtt.value", DumpEntry{tdPl2ps[37].wtt.value});
        res.insert_or_assign("tdPl2ps[38].srcAddr", DumpEntry{tdPl2ps[38].srcAddr});
        res.insert_or_assign("tdPl2ps[38].destAddr", DumpEntry{tdPl2ps[38].destAddr});
        res.insert_or_assign("tdPl2ps[38].wtt", DumpEntry{tdPl2ps[38].wtt});
        res.insert_or_assign("tdPl2ps[38].wtt.value", DumpEntry{tdPl2ps[38].wtt.value});
        res.insert_or_assign("tdPl2ps[39].srcAddr", DumpEntry{tdPl2ps[39].srcAddr});
        res.insert_or_assign("tdPl2ps[39].destAddr", DumpEntry{tdPl2ps[39].destAddr});
        res.insert_or_assign("tdPl2ps[39].wtt", DumpEntry{tdPl2ps[39].wtt});
        res.insert_or_assign("tdPl2ps[39].wtt.value", DumpEntry{tdPl2ps[39].wtt.value});
        res.insert_or_assign("tdPl2ps[40].srcAddr", DumpEntry{tdPl2ps[40].srcAddr});
        res.insert_or_assign("tdPl2ps[40].destAddr", DumpEntry{tdPl2ps[40].destAddr});
        res.insert_or_assign("tdPl2ps[40].wtt", DumpEntry{tdPl2ps[40].wtt});
        res.insert_or_assign("tdPl2ps[40].wtt.value", DumpEntry{tdPl2ps[40].wtt.value});
        res.insert_or_assign("tdPl2ps[41].srcAddr", DumpEntry{tdPl2ps[41].srcAddr});
        res.insert_or_assign("tdPl2ps[41].destAddr", DumpEntry{tdPl2ps[41].destAddr});
        res.insert_or_assign("tdPl2ps[41].wtt", DumpEntry{tdPl2ps[41].wtt});
        res.insert_or_assign("tdPl2ps[41].wtt.value", DumpEntry{tdPl2ps[41].wtt.value});
        res.insert_or_assign("tdPl2ps[42].srcAddr", DumpEntry{tdPl2ps[42].srcAddr});
        res.insert_or_assign("tdPl2ps[42].destAddr", DumpEntry{tdPl2ps[42].destAddr});
        res.insert_or_assign("tdPl2ps[42].wtt", DumpEntry{tdPl2ps[42].wtt});
        res.insert_or_assign("tdPl2ps[42].wtt.value", DumpEntry{tdPl2ps[42].wtt.value});
        res.insert_or_assign("tdPl2ps[43].srcAddr", DumpEntry{tdPl2ps[43].srcAddr});
        res.insert_or_assign("tdPl2ps[43].destAddr", DumpEntry{tdPl2ps[43].destAddr});
        res.insert_or_assign("tdPl2ps[43].wtt", DumpEntry{tdPl2ps[43].wtt});
        res.insert_or_assign("tdPl2ps[43].wtt.value", DumpEntry{tdPl2ps[43].wtt.value});
        res.insert_or_assign("tdPl2ps[44].srcAddr", DumpEntry{tdPl2ps[44].srcAddr});
        res.insert_or_assign("tdPl2ps[44].destAddr", DumpEntry{tdPl2ps[44].destAddr});
        res.insert_or_assign("tdPl2ps[44].wtt", DumpEntry{tdPl2ps[44].wtt});
        res.insert_or_assign("tdPl2ps[44].wtt.value", DumpEntry{tdPl2ps[44].wtt.value});
        res.insert_or_assign("tdPl2ps[45].srcAddr", DumpEntry{tdPl2ps[45].srcAddr});
        res.insert_or_assign("tdPl2ps[45].destAddr", DumpEntry{tdPl2ps[45].destAddr});
        res.insert_or_assign("tdPl2ps[45].wtt", DumpEntry{tdPl2ps[45].wtt});
        res.insert_or_assign("tdPl2ps[45].wtt.value", DumpEntry{tdPl2ps[45].wtt.value});
        res.insert_or_assign("tdPl2ps[46].srcAddr", DumpEntry{tdPl2ps[46].srcAddr});
        res.insert_or_assign("tdPl2ps[46].destAddr", DumpEntry{tdPl2ps[46].destAddr});
        res.insert_or_assign("tdPl2ps[46].wtt", DumpEntry{tdPl2ps[46].wtt});
        res.insert_or_assign("tdPl2ps[46].wtt.value", DumpEntry{tdPl2ps[46].wtt.value});
        res.insert_or_assign("tdPl2ps[47].srcAddr", DumpEntry{tdPl2ps[47].srcAddr});
        res.insert_or_assign("tdPl2ps[47].destAddr", DumpEntry{tdPl2ps[47].destAddr});
        res.insert_or_assign("tdPl2ps[47].wtt", DumpEntry{tdPl2ps[47].wtt});
        res.insert_or_assign("tdPl2ps[47].wtt.value", DumpEntry{tdPl2ps[47].wtt.value});
        res.insert_or_assign("tdPl2ps[48].srcAddr", DumpEntry{tdPl2ps[48].srcAddr});
        res.insert_or_assign("tdPl2ps[48].destAddr", DumpEntry{tdPl2ps[48].destAddr});
        res.insert_or_assign("tdPl2ps[48].wtt", DumpEntry{tdPl2ps[48].wtt});
        res.insert_or_assign("tdPl2ps[48].wtt.value", DumpEntry{tdPl2ps[48].wtt.value});
        res.insert_or_assign("tdPl2ps[49].srcAddr", DumpEntry{tdPl2ps[49].srcAddr});
        res.insert_or_assign("tdPl2ps[49].destAddr", DumpEntry{tdPl2ps[49].destAddr});
        res.insert_or_assign("tdPl2ps[49].wtt", DumpEntry{tdPl2ps[49].wtt});
        res.insert_or_assign("tdPl2ps[49].wtt.value", DumpEntry{tdPl2ps[49].wtt.value});
        res.insert_or_assign("tdPl2ps[50].srcAddr", DumpEntry{tdPl2ps[50].srcAddr});
        res.insert_or_assign("tdPl2ps[50].destAddr", DumpEntry{tdPl2ps[50].destAddr});
        res.insert_or_assign("tdPl2ps[50].wtt", DumpEntry{tdPl2ps[50].wtt});
        res.insert_or_assign("tdPl2ps[50].wtt.value", DumpEntry{tdPl2ps[50].wtt.value});
        res.insert_or_assign("tdPl2ps[51].srcAddr", DumpEntry{tdPl2ps[51].srcAddr});
        res.insert_or_assign("tdPl2ps[51].destAddr", DumpEntry{tdPl2ps[51].destAddr});
        res.insert_or_assign("tdPl2ps[51].wtt", DumpEntry{tdPl2ps[51].wtt});
        res.insert_or_assign("tdPl2ps[51].wtt.value", DumpEntry{tdPl2ps[51].wtt.value});
        res.insert_or_assign("tdPl2ps[52].srcAddr", DumpEntry{tdPl2ps[52].srcAddr});
        res.insert_or_assign("tdPl2ps[52].destAddr", DumpEntry{tdPl2ps[52].destAddr});
        res.insert_or_assign("tdPl2ps[52].wtt", DumpEntry{tdPl2ps[52].wtt});
        res.insert_or_assign("tdPl2ps[52].wtt.value", DumpEntry{tdPl2ps[52].wtt.value});
        res.insert_or_assign("tdPl2ps[53].srcAddr", DumpEntry{tdPl2ps[53].srcAddr});
        res.insert_or_assign("tdPl2ps[53].destAddr", DumpEntry{tdPl2ps[53].destAddr});
        res.insert_or_assign("tdPl2ps[53].wtt", DumpEntry{tdPl2ps[53].wtt});
        res.insert_or_assign("tdPl2ps[53].wtt.value", DumpEntry{tdPl2ps[53].wtt.value});
        res.insert_or_assign("tdPl2ps[54].srcAddr", DumpEntry{tdPl2ps[54].srcAddr});
        res.insert_or_assign("tdPl2ps[54].destAddr", DumpEntry{tdPl2ps[54].destAddr});
        res.insert_or_assign("tdPl2ps[54].wtt", DumpEntry{tdPl2ps[54].wtt});
        res.insert_or_assign("tdPl2ps[54].wtt.value", DumpEntry{tdPl2ps[54].wtt.value});
        res.insert_or_assign("tdPl2ps[55].srcAddr", DumpEntry{tdPl2ps[55].srcAddr});
        res.insert_or_assign("tdPl2ps[55].destAddr", DumpEntry{tdPl2ps[55].destAddr});
        res.insert_or_assign("tdPl2ps[55].wtt", DumpEntry{tdPl2ps[55].wtt});
        res.insert_or_assign("tdPl2ps[55].wtt.value", DumpEntry{tdPl2ps[55].wtt.value});
        res.insert_or_assign("tdPl2ps[56].srcAddr", DumpEntry{tdPl2ps[56].srcAddr});
        res.insert_or_assign("tdPl2ps[56].destAddr", DumpEntry{tdPl2ps[56].destAddr});
        res.insert_or_assign("tdPl2ps[56].wtt", DumpEntry{tdPl2ps[56].wtt});
        res.insert_or_assign("tdPl2ps[56].wtt.value", DumpEntry{tdPl2ps[56].wtt.value});
        res.insert_or_assign("tdPl2ps[57].srcAddr", DumpEntry{tdPl2ps[57].srcAddr});
        res.insert_or_assign("tdPl2ps[57].destAddr", DumpEntry{tdPl2ps[57].destAddr});
        res.insert_or_assign("tdPl2ps[57].wtt", DumpEntry{tdPl2ps[57].wtt});
        res.insert_or_assign("tdPl2ps[57].wtt.value", DumpEntry{tdPl2ps[57].wtt.value});
        res.insert_or_assign("tdPl2ps[58].srcAddr", DumpEntry{tdPl2ps[58].srcAddr});
        res.insert_or_assign("tdPl2ps[58].destAddr", DumpEntry{tdPl2ps[58].destAddr});
        res.insert_or_assign("tdPl2ps[58].wtt", DumpEntry{tdPl2ps[58].wtt});
        res.insert_or_assign("tdPl2ps[58].wtt.value", DumpEntry{tdPl2ps[58].wtt.value});
        res.insert_or_assign("tdPl2ps[59].srcAddr", DumpEntry{tdPl2ps[59].srcAddr});
        res.insert_or_assign("tdPl2ps[59].destAddr", DumpEntry{tdPl2ps[59].destAddr});
        res.insert_or_assign("tdPl2ps[59].wtt", DumpEntry{tdPl2ps[59].wtt});
        res.insert_or_assign("tdPl2ps[59].wtt.value", DumpEntry{tdPl2ps[59].wtt.value});
        res.insert_or_assign("tdPl2ps[60].srcAddr", DumpEntry{tdPl2ps[60].srcAddr});
        res.insert_or_assign("tdPl2ps[60].destAddr", DumpEntry{tdPl2ps[60].destAddr});
        res.insert_or_assign("tdPl2ps[60].wtt", DumpEntry{tdPl2ps[60].wtt});
        res.insert_or_assign("tdPl2ps[60].wtt.value", DumpEntry{tdPl2ps[60].wtt.value});
        res.insert_or_assign("tdPl2ps[61].srcAddr", DumpEntry{tdPl2ps[61].srcAddr});
        res.insert_or_assign("tdPl2ps[61].destAddr", DumpEntry{tdPl2ps[61].destAddr});
        res.insert_or_assign("tdPl2ps[61].wtt", DumpEntry{tdPl2ps[61].wtt});
        res.insert_or_assign("tdPl2ps[61].wtt.value", DumpEntry{tdPl2ps[61].wtt.value});
        res.insert_or_assign("tdPl2ps[62].srcAddr", DumpEntry{tdPl2ps[62].srcAddr});
        res.insert_or_assign("tdPl2ps[62].destAddr", DumpEntry{tdPl2ps[62].destAddr});
        res.insert_or_assign("tdPl2ps[62].wtt", DumpEntry{tdPl2ps[62].wtt});
        res.insert_or_assign("tdPl2ps[62].wtt.value", DumpEntry{tdPl2ps[62].wtt.value});
        res.insert_or_assign("tdPl2ps[63].srcAddr", DumpEntry{tdPl2ps[63].srcAddr});
        res.insert_or_assign("tdPl2ps[63].destAddr", DumpEntry{tdPl2ps[63].destAddr});
        res.insert_or_assign("tdPl2ps[63].wtt", DumpEntry{tdPl2ps[63].wtt});
        res.insert_or_assign("tdPl2ps[63].wtt.value", DumpEntry{tdPl2ps[63].wtt.value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Ddma::TdPs2plArray`
    //!
    //! @param tdPs2pl A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under tdPs2pl
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Ddma::TdPs2plArray& tdPs2pl)
    {
        DumpMap res{tdPs2pl.base()};
        res.insert_or_assign("tdPs2pl[0].srcAddr", DumpEntry{tdPs2pl[0].srcAddr});
        res.insert_or_assign("tdPs2pl[0].destAddr", DumpEntry{tdPs2pl[0].destAddr});
        res.insert_or_assign("tdPs2pl[0].wtt", DumpEntry{tdPs2pl[0].wtt});
        res.insert_or_assign("tdPs2pl[0].wtt.value", DumpEntry{tdPs2pl[0].wtt.value});
        res.insert_or_assign("tdPs2pl[1].srcAddr", DumpEntry{tdPs2pl[1].srcAddr});
        res.insert_or_assign("tdPs2pl[1].destAddr", DumpEntry{tdPs2pl[1].destAddr});
        res.insert_or_assign("tdPs2pl[1].wtt", DumpEntry{tdPs2pl[1].wtt});
        res.insert_or_assign("tdPs2pl[1].wtt.value", DumpEntry{tdPs2pl[1].wtt.value});
        res.insert_or_assign("tdPs2pl[2].srcAddr", DumpEntry{tdPs2pl[2].srcAddr});
        res.insert_or_assign("tdPs2pl[2].destAddr", DumpEntry{tdPs2pl[2].destAddr});
        res.insert_or_assign("tdPs2pl[2].wtt", DumpEntry{tdPs2pl[2].wtt});
        res.insert_or_assign("tdPs2pl[2].wtt.value", DumpEntry{tdPs2pl[2].wtt.value});
        res.insert_or_assign("tdPs2pl[3].srcAddr", DumpEntry{tdPs2pl[3].srcAddr});
        res.insert_or_assign("tdPs2pl[3].destAddr", DumpEntry{tdPs2pl[3].destAddr});
        res.insert_or_assign("tdPs2pl[3].wtt", DumpEntry{tdPs2pl[3].wtt});
        res.insert_or_assign("tdPs2pl[3].wtt.value", DumpEntry{tdPs2pl[3].wtt.value});
        res.insert_or_assign("tdPs2pl[4].srcAddr", DumpEntry{tdPs2pl[4].srcAddr});
        res.insert_or_assign("tdPs2pl[4].destAddr", DumpEntry{tdPs2pl[4].destAddr});
        res.insert_or_assign("tdPs2pl[4].wtt", DumpEntry{tdPs2pl[4].wtt});
        res.insert_or_assign("tdPs2pl[4].wtt.value", DumpEntry{tdPs2pl[4].wtt.value});
        res.insert_or_assign("tdPs2pl[5].srcAddr", DumpEntry{tdPs2pl[5].srcAddr});
        res.insert_or_assign("tdPs2pl[5].destAddr", DumpEntry{tdPs2pl[5].destAddr});
        res.insert_or_assign("tdPs2pl[5].wtt", DumpEntry{tdPs2pl[5].wtt});
        res.insert_or_assign("tdPs2pl[5].wtt.value", DumpEntry{tdPs2pl[5].wtt.value});
        res.insert_or_assign("tdPs2pl[6].srcAddr", DumpEntry{tdPs2pl[6].srcAddr});
        res.insert_or_assign("tdPs2pl[6].destAddr", DumpEntry{tdPs2pl[6].destAddr});
        res.insert_or_assign("tdPs2pl[6].wtt", DumpEntry{tdPs2pl[6].wtt});
        res.insert_or_assign("tdPs2pl[6].wtt.value", DumpEntry{tdPs2pl[6].wtt.value});
        res.insert_or_assign("tdPs2pl[7].srcAddr", DumpEntry{tdPs2pl[7].srcAddr});
        res.insert_or_assign("tdPs2pl[7].destAddr", DumpEntry{tdPs2pl[7].destAddr});
        res.insert_or_assign("tdPs2pl[7].wtt", DumpEntry{tdPs2pl[7].wtt});
        res.insert_or_assign("tdPs2pl[7].wtt.value", DumpEntry{tdPs2pl[7].wtt.value});
        res.insert_or_assign("tdPs2pl[8].srcAddr", DumpEntry{tdPs2pl[8].srcAddr});
        res.insert_or_assign("tdPs2pl[8].destAddr", DumpEntry{tdPs2pl[8].destAddr});
        res.insert_or_assign("tdPs2pl[8].wtt", DumpEntry{tdPs2pl[8].wtt});
        res.insert_or_assign("tdPs2pl[8].wtt.value", DumpEntry{tdPs2pl[8].wtt.value});
        res.insert_or_assign("tdPs2pl[9].srcAddr", DumpEntry{tdPs2pl[9].srcAddr});
        res.insert_or_assign("tdPs2pl[9].destAddr", DumpEntry{tdPs2pl[9].destAddr});
        res.insert_or_assign("tdPs2pl[9].wtt", DumpEntry{tdPs2pl[9].wtt});
        res.insert_or_assign("tdPs2pl[9].wtt.value", DumpEntry{tdPs2pl[9].wtt.value});
        res.insert_or_assign("tdPs2pl[10].srcAddr", DumpEntry{tdPs2pl[10].srcAddr});
        res.insert_or_assign("tdPs2pl[10].destAddr", DumpEntry{tdPs2pl[10].destAddr});
        res.insert_or_assign("tdPs2pl[10].wtt", DumpEntry{tdPs2pl[10].wtt});
        res.insert_or_assign("tdPs2pl[10].wtt.value", DumpEntry{tdPs2pl[10].wtt.value});
        res.insert_or_assign("tdPs2pl[11].srcAddr", DumpEntry{tdPs2pl[11].srcAddr});
        res.insert_or_assign("tdPs2pl[11].destAddr", DumpEntry{tdPs2pl[11].destAddr});
        res.insert_or_assign("tdPs2pl[11].wtt", DumpEntry{tdPs2pl[11].wtt});
        res.insert_or_assign("tdPs2pl[11].wtt.value", DumpEntry{tdPs2pl[11].wtt.value});
        res.insert_or_assign("tdPs2pl[12].srcAddr", DumpEntry{tdPs2pl[12].srcAddr});
        res.insert_or_assign("tdPs2pl[12].destAddr", DumpEntry{tdPs2pl[12].destAddr});
        res.insert_or_assign("tdPs2pl[12].wtt", DumpEntry{tdPs2pl[12].wtt});
        res.insert_or_assign("tdPs2pl[12].wtt.value", DumpEntry{tdPs2pl[12].wtt.value});
        res.insert_or_assign("tdPs2pl[13].srcAddr", DumpEntry{tdPs2pl[13].srcAddr});
        res.insert_or_assign("tdPs2pl[13].destAddr", DumpEntry{tdPs2pl[13].destAddr});
        res.insert_or_assign("tdPs2pl[13].wtt", DumpEntry{tdPs2pl[13].wtt});
        res.insert_or_assign("tdPs2pl[13].wtt.value", DumpEntry{tdPs2pl[13].wtt.value});
        res.insert_or_assign("tdPs2pl[14].srcAddr", DumpEntry{tdPs2pl[14].srcAddr});
        res.insert_or_assign("tdPs2pl[14].destAddr", DumpEntry{tdPs2pl[14].destAddr});
        res.insert_or_assign("tdPs2pl[14].wtt", DumpEntry{tdPs2pl[14].wtt});
        res.insert_or_assign("tdPs2pl[14].wtt.value", DumpEntry{tdPs2pl[14].wtt.value});
        res.insert_or_assign("tdPs2pl[15].srcAddr", DumpEntry{tdPs2pl[15].srcAddr});
        res.insert_or_assign("tdPs2pl[15].destAddr", DumpEntry{tdPs2pl[15].destAddr});
        res.insert_or_assign("tdPs2pl[15].wtt", DumpEntry{tdPs2pl[15].wtt});
        res.insert_or_assign("tdPs2pl[15].wtt.value", DumpEntry{tdPs2pl[15].wtt.value});
        res.insert_or_assign("tdPs2pl[16].srcAddr", DumpEntry{tdPs2pl[16].srcAddr});
        res.insert_or_assign("tdPs2pl[16].destAddr", DumpEntry{tdPs2pl[16].destAddr});
        res.insert_or_assign("tdPs2pl[16].wtt", DumpEntry{tdPs2pl[16].wtt});
        res.insert_or_assign("tdPs2pl[16].wtt.value", DumpEntry{tdPs2pl[16].wtt.value});
        res.insert_or_assign("tdPs2pl[17].srcAddr", DumpEntry{tdPs2pl[17].srcAddr});
        res.insert_or_assign("tdPs2pl[17].destAddr", DumpEntry{tdPs2pl[17].destAddr});
        res.insert_or_assign("tdPs2pl[17].wtt", DumpEntry{tdPs2pl[17].wtt});
        res.insert_or_assign("tdPs2pl[17].wtt.value", DumpEntry{tdPs2pl[17].wtt.value});
        res.insert_or_assign("tdPs2pl[18].srcAddr", DumpEntry{tdPs2pl[18].srcAddr});
        res.insert_or_assign("tdPs2pl[18].destAddr", DumpEntry{tdPs2pl[18].destAddr});
        res.insert_or_assign("tdPs2pl[18].wtt", DumpEntry{tdPs2pl[18].wtt});
        res.insert_or_assign("tdPs2pl[18].wtt.value", DumpEntry{tdPs2pl[18].wtt.value});
        res.insert_or_assign("tdPs2pl[19].srcAddr", DumpEntry{tdPs2pl[19].srcAddr});
        res.insert_or_assign("tdPs2pl[19].destAddr", DumpEntry{tdPs2pl[19].destAddr});
        res.insert_or_assign("tdPs2pl[19].wtt", DumpEntry{tdPs2pl[19].wtt});
        res.insert_or_assign("tdPs2pl[19].wtt.value", DumpEntry{tdPs2pl[19].wtt.value});
        res.insert_or_assign("tdPs2pl[20].srcAddr", DumpEntry{tdPs2pl[20].srcAddr});
        res.insert_or_assign("tdPs2pl[20].destAddr", DumpEntry{tdPs2pl[20].destAddr});
        res.insert_or_assign("tdPs2pl[20].wtt", DumpEntry{tdPs2pl[20].wtt});
        res.insert_or_assign("tdPs2pl[20].wtt.value", DumpEntry{tdPs2pl[20].wtt.value});
        res.insert_or_assign("tdPs2pl[21].srcAddr", DumpEntry{tdPs2pl[21].srcAddr});
        res.insert_or_assign("tdPs2pl[21].destAddr", DumpEntry{tdPs2pl[21].destAddr});
        res.insert_or_assign("tdPs2pl[21].wtt", DumpEntry{tdPs2pl[21].wtt});
        res.insert_or_assign("tdPs2pl[21].wtt.value", DumpEntry{tdPs2pl[21].wtt.value});
        res.insert_or_assign("tdPs2pl[22].srcAddr", DumpEntry{tdPs2pl[22].srcAddr});
        res.insert_or_assign("tdPs2pl[22].destAddr", DumpEntry{tdPs2pl[22].destAddr});
        res.insert_or_assign("tdPs2pl[22].wtt", DumpEntry{tdPs2pl[22].wtt});
        res.insert_or_assign("tdPs2pl[22].wtt.value", DumpEntry{tdPs2pl[22].wtt.value});
        res.insert_or_assign("tdPs2pl[23].srcAddr", DumpEntry{tdPs2pl[23].srcAddr});
        res.insert_or_assign("tdPs2pl[23].destAddr", DumpEntry{tdPs2pl[23].destAddr});
        res.insert_or_assign("tdPs2pl[23].wtt", DumpEntry{tdPs2pl[23].wtt});
        res.insert_or_assign("tdPs2pl[23].wtt.value", DumpEntry{tdPs2pl[23].wtt.value});
        res.insert_or_assign("tdPs2pl[24].srcAddr", DumpEntry{tdPs2pl[24].srcAddr});
        res.insert_or_assign("tdPs2pl[24].destAddr", DumpEntry{tdPs2pl[24].destAddr});
        res.insert_or_assign("tdPs2pl[24].wtt", DumpEntry{tdPs2pl[24].wtt});
        res.insert_or_assign("tdPs2pl[24].wtt.value", DumpEntry{tdPs2pl[24].wtt.value});
        res.insert_or_assign("tdPs2pl[25].srcAddr", DumpEntry{tdPs2pl[25].srcAddr});
        res.insert_or_assign("tdPs2pl[25].destAddr", DumpEntry{tdPs2pl[25].destAddr});
        res.insert_or_assign("tdPs2pl[25].wtt", DumpEntry{tdPs2pl[25].wtt});
        res.insert_or_assign("tdPs2pl[25].wtt.value", DumpEntry{tdPs2pl[25].wtt.value});
        res.insert_or_assign("tdPs2pl[26].srcAddr", DumpEntry{tdPs2pl[26].srcAddr});
        res.insert_or_assign("tdPs2pl[26].destAddr", DumpEntry{tdPs2pl[26].destAddr});
        res.insert_or_assign("tdPs2pl[26].wtt", DumpEntry{tdPs2pl[26].wtt});
        res.insert_or_assign("tdPs2pl[26].wtt.value", DumpEntry{tdPs2pl[26].wtt.value});
        res.insert_or_assign("tdPs2pl[27].srcAddr", DumpEntry{tdPs2pl[27].srcAddr});
        res.insert_or_assign("tdPs2pl[27].destAddr", DumpEntry{tdPs2pl[27].destAddr});
        res.insert_or_assign("tdPs2pl[27].wtt", DumpEntry{tdPs2pl[27].wtt});
        res.insert_or_assign("tdPs2pl[27].wtt.value", DumpEntry{tdPs2pl[27].wtt.value});
        res.insert_or_assign("tdPs2pl[28].srcAddr", DumpEntry{tdPs2pl[28].srcAddr});
        res.insert_or_assign("tdPs2pl[28].destAddr", DumpEntry{tdPs2pl[28].destAddr});
        res.insert_or_assign("tdPs2pl[28].wtt", DumpEntry{tdPs2pl[28].wtt});
        res.insert_or_assign("tdPs2pl[28].wtt.value", DumpEntry{tdPs2pl[28].wtt.value});
        res.insert_or_assign("tdPs2pl[29].srcAddr", DumpEntry{tdPs2pl[29].srcAddr});
        res.insert_or_assign("tdPs2pl[29].destAddr", DumpEntry{tdPs2pl[29].destAddr});
        res.insert_or_assign("tdPs2pl[29].wtt", DumpEntry{tdPs2pl[29].wtt});
        res.insert_or_assign("tdPs2pl[29].wtt.value", DumpEntry{tdPs2pl[29].wtt.value});
        res.insert_or_assign("tdPs2pl[30].srcAddr", DumpEntry{tdPs2pl[30].srcAddr});
        res.insert_or_assign("tdPs2pl[30].destAddr", DumpEntry{tdPs2pl[30].destAddr});
        res.insert_or_assign("tdPs2pl[30].wtt", DumpEntry{tdPs2pl[30].wtt});
        res.insert_or_assign("tdPs2pl[30].wtt.value", DumpEntry{tdPs2pl[30].wtt.value});
        res.insert_or_assign("tdPs2pl[31].srcAddr", DumpEntry{tdPs2pl[31].srcAddr});
        res.insert_or_assign("tdPs2pl[31].destAddr", DumpEntry{tdPs2pl[31].destAddr});
        res.insert_or_assign("tdPs2pl[31].wtt", DumpEntry{tdPs2pl[31].wtt});
        res.insert_or_assign("tdPs2pl[31].wtt.value", DumpEntry{tdPs2pl[31].wtt.value});
        res.insert_or_assign("tdPs2pl[32].srcAddr", DumpEntry{tdPs2pl[32].srcAddr});
        res.insert_or_assign("tdPs2pl[32].destAddr", DumpEntry{tdPs2pl[32].destAddr});
        res.insert_or_assign("tdPs2pl[32].wtt", DumpEntry{tdPs2pl[32].wtt});
        res.insert_or_assign("tdPs2pl[32].wtt.value", DumpEntry{tdPs2pl[32].wtt.value});
        res.insert_or_assign("tdPs2pl[33].srcAddr", DumpEntry{tdPs2pl[33].srcAddr});
        res.insert_or_assign("tdPs2pl[33].destAddr", DumpEntry{tdPs2pl[33].destAddr});
        res.insert_or_assign("tdPs2pl[33].wtt", DumpEntry{tdPs2pl[33].wtt});
        res.insert_or_assign("tdPs2pl[33].wtt.value", DumpEntry{tdPs2pl[33].wtt.value});
        res.insert_or_assign("tdPs2pl[34].srcAddr", DumpEntry{tdPs2pl[34].srcAddr});
        res.insert_or_assign("tdPs2pl[34].destAddr", DumpEntry{tdPs2pl[34].destAddr});
        res.insert_or_assign("tdPs2pl[34].wtt", DumpEntry{tdPs2pl[34].wtt});
        res.insert_or_assign("tdPs2pl[34].wtt.value", DumpEntry{tdPs2pl[34].wtt.value});
        res.insert_or_assign("tdPs2pl[35].srcAddr", DumpEntry{tdPs2pl[35].srcAddr});
        res.insert_or_assign("tdPs2pl[35].destAddr", DumpEntry{tdPs2pl[35].destAddr});
        res.insert_or_assign("tdPs2pl[35].wtt", DumpEntry{tdPs2pl[35].wtt});
        res.insert_or_assign("tdPs2pl[35].wtt.value", DumpEntry{tdPs2pl[35].wtt.value});
        res.insert_or_assign("tdPs2pl[36].srcAddr", DumpEntry{tdPs2pl[36].srcAddr});
        res.insert_or_assign("tdPs2pl[36].destAddr", DumpEntry{tdPs2pl[36].destAddr});
        res.insert_or_assign("tdPs2pl[36].wtt", DumpEntry{tdPs2pl[36].wtt});
        res.insert_or_assign("tdPs2pl[36].wtt.value", DumpEntry{tdPs2pl[36].wtt.value});
        res.insert_or_assign("tdPs2pl[37].srcAddr", DumpEntry{tdPs2pl[37].srcAddr});
        res.insert_or_assign("tdPs2pl[37].destAddr", DumpEntry{tdPs2pl[37].destAddr});
        res.insert_or_assign("tdPs2pl[37].wtt", DumpEntry{tdPs2pl[37].wtt});
        res.insert_or_assign("tdPs2pl[37].wtt.value", DumpEntry{tdPs2pl[37].wtt.value});
        res.insert_or_assign("tdPs2pl[38].srcAddr", DumpEntry{tdPs2pl[38].srcAddr});
        res.insert_or_assign("tdPs2pl[38].destAddr", DumpEntry{tdPs2pl[38].destAddr});
        res.insert_or_assign("tdPs2pl[38].wtt", DumpEntry{tdPs2pl[38].wtt});
        res.insert_or_assign("tdPs2pl[38].wtt.value", DumpEntry{tdPs2pl[38].wtt.value});
        res.insert_or_assign("tdPs2pl[39].srcAddr", DumpEntry{tdPs2pl[39].srcAddr});
        res.insert_or_assign("tdPs2pl[39].destAddr", DumpEntry{tdPs2pl[39].destAddr});
        res.insert_or_assign("tdPs2pl[39].wtt", DumpEntry{tdPs2pl[39].wtt});
        res.insert_or_assign("tdPs2pl[39].wtt.value", DumpEntry{tdPs2pl[39].wtt.value});
        res.insert_or_assign("tdPs2pl[40].srcAddr", DumpEntry{tdPs2pl[40].srcAddr});
        res.insert_or_assign("tdPs2pl[40].destAddr", DumpEntry{tdPs2pl[40].destAddr});
        res.insert_or_assign("tdPs2pl[40].wtt", DumpEntry{tdPs2pl[40].wtt});
        res.insert_or_assign("tdPs2pl[40].wtt.value", DumpEntry{tdPs2pl[40].wtt.value});
        res.insert_or_assign("tdPs2pl[41].srcAddr", DumpEntry{tdPs2pl[41].srcAddr});
        res.insert_or_assign("tdPs2pl[41].destAddr", DumpEntry{tdPs2pl[41].destAddr});
        res.insert_or_assign("tdPs2pl[41].wtt", DumpEntry{tdPs2pl[41].wtt});
        res.insert_or_assign("tdPs2pl[41].wtt.value", DumpEntry{tdPs2pl[41].wtt.value});
        res.insert_or_assign("tdPs2pl[42].srcAddr", DumpEntry{tdPs2pl[42].srcAddr});
        res.insert_or_assign("tdPs2pl[42].destAddr", DumpEntry{tdPs2pl[42].destAddr});
        res.insert_or_assign("tdPs2pl[42].wtt", DumpEntry{tdPs2pl[42].wtt});
        res.insert_or_assign("tdPs2pl[42].wtt.value", DumpEntry{tdPs2pl[42].wtt.value});
        res.insert_or_assign("tdPs2pl[43].srcAddr", DumpEntry{tdPs2pl[43].srcAddr});
        res.insert_or_assign("tdPs2pl[43].destAddr", DumpEntry{tdPs2pl[43].destAddr});
        res.insert_or_assign("tdPs2pl[43].wtt", DumpEntry{tdPs2pl[43].wtt});
        res.insert_or_assign("tdPs2pl[43].wtt.value", DumpEntry{tdPs2pl[43].wtt.value});
        res.insert_or_assign("tdPs2pl[44].srcAddr", DumpEntry{tdPs2pl[44].srcAddr});
        res.insert_or_assign("tdPs2pl[44].destAddr", DumpEntry{tdPs2pl[44].destAddr});
        res.insert_or_assign("tdPs2pl[44].wtt", DumpEntry{tdPs2pl[44].wtt});
        res.insert_or_assign("tdPs2pl[44].wtt.value", DumpEntry{tdPs2pl[44].wtt.value});
        res.insert_or_assign("tdPs2pl[45].srcAddr", DumpEntry{tdPs2pl[45].srcAddr});
        res.insert_or_assign("tdPs2pl[45].destAddr", DumpEntry{tdPs2pl[45].destAddr});
        res.insert_or_assign("tdPs2pl[45].wtt", DumpEntry{tdPs2pl[45].wtt});
        res.insert_or_assign("tdPs2pl[45].wtt.value", DumpEntry{tdPs2pl[45].wtt.value});
        res.insert_or_assign("tdPs2pl[46].srcAddr", DumpEntry{tdPs2pl[46].srcAddr});
        res.insert_or_assign("tdPs2pl[46].destAddr", DumpEntry{tdPs2pl[46].destAddr});
        res.insert_or_assign("tdPs2pl[46].wtt", DumpEntry{tdPs2pl[46].wtt});
        res.insert_or_assign("tdPs2pl[46].wtt.value", DumpEntry{tdPs2pl[46].wtt.value});
        res.insert_or_assign("tdPs2pl[47].srcAddr", DumpEntry{tdPs2pl[47].srcAddr});
        res.insert_or_assign("tdPs2pl[47].destAddr", DumpEntry{tdPs2pl[47].destAddr});
        res.insert_or_assign("tdPs2pl[47].wtt", DumpEntry{tdPs2pl[47].wtt});
        res.insert_or_assign("tdPs2pl[47].wtt.value", DumpEntry{tdPs2pl[47].wtt.value});
        res.insert_or_assign("tdPs2pl[48].srcAddr", DumpEntry{tdPs2pl[48].srcAddr});
        res.insert_or_assign("tdPs2pl[48].destAddr", DumpEntry{tdPs2pl[48].destAddr});
        res.insert_or_assign("tdPs2pl[48].wtt", DumpEntry{tdPs2pl[48].wtt});
        res.insert_or_assign("tdPs2pl[48].wtt.value", DumpEntry{tdPs2pl[48].wtt.value});
        res.insert_or_assign("tdPs2pl[49].srcAddr", DumpEntry{tdPs2pl[49].srcAddr});
        res.insert_or_assign("tdPs2pl[49].destAddr", DumpEntry{tdPs2pl[49].destAddr});
        res.insert_or_assign("tdPs2pl[49].wtt", DumpEntry{tdPs2pl[49].wtt});
        res.insert_or_assign("tdPs2pl[49].wtt.value", DumpEntry{tdPs2pl[49].wtt.value});
        res.insert_or_assign("tdPs2pl[50].srcAddr", DumpEntry{tdPs2pl[50].srcAddr});
        res.insert_or_assign("tdPs2pl[50].destAddr", DumpEntry{tdPs2pl[50].destAddr});
        res.insert_or_assign("tdPs2pl[50].wtt", DumpEntry{tdPs2pl[50].wtt});
        res.insert_or_assign("tdPs2pl[50].wtt.value", DumpEntry{tdPs2pl[50].wtt.value});
        res.insert_or_assign("tdPs2pl[51].srcAddr", DumpEntry{tdPs2pl[51].srcAddr});
        res.insert_or_assign("tdPs2pl[51].destAddr", DumpEntry{tdPs2pl[51].destAddr});
        res.insert_or_assign("tdPs2pl[51].wtt", DumpEntry{tdPs2pl[51].wtt});
        res.insert_or_assign("tdPs2pl[51].wtt.value", DumpEntry{tdPs2pl[51].wtt.value});
        res.insert_or_assign("tdPs2pl[52].srcAddr", DumpEntry{tdPs2pl[52].srcAddr});
        res.insert_or_assign("tdPs2pl[52].destAddr", DumpEntry{tdPs2pl[52].destAddr});
        res.insert_or_assign("tdPs2pl[52].wtt", DumpEntry{tdPs2pl[52].wtt});
        res.insert_or_assign("tdPs2pl[52].wtt.value", DumpEntry{tdPs2pl[52].wtt.value});
        res.insert_or_assign("tdPs2pl[53].srcAddr", DumpEntry{tdPs2pl[53].srcAddr});
        res.insert_or_assign("tdPs2pl[53].destAddr", DumpEntry{tdPs2pl[53].destAddr});
        res.insert_or_assign("tdPs2pl[53].wtt", DumpEntry{tdPs2pl[53].wtt});
        res.insert_or_assign("tdPs2pl[53].wtt.value", DumpEntry{tdPs2pl[53].wtt.value});
        res.insert_or_assign("tdPs2pl[54].srcAddr", DumpEntry{tdPs2pl[54].srcAddr});
        res.insert_or_assign("tdPs2pl[54].destAddr", DumpEntry{tdPs2pl[54].destAddr});
        res.insert_or_assign("tdPs2pl[54].wtt", DumpEntry{tdPs2pl[54].wtt});
        res.insert_or_assign("tdPs2pl[54].wtt.value", DumpEntry{tdPs2pl[54].wtt.value});
        res.insert_or_assign("tdPs2pl[55].srcAddr", DumpEntry{tdPs2pl[55].srcAddr});
        res.insert_or_assign("tdPs2pl[55].destAddr", DumpEntry{tdPs2pl[55].destAddr});
        res.insert_or_assign("tdPs2pl[55].wtt", DumpEntry{tdPs2pl[55].wtt});
        res.insert_or_assign("tdPs2pl[55].wtt.value", DumpEntry{tdPs2pl[55].wtt.value});
        res.insert_or_assign("tdPs2pl[56].srcAddr", DumpEntry{tdPs2pl[56].srcAddr});
        res.insert_or_assign("tdPs2pl[56].destAddr", DumpEntry{tdPs2pl[56].destAddr});
        res.insert_or_assign("tdPs2pl[56].wtt", DumpEntry{tdPs2pl[56].wtt});
        res.insert_or_assign("tdPs2pl[56].wtt.value", DumpEntry{tdPs2pl[56].wtt.value});
        res.insert_or_assign("tdPs2pl[57].srcAddr", DumpEntry{tdPs2pl[57].srcAddr});
        res.insert_or_assign("tdPs2pl[57].destAddr", DumpEntry{tdPs2pl[57].destAddr});
        res.insert_or_assign("tdPs2pl[57].wtt", DumpEntry{tdPs2pl[57].wtt});
        res.insert_or_assign("tdPs2pl[57].wtt.value", DumpEntry{tdPs2pl[57].wtt.value});
        res.insert_or_assign("tdPs2pl[58].srcAddr", DumpEntry{tdPs2pl[58].srcAddr});
        res.insert_or_assign("tdPs2pl[58].destAddr", DumpEntry{tdPs2pl[58].destAddr});
        res.insert_or_assign("tdPs2pl[58].wtt", DumpEntry{tdPs2pl[58].wtt});
        res.insert_or_assign("tdPs2pl[58].wtt.value", DumpEntry{tdPs2pl[58].wtt.value});
        res.insert_or_assign("tdPs2pl[59].srcAddr", DumpEntry{tdPs2pl[59].srcAddr});
        res.insert_or_assign("tdPs2pl[59].destAddr", DumpEntry{tdPs2pl[59].destAddr});
        res.insert_or_assign("tdPs2pl[59].wtt", DumpEntry{tdPs2pl[59].wtt});
        res.insert_or_assign("tdPs2pl[59].wtt.value", DumpEntry{tdPs2pl[59].wtt.value});
        res.insert_or_assign("tdPs2pl[60].srcAddr", DumpEntry{tdPs2pl[60].srcAddr});
        res.insert_or_assign("tdPs2pl[60].destAddr", DumpEntry{tdPs2pl[60].destAddr});
        res.insert_or_assign("tdPs2pl[60].wtt", DumpEntry{tdPs2pl[60].wtt});
        res.insert_or_assign("tdPs2pl[60].wtt.value", DumpEntry{tdPs2pl[60].wtt.value});
        res.insert_or_assign("tdPs2pl[61].srcAddr", DumpEntry{tdPs2pl[61].srcAddr});
        res.insert_or_assign("tdPs2pl[61].destAddr", DumpEntry{tdPs2pl[61].destAddr});
        res.insert_or_assign("tdPs2pl[61].wtt", DumpEntry{tdPs2pl[61].wtt});
        res.insert_or_assign("tdPs2pl[61].wtt.value", DumpEntry{tdPs2pl[61].wtt.value});
        res.insert_or_assign("tdPs2pl[62].srcAddr", DumpEntry{tdPs2pl[62].srcAddr});
        res.insert_or_assign("tdPs2pl[62].destAddr", DumpEntry{tdPs2pl[62].destAddr});
        res.insert_or_assign("tdPs2pl[62].wtt", DumpEntry{tdPs2pl[62].wtt});
        res.insert_or_assign("tdPs2pl[62].wtt.value", DumpEntry{tdPs2pl[62].wtt.value});
        res.insert_or_assign("tdPs2pl[63].srcAddr", DumpEntry{tdPs2pl[63].srcAddr});
        res.insert_or_assign("tdPs2pl[63].destAddr", DumpEntry{tdPs2pl[63].destAddr});
        res.insert_or_assign("tdPs2pl[63].wtt", DumpEntry{tdPs2pl[63].wtt});
        res.insert_or_assign("tdPs2pl[63].wtt.value", DumpEntry{tdPs2pl[63].wtt.value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Ddma::ErrorsArray`
    //!
    //! @param errors A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under errors
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Ddma::ErrorsArray& errors)
    {
        DumpMap res{errors.base()};
        res.insert_or_assign("errors[0].acp", DumpEntry{errors[0].acp});
        res.insert_or_assign("errors[0].acp.rSlverr", DumpEntry{errors[0].acp.rSlverr});
        res.insert_or_assign("errors[0].acp.rDecerr", DumpEntry{errors[0].acp.rDecerr});
        res.insert_or_assign("errors[0].acp.wSlverr", DumpEntry{errors[0].acp.wSlverr});
        res.insert_or_assign("errors[0].acp.wDecerr", DumpEntry{errors[0].acp.wDecerr});
        res.insert_or_assign("errors[0].axil", DumpEntry{errors[0].axil});
        res.insert_or_assign("errors[0].axil.rSlverr", DumpEntry{errors[0].axil.rSlverr});
        res.insert_or_assign("errors[0].axil.rDecerr", DumpEntry{errors[0].axil.rDecerr});
        res.insert_or_assign("errors[0].axil.wSlverr", DumpEntry{errors[0].axil.wSlverr});
        res.insert_or_assign("errors[0].axil.wDecerr", DumpEntry{errors[0].axil.wDecerr});
        res.insert_or_assign("errors[1].acp", DumpEntry{errors[1].acp});
        res.insert_or_assign("errors[1].acp.rSlverr", DumpEntry{errors[1].acp.rSlverr});
        res.insert_or_assign("errors[1].acp.rDecerr", DumpEntry{errors[1].acp.rDecerr});
        res.insert_or_assign("errors[1].acp.wSlverr", DumpEntry{errors[1].acp.wSlverr});
        res.insert_or_assign("errors[1].acp.wDecerr", DumpEntry{errors[1].acp.wDecerr});
        res.insert_or_assign("errors[1].axil", DumpEntry{errors[1].axil});
        res.insert_or_assign("errors[1].axil.rSlverr", DumpEntry{errors[1].axil.rSlverr});
        res.insert_or_assign("errors[1].axil.rDecerr", DumpEntry{errors[1].axil.rDecerr});
        res.insert_or_assign("errors[1].axil.wSlverr", DumpEntry{errors[1].axil.wSlverr});
        res.insert_or_assign("errors[1].axil.wDecerr", DumpEntry{errors[1].axil.wDecerr});
        res.insert_or_assign("errors[2].acp", DumpEntry{errors[2].acp});
        res.insert_or_assign("errors[2].acp.rSlverr", DumpEntry{errors[2].acp.rSlverr});
        res.insert_or_assign("errors[2].acp.rDecerr", DumpEntry{errors[2].acp.rDecerr});
        res.insert_or_assign("errors[2].acp.wSlverr", DumpEntry{errors[2].acp.wSlverr});
        res.insert_or_assign("errors[2].acp.wDecerr", DumpEntry{errors[2].acp.wDecerr});
        res.insert_or_assign("errors[2].axil", DumpEntry{errors[2].axil});
        res.insert_or_assign("errors[2].axil.rSlverr", DumpEntry{errors[2].axil.rSlverr});
        res.insert_or_assign("errors[2].axil.rDecerr", DumpEntry{errors[2].axil.rDecerr});
        res.insert_or_assign("errors[2].axil.wSlverr", DumpEntry{errors[2].axil.wSlverr});
        res.insert_or_assign("errors[2].axil.wDecerr", DumpEntry{errors[2].axil.wDecerr});
        res.insert_or_assign("errors[3].acp", DumpEntry{errors[3].acp});
        res.insert_or_assign("errors[3].acp.rSlverr", DumpEntry{errors[3].acp.rSlverr});
        res.insert_or_assign("errors[3].acp.rDecerr", DumpEntry{errors[3].acp.rDecerr});
        res.insert_or_assign("errors[3].acp.wSlverr", DumpEntry{errors[3].acp.wSlverr});
        res.insert_or_assign("errors[3].acp.wDecerr", DumpEntry{errors[3].acp.wDecerr});
        res.insert_or_assign("errors[3].axil", DumpEntry{errors[3].axil});
        res.insert_or_assign("errors[3].axil.rSlverr", DumpEntry{errors[3].axil.rSlverr});
        res.insert_or_assign("errors[3].axil.rDecerr", DumpEntry{errors[3].axil.rDecerr});
        res.insert_or_assign("errors[3].axil.wSlverr", DumpEntry{errors[3].axil.wSlverr});
        res.insert_or_assign("errors[3].axil.wDecerr", DumpEntry{errors[3].axil.wDecerr});
        res.insert_or_assign("errors[4].acp", DumpEntry{errors[4].acp});
        res.insert_or_assign("errors[4].acp.rSlverr", DumpEntry{errors[4].acp.rSlverr});
        res.insert_or_assign("errors[4].acp.rDecerr", DumpEntry{errors[4].acp.rDecerr});
        res.insert_or_assign("errors[4].acp.wSlverr", DumpEntry{errors[4].acp.wSlverr});
        res.insert_or_assign("errors[4].acp.wDecerr", DumpEntry{errors[4].acp.wDecerr});
        res.insert_or_assign("errors[4].axil", DumpEntry{errors[4].axil});
        res.insert_or_assign("errors[4].axil.rSlverr", DumpEntry{errors[4].axil.rSlverr});
        res.insert_or_assign("errors[4].axil.rDecerr", DumpEntry{errors[4].axil.rDecerr});
        res.insert_or_assign("errors[4].axil.wSlverr", DumpEntry{errors[4].axil.wSlverr});
        res.insert_or_assign("errors[4].axil.wDecerr", DumpEntry{errors[4].axil.wDecerr});
        res.insert_or_assign("errors[5].acp", DumpEntry{errors[5].acp});
        res.insert_or_assign("errors[5].acp.rSlverr", DumpEntry{errors[5].acp.rSlverr});
        res.insert_or_assign("errors[5].acp.rDecerr", DumpEntry{errors[5].acp.rDecerr});
        res.insert_or_assign("errors[5].acp.wSlverr", DumpEntry{errors[5].acp.wSlverr});
        res.insert_or_assign("errors[5].acp.wDecerr", DumpEntry{errors[5].acp.wDecerr});
        res.insert_or_assign("errors[5].axil", DumpEntry{errors[5].axil});
        res.insert_or_assign("errors[5].axil.rSlverr", DumpEntry{errors[5].axil.rSlverr});
        res.insert_or_assign("errors[5].axil.rDecerr", DumpEntry{errors[5].axil.rDecerr});
        res.insert_or_assign("errors[5].axil.wSlverr", DumpEntry{errors[5].axil.wSlverr});
        res.insert_or_assign("errors[5].axil.wDecerr", DumpEntry{errors[5].axil.wDecerr});
        res.insert_or_assign("errors[6].acp", DumpEntry{errors[6].acp});
        res.insert_or_assign("errors[6].acp.rSlverr", DumpEntry{errors[6].acp.rSlverr});
        res.insert_or_assign("errors[6].acp.rDecerr", DumpEntry{errors[6].acp.rDecerr});
        res.insert_or_assign("errors[6].acp.wSlverr", DumpEntry{errors[6].acp.wSlverr});
        res.insert_or_assign("errors[6].acp.wDecerr", DumpEntry{errors[6].acp.wDecerr});
        res.insert_or_assign("errors[6].axil", DumpEntry{errors[6].axil});
        res.insert_or_assign("errors[6].axil.rSlverr", DumpEntry{errors[6].axil.rSlverr});
        res.insert_or_assign("errors[6].axil.rDecerr", DumpEntry{errors[6].axil.rDecerr});
        res.insert_or_assign("errors[6].axil.wSlverr", DumpEntry{errors[6].axil.wSlverr});
        res.insert_or_assign("errors[6].axil.wDecerr", DumpEntry{errors[6].axil.wDecerr});
        res.insert_or_assign("errors[7].acp", DumpEntry{errors[7].acp});
        res.insert_or_assign("errors[7].acp.rSlverr", DumpEntry{errors[7].acp.rSlverr});
        res.insert_or_assign("errors[7].acp.rDecerr", DumpEntry{errors[7].acp.rDecerr});
        res.insert_or_assign("errors[7].acp.wSlverr", DumpEntry{errors[7].acp.wSlverr});
        res.insert_or_assign("errors[7].acp.wDecerr", DumpEntry{errors[7].acp.wDecerr});
        res.insert_or_assign("errors[7].axil", DumpEntry{errors[7].axil});
        res.insert_or_assign("errors[7].axil.rSlverr", DumpEntry{errors[7].axil.rSlverr});
        res.insert_or_assign("errors[7].axil.rDecerr", DumpEntry{errors[7].axil.rDecerr});
        res.insert_or_assign("errors[7].axil.wSlverr", DumpEntry{errors[7].axil.wSlverr});
        res.insert_or_assign("errors[7].axil.wDecerr", DumpEntry{errors[7].axil.wDecerr});
        res.insert_or_assign("errors[8].acp", DumpEntry{errors[8].acp});
        res.insert_or_assign("errors[8].acp.rSlverr", DumpEntry{errors[8].acp.rSlverr});
        res.insert_or_assign("errors[8].acp.rDecerr", DumpEntry{errors[8].acp.rDecerr});
        res.insert_or_assign("errors[8].acp.wSlverr", DumpEntry{errors[8].acp.wSlverr});
        res.insert_or_assign("errors[8].acp.wDecerr", DumpEntry{errors[8].acp.wDecerr});
        res.insert_or_assign("errors[8].axil", DumpEntry{errors[8].axil});
        res.insert_or_assign("errors[8].axil.rSlverr", DumpEntry{errors[8].axil.rSlverr});
        res.insert_or_assign("errors[8].axil.rDecerr", DumpEntry{errors[8].axil.rDecerr});
        res.insert_or_assign("errors[8].axil.wSlverr", DumpEntry{errors[8].axil.wSlverr});
        res.insert_or_assign("errors[8].axil.wDecerr", DumpEntry{errors[8].axil.wDecerr});
        res.insert_or_assign("errors[9].acp", DumpEntry{errors[9].acp});
        res.insert_or_assign("errors[9].acp.rSlverr", DumpEntry{errors[9].acp.rSlverr});
        res.insert_or_assign("errors[9].acp.rDecerr", DumpEntry{errors[9].acp.rDecerr});
        res.insert_or_assign("errors[9].acp.wSlverr", DumpEntry{errors[9].acp.wSlverr});
        res.insert_or_assign("errors[9].acp.wDecerr", DumpEntry{errors[9].acp.wDecerr});
        res.insert_or_assign("errors[9].axil", DumpEntry{errors[9].axil});
        res.insert_or_assign("errors[9].axil.rSlverr", DumpEntry{errors[9].axil.rSlverr});
        res.insert_or_assign("errors[9].axil.rDecerr", DumpEntry{errors[9].axil.rDecerr});
        res.insert_or_assign("errors[9].axil.wSlverr", DumpEntry{errors[9].axil.wSlverr});
        res.insert_or_assign("errors[9].axil.wDecerr", DumpEntry{errors[9].axil.wDecerr});
        res.insert_or_assign("errors[10].acp", DumpEntry{errors[10].acp});
        res.insert_or_assign("errors[10].acp.rSlverr", DumpEntry{errors[10].acp.rSlverr});
        res.insert_or_assign("errors[10].acp.rDecerr", DumpEntry{errors[10].acp.rDecerr});
        res.insert_or_assign("errors[10].acp.wSlverr", DumpEntry{errors[10].acp.wSlverr});
        res.insert_or_assign("errors[10].acp.wDecerr", DumpEntry{errors[10].acp.wDecerr});
        res.insert_or_assign("errors[10].axil", DumpEntry{errors[10].axil});
        res.insert_or_assign("errors[10].axil.rSlverr", DumpEntry{errors[10].axil.rSlverr});
        res.insert_or_assign("errors[10].axil.rDecerr", DumpEntry{errors[10].axil.rDecerr});
        res.insert_or_assign("errors[10].axil.wSlverr", DumpEntry{errors[10].axil.wSlverr});
        res.insert_or_assign("errors[10].axil.wDecerr", DumpEntry{errors[10].axil.wDecerr});
        res.insert_or_assign("errors[11].acp", DumpEntry{errors[11].acp});
        res.insert_or_assign("errors[11].acp.rSlverr", DumpEntry{errors[11].acp.rSlverr});
        res.insert_or_assign("errors[11].acp.rDecerr", DumpEntry{errors[11].acp.rDecerr});
        res.insert_or_assign("errors[11].acp.wSlverr", DumpEntry{errors[11].acp.wSlverr});
        res.insert_or_assign("errors[11].acp.wDecerr", DumpEntry{errors[11].acp.wDecerr});
        res.insert_or_assign("errors[11].axil", DumpEntry{errors[11].axil});
        res.insert_or_assign("errors[11].axil.rSlverr", DumpEntry{errors[11].axil.rSlverr});
        res.insert_or_assign("errors[11].axil.rDecerr", DumpEntry{errors[11].axil.rDecerr});
        res.insert_or_assign("errors[11].axil.wSlverr", DumpEntry{errors[11].axil.wSlverr});
        res.insert_or_assign("errors[11].axil.wDecerr", DumpEntry{errors[11].axil.wDecerr});
        res.insert_or_assign("errors[12].acp", DumpEntry{errors[12].acp});
        res.insert_or_assign("errors[12].acp.rSlverr", DumpEntry{errors[12].acp.rSlverr});
        res.insert_or_assign("errors[12].acp.rDecerr", DumpEntry{errors[12].acp.rDecerr});
        res.insert_or_assign("errors[12].acp.wSlverr", DumpEntry{errors[12].acp.wSlverr});
        res.insert_or_assign("errors[12].acp.wDecerr", DumpEntry{errors[12].acp.wDecerr});
        res.insert_or_assign("errors[12].axil", DumpEntry{errors[12].axil});
        res.insert_or_assign("errors[12].axil.rSlverr", DumpEntry{errors[12].axil.rSlverr});
        res.insert_or_assign("errors[12].axil.rDecerr", DumpEntry{errors[12].axil.rDecerr});
        res.insert_or_assign("errors[12].axil.wSlverr", DumpEntry{errors[12].axil.wSlverr});
        res.insert_or_assign("errors[12].axil.wDecerr", DumpEntry{errors[12].axil.wDecerr});
        res.insert_or_assign("errors[13].acp", DumpEntry{errors[13].acp});
        res.insert_or_assign("errors[13].acp.rSlverr", DumpEntry{errors[13].acp.rSlverr});
        res.insert_or_assign("errors[13].acp.rDecerr", DumpEntry{errors[13].acp.rDecerr});
        res.insert_or_assign("errors[13].acp.wSlverr", DumpEntry{errors[13].acp.wSlverr});
        res.insert_or_assign("errors[13].acp.wDecerr", DumpEntry{errors[13].acp.wDecerr});
        res.insert_or_assign("errors[13].axil", DumpEntry{errors[13].axil});
        res.insert_or_assign("errors[13].axil.rSlverr", DumpEntry{errors[13].axil.rSlverr});
        res.insert_or_assign("errors[13].axil.rDecerr", DumpEntry{errors[13].axil.rDecerr});
        res.insert_or_assign("errors[13].axil.wSlverr", DumpEntry{errors[13].axil.wSlverr});
        res.insert_or_assign("errors[13].axil.wDecerr", DumpEntry{errors[13].axil.wDecerr});
        res.insert_or_assign("errors[14].acp", DumpEntry{errors[14].acp});
        res.insert_or_assign("errors[14].acp.rSlverr", DumpEntry{errors[14].acp.rSlverr});
        res.insert_or_assign("errors[14].acp.rDecerr", DumpEntry{errors[14].acp.rDecerr});
        res.insert_or_assign("errors[14].acp.wSlverr", DumpEntry{errors[14].acp.wSlverr});
        res.insert_or_assign("errors[14].acp.wDecerr", DumpEntry{errors[14].acp.wDecerr});
        res.insert_or_assign("errors[14].axil", DumpEntry{errors[14].axil});
        res.insert_or_assign("errors[14].axil.rSlverr", DumpEntry{errors[14].axil.rSlverr});
        res.insert_or_assign("errors[14].axil.rDecerr", DumpEntry{errors[14].axil.rDecerr});
        res.insert_or_assign("errors[14].axil.wSlverr", DumpEntry{errors[14].axil.wSlverr});
        res.insert_or_assign("errors[14].axil.wDecerr", DumpEntry{errors[14].axil.wDecerr});
        res.insert_or_assign("errors[15].acp", DumpEntry{errors[15].acp});
        res.insert_or_assign("errors[15].acp.rSlverr", DumpEntry{errors[15].acp.rSlverr});
        res.insert_or_assign("errors[15].acp.rDecerr", DumpEntry{errors[15].acp.rDecerr});
        res.insert_or_assign("errors[15].acp.wSlverr", DumpEntry{errors[15].acp.wSlverr});
        res.insert_or_assign("errors[15].acp.wDecerr", DumpEntry{errors[15].acp.wDecerr});
        res.insert_or_assign("errors[15].axil", DumpEntry{errors[15].axil});
        res.insert_or_assign("errors[15].axil.rSlverr", DumpEntry{errors[15].axil.rSlverr});
        res.insert_or_assign("errors[15].axil.rDecerr", DumpEntry{errors[15].axil.rDecerr});
        res.insert_or_assign("errors[15].axil.wSlverr", DumpEntry{errors[15].axil.wSlverr});
        res.insert_or_assign("errors[15].axil.wDecerr", DumpEntry{errors[15].axil.wDecerr});
        res.insert_or_assign("errors[16].acp", DumpEntry{errors[16].acp});
        res.insert_or_assign("errors[16].acp.rSlverr", DumpEntry{errors[16].acp.rSlverr});
        res.insert_or_assign("errors[16].acp.rDecerr", DumpEntry{errors[16].acp.rDecerr});
        res.insert_or_assign("errors[16].acp.wSlverr", DumpEntry{errors[16].acp.wSlverr});
        res.insert_or_assign("errors[16].acp.wDecerr", DumpEntry{errors[16].acp.wDecerr});
        res.insert_or_assign("errors[16].axil", DumpEntry{errors[16].axil});
        res.insert_or_assign("errors[16].axil.rSlverr", DumpEntry{errors[16].axil.rSlverr});
        res.insert_or_assign("errors[16].axil.rDecerr", DumpEntry{errors[16].axil.rDecerr});
        res.insert_or_assign("errors[16].axil.wSlverr", DumpEntry{errors[16].axil.wSlverr});
        res.insert_or_assign("errors[16].axil.wDecerr", DumpEntry{errors[16].axil.wDecerr});
        res.insert_or_assign("errors[17].acp", DumpEntry{errors[17].acp});
        res.insert_or_assign("errors[17].acp.rSlverr", DumpEntry{errors[17].acp.rSlverr});
        res.insert_or_assign("errors[17].acp.rDecerr", DumpEntry{errors[17].acp.rDecerr});
        res.insert_or_assign("errors[17].acp.wSlverr", DumpEntry{errors[17].acp.wSlverr});
        res.insert_or_assign("errors[17].acp.wDecerr", DumpEntry{errors[17].acp.wDecerr});
        res.insert_or_assign("errors[17].axil", DumpEntry{errors[17].axil});
        res.insert_or_assign("errors[17].axil.rSlverr", DumpEntry{errors[17].axil.rSlverr});
        res.insert_or_assign("errors[17].axil.rDecerr", DumpEntry{errors[17].axil.rDecerr});
        res.insert_or_assign("errors[17].axil.wSlverr", DumpEntry{errors[17].axil.wSlverr});
        res.insert_or_assign("errors[17].axil.wDecerr", DumpEntry{errors[17].axil.wDecerr});
        res.insert_or_assign("errors[18].acp", DumpEntry{errors[18].acp});
        res.insert_or_assign("errors[18].acp.rSlverr", DumpEntry{errors[18].acp.rSlverr});
        res.insert_or_assign("errors[18].acp.rDecerr", DumpEntry{errors[18].acp.rDecerr});
        res.insert_or_assign("errors[18].acp.wSlverr", DumpEntry{errors[18].acp.wSlverr});
        res.insert_or_assign("errors[18].acp.wDecerr", DumpEntry{errors[18].acp.wDecerr});
        res.insert_or_assign("errors[18].axil", DumpEntry{errors[18].axil});
        res.insert_or_assign("errors[18].axil.rSlverr", DumpEntry{errors[18].axil.rSlverr});
        res.insert_or_assign("errors[18].axil.rDecerr", DumpEntry{errors[18].axil.rDecerr});
        res.insert_or_assign("errors[18].axil.wSlverr", DumpEntry{errors[18].axil.wSlverr});
        res.insert_or_assign("errors[18].axil.wDecerr", DumpEntry{errors[18].axil.wDecerr});
        res.insert_or_assign("errors[19].acp", DumpEntry{errors[19].acp});
        res.insert_or_assign("errors[19].acp.rSlverr", DumpEntry{errors[19].acp.rSlverr});
        res.insert_or_assign("errors[19].acp.rDecerr", DumpEntry{errors[19].acp.rDecerr});
        res.insert_or_assign("errors[19].acp.wSlverr", DumpEntry{errors[19].acp.wSlverr});
        res.insert_or_assign("errors[19].acp.wDecerr", DumpEntry{errors[19].acp.wDecerr});
        res.insert_or_assign("errors[19].axil", DumpEntry{errors[19].axil});
        res.insert_or_assign("errors[19].axil.rSlverr", DumpEntry{errors[19].axil.rSlverr});
        res.insert_or_assign("errors[19].axil.rDecerr", DumpEntry{errors[19].axil.rDecerr});
        res.insert_or_assign("errors[19].axil.wSlverr", DumpEntry{errors[19].axil.wSlverr});
        res.insert_or_assign("errors[19].axil.wDecerr", DumpEntry{errors[19].axil.wDecerr});
        res.insert_or_assign("errors[20].acp", DumpEntry{errors[20].acp});
        res.insert_or_assign("errors[20].acp.rSlverr", DumpEntry{errors[20].acp.rSlverr});
        res.insert_or_assign("errors[20].acp.rDecerr", DumpEntry{errors[20].acp.rDecerr});
        res.insert_or_assign("errors[20].acp.wSlverr", DumpEntry{errors[20].acp.wSlverr});
        res.insert_or_assign("errors[20].acp.wDecerr", DumpEntry{errors[20].acp.wDecerr});
        res.insert_or_assign("errors[20].axil", DumpEntry{errors[20].axil});
        res.insert_or_assign("errors[20].axil.rSlverr", DumpEntry{errors[20].axil.rSlverr});
        res.insert_or_assign("errors[20].axil.rDecerr", DumpEntry{errors[20].axil.rDecerr});
        res.insert_or_assign("errors[20].axil.wSlverr", DumpEntry{errors[20].axil.wSlverr});
        res.insert_or_assign("errors[20].axil.wDecerr", DumpEntry{errors[20].axil.wDecerr});
        res.insert_or_assign("errors[21].acp", DumpEntry{errors[21].acp});
        res.insert_or_assign("errors[21].acp.rSlverr", DumpEntry{errors[21].acp.rSlverr});
        res.insert_or_assign("errors[21].acp.rDecerr", DumpEntry{errors[21].acp.rDecerr});
        res.insert_or_assign("errors[21].acp.wSlverr", DumpEntry{errors[21].acp.wSlverr});
        res.insert_or_assign("errors[21].acp.wDecerr", DumpEntry{errors[21].acp.wDecerr});
        res.insert_or_assign("errors[21].axil", DumpEntry{errors[21].axil});
        res.insert_or_assign("errors[21].axil.rSlverr", DumpEntry{errors[21].axil.rSlverr});
        res.insert_or_assign("errors[21].axil.rDecerr", DumpEntry{errors[21].axil.rDecerr});
        res.insert_or_assign("errors[21].axil.wSlverr", DumpEntry{errors[21].axil.wSlverr});
        res.insert_or_assign("errors[21].axil.wDecerr", DumpEntry{errors[21].axil.wDecerr});
        res.insert_or_assign("errors[22].acp", DumpEntry{errors[22].acp});
        res.insert_or_assign("errors[22].acp.rSlverr", DumpEntry{errors[22].acp.rSlverr});
        res.insert_or_assign("errors[22].acp.rDecerr", DumpEntry{errors[22].acp.rDecerr});
        res.insert_or_assign("errors[22].acp.wSlverr", DumpEntry{errors[22].acp.wSlverr});
        res.insert_or_assign("errors[22].acp.wDecerr", DumpEntry{errors[22].acp.wDecerr});
        res.insert_or_assign("errors[22].axil", DumpEntry{errors[22].axil});
        res.insert_or_assign("errors[22].axil.rSlverr", DumpEntry{errors[22].axil.rSlverr});
        res.insert_or_assign("errors[22].axil.rDecerr", DumpEntry{errors[22].axil.rDecerr});
        res.insert_or_assign("errors[22].axil.wSlverr", DumpEntry{errors[22].axil.wSlverr});
        res.insert_or_assign("errors[22].axil.wDecerr", DumpEntry{errors[22].axil.wDecerr});
        res.insert_or_assign("errors[23].acp", DumpEntry{errors[23].acp});
        res.insert_or_assign("errors[23].acp.rSlverr", DumpEntry{errors[23].acp.rSlverr});
        res.insert_or_assign("errors[23].acp.rDecerr", DumpEntry{errors[23].acp.rDecerr});
        res.insert_or_assign("errors[23].acp.wSlverr", DumpEntry{errors[23].acp.wSlverr});
        res.insert_or_assign("errors[23].acp.wDecerr", DumpEntry{errors[23].acp.wDecerr});
        res.insert_or_assign("errors[23].axil", DumpEntry{errors[23].axil});
        res.insert_or_assign("errors[23].axil.rSlverr", DumpEntry{errors[23].axil.rSlverr});
        res.insert_or_assign("errors[23].axil.rDecerr", DumpEntry{errors[23].axil.rDecerr});
        res.insert_or_assign("errors[23].axil.wSlverr", DumpEntry{errors[23].axil.wSlverr});
        res.insert_or_assign("errors[23].axil.wDecerr", DumpEntry{errors[23].axil.wDecerr});
        res.insert_or_assign("errors[24].acp", DumpEntry{errors[24].acp});
        res.insert_or_assign("errors[24].acp.rSlverr", DumpEntry{errors[24].acp.rSlverr});
        res.insert_or_assign("errors[24].acp.rDecerr", DumpEntry{errors[24].acp.rDecerr});
        res.insert_or_assign("errors[24].acp.wSlverr", DumpEntry{errors[24].acp.wSlverr});
        res.insert_or_assign("errors[24].acp.wDecerr", DumpEntry{errors[24].acp.wDecerr});
        res.insert_or_assign("errors[24].axil", DumpEntry{errors[24].axil});
        res.insert_or_assign("errors[24].axil.rSlverr", DumpEntry{errors[24].axil.rSlverr});
        res.insert_or_assign("errors[24].axil.rDecerr", DumpEntry{errors[24].axil.rDecerr});
        res.insert_or_assign("errors[24].axil.wSlverr", DumpEntry{errors[24].axil.wSlverr});
        res.insert_or_assign("errors[24].axil.wDecerr", DumpEntry{errors[24].axil.wDecerr});
        res.insert_or_assign("errors[25].acp", DumpEntry{errors[25].acp});
        res.insert_or_assign("errors[25].acp.rSlverr", DumpEntry{errors[25].acp.rSlverr});
        res.insert_or_assign("errors[25].acp.rDecerr", DumpEntry{errors[25].acp.rDecerr});
        res.insert_or_assign("errors[25].acp.wSlverr", DumpEntry{errors[25].acp.wSlverr});
        res.insert_or_assign("errors[25].acp.wDecerr", DumpEntry{errors[25].acp.wDecerr});
        res.insert_or_assign("errors[25].axil", DumpEntry{errors[25].axil});
        res.insert_or_assign("errors[25].axil.rSlverr", DumpEntry{errors[25].axil.rSlverr});
        res.insert_or_assign("errors[25].axil.rDecerr", DumpEntry{errors[25].axil.rDecerr});
        res.insert_or_assign("errors[25].axil.wSlverr", DumpEntry{errors[25].axil.wSlverr});
        res.insert_or_assign("errors[25].axil.wDecerr", DumpEntry{errors[25].axil.wDecerr});
        res.insert_or_assign("errors[26].acp", DumpEntry{errors[26].acp});
        res.insert_or_assign("errors[26].acp.rSlverr", DumpEntry{errors[26].acp.rSlverr});
        res.insert_or_assign("errors[26].acp.rDecerr", DumpEntry{errors[26].acp.rDecerr});
        res.insert_or_assign("errors[26].acp.wSlverr", DumpEntry{errors[26].acp.wSlverr});
        res.insert_or_assign("errors[26].acp.wDecerr", DumpEntry{errors[26].acp.wDecerr});
        res.insert_or_assign("errors[26].axil", DumpEntry{errors[26].axil});
        res.insert_or_assign("errors[26].axil.rSlverr", DumpEntry{errors[26].axil.rSlverr});
        res.insert_or_assign("errors[26].axil.rDecerr", DumpEntry{errors[26].axil.rDecerr});
        res.insert_or_assign("errors[26].axil.wSlverr", DumpEntry{errors[26].axil.wSlverr});
        res.insert_or_assign("errors[26].axil.wDecerr", DumpEntry{errors[26].axil.wDecerr});
        res.insert_or_assign("errors[27].acp", DumpEntry{errors[27].acp});
        res.insert_or_assign("errors[27].acp.rSlverr", DumpEntry{errors[27].acp.rSlverr});
        res.insert_or_assign("errors[27].acp.rDecerr", DumpEntry{errors[27].acp.rDecerr});
        res.insert_or_assign("errors[27].acp.wSlverr", DumpEntry{errors[27].acp.wSlverr});
        res.insert_or_assign("errors[27].acp.wDecerr", DumpEntry{errors[27].acp.wDecerr});
        res.insert_or_assign("errors[27].axil", DumpEntry{errors[27].axil});
        res.insert_or_assign("errors[27].axil.rSlverr", DumpEntry{errors[27].axil.rSlverr});
        res.insert_or_assign("errors[27].axil.rDecerr", DumpEntry{errors[27].axil.rDecerr});
        res.insert_or_assign("errors[27].axil.wSlverr", DumpEntry{errors[27].axil.wSlverr});
        res.insert_or_assign("errors[27].axil.wDecerr", DumpEntry{errors[27].axil.wDecerr});
        res.insert_or_assign("errors[28].acp", DumpEntry{errors[28].acp});
        res.insert_or_assign("errors[28].acp.rSlverr", DumpEntry{errors[28].acp.rSlverr});
        res.insert_or_assign("errors[28].acp.rDecerr", DumpEntry{errors[28].acp.rDecerr});
        res.insert_or_assign("errors[28].acp.wSlverr", DumpEntry{errors[28].acp.wSlverr});
        res.insert_or_assign("errors[28].acp.wDecerr", DumpEntry{errors[28].acp.wDecerr});
        res.insert_or_assign("errors[28].axil", DumpEntry{errors[28].axil});
        res.insert_or_assign("errors[28].axil.rSlverr", DumpEntry{errors[28].axil.rSlverr});
        res.insert_or_assign("errors[28].axil.rDecerr", DumpEntry{errors[28].axil.rDecerr});
        res.insert_or_assign("errors[28].axil.wSlverr", DumpEntry{errors[28].axil.wSlverr});
        res.insert_or_assign("errors[28].axil.wDecerr", DumpEntry{errors[28].axil.wDecerr});
        res.insert_or_assign("errors[29].acp", DumpEntry{errors[29].acp});
        res.insert_or_assign("errors[29].acp.rSlverr", DumpEntry{errors[29].acp.rSlverr});
        res.insert_or_assign("errors[29].acp.rDecerr", DumpEntry{errors[29].acp.rDecerr});
        res.insert_or_assign("errors[29].acp.wSlverr", DumpEntry{errors[29].acp.wSlverr});
        res.insert_or_assign("errors[29].acp.wDecerr", DumpEntry{errors[29].acp.wDecerr});
        res.insert_or_assign("errors[29].axil", DumpEntry{errors[29].axil});
        res.insert_or_assign("errors[29].axil.rSlverr", DumpEntry{errors[29].axil.rSlverr});
        res.insert_or_assign("errors[29].axil.rDecerr", DumpEntry{errors[29].axil.rDecerr});
        res.insert_or_assign("errors[29].axil.wSlverr", DumpEntry{errors[29].axil.wSlverr});
        res.insert_or_assign("errors[29].axil.wDecerr", DumpEntry{errors[29].axil.wDecerr});
        res.insert_or_assign("errors[30].acp", DumpEntry{errors[30].acp});
        res.insert_or_assign("errors[30].acp.rSlverr", DumpEntry{errors[30].acp.rSlverr});
        res.insert_or_assign("errors[30].acp.rDecerr", DumpEntry{errors[30].acp.rDecerr});
        res.insert_or_assign("errors[30].acp.wSlverr", DumpEntry{errors[30].acp.wSlverr});
        res.insert_or_assign("errors[30].acp.wDecerr", DumpEntry{errors[30].acp.wDecerr});
        res.insert_or_assign("errors[30].axil", DumpEntry{errors[30].axil});
        res.insert_or_assign("errors[30].axil.rSlverr", DumpEntry{errors[30].axil.rSlverr});
        res.insert_or_assign("errors[30].axil.rDecerr", DumpEntry{errors[30].axil.rDecerr});
        res.insert_or_assign("errors[30].axil.wSlverr", DumpEntry{errors[30].axil.wSlverr});
        res.insert_or_assign("errors[30].axil.wDecerr", DumpEntry{errors[30].axil.wDecerr});
        res.insert_or_assign("errors[31].acp", DumpEntry{errors[31].acp});
        res.insert_or_assign("errors[31].acp.rSlverr", DumpEntry{errors[31].acp.rSlverr});
        res.insert_or_assign("errors[31].acp.rDecerr", DumpEntry{errors[31].acp.rDecerr});
        res.insert_or_assign("errors[31].acp.wSlverr", DumpEntry{errors[31].acp.wSlverr});
        res.insert_or_assign("errors[31].acp.wDecerr", DumpEntry{errors[31].acp.wDecerr});
        res.insert_or_assign("errors[31].axil", DumpEntry{errors[31].axil});
        res.insert_or_assign("errors[31].axil.rSlverr", DumpEntry{errors[31].axil.rSlverr});
        res.insert_or_assign("errors[31].axil.rDecerr", DumpEntry{errors[31].axil.rDecerr});
        res.insert_or_assign("errors[31].axil.wSlverr", DumpEntry{errors[31].axil.wSlverr});
        res.insert_or_assign("errors[31].axil.wDecerr", DumpEntry{errors[31].axil.wDecerr});
        res.insert_or_assign("errors[32].acp", DumpEntry{errors[32].acp});
        res.insert_or_assign("errors[32].acp.rSlverr", DumpEntry{errors[32].acp.rSlverr});
        res.insert_or_assign("errors[32].acp.rDecerr", DumpEntry{errors[32].acp.rDecerr});
        res.insert_or_assign("errors[32].acp.wSlverr", DumpEntry{errors[32].acp.wSlverr});
        res.insert_or_assign("errors[32].acp.wDecerr", DumpEntry{errors[32].acp.wDecerr});
        res.insert_or_assign("errors[32].axil", DumpEntry{errors[32].axil});
        res.insert_or_assign("errors[32].axil.rSlverr", DumpEntry{errors[32].axil.rSlverr});
        res.insert_or_assign("errors[32].axil.rDecerr", DumpEntry{errors[32].axil.rDecerr});
        res.insert_or_assign("errors[32].axil.wSlverr", DumpEntry{errors[32].axil.wSlverr});
        res.insert_or_assign("errors[32].axil.wDecerr", DumpEntry{errors[32].axil.wDecerr});
        res.insert_or_assign("errors[33].acp", DumpEntry{errors[33].acp});
        res.insert_or_assign("errors[33].acp.rSlverr", DumpEntry{errors[33].acp.rSlverr});
        res.insert_or_assign("errors[33].acp.rDecerr", DumpEntry{errors[33].acp.rDecerr});
        res.insert_or_assign("errors[33].acp.wSlverr", DumpEntry{errors[33].acp.wSlverr});
        res.insert_or_assign("errors[33].acp.wDecerr", DumpEntry{errors[33].acp.wDecerr});
        res.insert_or_assign("errors[33].axil", DumpEntry{errors[33].axil});
        res.insert_or_assign("errors[33].axil.rSlverr", DumpEntry{errors[33].axil.rSlverr});
        res.insert_or_assign("errors[33].axil.rDecerr", DumpEntry{errors[33].axil.rDecerr});
        res.insert_or_assign("errors[33].axil.wSlverr", DumpEntry{errors[33].axil.wSlverr});
        res.insert_or_assign("errors[33].axil.wDecerr", DumpEntry{errors[33].axil.wDecerr});
        res.insert_or_assign("errors[34].acp", DumpEntry{errors[34].acp});
        res.insert_or_assign("errors[34].acp.rSlverr", DumpEntry{errors[34].acp.rSlverr});
        res.insert_or_assign("errors[34].acp.rDecerr", DumpEntry{errors[34].acp.rDecerr});
        res.insert_or_assign("errors[34].acp.wSlverr", DumpEntry{errors[34].acp.wSlverr});
        res.insert_or_assign("errors[34].acp.wDecerr", DumpEntry{errors[34].acp.wDecerr});
        res.insert_or_assign("errors[34].axil", DumpEntry{errors[34].axil});
        res.insert_or_assign("errors[34].axil.rSlverr", DumpEntry{errors[34].axil.rSlverr});
        res.insert_or_assign("errors[34].axil.rDecerr", DumpEntry{errors[34].axil.rDecerr});
        res.insert_or_assign("errors[34].axil.wSlverr", DumpEntry{errors[34].axil.wSlverr});
        res.insert_or_assign("errors[34].axil.wDecerr", DumpEntry{errors[34].axil.wDecerr});
        res.insert_or_assign("errors[35].acp", DumpEntry{errors[35].acp});
        res.insert_or_assign("errors[35].acp.rSlverr", DumpEntry{errors[35].acp.rSlverr});
        res.insert_or_assign("errors[35].acp.rDecerr", DumpEntry{errors[35].acp.rDecerr});
        res.insert_or_assign("errors[35].acp.wSlverr", DumpEntry{errors[35].acp.wSlverr});
        res.insert_or_assign("errors[35].acp.wDecerr", DumpEntry{errors[35].acp.wDecerr});
        res.insert_or_assign("errors[35].axil", DumpEntry{errors[35].axil});
        res.insert_or_assign("errors[35].axil.rSlverr", DumpEntry{errors[35].axil.rSlverr});
        res.insert_or_assign("errors[35].axil.rDecerr", DumpEntry{errors[35].axil.rDecerr});
        res.insert_or_assign("errors[35].axil.wSlverr", DumpEntry{errors[35].axil.wSlverr});
        res.insert_or_assign("errors[35].axil.wDecerr", DumpEntry{errors[35].axil.wDecerr});
        res.insert_or_assign("errors[36].acp", DumpEntry{errors[36].acp});
        res.insert_or_assign("errors[36].acp.rSlverr", DumpEntry{errors[36].acp.rSlverr});
        res.insert_or_assign("errors[36].acp.rDecerr", DumpEntry{errors[36].acp.rDecerr});
        res.insert_or_assign("errors[36].acp.wSlverr", DumpEntry{errors[36].acp.wSlverr});
        res.insert_or_assign("errors[36].acp.wDecerr", DumpEntry{errors[36].acp.wDecerr});
        res.insert_or_assign("errors[36].axil", DumpEntry{errors[36].axil});
        res.insert_or_assign("errors[36].axil.rSlverr", DumpEntry{errors[36].axil.rSlverr});
        res.insert_or_assign("errors[36].axil.rDecerr", DumpEntry{errors[36].axil.rDecerr});
        res.insert_or_assign("errors[36].axil.wSlverr", DumpEntry{errors[36].axil.wSlverr});
        res.insert_or_assign("errors[36].axil.wDecerr", DumpEntry{errors[36].axil.wDecerr});
        res.insert_or_assign("errors[37].acp", DumpEntry{errors[37].acp});
        res.insert_or_assign("errors[37].acp.rSlverr", DumpEntry{errors[37].acp.rSlverr});
        res.insert_or_assign("errors[37].acp.rDecerr", DumpEntry{errors[37].acp.rDecerr});
        res.insert_or_assign("errors[37].acp.wSlverr", DumpEntry{errors[37].acp.wSlverr});
        res.insert_or_assign("errors[37].acp.wDecerr", DumpEntry{errors[37].acp.wDecerr});
        res.insert_or_assign("errors[37].axil", DumpEntry{errors[37].axil});
        res.insert_or_assign("errors[37].axil.rSlverr", DumpEntry{errors[37].axil.rSlverr});
        res.insert_or_assign("errors[37].axil.rDecerr", DumpEntry{errors[37].axil.rDecerr});
        res.insert_or_assign("errors[37].axil.wSlverr", DumpEntry{errors[37].axil.wSlverr});
        res.insert_or_assign("errors[37].axil.wDecerr", DumpEntry{errors[37].axil.wDecerr});
        res.insert_or_assign("errors[38].acp", DumpEntry{errors[38].acp});
        res.insert_or_assign("errors[38].acp.rSlverr", DumpEntry{errors[38].acp.rSlverr});
        res.insert_or_assign("errors[38].acp.rDecerr", DumpEntry{errors[38].acp.rDecerr});
        res.insert_or_assign("errors[38].acp.wSlverr", DumpEntry{errors[38].acp.wSlverr});
        res.insert_or_assign("errors[38].acp.wDecerr", DumpEntry{errors[38].acp.wDecerr});
        res.insert_or_assign("errors[38].axil", DumpEntry{errors[38].axil});
        res.insert_or_assign("errors[38].axil.rSlverr", DumpEntry{errors[38].axil.rSlverr});
        res.insert_or_assign("errors[38].axil.rDecerr", DumpEntry{errors[38].axil.rDecerr});
        res.insert_or_assign("errors[38].axil.wSlverr", DumpEntry{errors[38].axil.wSlverr});
        res.insert_or_assign("errors[38].axil.wDecerr", DumpEntry{errors[38].axil.wDecerr});
        res.insert_or_assign("errors[39].acp", DumpEntry{errors[39].acp});
        res.insert_or_assign("errors[39].acp.rSlverr", DumpEntry{errors[39].acp.rSlverr});
        res.insert_or_assign("errors[39].acp.rDecerr", DumpEntry{errors[39].acp.rDecerr});
        res.insert_or_assign("errors[39].acp.wSlverr", DumpEntry{errors[39].acp.wSlverr});
        res.insert_or_assign("errors[39].acp.wDecerr", DumpEntry{errors[39].acp.wDecerr});
        res.insert_or_assign("errors[39].axil", DumpEntry{errors[39].axil});
        res.insert_or_assign("errors[39].axil.rSlverr", DumpEntry{errors[39].axil.rSlverr});
        res.insert_or_assign("errors[39].axil.rDecerr", DumpEntry{errors[39].axil.rDecerr});
        res.insert_or_assign("errors[39].axil.wSlverr", DumpEntry{errors[39].axil.wSlverr});
        res.insert_or_assign("errors[39].axil.wDecerr", DumpEntry{errors[39].axil.wDecerr});
        res.insert_or_assign("errors[40].acp", DumpEntry{errors[40].acp});
        res.insert_or_assign("errors[40].acp.rSlverr", DumpEntry{errors[40].acp.rSlverr});
        res.insert_or_assign("errors[40].acp.rDecerr", DumpEntry{errors[40].acp.rDecerr});
        res.insert_or_assign("errors[40].acp.wSlverr", DumpEntry{errors[40].acp.wSlverr});
        res.insert_or_assign("errors[40].acp.wDecerr", DumpEntry{errors[40].acp.wDecerr});
        res.insert_or_assign("errors[40].axil", DumpEntry{errors[40].axil});
        res.insert_or_assign("errors[40].axil.rSlverr", DumpEntry{errors[40].axil.rSlverr});
        res.insert_or_assign("errors[40].axil.rDecerr", DumpEntry{errors[40].axil.rDecerr});
        res.insert_or_assign("errors[40].axil.wSlverr", DumpEntry{errors[40].axil.wSlverr});
        res.insert_or_assign("errors[40].axil.wDecerr", DumpEntry{errors[40].axil.wDecerr});
        res.insert_or_assign("errors[41].acp", DumpEntry{errors[41].acp});
        res.insert_or_assign("errors[41].acp.rSlverr", DumpEntry{errors[41].acp.rSlverr});
        res.insert_or_assign("errors[41].acp.rDecerr", DumpEntry{errors[41].acp.rDecerr});
        res.insert_or_assign("errors[41].acp.wSlverr", DumpEntry{errors[41].acp.wSlverr});
        res.insert_or_assign("errors[41].acp.wDecerr", DumpEntry{errors[41].acp.wDecerr});
        res.insert_or_assign("errors[41].axil", DumpEntry{errors[41].axil});
        res.insert_or_assign("errors[41].axil.rSlverr", DumpEntry{errors[41].axil.rSlverr});
        res.insert_or_assign("errors[41].axil.rDecerr", DumpEntry{errors[41].axil.rDecerr});
        res.insert_or_assign("errors[41].axil.wSlverr", DumpEntry{errors[41].axil.wSlverr});
        res.insert_or_assign("errors[41].axil.wDecerr", DumpEntry{errors[41].axil.wDecerr});
        res.insert_or_assign("errors[42].acp", DumpEntry{errors[42].acp});
        res.insert_or_assign("errors[42].acp.rSlverr", DumpEntry{errors[42].acp.rSlverr});
        res.insert_or_assign("errors[42].acp.rDecerr", DumpEntry{errors[42].acp.rDecerr});
        res.insert_or_assign("errors[42].acp.wSlverr", DumpEntry{errors[42].acp.wSlverr});
        res.insert_or_assign("errors[42].acp.wDecerr", DumpEntry{errors[42].acp.wDecerr});
        res.insert_or_assign("errors[42].axil", DumpEntry{errors[42].axil});
        res.insert_or_assign("errors[42].axil.rSlverr", DumpEntry{errors[42].axil.rSlverr});
        res.insert_or_assign("errors[42].axil.rDecerr", DumpEntry{errors[42].axil.rDecerr});
        res.insert_or_assign("errors[42].axil.wSlverr", DumpEntry{errors[42].axil.wSlverr});
        res.insert_or_assign("errors[42].axil.wDecerr", DumpEntry{errors[42].axil.wDecerr});
        res.insert_or_assign("errors[43].acp", DumpEntry{errors[43].acp});
        res.insert_or_assign("errors[43].acp.rSlverr", DumpEntry{errors[43].acp.rSlverr});
        res.insert_or_assign("errors[43].acp.rDecerr", DumpEntry{errors[43].acp.rDecerr});
        res.insert_or_assign("errors[43].acp.wSlverr", DumpEntry{errors[43].acp.wSlverr});
        res.insert_or_assign("errors[43].acp.wDecerr", DumpEntry{errors[43].acp.wDecerr});
        res.insert_or_assign("errors[43].axil", DumpEntry{errors[43].axil});
        res.insert_or_assign("errors[43].axil.rSlverr", DumpEntry{errors[43].axil.rSlverr});
        res.insert_or_assign("errors[43].axil.rDecerr", DumpEntry{errors[43].axil.rDecerr});
        res.insert_or_assign("errors[43].axil.wSlverr", DumpEntry{errors[43].axil.wSlverr});
        res.insert_or_assign("errors[43].axil.wDecerr", DumpEntry{errors[43].axil.wDecerr});
        res.insert_or_assign("errors[44].acp", DumpEntry{errors[44].acp});
        res.insert_or_assign("errors[44].acp.rSlverr", DumpEntry{errors[44].acp.rSlverr});
        res.insert_or_assign("errors[44].acp.rDecerr", DumpEntry{errors[44].acp.rDecerr});
        res.insert_or_assign("errors[44].acp.wSlverr", DumpEntry{errors[44].acp.wSlverr});
        res.insert_or_assign("errors[44].acp.wDecerr", DumpEntry{errors[44].acp.wDecerr});
        res.insert_or_assign("errors[44].axil", DumpEntry{errors[44].axil});
        res.insert_or_assign("errors[44].axil.rSlverr", DumpEntry{errors[44].axil.rSlverr});
        res.insert_or_assign("errors[44].axil.rDecerr", DumpEntry{errors[44].axil.rDecerr});
        res.insert_or_assign("errors[44].axil.wSlverr", DumpEntry{errors[44].axil.wSlverr});
        res.insert_or_assign("errors[44].axil.wDecerr", DumpEntry{errors[44].axil.wDecerr});
        res.insert_or_assign("errors[45].acp", DumpEntry{errors[45].acp});
        res.insert_or_assign("errors[45].acp.rSlverr", DumpEntry{errors[45].acp.rSlverr});
        res.insert_or_assign("errors[45].acp.rDecerr", DumpEntry{errors[45].acp.rDecerr});
        res.insert_or_assign("errors[45].acp.wSlverr", DumpEntry{errors[45].acp.wSlverr});
        res.insert_or_assign("errors[45].acp.wDecerr", DumpEntry{errors[45].acp.wDecerr});
        res.insert_or_assign("errors[45].axil", DumpEntry{errors[45].axil});
        res.insert_or_assign("errors[45].axil.rSlverr", DumpEntry{errors[45].axil.rSlverr});
        res.insert_or_assign("errors[45].axil.rDecerr", DumpEntry{errors[45].axil.rDecerr});
        res.insert_or_assign("errors[45].axil.wSlverr", DumpEntry{errors[45].axil.wSlverr});
        res.insert_or_assign("errors[45].axil.wDecerr", DumpEntry{errors[45].axil.wDecerr});
        res.insert_or_assign("errors[46].acp", DumpEntry{errors[46].acp});
        res.insert_or_assign("errors[46].acp.rSlverr", DumpEntry{errors[46].acp.rSlverr});
        res.insert_or_assign("errors[46].acp.rDecerr", DumpEntry{errors[46].acp.rDecerr});
        res.insert_or_assign("errors[46].acp.wSlverr", DumpEntry{errors[46].acp.wSlverr});
        res.insert_or_assign("errors[46].acp.wDecerr", DumpEntry{errors[46].acp.wDecerr});
        res.insert_or_assign("errors[46].axil", DumpEntry{errors[46].axil});
        res.insert_or_assign("errors[46].axil.rSlverr", DumpEntry{errors[46].axil.rSlverr});
        res.insert_or_assign("errors[46].axil.rDecerr", DumpEntry{errors[46].axil.rDecerr});
        res.insert_or_assign("errors[46].axil.wSlverr", DumpEntry{errors[46].axil.wSlverr});
        res.insert_or_assign("errors[46].axil.wDecerr", DumpEntry{errors[46].axil.wDecerr});
        res.insert_or_assign("errors[47].acp", DumpEntry{errors[47].acp});
        res.insert_or_assign("errors[47].acp.rSlverr", DumpEntry{errors[47].acp.rSlverr});
        res.insert_or_assign("errors[47].acp.rDecerr", DumpEntry{errors[47].acp.rDecerr});
        res.insert_or_assign("errors[47].acp.wSlverr", DumpEntry{errors[47].acp.wSlverr});
        res.insert_or_assign("errors[47].acp.wDecerr", DumpEntry{errors[47].acp.wDecerr});
        res.insert_or_assign("errors[47].axil", DumpEntry{errors[47].axil});
        res.insert_or_assign("errors[47].axil.rSlverr", DumpEntry{errors[47].axil.rSlverr});
        res.insert_or_assign("errors[47].axil.rDecerr", DumpEntry{errors[47].axil.rDecerr});
        res.insert_or_assign("errors[47].axil.wSlverr", DumpEntry{errors[47].axil.wSlverr});
        res.insert_or_assign("errors[47].axil.wDecerr", DumpEntry{errors[47].axil.wDecerr});
        res.insert_or_assign("errors[48].acp", DumpEntry{errors[48].acp});
        res.insert_or_assign("errors[48].acp.rSlverr", DumpEntry{errors[48].acp.rSlverr});
        res.insert_or_assign("errors[48].acp.rDecerr", DumpEntry{errors[48].acp.rDecerr});
        res.insert_or_assign("errors[48].acp.wSlverr", DumpEntry{errors[48].acp.wSlverr});
        res.insert_or_assign("errors[48].acp.wDecerr", DumpEntry{errors[48].acp.wDecerr});
        res.insert_or_assign("errors[48].axil", DumpEntry{errors[48].axil});
        res.insert_or_assign("errors[48].axil.rSlverr", DumpEntry{errors[48].axil.rSlverr});
        res.insert_or_assign("errors[48].axil.rDecerr", DumpEntry{errors[48].axil.rDecerr});
        res.insert_or_assign("errors[48].axil.wSlverr", DumpEntry{errors[48].axil.wSlverr});
        res.insert_or_assign("errors[48].axil.wDecerr", DumpEntry{errors[48].axil.wDecerr});
        res.insert_or_assign("errors[49].acp", DumpEntry{errors[49].acp});
        res.insert_or_assign("errors[49].acp.rSlverr", DumpEntry{errors[49].acp.rSlverr});
        res.insert_or_assign("errors[49].acp.rDecerr", DumpEntry{errors[49].acp.rDecerr});
        res.insert_or_assign("errors[49].acp.wSlverr", DumpEntry{errors[49].acp.wSlverr});
        res.insert_or_assign("errors[49].acp.wDecerr", DumpEntry{errors[49].acp.wDecerr});
        res.insert_or_assign("errors[49].axil", DumpEntry{errors[49].axil});
        res.insert_or_assign("errors[49].axil.rSlverr", DumpEntry{errors[49].axil.rSlverr});
        res.insert_or_assign("errors[49].axil.rDecerr", DumpEntry{errors[49].axil.rDecerr});
        res.insert_or_assign("errors[49].axil.wSlverr", DumpEntry{errors[49].axil.wSlverr});
        res.insert_or_assign("errors[49].axil.wDecerr", DumpEntry{errors[49].axil.wDecerr});
        res.insert_or_assign("errors[50].acp", DumpEntry{errors[50].acp});
        res.insert_or_assign("errors[50].acp.rSlverr", DumpEntry{errors[50].acp.rSlverr});
        res.insert_or_assign("errors[50].acp.rDecerr", DumpEntry{errors[50].acp.rDecerr});
        res.insert_or_assign("errors[50].acp.wSlverr", DumpEntry{errors[50].acp.wSlverr});
        res.insert_or_assign("errors[50].acp.wDecerr", DumpEntry{errors[50].acp.wDecerr});
        res.insert_or_assign("errors[50].axil", DumpEntry{errors[50].axil});
        res.insert_or_assign("errors[50].axil.rSlverr", DumpEntry{errors[50].axil.rSlverr});
        res.insert_or_assign("errors[50].axil.rDecerr", DumpEntry{errors[50].axil.rDecerr});
        res.insert_or_assign("errors[50].axil.wSlverr", DumpEntry{errors[50].axil.wSlverr});
        res.insert_or_assign("errors[50].axil.wDecerr", DumpEntry{errors[50].axil.wDecerr});
        res.insert_or_assign("errors[51].acp", DumpEntry{errors[51].acp});
        res.insert_or_assign("errors[51].acp.rSlverr", DumpEntry{errors[51].acp.rSlverr});
        res.insert_or_assign("errors[51].acp.rDecerr", DumpEntry{errors[51].acp.rDecerr});
        res.insert_or_assign("errors[51].acp.wSlverr", DumpEntry{errors[51].acp.wSlverr});
        res.insert_or_assign("errors[51].acp.wDecerr", DumpEntry{errors[51].acp.wDecerr});
        res.insert_or_assign("errors[51].axil", DumpEntry{errors[51].axil});
        res.insert_or_assign("errors[51].axil.rSlverr", DumpEntry{errors[51].axil.rSlverr});
        res.insert_or_assign("errors[51].axil.rDecerr", DumpEntry{errors[51].axil.rDecerr});
        res.insert_or_assign("errors[51].axil.wSlverr", DumpEntry{errors[51].axil.wSlverr});
        res.insert_or_assign("errors[51].axil.wDecerr", DumpEntry{errors[51].axil.wDecerr});
        res.insert_or_assign("errors[52].acp", DumpEntry{errors[52].acp});
        res.insert_or_assign("errors[52].acp.rSlverr", DumpEntry{errors[52].acp.rSlverr});
        res.insert_or_assign("errors[52].acp.rDecerr", DumpEntry{errors[52].acp.rDecerr});
        res.insert_or_assign("errors[52].acp.wSlverr", DumpEntry{errors[52].acp.wSlverr});
        res.insert_or_assign("errors[52].acp.wDecerr", DumpEntry{errors[52].acp.wDecerr});
        res.insert_or_assign("errors[52].axil", DumpEntry{errors[52].axil});
        res.insert_or_assign("errors[52].axil.rSlverr", DumpEntry{errors[52].axil.rSlverr});
        res.insert_or_assign("errors[52].axil.rDecerr", DumpEntry{errors[52].axil.rDecerr});
        res.insert_or_assign("errors[52].axil.wSlverr", DumpEntry{errors[52].axil.wSlverr});
        res.insert_or_assign("errors[52].axil.wDecerr", DumpEntry{errors[52].axil.wDecerr});
        res.insert_or_assign("errors[53].acp", DumpEntry{errors[53].acp});
        res.insert_or_assign("errors[53].acp.rSlverr", DumpEntry{errors[53].acp.rSlverr});
        res.insert_or_assign("errors[53].acp.rDecerr", DumpEntry{errors[53].acp.rDecerr});
        res.insert_or_assign("errors[53].acp.wSlverr", DumpEntry{errors[53].acp.wSlverr});
        res.insert_or_assign("errors[53].acp.wDecerr", DumpEntry{errors[53].acp.wDecerr});
        res.insert_or_assign("errors[53].axil", DumpEntry{errors[53].axil});
        res.insert_or_assign("errors[53].axil.rSlverr", DumpEntry{errors[53].axil.rSlverr});
        res.insert_or_assign("errors[53].axil.rDecerr", DumpEntry{errors[53].axil.rDecerr});
        res.insert_or_assign("errors[53].axil.wSlverr", DumpEntry{errors[53].axil.wSlverr});
        res.insert_or_assign("errors[53].axil.wDecerr", DumpEntry{errors[53].axil.wDecerr});
        res.insert_or_assign("errors[54].acp", DumpEntry{errors[54].acp});
        res.insert_or_assign("errors[54].acp.rSlverr", DumpEntry{errors[54].acp.rSlverr});
        res.insert_or_assign("errors[54].acp.rDecerr", DumpEntry{errors[54].acp.rDecerr});
        res.insert_or_assign("errors[54].acp.wSlverr", DumpEntry{errors[54].acp.wSlverr});
        res.insert_or_assign("errors[54].acp.wDecerr", DumpEntry{errors[54].acp.wDecerr});
        res.insert_or_assign("errors[54].axil", DumpEntry{errors[54].axil});
        res.insert_or_assign("errors[54].axil.rSlverr", DumpEntry{errors[54].axil.rSlverr});
        res.insert_or_assign("errors[54].axil.rDecerr", DumpEntry{errors[54].axil.rDecerr});
        res.insert_or_assign("errors[54].axil.wSlverr", DumpEntry{errors[54].axil.wSlverr});
        res.insert_or_assign("errors[54].axil.wDecerr", DumpEntry{errors[54].axil.wDecerr});
        res.insert_or_assign("errors[55].acp", DumpEntry{errors[55].acp});
        res.insert_or_assign("errors[55].acp.rSlverr", DumpEntry{errors[55].acp.rSlverr});
        res.insert_or_assign("errors[55].acp.rDecerr", DumpEntry{errors[55].acp.rDecerr});
        res.insert_or_assign("errors[55].acp.wSlverr", DumpEntry{errors[55].acp.wSlverr});
        res.insert_or_assign("errors[55].acp.wDecerr", DumpEntry{errors[55].acp.wDecerr});
        res.insert_or_assign("errors[55].axil", DumpEntry{errors[55].axil});
        res.insert_or_assign("errors[55].axil.rSlverr", DumpEntry{errors[55].axil.rSlverr});
        res.insert_or_assign("errors[55].axil.rDecerr", DumpEntry{errors[55].axil.rDecerr});
        res.insert_or_assign("errors[55].axil.wSlverr", DumpEntry{errors[55].axil.wSlverr});
        res.insert_or_assign("errors[55].axil.wDecerr", DumpEntry{errors[55].axil.wDecerr});
        res.insert_or_assign("errors[56].acp", DumpEntry{errors[56].acp});
        res.insert_or_assign("errors[56].acp.rSlverr", DumpEntry{errors[56].acp.rSlverr});
        res.insert_or_assign("errors[56].acp.rDecerr", DumpEntry{errors[56].acp.rDecerr});
        res.insert_or_assign("errors[56].acp.wSlverr", DumpEntry{errors[56].acp.wSlverr});
        res.insert_or_assign("errors[56].acp.wDecerr", DumpEntry{errors[56].acp.wDecerr});
        res.insert_or_assign("errors[56].axil", DumpEntry{errors[56].axil});
        res.insert_or_assign("errors[56].axil.rSlverr", DumpEntry{errors[56].axil.rSlverr});
        res.insert_or_assign("errors[56].axil.rDecerr", DumpEntry{errors[56].axil.rDecerr});
        res.insert_or_assign("errors[56].axil.wSlverr", DumpEntry{errors[56].axil.wSlverr});
        res.insert_or_assign("errors[56].axil.wDecerr", DumpEntry{errors[56].axil.wDecerr});
        res.insert_or_assign("errors[57].acp", DumpEntry{errors[57].acp});
        res.insert_or_assign("errors[57].acp.rSlverr", DumpEntry{errors[57].acp.rSlverr});
        res.insert_or_assign("errors[57].acp.rDecerr", DumpEntry{errors[57].acp.rDecerr});
        res.insert_or_assign("errors[57].acp.wSlverr", DumpEntry{errors[57].acp.wSlverr});
        res.insert_or_assign("errors[57].acp.wDecerr", DumpEntry{errors[57].acp.wDecerr});
        res.insert_or_assign("errors[57].axil", DumpEntry{errors[57].axil});
        res.insert_or_assign("errors[57].axil.rSlverr", DumpEntry{errors[57].axil.rSlverr});
        res.insert_or_assign("errors[57].axil.rDecerr", DumpEntry{errors[57].axil.rDecerr});
        res.insert_or_assign("errors[57].axil.wSlverr", DumpEntry{errors[57].axil.wSlverr});
        res.insert_or_assign("errors[57].axil.wDecerr", DumpEntry{errors[57].axil.wDecerr});
        res.insert_or_assign("errors[58].acp", DumpEntry{errors[58].acp});
        res.insert_or_assign("errors[58].acp.rSlverr", DumpEntry{errors[58].acp.rSlverr});
        res.insert_or_assign("errors[58].acp.rDecerr", DumpEntry{errors[58].acp.rDecerr});
        res.insert_or_assign("errors[58].acp.wSlverr", DumpEntry{errors[58].acp.wSlverr});
        res.insert_or_assign("errors[58].acp.wDecerr", DumpEntry{errors[58].acp.wDecerr});
        res.insert_or_assign("errors[58].axil", DumpEntry{errors[58].axil});
        res.insert_or_assign("errors[58].axil.rSlverr", DumpEntry{errors[58].axil.rSlverr});
        res.insert_or_assign("errors[58].axil.rDecerr", DumpEntry{errors[58].axil.rDecerr});
        res.insert_or_assign("errors[58].axil.wSlverr", DumpEntry{errors[58].axil.wSlverr});
        res.insert_or_assign("errors[58].axil.wDecerr", DumpEntry{errors[58].axil.wDecerr});
        res.insert_or_assign("errors[59].acp", DumpEntry{errors[59].acp});
        res.insert_or_assign("errors[59].acp.rSlverr", DumpEntry{errors[59].acp.rSlverr});
        res.insert_or_assign("errors[59].acp.rDecerr", DumpEntry{errors[59].acp.rDecerr});
        res.insert_or_assign("errors[59].acp.wSlverr", DumpEntry{errors[59].acp.wSlverr});
        res.insert_or_assign("errors[59].acp.wDecerr", DumpEntry{errors[59].acp.wDecerr});
        res.insert_or_assign("errors[59].axil", DumpEntry{errors[59].axil});
        res.insert_or_assign("errors[59].axil.rSlverr", DumpEntry{errors[59].axil.rSlverr});
        res.insert_or_assign("errors[59].axil.rDecerr", DumpEntry{errors[59].axil.rDecerr});
        res.insert_or_assign("errors[59].axil.wSlverr", DumpEntry{errors[59].axil.wSlverr});
        res.insert_or_assign("errors[59].axil.wDecerr", DumpEntry{errors[59].axil.wDecerr});
        res.insert_or_assign("errors[60].acp", DumpEntry{errors[60].acp});
        res.insert_or_assign("errors[60].acp.rSlverr", DumpEntry{errors[60].acp.rSlverr});
        res.insert_or_assign("errors[60].acp.rDecerr", DumpEntry{errors[60].acp.rDecerr});
        res.insert_or_assign("errors[60].acp.wSlverr", DumpEntry{errors[60].acp.wSlverr});
        res.insert_or_assign("errors[60].acp.wDecerr", DumpEntry{errors[60].acp.wDecerr});
        res.insert_or_assign("errors[60].axil", DumpEntry{errors[60].axil});
        res.insert_or_assign("errors[60].axil.rSlverr", DumpEntry{errors[60].axil.rSlverr});
        res.insert_or_assign("errors[60].axil.rDecerr", DumpEntry{errors[60].axil.rDecerr});
        res.insert_or_assign("errors[60].axil.wSlverr", DumpEntry{errors[60].axil.wSlverr});
        res.insert_or_assign("errors[60].axil.wDecerr", DumpEntry{errors[60].axil.wDecerr});
        res.insert_or_assign("errors[61].acp", DumpEntry{errors[61].acp});
        res.insert_or_assign("errors[61].acp.rSlverr", DumpEntry{errors[61].acp.rSlverr});
        res.insert_or_assign("errors[61].acp.rDecerr", DumpEntry{errors[61].acp.rDecerr});
        res.insert_or_assign("errors[61].acp.wSlverr", DumpEntry{errors[61].acp.wSlverr});
        res.insert_or_assign("errors[61].acp.wDecerr", DumpEntry{errors[61].acp.wDecerr});
        res.insert_or_assign("errors[61].axil", DumpEntry{errors[61].axil});
        res.insert_or_assign("errors[61].axil.rSlverr", DumpEntry{errors[61].axil.rSlverr});
        res.insert_or_assign("errors[61].axil.rDecerr", DumpEntry{errors[61].axil.rDecerr});
        res.insert_or_assign("errors[61].axil.wSlverr", DumpEntry{errors[61].axil.wSlverr});
        res.insert_or_assign("errors[61].axil.wDecerr", DumpEntry{errors[61].axil.wDecerr});
        res.insert_or_assign("errors[62].acp", DumpEntry{errors[62].acp});
        res.insert_or_assign("errors[62].acp.rSlverr", DumpEntry{errors[62].acp.rSlverr});
        res.insert_or_assign("errors[62].acp.rDecerr", DumpEntry{errors[62].acp.rDecerr});
        res.insert_or_assign("errors[62].acp.wSlverr", DumpEntry{errors[62].acp.wSlverr});
        res.insert_or_assign("errors[62].acp.wDecerr", DumpEntry{errors[62].acp.wDecerr});
        res.insert_or_assign("errors[62].axil", DumpEntry{errors[62].axil});
        res.insert_or_assign("errors[62].axil.rSlverr", DumpEntry{errors[62].axil.rSlverr});
        res.insert_or_assign("errors[62].axil.rDecerr", DumpEntry{errors[62].axil.rDecerr});
        res.insert_or_assign("errors[62].axil.wSlverr", DumpEntry{errors[62].axil.wSlverr});
        res.insert_or_assign("errors[62].axil.wDecerr", DumpEntry{errors[62].axil.wDecerr});
        res.insert_or_assign("errors[63].acp", DumpEntry{errors[63].acp});
        res.insert_or_assign("errors[63].acp.rSlverr", DumpEntry{errors[63].acp.rSlverr});
        res.insert_or_assign("errors[63].acp.rDecerr", DumpEntry{errors[63].acp.rDecerr});
        res.insert_or_assign("errors[63].acp.wSlverr", DumpEntry{errors[63].acp.wSlverr});
        res.insert_or_assign("errors[63].acp.wDecerr", DumpEntry{errors[63].acp.wDecerr});
        res.insert_or_assign("errors[63].axil", DumpEntry{errors[63].axil});
        res.insert_or_assign("errors[63].axil.rSlverr", DumpEntry{errors[63].axil.rSlverr});
        res.insert_or_assign("errors[63].axil.rDecerr", DumpEntry{errors[63].axil.rDecerr});
        res.insert_or_assign("errors[63].axil.wSlverr", DumpEntry{errors[63].axil.wSlverr});
        res.insert_or_assign("errors[63].axil.wDecerr", DumpEntry{errors[63].axil.wDecerr});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Ddma`
    //!
    //! @param ddma A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ddma
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Ddma& ddma)
    {
        DumpMap res{ddma.base()};
        // ddma.trigPl2psLow skipped (Register is not readable).
        // ddma.trigPl2psHigh skipped (Register is not readable).
        // ddma.trigPs2plLow skipped (Register is not readable).
        // ddma.trigPs2plHigh skipped (Register is not readable).
        res.insert_or_assign("ddma.tdPl2ps[0].srcAddr", DumpEntry{ddma.tdPl2ps[0].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[0].destAddr", DumpEntry{ddma.tdPl2ps[0].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[0].wtt", DumpEntry{ddma.tdPl2ps[0].wtt});
        res.insert_or_assign("ddma.tdPl2ps[0].wtt.value", DumpEntry{ddma.tdPl2ps[0].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[1].srcAddr", DumpEntry{ddma.tdPl2ps[1].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[1].destAddr", DumpEntry{ddma.tdPl2ps[1].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[1].wtt", DumpEntry{ddma.tdPl2ps[1].wtt});
        res.insert_or_assign("ddma.tdPl2ps[1].wtt.value", DumpEntry{ddma.tdPl2ps[1].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[2].srcAddr", DumpEntry{ddma.tdPl2ps[2].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[2].destAddr", DumpEntry{ddma.tdPl2ps[2].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[2].wtt", DumpEntry{ddma.tdPl2ps[2].wtt});
        res.insert_or_assign("ddma.tdPl2ps[2].wtt.value", DumpEntry{ddma.tdPl2ps[2].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[3].srcAddr", DumpEntry{ddma.tdPl2ps[3].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[3].destAddr", DumpEntry{ddma.tdPl2ps[3].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[3].wtt", DumpEntry{ddma.tdPl2ps[3].wtt});
        res.insert_or_assign("ddma.tdPl2ps[3].wtt.value", DumpEntry{ddma.tdPl2ps[3].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[4].srcAddr", DumpEntry{ddma.tdPl2ps[4].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[4].destAddr", DumpEntry{ddma.tdPl2ps[4].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[4].wtt", DumpEntry{ddma.tdPl2ps[4].wtt});
        res.insert_or_assign("ddma.tdPl2ps[4].wtt.value", DumpEntry{ddma.tdPl2ps[4].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[5].srcAddr", DumpEntry{ddma.tdPl2ps[5].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[5].destAddr", DumpEntry{ddma.tdPl2ps[5].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[5].wtt", DumpEntry{ddma.tdPl2ps[5].wtt});
        res.insert_or_assign("ddma.tdPl2ps[5].wtt.value", DumpEntry{ddma.tdPl2ps[5].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[6].srcAddr", DumpEntry{ddma.tdPl2ps[6].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[6].destAddr", DumpEntry{ddma.tdPl2ps[6].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[6].wtt", DumpEntry{ddma.tdPl2ps[6].wtt});
        res.insert_or_assign("ddma.tdPl2ps[6].wtt.value", DumpEntry{ddma.tdPl2ps[6].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[7].srcAddr", DumpEntry{ddma.tdPl2ps[7].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[7].destAddr", DumpEntry{ddma.tdPl2ps[7].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[7].wtt", DumpEntry{ddma.tdPl2ps[7].wtt});
        res.insert_or_assign("ddma.tdPl2ps[7].wtt.value", DumpEntry{ddma.tdPl2ps[7].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[8].srcAddr", DumpEntry{ddma.tdPl2ps[8].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[8].destAddr", DumpEntry{ddma.tdPl2ps[8].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[8].wtt", DumpEntry{ddma.tdPl2ps[8].wtt});
        res.insert_or_assign("ddma.tdPl2ps[8].wtt.value", DumpEntry{ddma.tdPl2ps[8].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[9].srcAddr", DumpEntry{ddma.tdPl2ps[9].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[9].destAddr", DumpEntry{ddma.tdPl2ps[9].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[9].wtt", DumpEntry{ddma.tdPl2ps[9].wtt});
        res.insert_or_assign("ddma.tdPl2ps[9].wtt.value", DumpEntry{ddma.tdPl2ps[9].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[10].srcAddr", DumpEntry{ddma.tdPl2ps[10].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[10].destAddr", DumpEntry{ddma.tdPl2ps[10].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[10].wtt", DumpEntry{ddma.tdPl2ps[10].wtt});
        res.insert_or_assign("ddma.tdPl2ps[10].wtt.value", DumpEntry{ddma.tdPl2ps[10].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[11].srcAddr", DumpEntry{ddma.tdPl2ps[11].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[11].destAddr", DumpEntry{ddma.tdPl2ps[11].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[11].wtt", DumpEntry{ddma.tdPl2ps[11].wtt});
        res.insert_or_assign("ddma.tdPl2ps[11].wtt.value", DumpEntry{ddma.tdPl2ps[11].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[12].srcAddr", DumpEntry{ddma.tdPl2ps[12].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[12].destAddr", DumpEntry{ddma.tdPl2ps[12].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[12].wtt", DumpEntry{ddma.tdPl2ps[12].wtt});
        res.insert_or_assign("ddma.tdPl2ps[12].wtt.value", DumpEntry{ddma.tdPl2ps[12].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[13].srcAddr", DumpEntry{ddma.tdPl2ps[13].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[13].destAddr", DumpEntry{ddma.tdPl2ps[13].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[13].wtt", DumpEntry{ddma.tdPl2ps[13].wtt});
        res.insert_or_assign("ddma.tdPl2ps[13].wtt.value", DumpEntry{ddma.tdPl2ps[13].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[14].srcAddr", DumpEntry{ddma.tdPl2ps[14].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[14].destAddr", DumpEntry{ddma.tdPl2ps[14].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[14].wtt", DumpEntry{ddma.tdPl2ps[14].wtt});
        res.insert_or_assign("ddma.tdPl2ps[14].wtt.value", DumpEntry{ddma.tdPl2ps[14].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[15].srcAddr", DumpEntry{ddma.tdPl2ps[15].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[15].destAddr", DumpEntry{ddma.tdPl2ps[15].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[15].wtt", DumpEntry{ddma.tdPl2ps[15].wtt});
        res.insert_or_assign("ddma.tdPl2ps[15].wtt.value", DumpEntry{ddma.tdPl2ps[15].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[16].srcAddr", DumpEntry{ddma.tdPl2ps[16].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[16].destAddr", DumpEntry{ddma.tdPl2ps[16].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[16].wtt", DumpEntry{ddma.tdPl2ps[16].wtt});
        res.insert_or_assign("ddma.tdPl2ps[16].wtt.value", DumpEntry{ddma.tdPl2ps[16].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[17].srcAddr", DumpEntry{ddma.tdPl2ps[17].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[17].destAddr", DumpEntry{ddma.tdPl2ps[17].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[17].wtt", DumpEntry{ddma.tdPl2ps[17].wtt});
        res.insert_or_assign("ddma.tdPl2ps[17].wtt.value", DumpEntry{ddma.tdPl2ps[17].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[18].srcAddr", DumpEntry{ddma.tdPl2ps[18].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[18].destAddr", DumpEntry{ddma.tdPl2ps[18].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[18].wtt", DumpEntry{ddma.tdPl2ps[18].wtt});
        res.insert_or_assign("ddma.tdPl2ps[18].wtt.value", DumpEntry{ddma.tdPl2ps[18].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[19].srcAddr", DumpEntry{ddma.tdPl2ps[19].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[19].destAddr", DumpEntry{ddma.tdPl2ps[19].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[19].wtt", DumpEntry{ddma.tdPl2ps[19].wtt});
        res.insert_or_assign("ddma.tdPl2ps[19].wtt.value", DumpEntry{ddma.tdPl2ps[19].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[20].srcAddr", DumpEntry{ddma.tdPl2ps[20].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[20].destAddr", DumpEntry{ddma.tdPl2ps[20].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[20].wtt", DumpEntry{ddma.tdPl2ps[20].wtt});
        res.insert_or_assign("ddma.tdPl2ps[20].wtt.value", DumpEntry{ddma.tdPl2ps[20].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[21].srcAddr", DumpEntry{ddma.tdPl2ps[21].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[21].destAddr", DumpEntry{ddma.tdPl2ps[21].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[21].wtt", DumpEntry{ddma.tdPl2ps[21].wtt});
        res.insert_or_assign("ddma.tdPl2ps[21].wtt.value", DumpEntry{ddma.tdPl2ps[21].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[22].srcAddr", DumpEntry{ddma.tdPl2ps[22].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[22].destAddr", DumpEntry{ddma.tdPl2ps[22].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[22].wtt", DumpEntry{ddma.tdPl2ps[22].wtt});
        res.insert_or_assign("ddma.tdPl2ps[22].wtt.value", DumpEntry{ddma.tdPl2ps[22].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[23].srcAddr", DumpEntry{ddma.tdPl2ps[23].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[23].destAddr", DumpEntry{ddma.tdPl2ps[23].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[23].wtt", DumpEntry{ddma.tdPl2ps[23].wtt});
        res.insert_or_assign("ddma.tdPl2ps[23].wtt.value", DumpEntry{ddma.tdPl2ps[23].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[24].srcAddr", DumpEntry{ddma.tdPl2ps[24].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[24].destAddr", DumpEntry{ddma.tdPl2ps[24].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[24].wtt", DumpEntry{ddma.tdPl2ps[24].wtt});
        res.insert_or_assign("ddma.tdPl2ps[24].wtt.value", DumpEntry{ddma.tdPl2ps[24].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[25].srcAddr", DumpEntry{ddma.tdPl2ps[25].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[25].destAddr", DumpEntry{ddma.tdPl2ps[25].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[25].wtt", DumpEntry{ddma.tdPl2ps[25].wtt});
        res.insert_or_assign("ddma.tdPl2ps[25].wtt.value", DumpEntry{ddma.tdPl2ps[25].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[26].srcAddr", DumpEntry{ddma.tdPl2ps[26].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[26].destAddr", DumpEntry{ddma.tdPl2ps[26].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[26].wtt", DumpEntry{ddma.tdPl2ps[26].wtt});
        res.insert_or_assign("ddma.tdPl2ps[26].wtt.value", DumpEntry{ddma.tdPl2ps[26].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[27].srcAddr", DumpEntry{ddma.tdPl2ps[27].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[27].destAddr", DumpEntry{ddma.tdPl2ps[27].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[27].wtt", DumpEntry{ddma.tdPl2ps[27].wtt});
        res.insert_or_assign("ddma.tdPl2ps[27].wtt.value", DumpEntry{ddma.tdPl2ps[27].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[28].srcAddr", DumpEntry{ddma.tdPl2ps[28].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[28].destAddr", DumpEntry{ddma.tdPl2ps[28].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[28].wtt", DumpEntry{ddma.tdPl2ps[28].wtt});
        res.insert_or_assign("ddma.tdPl2ps[28].wtt.value", DumpEntry{ddma.tdPl2ps[28].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[29].srcAddr", DumpEntry{ddma.tdPl2ps[29].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[29].destAddr", DumpEntry{ddma.tdPl2ps[29].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[29].wtt", DumpEntry{ddma.tdPl2ps[29].wtt});
        res.insert_or_assign("ddma.tdPl2ps[29].wtt.value", DumpEntry{ddma.tdPl2ps[29].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[30].srcAddr", DumpEntry{ddma.tdPl2ps[30].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[30].destAddr", DumpEntry{ddma.tdPl2ps[30].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[30].wtt", DumpEntry{ddma.tdPl2ps[30].wtt});
        res.insert_or_assign("ddma.tdPl2ps[30].wtt.value", DumpEntry{ddma.tdPl2ps[30].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[31].srcAddr", DumpEntry{ddma.tdPl2ps[31].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[31].destAddr", DumpEntry{ddma.tdPl2ps[31].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[31].wtt", DumpEntry{ddma.tdPl2ps[31].wtt});
        res.insert_or_assign("ddma.tdPl2ps[31].wtt.value", DumpEntry{ddma.tdPl2ps[31].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[32].srcAddr", DumpEntry{ddma.tdPl2ps[32].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[32].destAddr", DumpEntry{ddma.tdPl2ps[32].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[32].wtt", DumpEntry{ddma.tdPl2ps[32].wtt});
        res.insert_or_assign("ddma.tdPl2ps[32].wtt.value", DumpEntry{ddma.tdPl2ps[32].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[33].srcAddr", DumpEntry{ddma.tdPl2ps[33].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[33].destAddr", DumpEntry{ddma.tdPl2ps[33].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[33].wtt", DumpEntry{ddma.tdPl2ps[33].wtt});
        res.insert_or_assign("ddma.tdPl2ps[33].wtt.value", DumpEntry{ddma.tdPl2ps[33].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[34].srcAddr", DumpEntry{ddma.tdPl2ps[34].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[34].destAddr", DumpEntry{ddma.tdPl2ps[34].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[34].wtt", DumpEntry{ddma.tdPl2ps[34].wtt});
        res.insert_or_assign("ddma.tdPl2ps[34].wtt.value", DumpEntry{ddma.tdPl2ps[34].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[35].srcAddr", DumpEntry{ddma.tdPl2ps[35].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[35].destAddr", DumpEntry{ddma.tdPl2ps[35].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[35].wtt", DumpEntry{ddma.tdPl2ps[35].wtt});
        res.insert_or_assign("ddma.tdPl2ps[35].wtt.value", DumpEntry{ddma.tdPl2ps[35].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[36].srcAddr", DumpEntry{ddma.tdPl2ps[36].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[36].destAddr", DumpEntry{ddma.tdPl2ps[36].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[36].wtt", DumpEntry{ddma.tdPl2ps[36].wtt});
        res.insert_or_assign("ddma.tdPl2ps[36].wtt.value", DumpEntry{ddma.tdPl2ps[36].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[37].srcAddr", DumpEntry{ddma.tdPl2ps[37].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[37].destAddr", DumpEntry{ddma.tdPl2ps[37].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[37].wtt", DumpEntry{ddma.tdPl2ps[37].wtt});
        res.insert_or_assign("ddma.tdPl2ps[37].wtt.value", DumpEntry{ddma.tdPl2ps[37].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[38].srcAddr", DumpEntry{ddma.tdPl2ps[38].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[38].destAddr", DumpEntry{ddma.tdPl2ps[38].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[38].wtt", DumpEntry{ddma.tdPl2ps[38].wtt});
        res.insert_or_assign("ddma.tdPl2ps[38].wtt.value", DumpEntry{ddma.tdPl2ps[38].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[39].srcAddr", DumpEntry{ddma.tdPl2ps[39].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[39].destAddr", DumpEntry{ddma.tdPl2ps[39].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[39].wtt", DumpEntry{ddma.tdPl2ps[39].wtt});
        res.insert_or_assign("ddma.tdPl2ps[39].wtt.value", DumpEntry{ddma.tdPl2ps[39].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[40].srcAddr", DumpEntry{ddma.tdPl2ps[40].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[40].destAddr", DumpEntry{ddma.tdPl2ps[40].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[40].wtt", DumpEntry{ddma.tdPl2ps[40].wtt});
        res.insert_or_assign("ddma.tdPl2ps[40].wtt.value", DumpEntry{ddma.tdPl2ps[40].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[41].srcAddr", DumpEntry{ddma.tdPl2ps[41].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[41].destAddr", DumpEntry{ddma.tdPl2ps[41].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[41].wtt", DumpEntry{ddma.tdPl2ps[41].wtt});
        res.insert_or_assign("ddma.tdPl2ps[41].wtt.value", DumpEntry{ddma.tdPl2ps[41].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[42].srcAddr", DumpEntry{ddma.tdPl2ps[42].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[42].destAddr", DumpEntry{ddma.tdPl2ps[42].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[42].wtt", DumpEntry{ddma.tdPl2ps[42].wtt});
        res.insert_or_assign("ddma.tdPl2ps[42].wtt.value", DumpEntry{ddma.tdPl2ps[42].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[43].srcAddr", DumpEntry{ddma.tdPl2ps[43].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[43].destAddr", DumpEntry{ddma.tdPl2ps[43].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[43].wtt", DumpEntry{ddma.tdPl2ps[43].wtt});
        res.insert_or_assign("ddma.tdPl2ps[43].wtt.value", DumpEntry{ddma.tdPl2ps[43].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[44].srcAddr", DumpEntry{ddma.tdPl2ps[44].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[44].destAddr", DumpEntry{ddma.tdPl2ps[44].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[44].wtt", DumpEntry{ddma.tdPl2ps[44].wtt});
        res.insert_or_assign("ddma.tdPl2ps[44].wtt.value", DumpEntry{ddma.tdPl2ps[44].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[45].srcAddr", DumpEntry{ddma.tdPl2ps[45].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[45].destAddr", DumpEntry{ddma.tdPl2ps[45].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[45].wtt", DumpEntry{ddma.tdPl2ps[45].wtt});
        res.insert_or_assign("ddma.tdPl2ps[45].wtt.value", DumpEntry{ddma.tdPl2ps[45].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[46].srcAddr", DumpEntry{ddma.tdPl2ps[46].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[46].destAddr", DumpEntry{ddma.tdPl2ps[46].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[46].wtt", DumpEntry{ddma.tdPl2ps[46].wtt});
        res.insert_or_assign("ddma.tdPl2ps[46].wtt.value", DumpEntry{ddma.tdPl2ps[46].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[47].srcAddr", DumpEntry{ddma.tdPl2ps[47].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[47].destAddr", DumpEntry{ddma.tdPl2ps[47].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[47].wtt", DumpEntry{ddma.tdPl2ps[47].wtt});
        res.insert_or_assign("ddma.tdPl2ps[47].wtt.value", DumpEntry{ddma.tdPl2ps[47].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[48].srcAddr", DumpEntry{ddma.tdPl2ps[48].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[48].destAddr", DumpEntry{ddma.tdPl2ps[48].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[48].wtt", DumpEntry{ddma.tdPl2ps[48].wtt});
        res.insert_or_assign("ddma.tdPl2ps[48].wtt.value", DumpEntry{ddma.tdPl2ps[48].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[49].srcAddr", DumpEntry{ddma.tdPl2ps[49].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[49].destAddr", DumpEntry{ddma.tdPl2ps[49].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[49].wtt", DumpEntry{ddma.tdPl2ps[49].wtt});
        res.insert_or_assign("ddma.tdPl2ps[49].wtt.value", DumpEntry{ddma.tdPl2ps[49].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[50].srcAddr", DumpEntry{ddma.tdPl2ps[50].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[50].destAddr", DumpEntry{ddma.tdPl2ps[50].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[50].wtt", DumpEntry{ddma.tdPl2ps[50].wtt});
        res.insert_or_assign("ddma.tdPl2ps[50].wtt.value", DumpEntry{ddma.tdPl2ps[50].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[51].srcAddr", DumpEntry{ddma.tdPl2ps[51].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[51].destAddr", DumpEntry{ddma.tdPl2ps[51].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[51].wtt", DumpEntry{ddma.tdPl2ps[51].wtt});
        res.insert_or_assign("ddma.tdPl2ps[51].wtt.value", DumpEntry{ddma.tdPl2ps[51].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[52].srcAddr", DumpEntry{ddma.tdPl2ps[52].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[52].destAddr", DumpEntry{ddma.tdPl2ps[52].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[52].wtt", DumpEntry{ddma.tdPl2ps[52].wtt});
        res.insert_or_assign("ddma.tdPl2ps[52].wtt.value", DumpEntry{ddma.tdPl2ps[52].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[53].srcAddr", DumpEntry{ddma.tdPl2ps[53].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[53].destAddr", DumpEntry{ddma.tdPl2ps[53].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[53].wtt", DumpEntry{ddma.tdPl2ps[53].wtt});
        res.insert_or_assign("ddma.tdPl2ps[53].wtt.value", DumpEntry{ddma.tdPl2ps[53].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[54].srcAddr", DumpEntry{ddma.tdPl2ps[54].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[54].destAddr", DumpEntry{ddma.tdPl2ps[54].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[54].wtt", DumpEntry{ddma.tdPl2ps[54].wtt});
        res.insert_or_assign("ddma.tdPl2ps[54].wtt.value", DumpEntry{ddma.tdPl2ps[54].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[55].srcAddr", DumpEntry{ddma.tdPl2ps[55].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[55].destAddr", DumpEntry{ddma.tdPl2ps[55].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[55].wtt", DumpEntry{ddma.tdPl2ps[55].wtt});
        res.insert_or_assign("ddma.tdPl2ps[55].wtt.value", DumpEntry{ddma.tdPl2ps[55].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[56].srcAddr", DumpEntry{ddma.tdPl2ps[56].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[56].destAddr", DumpEntry{ddma.tdPl2ps[56].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[56].wtt", DumpEntry{ddma.tdPl2ps[56].wtt});
        res.insert_or_assign("ddma.tdPl2ps[56].wtt.value", DumpEntry{ddma.tdPl2ps[56].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[57].srcAddr", DumpEntry{ddma.tdPl2ps[57].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[57].destAddr", DumpEntry{ddma.tdPl2ps[57].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[57].wtt", DumpEntry{ddma.tdPl2ps[57].wtt});
        res.insert_or_assign("ddma.tdPl2ps[57].wtt.value", DumpEntry{ddma.tdPl2ps[57].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[58].srcAddr", DumpEntry{ddma.tdPl2ps[58].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[58].destAddr", DumpEntry{ddma.tdPl2ps[58].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[58].wtt", DumpEntry{ddma.tdPl2ps[58].wtt});
        res.insert_or_assign("ddma.tdPl2ps[58].wtt.value", DumpEntry{ddma.tdPl2ps[58].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[59].srcAddr", DumpEntry{ddma.tdPl2ps[59].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[59].destAddr", DumpEntry{ddma.tdPl2ps[59].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[59].wtt", DumpEntry{ddma.tdPl2ps[59].wtt});
        res.insert_or_assign("ddma.tdPl2ps[59].wtt.value", DumpEntry{ddma.tdPl2ps[59].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[60].srcAddr", DumpEntry{ddma.tdPl2ps[60].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[60].destAddr", DumpEntry{ddma.tdPl2ps[60].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[60].wtt", DumpEntry{ddma.tdPl2ps[60].wtt});
        res.insert_or_assign("ddma.tdPl2ps[60].wtt.value", DumpEntry{ddma.tdPl2ps[60].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[61].srcAddr", DumpEntry{ddma.tdPl2ps[61].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[61].destAddr", DumpEntry{ddma.tdPl2ps[61].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[61].wtt", DumpEntry{ddma.tdPl2ps[61].wtt});
        res.insert_or_assign("ddma.tdPl2ps[61].wtt.value", DumpEntry{ddma.tdPl2ps[61].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[62].srcAddr", DumpEntry{ddma.tdPl2ps[62].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[62].destAddr", DumpEntry{ddma.tdPl2ps[62].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[62].wtt", DumpEntry{ddma.tdPl2ps[62].wtt});
        res.insert_or_assign("ddma.tdPl2ps[62].wtt.value", DumpEntry{ddma.tdPl2ps[62].wtt.value});
        res.insert_or_assign("ddma.tdPl2ps[63].srcAddr", DumpEntry{ddma.tdPl2ps[63].srcAddr});
        res.insert_or_assign("ddma.tdPl2ps[63].destAddr", DumpEntry{ddma.tdPl2ps[63].destAddr});
        res.insert_or_assign("ddma.tdPl2ps[63].wtt", DumpEntry{ddma.tdPl2ps[63].wtt});
        res.insert_or_assign("ddma.tdPl2ps[63].wtt.value", DumpEntry{ddma.tdPl2ps[63].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[0].srcAddr", DumpEntry{ddma.tdPs2pl[0].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[0].destAddr", DumpEntry{ddma.tdPs2pl[0].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[0].wtt", DumpEntry{ddma.tdPs2pl[0].wtt});
        res.insert_or_assign("ddma.tdPs2pl[0].wtt.value", DumpEntry{ddma.tdPs2pl[0].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[1].srcAddr", DumpEntry{ddma.tdPs2pl[1].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[1].destAddr", DumpEntry{ddma.tdPs2pl[1].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[1].wtt", DumpEntry{ddma.tdPs2pl[1].wtt});
        res.insert_or_assign("ddma.tdPs2pl[1].wtt.value", DumpEntry{ddma.tdPs2pl[1].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[2].srcAddr", DumpEntry{ddma.tdPs2pl[2].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[2].destAddr", DumpEntry{ddma.tdPs2pl[2].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[2].wtt", DumpEntry{ddma.tdPs2pl[2].wtt});
        res.insert_or_assign("ddma.tdPs2pl[2].wtt.value", DumpEntry{ddma.tdPs2pl[2].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[3].srcAddr", DumpEntry{ddma.tdPs2pl[3].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[3].destAddr", DumpEntry{ddma.tdPs2pl[3].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[3].wtt", DumpEntry{ddma.tdPs2pl[3].wtt});
        res.insert_or_assign("ddma.tdPs2pl[3].wtt.value", DumpEntry{ddma.tdPs2pl[3].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[4].srcAddr", DumpEntry{ddma.tdPs2pl[4].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[4].destAddr", DumpEntry{ddma.tdPs2pl[4].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[4].wtt", DumpEntry{ddma.tdPs2pl[4].wtt});
        res.insert_or_assign("ddma.tdPs2pl[4].wtt.value", DumpEntry{ddma.tdPs2pl[4].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[5].srcAddr", DumpEntry{ddma.tdPs2pl[5].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[5].destAddr", DumpEntry{ddma.tdPs2pl[5].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[5].wtt", DumpEntry{ddma.tdPs2pl[5].wtt});
        res.insert_or_assign("ddma.tdPs2pl[5].wtt.value", DumpEntry{ddma.tdPs2pl[5].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[6].srcAddr", DumpEntry{ddma.tdPs2pl[6].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[6].destAddr", DumpEntry{ddma.tdPs2pl[6].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[6].wtt", DumpEntry{ddma.tdPs2pl[6].wtt});
        res.insert_or_assign("ddma.tdPs2pl[6].wtt.value", DumpEntry{ddma.tdPs2pl[6].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[7].srcAddr", DumpEntry{ddma.tdPs2pl[7].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[7].destAddr", DumpEntry{ddma.tdPs2pl[7].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[7].wtt", DumpEntry{ddma.tdPs2pl[7].wtt});
        res.insert_or_assign("ddma.tdPs2pl[7].wtt.value", DumpEntry{ddma.tdPs2pl[7].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[8].srcAddr", DumpEntry{ddma.tdPs2pl[8].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[8].destAddr", DumpEntry{ddma.tdPs2pl[8].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[8].wtt", DumpEntry{ddma.tdPs2pl[8].wtt});
        res.insert_or_assign("ddma.tdPs2pl[8].wtt.value", DumpEntry{ddma.tdPs2pl[8].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[9].srcAddr", DumpEntry{ddma.tdPs2pl[9].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[9].destAddr", DumpEntry{ddma.tdPs2pl[9].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[9].wtt", DumpEntry{ddma.tdPs2pl[9].wtt});
        res.insert_or_assign("ddma.tdPs2pl[9].wtt.value", DumpEntry{ddma.tdPs2pl[9].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[10].srcAddr", DumpEntry{ddma.tdPs2pl[10].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[10].destAddr", DumpEntry{ddma.tdPs2pl[10].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[10].wtt", DumpEntry{ddma.tdPs2pl[10].wtt});
        res.insert_or_assign("ddma.tdPs2pl[10].wtt.value", DumpEntry{ddma.tdPs2pl[10].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[11].srcAddr", DumpEntry{ddma.tdPs2pl[11].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[11].destAddr", DumpEntry{ddma.tdPs2pl[11].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[11].wtt", DumpEntry{ddma.tdPs2pl[11].wtt});
        res.insert_or_assign("ddma.tdPs2pl[11].wtt.value", DumpEntry{ddma.tdPs2pl[11].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[12].srcAddr", DumpEntry{ddma.tdPs2pl[12].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[12].destAddr", DumpEntry{ddma.tdPs2pl[12].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[12].wtt", DumpEntry{ddma.tdPs2pl[12].wtt});
        res.insert_or_assign("ddma.tdPs2pl[12].wtt.value", DumpEntry{ddma.tdPs2pl[12].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[13].srcAddr", DumpEntry{ddma.tdPs2pl[13].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[13].destAddr", DumpEntry{ddma.tdPs2pl[13].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[13].wtt", DumpEntry{ddma.tdPs2pl[13].wtt});
        res.insert_or_assign("ddma.tdPs2pl[13].wtt.value", DumpEntry{ddma.tdPs2pl[13].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[14].srcAddr", DumpEntry{ddma.tdPs2pl[14].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[14].destAddr", DumpEntry{ddma.tdPs2pl[14].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[14].wtt", DumpEntry{ddma.tdPs2pl[14].wtt});
        res.insert_or_assign("ddma.tdPs2pl[14].wtt.value", DumpEntry{ddma.tdPs2pl[14].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[15].srcAddr", DumpEntry{ddma.tdPs2pl[15].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[15].destAddr", DumpEntry{ddma.tdPs2pl[15].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[15].wtt", DumpEntry{ddma.tdPs2pl[15].wtt});
        res.insert_or_assign("ddma.tdPs2pl[15].wtt.value", DumpEntry{ddma.tdPs2pl[15].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[16].srcAddr", DumpEntry{ddma.tdPs2pl[16].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[16].destAddr", DumpEntry{ddma.tdPs2pl[16].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[16].wtt", DumpEntry{ddma.tdPs2pl[16].wtt});
        res.insert_or_assign("ddma.tdPs2pl[16].wtt.value", DumpEntry{ddma.tdPs2pl[16].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[17].srcAddr", DumpEntry{ddma.tdPs2pl[17].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[17].destAddr", DumpEntry{ddma.tdPs2pl[17].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[17].wtt", DumpEntry{ddma.tdPs2pl[17].wtt});
        res.insert_or_assign("ddma.tdPs2pl[17].wtt.value", DumpEntry{ddma.tdPs2pl[17].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[18].srcAddr", DumpEntry{ddma.tdPs2pl[18].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[18].destAddr", DumpEntry{ddma.tdPs2pl[18].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[18].wtt", DumpEntry{ddma.tdPs2pl[18].wtt});
        res.insert_or_assign("ddma.tdPs2pl[18].wtt.value", DumpEntry{ddma.tdPs2pl[18].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[19].srcAddr", DumpEntry{ddma.tdPs2pl[19].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[19].destAddr", DumpEntry{ddma.tdPs2pl[19].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[19].wtt", DumpEntry{ddma.tdPs2pl[19].wtt});
        res.insert_or_assign("ddma.tdPs2pl[19].wtt.value", DumpEntry{ddma.tdPs2pl[19].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[20].srcAddr", DumpEntry{ddma.tdPs2pl[20].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[20].destAddr", DumpEntry{ddma.tdPs2pl[20].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[20].wtt", DumpEntry{ddma.tdPs2pl[20].wtt});
        res.insert_or_assign("ddma.tdPs2pl[20].wtt.value", DumpEntry{ddma.tdPs2pl[20].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[21].srcAddr", DumpEntry{ddma.tdPs2pl[21].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[21].destAddr", DumpEntry{ddma.tdPs2pl[21].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[21].wtt", DumpEntry{ddma.tdPs2pl[21].wtt});
        res.insert_or_assign("ddma.tdPs2pl[21].wtt.value", DumpEntry{ddma.tdPs2pl[21].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[22].srcAddr", DumpEntry{ddma.tdPs2pl[22].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[22].destAddr", DumpEntry{ddma.tdPs2pl[22].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[22].wtt", DumpEntry{ddma.tdPs2pl[22].wtt});
        res.insert_or_assign("ddma.tdPs2pl[22].wtt.value", DumpEntry{ddma.tdPs2pl[22].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[23].srcAddr", DumpEntry{ddma.tdPs2pl[23].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[23].destAddr", DumpEntry{ddma.tdPs2pl[23].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[23].wtt", DumpEntry{ddma.tdPs2pl[23].wtt});
        res.insert_or_assign("ddma.tdPs2pl[23].wtt.value", DumpEntry{ddma.tdPs2pl[23].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[24].srcAddr", DumpEntry{ddma.tdPs2pl[24].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[24].destAddr", DumpEntry{ddma.tdPs2pl[24].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[24].wtt", DumpEntry{ddma.tdPs2pl[24].wtt});
        res.insert_or_assign("ddma.tdPs2pl[24].wtt.value", DumpEntry{ddma.tdPs2pl[24].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[25].srcAddr", DumpEntry{ddma.tdPs2pl[25].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[25].destAddr", DumpEntry{ddma.tdPs2pl[25].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[25].wtt", DumpEntry{ddma.tdPs2pl[25].wtt});
        res.insert_or_assign("ddma.tdPs2pl[25].wtt.value", DumpEntry{ddma.tdPs2pl[25].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[26].srcAddr", DumpEntry{ddma.tdPs2pl[26].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[26].destAddr", DumpEntry{ddma.tdPs2pl[26].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[26].wtt", DumpEntry{ddma.tdPs2pl[26].wtt});
        res.insert_or_assign("ddma.tdPs2pl[26].wtt.value", DumpEntry{ddma.tdPs2pl[26].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[27].srcAddr", DumpEntry{ddma.tdPs2pl[27].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[27].destAddr", DumpEntry{ddma.tdPs2pl[27].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[27].wtt", DumpEntry{ddma.tdPs2pl[27].wtt});
        res.insert_or_assign("ddma.tdPs2pl[27].wtt.value", DumpEntry{ddma.tdPs2pl[27].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[28].srcAddr", DumpEntry{ddma.tdPs2pl[28].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[28].destAddr", DumpEntry{ddma.tdPs2pl[28].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[28].wtt", DumpEntry{ddma.tdPs2pl[28].wtt});
        res.insert_or_assign("ddma.tdPs2pl[28].wtt.value", DumpEntry{ddma.tdPs2pl[28].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[29].srcAddr", DumpEntry{ddma.tdPs2pl[29].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[29].destAddr", DumpEntry{ddma.tdPs2pl[29].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[29].wtt", DumpEntry{ddma.tdPs2pl[29].wtt});
        res.insert_or_assign("ddma.tdPs2pl[29].wtt.value", DumpEntry{ddma.tdPs2pl[29].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[30].srcAddr", DumpEntry{ddma.tdPs2pl[30].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[30].destAddr", DumpEntry{ddma.tdPs2pl[30].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[30].wtt", DumpEntry{ddma.tdPs2pl[30].wtt});
        res.insert_or_assign("ddma.tdPs2pl[30].wtt.value", DumpEntry{ddma.tdPs2pl[30].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[31].srcAddr", DumpEntry{ddma.tdPs2pl[31].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[31].destAddr", DumpEntry{ddma.tdPs2pl[31].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[31].wtt", DumpEntry{ddma.tdPs2pl[31].wtt});
        res.insert_or_assign("ddma.tdPs2pl[31].wtt.value", DumpEntry{ddma.tdPs2pl[31].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[32].srcAddr", DumpEntry{ddma.tdPs2pl[32].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[32].destAddr", DumpEntry{ddma.tdPs2pl[32].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[32].wtt", DumpEntry{ddma.tdPs2pl[32].wtt});
        res.insert_or_assign("ddma.tdPs2pl[32].wtt.value", DumpEntry{ddma.tdPs2pl[32].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[33].srcAddr", DumpEntry{ddma.tdPs2pl[33].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[33].destAddr", DumpEntry{ddma.tdPs2pl[33].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[33].wtt", DumpEntry{ddma.tdPs2pl[33].wtt});
        res.insert_or_assign("ddma.tdPs2pl[33].wtt.value", DumpEntry{ddma.tdPs2pl[33].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[34].srcAddr", DumpEntry{ddma.tdPs2pl[34].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[34].destAddr", DumpEntry{ddma.tdPs2pl[34].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[34].wtt", DumpEntry{ddma.tdPs2pl[34].wtt});
        res.insert_or_assign("ddma.tdPs2pl[34].wtt.value", DumpEntry{ddma.tdPs2pl[34].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[35].srcAddr", DumpEntry{ddma.tdPs2pl[35].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[35].destAddr", DumpEntry{ddma.tdPs2pl[35].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[35].wtt", DumpEntry{ddma.tdPs2pl[35].wtt});
        res.insert_or_assign("ddma.tdPs2pl[35].wtt.value", DumpEntry{ddma.tdPs2pl[35].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[36].srcAddr", DumpEntry{ddma.tdPs2pl[36].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[36].destAddr", DumpEntry{ddma.tdPs2pl[36].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[36].wtt", DumpEntry{ddma.tdPs2pl[36].wtt});
        res.insert_or_assign("ddma.tdPs2pl[36].wtt.value", DumpEntry{ddma.tdPs2pl[36].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[37].srcAddr", DumpEntry{ddma.tdPs2pl[37].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[37].destAddr", DumpEntry{ddma.tdPs2pl[37].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[37].wtt", DumpEntry{ddma.tdPs2pl[37].wtt});
        res.insert_or_assign("ddma.tdPs2pl[37].wtt.value", DumpEntry{ddma.tdPs2pl[37].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[38].srcAddr", DumpEntry{ddma.tdPs2pl[38].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[38].destAddr", DumpEntry{ddma.tdPs2pl[38].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[38].wtt", DumpEntry{ddma.tdPs2pl[38].wtt});
        res.insert_or_assign("ddma.tdPs2pl[38].wtt.value", DumpEntry{ddma.tdPs2pl[38].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[39].srcAddr", DumpEntry{ddma.tdPs2pl[39].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[39].destAddr", DumpEntry{ddma.tdPs2pl[39].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[39].wtt", DumpEntry{ddma.tdPs2pl[39].wtt});
        res.insert_or_assign("ddma.tdPs2pl[39].wtt.value", DumpEntry{ddma.tdPs2pl[39].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[40].srcAddr", DumpEntry{ddma.tdPs2pl[40].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[40].destAddr", DumpEntry{ddma.tdPs2pl[40].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[40].wtt", DumpEntry{ddma.tdPs2pl[40].wtt});
        res.insert_or_assign("ddma.tdPs2pl[40].wtt.value", DumpEntry{ddma.tdPs2pl[40].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[41].srcAddr", DumpEntry{ddma.tdPs2pl[41].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[41].destAddr", DumpEntry{ddma.tdPs2pl[41].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[41].wtt", DumpEntry{ddma.tdPs2pl[41].wtt});
        res.insert_or_assign("ddma.tdPs2pl[41].wtt.value", DumpEntry{ddma.tdPs2pl[41].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[42].srcAddr", DumpEntry{ddma.tdPs2pl[42].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[42].destAddr", DumpEntry{ddma.tdPs2pl[42].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[42].wtt", DumpEntry{ddma.tdPs2pl[42].wtt});
        res.insert_or_assign("ddma.tdPs2pl[42].wtt.value", DumpEntry{ddma.tdPs2pl[42].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[43].srcAddr", DumpEntry{ddma.tdPs2pl[43].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[43].destAddr", DumpEntry{ddma.tdPs2pl[43].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[43].wtt", DumpEntry{ddma.tdPs2pl[43].wtt});
        res.insert_or_assign("ddma.tdPs2pl[43].wtt.value", DumpEntry{ddma.tdPs2pl[43].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[44].srcAddr", DumpEntry{ddma.tdPs2pl[44].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[44].destAddr", DumpEntry{ddma.tdPs2pl[44].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[44].wtt", DumpEntry{ddma.tdPs2pl[44].wtt});
        res.insert_or_assign("ddma.tdPs2pl[44].wtt.value", DumpEntry{ddma.tdPs2pl[44].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[45].srcAddr", DumpEntry{ddma.tdPs2pl[45].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[45].destAddr", DumpEntry{ddma.tdPs2pl[45].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[45].wtt", DumpEntry{ddma.tdPs2pl[45].wtt});
        res.insert_or_assign("ddma.tdPs2pl[45].wtt.value", DumpEntry{ddma.tdPs2pl[45].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[46].srcAddr", DumpEntry{ddma.tdPs2pl[46].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[46].destAddr", DumpEntry{ddma.tdPs2pl[46].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[46].wtt", DumpEntry{ddma.tdPs2pl[46].wtt});
        res.insert_or_assign("ddma.tdPs2pl[46].wtt.value", DumpEntry{ddma.tdPs2pl[46].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[47].srcAddr", DumpEntry{ddma.tdPs2pl[47].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[47].destAddr", DumpEntry{ddma.tdPs2pl[47].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[47].wtt", DumpEntry{ddma.tdPs2pl[47].wtt});
        res.insert_or_assign("ddma.tdPs2pl[47].wtt.value", DumpEntry{ddma.tdPs2pl[47].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[48].srcAddr", DumpEntry{ddma.tdPs2pl[48].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[48].destAddr", DumpEntry{ddma.tdPs2pl[48].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[48].wtt", DumpEntry{ddma.tdPs2pl[48].wtt});
        res.insert_or_assign("ddma.tdPs2pl[48].wtt.value", DumpEntry{ddma.tdPs2pl[48].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[49].srcAddr", DumpEntry{ddma.tdPs2pl[49].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[49].destAddr", DumpEntry{ddma.tdPs2pl[49].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[49].wtt", DumpEntry{ddma.tdPs2pl[49].wtt});
        res.insert_or_assign("ddma.tdPs2pl[49].wtt.value", DumpEntry{ddma.tdPs2pl[49].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[50].srcAddr", DumpEntry{ddma.tdPs2pl[50].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[50].destAddr", DumpEntry{ddma.tdPs2pl[50].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[50].wtt", DumpEntry{ddma.tdPs2pl[50].wtt});
        res.insert_or_assign("ddma.tdPs2pl[50].wtt.value", DumpEntry{ddma.tdPs2pl[50].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[51].srcAddr", DumpEntry{ddma.tdPs2pl[51].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[51].destAddr", DumpEntry{ddma.tdPs2pl[51].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[51].wtt", DumpEntry{ddma.tdPs2pl[51].wtt});
        res.insert_or_assign("ddma.tdPs2pl[51].wtt.value", DumpEntry{ddma.tdPs2pl[51].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[52].srcAddr", DumpEntry{ddma.tdPs2pl[52].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[52].destAddr", DumpEntry{ddma.tdPs2pl[52].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[52].wtt", DumpEntry{ddma.tdPs2pl[52].wtt});
        res.insert_or_assign("ddma.tdPs2pl[52].wtt.value", DumpEntry{ddma.tdPs2pl[52].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[53].srcAddr", DumpEntry{ddma.tdPs2pl[53].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[53].destAddr", DumpEntry{ddma.tdPs2pl[53].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[53].wtt", DumpEntry{ddma.tdPs2pl[53].wtt});
        res.insert_or_assign("ddma.tdPs2pl[53].wtt.value", DumpEntry{ddma.tdPs2pl[53].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[54].srcAddr", DumpEntry{ddma.tdPs2pl[54].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[54].destAddr", DumpEntry{ddma.tdPs2pl[54].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[54].wtt", DumpEntry{ddma.tdPs2pl[54].wtt});
        res.insert_or_assign("ddma.tdPs2pl[54].wtt.value", DumpEntry{ddma.tdPs2pl[54].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[55].srcAddr", DumpEntry{ddma.tdPs2pl[55].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[55].destAddr", DumpEntry{ddma.tdPs2pl[55].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[55].wtt", DumpEntry{ddma.tdPs2pl[55].wtt});
        res.insert_or_assign("ddma.tdPs2pl[55].wtt.value", DumpEntry{ddma.tdPs2pl[55].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[56].srcAddr", DumpEntry{ddma.tdPs2pl[56].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[56].destAddr", DumpEntry{ddma.tdPs2pl[56].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[56].wtt", DumpEntry{ddma.tdPs2pl[56].wtt});
        res.insert_or_assign("ddma.tdPs2pl[56].wtt.value", DumpEntry{ddma.tdPs2pl[56].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[57].srcAddr", DumpEntry{ddma.tdPs2pl[57].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[57].destAddr", DumpEntry{ddma.tdPs2pl[57].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[57].wtt", DumpEntry{ddma.tdPs2pl[57].wtt});
        res.insert_or_assign("ddma.tdPs2pl[57].wtt.value", DumpEntry{ddma.tdPs2pl[57].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[58].srcAddr", DumpEntry{ddma.tdPs2pl[58].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[58].destAddr", DumpEntry{ddma.tdPs2pl[58].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[58].wtt", DumpEntry{ddma.tdPs2pl[58].wtt});
        res.insert_or_assign("ddma.tdPs2pl[58].wtt.value", DumpEntry{ddma.tdPs2pl[58].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[59].srcAddr", DumpEntry{ddma.tdPs2pl[59].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[59].destAddr", DumpEntry{ddma.tdPs2pl[59].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[59].wtt", DumpEntry{ddma.tdPs2pl[59].wtt});
        res.insert_or_assign("ddma.tdPs2pl[59].wtt.value", DumpEntry{ddma.tdPs2pl[59].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[60].srcAddr", DumpEntry{ddma.tdPs2pl[60].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[60].destAddr", DumpEntry{ddma.tdPs2pl[60].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[60].wtt", DumpEntry{ddma.tdPs2pl[60].wtt});
        res.insert_or_assign("ddma.tdPs2pl[60].wtt.value", DumpEntry{ddma.tdPs2pl[60].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[61].srcAddr", DumpEntry{ddma.tdPs2pl[61].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[61].destAddr", DumpEntry{ddma.tdPs2pl[61].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[61].wtt", DumpEntry{ddma.tdPs2pl[61].wtt});
        res.insert_or_assign("ddma.tdPs2pl[61].wtt.value", DumpEntry{ddma.tdPs2pl[61].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[62].srcAddr", DumpEntry{ddma.tdPs2pl[62].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[62].destAddr", DumpEntry{ddma.tdPs2pl[62].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[62].wtt", DumpEntry{ddma.tdPs2pl[62].wtt});
        res.insert_or_assign("ddma.tdPs2pl[62].wtt.value", DumpEntry{ddma.tdPs2pl[62].wtt.value});
        res.insert_or_assign("ddma.tdPs2pl[63].srcAddr", DumpEntry{ddma.tdPs2pl[63].srcAddr});
        res.insert_or_assign("ddma.tdPs2pl[63].destAddr", DumpEntry{ddma.tdPs2pl[63].destAddr});
        res.insert_or_assign("ddma.tdPs2pl[63].wtt", DumpEntry{ddma.tdPs2pl[63].wtt});
        res.insert_or_assign("ddma.tdPs2pl[63].wtt.value", DumpEntry{ddma.tdPs2pl[63].wtt.value});
        res.insert_or_assign("ddma.errors[0].acp", DumpEntry{ddma.errors[0].acp});
        res.insert_or_assign("ddma.errors[0].acp.rSlverr", DumpEntry{ddma.errors[0].acp.rSlverr});
        res.insert_or_assign("ddma.errors[0].acp.rDecerr", DumpEntry{ddma.errors[0].acp.rDecerr});
        res.insert_or_assign("ddma.errors[0].acp.wSlverr", DumpEntry{ddma.errors[0].acp.wSlverr});
        res.insert_or_assign("ddma.errors[0].acp.wDecerr", DumpEntry{ddma.errors[0].acp.wDecerr});
        res.insert_or_assign("ddma.errors[0].axil", DumpEntry{ddma.errors[0].axil});
        res.insert_or_assign("ddma.errors[0].axil.rSlverr", DumpEntry{ddma.errors[0].axil.rSlverr});
        res.insert_or_assign("ddma.errors[0].axil.rDecerr", DumpEntry{ddma.errors[0].axil.rDecerr});
        res.insert_or_assign("ddma.errors[0].axil.wSlverr", DumpEntry{ddma.errors[0].axil.wSlverr});
        res.insert_or_assign("ddma.errors[0].axil.wDecerr", DumpEntry{ddma.errors[0].axil.wDecerr});
        res.insert_or_assign("ddma.errors[1].acp", DumpEntry{ddma.errors[1].acp});
        res.insert_or_assign("ddma.errors[1].acp.rSlverr", DumpEntry{ddma.errors[1].acp.rSlverr});
        res.insert_or_assign("ddma.errors[1].acp.rDecerr", DumpEntry{ddma.errors[1].acp.rDecerr});
        res.insert_or_assign("ddma.errors[1].acp.wSlverr", DumpEntry{ddma.errors[1].acp.wSlverr});
        res.insert_or_assign("ddma.errors[1].acp.wDecerr", DumpEntry{ddma.errors[1].acp.wDecerr});
        res.insert_or_assign("ddma.errors[1].axil", DumpEntry{ddma.errors[1].axil});
        res.insert_or_assign("ddma.errors[1].axil.rSlverr", DumpEntry{ddma.errors[1].axil.rSlverr});
        res.insert_or_assign("ddma.errors[1].axil.rDecerr", DumpEntry{ddma.errors[1].axil.rDecerr});
        res.insert_or_assign("ddma.errors[1].axil.wSlverr", DumpEntry{ddma.errors[1].axil.wSlverr});
        res.insert_or_assign("ddma.errors[1].axil.wDecerr", DumpEntry{ddma.errors[1].axil.wDecerr});
        res.insert_or_assign("ddma.errors[2].acp", DumpEntry{ddma.errors[2].acp});
        res.insert_or_assign("ddma.errors[2].acp.rSlverr", DumpEntry{ddma.errors[2].acp.rSlverr});
        res.insert_or_assign("ddma.errors[2].acp.rDecerr", DumpEntry{ddma.errors[2].acp.rDecerr});
        res.insert_or_assign("ddma.errors[2].acp.wSlverr", DumpEntry{ddma.errors[2].acp.wSlverr});
        res.insert_or_assign("ddma.errors[2].acp.wDecerr", DumpEntry{ddma.errors[2].acp.wDecerr});
        res.insert_or_assign("ddma.errors[2].axil", DumpEntry{ddma.errors[2].axil});
        res.insert_or_assign("ddma.errors[2].axil.rSlverr", DumpEntry{ddma.errors[2].axil.rSlverr});
        res.insert_or_assign("ddma.errors[2].axil.rDecerr", DumpEntry{ddma.errors[2].axil.rDecerr});
        res.insert_or_assign("ddma.errors[2].axil.wSlverr", DumpEntry{ddma.errors[2].axil.wSlverr});
        res.insert_or_assign("ddma.errors[2].axil.wDecerr", DumpEntry{ddma.errors[2].axil.wDecerr});
        res.insert_or_assign("ddma.errors[3].acp", DumpEntry{ddma.errors[3].acp});
        res.insert_or_assign("ddma.errors[3].acp.rSlverr", DumpEntry{ddma.errors[3].acp.rSlverr});
        res.insert_or_assign("ddma.errors[3].acp.rDecerr", DumpEntry{ddma.errors[3].acp.rDecerr});
        res.insert_or_assign("ddma.errors[3].acp.wSlverr", DumpEntry{ddma.errors[3].acp.wSlverr});
        res.insert_or_assign("ddma.errors[3].acp.wDecerr", DumpEntry{ddma.errors[3].acp.wDecerr});
        res.insert_or_assign("ddma.errors[3].axil", DumpEntry{ddma.errors[3].axil});
        res.insert_or_assign("ddma.errors[3].axil.rSlverr", DumpEntry{ddma.errors[3].axil.rSlverr});
        res.insert_or_assign("ddma.errors[3].axil.rDecerr", DumpEntry{ddma.errors[3].axil.rDecerr});
        res.insert_or_assign("ddma.errors[3].axil.wSlverr", DumpEntry{ddma.errors[3].axil.wSlverr});
        res.insert_or_assign("ddma.errors[3].axil.wDecerr", DumpEntry{ddma.errors[3].axil.wDecerr});
        res.insert_or_assign("ddma.errors[4].acp", DumpEntry{ddma.errors[4].acp});
        res.insert_or_assign("ddma.errors[4].acp.rSlverr", DumpEntry{ddma.errors[4].acp.rSlverr});
        res.insert_or_assign("ddma.errors[4].acp.rDecerr", DumpEntry{ddma.errors[4].acp.rDecerr});
        res.insert_or_assign("ddma.errors[4].acp.wSlverr", DumpEntry{ddma.errors[4].acp.wSlverr});
        res.insert_or_assign("ddma.errors[4].acp.wDecerr", DumpEntry{ddma.errors[4].acp.wDecerr});
        res.insert_or_assign("ddma.errors[4].axil", DumpEntry{ddma.errors[4].axil});
        res.insert_or_assign("ddma.errors[4].axil.rSlverr", DumpEntry{ddma.errors[4].axil.rSlverr});
        res.insert_or_assign("ddma.errors[4].axil.rDecerr", DumpEntry{ddma.errors[4].axil.rDecerr});
        res.insert_or_assign("ddma.errors[4].axil.wSlverr", DumpEntry{ddma.errors[4].axil.wSlverr});
        res.insert_or_assign("ddma.errors[4].axil.wDecerr", DumpEntry{ddma.errors[4].axil.wDecerr});
        res.insert_or_assign("ddma.errors[5].acp", DumpEntry{ddma.errors[5].acp});
        res.insert_or_assign("ddma.errors[5].acp.rSlverr", DumpEntry{ddma.errors[5].acp.rSlverr});
        res.insert_or_assign("ddma.errors[5].acp.rDecerr", DumpEntry{ddma.errors[5].acp.rDecerr});
        res.insert_or_assign("ddma.errors[5].acp.wSlverr", DumpEntry{ddma.errors[5].acp.wSlverr});
        res.insert_or_assign("ddma.errors[5].acp.wDecerr", DumpEntry{ddma.errors[5].acp.wDecerr});
        res.insert_or_assign("ddma.errors[5].axil", DumpEntry{ddma.errors[5].axil});
        res.insert_or_assign("ddma.errors[5].axil.rSlverr", DumpEntry{ddma.errors[5].axil.rSlverr});
        res.insert_or_assign("ddma.errors[5].axil.rDecerr", DumpEntry{ddma.errors[5].axil.rDecerr});
        res.insert_or_assign("ddma.errors[5].axil.wSlverr", DumpEntry{ddma.errors[5].axil.wSlverr});
        res.insert_or_assign("ddma.errors[5].axil.wDecerr", DumpEntry{ddma.errors[5].axil.wDecerr});
        res.insert_or_assign("ddma.errors[6].acp", DumpEntry{ddma.errors[6].acp});
        res.insert_or_assign("ddma.errors[6].acp.rSlverr", DumpEntry{ddma.errors[6].acp.rSlverr});
        res.insert_or_assign("ddma.errors[6].acp.rDecerr", DumpEntry{ddma.errors[6].acp.rDecerr});
        res.insert_or_assign("ddma.errors[6].acp.wSlverr", DumpEntry{ddma.errors[6].acp.wSlverr});
        res.insert_or_assign("ddma.errors[6].acp.wDecerr", DumpEntry{ddma.errors[6].acp.wDecerr});
        res.insert_or_assign("ddma.errors[6].axil", DumpEntry{ddma.errors[6].axil});
        res.insert_or_assign("ddma.errors[6].axil.rSlverr", DumpEntry{ddma.errors[6].axil.rSlverr});
        res.insert_or_assign("ddma.errors[6].axil.rDecerr", DumpEntry{ddma.errors[6].axil.rDecerr});
        res.insert_or_assign("ddma.errors[6].axil.wSlverr", DumpEntry{ddma.errors[6].axil.wSlverr});
        res.insert_or_assign("ddma.errors[6].axil.wDecerr", DumpEntry{ddma.errors[6].axil.wDecerr});
        res.insert_or_assign("ddma.errors[7].acp", DumpEntry{ddma.errors[7].acp});
        res.insert_or_assign("ddma.errors[7].acp.rSlverr", DumpEntry{ddma.errors[7].acp.rSlverr});
        res.insert_or_assign("ddma.errors[7].acp.rDecerr", DumpEntry{ddma.errors[7].acp.rDecerr});
        res.insert_or_assign("ddma.errors[7].acp.wSlverr", DumpEntry{ddma.errors[7].acp.wSlverr});
        res.insert_or_assign("ddma.errors[7].acp.wDecerr", DumpEntry{ddma.errors[7].acp.wDecerr});
        res.insert_or_assign("ddma.errors[7].axil", DumpEntry{ddma.errors[7].axil});
        res.insert_or_assign("ddma.errors[7].axil.rSlverr", DumpEntry{ddma.errors[7].axil.rSlverr});
        res.insert_or_assign("ddma.errors[7].axil.rDecerr", DumpEntry{ddma.errors[7].axil.rDecerr});
        res.insert_or_assign("ddma.errors[7].axil.wSlverr", DumpEntry{ddma.errors[7].axil.wSlverr});
        res.insert_or_assign("ddma.errors[7].axil.wDecerr", DumpEntry{ddma.errors[7].axil.wDecerr});
        res.insert_or_assign("ddma.errors[8].acp", DumpEntry{ddma.errors[8].acp});
        res.insert_or_assign("ddma.errors[8].acp.rSlverr", DumpEntry{ddma.errors[8].acp.rSlverr});
        res.insert_or_assign("ddma.errors[8].acp.rDecerr", DumpEntry{ddma.errors[8].acp.rDecerr});
        res.insert_or_assign("ddma.errors[8].acp.wSlverr", DumpEntry{ddma.errors[8].acp.wSlverr});
        res.insert_or_assign("ddma.errors[8].acp.wDecerr", DumpEntry{ddma.errors[8].acp.wDecerr});
        res.insert_or_assign("ddma.errors[8].axil", DumpEntry{ddma.errors[8].axil});
        res.insert_or_assign("ddma.errors[8].axil.rSlverr", DumpEntry{ddma.errors[8].axil.rSlverr});
        res.insert_or_assign("ddma.errors[8].axil.rDecerr", DumpEntry{ddma.errors[8].axil.rDecerr});
        res.insert_or_assign("ddma.errors[8].axil.wSlverr", DumpEntry{ddma.errors[8].axil.wSlverr});
        res.insert_or_assign("ddma.errors[8].axil.wDecerr", DumpEntry{ddma.errors[8].axil.wDecerr});
        res.insert_or_assign("ddma.errors[9].acp", DumpEntry{ddma.errors[9].acp});
        res.insert_or_assign("ddma.errors[9].acp.rSlverr", DumpEntry{ddma.errors[9].acp.rSlverr});
        res.insert_or_assign("ddma.errors[9].acp.rDecerr", DumpEntry{ddma.errors[9].acp.rDecerr});
        res.insert_or_assign("ddma.errors[9].acp.wSlverr", DumpEntry{ddma.errors[9].acp.wSlverr});
        res.insert_or_assign("ddma.errors[9].acp.wDecerr", DumpEntry{ddma.errors[9].acp.wDecerr});
        res.insert_or_assign("ddma.errors[9].axil", DumpEntry{ddma.errors[9].axil});
        res.insert_or_assign("ddma.errors[9].axil.rSlverr", DumpEntry{ddma.errors[9].axil.rSlverr});
        res.insert_or_assign("ddma.errors[9].axil.rDecerr", DumpEntry{ddma.errors[9].axil.rDecerr});
        res.insert_or_assign("ddma.errors[9].axil.wSlverr", DumpEntry{ddma.errors[9].axil.wSlverr});
        res.insert_or_assign("ddma.errors[9].axil.wDecerr", DumpEntry{ddma.errors[9].axil.wDecerr});
        res.insert_or_assign("ddma.errors[10].acp", DumpEntry{ddma.errors[10].acp});
        res.insert_or_assign("ddma.errors[10].acp.rSlverr", DumpEntry{ddma.errors[10].acp.rSlverr});
        res.insert_or_assign("ddma.errors[10].acp.rDecerr", DumpEntry{ddma.errors[10].acp.rDecerr});
        res.insert_or_assign("ddma.errors[10].acp.wSlverr", DumpEntry{ddma.errors[10].acp.wSlverr});
        res.insert_or_assign("ddma.errors[10].acp.wDecerr", DumpEntry{ddma.errors[10].acp.wDecerr});
        res.insert_or_assign("ddma.errors[10].axil", DumpEntry{ddma.errors[10].axil});
        res.insert_or_assign("ddma.errors[10].axil.rSlverr", DumpEntry{ddma.errors[10].axil.rSlverr});
        res.insert_or_assign("ddma.errors[10].axil.rDecerr", DumpEntry{ddma.errors[10].axil.rDecerr});
        res.insert_or_assign("ddma.errors[10].axil.wSlverr", DumpEntry{ddma.errors[10].axil.wSlverr});
        res.insert_or_assign("ddma.errors[10].axil.wDecerr", DumpEntry{ddma.errors[10].axil.wDecerr});
        res.insert_or_assign("ddma.errors[11].acp", DumpEntry{ddma.errors[11].acp});
        res.insert_or_assign("ddma.errors[11].acp.rSlverr", DumpEntry{ddma.errors[11].acp.rSlverr});
        res.insert_or_assign("ddma.errors[11].acp.rDecerr", DumpEntry{ddma.errors[11].acp.rDecerr});
        res.insert_or_assign("ddma.errors[11].acp.wSlverr", DumpEntry{ddma.errors[11].acp.wSlverr});
        res.insert_or_assign("ddma.errors[11].acp.wDecerr", DumpEntry{ddma.errors[11].acp.wDecerr});
        res.insert_or_assign("ddma.errors[11].axil", DumpEntry{ddma.errors[11].axil});
        res.insert_or_assign("ddma.errors[11].axil.rSlverr", DumpEntry{ddma.errors[11].axil.rSlverr});
        res.insert_or_assign("ddma.errors[11].axil.rDecerr", DumpEntry{ddma.errors[11].axil.rDecerr});
        res.insert_or_assign("ddma.errors[11].axil.wSlverr", DumpEntry{ddma.errors[11].axil.wSlverr});
        res.insert_or_assign("ddma.errors[11].axil.wDecerr", DumpEntry{ddma.errors[11].axil.wDecerr});
        res.insert_or_assign("ddma.errors[12].acp", DumpEntry{ddma.errors[12].acp});
        res.insert_or_assign("ddma.errors[12].acp.rSlverr", DumpEntry{ddma.errors[12].acp.rSlverr});
        res.insert_or_assign("ddma.errors[12].acp.rDecerr", DumpEntry{ddma.errors[12].acp.rDecerr});
        res.insert_or_assign("ddma.errors[12].acp.wSlverr", DumpEntry{ddma.errors[12].acp.wSlverr});
        res.insert_or_assign("ddma.errors[12].acp.wDecerr", DumpEntry{ddma.errors[12].acp.wDecerr});
        res.insert_or_assign("ddma.errors[12].axil", DumpEntry{ddma.errors[12].axil});
        res.insert_or_assign("ddma.errors[12].axil.rSlverr", DumpEntry{ddma.errors[12].axil.rSlverr});
        res.insert_or_assign("ddma.errors[12].axil.rDecerr", DumpEntry{ddma.errors[12].axil.rDecerr});
        res.insert_or_assign("ddma.errors[12].axil.wSlverr", DumpEntry{ddma.errors[12].axil.wSlverr});
        res.insert_or_assign("ddma.errors[12].axil.wDecerr", DumpEntry{ddma.errors[12].axil.wDecerr});
        res.insert_or_assign("ddma.errors[13].acp", DumpEntry{ddma.errors[13].acp});
        res.insert_or_assign("ddma.errors[13].acp.rSlverr", DumpEntry{ddma.errors[13].acp.rSlverr});
        res.insert_or_assign("ddma.errors[13].acp.rDecerr", DumpEntry{ddma.errors[13].acp.rDecerr});
        res.insert_or_assign("ddma.errors[13].acp.wSlverr", DumpEntry{ddma.errors[13].acp.wSlverr});
        res.insert_or_assign("ddma.errors[13].acp.wDecerr", DumpEntry{ddma.errors[13].acp.wDecerr});
        res.insert_or_assign("ddma.errors[13].axil", DumpEntry{ddma.errors[13].axil});
        res.insert_or_assign("ddma.errors[13].axil.rSlverr", DumpEntry{ddma.errors[13].axil.rSlverr});
        res.insert_or_assign("ddma.errors[13].axil.rDecerr", DumpEntry{ddma.errors[13].axil.rDecerr});
        res.insert_or_assign("ddma.errors[13].axil.wSlverr", DumpEntry{ddma.errors[13].axil.wSlverr});
        res.insert_or_assign("ddma.errors[13].axil.wDecerr", DumpEntry{ddma.errors[13].axil.wDecerr});
        res.insert_or_assign("ddma.errors[14].acp", DumpEntry{ddma.errors[14].acp});
        res.insert_or_assign("ddma.errors[14].acp.rSlverr", DumpEntry{ddma.errors[14].acp.rSlverr});
        res.insert_or_assign("ddma.errors[14].acp.rDecerr", DumpEntry{ddma.errors[14].acp.rDecerr});
        res.insert_or_assign("ddma.errors[14].acp.wSlverr", DumpEntry{ddma.errors[14].acp.wSlverr});
        res.insert_or_assign("ddma.errors[14].acp.wDecerr", DumpEntry{ddma.errors[14].acp.wDecerr});
        res.insert_or_assign("ddma.errors[14].axil", DumpEntry{ddma.errors[14].axil});
        res.insert_or_assign("ddma.errors[14].axil.rSlverr", DumpEntry{ddma.errors[14].axil.rSlverr});
        res.insert_or_assign("ddma.errors[14].axil.rDecerr", DumpEntry{ddma.errors[14].axil.rDecerr});
        res.insert_or_assign("ddma.errors[14].axil.wSlverr", DumpEntry{ddma.errors[14].axil.wSlverr});
        res.insert_or_assign("ddma.errors[14].axil.wDecerr", DumpEntry{ddma.errors[14].axil.wDecerr});
        res.insert_or_assign("ddma.errors[15].acp", DumpEntry{ddma.errors[15].acp});
        res.insert_or_assign("ddma.errors[15].acp.rSlverr", DumpEntry{ddma.errors[15].acp.rSlverr});
        res.insert_or_assign("ddma.errors[15].acp.rDecerr", DumpEntry{ddma.errors[15].acp.rDecerr});
        res.insert_or_assign("ddma.errors[15].acp.wSlverr", DumpEntry{ddma.errors[15].acp.wSlverr});
        res.insert_or_assign("ddma.errors[15].acp.wDecerr", DumpEntry{ddma.errors[15].acp.wDecerr});
        res.insert_or_assign("ddma.errors[15].axil", DumpEntry{ddma.errors[15].axil});
        res.insert_or_assign("ddma.errors[15].axil.rSlverr", DumpEntry{ddma.errors[15].axil.rSlverr});
        res.insert_or_assign("ddma.errors[15].axil.rDecerr", DumpEntry{ddma.errors[15].axil.rDecerr});
        res.insert_or_assign("ddma.errors[15].axil.wSlverr", DumpEntry{ddma.errors[15].axil.wSlverr});
        res.insert_or_assign("ddma.errors[15].axil.wDecerr", DumpEntry{ddma.errors[15].axil.wDecerr});
        res.insert_or_assign("ddma.errors[16].acp", DumpEntry{ddma.errors[16].acp});
        res.insert_or_assign("ddma.errors[16].acp.rSlverr", DumpEntry{ddma.errors[16].acp.rSlverr});
        res.insert_or_assign("ddma.errors[16].acp.rDecerr", DumpEntry{ddma.errors[16].acp.rDecerr});
        res.insert_or_assign("ddma.errors[16].acp.wSlverr", DumpEntry{ddma.errors[16].acp.wSlverr});
        res.insert_or_assign("ddma.errors[16].acp.wDecerr", DumpEntry{ddma.errors[16].acp.wDecerr});
        res.insert_or_assign("ddma.errors[16].axil", DumpEntry{ddma.errors[16].axil});
        res.insert_or_assign("ddma.errors[16].axil.rSlverr", DumpEntry{ddma.errors[16].axil.rSlverr});
        res.insert_or_assign("ddma.errors[16].axil.rDecerr", DumpEntry{ddma.errors[16].axil.rDecerr});
        res.insert_or_assign("ddma.errors[16].axil.wSlverr", DumpEntry{ddma.errors[16].axil.wSlverr});
        res.insert_or_assign("ddma.errors[16].axil.wDecerr", DumpEntry{ddma.errors[16].axil.wDecerr});
        res.insert_or_assign("ddma.errors[17].acp", DumpEntry{ddma.errors[17].acp});
        res.insert_or_assign("ddma.errors[17].acp.rSlverr", DumpEntry{ddma.errors[17].acp.rSlverr});
        res.insert_or_assign("ddma.errors[17].acp.rDecerr", DumpEntry{ddma.errors[17].acp.rDecerr});
        res.insert_or_assign("ddma.errors[17].acp.wSlverr", DumpEntry{ddma.errors[17].acp.wSlverr});
        res.insert_or_assign("ddma.errors[17].acp.wDecerr", DumpEntry{ddma.errors[17].acp.wDecerr});
        res.insert_or_assign("ddma.errors[17].axil", DumpEntry{ddma.errors[17].axil});
        res.insert_or_assign("ddma.errors[17].axil.rSlverr", DumpEntry{ddma.errors[17].axil.rSlverr});
        res.insert_or_assign("ddma.errors[17].axil.rDecerr", DumpEntry{ddma.errors[17].axil.rDecerr});
        res.insert_or_assign("ddma.errors[17].axil.wSlverr", DumpEntry{ddma.errors[17].axil.wSlverr});
        res.insert_or_assign("ddma.errors[17].axil.wDecerr", DumpEntry{ddma.errors[17].axil.wDecerr});
        res.insert_or_assign("ddma.errors[18].acp", DumpEntry{ddma.errors[18].acp});
        res.insert_or_assign("ddma.errors[18].acp.rSlverr", DumpEntry{ddma.errors[18].acp.rSlverr});
        res.insert_or_assign("ddma.errors[18].acp.rDecerr", DumpEntry{ddma.errors[18].acp.rDecerr});
        res.insert_or_assign("ddma.errors[18].acp.wSlverr", DumpEntry{ddma.errors[18].acp.wSlverr});
        res.insert_or_assign("ddma.errors[18].acp.wDecerr", DumpEntry{ddma.errors[18].acp.wDecerr});
        res.insert_or_assign("ddma.errors[18].axil", DumpEntry{ddma.errors[18].axil});
        res.insert_or_assign("ddma.errors[18].axil.rSlverr", DumpEntry{ddma.errors[18].axil.rSlverr});
        res.insert_or_assign("ddma.errors[18].axil.rDecerr", DumpEntry{ddma.errors[18].axil.rDecerr});
        res.insert_or_assign("ddma.errors[18].axil.wSlverr", DumpEntry{ddma.errors[18].axil.wSlverr});
        res.insert_or_assign("ddma.errors[18].axil.wDecerr", DumpEntry{ddma.errors[18].axil.wDecerr});
        res.insert_or_assign("ddma.errors[19].acp", DumpEntry{ddma.errors[19].acp});
        res.insert_or_assign("ddma.errors[19].acp.rSlverr", DumpEntry{ddma.errors[19].acp.rSlverr});
        res.insert_or_assign("ddma.errors[19].acp.rDecerr", DumpEntry{ddma.errors[19].acp.rDecerr});
        res.insert_or_assign("ddma.errors[19].acp.wSlverr", DumpEntry{ddma.errors[19].acp.wSlverr});
        res.insert_or_assign("ddma.errors[19].acp.wDecerr", DumpEntry{ddma.errors[19].acp.wDecerr});
        res.insert_or_assign("ddma.errors[19].axil", DumpEntry{ddma.errors[19].axil});
        res.insert_or_assign("ddma.errors[19].axil.rSlverr", DumpEntry{ddma.errors[19].axil.rSlverr});
        res.insert_or_assign("ddma.errors[19].axil.rDecerr", DumpEntry{ddma.errors[19].axil.rDecerr});
        res.insert_or_assign("ddma.errors[19].axil.wSlverr", DumpEntry{ddma.errors[19].axil.wSlverr});
        res.insert_or_assign("ddma.errors[19].axil.wDecerr", DumpEntry{ddma.errors[19].axil.wDecerr});
        res.insert_or_assign("ddma.errors[20].acp", DumpEntry{ddma.errors[20].acp});
        res.insert_or_assign("ddma.errors[20].acp.rSlverr", DumpEntry{ddma.errors[20].acp.rSlverr});
        res.insert_or_assign("ddma.errors[20].acp.rDecerr", DumpEntry{ddma.errors[20].acp.rDecerr});
        res.insert_or_assign("ddma.errors[20].acp.wSlverr", DumpEntry{ddma.errors[20].acp.wSlverr});
        res.insert_or_assign("ddma.errors[20].acp.wDecerr", DumpEntry{ddma.errors[20].acp.wDecerr});
        res.insert_or_assign("ddma.errors[20].axil", DumpEntry{ddma.errors[20].axil});
        res.insert_or_assign("ddma.errors[20].axil.rSlverr", DumpEntry{ddma.errors[20].axil.rSlverr});
        res.insert_or_assign("ddma.errors[20].axil.rDecerr", DumpEntry{ddma.errors[20].axil.rDecerr});
        res.insert_or_assign("ddma.errors[20].axil.wSlverr", DumpEntry{ddma.errors[20].axil.wSlverr});
        res.insert_or_assign("ddma.errors[20].axil.wDecerr", DumpEntry{ddma.errors[20].axil.wDecerr});
        res.insert_or_assign("ddma.errors[21].acp", DumpEntry{ddma.errors[21].acp});
        res.insert_or_assign("ddma.errors[21].acp.rSlverr", DumpEntry{ddma.errors[21].acp.rSlverr});
        res.insert_or_assign("ddma.errors[21].acp.rDecerr", DumpEntry{ddma.errors[21].acp.rDecerr});
        res.insert_or_assign("ddma.errors[21].acp.wSlverr", DumpEntry{ddma.errors[21].acp.wSlverr});
        res.insert_or_assign("ddma.errors[21].acp.wDecerr", DumpEntry{ddma.errors[21].acp.wDecerr});
        res.insert_or_assign("ddma.errors[21].axil", DumpEntry{ddma.errors[21].axil});
        res.insert_or_assign("ddma.errors[21].axil.rSlverr", DumpEntry{ddma.errors[21].axil.rSlverr});
        res.insert_or_assign("ddma.errors[21].axil.rDecerr", DumpEntry{ddma.errors[21].axil.rDecerr});
        res.insert_or_assign("ddma.errors[21].axil.wSlverr", DumpEntry{ddma.errors[21].axil.wSlverr});
        res.insert_or_assign("ddma.errors[21].axil.wDecerr", DumpEntry{ddma.errors[21].axil.wDecerr});
        res.insert_or_assign("ddma.errors[22].acp", DumpEntry{ddma.errors[22].acp});
        res.insert_or_assign("ddma.errors[22].acp.rSlverr", DumpEntry{ddma.errors[22].acp.rSlverr});
        res.insert_or_assign("ddma.errors[22].acp.rDecerr", DumpEntry{ddma.errors[22].acp.rDecerr});
        res.insert_or_assign("ddma.errors[22].acp.wSlverr", DumpEntry{ddma.errors[22].acp.wSlverr});
        res.insert_or_assign("ddma.errors[22].acp.wDecerr", DumpEntry{ddma.errors[22].acp.wDecerr});
        res.insert_or_assign("ddma.errors[22].axil", DumpEntry{ddma.errors[22].axil});
        res.insert_or_assign("ddma.errors[22].axil.rSlverr", DumpEntry{ddma.errors[22].axil.rSlverr});
        res.insert_or_assign("ddma.errors[22].axil.rDecerr", DumpEntry{ddma.errors[22].axil.rDecerr});
        res.insert_or_assign("ddma.errors[22].axil.wSlverr", DumpEntry{ddma.errors[22].axil.wSlverr});
        res.insert_or_assign("ddma.errors[22].axil.wDecerr", DumpEntry{ddma.errors[22].axil.wDecerr});
        res.insert_or_assign("ddma.errors[23].acp", DumpEntry{ddma.errors[23].acp});
        res.insert_or_assign("ddma.errors[23].acp.rSlverr", DumpEntry{ddma.errors[23].acp.rSlverr});
        res.insert_or_assign("ddma.errors[23].acp.rDecerr", DumpEntry{ddma.errors[23].acp.rDecerr});
        res.insert_or_assign("ddma.errors[23].acp.wSlverr", DumpEntry{ddma.errors[23].acp.wSlverr});
        res.insert_or_assign("ddma.errors[23].acp.wDecerr", DumpEntry{ddma.errors[23].acp.wDecerr});
        res.insert_or_assign("ddma.errors[23].axil", DumpEntry{ddma.errors[23].axil});
        res.insert_or_assign("ddma.errors[23].axil.rSlverr", DumpEntry{ddma.errors[23].axil.rSlverr});
        res.insert_or_assign("ddma.errors[23].axil.rDecerr", DumpEntry{ddma.errors[23].axil.rDecerr});
        res.insert_or_assign("ddma.errors[23].axil.wSlverr", DumpEntry{ddma.errors[23].axil.wSlverr});
        res.insert_or_assign("ddma.errors[23].axil.wDecerr", DumpEntry{ddma.errors[23].axil.wDecerr});
        res.insert_or_assign("ddma.errors[24].acp", DumpEntry{ddma.errors[24].acp});
        res.insert_or_assign("ddma.errors[24].acp.rSlverr", DumpEntry{ddma.errors[24].acp.rSlverr});
        res.insert_or_assign("ddma.errors[24].acp.rDecerr", DumpEntry{ddma.errors[24].acp.rDecerr});
        res.insert_or_assign("ddma.errors[24].acp.wSlverr", DumpEntry{ddma.errors[24].acp.wSlverr});
        res.insert_or_assign("ddma.errors[24].acp.wDecerr", DumpEntry{ddma.errors[24].acp.wDecerr});
        res.insert_or_assign("ddma.errors[24].axil", DumpEntry{ddma.errors[24].axil});
        res.insert_or_assign("ddma.errors[24].axil.rSlverr", DumpEntry{ddma.errors[24].axil.rSlverr});
        res.insert_or_assign("ddma.errors[24].axil.rDecerr", DumpEntry{ddma.errors[24].axil.rDecerr});
        res.insert_or_assign("ddma.errors[24].axil.wSlverr", DumpEntry{ddma.errors[24].axil.wSlverr});
        res.insert_or_assign("ddma.errors[24].axil.wDecerr", DumpEntry{ddma.errors[24].axil.wDecerr});
        res.insert_or_assign("ddma.errors[25].acp", DumpEntry{ddma.errors[25].acp});
        res.insert_or_assign("ddma.errors[25].acp.rSlverr", DumpEntry{ddma.errors[25].acp.rSlverr});
        res.insert_or_assign("ddma.errors[25].acp.rDecerr", DumpEntry{ddma.errors[25].acp.rDecerr});
        res.insert_or_assign("ddma.errors[25].acp.wSlverr", DumpEntry{ddma.errors[25].acp.wSlverr});
        res.insert_or_assign("ddma.errors[25].acp.wDecerr", DumpEntry{ddma.errors[25].acp.wDecerr});
        res.insert_or_assign("ddma.errors[25].axil", DumpEntry{ddma.errors[25].axil});
        res.insert_or_assign("ddma.errors[25].axil.rSlverr", DumpEntry{ddma.errors[25].axil.rSlverr});
        res.insert_or_assign("ddma.errors[25].axil.rDecerr", DumpEntry{ddma.errors[25].axil.rDecerr});
        res.insert_or_assign("ddma.errors[25].axil.wSlverr", DumpEntry{ddma.errors[25].axil.wSlverr});
        res.insert_or_assign("ddma.errors[25].axil.wDecerr", DumpEntry{ddma.errors[25].axil.wDecerr});
        res.insert_or_assign("ddma.errors[26].acp", DumpEntry{ddma.errors[26].acp});
        res.insert_or_assign("ddma.errors[26].acp.rSlverr", DumpEntry{ddma.errors[26].acp.rSlverr});
        res.insert_or_assign("ddma.errors[26].acp.rDecerr", DumpEntry{ddma.errors[26].acp.rDecerr});
        res.insert_or_assign("ddma.errors[26].acp.wSlverr", DumpEntry{ddma.errors[26].acp.wSlverr});
        res.insert_or_assign("ddma.errors[26].acp.wDecerr", DumpEntry{ddma.errors[26].acp.wDecerr});
        res.insert_or_assign("ddma.errors[26].axil", DumpEntry{ddma.errors[26].axil});
        res.insert_or_assign("ddma.errors[26].axil.rSlverr", DumpEntry{ddma.errors[26].axil.rSlverr});
        res.insert_or_assign("ddma.errors[26].axil.rDecerr", DumpEntry{ddma.errors[26].axil.rDecerr});
        res.insert_or_assign("ddma.errors[26].axil.wSlverr", DumpEntry{ddma.errors[26].axil.wSlverr});
        res.insert_or_assign("ddma.errors[26].axil.wDecerr", DumpEntry{ddma.errors[26].axil.wDecerr});
        res.insert_or_assign("ddma.errors[27].acp", DumpEntry{ddma.errors[27].acp});
        res.insert_or_assign("ddma.errors[27].acp.rSlverr", DumpEntry{ddma.errors[27].acp.rSlverr});
        res.insert_or_assign("ddma.errors[27].acp.rDecerr", DumpEntry{ddma.errors[27].acp.rDecerr});
        res.insert_or_assign("ddma.errors[27].acp.wSlverr", DumpEntry{ddma.errors[27].acp.wSlverr});
        res.insert_or_assign("ddma.errors[27].acp.wDecerr", DumpEntry{ddma.errors[27].acp.wDecerr});
        res.insert_or_assign("ddma.errors[27].axil", DumpEntry{ddma.errors[27].axil});
        res.insert_or_assign("ddma.errors[27].axil.rSlverr", DumpEntry{ddma.errors[27].axil.rSlverr});
        res.insert_or_assign("ddma.errors[27].axil.rDecerr", DumpEntry{ddma.errors[27].axil.rDecerr});
        res.insert_or_assign("ddma.errors[27].axil.wSlverr", DumpEntry{ddma.errors[27].axil.wSlverr});
        res.insert_or_assign("ddma.errors[27].axil.wDecerr", DumpEntry{ddma.errors[27].axil.wDecerr});
        res.insert_or_assign("ddma.errors[28].acp", DumpEntry{ddma.errors[28].acp});
        res.insert_or_assign("ddma.errors[28].acp.rSlverr", DumpEntry{ddma.errors[28].acp.rSlverr});
        res.insert_or_assign("ddma.errors[28].acp.rDecerr", DumpEntry{ddma.errors[28].acp.rDecerr});
        res.insert_or_assign("ddma.errors[28].acp.wSlverr", DumpEntry{ddma.errors[28].acp.wSlverr});
        res.insert_or_assign("ddma.errors[28].acp.wDecerr", DumpEntry{ddma.errors[28].acp.wDecerr});
        res.insert_or_assign("ddma.errors[28].axil", DumpEntry{ddma.errors[28].axil});
        res.insert_or_assign("ddma.errors[28].axil.rSlverr", DumpEntry{ddma.errors[28].axil.rSlverr});
        res.insert_or_assign("ddma.errors[28].axil.rDecerr", DumpEntry{ddma.errors[28].axil.rDecerr});
        res.insert_or_assign("ddma.errors[28].axil.wSlverr", DumpEntry{ddma.errors[28].axil.wSlverr});
        res.insert_or_assign("ddma.errors[28].axil.wDecerr", DumpEntry{ddma.errors[28].axil.wDecerr});
        res.insert_or_assign("ddma.errors[29].acp", DumpEntry{ddma.errors[29].acp});
        res.insert_or_assign("ddma.errors[29].acp.rSlverr", DumpEntry{ddma.errors[29].acp.rSlverr});
        res.insert_or_assign("ddma.errors[29].acp.rDecerr", DumpEntry{ddma.errors[29].acp.rDecerr});
        res.insert_or_assign("ddma.errors[29].acp.wSlverr", DumpEntry{ddma.errors[29].acp.wSlverr});
        res.insert_or_assign("ddma.errors[29].acp.wDecerr", DumpEntry{ddma.errors[29].acp.wDecerr});
        res.insert_or_assign("ddma.errors[29].axil", DumpEntry{ddma.errors[29].axil});
        res.insert_or_assign("ddma.errors[29].axil.rSlverr", DumpEntry{ddma.errors[29].axil.rSlverr});
        res.insert_or_assign("ddma.errors[29].axil.rDecerr", DumpEntry{ddma.errors[29].axil.rDecerr});
        res.insert_or_assign("ddma.errors[29].axil.wSlverr", DumpEntry{ddma.errors[29].axil.wSlverr});
        res.insert_or_assign("ddma.errors[29].axil.wDecerr", DumpEntry{ddma.errors[29].axil.wDecerr});
        res.insert_or_assign("ddma.errors[30].acp", DumpEntry{ddma.errors[30].acp});
        res.insert_or_assign("ddma.errors[30].acp.rSlverr", DumpEntry{ddma.errors[30].acp.rSlverr});
        res.insert_or_assign("ddma.errors[30].acp.rDecerr", DumpEntry{ddma.errors[30].acp.rDecerr});
        res.insert_or_assign("ddma.errors[30].acp.wSlverr", DumpEntry{ddma.errors[30].acp.wSlverr});
        res.insert_or_assign("ddma.errors[30].acp.wDecerr", DumpEntry{ddma.errors[30].acp.wDecerr});
        res.insert_or_assign("ddma.errors[30].axil", DumpEntry{ddma.errors[30].axil});
        res.insert_or_assign("ddma.errors[30].axil.rSlverr", DumpEntry{ddma.errors[30].axil.rSlverr});
        res.insert_or_assign("ddma.errors[30].axil.rDecerr", DumpEntry{ddma.errors[30].axil.rDecerr});
        res.insert_or_assign("ddma.errors[30].axil.wSlverr", DumpEntry{ddma.errors[30].axil.wSlverr});
        res.insert_or_assign("ddma.errors[30].axil.wDecerr", DumpEntry{ddma.errors[30].axil.wDecerr});
        res.insert_or_assign("ddma.errors[31].acp", DumpEntry{ddma.errors[31].acp});
        res.insert_or_assign("ddma.errors[31].acp.rSlverr", DumpEntry{ddma.errors[31].acp.rSlverr});
        res.insert_or_assign("ddma.errors[31].acp.rDecerr", DumpEntry{ddma.errors[31].acp.rDecerr});
        res.insert_or_assign("ddma.errors[31].acp.wSlverr", DumpEntry{ddma.errors[31].acp.wSlverr});
        res.insert_or_assign("ddma.errors[31].acp.wDecerr", DumpEntry{ddma.errors[31].acp.wDecerr});
        res.insert_or_assign("ddma.errors[31].axil", DumpEntry{ddma.errors[31].axil});
        res.insert_or_assign("ddma.errors[31].axil.rSlverr", DumpEntry{ddma.errors[31].axil.rSlverr});
        res.insert_or_assign("ddma.errors[31].axil.rDecerr", DumpEntry{ddma.errors[31].axil.rDecerr});
        res.insert_or_assign("ddma.errors[31].axil.wSlverr", DumpEntry{ddma.errors[31].axil.wSlverr});
        res.insert_or_assign("ddma.errors[31].axil.wDecerr", DumpEntry{ddma.errors[31].axil.wDecerr});
        res.insert_or_assign("ddma.errors[32].acp", DumpEntry{ddma.errors[32].acp});
        res.insert_or_assign("ddma.errors[32].acp.rSlverr", DumpEntry{ddma.errors[32].acp.rSlverr});
        res.insert_or_assign("ddma.errors[32].acp.rDecerr", DumpEntry{ddma.errors[32].acp.rDecerr});
        res.insert_or_assign("ddma.errors[32].acp.wSlverr", DumpEntry{ddma.errors[32].acp.wSlverr});
        res.insert_or_assign("ddma.errors[32].acp.wDecerr", DumpEntry{ddma.errors[32].acp.wDecerr});
        res.insert_or_assign("ddma.errors[32].axil", DumpEntry{ddma.errors[32].axil});
        res.insert_or_assign("ddma.errors[32].axil.rSlverr", DumpEntry{ddma.errors[32].axil.rSlverr});
        res.insert_or_assign("ddma.errors[32].axil.rDecerr", DumpEntry{ddma.errors[32].axil.rDecerr});
        res.insert_or_assign("ddma.errors[32].axil.wSlverr", DumpEntry{ddma.errors[32].axil.wSlverr});
        res.insert_or_assign("ddma.errors[32].axil.wDecerr", DumpEntry{ddma.errors[32].axil.wDecerr});
        res.insert_or_assign("ddma.errors[33].acp", DumpEntry{ddma.errors[33].acp});
        res.insert_or_assign("ddma.errors[33].acp.rSlverr", DumpEntry{ddma.errors[33].acp.rSlverr});
        res.insert_or_assign("ddma.errors[33].acp.rDecerr", DumpEntry{ddma.errors[33].acp.rDecerr});
        res.insert_or_assign("ddma.errors[33].acp.wSlverr", DumpEntry{ddma.errors[33].acp.wSlverr});
        res.insert_or_assign("ddma.errors[33].acp.wDecerr", DumpEntry{ddma.errors[33].acp.wDecerr});
        res.insert_or_assign("ddma.errors[33].axil", DumpEntry{ddma.errors[33].axil});
        res.insert_or_assign("ddma.errors[33].axil.rSlverr", DumpEntry{ddma.errors[33].axil.rSlverr});
        res.insert_or_assign("ddma.errors[33].axil.rDecerr", DumpEntry{ddma.errors[33].axil.rDecerr});
        res.insert_or_assign("ddma.errors[33].axil.wSlverr", DumpEntry{ddma.errors[33].axil.wSlverr});
        res.insert_or_assign("ddma.errors[33].axil.wDecerr", DumpEntry{ddma.errors[33].axil.wDecerr});
        res.insert_or_assign("ddma.errors[34].acp", DumpEntry{ddma.errors[34].acp});
        res.insert_or_assign("ddma.errors[34].acp.rSlverr", DumpEntry{ddma.errors[34].acp.rSlverr});
        res.insert_or_assign("ddma.errors[34].acp.rDecerr", DumpEntry{ddma.errors[34].acp.rDecerr});
        res.insert_or_assign("ddma.errors[34].acp.wSlverr", DumpEntry{ddma.errors[34].acp.wSlverr});
        res.insert_or_assign("ddma.errors[34].acp.wDecerr", DumpEntry{ddma.errors[34].acp.wDecerr});
        res.insert_or_assign("ddma.errors[34].axil", DumpEntry{ddma.errors[34].axil});
        res.insert_or_assign("ddma.errors[34].axil.rSlverr", DumpEntry{ddma.errors[34].axil.rSlverr});
        res.insert_or_assign("ddma.errors[34].axil.rDecerr", DumpEntry{ddma.errors[34].axil.rDecerr});
        res.insert_or_assign("ddma.errors[34].axil.wSlverr", DumpEntry{ddma.errors[34].axil.wSlverr});
        res.insert_or_assign("ddma.errors[34].axil.wDecerr", DumpEntry{ddma.errors[34].axil.wDecerr});
        res.insert_or_assign("ddma.errors[35].acp", DumpEntry{ddma.errors[35].acp});
        res.insert_or_assign("ddma.errors[35].acp.rSlverr", DumpEntry{ddma.errors[35].acp.rSlverr});
        res.insert_or_assign("ddma.errors[35].acp.rDecerr", DumpEntry{ddma.errors[35].acp.rDecerr});
        res.insert_or_assign("ddma.errors[35].acp.wSlverr", DumpEntry{ddma.errors[35].acp.wSlverr});
        res.insert_or_assign("ddma.errors[35].acp.wDecerr", DumpEntry{ddma.errors[35].acp.wDecerr});
        res.insert_or_assign("ddma.errors[35].axil", DumpEntry{ddma.errors[35].axil});
        res.insert_or_assign("ddma.errors[35].axil.rSlverr", DumpEntry{ddma.errors[35].axil.rSlverr});
        res.insert_or_assign("ddma.errors[35].axil.rDecerr", DumpEntry{ddma.errors[35].axil.rDecerr});
        res.insert_or_assign("ddma.errors[35].axil.wSlverr", DumpEntry{ddma.errors[35].axil.wSlverr});
        res.insert_or_assign("ddma.errors[35].axil.wDecerr", DumpEntry{ddma.errors[35].axil.wDecerr});
        res.insert_or_assign("ddma.errors[36].acp", DumpEntry{ddma.errors[36].acp});
        res.insert_or_assign("ddma.errors[36].acp.rSlverr", DumpEntry{ddma.errors[36].acp.rSlverr});
        res.insert_or_assign("ddma.errors[36].acp.rDecerr", DumpEntry{ddma.errors[36].acp.rDecerr});
        res.insert_or_assign("ddma.errors[36].acp.wSlverr", DumpEntry{ddma.errors[36].acp.wSlverr});
        res.insert_or_assign("ddma.errors[36].acp.wDecerr", DumpEntry{ddma.errors[36].acp.wDecerr});
        res.insert_or_assign("ddma.errors[36].axil", DumpEntry{ddma.errors[36].axil});
        res.insert_or_assign("ddma.errors[36].axil.rSlverr", DumpEntry{ddma.errors[36].axil.rSlverr});
        res.insert_or_assign("ddma.errors[36].axil.rDecerr", DumpEntry{ddma.errors[36].axil.rDecerr});
        res.insert_or_assign("ddma.errors[36].axil.wSlverr", DumpEntry{ddma.errors[36].axil.wSlverr});
        res.insert_or_assign("ddma.errors[36].axil.wDecerr", DumpEntry{ddma.errors[36].axil.wDecerr});
        res.insert_or_assign("ddma.errors[37].acp", DumpEntry{ddma.errors[37].acp});
        res.insert_or_assign("ddma.errors[37].acp.rSlverr", DumpEntry{ddma.errors[37].acp.rSlverr});
        res.insert_or_assign("ddma.errors[37].acp.rDecerr", DumpEntry{ddma.errors[37].acp.rDecerr});
        res.insert_or_assign("ddma.errors[37].acp.wSlverr", DumpEntry{ddma.errors[37].acp.wSlverr});
        res.insert_or_assign("ddma.errors[37].acp.wDecerr", DumpEntry{ddma.errors[37].acp.wDecerr});
        res.insert_or_assign("ddma.errors[37].axil", DumpEntry{ddma.errors[37].axil});
        res.insert_or_assign("ddma.errors[37].axil.rSlverr", DumpEntry{ddma.errors[37].axil.rSlverr});
        res.insert_or_assign("ddma.errors[37].axil.rDecerr", DumpEntry{ddma.errors[37].axil.rDecerr});
        res.insert_or_assign("ddma.errors[37].axil.wSlverr", DumpEntry{ddma.errors[37].axil.wSlverr});
        res.insert_or_assign("ddma.errors[37].axil.wDecerr", DumpEntry{ddma.errors[37].axil.wDecerr});
        res.insert_or_assign("ddma.errors[38].acp", DumpEntry{ddma.errors[38].acp});
        res.insert_or_assign("ddma.errors[38].acp.rSlverr", DumpEntry{ddma.errors[38].acp.rSlverr});
        res.insert_or_assign("ddma.errors[38].acp.rDecerr", DumpEntry{ddma.errors[38].acp.rDecerr});
        res.insert_or_assign("ddma.errors[38].acp.wSlverr", DumpEntry{ddma.errors[38].acp.wSlverr});
        res.insert_or_assign("ddma.errors[38].acp.wDecerr", DumpEntry{ddma.errors[38].acp.wDecerr});
        res.insert_or_assign("ddma.errors[38].axil", DumpEntry{ddma.errors[38].axil});
        res.insert_or_assign("ddma.errors[38].axil.rSlverr", DumpEntry{ddma.errors[38].axil.rSlverr});
        res.insert_or_assign("ddma.errors[38].axil.rDecerr", DumpEntry{ddma.errors[38].axil.rDecerr});
        res.insert_or_assign("ddma.errors[38].axil.wSlverr", DumpEntry{ddma.errors[38].axil.wSlverr});
        res.insert_or_assign("ddma.errors[38].axil.wDecerr", DumpEntry{ddma.errors[38].axil.wDecerr});
        res.insert_or_assign("ddma.errors[39].acp", DumpEntry{ddma.errors[39].acp});
        res.insert_or_assign("ddma.errors[39].acp.rSlverr", DumpEntry{ddma.errors[39].acp.rSlverr});
        res.insert_or_assign("ddma.errors[39].acp.rDecerr", DumpEntry{ddma.errors[39].acp.rDecerr});
        res.insert_or_assign("ddma.errors[39].acp.wSlverr", DumpEntry{ddma.errors[39].acp.wSlverr});
        res.insert_or_assign("ddma.errors[39].acp.wDecerr", DumpEntry{ddma.errors[39].acp.wDecerr});
        res.insert_or_assign("ddma.errors[39].axil", DumpEntry{ddma.errors[39].axil});
        res.insert_or_assign("ddma.errors[39].axil.rSlverr", DumpEntry{ddma.errors[39].axil.rSlverr});
        res.insert_or_assign("ddma.errors[39].axil.rDecerr", DumpEntry{ddma.errors[39].axil.rDecerr});
        res.insert_or_assign("ddma.errors[39].axil.wSlverr", DumpEntry{ddma.errors[39].axil.wSlverr});
        res.insert_or_assign("ddma.errors[39].axil.wDecerr", DumpEntry{ddma.errors[39].axil.wDecerr});
        res.insert_or_assign("ddma.errors[40].acp", DumpEntry{ddma.errors[40].acp});
        res.insert_or_assign("ddma.errors[40].acp.rSlverr", DumpEntry{ddma.errors[40].acp.rSlverr});
        res.insert_or_assign("ddma.errors[40].acp.rDecerr", DumpEntry{ddma.errors[40].acp.rDecerr});
        res.insert_or_assign("ddma.errors[40].acp.wSlverr", DumpEntry{ddma.errors[40].acp.wSlverr});
        res.insert_or_assign("ddma.errors[40].acp.wDecerr", DumpEntry{ddma.errors[40].acp.wDecerr});
        res.insert_or_assign("ddma.errors[40].axil", DumpEntry{ddma.errors[40].axil});
        res.insert_or_assign("ddma.errors[40].axil.rSlverr", DumpEntry{ddma.errors[40].axil.rSlverr});
        res.insert_or_assign("ddma.errors[40].axil.rDecerr", DumpEntry{ddma.errors[40].axil.rDecerr});
        res.insert_or_assign("ddma.errors[40].axil.wSlverr", DumpEntry{ddma.errors[40].axil.wSlverr});
        res.insert_or_assign("ddma.errors[40].axil.wDecerr", DumpEntry{ddma.errors[40].axil.wDecerr});
        res.insert_or_assign("ddma.errors[41].acp", DumpEntry{ddma.errors[41].acp});
        res.insert_or_assign("ddma.errors[41].acp.rSlverr", DumpEntry{ddma.errors[41].acp.rSlverr});
        res.insert_or_assign("ddma.errors[41].acp.rDecerr", DumpEntry{ddma.errors[41].acp.rDecerr});
        res.insert_or_assign("ddma.errors[41].acp.wSlverr", DumpEntry{ddma.errors[41].acp.wSlverr});
        res.insert_or_assign("ddma.errors[41].acp.wDecerr", DumpEntry{ddma.errors[41].acp.wDecerr});
        res.insert_or_assign("ddma.errors[41].axil", DumpEntry{ddma.errors[41].axil});
        res.insert_or_assign("ddma.errors[41].axil.rSlverr", DumpEntry{ddma.errors[41].axil.rSlverr});
        res.insert_or_assign("ddma.errors[41].axil.rDecerr", DumpEntry{ddma.errors[41].axil.rDecerr});
        res.insert_or_assign("ddma.errors[41].axil.wSlverr", DumpEntry{ddma.errors[41].axil.wSlverr});
        res.insert_or_assign("ddma.errors[41].axil.wDecerr", DumpEntry{ddma.errors[41].axil.wDecerr});
        res.insert_or_assign("ddma.errors[42].acp", DumpEntry{ddma.errors[42].acp});
        res.insert_or_assign("ddma.errors[42].acp.rSlverr", DumpEntry{ddma.errors[42].acp.rSlverr});
        res.insert_or_assign("ddma.errors[42].acp.rDecerr", DumpEntry{ddma.errors[42].acp.rDecerr});
        res.insert_or_assign("ddma.errors[42].acp.wSlverr", DumpEntry{ddma.errors[42].acp.wSlverr});
        res.insert_or_assign("ddma.errors[42].acp.wDecerr", DumpEntry{ddma.errors[42].acp.wDecerr});
        res.insert_or_assign("ddma.errors[42].axil", DumpEntry{ddma.errors[42].axil});
        res.insert_or_assign("ddma.errors[42].axil.rSlverr", DumpEntry{ddma.errors[42].axil.rSlverr});
        res.insert_or_assign("ddma.errors[42].axil.rDecerr", DumpEntry{ddma.errors[42].axil.rDecerr});
        res.insert_or_assign("ddma.errors[42].axil.wSlverr", DumpEntry{ddma.errors[42].axil.wSlverr});
        res.insert_or_assign("ddma.errors[42].axil.wDecerr", DumpEntry{ddma.errors[42].axil.wDecerr});
        res.insert_or_assign("ddma.errors[43].acp", DumpEntry{ddma.errors[43].acp});
        res.insert_or_assign("ddma.errors[43].acp.rSlverr", DumpEntry{ddma.errors[43].acp.rSlverr});
        res.insert_or_assign("ddma.errors[43].acp.rDecerr", DumpEntry{ddma.errors[43].acp.rDecerr});
        res.insert_or_assign("ddma.errors[43].acp.wSlverr", DumpEntry{ddma.errors[43].acp.wSlverr});
        res.insert_or_assign("ddma.errors[43].acp.wDecerr", DumpEntry{ddma.errors[43].acp.wDecerr});
        res.insert_or_assign("ddma.errors[43].axil", DumpEntry{ddma.errors[43].axil});
        res.insert_or_assign("ddma.errors[43].axil.rSlverr", DumpEntry{ddma.errors[43].axil.rSlverr});
        res.insert_or_assign("ddma.errors[43].axil.rDecerr", DumpEntry{ddma.errors[43].axil.rDecerr});
        res.insert_or_assign("ddma.errors[43].axil.wSlverr", DumpEntry{ddma.errors[43].axil.wSlverr});
        res.insert_or_assign("ddma.errors[43].axil.wDecerr", DumpEntry{ddma.errors[43].axil.wDecerr});
        res.insert_or_assign("ddma.errors[44].acp", DumpEntry{ddma.errors[44].acp});
        res.insert_or_assign("ddma.errors[44].acp.rSlverr", DumpEntry{ddma.errors[44].acp.rSlverr});
        res.insert_or_assign("ddma.errors[44].acp.rDecerr", DumpEntry{ddma.errors[44].acp.rDecerr});
        res.insert_or_assign("ddma.errors[44].acp.wSlverr", DumpEntry{ddma.errors[44].acp.wSlverr});
        res.insert_or_assign("ddma.errors[44].acp.wDecerr", DumpEntry{ddma.errors[44].acp.wDecerr});
        res.insert_or_assign("ddma.errors[44].axil", DumpEntry{ddma.errors[44].axil});
        res.insert_or_assign("ddma.errors[44].axil.rSlverr", DumpEntry{ddma.errors[44].axil.rSlverr});
        res.insert_or_assign("ddma.errors[44].axil.rDecerr", DumpEntry{ddma.errors[44].axil.rDecerr});
        res.insert_or_assign("ddma.errors[44].axil.wSlverr", DumpEntry{ddma.errors[44].axil.wSlverr});
        res.insert_or_assign("ddma.errors[44].axil.wDecerr", DumpEntry{ddma.errors[44].axil.wDecerr});
        res.insert_or_assign("ddma.errors[45].acp", DumpEntry{ddma.errors[45].acp});
        res.insert_or_assign("ddma.errors[45].acp.rSlverr", DumpEntry{ddma.errors[45].acp.rSlverr});
        res.insert_or_assign("ddma.errors[45].acp.rDecerr", DumpEntry{ddma.errors[45].acp.rDecerr});
        res.insert_or_assign("ddma.errors[45].acp.wSlverr", DumpEntry{ddma.errors[45].acp.wSlverr});
        res.insert_or_assign("ddma.errors[45].acp.wDecerr", DumpEntry{ddma.errors[45].acp.wDecerr});
        res.insert_or_assign("ddma.errors[45].axil", DumpEntry{ddma.errors[45].axil});
        res.insert_or_assign("ddma.errors[45].axil.rSlverr", DumpEntry{ddma.errors[45].axil.rSlverr});
        res.insert_or_assign("ddma.errors[45].axil.rDecerr", DumpEntry{ddma.errors[45].axil.rDecerr});
        res.insert_or_assign("ddma.errors[45].axil.wSlverr", DumpEntry{ddma.errors[45].axil.wSlverr});
        res.insert_or_assign("ddma.errors[45].axil.wDecerr", DumpEntry{ddma.errors[45].axil.wDecerr});
        res.insert_or_assign("ddma.errors[46].acp", DumpEntry{ddma.errors[46].acp});
        res.insert_or_assign("ddma.errors[46].acp.rSlverr", DumpEntry{ddma.errors[46].acp.rSlverr});
        res.insert_or_assign("ddma.errors[46].acp.rDecerr", DumpEntry{ddma.errors[46].acp.rDecerr});
        res.insert_or_assign("ddma.errors[46].acp.wSlverr", DumpEntry{ddma.errors[46].acp.wSlverr});
        res.insert_or_assign("ddma.errors[46].acp.wDecerr", DumpEntry{ddma.errors[46].acp.wDecerr});
        res.insert_or_assign("ddma.errors[46].axil", DumpEntry{ddma.errors[46].axil});
        res.insert_or_assign("ddma.errors[46].axil.rSlverr", DumpEntry{ddma.errors[46].axil.rSlverr});
        res.insert_or_assign("ddma.errors[46].axil.rDecerr", DumpEntry{ddma.errors[46].axil.rDecerr});
        res.insert_or_assign("ddma.errors[46].axil.wSlverr", DumpEntry{ddma.errors[46].axil.wSlverr});
        res.insert_or_assign("ddma.errors[46].axil.wDecerr", DumpEntry{ddma.errors[46].axil.wDecerr});
        res.insert_or_assign("ddma.errors[47].acp", DumpEntry{ddma.errors[47].acp});
        res.insert_or_assign("ddma.errors[47].acp.rSlverr", DumpEntry{ddma.errors[47].acp.rSlverr});
        res.insert_or_assign("ddma.errors[47].acp.rDecerr", DumpEntry{ddma.errors[47].acp.rDecerr});
        res.insert_or_assign("ddma.errors[47].acp.wSlverr", DumpEntry{ddma.errors[47].acp.wSlverr});
        res.insert_or_assign("ddma.errors[47].acp.wDecerr", DumpEntry{ddma.errors[47].acp.wDecerr});
        res.insert_or_assign("ddma.errors[47].axil", DumpEntry{ddma.errors[47].axil});
        res.insert_or_assign("ddma.errors[47].axil.rSlverr", DumpEntry{ddma.errors[47].axil.rSlverr});
        res.insert_or_assign("ddma.errors[47].axil.rDecerr", DumpEntry{ddma.errors[47].axil.rDecerr});
        res.insert_or_assign("ddma.errors[47].axil.wSlverr", DumpEntry{ddma.errors[47].axil.wSlverr});
        res.insert_or_assign("ddma.errors[47].axil.wDecerr", DumpEntry{ddma.errors[47].axil.wDecerr});
        res.insert_or_assign("ddma.errors[48].acp", DumpEntry{ddma.errors[48].acp});
        res.insert_or_assign("ddma.errors[48].acp.rSlverr", DumpEntry{ddma.errors[48].acp.rSlverr});
        res.insert_or_assign("ddma.errors[48].acp.rDecerr", DumpEntry{ddma.errors[48].acp.rDecerr});
        res.insert_or_assign("ddma.errors[48].acp.wSlverr", DumpEntry{ddma.errors[48].acp.wSlverr});
        res.insert_or_assign("ddma.errors[48].acp.wDecerr", DumpEntry{ddma.errors[48].acp.wDecerr});
        res.insert_or_assign("ddma.errors[48].axil", DumpEntry{ddma.errors[48].axil});
        res.insert_or_assign("ddma.errors[48].axil.rSlverr", DumpEntry{ddma.errors[48].axil.rSlverr});
        res.insert_or_assign("ddma.errors[48].axil.rDecerr", DumpEntry{ddma.errors[48].axil.rDecerr});
        res.insert_or_assign("ddma.errors[48].axil.wSlverr", DumpEntry{ddma.errors[48].axil.wSlverr});
        res.insert_or_assign("ddma.errors[48].axil.wDecerr", DumpEntry{ddma.errors[48].axil.wDecerr});
        res.insert_or_assign("ddma.errors[49].acp", DumpEntry{ddma.errors[49].acp});
        res.insert_or_assign("ddma.errors[49].acp.rSlverr", DumpEntry{ddma.errors[49].acp.rSlverr});
        res.insert_or_assign("ddma.errors[49].acp.rDecerr", DumpEntry{ddma.errors[49].acp.rDecerr});
        res.insert_or_assign("ddma.errors[49].acp.wSlverr", DumpEntry{ddma.errors[49].acp.wSlverr});
        res.insert_or_assign("ddma.errors[49].acp.wDecerr", DumpEntry{ddma.errors[49].acp.wDecerr});
        res.insert_or_assign("ddma.errors[49].axil", DumpEntry{ddma.errors[49].axil});
        res.insert_or_assign("ddma.errors[49].axil.rSlverr", DumpEntry{ddma.errors[49].axil.rSlverr});
        res.insert_or_assign("ddma.errors[49].axil.rDecerr", DumpEntry{ddma.errors[49].axil.rDecerr});
        res.insert_or_assign("ddma.errors[49].axil.wSlverr", DumpEntry{ddma.errors[49].axil.wSlverr});
        res.insert_or_assign("ddma.errors[49].axil.wDecerr", DumpEntry{ddma.errors[49].axil.wDecerr});
        res.insert_or_assign("ddma.errors[50].acp", DumpEntry{ddma.errors[50].acp});
        res.insert_or_assign("ddma.errors[50].acp.rSlverr", DumpEntry{ddma.errors[50].acp.rSlverr});
        res.insert_or_assign("ddma.errors[50].acp.rDecerr", DumpEntry{ddma.errors[50].acp.rDecerr});
        res.insert_or_assign("ddma.errors[50].acp.wSlverr", DumpEntry{ddma.errors[50].acp.wSlverr});
        res.insert_or_assign("ddma.errors[50].acp.wDecerr", DumpEntry{ddma.errors[50].acp.wDecerr});
        res.insert_or_assign("ddma.errors[50].axil", DumpEntry{ddma.errors[50].axil});
        res.insert_or_assign("ddma.errors[50].axil.rSlverr", DumpEntry{ddma.errors[50].axil.rSlverr});
        res.insert_or_assign("ddma.errors[50].axil.rDecerr", DumpEntry{ddma.errors[50].axil.rDecerr});
        res.insert_or_assign("ddma.errors[50].axil.wSlverr", DumpEntry{ddma.errors[50].axil.wSlverr});
        res.insert_or_assign("ddma.errors[50].axil.wDecerr", DumpEntry{ddma.errors[50].axil.wDecerr});
        res.insert_or_assign("ddma.errors[51].acp", DumpEntry{ddma.errors[51].acp});
        res.insert_or_assign("ddma.errors[51].acp.rSlverr", DumpEntry{ddma.errors[51].acp.rSlverr});
        res.insert_or_assign("ddma.errors[51].acp.rDecerr", DumpEntry{ddma.errors[51].acp.rDecerr});
        res.insert_or_assign("ddma.errors[51].acp.wSlverr", DumpEntry{ddma.errors[51].acp.wSlverr});
        res.insert_or_assign("ddma.errors[51].acp.wDecerr", DumpEntry{ddma.errors[51].acp.wDecerr});
        res.insert_or_assign("ddma.errors[51].axil", DumpEntry{ddma.errors[51].axil});
        res.insert_or_assign("ddma.errors[51].axil.rSlverr", DumpEntry{ddma.errors[51].axil.rSlverr});
        res.insert_or_assign("ddma.errors[51].axil.rDecerr", DumpEntry{ddma.errors[51].axil.rDecerr});
        res.insert_or_assign("ddma.errors[51].axil.wSlverr", DumpEntry{ddma.errors[51].axil.wSlverr});
        res.insert_or_assign("ddma.errors[51].axil.wDecerr", DumpEntry{ddma.errors[51].axil.wDecerr});
        res.insert_or_assign("ddma.errors[52].acp", DumpEntry{ddma.errors[52].acp});
        res.insert_or_assign("ddma.errors[52].acp.rSlverr", DumpEntry{ddma.errors[52].acp.rSlverr});
        res.insert_or_assign("ddma.errors[52].acp.rDecerr", DumpEntry{ddma.errors[52].acp.rDecerr});
        res.insert_or_assign("ddma.errors[52].acp.wSlverr", DumpEntry{ddma.errors[52].acp.wSlverr});
        res.insert_or_assign("ddma.errors[52].acp.wDecerr", DumpEntry{ddma.errors[52].acp.wDecerr});
        res.insert_or_assign("ddma.errors[52].axil", DumpEntry{ddma.errors[52].axil});
        res.insert_or_assign("ddma.errors[52].axil.rSlverr", DumpEntry{ddma.errors[52].axil.rSlverr});
        res.insert_or_assign("ddma.errors[52].axil.rDecerr", DumpEntry{ddma.errors[52].axil.rDecerr});
        res.insert_or_assign("ddma.errors[52].axil.wSlverr", DumpEntry{ddma.errors[52].axil.wSlverr});
        res.insert_or_assign("ddma.errors[52].axil.wDecerr", DumpEntry{ddma.errors[52].axil.wDecerr});
        res.insert_or_assign("ddma.errors[53].acp", DumpEntry{ddma.errors[53].acp});
        res.insert_or_assign("ddma.errors[53].acp.rSlverr", DumpEntry{ddma.errors[53].acp.rSlverr});
        res.insert_or_assign("ddma.errors[53].acp.rDecerr", DumpEntry{ddma.errors[53].acp.rDecerr});
        res.insert_or_assign("ddma.errors[53].acp.wSlverr", DumpEntry{ddma.errors[53].acp.wSlverr});
        res.insert_or_assign("ddma.errors[53].acp.wDecerr", DumpEntry{ddma.errors[53].acp.wDecerr});
        res.insert_or_assign("ddma.errors[53].axil", DumpEntry{ddma.errors[53].axil});
        res.insert_or_assign("ddma.errors[53].axil.rSlverr", DumpEntry{ddma.errors[53].axil.rSlverr});
        res.insert_or_assign("ddma.errors[53].axil.rDecerr", DumpEntry{ddma.errors[53].axil.rDecerr});
        res.insert_or_assign("ddma.errors[53].axil.wSlverr", DumpEntry{ddma.errors[53].axil.wSlverr});
        res.insert_or_assign("ddma.errors[53].axil.wDecerr", DumpEntry{ddma.errors[53].axil.wDecerr});
        res.insert_or_assign("ddma.errors[54].acp", DumpEntry{ddma.errors[54].acp});
        res.insert_or_assign("ddma.errors[54].acp.rSlverr", DumpEntry{ddma.errors[54].acp.rSlverr});
        res.insert_or_assign("ddma.errors[54].acp.rDecerr", DumpEntry{ddma.errors[54].acp.rDecerr});
        res.insert_or_assign("ddma.errors[54].acp.wSlverr", DumpEntry{ddma.errors[54].acp.wSlverr});
        res.insert_or_assign("ddma.errors[54].acp.wDecerr", DumpEntry{ddma.errors[54].acp.wDecerr});
        res.insert_or_assign("ddma.errors[54].axil", DumpEntry{ddma.errors[54].axil});
        res.insert_or_assign("ddma.errors[54].axil.rSlverr", DumpEntry{ddma.errors[54].axil.rSlverr});
        res.insert_or_assign("ddma.errors[54].axil.rDecerr", DumpEntry{ddma.errors[54].axil.rDecerr});
        res.insert_or_assign("ddma.errors[54].axil.wSlverr", DumpEntry{ddma.errors[54].axil.wSlverr});
        res.insert_or_assign("ddma.errors[54].axil.wDecerr", DumpEntry{ddma.errors[54].axil.wDecerr});
        res.insert_or_assign("ddma.errors[55].acp", DumpEntry{ddma.errors[55].acp});
        res.insert_or_assign("ddma.errors[55].acp.rSlverr", DumpEntry{ddma.errors[55].acp.rSlverr});
        res.insert_or_assign("ddma.errors[55].acp.rDecerr", DumpEntry{ddma.errors[55].acp.rDecerr});
        res.insert_or_assign("ddma.errors[55].acp.wSlverr", DumpEntry{ddma.errors[55].acp.wSlverr});
        res.insert_or_assign("ddma.errors[55].acp.wDecerr", DumpEntry{ddma.errors[55].acp.wDecerr});
        res.insert_or_assign("ddma.errors[55].axil", DumpEntry{ddma.errors[55].axil});
        res.insert_or_assign("ddma.errors[55].axil.rSlverr", DumpEntry{ddma.errors[55].axil.rSlverr});
        res.insert_or_assign("ddma.errors[55].axil.rDecerr", DumpEntry{ddma.errors[55].axil.rDecerr});
        res.insert_or_assign("ddma.errors[55].axil.wSlverr", DumpEntry{ddma.errors[55].axil.wSlverr});
        res.insert_or_assign("ddma.errors[55].axil.wDecerr", DumpEntry{ddma.errors[55].axil.wDecerr});
        res.insert_or_assign("ddma.errors[56].acp", DumpEntry{ddma.errors[56].acp});
        res.insert_or_assign("ddma.errors[56].acp.rSlverr", DumpEntry{ddma.errors[56].acp.rSlverr});
        res.insert_or_assign("ddma.errors[56].acp.rDecerr", DumpEntry{ddma.errors[56].acp.rDecerr});
        res.insert_or_assign("ddma.errors[56].acp.wSlverr", DumpEntry{ddma.errors[56].acp.wSlverr});
        res.insert_or_assign("ddma.errors[56].acp.wDecerr", DumpEntry{ddma.errors[56].acp.wDecerr});
        res.insert_or_assign("ddma.errors[56].axil", DumpEntry{ddma.errors[56].axil});
        res.insert_or_assign("ddma.errors[56].axil.rSlverr", DumpEntry{ddma.errors[56].axil.rSlverr});
        res.insert_or_assign("ddma.errors[56].axil.rDecerr", DumpEntry{ddma.errors[56].axil.rDecerr});
        res.insert_or_assign("ddma.errors[56].axil.wSlverr", DumpEntry{ddma.errors[56].axil.wSlverr});
        res.insert_or_assign("ddma.errors[56].axil.wDecerr", DumpEntry{ddma.errors[56].axil.wDecerr});
        res.insert_or_assign("ddma.errors[57].acp", DumpEntry{ddma.errors[57].acp});
        res.insert_or_assign("ddma.errors[57].acp.rSlverr", DumpEntry{ddma.errors[57].acp.rSlverr});
        res.insert_or_assign("ddma.errors[57].acp.rDecerr", DumpEntry{ddma.errors[57].acp.rDecerr});
        res.insert_or_assign("ddma.errors[57].acp.wSlverr", DumpEntry{ddma.errors[57].acp.wSlverr});
        res.insert_or_assign("ddma.errors[57].acp.wDecerr", DumpEntry{ddma.errors[57].acp.wDecerr});
        res.insert_or_assign("ddma.errors[57].axil", DumpEntry{ddma.errors[57].axil});
        res.insert_or_assign("ddma.errors[57].axil.rSlverr", DumpEntry{ddma.errors[57].axil.rSlverr});
        res.insert_or_assign("ddma.errors[57].axil.rDecerr", DumpEntry{ddma.errors[57].axil.rDecerr});
        res.insert_or_assign("ddma.errors[57].axil.wSlverr", DumpEntry{ddma.errors[57].axil.wSlverr});
        res.insert_or_assign("ddma.errors[57].axil.wDecerr", DumpEntry{ddma.errors[57].axil.wDecerr});
        res.insert_or_assign("ddma.errors[58].acp", DumpEntry{ddma.errors[58].acp});
        res.insert_or_assign("ddma.errors[58].acp.rSlverr", DumpEntry{ddma.errors[58].acp.rSlverr});
        res.insert_or_assign("ddma.errors[58].acp.rDecerr", DumpEntry{ddma.errors[58].acp.rDecerr});
        res.insert_or_assign("ddma.errors[58].acp.wSlverr", DumpEntry{ddma.errors[58].acp.wSlverr});
        res.insert_or_assign("ddma.errors[58].acp.wDecerr", DumpEntry{ddma.errors[58].acp.wDecerr});
        res.insert_or_assign("ddma.errors[58].axil", DumpEntry{ddma.errors[58].axil});
        res.insert_or_assign("ddma.errors[58].axil.rSlverr", DumpEntry{ddma.errors[58].axil.rSlverr});
        res.insert_or_assign("ddma.errors[58].axil.rDecerr", DumpEntry{ddma.errors[58].axil.rDecerr});
        res.insert_or_assign("ddma.errors[58].axil.wSlverr", DumpEntry{ddma.errors[58].axil.wSlverr});
        res.insert_or_assign("ddma.errors[58].axil.wDecerr", DumpEntry{ddma.errors[58].axil.wDecerr});
        res.insert_or_assign("ddma.errors[59].acp", DumpEntry{ddma.errors[59].acp});
        res.insert_or_assign("ddma.errors[59].acp.rSlverr", DumpEntry{ddma.errors[59].acp.rSlverr});
        res.insert_or_assign("ddma.errors[59].acp.rDecerr", DumpEntry{ddma.errors[59].acp.rDecerr});
        res.insert_or_assign("ddma.errors[59].acp.wSlverr", DumpEntry{ddma.errors[59].acp.wSlverr});
        res.insert_or_assign("ddma.errors[59].acp.wDecerr", DumpEntry{ddma.errors[59].acp.wDecerr});
        res.insert_or_assign("ddma.errors[59].axil", DumpEntry{ddma.errors[59].axil});
        res.insert_or_assign("ddma.errors[59].axil.rSlverr", DumpEntry{ddma.errors[59].axil.rSlverr});
        res.insert_or_assign("ddma.errors[59].axil.rDecerr", DumpEntry{ddma.errors[59].axil.rDecerr});
        res.insert_or_assign("ddma.errors[59].axil.wSlverr", DumpEntry{ddma.errors[59].axil.wSlverr});
        res.insert_or_assign("ddma.errors[59].axil.wDecerr", DumpEntry{ddma.errors[59].axil.wDecerr});
        res.insert_or_assign("ddma.errors[60].acp", DumpEntry{ddma.errors[60].acp});
        res.insert_or_assign("ddma.errors[60].acp.rSlverr", DumpEntry{ddma.errors[60].acp.rSlverr});
        res.insert_or_assign("ddma.errors[60].acp.rDecerr", DumpEntry{ddma.errors[60].acp.rDecerr});
        res.insert_or_assign("ddma.errors[60].acp.wSlverr", DumpEntry{ddma.errors[60].acp.wSlverr});
        res.insert_or_assign("ddma.errors[60].acp.wDecerr", DumpEntry{ddma.errors[60].acp.wDecerr});
        res.insert_or_assign("ddma.errors[60].axil", DumpEntry{ddma.errors[60].axil});
        res.insert_or_assign("ddma.errors[60].axil.rSlverr", DumpEntry{ddma.errors[60].axil.rSlverr});
        res.insert_or_assign("ddma.errors[60].axil.rDecerr", DumpEntry{ddma.errors[60].axil.rDecerr});
        res.insert_or_assign("ddma.errors[60].axil.wSlverr", DumpEntry{ddma.errors[60].axil.wSlverr});
        res.insert_or_assign("ddma.errors[60].axil.wDecerr", DumpEntry{ddma.errors[60].axil.wDecerr});
        res.insert_or_assign("ddma.errors[61].acp", DumpEntry{ddma.errors[61].acp});
        res.insert_or_assign("ddma.errors[61].acp.rSlverr", DumpEntry{ddma.errors[61].acp.rSlverr});
        res.insert_or_assign("ddma.errors[61].acp.rDecerr", DumpEntry{ddma.errors[61].acp.rDecerr});
        res.insert_or_assign("ddma.errors[61].acp.wSlverr", DumpEntry{ddma.errors[61].acp.wSlverr});
        res.insert_or_assign("ddma.errors[61].acp.wDecerr", DumpEntry{ddma.errors[61].acp.wDecerr});
        res.insert_or_assign("ddma.errors[61].axil", DumpEntry{ddma.errors[61].axil});
        res.insert_or_assign("ddma.errors[61].axil.rSlverr", DumpEntry{ddma.errors[61].axil.rSlverr});
        res.insert_or_assign("ddma.errors[61].axil.rDecerr", DumpEntry{ddma.errors[61].axil.rDecerr});
        res.insert_or_assign("ddma.errors[61].axil.wSlverr", DumpEntry{ddma.errors[61].axil.wSlverr});
        res.insert_or_assign("ddma.errors[61].axil.wDecerr", DumpEntry{ddma.errors[61].axil.wDecerr});
        res.insert_or_assign("ddma.errors[62].acp", DumpEntry{ddma.errors[62].acp});
        res.insert_or_assign("ddma.errors[62].acp.rSlverr", DumpEntry{ddma.errors[62].acp.rSlverr});
        res.insert_or_assign("ddma.errors[62].acp.rDecerr", DumpEntry{ddma.errors[62].acp.rDecerr});
        res.insert_or_assign("ddma.errors[62].acp.wSlverr", DumpEntry{ddma.errors[62].acp.wSlverr});
        res.insert_or_assign("ddma.errors[62].acp.wDecerr", DumpEntry{ddma.errors[62].acp.wDecerr});
        res.insert_or_assign("ddma.errors[62].axil", DumpEntry{ddma.errors[62].axil});
        res.insert_or_assign("ddma.errors[62].axil.rSlverr", DumpEntry{ddma.errors[62].axil.rSlverr});
        res.insert_or_assign("ddma.errors[62].axil.rDecerr", DumpEntry{ddma.errors[62].axil.rDecerr});
        res.insert_or_assign("ddma.errors[62].axil.wSlverr", DumpEntry{ddma.errors[62].axil.wSlverr});
        res.insert_or_assign("ddma.errors[62].axil.wDecerr", DumpEntry{ddma.errors[62].axil.wDecerr});
        res.insert_or_assign("ddma.errors[63].acp", DumpEntry{ddma.errors[63].acp});
        res.insert_or_assign("ddma.errors[63].acp.rSlverr", DumpEntry{ddma.errors[63].acp.rSlverr});
        res.insert_or_assign("ddma.errors[63].acp.rDecerr", DumpEntry{ddma.errors[63].acp.rDecerr});
        res.insert_or_assign("ddma.errors[63].acp.wSlverr", DumpEntry{ddma.errors[63].acp.wSlverr});
        res.insert_or_assign("ddma.errors[63].acp.wDecerr", DumpEntry{ddma.errors[63].acp.wDecerr});
        res.insert_or_assign("ddma.errors[63].axil", DumpEntry{ddma.errors[63].axil});
        res.insert_or_assign("ddma.errors[63].axil.rSlverr", DumpEntry{ddma.errors[63].axil.rSlverr});
        res.insert_or_assign("ddma.errors[63].axil.rDecerr", DumpEntry{ddma.errors[63].axil.rDecerr});
        res.insert_or_assign("ddma.errors[63].axil.wSlverr", DumpEntry{ddma.errors[63].axil.wSlverr});
        res.insert_or_assign("ddma.errors[63].axil.wDecerr", DumpEntry{ddma.errors[63].axil.wDecerr});
        res.insert_or_assign("ddma.numAwid", DumpEntry{ddma.numAwid});
        res.insert_or_assign("ddma.numAwid.value", DumpEntry{ddma.numAwid.value});
        res.insert_or_assign("ddma.numChannels", DumpEntry{ddma.numChannels});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SyncTime`
    //!
    //! @param syncTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under syncTime
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SyncTime& syncTime)
    {
        DumpMap res{syncTime.base()};
        res.insert_or_assign("syncTime.s", DumpEntry{syncTime.s});
        res.insert_or_assign("syncTime.sc", DumpEntry{syncTime.sc});
        res.insert_or_assign("syncTime.utcS", DumpEntry{syncTime.utcS});
        res.insert_or_assign("syncTime.utcNs", DumpEntry{syncTime.utcNs});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SyncTrigArrayItem::Stg`
    //!
    //! @param stg A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under stg
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SyncTrigArrayItem::Stg& stg)
    {
        DumpMap res{stg.base()};
        res.insert_or_assign("stg.ctrl", DumpEntry{stg.ctrl});
        res.insert_or_assign("stg.ctrl.periodic", DumpEntry{stg.ctrl.periodic});
        res.insert_or_assign("stg.ctrl.resync", DumpEntry{stg.ctrl.resync});
        res.insert_or_assign("stg.delaySc", DumpEntry{stg.delaySc});
        res.insert_or_assign("stg.periodSc", DumpEntry{stg.periodSc});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SyncTrigArray`
    //!
    //! @param syncTrig A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under syncTrig
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SyncTrigArray& syncTrig)
    {
        DumpMap res{syncTrig.base()};
        res.insert_or_assign("syncTrig[0].stg.ctrl", DumpEntry{syncTrig[0].stg.ctrl});
        res.insert_or_assign("syncTrig[0].stg.ctrl.periodic", DumpEntry{syncTrig[0].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[0].stg.ctrl.resync", DumpEntry{syncTrig[0].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[0].stg.delaySc", DumpEntry{syncTrig[0].stg.delaySc});
        res.insert_or_assign("syncTrig[0].stg.periodSc", DumpEntry{syncTrig[0].stg.periodSc});
        res.insert_or_assign("syncTrig[1].stg.ctrl", DumpEntry{syncTrig[1].stg.ctrl});
        res.insert_or_assign("syncTrig[1].stg.ctrl.periodic", DumpEntry{syncTrig[1].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[1].stg.ctrl.resync", DumpEntry{syncTrig[1].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[1].stg.delaySc", DumpEntry{syncTrig[1].stg.delaySc});
        res.insert_or_assign("syncTrig[1].stg.periodSc", DumpEntry{syncTrig[1].stg.periodSc});
        res.insert_or_assign("syncTrig[2].stg.ctrl", DumpEntry{syncTrig[2].stg.ctrl});
        res.insert_or_assign("syncTrig[2].stg.ctrl.periodic", DumpEntry{syncTrig[2].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[2].stg.ctrl.resync", DumpEntry{syncTrig[2].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[2].stg.delaySc", DumpEntry{syncTrig[2].stg.delaySc});
        res.insert_or_assign("syncTrig[2].stg.periodSc", DumpEntry{syncTrig[2].stg.periodSc});
        res.insert_or_assign("syncTrig[3].stg.ctrl", DumpEntry{syncTrig[3].stg.ctrl});
        res.insert_or_assign("syncTrig[3].stg.ctrl.periodic", DumpEntry{syncTrig[3].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[3].stg.ctrl.resync", DumpEntry{syncTrig[3].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[3].stg.delaySc", DumpEntry{syncTrig[3].stg.delaySc});
        res.insert_or_assign("syncTrig[3].stg.periodSc", DumpEntry{syncTrig[3].stg.periodSc});
        res.insert_or_assign("syncTrig[4].stg.ctrl", DumpEntry{syncTrig[4].stg.ctrl});
        res.insert_or_assign("syncTrig[4].stg.ctrl.periodic", DumpEntry{syncTrig[4].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[4].stg.ctrl.resync", DumpEntry{syncTrig[4].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[4].stg.delaySc", DumpEntry{syncTrig[4].stg.delaySc});
        res.insert_or_assign("syncTrig[4].stg.periodSc", DumpEntry{syncTrig[4].stg.periodSc});
        res.insert_or_assign("syncTrig[5].stg.ctrl", DumpEntry{syncTrig[5].stg.ctrl});
        res.insert_or_assign("syncTrig[5].stg.ctrl.periodic", DumpEntry{syncTrig[5].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[5].stg.ctrl.resync", DumpEntry{syncTrig[5].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[5].stg.delaySc", DumpEntry{syncTrig[5].stg.delaySc});
        res.insert_or_assign("syncTrig[5].stg.periodSc", DumpEntry{syncTrig[5].stg.periodSc});
        res.insert_or_assign("syncTrig[6].stg.ctrl", DumpEntry{syncTrig[6].stg.ctrl});
        res.insert_or_assign("syncTrig[6].stg.ctrl.periodic", DumpEntry{syncTrig[6].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[6].stg.ctrl.resync", DumpEntry{syncTrig[6].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[6].stg.delaySc", DumpEntry{syncTrig[6].stg.delaySc});
        res.insert_or_assign("syncTrig[6].stg.periodSc", DumpEntry{syncTrig[6].stg.periodSc});
        res.insert_or_assign("syncTrig[7].stg.ctrl", DumpEntry{syncTrig[7].stg.ctrl});
        res.insert_or_assign("syncTrig[7].stg.ctrl.periodic", DumpEntry{syncTrig[7].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[7].stg.ctrl.resync", DumpEntry{syncTrig[7].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[7].stg.delaySc", DumpEntry{syncTrig[7].stg.delaySc});
        res.insert_or_assign("syncTrig[7].stg.periodSc", DumpEntry{syncTrig[7].stg.periodSc});
        res.insert_or_assign("syncTrig[8].stg.ctrl", DumpEntry{syncTrig[8].stg.ctrl});
        res.insert_or_assign("syncTrig[8].stg.ctrl.periodic", DumpEntry{syncTrig[8].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[8].stg.ctrl.resync", DumpEntry{syncTrig[8].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[8].stg.delaySc", DumpEntry{syncTrig[8].stg.delaySc});
        res.insert_or_assign("syncTrig[8].stg.periodSc", DumpEntry{syncTrig[8].stg.periodSc});
        res.insert_or_assign("syncTrig[9].stg.ctrl", DumpEntry{syncTrig[9].stg.ctrl});
        res.insert_or_assign("syncTrig[9].stg.ctrl.periodic", DumpEntry{syncTrig[9].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[9].stg.ctrl.resync", DumpEntry{syncTrig[9].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[9].stg.delaySc", DumpEntry{syncTrig[9].stg.delaySc});
        res.insert_or_assign("syncTrig[9].stg.periodSc", DumpEntry{syncTrig[9].stg.periodSc});
        res.insert_or_assign("syncTrig[10].stg.ctrl", DumpEntry{syncTrig[10].stg.ctrl});
        res.insert_or_assign("syncTrig[10].stg.ctrl.periodic", DumpEntry{syncTrig[10].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[10].stg.ctrl.resync", DumpEntry{syncTrig[10].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[10].stg.delaySc", DumpEntry{syncTrig[10].stg.delaySc});
        res.insert_or_assign("syncTrig[10].stg.periodSc", DumpEntry{syncTrig[10].stg.periodSc});
        res.insert_or_assign("syncTrig[11].stg.ctrl", DumpEntry{syncTrig[11].stg.ctrl});
        res.insert_or_assign("syncTrig[11].stg.ctrl.periodic", DumpEntry{syncTrig[11].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[11].stg.ctrl.resync", DumpEntry{syncTrig[11].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[11].stg.delaySc", DumpEntry{syncTrig[11].stg.delaySc});
        res.insert_or_assign("syncTrig[11].stg.periodSc", DumpEntry{syncTrig[11].stg.periodSc});
        res.insert_or_assign("syncTrig[12].stg.ctrl", DumpEntry{syncTrig[12].stg.ctrl});
        res.insert_or_assign("syncTrig[12].stg.ctrl.periodic", DumpEntry{syncTrig[12].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[12].stg.ctrl.resync", DumpEntry{syncTrig[12].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[12].stg.delaySc", DumpEntry{syncTrig[12].stg.delaySc});
        res.insert_or_assign("syncTrig[12].stg.periodSc", DumpEntry{syncTrig[12].stg.periodSc});
        res.insert_or_assign("syncTrig[13].stg.ctrl", DumpEntry{syncTrig[13].stg.ctrl});
        res.insert_or_assign("syncTrig[13].stg.ctrl.periodic", DumpEntry{syncTrig[13].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[13].stg.ctrl.resync", DumpEntry{syncTrig[13].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[13].stg.delaySc", DumpEntry{syncTrig[13].stg.delaySc});
        res.insert_or_assign("syncTrig[13].stg.periodSc", DumpEntry{syncTrig[13].stg.periodSc});
        res.insert_or_assign("syncTrig[14].stg.ctrl", DumpEntry{syncTrig[14].stg.ctrl});
        res.insert_or_assign("syncTrig[14].stg.ctrl.periodic", DumpEntry{syncTrig[14].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[14].stg.ctrl.resync", DumpEntry{syncTrig[14].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[14].stg.delaySc", DumpEntry{syncTrig[14].stg.delaySc});
        res.insert_or_assign("syncTrig[14].stg.periodSc", DumpEntry{syncTrig[14].stg.periodSc});
        res.insert_or_assign("syncTrig[15].stg.ctrl", DumpEntry{syncTrig[15].stg.ctrl});
        res.insert_or_assign("syncTrig[15].stg.ctrl.periodic", DumpEntry{syncTrig[15].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[15].stg.ctrl.resync", DumpEntry{syncTrig[15].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[15].stg.delaySc", DumpEntry{syncTrig[15].stg.delaySc});
        res.insert_or_assign("syncTrig[15].stg.periodSc", DumpEntry{syncTrig[15].stg.periodSc});
        res.insert_or_assign("syncTrig[16].stg.ctrl", DumpEntry{syncTrig[16].stg.ctrl});
        res.insert_or_assign("syncTrig[16].stg.ctrl.periodic", DumpEntry{syncTrig[16].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[16].stg.ctrl.resync", DumpEntry{syncTrig[16].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[16].stg.delaySc", DumpEntry{syncTrig[16].stg.delaySc});
        res.insert_or_assign("syncTrig[16].stg.periodSc", DumpEntry{syncTrig[16].stg.periodSc});
        res.insert_or_assign("syncTrig[17].stg.ctrl", DumpEntry{syncTrig[17].stg.ctrl});
        res.insert_or_assign("syncTrig[17].stg.ctrl.periodic", DumpEntry{syncTrig[17].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[17].stg.ctrl.resync", DumpEntry{syncTrig[17].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[17].stg.delaySc", DumpEntry{syncTrig[17].stg.delaySc});
        res.insert_or_assign("syncTrig[17].stg.periodSc", DumpEntry{syncTrig[17].stg.periodSc});
        res.insert_or_assign("syncTrig[18].stg.ctrl", DumpEntry{syncTrig[18].stg.ctrl});
        res.insert_or_assign("syncTrig[18].stg.ctrl.periodic", DumpEntry{syncTrig[18].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[18].stg.ctrl.resync", DumpEntry{syncTrig[18].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[18].stg.delaySc", DumpEntry{syncTrig[18].stg.delaySc});
        res.insert_or_assign("syncTrig[18].stg.periodSc", DumpEntry{syncTrig[18].stg.periodSc});
        res.insert_or_assign("syncTrig[19].stg.ctrl", DumpEntry{syncTrig[19].stg.ctrl});
        res.insert_or_assign("syncTrig[19].stg.ctrl.periodic", DumpEntry{syncTrig[19].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[19].stg.ctrl.resync", DumpEntry{syncTrig[19].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[19].stg.delaySc", DumpEntry{syncTrig[19].stg.delaySc});
        res.insert_or_assign("syncTrig[19].stg.periodSc", DumpEntry{syncTrig[19].stg.periodSc});
        res.insert_or_assign("syncTrig[20].stg.ctrl", DumpEntry{syncTrig[20].stg.ctrl});
        res.insert_or_assign("syncTrig[20].stg.ctrl.periodic", DumpEntry{syncTrig[20].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[20].stg.ctrl.resync", DumpEntry{syncTrig[20].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[20].stg.delaySc", DumpEntry{syncTrig[20].stg.delaySc});
        res.insert_or_assign("syncTrig[20].stg.periodSc", DumpEntry{syncTrig[20].stg.periodSc});
        res.insert_or_assign("syncTrig[21].stg.ctrl", DumpEntry{syncTrig[21].stg.ctrl});
        res.insert_or_assign("syncTrig[21].stg.ctrl.periodic", DumpEntry{syncTrig[21].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[21].stg.ctrl.resync", DumpEntry{syncTrig[21].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[21].stg.delaySc", DumpEntry{syncTrig[21].stg.delaySc});
        res.insert_or_assign("syncTrig[21].stg.periodSc", DumpEntry{syncTrig[21].stg.periodSc});
        res.insert_or_assign("syncTrig[22].stg.ctrl", DumpEntry{syncTrig[22].stg.ctrl});
        res.insert_or_assign("syncTrig[22].stg.ctrl.periodic", DumpEntry{syncTrig[22].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[22].stg.ctrl.resync", DumpEntry{syncTrig[22].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[22].stg.delaySc", DumpEntry{syncTrig[22].stg.delaySc});
        res.insert_or_assign("syncTrig[22].stg.periodSc", DumpEntry{syncTrig[22].stg.periodSc});
        res.insert_or_assign("syncTrig[23].stg.ctrl", DumpEntry{syncTrig[23].stg.ctrl});
        res.insert_or_assign("syncTrig[23].stg.ctrl.periodic", DumpEntry{syncTrig[23].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[23].stg.ctrl.resync", DumpEntry{syncTrig[23].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[23].stg.delaySc", DumpEntry{syncTrig[23].stg.delaySc});
        res.insert_or_assign("syncTrig[23].stg.periodSc", DumpEntry{syncTrig[23].stg.periodSc});
        res.insert_or_assign("syncTrig[24].stg.ctrl", DumpEntry{syncTrig[24].stg.ctrl});
        res.insert_or_assign("syncTrig[24].stg.ctrl.periodic", DumpEntry{syncTrig[24].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[24].stg.ctrl.resync", DumpEntry{syncTrig[24].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[24].stg.delaySc", DumpEntry{syncTrig[24].stg.delaySc});
        res.insert_or_assign("syncTrig[24].stg.periodSc", DumpEntry{syncTrig[24].stg.periodSc});
        res.insert_or_assign("syncTrig[25].stg.ctrl", DumpEntry{syncTrig[25].stg.ctrl});
        res.insert_or_assign("syncTrig[25].stg.ctrl.periodic", DumpEntry{syncTrig[25].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[25].stg.ctrl.resync", DumpEntry{syncTrig[25].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[25].stg.delaySc", DumpEntry{syncTrig[25].stg.delaySc});
        res.insert_or_assign("syncTrig[25].stg.periodSc", DumpEntry{syncTrig[25].stg.periodSc});
        res.insert_or_assign("syncTrig[26].stg.ctrl", DumpEntry{syncTrig[26].stg.ctrl});
        res.insert_or_assign("syncTrig[26].stg.ctrl.periodic", DumpEntry{syncTrig[26].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[26].stg.ctrl.resync", DumpEntry{syncTrig[26].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[26].stg.delaySc", DumpEntry{syncTrig[26].stg.delaySc});
        res.insert_or_assign("syncTrig[26].stg.periodSc", DumpEntry{syncTrig[26].stg.periodSc});
        res.insert_or_assign("syncTrig[27].stg.ctrl", DumpEntry{syncTrig[27].stg.ctrl});
        res.insert_or_assign("syncTrig[27].stg.ctrl.periodic", DumpEntry{syncTrig[27].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[27].stg.ctrl.resync", DumpEntry{syncTrig[27].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[27].stg.delaySc", DumpEntry{syncTrig[27].stg.delaySc});
        res.insert_or_assign("syncTrig[27].stg.periodSc", DumpEntry{syncTrig[27].stg.periodSc});
        res.insert_or_assign("syncTrig[28].stg.ctrl", DumpEntry{syncTrig[28].stg.ctrl});
        res.insert_or_assign("syncTrig[28].stg.ctrl.periodic", DumpEntry{syncTrig[28].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[28].stg.ctrl.resync", DumpEntry{syncTrig[28].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[28].stg.delaySc", DumpEntry{syncTrig[28].stg.delaySc});
        res.insert_or_assign("syncTrig[28].stg.periodSc", DumpEntry{syncTrig[28].stg.periodSc});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::SyncUart`
    //!
    //! @param syncUart A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under syncUart
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::SyncUart& syncUart)
    {
        DumpMap res{syncUart.base()};
        res.insert_or_assign("syncUart.ctrl", DumpEntry{syncUart.ctrl});
        res.insert_or_assign("syncUart.ctrl.setTxData", DumpEntry{syncUart.ctrl.setTxData});
        res.insert_or_assign("syncUart.config", DumpEntry{syncUart.config});
        res.insert_or_assign("syncUart.config.enParity", DumpEntry{syncUart.config.enParity});
        res.insert_or_assign("syncUart.config.interFrameGap", DumpEntry{syncUart.config.interFrameGap});
        res.insert_or_assign("syncUart.uartSendTimeNs", DumpEntry{syncUart.uartSendTimeNs});
        res.insert_or_assign("syncUart.scPerUartBit", DumpEntry{syncUart.scPerUartBit});
        res.insert_or_assign("syncUart.scPerUartBit.val", DumpEntry{syncUart.scPerUartBit.val});
        res.insert_or_assign("syncUart.uartData", DumpEntry{syncUart.uartData});
        res.insert_or_assign("syncUart.uartData.val", DumpEntry{syncUart.uartData.val});
        res.insert_or_assign("syncUart.firingTimeS", DumpEntry{syncUart.firingTimeS});
        res.insert_or_assign("syncUart.firingTimeNs", DumpEntry{syncUart.firingTimeNs});
        res.insert_or_assign("syncUart.magic", DumpEntry{syncUart.magic});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmBank::Cc0Array`
    //!
    //! @param cc0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under cc0
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmBank::Cc0Array& cc0)
    {
        DumpMap res{cc0.base()};
        res.insert_or_assign("cc0[0].value", DumpEntry{cc0[0].value});
        res.insert_or_assign("cc0[1].value", DumpEntry{cc0[1].value});
        res.insert_or_assign("cc0[2].value", DumpEntry{cc0[2].value});
        res.insert_or_assign("cc0[3].value", DumpEntry{cc0[3].value});
        res.insert_or_assign("cc0[4].value", DumpEntry{cc0[4].value});
        res.insert_or_assign("cc0[5].value", DumpEntry{cc0[5].value});
        res.insert_or_assign("cc0[6].value", DumpEntry{cc0[6].value});
        res.insert_or_assign("cc0[7].value", DumpEntry{cc0[7].value});
        res.insert_or_assign("cc0[8].value", DumpEntry{cc0[8].value});
        res.insert_or_assign("cc0[9].value", DumpEntry{cc0[9].value});
        res.insert_or_assign("cc0[10].value", DumpEntry{cc0[10].value});
        res.insert_or_assign("cc0[11].value", DumpEntry{cc0[11].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmBank::Cc1Array`
    //!
    //! @param cc1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under cc1
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmBank::Cc1Array& cc1)
    {
        DumpMap res{cc1.base()};
        res.insert_or_assign("cc1[0].value", DumpEntry{cc1[0].value});
        res.insert_or_assign("cc1[1].value", DumpEntry{cc1[1].value});
        res.insert_or_assign("cc1[2].value", DumpEntry{cc1[2].value});
        res.insert_or_assign("cc1[3].value", DumpEntry{cc1[3].value});
        res.insert_or_assign("cc1[4].value", DumpEntry{cc1[4].value});
        res.insert_or_assign("cc1[5].value", DumpEntry{cc1[5].value});
        res.insert_or_assign("cc1[6].value", DumpEntry{cc1[6].value});
        res.insert_or_assign("cc1[7].value", DumpEntry{cc1[7].value});
        res.insert_or_assign("cc1[8].value", DumpEntry{cc1[8].value});
        res.insert_or_assign("cc1[9].value", DumpEntry{cc1[9].value});
        res.insert_or_assign("cc1[10].value", DumpEntry{cc1[10].value});
        res.insert_or_assign("cc1[11].value", DumpEntry{cc1[11].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmBank`
    //!
    //! @param pwmBank A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwmBank
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmBank& pwmBank)
    {
        DumpMap res{pwmBank.base()};
        res.insert_or_assign("pwmBank.cc0[0].value", DumpEntry{pwmBank.cc0[0].value});
        res.insert_or_assign("pwmBank.cc0[1].value", DumpEntry{pwmBank.cc0[1].value});
        res.insert_or_assign("pwmBank.cc0[2].value", DumpEntry{pwmBank.cc0[2].value});
        res.insert_or_assign("pwmBank.cc0[3].value", DumpEntry{pwmBank.cc0[3].value});
        res.insert_or_assign("pwmBank.cc0[4].value", DumpEntry{pwmBank.cc0[4].value});
        res.insert_or_assign("pwmBank.cc0[5].value", DumpEntry{pwmBank.cc0[5].value});
        res.insert_or_assign("pwmBank.cc0[6].value", DumpEntry{pwmBank.cc0[6].value});
        res.insert_or_assign("pwmBank.cc0[7].value", DumpEntry{pwmBank.cc0[7].value});
        res.insert_or_assign("pwmBank.cc0[8].value", DumpEntry{pwmBank.cc0[8].value});
        res.insert_or_assign("pwmBank.cc0[9].value", DumpEntry{pwmBank.cc0[9].value});
        res.insert_or_assign("pwmBank.cc0[10].value", DumpEntry{pwmBank.cc0[10].value});
        res.insert_or_assign("pwmBank.cc0[11].value", DumpEntry{pwmBank.cc0[11].value});
        res.insert_or_assign("pwmBank.cc1[0].value", DumpEntry{pwmBank.cc1[0].value});
        res.insert_or_assign("pwmBank.cc1[1].value", DumpEntry{pwmBank.cc1[1].value});
        res.insert_or_assign("pwmBank.cc1[2].value", DumpEntry{pwmBank.cc1[2].value});
        res.insert_or_assign("pwmBank.cc1[3].value", DumpEntry{pwmBank.cc1[3].value});
        res.insert_or_assign("pwmBank.cc1[4].value", DumpEntry{pwmBank.cc1[4].value});
        res.insert_or_assign("pwmBank.cc1[5].value", DumpEntry{pwmBank.cc1[5].value});
        res.insert_or_assign("pwmBank.cc1[6].value", DumpEntry{pwmBank.cc1[6].value});
        res.insert_or_assign("pwmBank.cc1[7].value", DumpEntry{pwmBank.cc1[7].value});
        res.insert_or_assign("pwmBank.cc1[8].value", DumpEntry{pwmBank.cc1[8].value});
        res.insert_or_assign("pwmBank.cc1[9].value", DumpEntry{pwmBank.cc1[9].value});
        res.insert_or_assign("pwmBank.cc1[10].value", DumpEntry{pwmBank.cc1[10].value});
        res.insert_or_assign("pwmBank.cc1[11].value", DumpEntry{pwmBank.cc1[11].value});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Scratchpad::MemArray`
    //!
    //! @param mem A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under mem
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Scratchpad::MemArray& mem)
    {
        DumpMap res{mem.base()};
        res.insert_or_assign("mem[0]reg", DumpEntry{mem[0] reg});
        res.insert_or_assign("mem[1]reg", DumpEntry{mem[1] reg});
        res.insert_or_assign("mem[2]reg", DumpEntry{mem[2] reg});
        res.insert_or_assign("mem[3]reg", DumpEntry{mem[3] reg});
        res.insert_or_assign("mem[4]reg", DumpEntry{mem[4] reg});
        res.insert_or_assign("mem[5]reg", DumpEntry{mem[5] reg});
        res.insert_or_assign("mem[6]reg", DumpEntry{mem[6] reg});
        res.insert_or_assign("mem[7]reg", DumpEntry{mem[7] reg});
        res.insert_or_assign("mem[8]reg", DumpEntry{mem[8] reg});
        res.insert_or_assign("mem[9]reg", DumpEntry{mem[9] reg});
        res.insert_or_assign("mem[10]reg", DumpEntry{mem[10] reg});
        res.insert_or_assign("mem[11]reg", DumpEntry{mem[11] reg});
        res.insert_or_assign("mem[12]reg", DumpEntry{mem[12] reg});
        res.insert_or_assign("mem[13]reg", DumpEntry{mem[13] reg});
        res.insert_or_assign("mem[14]reg", DumpEntry{mem[14] reg});
        res.insert_or_assign("mem[15]reg", DumpEntry{mem[15] reg});
        res.insert_or_assign("mem[16]reg", DumpEntry{mem[16] reg});
        res.insert_or_assign("mem[17]reg", DumpEntry{mem[17] reg});
        res.insert_or_assign("mem[18]reg", DumpEntry{mem[18] reg});
        res.insert_or_assign("mem[19]reg", DumpEntry{mem[19] reg});
        res.insert_or_assign("mem[20]reg", DumpEntry{mem[20] reg});
        res.insert_or_assign("mem[21]reg", DumpEntry{mem[21] reg});
        res.insert_or_assign("mem[22]reg", DumpEntry{mem[22] reg});
        res.insert_or_assign("mem[23]reg", DumpEntry{mem[23] reg});
        res.insert_or_assign("mem[24]reg", DumpEntry{mem[24] reg});
        res.insert_or_assign("mem[25]reg", DumpEntry{mem[25] reg});
        res.insert_or_assign("mem[26]reg", DumpEntry{mem[26] reg});
        res.insert_or_assign("mem[27]reg", DumpEntry{mem[27] reg});
        res.insert_or_assign("mem[28]reg", DumpEntry{mem[28] reg});
        res.insert_or_assign("mem[29]reg", DumpEntry{mem[29] reg});
        res.insert_or_assign("mem[30]reg", DumpEntry{mem[30] reg});
        res.insert_or_assign("mem[31]reg", DumpEntry{mem[31] reg});
        res.insert_or_assign("mem[32]reg", DumpEntry{mem[32] reg});
        res.insert_or_assign("mem[33]reg", DumpEntry{mem[33] reg});
        res.insert_or_assign("mem[34]reg", DumpEntry{mem[34] reg});
        res.insert_or_assign("mem[35]reg", DumpEntry{mem[35] reg});
        res.insert_or_assign("mem[36]reg", DumpEntry{mem[36] reg});
        res.insert_or_assign("mem[37]reg", DumpEntry{mem[37] reg});
        res.insert_or_assign("mem[38]reg", DumpEntry{mem[38] reg});
        res.insert_or_assign("mem[39]reg", DumpEntry{mem[39] reg});
        res.insert_or_assign("mem[40]reg", DumpEntry{mem[40] reg});
        res.insert_or_assign("mem[41]reg", DumpEntry{mem[41] reg});
        res.insert_or_assign("mem[42]reg", DumpEntry{mem[42] reg});
        res.insert_or_assign("mem[43]reg", DumpEntry{mem[43] reg});
        res.insert_or_assign("mem[44]reg", DumpEntry{mem[44] reg});
        res.insert_or_assign("mem[45]reg", DumpEntry{mem[45] reg});
        res.insert_or_assign("mem[46]reg", DumpEntry{mem[46] reg});
        res.insert_or_assign("mem[47]reg", DumpEntry{mem[47] reg});
        res.insert_or_assign("mem[48]reg", DumpEntry{mem[48] reg});
        res.insert_or_assign("mem[49]reg", DumpEntry{mem[49] reg});
        res.insert_or_assign("mem[50]reg", DumpEntry{mem[50] reg});
        res.insert_or_assign("mem[51]reg", DumpEntry{mem[51] reg});
        res.insert_or_assign("mem[52]reg", DumpEntry{mem[52] reg});
        res.insert_or_assign("mem[53]reg", DumpEntry{mem[53] reg});
        res.insert_or_assign("mem[54]reg", DumpEntry{mem[54] reg});
        res.insert_or_assign("mem[55]reg", DumpEntry{mem[55] reg});
        res.insert_or_assign("mem[56]reg", DumpEntry{mem[56] reg});
        res.insert_or_assign("mem[57]reg", DumpEntry{mem[57] reg});
        res.insert_or_assign("mem[58]reg", DumpEntry{mem[58] reg});
        res.insert_or_assign("mem[59]reg", DumpEntry{mem[59] reg});
        res.insert_or_assign("mem[60]reg", DumpEntry{mem[60] reg});
        res.insert_or_assign("mem[61]reg", DumpEntry{mem[61] reg});
        res.insert_or_assign("mem[62]reg", DumpEntry{mem[62] reg});
        res.insert_or_assign("mem[63]reg", DumpEntry{mem[63] reg});
        res.insert_or_assign("mem[64]reg", DumpEntry{mem[64] reg});
        res.insert_or_assign("mem[65]reg", DumpEntry{mem[65] reg});
        res.insert_or_assign("mem[66]reg", DumpEntry{mem[66] reg});
        res.insert_or_assign("mem[67]reg", DumpEntry{mem[67] reg});
        res.insert_or_assign("mem[68]reg", DumpEntry{mem[68] reg});
        res.insert_or_assign("mem[69]reg", DumpEntry{mem[69] reg});
        res.insert_or_assign("mem[70]reg", DumpEntry{mem[70] reg});
        res.insert_or_assign("mem[71]reg", DumpEntry{mem[71] reg});
        res.insert_or_assign("mem[72]reg", DumpEntry{mem[72] reg});
        res.insert_or_assign("mem[73]reg", DumpEntry{mem[73] reg});
        res.insert_or_assign("mem[74]reg", DumpEntry{mem[74] reg});
        res.insert_or_assign("mem[75]reg", DumpEntry{mem[75] reg});
        res.insert_or_assign("mem[76]reg", DumpEntry{mem[76] reg});
        res.insert_or_assign("mem[77]reg", DumpEntry{mem[77] reg});
        res.insert_or_assign("mem[78]reg", DumpEntry{mem[78] reg});
        res.insert_or_assign("mem[79]reg", DumpEntry{mem[79] reg});
        res.insert_or_assign("mem[80]reg", DumpEntry{mem[80] reg});
        res.insert_or_assign("mem[81]reg", DumpEntry{mem[81] reg});
        res.insert_or_assign("mem[82]reg", DumpEntry{mem[82] reg});
        res.insert_or_assign("mem[83]reg", DumpEntry{mem[83] reg});
        res.insert_or_assign("mem[84]reg", DumpEntry{mem[84] reg});
        res.insert_or_assign("mem[85]reg", DumpEntry{mem[85] reg});
        res.insert_or_assign("mem[86]reg", DumpEntry{mem[86] reg});
        res.insert_or_assign("mem[87]reg", DumpEntry{mem[87] reg});
        res.insert_or_assign("mem[88]reg", DumpEntry{mem[88] reg});
        res.insert_or_assign("mem[89]reg", DumpEntry{mem[89] reg});
        res.insert_or_assign("mem[90]reg", DumpEntry{mem[90] reg});
        res.insert_or_assign("mem[91]reg", DumpEntry{mem[91] reg});
        res.insert_or_assign("mem[92]reg", DumpEntry{mem[92] reg});
        res.insert_or_assign("mem[93]reg", DumpEntry{mem[93] reg});
        res.insert_or_assign("mem[94]reg", DumpEntry{mem[94] reg});
        res.insert_or_assign("mem[95]reg", DumpEntry{mem[95] reg});
        res.insert_or_assign("mem[96]reg", DumpEntry{mem[96] reg});
        res.insert_or_assign("mem[97]reg", DumpEntry{mem[97] reg});
        res.insert_or_assign("mem[98]reg", DumpEntry{mem[98] reg});
        res.insert_or_assign("mem[99]reg", DumpEntry{mem[99] reg});
        res.insert_or_assign("mem[100]reg", DumpEntry{mem[100] reg});
        res.insert_or_assign("mem[101]reg", DumpEntry{mem[101] reg});
        res.insert_or_assign("mem[102]reg", DumpEntry{mem[102] reg});
        res.insert_or_assign("mem[103]reg", DumpEntry{mem[103] reg});
        res.insert_or_assign("mem[104]reg", DumpEntry{mem[104] reg});
        res.insert_or_assign("mem[105]reg", DumpEntry{mem[105] reg});
        res.insert_or_assign("mem[106]reg", DumpEntry{mem[106] reg});
        res.insert_or_assign("mem[107]reg", DumpEntry{mem[107] reg});
        res.insert_or_assign("mem[108]reg", DumpEntry{mem[108] reg});
        res.insert_or_assign("mem[109]reg", DumpEntry{mem[109] reg});
        res.insert_or_assign("mem[110]reg", DumpEntry{mem[110] reg});
        res.insert_or_assign("mem[111]reg", DumpEntry{mem[111] reg});
        res.insert_or_assign("mem[112]reg", DumpEntry{mem[112] reg});
        res.insert_or_assign("mem[113]reg", DumpEntry{mem[113] reg});
        res.insert_or_assign("mem[114]reg", DumpEntry{mem[114] reg});
        res.insert_or_assign("mem[115]reg", DumpEntry{mem[115] reg});
        res.insert_or_assign("mem[116]reg", DumpEntry{mem[116] reg});
        res.insert_or_assign("mem[117]reg", DumpEntry{mem[117] reg});
        res.insert_or_assign("mem[118]reg", DumpEntry{mem[118] reg});
        res.insert_or_assign("mem[119]reg", DumpEntry{mem[119] reg});
        res.insert_or_assign("mem[120]reg", DumpEntry{mem[120] reg});
        res.insert_or_assign("mem[121]reg", DumpEntry{mem[121] reg});
        res.insert_or_assign("mem[122]reg", DumpEntry{mem[122] reg});
        res.insert_or_assign("mem[123]reg", DumpEntry{mem[123] reg});
        res.insert_or_assign("mem[124]reg", DumpEntry{mem[124] reg});
        res.insert_or_assign("mem[125]reg", DumpEntry{mem[125] reg});
        res.insert_or_assign("mem[126]reg", DumpEntry{mem[126] reg});
        res.insert_or_assign("mem[127]reg", DumpEntry{mem[127] reg});
        res.insert_or_assign("mem[128]reg", DumpEntry{mem[128] reg});
        res.insert_or_assign("mem[129]reg", DumpEntry{mem[129] reg});
        res.insert_or_assign("mem[130]reg", DumpEntry{mem[130] reg});
        res.insert_or_assign("mem[131]reg", DumpEntry{mem[131] reg});
        res.insert_or_assign("mem[132]reg", DumpEntry{mem[132] reg});
        res.insert_or_assign("mem[133]reg", DumpEntry{mem[133] reg});
        res.insert_or_assign("mem[134]reg", DumpEntry{mem[134] reg});
        res.insert_or_assign("mem[135]reg", DumpEntry{mem[135] reg});
        res.insert_or_assign("mem[136]reg", DumpEntry{mem[136] reg});
        res.insert_or_assign("mem[137]reg", DumpEntry{mem[137] reg});
        res.insert_or_assign("mem[138]reg", DumpEntry{mem[138] reg});
        res.insert_or_assign("mem[139]reg", DumpEntry{mem[139] reg});
        res.insert_or_assign("mem[140]reg", DumpEntry{mem[140] reg});
        res.insert_or_assign("mem[141]reg", DumpEntry{mem[141] reg});
        res.insert_or_assign("mem[142]reg", DumpEntry{mem[142] reg});
        res.insert_or_assign("mem[143]reg", DumpEntry{mem[143] reg});
        res.insert_or_assign("mem[144]reg", DumpEntry{mem[144] reg});
        res.insert_or_assign("mem[145]reg", DumpEntry{mem[145] reg});
        res.insert_or_assign("mem[146]reg", DumpEntry{mem[146] reg});
        res.insert_or_assign("mem[147]reg", DumpEntry{mem[147] reg});
        res.insert_or_assign("mem[148]reg", DumpEntry{mem[148] reg});
        res.insert_or_assign("mem[149]reg", DumpEntry{mem[149] reg});
        res.insert_or_assign("mem[150]reg", DumpEntry{mem[150] reg});
        res.insert_or_assign("mem[151]reg", DumpEntry{mem[151] reg});
        res.insert_or_assign("mem[152]reg", DumpEntry{mem[152] reg});
        res.insert_or_assign("mem[153]reg", DumpEntry{mem[153] reg});
        res.insert_or_assign("mem[154]reg", DumpEntry{mem[154] reg});
        res.insert_or_assign("mem[155]reg", DumpEntry{mem[155] reg});
        res.insert_or_assign("mem[156]reg", DumpEntry{mem[156] reg});
        res.insert_or_assign("mem[157]reg", DumpEntry{mem[157] reg});
        res.insert_or_assign("mem[158]reg", DumpEntry{mem[158] reg});
        res.insert_or_assign("mem[159]reg", DumpEntry{mem[159] reg});
        res.insert_or_assign("mem[160]reg", DumpEntry{mem[160] reg});
        res.insert_or_assign("mem[161]reg", DumpEntry{mem[161] reg});
        res.insert_or_assign("mem[162]reg", DumpEntry{mem[162] reg});
        res.insert_or_assign("mem[163]reg", DumpEntry{mem[163] reg});
        res.insert_or_assign("mem[164]reg", DumpEntry{mem[164] reg});
        res.insert_or_assign("mem[165]reg", DumpEntry{mem[165] reg});
        res.insert_or_assign("mem[166]reg", DumpEntry{mem[166] reg});
        res.insert_or_assign("mem[167]reg", DumpEntry{mem[167] reg});
        res.insert_or_assign("mem[168]reg", DumpEntry{mem[168] reg});
        res.insert_or_assign("mem[169]reg", DumpEntry{mem[169] reg});
        res.insert_or_assign("mem[170]reg", DumpEntry{mem[170] reg});
        res.insert_or_assign("mem[171]reg", DumpEntry{mem[171] reg});
        res.insert_or_assign("mem[172]reg", DumpEntry{mem[172] reg});
        res.insert_or_assign("mem[173]reg", DumpEntry{mem[173] reg});
        res.insert_or_assign("mem[174]reg", DumpEntry{mem[174] reg});
        res.insert_or_assign("mem[175]reg", DumpEntry{mem[175] reg});
        res.insert_or_assign("mem[176]reg", DumpEntry{mem[176] reg});
        res.insert_or_assign("mem[177]reg", DumpEntry{mem[177] reg});
        res.insert_or_assign("mem[178]reg", DumpEntry{mem[178] reg});
        res.insert_or_assign("mem[179]reg", DumpEntry{mem[179] reg});
        res.insert_or_assign("mem[180]reg", DumpEntry{mem[180] reg});
        res.insert_or_assign("mem[181]reg", DumpEntry{mem[181] reg});
        res.insert_or_assign("mem[182]reg", DumpEntry{mem[182] reg});
        res.insert_or_assign("mem[183]reg", DumpEntry{mem[183] reg});
        res.insert_or_assign("mem[184]reg", DumpEntry{mem[184] reg});
        res.insert_or_assign("mem[185]reg", DumpEntry{mem[185] reg});
        res.insert_or_assign("mem[186]reg", DumpEntry{mem[186] reg});
        res.insert_or_assign("mem[187]reg", DumpEntry{mem[187] reg});
        res.insert_or_assign("mem[188]reg", DumpEntry{mem[188] reg});
        res.insert_or_assign("mem[189]reg", DumpEntry{mem[189] reg});
        res.insert_or_assign("mem[190]reg", DumpEntry{mem[190] reg});
        res.insert_or_assign("mem[191]reg", DumpEntry{mem[191] reg});
        res.insert_or_assign("mem[192]reg", DumpEntry{mem[192] reg});
        res.insert_or_assign("mem[193]reg", DumpEntry{mem[193] reg});
        res.insert_or_assign("mem[194]reg", DumpEntry{mem[194] reg});
        res.insert_or_assign("mem[195]reg", DumpEntry{mem[195] reg});
        res.insert_or_assign("mem[196]reg", DumpEntry{mem[196] reg});
        res.insert_or_assign("mem[197]reg", DumpEntry{mem[197] reg});
        res.insert_or_assign("mem[198]reg", DumpEntry{mem[198] reg});
        res.insert_or_assign("mem[199]reg", DumpEntry{mem[199] reg});
        res.insert_or_assign("mem[200]reg", DumpEntry{mem[200] reg});
        res.insert_or_assign("mem[201]reg", DumpEntry{mem[201] reg});
        res.insert_or_assign("mem[202]reg", DumpEntry{mem[202] reg});
        res.insert_or_assign("mem[203]reg", DumpEntry{mem[203] reg});
        res.insert_or_assign("mem[204]reg", DumpEntry{mem[204] reg});
        res.insert_or_assign("mem[205]reg", DumpEntry{mem[205] reg});
        res.insert_or_assign("mem[206]reg", DumpEntry{mem[206] reg});
        res.insert_or_assign("mem[207]reg", DumpEntry{mem[207] reg});
        res.insert_or_assign("mem[208]reg", DumpEntry{mem[208] reg});
        res.insert_or_assign("mem[209]reg", DumpEntry{mem[209] reg});
        res.insert_or_assign("mem[210]reg", DumpEntry{mem[210] reg});
        res.insert_or_assign("mem[211]reg", DumpEntry{mem[211] reg});
        res.insert_or_assign("mem[212]reg", DumpEntry{mem[212] reg});
        res.insert_or_assign("mem[213]reg", DumpEntry{mem[213] reg});
        res.insert_or_assign("mem[214]reg", DumpEntry{mem[214] reg});
        res.insert_or_assign("mem[215]reg", DumpEntry{mem[215] reg});
        res.insert_or_assign("mem[216]reg", DumpEntry{mem[216] reg});
        res.insert_or_assign("mem[217]reg", DumpEntry{mem[217] reg});
        res.insert_or_assign("mem[218]reg", DumpEntry{mem[218] reg});
        res.insert_or_assign("mem[219]reg", DumpEntry{mem[219] reg});
        res.insert_or_assign("mem[220]reg", DumpEntry{mem[220] reg});
        res.insert_or_assign("mem[221]reg", DumpEntry{mem[221] reg});
        res.insert_or_assign("mem[222]reg", DumpEntry{mem[222] reg});
        res.insert_or_assign("mem[223]reg", DumpEntry{mem[223] reg});
        res.insert_or_assign("mem[224]reg", DumpEntry{mem[224] reg});
        res.insert_or_assign("mem[225]reg", DumpEntry{mem[225] reg});
        res.insert_or_assign("mem[226]reg", DumpEntry{mem[226] reg});
        res.insert_or_assign("mem[227]reg", DumpEntry{mem[227] reg});
        res.insert_or_assign("mem[228]reg", DumpEntry{mem[228] reg});
        res.insert_or_assign("mem[229]reg", DumpEntry{mem[229] reg});
        res.insert_or_assign("mem[230]reg", DumpEntry{mem[230] reg});
        res.insert_or_assign("mem[231]reg", DumpEntry{mem[231] reg});
        res.insert_or_assign("mem[232]reg", DumpEntry{mem[232] reg});
        res.insert_or_assign("mem[233]reg", DumpEntry{mem[233] reg});
        res.insert_or_assign("mem[234]reg", DumpEntry{mem[234] reg});
        res.insert_or_assign("mem[235]reg", DumpEntry{mem[235] reg});
        res.insert_or_assign("mem[236]reg", DumpEntry{mem[236] reg});
        res.insert_or_assign("mem[237]reg", DumpEntry{mem[237] reg});
        res.insert_or_assign("mem[238]reg", DumpEntry{mem[238] reg});
        res.insert_or_assign("mem[239]reg", DumpEntry{mem[239] reg});
        res.insert_or_assign("mem[240]reg", DumpEntry{mem[240] reg});
        res.insert_or_assign("mem[241]reg", DumpEntry{mem[241] reg});
        res.insert_or_assign("mem[242]reg", DumpEntry{mem[242] reg});
        res.insert_or_assign("mem[243]reg", DumpEntry{mem[243] reg});
        res.insert_or_assign("mem[244]reg", DumpEntry{mem[244] reg});
        res.insert_or_assign("mem[245]reg", DumpEntry{mem[245] reg});
        res.insert_or_assign("mem[246]reg", DumpEntry{mem[246] reg});
        res.insert_or_assign("mem[247]reg", DumpEntry{mem[247] reg});
        res.insert_or_assign("mem[248]reg", DumpEntry{mem[248] reg});
        res.insert_or_assign("mem[249]reg", DumpEntry{mem[249] reg});
        res.insert_or_assign("mem[250]reg", DumpEntry{mem[250] reg});
        res.insert_or_assign("mem[251]reg", DumpEntry{mem[251] reg});
        res.insert_or_assign("mem[252]reg", DumpEntry{mem[252] reg});
        res.insert_or_assign("mem[253]reg", DumpEntry{mem[253] reg});
        res.insert_or_assign("mem[254]reg", DumpEntry{mem[254] reg});
        res.insert_or_assign("mem[255]reg", DumpEntry{mem[255] reg});
        res.insert_or_assign("mem[256]reg", DumpEntry{mem[256] reg});
        res.insert_or_assign("mem[257]reg", DumpEntry{mem[257] reg});
        res.insert_or_assign("mem[258]reg", DumpEntry{mem[258] reg});
        res.insert_or_assign("mem[259]reg", DumpEntry{mem[259] reg});
        res.insert_or_assign("mem[260]reg", DumpEntry{mem[260] reg});
        res.insert_or_assign("mem[261]reg", DumpEntry{mem[261] reg});
        res.insert_or_assign("mem[262]reg", DumpEntry{mem[262] reg});
        res.insert_or_assign("mem[263]reg", DumpEntry{mem[263] reg});
        res.insert_or_assign("mem[264]reg", DumpEntry{mem[264] reg});
        res.insert_or_assign("mem[265]reg", DumpEntry{mem[265] reg});
        res.insert_or_assign("mem[266]reg", DumpEntry{mem[266] reg});
        res.insert_or_assign("mem[267]reg", DumpEntry{mem[267] reg});
        res.insert_or_assign("mem[268]reg", DumpEntry{mem[268] reg});
        res.insert_or_assign("mem[269]reg", DumpEntry{mem[269] reg});
        res.insert_or_assign("mem[270]reg", DumpEntry{mem[270] reg});
        res.insert_or_assign("mem[271]reg", DumpEntry{mem[271] reg});
        res.insert_or_assign("mem[272]reg", DumpEntry{mem[272] reg});
        res.insert_or_assign("mem[273]reg", DumpEntry{mem[273] reg});
        res.insert_or_assign("mem[274]reg", DumpEntry{mem[274] reg});
        res.insert_or_assign("mem[275]reg", DumpEntry{mem[275] reg});
        res.insert_or_assign("mem[276]reg", DumpEntry{mem[276] reg});
        res.insert_or_assign("mem[277]reg", DumpEntry{mem[277] reg});
        res.insert_or_assign("mem[278]reg", DumpEntry{mem[278] reg});
        res.insert_or_assign("mem[279]reg", DumpEntry{mem[279] reg});
        res.insert_or_assign("mem[280]reg", DumpEntry{mem[280] reg});
        res.insert_or_assign("mem[281]reg", DumpEntry{mem[281] reg});
        res.insert_or_assign("mem[282]reg", DumpEntry{mem[282] reg});
        res.insert_or_assign("mem[283]reg", DumpEntry{mem[283] reg});
        res.insert_or_assign("mem[284]reg", DumpEntry{mem[284] reg});
        res.insert_or_assign("mem[285]reg", DumpEntry{mem[285] reg});
        res.insert_or_assign("mem[286]reg", DumpEntry{mem[286] reg});
        res.insert_or_assign("mem[287]reg", DumpEntry{mem[287] reg});
        res.insert_or_assign("mem[288]reg", DumpEntry{mem[288] reg});
        res.insert_or_assign("mem[289]reg", DumpEntry{mem[289] reg});
        res.insert_or_assign("mem[290]reg", DumpEntry{mem[290] reg});
        res.insert_or_assign("mem[291]reg", DumpEntry{mem[291] reg});
        res.insert_or_assign("mem[292]reg", DumpEntry{mem[292] reg});
        res.insert_or_assign("mem[293]reg", DumpEntry{mem[293] reg});
        res.insert_or_assign("mem[294]reg", DumpEntry{mem[294] reg});
        res.insert_or_assign("mem[295]reg", DumpEntry{mem[295] reg});
        res.insert_or_assign("mem[296]reg", DumpEntry{mem[296] reg});
        res.insert_or_assign("mem[297]reg", DumpEntry{mem[297] reg});
        res.insert_or_assign("mem[298]reg", DumpEntry{mem[298] reg});
        res.insert_or_assign("mem[299]reg", DumpEntry{mem[299] reg});
        res.insert_or_assign("mem[300]reg", DumpEntry{mem[300] reg});
        res.insert_or_assign("mem[301]reg", DumpEntry{mem[301] reg});
        res.insert_or_assign("mem[302]reg", DumpEntry{mem[302] reg});
        res.insert_or_assign("mem[303]reg", DumpEntry{mem[303] reg});
        res.insert_or_assign("mem[304]reg", DumpEntry{mem[304] reg});
        res.insert_or_assign("mem[305]reg", DumpEntry{mem[305] reg});
        res.insert_or_assign("mem[306]reg", DumpEntry{mem[306] reg});
        res.insert_or_assign("mem[307]reg", DumpEntry{mem[307] reg});
        res.insert_or_assign("mem[308]reg", DumpEntry{mem[308] reg});
        res.insert_or_assign("mem[309]reg", DumpEntry{mem[309] reg});
        res.insert_or_assign("mem[310]reg", DumpEntry{mem[310] reg});
        res.insert_or_assign("mem[311]reg", DumpEntry{mem[311] reg});
        res.insert_or_assign("mem[312]reg", DumpEntry{mem[312] reg});
        res.insert_or_assign("mem[313]reg", DumpEntry{mem[313] reg});
        res.insert_or_assign("mem[314]reg", DumpEntry{mem[314] reg});
        res.insert_or_assign("mem[315]reg", DumpEntry{mem[315] reg});
        res.insert_or_assign("mem[316]reg", DumpEntry{mem[316] reg});
        res.insert_or_assign("mem[317]reg", DumpEntry{mem[317] reg});
        res.insert_or_assign("mem[318]reg", DumpEntry{mem[318] reg});
        res.insert_or_assign("mem[319]reg", DumpEntry{mem[319] reg});
        res.insert_or_assign("mem[320]reg", DumpEntry{mem[320] reg});
        res.insert_or_assign("mem[321]reg", DumpEntry{mem[321] reg});
        res.insert_or_assign("mem[322]reg", DumpEntry{mem[322] reg});
        res.insert_or_assign("mem[323]reg", DumpEntry{mem[323] reg});
        res.insert_or_assign("mem[324]reg", DumpEntry{mem[324] reg});
        res.insert_or_assign("mem[325]reg", DumpEntry{mem[325] reg});
        res.insert_or_assign("mem[326]reg", DumpEntry{mem[326] reg});
        res.insert_or_assign("mem[327]reg", DumpEntry{mem[327] reg});
        res.insert_or_assign("mem[328]reg", DumpEntry{mem[328] reg});
        res.insert_or_assign("mem[329]reg", DumpEntry{mem[329] reg});
        res.insert_or_assign("mem[330]reg", DumpEntry{mem[330] reg});
        res.insert_or_assign("mem[331]reg", DumpEntry{mem[331] reg});
        res.insert_or_assign("mem[332]reg", DumpEntry{mem[332] reg});
        res.insert_or_assign("mem[333]reg", DumpEntry{mem[333] reg});
        res.insert_or_assign("mem[334]reg", DumpEntry{mem[334] reg});
        res.insert_or_assign("mem[335]reg", DumpEntry{mem[335] reg});
        res.insert_or_assign("mem[336]reg", DumpEntry{mem[336] reg});
        res.insert_or_assign("mem[337]reg", DumpEntry{mem[337] reg});
        res.insert_or_assign("mem[338]reg", DumpEntry{mem[338] reg});
        res.insert_or_assign("mem[339]reg", DumpEntry{mem[339] reg});
        res.insert_or_assign("mem[340]reg", DumpEntry{mem[340] reg});
        res.insert_or_assign("mem[341]reg", DumpEntry{mem[341] reg});
        res.insert_or_assign("mem[342]reg", DumpEntry{mem[342] reg});
        res.insert_or_assign("mem[343]reg", DumpEntry{mem[343] reg});
        res.insert_or_assign("mem[344]reg", DumpEntry{mem[344] reg});
        res.insert_or_assign("mem[345]reg", DumpEntry{mem[345] reg});
        res.insert_or_assign("mem[346]reg", DumpEntry{mem[346] reg});
        res.insert_or_assign("mem[347]reg", DumpEntry{mem[347] reg});
        res.insert_or_assign("mem[348]reg", DumpEntry{mem[348] reg});
        res.insert_or_assign("mem[349]reg", DumpEntry{mem[349] reg});
        res.insert_or_assign("mem[350]reg", DumpEntry{mem[350] reg});
        res.insert_or_assign("mem[351]reg", DumpEntry{mem[351] reg});
        res.insert_or_assign("mem[352]reg", DumpEntry{mem[352] reg});
        res.insert_or_assign("mem[353]reg", DumpEntry{mem[353] reg});
        res.insert_or_assign("mem[354]reg", DumpEntry{mem[354] reg});
        res.insert_or_assign("mem[355]reg", DumpEntry{mem[355] reg});
        res.insert_or_assign("mem[356]reg", DumpEntry{mem[356] reg});
        res.insert_or_assign("mem[357]reg", DumpEntry{mem[357] reg});
        res.insert_or_assign("mem[358]reg", DumpEntry{mem[358] reg});
        res.insert_or_assign("mem[359]reg", DumpEntry{mem[359] reg});
        res.insert_or_assign("mem[360]reg", DumpEntry{mem[360] reg});
        res.insert_or_assign("mem[361]reg", DumpEntry{mem[361] reg});
        res.insert_or_assign("mem[362]reg", DumpEntry{mem[362] reg});
        res.insert_or_assign("mem[363]reg", DumpEntry{mem[363] reg});
        res.insert_or_assign("mem[364]reg", DumpEntry{mem[364] reg});
        res.insert_or_assign("mem[365]reg", DumpEntry{mem[365] reg});
        res.insert_or_assign("mem[366]reg", DumpEntry{mem[366] reg});
        res.insert_or_assign("mem[367]reg", DumpEntry{mem[367] reg});
        res.insert_or_assign("mem[368]reg", DumpEntry{mem[368] reg});
        res.insert_or_assign("mem[369]reg", DumpEntry{mem[369] reg});
        res.insert_or_assign("mem[370]reg", DumpEntry{mem[370] reg});
        res.insert_or_assign("mem[371]reg", DumpEntry{mem[371] reg});
        res.insert_or_assign("mem[372]reg", DumpEntry{mem[372] reg});
        res.insert_or_assign("mem[373]reg", DumpEntry{mem[373] reg});
        res.insert_or_assign("mem[374]reg", DumpEntry{mem[374] reg});
        res.insert_or_assign("mem[375]reg", DumpEntry{mem[375] reg});
        res.insert_or_assign("mem[376]reg", DumpEntry{mem[376] reg});
        res.insert_or_assign("mem[377]reg", DumpEntry{mem[377] reg});
        res.insert_or_assign("mem[378]reg", DumpEntry{mem[378] reg});
        res.insert_or_assign("mem[379]reg", DumpEntry{mem[379] reg});
        res.insert_or_assign("mem[380]reg", DumpEntry{mem[380] reg});
        res.insert_or_assign("mem[381]reg", DumpEntry{mem[381] reg});
        res.insert_or_assign("mem[382]reg", DumpEntry{mem[382] reg});
        res.insert_or_assign("mem[383]reg", DumpEntry{mem[383] reg});
        res.insert_or_assign("mem[384]reg", DumpEntry{mem[384] reg});
        res.insert_or_assign("mem[385]reg", DumpEntry{mem[385] reg});
        res.insert_or_assign("mem[386]reg", DumpEntry{mem[386] reg});
        res.insert_or_assign("mem[387]reg", DumpEntry{mem[387] reg});
        res.insert_or_assign("mem[388]reg", DumpEntry{mem[388] reg});
        res.insert_or_assign("mem[389]reg", DumpEntry{mem[389] reg});
        res.insert_or_assign("mem[390]reg", DumpEntry{mem[390] reg});
        res.insert_or_assign("mem[391]reg", DumpEntry{mem[391] reg});
        res.insert_or_assign("mem[392]reg", DumpEntry{mem[392] reg});
        res.insert_or_assign("mem[393]reg", DumpEntry{mem[393] reg});
        res.insert_or_assign("mem[394]reg", DumpEntry{mem[394] reg});
        res.insert_or_assign("mem[395]reg", DumpEntry{mem[395] reg});
        res.insert_or_assign("mem[396]reg", DumpEntry{mem[396] reg});
        res.insert_or_assign("mem[397]reg", DumpEntry{mem[397] reg});
        res.insert_or_assign("mem[398]reg", DumpEntry{mem[398] reg});
        res.insert_or_assign("mem[399]reg", DumpEntry{mem[399] reg});
        res.insert_or_assign("mem[400]reg", DumpEntry{mem[400] reg});
        res.insert_or_assign("mem[401]reg", DumpEntry{mem[401] reg});
        res.insert_or_assign("mem[402]reg", DumpEntry{mem[402] reg});
        res.insert_or_assign("mem[403]reg", DumpEntry{mem[403] reg});
        res.insert_or_assign("mem[404]reg", DumpEntry{mem[404] reg});
        res.insert_or_assign("mem[405]reg", DumpEntry{mem[405] reg});
        res.insert_or_assign("mem[406]reg", DumpEntry{mem[406] reg});
        res.insert_or_assign("mem[407]reg", DumpEntry{mem[407] reg});
        res.insert_or_assign("mem[408]reg", DumpEntry{mem[408] reg});
        res.insert_or_assign("mem[409]reg", DumpEntry{mem[409] reg});
        res.insert_or_assign("mem[410]reg", DumpEntry{mem[410] reg});
        res.insert_or_assign("mem[411]reg", DumpEntry{mem[411] reg});
        res.insert_or_assign("mem[412]reg", DumpEntry{mem[412] reg});
        res.insert_or_assign("mem[413]reg", DumpEntry{mem[413] reg});
        res.insert_or_assign("mem[414]reg", DumpEntry{mem[414] reg});
        res.insert_or_assign("mem[415]reg", DumpEntry{mem[415] reg});
        res.insert_or_assign("mem[416]reg", DumpEntry{mem[416] reg});
        res.insert_or_assign("mem[417]reg", DumpEntry{mem[417] reg});
        res.insert_or_assign("mem[418]reg", DumpEntry{mem[418] reg});
        res.insert_or_assign("mem[419]reg", DumpEntry{mem[419] reg});
        res.insert_or_assign("mem[420]reg", DumpEntry{mem[420] reg});
        res.insert_or_assign("mem[421]reg", DumpEntry{mem[421] reg});
        res.insert_or_assign("mem[422]reg", DumpEntry{mem[422] reg});
        res.insert_or_assign("mem[423]reg", DumpEntry{mem[423] reg});
        res.insert_or_assign("mem[424]reg", DumpEntry{mem[424] reg});
        res.insert_or_assign("mem[425]reg", DumpEntry{mem[425] reg});
        res.insert_or_assign("mem[426]reg", DumpEntry{mem[426] reg});
        res.insert_or_assign("mem[427]reg", DumpEntry{mem[427] reg});
        res.insert_or_assign("mem[428]reg", DumpEntry{mem[428] reg});
        res.insert_or_assign("mem[429]reg", DumpEntry{mem[429] reg});
        res.insert_or_assign("mem[430]reg", DumpEntry{mem[430] reg});
        res.insert_or_assign("mem[431]reg", DumpEntry{mem[431] reg});
        res.insert_or_assign("mem[432]reg", DumpEntry{mem[432] reg});
        res.insert_or_assign("mem[433]reg", DumpEntry{mem[433] reg});
        res.insert_or_assign("mem[434]reg", DumpEntry{mem[434] reg});
        res.insert_or_assign("mem[435]reg", DumpEntry{mem[435] reg});
        res.insert_or_assign("mem[436]reg", DumpEntry{mem[436] reg});
        res.insert_or_assign("mem[437]reg", DumpEntry{mem[437] reg});
        res.insert_or_assign("mem[438]reg", DumpEntry{mem[438] reg});
        res.insert_or_assign("mem[439]reg", DumpEntry{mem[439] reg});
        res.insert_or_assign("mem[440]reg", DumpEntry{mem[440] reg});
        res.insert_or_assign("mem[441]reg", DumpEntry{mem[441] reg});
        res.insert_or_assign("mem[442]reg", DumpEntry{mem[442] reg});
        res.insert_or_assign("mem[443]reg", DumpEntry{mem[443] reg});
        res.insert_or_assign("mem[444]reg", DumpEntry{mem[444] reg});
        res.insert_or_assign("mem[445]reg", DumpEntry{mem[445] reg});
        res.insert_or_assign("mem[446]reg", DumpEntry{mem[446] reg});
        res.insert_or_assign("mem[447]reg", DumpEntry{mem[447] reg});
        res.insert_or_assign("mem[448]reg", DumpEntry{mem[448] reg});
        res.insert_or_assign("mem[449]reg", DumpEntry{mem[449] reg});
        res.insert_or_assign("mem[450]reg", DumpEntry{mem[450] reg});
        res.insert_or_assign("mem[451]reg", DumpEntry{mem[451] reg});
        res.insert_or_assign("mem[452]reg", DumpEntry{mem[452] reg});
        res.insert_or_assign("mem[453]reg", DumpEntry{mem[453] reg});
        res.insert_or_assign("mem[454]reg", DumpEntry{mem[454] reg});
        res.insert_or_assign("mem[455]reg", DumpEntry{mem[455] reg});
        res.insert_or_assign("mem[456]reg", DumpEntry{mem[456] reg});
        res.insert_or_assign("mem[457]reg", DumpEntry{mem[457] reg});
        res.insert_or_assign("mem[458]reg", DumpEntry{mem[458] reg});
        res.insert_or_assign("mem[459]reg", DumpEntry{mem[459] reg});
        res.insert_or_assign("mem[460]reg", DumpEntry{mem[460] reg});
        res.insert_or_assign("mem[461]reg", DumpEntry{mem[461] reg});
        res.insert_or_assign("mem[462]reg", DumpEntry{mem[462] reg});
        res.insert_or_assign("mem[463]reg", DumpEntry{mem[463] reg});
        res.insert_or_assign("mem[464]reg", DumpEntry{mem[464] reg});
        res.insert_or_assign("mem[465]reg", DumpEntry{mem[465] reg});
        res.insert_or_assign("mem[466]reg", DumpEntry{mem[466] reg});
        res.insert_or_assign("mem[467]reg", DumpEntry{mem[467] reg});
        res.insert_or_assign("mem[468]reg", DumpEntry{mem[468] reg});
        res.insert_or_assign("mem[469]reg", DumpEntry{mem[469] reg});
        res.insert_or_assign("mem[470]reg", DumpEntry{mem[470] reg});
        res.insert_or_assign("mem[471]reg", DumpEntry{mem[471] reg});
        res.insert_or_assign("mem[472]reg", DumpEntry{mem[472] reg});
        res.insert_or_assign("mem[473]reg", DumpEntry{mem[473] reg});
        res.insert_or_assign("mem[474]reg", DumpEntry{mem[474] reg});
        res.insert_or_assign("mem[475]reg", DumpEntry{mem[475] reg});
        res.insert_or_assign("mem[476]reg", DumpEntry{mem[476] reg});
        res.insert_or_assign("mem[477]reg", DumpEntry{mem[477] reg});
        res.insert_or_assign("mem[478]reg", DumpEntry{mem[478] reg});
        res.insert_or_assign("mem[479]reg", DumpEntry{mem[479] reg});
        res.insert_or_assign("mem[480]reg", DumpEntry{mem[480] reg});
        res.insert_or_assign("mem[481]reg", DumpEntry{mem[481] reg});
        res.insert_or_assign("mem[482]reg", DumpEntry{mem[482] reg});
        res.insert_or_assign("mem[483]reg", DumpEntry{mem[483] reg});
        res.insert_or_assign("mem[484]reg", DumpEntry{mem[484] reg});
        res.insert_or_assign("mem[485]reg", DumpEntry{mem[485] reg});
        res.insert_or_assign("mem[486]reg", DumpEntry{mem[486] reg});
        res.insert_or_assign("mem[487]reg", DumpEntry{mem[487] reg});
        res.insert_or_assign("mem[488]reg", DumpEntry{mem[488] reg});
        res.insert_or_assign("mem[489]reg", DumpEntry{mem[489] reg});
        res.insert_or_assign("mem[490]reg", DumpEntry{mem[490] reg});
        res.insert_or_assign("mem[491]reg", DumpEntry{mem[491] reg});
        res.insert_or_assign("mem[492]reg", DumpEntry{mem[492] reg});
        res.insert_or_assign("mem[493]reg", DumpEntry{mem[493] reg});
        res.insert_or_assign("mem[494]reg", DumpEntry{mem[494] reg});
        res.insert_or_assign("mem[495]reg", DumpEntry{mem[495] reg});
        res.insert_or_assign("mem[496]reg", DumpEntry{mem[496] reg});
        res.insert_or_assign("mem[497]reg", DumpEntry{mem[497] reg});
        res.insert_or_assign("mem[498]reg", DumpEntry{mem[498] reg});
        res.insert_or_assign("mem[499]reg", DumpEntry{mem[499] reg});
        res.insert_or_assign("mem[500]reg", DumpEntry{mem[500] reg});
        res.insert_or_assign("mem[501]reg", DumpEntry{mem[501] reg});
        res.insert_or_assign("mem[502]reg", DumpEntry{mem[502] reg});
        res.insert_or_assign("mem[503]reg", DumpEntry{mem[503] reg});
        res.insert_or_assign("mem[504]reg", DumpEntry{mem[504] reg});
        res.insert_or_assign("mem[505]reg", DumpEntry{mem[505] reg});
        res.insert_or_assign("mem[506]reg", DumpEntry{mem[506] reg});
        res.insert_or_assign("mem[507]reg", DumpEntry{mem[507] reg});
        res.insert_or_assign("mem[508]reg", DumpEntry{mem[508] reg});
        res.insert_or_assign("mem[509]reg", DumpEntry{mem[509] reg});
        res.insert_or_assign("mem[510]reg", DumpEntry{mem[510] reg});
        res.insert_or_assign("mem[511]reg", DumpEntry{mem[511] reg});
        res.insert_or_assign("mem[512]reg", DumpEntry{mem[512] reg});
        res.insert_or_assign("mem[513]reg", DumpEntry{mem[513] reg});
        res.insert_or_assign("mem[514]reg", DumpEntry{mem[514] reg});
        res.insert_or_assign("mem[515]reg", DumpEntry{mem[515] reg});
        res.insert_or_assign("mem[516]reg", DumpEntry{mem[516] reg});
        res.insert_or_assign("mem[517]reg", DumpEntry{mem[517] reg});
        res.insert_or_assign("mem[518]reg", DumpEntry{mem[518] reg});
        res.insert_or_assign("mem[519]reg", DumpEntry{mem[519] reg});
        res.insert_or_assign("mem[520]reg", DumpEntry{mem[520] reg});
        res.insert_or_assign("mem[521]reg", DumpEntry{mem[521] reg});
        res.insert_or_assign("mem[522]reg", DumpEntry{mem[522] reg});
        res.insert_or_assign("mem[523]reg", DumpEntry{mem[523] reg});
        res.insert_or_assign("mem[524]reg", DumpEntry{mem[524] reg});
        res.insert_or_assign("mem[525]reg", DumpEntry{mem[525] reg});
        res.insert_or_assign("mem[526]reg", DumpEntry{mem[526] reg});
        res.insert_or_assign("mem[527]reg", DumpEntry{mem[527] reg});
        res.insert_or_assign("mem[528]reg", DumpEntry{mem[528] reg});
        res.insert_or_assign("mem[529]reg", DumpEntry{mem[529] reg});
        res.insert_or_assign("mem[530]reg", DumpEntry{mem[530] reg});
        res.insert_or_assign("mem[531]reg", DumpEntry{mem[531] reg});
        res.insert_or_assign("mem[532]reg", DumpEntry{mem[532] reg});
        res.insert_or_assign("mem[533]reg", DumpEntry{mem[533] reg});
        res.insert_or_assign("mem[534]reg", DumpEntry{mem[534] reg});
        res.insert_or_assign("mem[535]reg", DumpEntry{mem[535] reg});
        res.insert_or_assign("mem[536]reg", DumpEntry{mem[536] reg});
        res.insert_or_assign("mem[537]reg", DumpEntry{mem[537] reg});
        res.insert_or_assign("mem[538]reg", DumpEntry{mem[538] reg});
        res.insert_or_assign("mem[539]reg", DumpEntry{mem[539] reg});
        res.insert_or_assign("mem[540]reg", DumpEntry{mem[540] reg});
        res.insert_or_assign("mem[541]reg", DumpEntry{mem[541] reg});
        res.insert_or_assign("mem[542]reg", DumpEntry{mem[542] reg});
        res.insert_or_assign("mem[543]reg", DumpEntry{mem[543] reg});
        res.insert_or_assign("mem[544]reg", DumpEntry{mem[544] reg});
        res.insert_or_assign("mem[545]reg", DumpEntry{mem[545] reg});
        res.insert_or_assign("mem[546]reg", DumpEntry{mem[546] reg});
        res.insert_or_assign("mem[547]reg", DumpEntry{mem[547] reg});
        res.insert_or_assign("mem[548]reg", DumpEntry{mem[548] reg});
        res.insert_or_assign("mem[549]reg", DumpEntry{mem[549] reg});
        res.insert_or_assign("mem[550]reg", DumpEntry{mem[550] reg});
        res.insert_or_assign("mem[551]reg", DumpEntry{mem[551] reg});
        res.insert_or_assign("mem[552]reg", DumpEntry{mem[552] reg});
        res.insert_or_assign("mem[553]reg", DumpEntry{mem[553] reg});
        res.insert_or_assign("mem[554]reg", DumpEntry{mem[554] reg});
        res.insert_or_assign("mem[555]reg", DumpEntry{mem[555] reg});
        res.insert_or_assign("mem[556]reg", DumpEntry{mem[556] reg});
        res.insert_or_assign("mem[557]reg", DumpEntry{mem[557] reg});
        res.insert_or_assign("mem[558]reg", DumpEntry{mem[558] reg});
        res.insert_or_assign("mem[559]reg", DumpEntry{mem[559] reg});
        res.insert_or_assign("mem[560]reg", DumpEntry{mem[560] reg});
        res.insert_or_assign("mem[561]reg", DumpEntry{mem[561] reg});
        res.insert_or_assign("mem[562]reg", DumpEntry{mem[562] reg});
        res.insert_or_assign("mem[563]reg", DumpEntry{mem[563] reg});
        res.insert_or_assign("mem[564]reg", DumpEntry{mem[564] reg});
        res.insert_or_assign("mem[565]reg", DumpEntry{mem[565] reg});
        res.insert_or_assign("mem[566]reg", DumpEntry{mem[566] reg});
        res.insert_or_assign("mem[567]reg", DumpEntry{mem[567] reg});
        res.insert_or_assign("mem[568]reg", DumpEntry{mem[568] reg});
        res.insert_or_assign("mem[569]reg", DumpEntry{mem[569] reg});
        res.insert_or_assign("mem[570]reg", DumpEntry{mem[570] reg});
        res.insert_or_assign("mem[571]reg", DumpEntry{mem[571] reg});
        res.insert_or_assign("mem[572]reg", DumpEntry{mem[572] reg});
        res.insert_or_assign("mem[573]reg", DumpEntry{mem[573] reg});
        res.insert_or_assign("mem[574]reg", DumpEntry{mem[574] reg});
        res.insert_or_assign("mem[575]reg", DumpEntry{mem[575] reg});
        res.insert_or_assign("mem[576]reg", DumpEntry{mem[576] reg});
        res.insert_or_assign("mem[577]reg", DumpEntry{mem[577] reg});
        res.insert_or_assign("mem[578]reg", DumpEntry{mem[578] reg});
        res.insert_or_assign("mem[579]reg", DumpEntry{mem[579] reg});
        res.insert_or_assign("mem[580]reg", DumpEntry{mem[580] reg});
        res.insert_or_assign("mem[581]reg", DumpEntry{mem[581] reg});
        res.insert_or_assign("mem[582]reg", DumpEntry{mem[582] reg});
        res.insert_or_assign("mem[583]reg", DumpEntry{mem[583] reg});
        res.insert_or_assign("mem[584]reg", DumpEntry{mem[584] reg});
        res.insert_or_assign("mem[585]reg", DumpEntry{mem[585] reg});
        res.insert_or_assign("mem[586]reg", DumpEntry{mem[586] reg});
        res.insert_or_assign("mem[587]reg", DumpEntry{mem[587] reg});
        res.insert_or_assign("mem[588]reg", DumpEntry{mem[588] reg});
        res.insert_or_assign("mem[589]reg", DumpEntry{mem[589] reg});
        res.insert_or_assign("mem[590]reg", DumpEntry{mem[590] reg});
        res.insert_or_assign("mem[591]reg", DumpEntry{mem[591] reg});
        res.insert_or_assign("mem[592]reg", DumpEntry{mem[592] reg});
        res.insert_or_assign("mem[593]reg", DumpEntry{mem[593] reg});
        res.insert_or_assign("mem[594]reg", DumpEntry{mem[594] reg});
        res.insert_or_assign("mem[595]reg", DumpEntry{mem[595] reg});
        res.insert_or_assign("mem[596]reg", DumpEntry{mem[596] reg});
        res.insert_or_assign("mem[597]reg", DumpEntry{mem[597] reg});
        res.insert_or_assign("mem[598]reg", DumpEntry{mem[598] reg});
        res.insert_or_assign("mem[599]reg", DumpEntry{mem[599] reg});
        res.insert_or_assign("mem[600]reg", DumpEntry{mem[600] reg});
        res.insert_or_assign("mem[601]reg", DumpEntry{mem[601] reg});
        res.insert_or_assign("mem[602]reg", DumpEntry{mem[602] reg});
        res.insert_or_assign("mem[603]reg", DumpEntry{mem[603] reg});
        res.insert_or_assign("mem[604]reg", DumpEntry{mem[604] reg});
        res.insert_or_assign("mem[605]reg", DumpEntry{mem[605] reg});
        res.insert_or_assign("mem[606]reg", DumpEntry{mem[606] reg});
        res.insert_or_assign("mem[607]reg", DumpEntry{mem[607] reg});
        res.insert_or_assign("mem[608]reg", DumpEntry{mem[608] reg});
        res.insert_or_assign("mem[609]reg", DumpEntry{mem[609] reg});
        res.insert_or_assign("mem[610]reg", DumpEntry{mem[610] reg});
        res.insert_or_assign("mem[611]reg", DumpEntry{mem[611] reg});
        res.insert_or_assign("mem[612]reg", DumpEntry{mem[612] reg});
        res.insert_or_assign("mem[613]reg", DumpEntry{mem[613] reg});
        res.insert_or_assign("mem[614]reg", DumpEntry{mem[614] reg});
        res.insert_or_assign("mem[615]reg", DumpEntry{mem[615] reg});
        res.insert_or_assign("mem[616]reg", DumpEntry{mem[616] reg});
        res.insert_or_assign("mem[617]reg", DumpEntry{mem[617] reg});
        res.insert_or_assign("mem[618]reg", DumpEntry{mem[618] reg});
        res.insert_or_assign("mem[619]reg", DumpEntry{mem[619] reg});
        res.insert_or_assign("mem[620]reg", DumpEntry{mem[620] reg});
        res.insert_or_assign("mem[621]reg", DumpEntry{mem[621] reg});
        res.insert_or_assign("mem[622]reg", DumpEntry{mem[622] reg});
        res.insert_or_assign("mem[623]reg", DumpEntry{mem[623] reg});
        res.insert_or_assign("mem[624]reg", DumpEntry{mem[624] reg});
        res.insert_or_assign("mem[625]reg", DumpEntry{mem[625] reg});
        res.insert_or_assign("mem[626]reg", DumpEntry{mem[626] reg});
        res.insert_or_assign("mem[627]reg", DumpEntry{mem[627] reg});
        res.insert_or_assign("mem[628]reg", DumpEntry{mem[628] reg});
        res.insert_or_assign("mem[629]reg", DumpEntry{mem[629] reg});
        res.insert_or_assign("mem[630]reg", DumpEntry{mem[630] reg});
        res.insert_or_assign("mem[631]reg", DumpEntry{mem[631] reg});
        res.insert_or_assign("mem[632]reg", DumpEntry{mem[632] reg});
        res.insert_or_assign("mem[633]reg", DumpEntry{mem[633] reg});
        res.insert_or_assign("mem[634]reg", DumpEntry{mem[634] reg});
        res.insert_or_assign("mem[635]reg", DumpEntry{mem[635] reg});
        res.insert_or_assign("mem[636]reg", DumpEntry{mem[636] reg});
        res.insert_or_assign("mem[637]reg", DumpEntry{mem[637] reg});
        res.insert_or_assign("mem[638]reg", DumpEntry{mem[638] reg});
        res.insert_or_assign("mem[639]reg", DumpEntry{mem[639] reg});
        res.insert_or_assign("mem[640]reg", DumpEntry{mem[640] reg});
        res.insert_or_assign("mem[641]reg", DumpEntry{mem[641] reg});
        res.insert_or_assign("mem[642]reg", DumpEntry{mem[642] reg});
        res.insert_or_assign("mem[643]reg", DumpEntry{mem[643] reg});
        res.insert_or_assign("mem[644]reg", DumpEntry{mem[644] reg});
        res.insert_or_assign("mem[645]reg", DumpEntry{mem[645] reg});
        res.insert_or_assign("mem[646]reg", DumpEntry{mem[646] reg});
        res.insert_or_assign("mem[647]reg", DumpEntry{mem[647] reg});
        res.insert_or_assign("mem[648]reg", DumpEntry{mem[648] reg});
        res.insert_or_assign("mem[649]reg", DumpEntry{mem[649] reg});
        res.insert_or_assign("mem[650]reg", DumpEntry{mem[650] reg});
        res.insert_or_assign("mem[651]reg", DumpEntry{mem[651] reg});
        res.insert_or_assign("mem[652]reg", DumpEntry{mem[652] reg});
        res.insert_or_assign("mem[653]reg", DumpEntry{mem[653] reg});
        res.insert_or_assign("mem[654]reg", DumpEntry{mem[654] reg});
        res.insert_or_assign("mem[655]reg", DumpEntry{mem[655] reg});
        res.insert_or_assign("mem[656]reg", DumpEntry{mem[656] reg});
        res.insert_or_assign("mem[657]reg", DumpEntry{mem[657] reg});
        res.insert_or_assign("mem[658]reg", DumpEntry{mem[658] reg});
        res.insert_or_assign("mem[659]reg", DumpEntry{mem[659] reg});
        res.insert_or_assign("mem[660]reg", DumpEntry{mem[660] reg});
        res.insert_or_assign("mem[661]reg", DumpEntry{mem[661] reg});
        res.insert_or_assign("mem[662]reg", DumpEntry{mem[662] reg});
        res.insert_or_assign("mem[663]reg", DumpEntry{mem[663] reg});
        res.insert_or_assign("mem[664]reg", DumpEntry{mem[664] reg});
        res.insert_or_assign("mem[665]reg", DumpEntry{mem[665] reg});
        res.insert_or_assign("mem[666]reg", DumpEntry{mem[666] reg});
        res.insert_or_assign("mem[667]reg", DumpEntry{mem[667] reg});
        res.insert_or_assign("mem[668]reg", DumpEntry{mem[668] reg});
        res.insert_or_assign("mem[669]reg", DumpEntry{mem[669] reg});
        res.insert_or_assign("mem[670]reg", DumpEntry{mem[670] reg});
        res.insert_or_assign("mem[671]reg", DumpEntry{mem[671] reg});
        res.insert_or_assign("mem[672]reg", DumpEntry{mem[672] reg});
        res.insert_or_assign("mem[673]reg", DumpEntry{mem[673] reg});
        res.insert_or_assign("mem[674]reg", DumpEntry{mem[674] reg});
        res.insert_or_assign("mem[675]reg", DumpEntry{mem[675] reg});
        res.insert_or_assign("mem[676]reg", DumpEntry{mem[676] reg});
        res.insert_or_assign("mem[677]reg", DumpEntry{mem[677] reg});
        res.insert_or_assign("mem[678]reg", DumpEntry{mem[678] reg});
        res.insert_or_assign("mem[679]reg", DumpEntry{mem[679] reg});
        res.insert_or_assign("mem[680]reg", DumpEntry{mem[680] reg});
        res.insert_or_assign("mem[681]reg", DumpEntry{mem[681] reg});
        res.insert_or_assign("mem[682]reg", DumpEntry{mem[682] reg});
        res.insert_or_assign("mem[683]reg", DumpEntry{mem[683] reg});
        res.insert_or_assign("mem[684]reg", DumpEntry{mem[684] reg});
        res.insert_or_assign("mem[685]reg", DumpEntry{mem[685] reg});
        res.insert_or_assign("mem[686]reg", DumpEntry{mem[686] reg});
        res.insert_or_assign("mem[687]reg", DumpEntry{mem[687] reg});
        res.insert_or_assign("mem[688]reg", DumpEntry{mem[688] reg});
        res.insert_or_assign("mem[689]reg", DumpEntry{mem[689] reg});
        res.insert_or_assign("mem[690]reg", DumpEntry{mem[690] reg});
        res.insert_or_assign("mem[691]reg", DumpEntry{mem[691] reg});
        res.insert_or_assign("mem[692]reg", DumpEntry{mem[692] reg});
        res.insert_or_assign("mem[693]reg", DumpEntry{mem[693] reg});
        res.insert_or_assign("mem[694]reg", DumpEntry{mem[694] reg});
        res.insert_or_assign("mem[695]reg", DumpEntry{mem[695] reg});
        res.insert_or_assign("mem[696]reg", DumpEntry{mem[696] reg});
        res.insert_or_assign("mem[697]reg", DumpEntry{mem[697] reg});
        res.insert_or_assign("mem[698]reg", DumpEntry{mem[698] reg});
        res.insert_or_assign("mem[699]reg", DumpEntry{mem[699] reg});
        res.insert_or_assign("mem[700]reg", DumpEntry{mem[700] reg});
        res.insert_or_assign("mem[701]reg", DumpEntry{mem[701] reg});
        res.insert_or_assign("mem[702]reg", DumpEntry{mem[702] reg});
        res.insert_or_assign("mem[703]reg", DumpEntry{mem[703] reg});
        res.insert_or_assign("mem[704]reg", DumpEntry{mem[704] reg});
        res.insert_or_assign("mem[705]reg", DumpEntry{mem[705] reg});
        res.insert_or_assign("mem[706]reg", DumpEntry{mem[706] reg});
        res.insert_or_assign("mem[707]reg", DumpEntry{mem[707] reg});
        res.insert_or_assign("mem[708]reg", DumpEntry{mem[708] reg});
        res.insert_or_assign("mem[709]reg", DumpEntry{mem[709] reg});
        res.insert_or_assign("mem[710]reg", DumpEntry{mem[710] reg});
        res.insert_or_assign("mem[711]reg", DumpEntry{mem[711] reg});
        res.insert_or_assign("mem[712]reg", DumpEntry{mem[712] reg});
        res.insert_or_assign("mem[713]reg", DumpEntry{mem[713] reg});
        res.insert_or_assign("mem[714]reg", DumpEntry{mem[714] reg});
        res.insert_or_assign("mem[715]reg", DumpEntry{mem[715] reg});
        res.insert_or_assign("mem[716]reg", DumpEntry{mem[716] reg});
        res.insert_or_assign("mem[717]reg", DumpEntry{mem[717] reg});
        res.insert_or_assign("mem[718]reg", DumpEntry{mem[718] reg});
        res.insert_or_assign("mem[719]reg", DumpEntry{mem[719] reg});
        res.insert_or_assign("mem[720]reg", DumpEntry{mem[720] reg});
        res.insert_or_assign("mem[721]reg", DumpEntry{mem[721] reg});
        res.insert_or_assign("mem[722]reg", DumpEntry{mem[722] reg});
        res.insert_or_assign("mem[723]reg", DumpEntry{mem[723] reg});
        res.insert_or_assign("mem[724]reg", DumpEntry{mem[724] reg});
        res.insert_or_assign("mem[725]reg", DumpEntry{mem[725] reg});
        res.insert_or_assign("mem[726]reg", DumpEntry{mem[726] reg});
        res.insert_or_assign("mem[727]reg", DumpEntry{mem[727] reg});
        res.insert_or_assign("mem[728]reg", DumpEntry{mem[728] reg});
        res.insert_or_assign("mem[729]reg", DumpEntry{mem[729] reg});
        res.insert_or_assign("mem[730]reg", DumpEntry{mem[730] reg});
        res.insert_or_assign("mem[731]reg", DumpEntry{mem[731] reg});
        res.insert_or_assign("mem[732]reg", DumpEntry{mem[732] reg});
        res.insert_or_assign("mem[733]reg", DumpEntry{mem[733] reg});
        res.insert_or_assign("mem[734]reg", DumpEntry{mem[734] reg});
        res.insert_or_assign("mem[735]reg", DumpEntry{mem[735] reg});
        res.insert_or_assign("mem[736]reg", DumpEntry{mem[736] reg});
        res.insert_or_assign("mem[737]reg", DumpEntry{mem[737] reg});
        res.insert_or_assign("mem[738]reg", DumpEntry{mem[738] reg});
        res.insert_or_assign("mem[739]reg", DumpEntry{mem[739] reg});
        res.insert_or_assign("mem[740]reg", DumpEntry{mem[740] reg});
        res.insert_or_assign("mem[741]reg", DumpEntry{mem[741] reg});
        res.insert_or_assign("mem[742]reg", DumpEntry{mem[742] reg});
        res.insert_or_assign("mem[743]reg", DumpEntry{mem[743] reg});
        res.insert_or_assign("mem[744]reg", DumpEntry{mem[744] reg});
        res.insert_or_assign("mem[745]reg", DumpEntry{mem[745] reg});
        res.insert_or_assign("mem[746]reg", DumpEntry{mem[746] reg});
        res.insert_or_assign("mem[747]reg", DumpEntry{mem[747] reg});
        res.insert_or_assign("mem[748]reg", DumpEntry{mem[748] reg});
        res.insert_or_assign("mem[749]reg", DumpEntry{mem[749] reg});
        res.insert_or_assign("mem[750]reg", DumpEntry{mem[750] reg});
        res.insert_or_assign("mem[751]reg", DumpEntry{mem[751] reg});
        res.insert_or_assign("mem[752]reg", DumpEntry{mem[752] reg});
        res.insert_or_assign("mem[753]reg", DumpEntry{mem[753] reg});
        res.insert_or_assign("mem[754]reg", DumpEntry{mem[754] reg});
        res.insert_or_assign("mem[755]reg", DumpEntry{mem[755] reg});
        res.insert_or_assign("mem[756]reg", DumpEntry{mem[756] reg});
        res.insert_or_assign("mem[757]reg", DumpEntry{mem[757] reg});
        res.insert_or_assign("mem[758]reg", DumpEntry{mem[758] reg});
        res.insert_or_assign("mem[759]reg", DumpEntry{mem[759] reg});
        res.insert_or_assign("mem[760]reg", DumpEntry{mem[760] reg});
        res.insert_or_assign("mem[761]reg", DumpEntry{mem[761] reg});
        res.insert_or_assign("mem[762]reg", DumpEntry{mem[762] reg});
        res.insert_or_assign("mem[763]reg", DumpEntry{mem[763] reg});
        res.insert_or_assign("mem[764]reg", DumpEntry{mem[764] reg});
        res.insert_or_assign("mem[765]reg", DumpEntry{mem[765] reg});
        res.insert_or_assign("mem[766]reg", DumpEntry{mem[766] reg});
        res.insert_or_assign("mem[767]reg", DumpEntry{mem[767] reg});
        res.insert_or_assign("mem[768]reg", DumpEntry{mem[768] reg});
        res.insert_or_assign("mem[769]reg", DumpEntry{mem[769] reg});
        res.insert_or_assign("mem[770]reg", DumpEntry{mem[770] reg});
        res.insert_or_assign("mem[771]reg", DumpEntry{mem[771] reg});
        res.insert_or_assign("mem[772]reg", DumpEntry{mem[772] reg});
        res.insert_or_assign("mem[773]reg", DumpEntry{mem[773] reg});
        res.insert_or_assign("mem[774]reg", DumpEntry{mem[774] reg});
        res.insert_or_assign("mem[775]reg", DumpEntry{mem[775] reg});
        res.insert_or_assign("mem[776]reg", DumpEntry{mem[776] reg});
        res.insert_or_assign("mem[777]reg", DumpEntry{mem[777] reg});
        res.insert_or_assign("mem[778]reg", DumpEntry{mem[778] reg});
        res.insert_or_assign("mem[779]reg", DumpEntry{mem[779] reg});
        res.insert_or_assign("mem[780]reg", DumpEntry{mem[780] reg});
        res.insert_or_assign("mem[781]reg", DumpEntry{mem[781] reg});
        res.insert_or_assign("mem[782]reg", DumpEntry{mem[782] reg});
        res.insert_or_assign("mem[783]reg", DumpEntry{mem[783] reg});
        res.insert_or_assign("mem[784]reg", DumpEntry{mem[784] reg});
        res.insert_or_assign("mem[785]reg", DumpEntry{mem[785] reg});
        res.insert_or_assign("mem[786]reg", DumpEntry{mem[786] reg});
        res.insert_or_assign("mem[787]reg", DumpEntry{mem[787] reg});
        res.insert_or_assign("mem[788]reg", DumpEntry{mem[788] reg});
        res.insert_or_assign("mem[789]reg", DumpEntry{mem[789] reg});
        res.insert_or_assign("mem[790]reg", DumpEntry{mem[790] reg});
        res.insert_or_assign("mem[791]reg", DumpEntry{mem[791] reg});
        res.insert_or_assign("mem[792]reg", DumpEntry{mem[792] reg});
        res.insert_or_assign("mem[793]reg", DumpEntry{mem[793] reg});
        res.insert_or_assign("mem[794]reg", DumpEntry{mem[794] reg});
        res.insert_or_assign("mem[795]reg", DumpEntry{mem[795] reg});
        res.insert_or_assign("mem[796]reg", DumpEntry{mem[796] reg});
        res.insert_or_assign("mem[797]reg", DumpEntry{mem[797] reg});
        res.insert_or_assign("mem[798]reg", DumpEntry{mem[798] reg});
        res.insert_or_assign("mem[799]reg", DumpEntry{mem[799] reg});
        res.insert_or_assign("mem[800]reg", DumpEntry{mem[800] reg});
        res.insert_or_assign("mem[801]reg", DumpEntry{mem[801] reg});
        res.insert_or_assign("mem[802]reg", DumpEntry{mem[802] reg});
        res.insert_or_assign("mem[803]reg", DumpEntry{mem[803] reg});
        res.insert_or_assign("mem[804]reg", DumpEntry{mem[804] reg});
        res.insert_or_assign("mem[805]reg", DumpEntry{mem[805] reg});
        res.insert_or_assign("mem[806]reg", DumpEntry{mem[806] reg});
        res.insert_or_assign("mem[807]reg", DumpEntry{mem[807] reg});
        res.insert_or_assign("mem[808]reg", DumpEntry{mem[808] reg});
        res.insert_or_assign("mem[809]reg", DumpEntry{mem[809] reg});
        res.insert_or_assign("mem[810]reg", DumpEntry{mem[810] reg});
        res.insert_or_assign("mem[811]reg", DumpEntry{mem[811] reg});
        res.insert_or_assign("mem[812]reg", DumpEntry{mem[812] reg});
        res.insert_or_assign("mem[813]reg", DumpEntry{mem[813] reg});
        res.insert_or_assign("mem[814]reg", DumpEntry{mem[814] reg});
        res.insert_or_assign("mem[815]reg", DumpEntry{mem[815] reg});
        res.insert_or_assign("mem[816]reg", DumpEntry{mem[816] reg});
        res.insert_or_assign("mem[817]reg", DumpEntry{mem[817] reg});
        res.insert_or_assign("mem[818]reg", DumpEntry{mem[818] reg});
        res.insert_or_assign("mem[819]reg", DumpEntry{mem[819] reg});
        res.insert_or_assign("mem[820]reg", DumpEntry{mem[820] reg});
        res.insert_or_assign("mem[821]reg", DumpEntry{mem[821] reg});
        res.insert_or_assign("mem[822]reg", DumpEntry{mem[822] reg});
        res.insert_or_assign("mem[823]reg", DumpEntry{mem[823] reg});
        res.insert_or_assign("mem[824]reg", DumpEntry{mem[824] reg});
        res.insert_or_assign("mem[825]reg", DumpEntry{mem[825] reg});
        res.insert_or_assign("mem[826]reg", DumpEntry{mem[826] reg});
        res.insert_or_assign("mem[827]reg", DumpEntry{mem[827] reg});
        res.insert_or_assign("mem[828]reg", DumpEntry{mem[828] reg});
        res.insert_or_assign("mem[829]reg", DumpEntry{mem[829] reg});
        res.insert_or_assign("mem[830]reg", DumpEntry{mem[830] reg});
        res.insert_or_assign("mem[831]reg", DumpEntry{mem[831] reg});
        res.insert_or_assign("mem[832]reg", DumpEntry{mem[832] reg});
        res.insert_or_assign("mem[833]reg", DumpEntry{mem[833] reg});
        res.insert_or_assign("mem[834]reg", DumpEntry{mem[834] reg});
        res.insert_or_assign("mem[835]reg", DumpEntry{mem[835] reg});
        res.insert_or_assign("mem[836]reg", DumpEntry{mem[836] reg});
        res.insert_or_assign("mem[837]reg", DumpEntry{mem[837] reg});
        res.insert_or_assign("mem[838]reg", DumpEntry{mem[838] reg});
        res.insert_or_assign("mem[839]reg", DumpEntry{mem[839] reg});
        res.insert_or_assign("mem[840]reg", DumpEntry{mem[840] reg});
        res.insert_or_assign("mem[841]reg", DumpEntry{mem[841] reg});
        res.insert_or_assign("mem[842]reg", DumpEntry{mem[842] reg});
        res.insert_or_assign("mem[843]reg", DumpEntry{mem[843] reg});
        res.insert_or_assign("mem[844]reg", DumpEntry{mem[844] reg});
        res.insert_or_assign("mem[845]reg", DumpEntry{mem[845] reg});
        res.insert_or_assign("mem[846]reg", DumpEntry{mem[846] reg});
        res.insert_or_assign("mem[847]reg", DumpEntry{mem[847] reg});
        res.insert_or_assign("mem[848]reg", DumpEntry{mem[848] reg});
        res.insert_or_assign("mem[849]reg", DumpEntry{mem[849] reg});
        res.insert_or_assign("mem[850]reg", DumpEntry{mem[850] reg});
        res.insert_or_assign("mem[851]reg", DumpEntry{mem[851] reg});
        res.insert_or_assign("mem[852]reg", DumpEntry{mem[852] reg});
        res.insert_or_assign("mem[853]reg", DumpEntry{mem[853] reg});
        res.insert_or_assign("mem[854]reg", DumpEntry{mem[854] reg});
        res.insert_or_assign("mem[855]reg", DumpEntry{mem[855] reg});
        res.insert_or_assign("mem[856]reg", DumpEntry{mem[856] reg});
        res.insert_or_assign("mem[857]reg", DumpEntry{mem[857] reg});
        res.insert_or_assign("mem[858]reg", DumpEntry{mem[858] reg});
        res.insert_or_assign("mem[859]reg", DumpEntry{mem[859] reg});
        res.insert_or_assign("mem[860]reg", DumpEntry{mem[860] reg});
        res.insert_or_assign("mem[861]reg", DumpEntry{mem[861] reg});
        res.insert_or_assign("mem[862]reg", DumpEntry{mem[862] reg});
        res.insert_or_assign("mem[863]reg", DumpEntry{mem[863] reg});
        res.insert_or_assign("mem[864]reg", DumpEntry{mem[864] reg});
        res.insert_or_assign("mem[865]reg", DumpEntry{mem[865] reg});
        res.insert_or_assign("mem[866]reg", DumpEntry{mem[866] reg});
        res.insert_or_assign("mem[867]reg", DumpEntry{mem[867] reg});
        res.insert_or_assign("mem[868]reg", DumpEntry{mem[868] reg});
        res.insert_or_assign("mem[869]reg", DumpEntry{mem[869] reg});
        res.insert_or_assign("mem[870]reg", DumpEntry{mem[870] reg});
        res.insert_or_assign("mem[871]reg", DumpEntry{mem[871] reg});
        res.insert_or_assign("mem[872]reg", DumpEntry{mem[872] reg});
        res.insert_or_assign("mem[873]reg", DumpEntry{mem[873] reg});
        res.insert_or_assign("mem[874]reg", DumpEntry{mem[874] reg});
        res.insert_or_assign("mem[875]reg", DumpEntry{mem[875] reg});
        res.insert_or_assign("mem[876]reg", DumpEntry{mem[876] reg});
        res.insert_or_assign("mem[877]reg", DumpEntry{mem[877] reg});
        res.insert_or_assign("mem[878]reg", DumpEntry{mem[878] reg});
        res.insert_or_assign("mem[879]reg", DumpEntry{mem[879] reg});
        res.insert_or_assign("mem[880]reg", DumpEntry{mem[880] reg});
        res.insert_or_assign("mem[881]reg", DumpEntry{mem[881] reg});
        res.insert_or_assign("mem[882]reg", DumpEntry{mem[882] reg});
        res.insert_or_assign("mem[883]reg", DumpEntry{mem[883] reg});
        res.insert_or_assign("mem[884]reg", DumpEntry{mem[884] reg});
        res.insert_or_assign("mem[885]reg", DumpEntry{mem[885] reg});
        res.insert_or_assign("mem[886]reg", DumpEntry{mem[886] reg});
        res.insert_or_assign("mem[887]reg", DumpEntry{mem[887] reg});
        res.insert_or_assign("mem[888]reg", DumpEntry{mem[888] reg});
        res.insert_or_assign("mem[889]reg", DumpEntry{mem[889] reg});
        res.insert_or_assign("mem[890]reg", DumpEntry{mem[890] reg});
        res.insert_or_assign("mem[891]reg", DumpEntry{mem[891] reg});
        res.insert_or_assign("mem[892]reg", DumpEntry{mem[892] reg});
        res.insert_or_assign("mem[893]reg", DumpEntry{mem[893] reg});
        res.insert_or_assign("mem[894]reg", DumpEntry{mem[894] reg});
        res.insert_or_assign("mem[895]reg", DumpEntry{mem[895] reg});
        res.insert_or_assign("mem[896]reg", DumpEntry{mem[896] reg});
        res.insert_or_assign("mem[897]reg", DumpEntry{mem[897] reg});
        res.insert_or_assign("mem[898]reg", DumpEntry{mem[898] reg});
        res.insert_or_assign("mem[899]reg", DumpEntry{mem[899] reg});
        res.insert_or_assign("mem[900]reg", DumpEntry{mem[900] reg});
        res.insert_or_assign("mem[901]reg", DumpEntry{mem[901] reg});
        res.insert_or_assign("mem[902]reg", DumpEntry{mem[902] reg});
        res.insert_or_assign("mem[903]reg", DumpEntry{mem[903] reg});
        res.insert_or_assign("mem[904]reg", DumpEntry{mem[904] reg});
        res.insert_or_assign("mem[905]reg", DumpEntry{mem[905] reg});
        res.insert_or_assign("mem[906]reg", DumpEntry{mem[906] reg});
        res.insert_or_assign("mem[907]reg", DumpEntry{mem[907] reg});
        res.insert_or_assign("mem[908]reg", DumpEntry{mem[908] reg});
        res.insert_or_assign("mem[909]reg", DumpEntry{mem[909] reg});
        res.insert_or_assign("mem[910]reg", DumpEntry{mem[910] reg});
        res.insert_or_assign("mem[911]reg", DumpEntry{mem[911] reg});
        res.insert_or_assign("mem[912]reg", DumpEntry{mem[912] reg});
        res.insert_or_assign("mem[913]reg", DumpEntry{mem[913] reg});
        res.insert_or_assign("mem[914]reg", DumpEntry{mem[914] reg});
        res.insert_or_assign("mem[915]reg", DumpEntry{mem[915] reg});
        res.insert_or_assign("mem[916]reg", DumpEntry{mem[916] reg});
        res.insert_or_assign("mem[917]reg", DumpEntry{mem[917] reg});
        res.insert_or_assign("mem[918]reg", DumpEntry{mem[918] reg});
        res.insert_or_assign("mem[919]reg", DumpEntry{mem[919] reg});
        res.insert_or_assign("mem[920]reg", DumpEntry{mem[920] reg});
        res.insert_or_assign("mem[921]reg", DumpEntry{mem[921] reg});
        res.insert_or_assign("mem[922]reg", DumpEntry{mem[922] reg});
        res.insert_or_assign("mem[923]reg", DumpEntry{mem[923] reg});
        res.insert_or_assign("mem[924]reg", DumpEntry{mem[924] reg});
        res.insert_or_assign("mem[925]reg", DumpEntry{mem[925] reg});
        res.insert_or_assign("mem[926]reg", DumpEntry{mem[926] reg});
        res.insert_or_assign("mem[927]reg", DumpEntry{mem[927] reg});
        res.insert_or_assign("mem[928]reg", DumpEntry{mem[928] reg});
        res.insert_or_assign("mem[929]reg", DumpEntry{mem[929] reg});
        res.insert_or_assign("mem[930]reg", DumpEntry{mem[930] reg});
        res.insert_or_assign("mem[931]reg", DumpEntry{mem[931] reg});
        res.insert_or_assign("mem[932]reg", DumpEntry{mem[932] reg});
        res.insert_or_assign("mem[933]reg", DumpEntry{mem[933] reg});
        res.insert_or_assign("mem[934]reg", DumpEntry{mem[934] reg});
        res.insert_or_assign("mem[935]reg", DumpEntry{mem[935] reg});
        res.insert_or_assign("mem[936]reg", DumpEntry{mem[936] reg});
        res.insert_or_assign("mem[937]reg", DumpEntry{mem[937] reg});
        res.insert_or_assign("mem[938]reg", DumpEntry{mem[938] reg});
        res.insert_or_assign("mem[939]reg", DumpEntry{mem[939] reg});
        res.insert_or_assign("mem[940]reg", DumpEntry{mem[940] reg});
        res.insert_or_assign("mem[941]reg", DumpEntry{mem[941] reg});
        res.insert_or_assign("mem[942]reg", DumpEntry{mem[942] reg});
        res.insert_or_assign("mem[943]reg", DumpEntry{mem[943] reg});
        res.insert_or_assign("mem[944]reg", DumpEntry{mem[944] reg});
        res.insert_or_assign("mem[945]reg", DumpEntry{mem[945] reg});
        res.insert_or_assign("mem[946]reg", DumpEntry{mem[946] reg});
        res.insert_or_assign("mem[947]reg", DumpEntry{mem[947] reg});
        res.insert_or_assign("mem[948]reg", DumpEntry{mem[948] reg});
        res.insert_or_assign("mem[949]reg", DumpEntry{mem[949] reg});
        res.insert_or_assign("mem[950]reg", DumpEntry{mem[950] reg});
        res.insert_or_assign("mem[951]reg", DumpEntry{mem[951] reg});
        res.insert_or_assign("mem[952]reg", DumpEntry{mem[952] reg});
        res.insert_or_assign("mem[953]reg", DumpEntry{mem[953] reg});
        res.insert_or_assign("mem[954]reg", DumpEntry{mem[954] reg});
        res.insert_or_assign("mem[955]reg", DumpEntry{mem[955] reg});
        res.insert_or_assign("mem[956]reg", DumpEntry{mem[956] reg});
        res.insert_or_assign("mem[957]reg", DumpEntry{mem[957] reg});
        res.insert_or_assign("mem[958]reg", DumpEntry{mem[958] reg});
        res.insert_or_assign("mem[959]reg", DumpEntry{mem[959] reg});
        res.insert_or_assign("mem[960]reg", DumpEntry{mem[960] reg});
        res.insert_or_assign("mem[961]reg", DumpEntry{mem[961] reg});
        res.insert_or_assign("mem[962]reg", DumpEntry{mem[962] reg});
        res.insert_or_assign("mem[963]reg", DumpEntry{mem[963] reg});
        res.insert_or_assign("mem[964]reg", DumpEntry{mem[964] reg});
        res.insert_or_assign("mem[965]reg", DumpEntry{mem[965] reg});
        res.insert_or_assign("mem[966]reg", DumpEntry{mem[966] reg});
        res.insert_or_assign("mem[967]reg", DumpEntry{mem[967] reg});
        res.insert_or_assign("mem[968]reg", DumpEntry{mem[968] reg});
        res.insert_or_assign("mem[969]reg", DumpEntry{mem[969] reg});
        res.insert_or_assign("mem[970]reg", DumpEntry{mem[970] reg});
        res.insert_or_assign("mem[971]reg", DumpEntry{mem[971] reg});
        res.insert_or_assign("mem[972]reg", DumpEntry{mem[972] reg});
        res.insert_or_assign("mem[973]reg", DumpEntry{mem[973] reg});
        res.insert_or_assign("mem[974]reg", DumpEntry{mem[974] reg});
        res.insert_or_assign("mem[975]reg", DumpEntry{mem[975] reg});
        res.insert_or_assign("mem[976]reg", DumpEntry{mem[976] reg});
        res.insert_or_assign("mem[977]reg", DumpEntry{mem[977] reg});
        res.insert_or_assign("mem[978]reg", DumpEntry{mem[978] reg});
        res.insert_or_assign("mem[979]reg", DumpEntry{mem[979] reg});
        res.insert_or_assign("mem[980]reg", DumpEntry{mem[980] reg});
        res.insert_or_assign("mem[981]reg", DumpEntry{mem[981] reg});
        res.insert_or_assign("mem[982]reg", DumpEntry{mem[982] reg});
        res.insert_or_assign("mem[983]reg", DumpEntry{mem[983] reg});
        res.insert_or_assign("mem[984]reg", DumpEntry{mem[984] reg});
        res.insert_or_assign("mem[985]reg", DumpEntry{mem[985] reg});
        res.insert_or_assign("mem[986]reg", DumpEntry{mem[986] reg});
        res.insert_or_assign("mem[987]reg", DumpEntry{mem[987] reg});
        res.insert_or_assign("mem[988]reg", DumpEntry{mem[988] reg});
        res.insert_or_assign("mem[989]reg", DumpEntry{mem[989] reg});
        res.insert_or_assign("mem[990]reg", DumpEntry{mem[990] reg});
        res.insert_or_assign("mem[991]reg", DumpEntry{mem[991] reg});
        res.insert_or_assign("mem[992]reg", DumpEntry{mem[992] reg});
        res.insert_or_assign("mem[993]reg", DumpEntry{mem[993] reg});
        res.insert_or_assign("mem[994]reg", DumpEntry{mem[994] reg});
        res.insert_or_assign("mem[995]reg", DumpEntry{mem[995] reg});
        res.insert_or_assign("mem[996]reg", DumpEntry{mem[996] reg});
        res.insert_or_assign("mem[997]reg", DumpEntry{mem[997] reg});
        res.insert_or_assign("mem[998]reg", DumpEntry{mem[998] reg});
        res.insert_or_assign("mem[999]reg", DumpEntry{mem[999] reg});
        res.insert_or_assign("mem[1000]reg", DumpEntry{mem[1000] reg});
        res.insert_or_assign("mem[1001]reg", DumpEntry{mem[1001] reg});
        res.insert_or_assign("mem[1002]reg", DumpEntry{mem[1002] reg});
        res.insert_or_assign("mem[1003]reg", DumpEntry{mem[1003] reg});
        res.insert_or_assign("mem[1004]reg", DumpEntry{mem[1004] reg});
        res.insert_or_assign("mem[1005]reg", DumpEntry{mem[1005] reg});
        res.insert_or_assign("mem[1006]reg", DumpEntry{mem[1006] reg});
        res.insert_or_assign("mem[1007]reg", DumpEntry{mem[1007] reg});
        res.insert_or_assign("mem[1008]reg", DumpEntry{mem[1008] reg});
        res.insert_or_assign("mem[1009]reg", DumpEntry{mem[1009] reg});
        res.insert_or_assign("mem[1010]reg", DumpEntry{mem[1010] reg});
        res.insert_or_assign("mem[1011]reg", DumpEntry{mem[1011] reg});
        res.insert_or_assign("mem[1012]reg", DumpEntry{mem[1012] reg});
        res.insert_or_assign("mem[1013]reg", DumpEntry{mem[1013] reg});
        res.insert_or_assign("mem[1014]reg", DumpEntry{mem[1014] reg});
        res.insert_or_assign("mem[1015]reg", DumpEntry{mem[1015] reg});
        res.insert_or_assign("mem[1016]reg", DumpEntry{mem[1016] reg});
        res.insert_or_assign("mem[1017]reg", DumpEntry{mem[1017] reg});
        res.insert_or_assign("mem[1018]reg", DumpEntry{mem[1018] reg});
        res.insert_or_assign("mem[1019]reg", DumpEntry{mem[1019] reg});
        res.insert_or_assign("mem[1020]reg", DumpEntry{mem[1020] reg});
        res.insert_or_assign("mem[1021]reg", DumpEntry{mem[1021] reg});
        res.insert_or_assign("mem[1022]reg", DumpEntry{mem[1022] reg});
        res.insert_or_assign("mem[1023]reg", DumpEntry{mem[1023] reg});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::Scratchpad`
    //!
    //! @param scratchpad A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under scratchpad
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::Scratchpad& scratchpad)
    {
        DumpMap res{scratchpad.base()};
        res.insert_or_assign("scratchpad.mem[0]reg", DumpEntry{scratchpad.mem[0] reg});
        res.insert_or_assign("scratchpad.mem[1]reg", DumpEntry{scratchpad.mem[1] reg});
        res.insert_or_assign("scratchpad.mem[2]reg", DumpEntry{scratchpad.mem[2] reg});
        res.insert_or_assign("scratchpad.mem[3]reg", DumpEntry{scratchpad.mem[3] reg});
        res.insert_or_assign("scratchpad.mem[4]reg", DumpEntry{scratchpad.mem[4] reg});
        res.insert_or_assign("scratchpad.mem[5]reg", DumpEntry{scratchpad.mem[5] reg});
        res.insert_or_assign("scratchpad.mem[6]reg", DumpEntry{scratchpad.mem[6] reg});
        res.insert_or_assign("scratchpad.mem[7]reg", DumpEntry{scratchpad.mem[7] reg});
        res.insert_or_assign("scratchpad.mem[8]reg", DumpEntry{scratchpad.mem[8] reg});
        res.insert_or_assign("scratchpad.mem[9]reg", DumpEntry{scratchpad.mem[9] reg});
        res.insert_or_assign("scratchpad.mem[10]reg", DumpEntry{scratchpad.mem[10] reg});
        res.insert_or_assign("scratchpad.mem[11]reg", DumpEntry{scratchpad.mem[11] reg});
        res.insert_or_assign("scratchpad.mem[12]reg", DumpEntry{scratchpad.mem[12] reg});
        res.insert_or_assign("scratchpad.mem[13]reg", DumpEntry{scratchpad.mem[13] reg});
        res.insert_or_assign("scratchpad.mem[14]reg", DumpEntry{scratchpad.mem[14] reg});
        res.insert_or_assign("scratchpad.mem[15]reg", DumpEntry{scratchpad.mem[15] reg});
        res.insert_or_assign("scratchpad.mem[16]reg", DumpEntry{scratchpad.mem[16] reg});
        res.insert_or_assign("scratchpad.mem[17]reg", DumpEntry{scratchpad.mem[17] reg});
        res.insert_or_assign("scratchpad.mem[18]reg", DumpEntry{scratchpad.mem[18] reg});
        res.insert_or_assign("scratchpad.mem[19]reg", DumpEntry{scratchpad.mem[19] reg});
        res.insert_or_assign("scratchpad.mem[20]reg", DumpEntry{scratchpad.mem[20] reg});
        res.insert_or_assign("scratchpad.mem[21]reg", DumpEntry{scratchpad.mem[21] reg});
        res.insert_or_assign("scratchpad.mem[22]reg", DumpEntry{scratchpad.mem[22] reg});
        res.insert_or_assign("scratchpad.mem[23]reg", DumpEntry{scratchpad.mem[23] reg});
        res.insert_or_assign("scratchpad.mem[24]reg", DumpEntry{scratchpad.mem[24] reg});
        res.insert_or_assign("scratchpad.mem[25]reg", DumpEntry{scratchpad.mem[25] reg});
        res.insert_or_assign("scratchpad.mem[26]reg", DumpEntry{scratchpad.mem[26] reg});
        res.insert_or_assign("scratchpad.mem[27]reg", DumpEntry{scratchpad.mem[27] reg});
        res.insert_or_assign("scratchpad.mem[28]reg", DumpEntry{scratchpad.mem[28] reg});
        res.insert_or_assign("scratchpad.mem[29]reg", DumpEntry{scratchpad.mem[29] reg});
        res.insert_or_assign("scratchpad.mem[30]reg", DumpEntry{scratchpad.mem[30] reg});
        res.insert_or_assign("scratchpad.mem[31]reg", DumpEntry{scratchpad.mem[31] reg});
        res.insert_or_assign("scratchpad.mem[32]reg", DumpEntry{scratchpad.mem[32] reg});
        res.insert_or_assign("scratchpad.mem[33]reg", DumpEntry{scratchpad.mem[33] reg});
        res.insert_or_assign("scratchpad.mem[34]reg", DumpEntry{scratchpad.mem[34] reg});
        res.insert_or_assign("scratchpad.mem[35]reg", DumpEntry{scratchpad.mem[35] reg});
        res.insert_or_assign("scratchpad.mem[36]reg", DumpEntry{scratchpad.mem[36] reg});
        res.insert_or_assign("scratchpad.mem[37]reg", DumpEntry{scratchpad.mem[37] reg});
        res.insert_or_assign("scratchpad.mem[38]reg", DumpEntry{scratchpad.mem[38] reg});
        res.insert_or_assign("scratchpad.mem[39]reg", DumpEntry{scratchpad.mem[39] reg});
        res.insert_or_assign("scratchpad.mem[40]reg", DumpEntry{scratchpad.mem[40] reg});
        res.insert_or_assign("scratchpad.mem[41]reg", DumpEntry{scratchpad.mem[41] reg});
        res.insert_or_assign("scratchpad.mem[42]reg", DumpEntry{scratchpad.mem[42] reg});
        res.insert_or_assign("scratchpad.mem[43]reg", DumpEntry{scratchpad.mem[43] reg});
        res.insert_or_assign("scratchpad.mem[44]reg", DumpEntry{scratchpad.mem[44] reg});
        res.insert_or_assign("scratchpad.mem[45]reg", DumpEntry{scratchpad.mem[45] reg});
        res.insert_or_assign("scratchpad.mem[46]reg", DumpEntry{scratchpad.mem[46] reg});
        res.insert_or_assign("scratchpad.mem[47]reg", DumpEntry{scratchpad.mem[47] reg});
        res.insert_or_assign("scratchpad.mem[48]reg", DumpEntry{scratchpad.mem[48] reg});
        res.insert_or_assign("scratchpad.mem[49]reg", DumpEntry{scratchpad.mem[49] reg});
        res.insert_or_assign("scratchpad.mem[50]reg", DumpEntry{scratchpad.mem[50] reg});
        res.insert_or_assign("scratchpad.mem[51]reg", DumpEntry{scratchpad.mem[51] reg});
        res.insert_or_assign("scratchpad.mem[52]reg", DumpEntry{scratchpad.mem[52] reg});
        res.insert_or_assign("scratchpad.mem[53]reg", DumpEntry{scratchpad.mem[53] reg});
        res.insert_or_assign("scratchpad.mem[54]reg", DumpEntry{scratchpad.mem[54] reg});
        res.insert_or_assign("scratchpad.mem[55]reg", DumpEntry{scratchpad.mem[55] reg});
        res.insert_or_assign("scratchpad.mem[56]reg", DumpEntry{scratchpad.mem[56] reg});
        res.insert_or_assign("scratchpad.mem[57]reg", DumpEntry{scratchpad.mem[57] reg});
        res.insert_or_assign("scratchpad.mem[58]reg", DumpEntry{scratchpad.mem[58] reg});
        res.insert_or_assign("scratchpad.mem[59]reg", DumpEntry{scratchpad.mem[59] reg});
        res.insert_or_assign("scratchpad.mem[60]reg", DumpEntry{scratchpad.mem[60] reg});
        res.insert_or_assign("scratchpad.mem[61]reg", DumpEntry{scratchpad.mem[61] reg});
        res.insert_or_assign("scratchpad.mem[62]reg", DumpEntry{scratchpad.mem[62] reg});
        res.insert_or_assign("scratchpad.mem[63]reg", DumpEntry{scratchpad.mem[63] reg});
        res.insert_or_assign("scratchpad.mem[64]reg", DumpEntry{scratchpad.mem[64] reg});
        res.insert_or_assign("scratchpad.mem[65]reg", DumpEntry{scratchpad.mem[65] reg});
        res.insert_or_assign("scratchpad.mem[66]reg", DumpEntry{scratchpad.mem[66] reg});
        res.insert_or_assign("scratchpad.mem[67]reg", DumpEntry{scratchpad.mem[67] reg});
        res.insert_or_assign("scratchpad.mem[68]reg", DumpEntry{scratchpad.mem[68] reg});
        res.insert_or_assign("scratchpad.mem[69]reg", DumpEntry{scratchpad.mem[69] reg});
        res.insert_or_assign("scratchpad.mem[70]reg", DumpEntry{scratchpad.mem[70] reg});
        res.insert_or_assign("scratchpad.mem[71]reg", DumpEntry{scratchpad.mem[71] reg});
        res.insert_or_assign("scratchpad.mem[72]reg", DumpEntry{scratchpad.mem[72] reg});
        res.insert_or_assign("scratchpad.mem[73]reg", DumpEntry{scratchpad.mem[73] reg});
        res.insert_or_assign("scratchpad.mem[74]reg", DumpEntry{scratchpad.mem[74] reg});
        res.insert_or_assign("scratchpad.mem[75]reg", DumpEntry{scratchpad.mem[75] reg});
        res.insert_or_assign("scratchpad.mem[76]reg", DumpEntry{scratchpad.mem[76] reg});
        res.insert_or_assign("scratchpad.mem[77]reg", DumpEntry{scratchpad.mem[77] reg});
        res.insert_or_assign("scratchpad.mem[78]reg", DumpEntry{scratchpad.mem[78] reg});
        res.insert_or_assign("scratchpad.mem[79]reg", DumpEntry{scratchpad.mem[79] reg});
        res.insert_or_assign("scratchpad.mem[80]reg", DumpEntry{scratchpad.mem[80] reg});
        res.insert_or_assign("scratchpad.mem[81]reg", DumpEntry{scratchpad.mem[81] reg});
        res.insert_or_assign("scratchpad.mem[82]reg", DumpEntry{scratchpad.mem[82] reg});
        res.insert_or_assign("scratchpad.mem[83]reg", DumpEntry{scratchpad.mem[83] reg});
        res.insert_or_assign("scratchpad.mem[84]reg", DumpEntry{scratchpad.mem[84] reg});
        res.insert_or_assign("scratchpad.mem[85]reg", DumpEntry{scratchpad.mem[85] reg});
        res.insert_or_assign("scratchpad.mem[86]reg", DumpEntry{scratchpad.mem[86] reg});
        res.insert_or_assign("scratchpad.mem[87]reg", DumpEntry{scratchpad.mem[87] reg});
        res.insert_or_assign("scratchpad.mem[88]reg", DumpEntry{scratchpad.mem[88] reg});
        res.insert_or_assign("scratchpad.mem[89]reg", DumpEntry{scratchpad.mem[89] reg});
        res.insert_or_assign("scratchpad.mem[90]reg", DumpEntry{scratchpad.mem[90] reg});
        res.insert_or_assign("scratchpad.mem[91]reg", DumpEntry{scratchpad.mem[91] reg});
        res.insert_or_assign("scratchpad.mem[92]reg", DumpEntry{scratchpad.mem[92] reg});
        res.insert_or_assign("scratchpad.mem[93]reg", DumpEntry{scratchpad.mem[93] reg});
        res.insert_or_assign("scratchpad.mem[94]reg", DumpEntry{scratchpad.mem[94] reg});
        res.insert_or_assign("scratchpad.mem[95]reg", DumpEntry{scratchpad.mem[95] reg});
        res.insert_or_assign("scratchpad.mem[96]reg", DumpEntry{scratchpad.mem[96] reg});
        res.insert_or_assign("scratchpad.mem[97]reg", DumpEntry{scratchpad.mem[97] reg});
        res.insert_or_assign("scratchpad.mem[98]reg", DumpEntry{scratchpad.mem[98] reg});
        res.insert_or_assign("scratchpad.mem[99]reg", DumpEntry{scratchpad.mem[99] reg});
        res.insert_or_assign("scratchpad.mem[100]reg", DumpEntry{scratchpad.mem[100] reg});
        res.insert_or_assign("scratchpad.mem[101]reg", DumpEntry{scratchpad.mem[101] reg});
        res.insert_or_assign("scratchpad.mem[102]reg", DumpEntry{scratchpad.mem[102] reg});
        res.insert_or_assign("scratchpad.mem[103]reg", DumpEntry{scratchpad.mem[103] reg});
        res.insert_or_assign("scratchpad.mem[104]reg", DumpEntry{scratchpad.mem[104] reg});
        res.insert_or_assign("scratchpad.mem[105]reg", DumpEntry{scratchpad.mem[105] reg});
        res.insert_or_assign("scratchpad.mem[106]reg", DumpEntry{scratchpad.mem[106] reg});
        res.insert_or_assign("scratchpad.mem[107]reg", DumpEntry{scratchpad.mem[107] reg});
        res.insert_or_assign("scratchpad.mem[108]reg", DumpEntry{scratchpad.mem[108] reg});
        res.insert_or_assign("scratchpad.mem[109]reg", DumpEntry{scratchpad.mem[109] reg});
        res.insert_or_assign("scratchpad.mem[110]reg", DumpEntry{scratchpad.mem[110] reg});
        res.insert_or_assign("scratchpad.mem[111]reg", DumpEntry{scratchpad.mem[111] reg});
        res.insert_or_assign("scratchpad.mem[112]reg", DumpEntry{scratchpad.mem[112] reg});
        res.insert_or_assign("scratchpad.mem[113]reg", DumpEntry{scratchpad.mem[113] reg});
        res.insert_or_assign("scratchpad.mem[114]reg", DumpEntry{scratchpad.mem[114] reg});
        res.insert_or_assign("scratchpad.mem[115]reg", DumpEntry{scratchpad.mem[115] reg});
        res.insert_or_assign("scratchpad.mem[116]reg", DumpEntry{scratchpad.mem[116] reg});
        res.insert_or_assign("scratchpad.mem[117]reg", DumpEntry{scratchpad.mem[117] reg});
        res.insert_or_assign("scratchpad.mem[118]reg", DumpEntry{scratchpad.mem[118] reg});
        res.insert_or_assign("scratchpad.mem[119]reg", DumpEntry{scratchpad.mem[119] reg});
        res.insert_or_assign("scratchpad.mem[120]reg", DumpEntry{scratchpad.mem[120] reg});
        res.insert_or_assign("scratchpad.mem[121]reg", DumpEntry{scratchpad.mem[121] reg});
        res.insert_or_assign("scratchpad.mem[122]reg", DumpEntry{scratchpad.mem[122] reg});
        res.insert_or_assign("scratchpad.mem[123]reg", DumpEntry{scratchpad.mem[123] reg});
        res.insert_or_assign("scratchpad.mem[124]reg", DumpEntry{scratchpad.mem[124] reg});
        res.insert_or_assign("scratchpad.mem[125]reg", DumpEntry{scratchpad.mem[125] reg});
        res.insert_or_assign("scratchpad.mem[126]reg", DumpEntry{scratchpad.mem[126] reg});
        res.insert_or_assign("scratchpad.mem[127]reg", DumpEntry{scratchpad.mem[127] reg});
        res.insert_or_assign("scratchpad.mem[128]reg", DumpEntry{scratchpad.mem[128] reg});
        res.insert_or_assign("scratchpad.mem[129]reg", DumpEntry{scratchpad.mem[129] reg});
        res.insert_or_assign("scratchpad.mem[130]reg", DumpEntry{scratchpad.mem[130] reg});
        res.insert_or_assign("scratchpad.mem[131]reg", DumpEntry{scratchpad.mem[131] reg});
        res.insert_or_assign("scratchpad.mem[132]reg", DumpEntry{scratchpad.mem[132] reg});
        res.insert_or_assign("scratchpad.mem[133]reg", DumpEntry{scratchpad.mem[133] reg});
        res.insert_or_assign("scratchpad.mem[134]reg", DumpEntry{scratchpad.mem[134] reg});
        res.insert_or_assign("scratchpad.mem[135]reg", DumpEntry{scratchpad.mem[135] reg});
        res.insert_or_assign("scratchpad.mem[136]reg", DumpEntry{scratchpad.mem[136] reg});
        res.insert_or_assign("scratchpad.mem[137]reg", DumpEntry{scratchpad.mem[137] reg});
        res.insert_or_assign("scratchpad.mem[138]reg", DumpEntry{scratchpad.mem[138] reg});
        res.insert_or_assign("scratchpad.mem[139]reg", DumpEntry{scratchpad.mem[139] reg});
        res.insert_or_assign("scratchpad.mem[140]reg", DumpEntry{scratchpad.mem[140] reg});
        res.insert_or_assign("scratchpad.mem[141]reg", DumpEntry{scratchpad.mem[141] reg});
        res.insert_or_assign("scratchpad.mem[142]reg", DumpEntry{scratchpad.mem[142] reg});
        res.insert_or_assign("scratchpad.mem[143]reg", DumpEntry{scratchpad.mem[143] reg});
        res.insert_or_assign("scratchpad.mem[144]reg", DumpEntry{scratchpad.mem[144] reg});
        res.insert_or_assign("scratchpad.mem[145]reg", DumpEntry{scratchpad.mem[145] reg});
        res.insert_or_assign("scratchpad.mem[146]reg", DumpEntry{scratchpad.mem[146] reg});
        res.insert_or_assign("scratchpad.mem[147]reg", DumpEntry{scratchpad.mem[147] reg});
        res.insert_or_assign("scratchpad.mem[148]reg", DumpEntry{scratchpad.mem[148] reg});
        res.insert_or_assign("scratchpad.mem[149]reg", DumpEntry{scratchpad.mem[149] reg});
        res.insert_or_assign("scratchpad.mem[150]reg", DumpEntry{scratchpad.mem[150] reg});
        res.insert_or_assign("scratchpad.mem[151]reg", DumpEntry{scratchpad.mem[151] reg});
        res.insert_or_assign("scratchpad.mem[152]reg", DumpEntry{scratchpad.mem[152] reg});
        res.insert_or_assign("scratchpad.mem[153]reg", DumpEntry{scratchpad.mem[153] reg});
        res.insert_or_assign("scratchpad.mem[154]reg", DumpEntry{scratchpad.mem[154] reg});
        res.insert_or_assign("scratchpad.mem[155]reg", DumpEntry{scratchpad.mem[155] reg});
        res.insert_or_assign("scratchpad.mem[156]reg", DumpEntry{scratchpad.mem[156] reg});
        res.insert_or_assign("scratchpad.mem[157]reg", DumpEntry{scratchpad.mem[157] reg});
        res.insert_or_assign("scratchpad.mem[158]reg", DumpEntry{scratchpad.mem[158] reg});
        res.insert_or_assign("scratchpad.mem[159]reg", DumpEntry{scratchpad.mem[159] reg});
        res.insert_or_assign("scratchpad.mem[160]reg", DumpEntry{scratchpad.mem[160] reg});
        res.insert_or_assign("scratchpad.mem[161]reg", DumpEntry{scratchpad.mem[161] reg});
        res.insert_or_assign("scratchpad.mem[162]reg", DumpEntry{scratchpad.mem[162] reg});
        res.insert_or_assign("scratchpad.mem[163]reg", DumpEntry{scratchpad.mem[163] reg});
        res.insert_or_assign("scratchpad.mem[164]reg", DumpEntry{scratchpad.mem[164] reg});
        res.insert_or_assign("scratchpad.mem[165]reg", DumpEntry{scratchpad.mem[165] reg});
        res.insert_or_assign("scratchpad.mem[166]reg", DumpEntry{scratchpad.mem[166] reg});
        res.insert_or_assign("scratchpad.mem[167]reg", DumpEntry{scratchpad.mem[167] reg});
        res.insert_or_assign("scratchpad.mem[168]reg", DumpEntry{scratchpad.mem[168] reg});
        res.insert_or_assign("scratchpad.mem[169]reg", DumpEntry{scratchpad.mem[169] reg});
        res.insert_or_assign("scratchpad.mem[170]reg", DumpEntry{scratchpad.mem[170] reg});
        res.insert_or_assign("scratchpad.mem[171]reg", DumpEntry{scratchpad.mem[171] reg});
        res.insert_or_assign("scratchpad.mem[172]reg", DumpEntry{scratchpad.mem[172] reg});
        res.insert_or_assign("scratchpad.mem[173]reg", DumpEntry{scratchpad.mem[173] reg});
        res.insert_or_assign("scratchpad.mem[174]reg", DumpEntry{scratchpad.mem[174] reg});
        res.insert_or_assign("scratchpad.mem[175]reg", DumpEntry{scratchpad.mem[175] reg});
        res.insert_or_assign("scratchpad.mem[176]reg", DumpEntry{scratchpad.mem[176] reg});
        res.insert_or_assign("scratchpad.mem[177]reg", DumpEntry{scratchpad.mem[177] reg});
        res.insert_or_assign("scratchpad.mem[178]reg", DumpEntry{scratchpad.mem[178] reg});
        res.insert_or_assign("scratchpad.mem[179]reg", DumpEntry{scratchpad.mem[179] reg});
        res.insert_or_assign("scratchpad.mem[180]reg", DumpEntry{scratchpad.mem[180] reg});
        res.insert_or_assign("scratchpad.mem[181]reg", DumpEntry{scratchpad.mem[181] reg});
        res.insert_or_assign("scratchpad.mem[182]reg", DumpEntry{scratchpad.mem[182] reg});
        res.insert_or_assign("scratchpad.mem[183]reg", DumpEntry{scratchpad.mem[183] reg});
        res.insert_or_assign("scratchpad.mem[184]reg", DumpEntry{scratchpad.mem[184] reg});
        res.insert_or_assign("scratchpad.mem[185]reg", DumpEntry{scratchpad.mem[185] reg});
        res.insert_or_assign("scratchpad.mem[186]reg", DumpEntry{scratchpad.mem[186] reg});
        res.insert_or_assign("scratchpad.mem[187]reg", DumpEntry{scratchpad.mem[187] reg});
        res.insert_or_assign("scratchpad.mem[188]reg", DumpEntry{scratchpad.mem[188] reg});
        res.insert_or_assign("scratchpad.mem[189]reg", DumpEntry{scratchpad.mem[189] reg});
        res.insert_or_assign("scratchpad.mem[190]reg", DumpEntry{scratchpad.mem[190] reg});
        res.insert_or_assign("scratchpad.mem[191]reg", DumpEntry{scratchpad.mem[191] reg});
        res.insert_or_assign("scratchpad.mem[192]reg", DumpEntry{scratchpad.mem[192] reg});
        res.insert_or_assign("scratchpad.mem[193]reg", DumpEntry{scratchpad.mem[193] reg});
        res.insert_or_assign("scratchpad.mem[194]reg", DumpEntry{scratchpad.mem[194] reg});
        res.insert_or_assign("scratchpad.mem[195]reg", DumpEntry{scratchpad.mem[195] reg});
        res.insert_or_assign("scratchpad.mem[196]reg", DumpEntry{scratchpad.mem[196] reg});
        res.insert_or_assign("scratchpad.mem[197]reg", DumpEntry{scratchpad.mem[197] reg});
        res.insert_or_assign("scratchpad.mem[198]reg", DumpEntry{scratchpad.mem[198] reg});
        res.insert_or_assign("scratchpad.mem[199]reg", DumpEntry{scratchpad.mem[199] reg});
        res.insert_or_assign("scratchpad.mem[200]reg", DumpEntry{scratchpad.mem[200] reg});
        res.insert_or_assign("scratchpad.mem[201]reg", DumpEntry{scratchpad.mem[201] reg});
        res.insert_or_assign("scratchpad.mem[202]reg", DumpEntry{scratchpad.mem[202] reg});
        res.insert_or_assign("scratchpad.mem[203]reg", DumpEntry{scratchpad.mem[203] reg});
        res.insert_or_assign("scratchpad.mem[204]reg", DumpEntry{scratchpad.mem[204] reg});
        res.insert_or_assign("scratchpad.mem[205]reg", DumpEntry{scratchpad.mem[205] reg});
        res.insert_or_assign("scratchpad.mem[206]reg", DumpEntry{scratchpad.mem[206] reg});
        res.insert_or_assign("scratchpad.mem[207]reg", DumpEntry{scratchpad.mem[207] reg});
        res.insert_or_assign("scratchpad.mem[208]reg", DumpEntry{scratchpad.mem[208] reg});
        res.insert_or_assign("scratchpad.mem[209]reg", DumpEntry{scratchpad.mem[209] reg});
        res.insert_or_assign("scratchpad.mem[210]reg", DumpEntry{scratchpad.mem[210] reg});
        res.insert_or_assign("scratchpad.mem[211]reg", DumpEntry{scratchpad.mem[211] reg});
        res.insert_or_assign("scratchpad.mem[212]reg", DumpEntry{scratchpad.mem[212] reg});
        res.insert_or_assign("scratchpad.mem[213]reg", DumpEntry{scratchpad.mem[213] reg});
        res.insert_or_assign("scratchpad.mem[214]reg", DumpEntry{scratchpad.mem[214] reg});
        res.insert_or_assign("scratchpad.mem[215]reg", DumpEntry{scratchpad.mem[215] reg});
        res.insert_or_assign("scratchpad.mem[216]reg", DumpEntry{scratchpad.mem[216] reg});
        res.insert_or_assign("scratchpad.mem[217]reg", DumpEntry{scratchpad.mem[217] reg});
        res.insert_or_assign("scratchpad.mem[218]reg", DumpEntry{scratchpad.mem[218] reg});
        res.insert_or_assign("scratchpad.mem[219]reg", DumpEntry{scratchpad.mem[219] reg});
        res.insert_or_assign("scratchpad.mem[220]reg", DumpEntry{scratchpad.mem[220] reg});
        res.insert_or_assign("scratchpad.mem[221]reg", DumpEntry{scratchpad.mem[221] reg});
        res.insert_or_assign("scratchpad.mem[222]reg", DumpEntry{scratchpad.mem[222] reg});
        res.insert_or_assign("scratchpad.mem[223]reg", DumpEntry{scratchpad.mem[223] reg});
        res.insert_or_assign("scratchpad.mem[224]reg", DumpEntry{scratchpad.mem[224] reg});
        res.insert_or_assign("scratchpad.mem[225]reg", DumpEntry{scratchpad.mem[225] reg});
        res.insert_or_assign("scratchpad.mem[226]reg", DumpEntry{scratchpad.mem[226] reg});
        res.insert_or_assign("scratchpad.mem[227]reg", DumpEntry{scratchpad.mem[227] reg});
        res.insert_or_assign("scratchpad.mem[228]reg", DumpEntry{scratchpad.mem[228] reg});
        res.insert_or_assign("scratchpad.mem[229]reg", DumpEntry{scratchpad.mem[229] reg});
        res.insert_or_assign("scratchpad.mem[230]reg", DumpEntry{scratchpad.mem[230] reg});
        res.insert_or_assign("scratchpad.mem[231]reg", DumpEntry{scratchpad.mem[231] reg});
        res.insert_or_assign("scratchpad.mem[232]reg", DumpEntry{scratchpad.mem[232] reg});
        res.insert_or_assign("scratchpad.mem[233]reg", DumpEntry{scratchpad.mem[233] reg});
        res.insert_or_assign("scratchpad.mem[234]reg", DumpEntry{scratchpad.mem[234] reg});
        res.insert_or_assign("scratchpad.mem[235]reg", DumpEntry{scratchpad.mem[235] reg});
        res.insert_or_assign("scratchpad.mem[236]reg", DumpEntry{scratchpad.mem[236] reg});
        res.insert_or_assign("scratchpad.mem[237]reg", DumpEntry{scratchpad.mem[237] reg});
        res.insert_or_assign("scratchpad.mem[238]reg", DumpEntry{scratchpad.mem[238] reg});
        res.insert_or_assign("scratchpad.mem[239]reg", DumpEntry{scratchpad.mem[239] reg});
        res.insert_or_assign("scratchpad.mem[240]reg", DumpEntry{scratchpad.mem[240] reg});
        res.insert_or_assign("scratchpad.mem[241]reg", DumpEntry{scratchpad.mem[241] reg});
        res.insert_or_assign("scratchpad.mem[242]reg", DumpEntry{scratchpad.mem[242] reg});
        res.insert_or_assign("scratchpad.mem[243]reg", DumpEntry{scratchpad.mem[243] reg});
        res.insert_or_assign("scratchpad.mem[244]reg", DumpEntry{scratchpad.mem[244] reg});
        res.insert_or_assign("scratchpad.mem[245]reg", DumpEntry{scratchpad.mem[245] reg});
        res.insert_or_assign("scratchpad.mem[246]reg", DumpEntry{scratchpad.mem[246] reg});
        res.insert_or_assign("scratchpad.mem[247]reg", DumpEntry{scratchpad.mem[247] reg});
        res.insert_or_assign("scratchpad.mem[248]reg", DumpEntry{scratchpad.mem[248] reg});
        res.insert_or_assign("scratchpad.mem[249]reg", DumpEntry{scratchpad.mem[249] reg});
        res.insert_or_assign("scratchpad.mem[250]reg", DumpEntry{scratchpad.mem[250] reg});
        res.insert_or_assign("scratchpad.mem[251]reg", DumpEntry{scratchpad.mem[251] reg});
        res.insert_or_assign("scratchpad.mem[252]reg", DumpEntry{scratchpad.mem[252] reg});
        res.insert_or_assign("scratchpad.mem[253]reg", DumpEntry{scratchpad.mem[253] reg});
        res.insert_or_assign("scratchpad.mem[254]reg", DumpEntry{scratchpad.mem[254] reg});
        res.insert_or_assign("scratchpad.mem[255]reg", DumpEntry{scratchpad.mem[255] reg});
        res.insert_or_assign("scratchpad.mem[256]reg", DumpEntry{scratchpad.mem[256] reg});
        res.insert_or_assign("scratchpad.mem[257]reg", DumpEntry{scratchpad.mem[257] reg});
        res.insert_or_assign("scratchpad.mem[258]reg", DumpEntry{scratchpad.mem[258] reg});
        res.insert_or_assign("scratchpad.mem[259]reg", DumpEntry{scratchpad.mem[259] reg});
        res.insert_or_assign("scratchpad.mem[260]reg", DumpEntry{scratchpad.mem[260] reg});
        res.insert_or_assign("scratchpad.mem[261]reg", DumpEntry{scratchpad.mem[261] reg});
        res.insert_or_assign("scratchpad.mem[262]reg", DumpEntry{scratchpad.mem[262] reg});
        res.insert_or_assign("scratchpad.mem[263]reg", DumpEntry{scratchpad.mem[263] reg});
        res.insert_or_assign("scratchpad.mem[264]reg", DumpEntry{scratchpad.mem[264] reg});
        res.insert_or_assign("scratchpad.mem[265]reg", DumpEntry{scratchpad.mem[265] reg});
        res.insert_or_assign("scratchpad.mem[266]reg", DumpEntry{scratchpad.mem[266] reg});
        res.insert_or_assign("scratchpad.mem[267]reg", DumpEntry{scratchpad.mem[267] reg});
        res.insert_or_assign("scratchpad.mem[268]reg", DumpEntry{scratchpad.mem[268] reg});
        res.insert_or_assign("scratchpad.mem[269]reg", DumpEntry{scratchpad.mem[269] reg});
        res.insert_or_assign("scratchpad.mem[270]reg", DumpEntry{scratchpad.mem[270] reg});
        res.insert_or_assign("scratchpad.mem[271]reg", DumpEntry{scratchpad.mem[271] reg});
        res.insert_or_assign("scratchpad.mem[272]reg", DumpEntry{scratchpad.mem[272] reg});
        res.insert_or_assign("scratchpad.mem[273]reg", DumpEntry{scratchpad.mem[273] reg});
        res.insert_or_assign("scratchpad.mem[274]reg", DumpEntry{scratchpad.mem[274] reg});
        res.insert_or_assign("scratchpad.mem[275]reg", DumpEntry{scratchpad.mem[275] reg});
        res.insert_or_assign("scratchpad.mem[276]reg", DumpEntry{scratchpad.mem[276] reg});
        res.insert_or_assign("scratchpad.mem[277]reg", DumpEntry{scratchpad.mem[277] reg});
        res.insert_or_assign("scratchpad.mem[278]reg", DumpEntry{scratchpad.mem[278] reg});
        res.insert_or_assign("scratchpad.mem[279]reg", DumpEntry{scratchpad.mem[279] reg});
        res.insert_or_assign("scratchpad.mem[280]reg", DumpEntry{scratchpad.mem[280] reg});
        res.insert_or_assign("scratchpad.mem[281]reg", DumpEntry{scratchpad.mem[281] reg});
        res.insert_or_assign("scratchpad.mem[282]reg", DumpEntry{scratchpad.mem[282] reg});
        res.insert_or_assign("scratchpad.mem[283]reg", DumpEntry{scratchpad.mem[283] reg});
        res.insert_or_assign("scratchpad.mem[284]reg", DumpEntry{scratchpad.mem[284] reg});
        res.insert_or_assign("scratchpad.mem[285]reg", DumpEntry{scratchpad.mem[285] reg});
        res.insert_or_assign("scratchpad.mem[286]reg", DumpEntry{scratchpad.mem[286] reg});
        res.insert_or_assign("scratchpad.mem[287]reg", DumpEntry{scratchpad.mem[287] reg});
        res.insert_or_assign("scratchpad.mem[288]reg", DumpEntry{scratchpad.mem[288] reg});
        res.insert_or_assign("scratchpad.mem[289]reg", DumpEntry{scratchpad.mem[289] reg});
        res.insert_or_assign("scratchpad.mem[290]reg", DumpEntry{scratchpad.mem[290] reg});
        res.insert_or_assign("scratchpad.mem[291]reg", DumpEntry{scratchpad.mem[291] reg});
        res.insert_or_assign("scratchpad.mem[292]reg", DumpEntry{scratchpad.mem[292] reg});
        res.insert_or_assign("scratchpad.mem[293]reg", DumpEntry{scratchpad.mem[293] reg});
        res.insert_or_assign("scratchpad.mem[294]reg", DumpEntry{scratchpad.mem[294] reg});
        res.insert_or_assign("scratchpad.mem[295]reg", DumpEntry{scratchpad.mem[295] reg});
        res.insert_or_assign("scratchpad.mem[296]reg", DumpEntry{scratchpad.mem[296] reg});
        res.insert_or_assign("scratchpad.mem[297]reg", DumpEntry{scratchpad.mem[297] reg});
        res.insert_or_assign("scratchpad.mem[298]reg", DumpEntry{scratchpad.mem[298] reg});
        res.insert_or_assign("scratchpad.mem[299]reg", DumpEntry{scratchpad.mem[299] reg});
        res.insert_or_assign("scratchpad.mem[300]reg", DumpEntry{scratchpad.mem[300] reg});
        res.insert_or_assign("scratchpad.mem[301]reg", DumpEntry{scratchpad.mem[301] reg});
        res.insert_or_assign("scratchpad.mem[302]reg", DumpEntry{scratchpad.mem[302] reg});
        res.insert_or_assign("scratchpad.mem[303]reg", DumpEntry{scratchpad.mem[303] reg});
        res.insert_or_assign("scratchpad.mem[304]reg", DumpEntry{scratchpad.mem[304] reg});
        res.insert_or_assign("scratchpad.mem[305]reg", DumpEntry{scratchpad.mem[305] reg});
        res.insert_or_assign("scratchpad.mem[306]reg", DumpEntry{scratchpad.mem[306] reg});
        res.insert_or_assign("scratchpad.mem[307]reg", DumpEntry{scratchpad.mem[307] reg});
        res.insert_or_assign("scratchpad.mem[308]reg", DumpEntry{scratchpad.mem[308] reg});
        res.insert_or_assign("scratchpad.mem[309]reg", DumpEntry{scratchpad.mem[309] reg});
        res.insert_or_assign("scratchpad.mem[310]reg", DumpEntry{scratchpad.mem[310] reg});
        res.insert_or_assign("scratchpad.mem[311]reg", DumpEntry{scratchpad.mem[311] reg});
        res.insert_or_assign("scratchpad.mem[312]reg", DumpEntry{scratchpad.mem[312] reg});
        res.insert_or_assign("scratchpad.mem[313]reg", DumpEntry{scratchpad.mem[313] reg});
        res.insert_or_assign("scratchpad.mem[314]reg", DumpEntry{scratchpad.mem[314] reg});
        res.insert_or_assign("scratchpad.mem[315]reg", DumpEntry{scratchpad.mem[315] reg});
        res.insert_or_assign("scratchpad.mem[316]reg", DumpEntry{scratchpad.mem[316] reg});
        res.insert_or_assign("scratchpad.mem[317]reg", DumpEntry{scratchpad.mem[317] reg});
        res.insert_or_assign("scratchpad.mem[318]reg", DumpEntry{scratchpad.mem[318] reg});
        res.insert_or_assign("scratchpad.mem[319]reg", DumpEntry{scratchpad.mem[319] reg});
        res.insert_or_assign("scratchpad.mem[320]reg", DumpEntry{scratchpad.mem[320] reg});
        res.insert_or_assign("scratchpad.mem[321]reg", DumpEntry{scratchpad.mem[321] reg});
        res.insert_or_assign("scratchpad.mem[322]reg", DumpEntry{scratchpad.mem[322] reg});
        res.insert_or_assign("scratchpad.mem[323]reg", DumpEntry{scratchpad.mem[323] reg});
        res.insert_or_assign("scratchpad.mem[324]reg", DumpEntry{scratchpad.mem[324] reg});
        res.insert_or_assign("scratchpad.mem[325]reg", DumpEntry{scratchpad.mem[325] reg});
        res.insert_or_assign("scratchpad.mem[326]reg", DumpEntry{scratchpad.mem[326] reg});
        res.insert_or_assign("scratchpad.mem[327]reg", DumpEntry{scratchpad.mem[327] reg});
        res.insert_or_assign("scratchpad.mem[328]reg", DumpEntry{scratchpad.mem[328] reg});
        res.insert_or_assign("scratchpad.mem[329]reg", DumpEntry{scratchpad.mem[329] reg});
        res.insert_or_assign("scratchpad.mem[330]reg", DumpEntry{scratchpad.mem[330] reg});
        res.insert_or_assign("scratchpad.mem[331]reg", DumpEntry{scratchpad.mem[331] reg});
        res.insert_or_assign("scratchpad.mem[332]reg", DumpEntry{scratchpad.mem[332] reg});
        res.insert_or_assign("scratchpad.mem[333]reg", DumpEntry{scratchpad.mem[333] reg});
        res.insert_or_assign("scratchpad.mem[334]reg", DumpEntry{scratchpad.mem[334] reg});
        res.insert_or_assign("scratchpad.mem[335]reg", DumpEntry{scratchpad.mem[335] reg});
        res.insert_or_assign("scratchpad.mem[336]reg", DumpEntry{scratchpad.mem[336] reg});
        res.insert_or_assign("scratchpad.mem[337]reg", DumpEntry{scratchpad.mem[337] reg});
        res.insert_or_assign("scratchpad.mem[338]reg", DumpEntry{scratchpad.mem[338] reg});
        res.insert_or_assign("scratchpad.mem[339]reg", DumpEntry{scratchpad.mem[339] reg});
        res.insert_or_assign("scratchpad.mem[340]reg", DumpEntry{scratchpad.mem[340] reg});
        res.insert_or_assign("scratchpad.mem[341]reg", DumpEntry{scratchpad.mem[341] reg});
        res.insert_or_assign("scratchpad.mem[342]reg", DumpEntry{scratchpad.mem[342] reg});
        res.insert_or_assign("scratchpad.mem[343]reg", DumpEntry{scratchpad.mem[343] reg});
        res.insert_or_assign("scratchpad.mem[344]reg", DumpEntry{scratchpad.mem[344] reg});
        res.insert_or_assign("scratchpad.mem[345]reg", DumpEntry{scratchpad.mem[345] reg});
        res.insert_or_assign("scratchpad.mem[346]reg", DumpEntry{scratchpad.mem[346] reg});
        res.insert_or_assign("scratchpad.mem[347]reg", DumpEntry{scratchpad.mem[347] reg});
        res.insert_or_assign("scratchpad.mem[348]reg", DumpEntry{scratchpad.mem[348] reg});
        res.insert_or_assign("scratchpad.mem[349]reg", DumpEntry{scratchpad.mem[349] reg});
        res.insert_or_assign("scratchpad.mem[350]reg", DumpEntry{scratchpad.mem[350] reg});
        res.insert_or_assign("scratchpad.mem[351]reg", DumpEntry{scratchpad.mem[351] reg});
        res.insert_or_assign("scratchpad.mem[352]reg", DumpEntry{scratchpad.mem[352] reg});
        res.insert_or_assign("scratchpad.mem[353]reg", DumpEntry{scratchpad.mem[353] reg});
        res.insert_or_assign("scratchpad.mem[354]reg", DumpEntry{scratchpad.mem[354] reg});
        res.insert_or_assign("scratchpad.mem[355]reg", DumpEntry{scratchpad.mem[355] reg});
        res.insert_or_assign("scratchpad.mem[356]reg", DumpEntry{scratchpad.mem[356] reg});
        res.insert_or_assign("scratchpad.mem[357]reg", DumpEntry{scratchpad.mem[357] reg});
        res.insert_or_assign("scratchpad.mem[358]reg", DumpEntry{scratchpad.mem[358] reg});
        res.insert_or_assign("scratchpad.mem[359]reg", DumpEntry{scratchpad.mem[359] reg});
        res.insert_or_assign("scratchpad.mem[360]reg", DumpEntry{scratchpad.mem[360] reg});
        res.insert_or_assign("scratchpad.mem[361]reg", DumpEntry{scratchpad.mem[361] reg});
        res.insert_or_assign("scratchpad.mem[362]reg", DumpEntry{scratchpad.mem[362] reg});
        res.insert_or_assign("scratchpad.mem[363]reg", DumpEntry{scratchpad.mem[363] reg});
        res.insert_or_assign("scratchpad.mem[364]reg", DumpEntry{scratchpad.mem[364] reg});
        res.insert_or_assign("scratchpad.mem[365]reg", DumpEntry{scratchpad.mem[365] reg});
        res.insert_or_assign("scratchpad.mem[366]reg", DumpEntry{scratchpad.mem[366] reg});
        res.insert_or_assign("scratchpad.mem[367]reg", DumpEntry{scratchpad.mem[367] reg});
        res.insert_or_assign("scratchpad.mem[368]reg", DumpEntry{scratchpad.mem[368] reg});
        res.insert_or_assign("scratchpad.mem[369]reg", DumpEntry{scratchpad.mem[369] reg});
        res.insert_or_assign("scratchpad.mem[370]reg", DumpEntry{scratchpad.mem[370] reg});
        res.insert_or_assign("scratchpad.mem[371]reg", DumpEntry{scratchpad.mem[371] reg});
        res.insert_or_assign("scratchpad.mem[372]reg", DumpEntry{scratchpad.mem[372] reg});
        res.insert_or_assign("scratchpad.mem[373]reg", DumpEntry{scratchpad.mem[373] reg});
        res.insert_or_assign("scratchpad.mem[374]reg", DumpEntry{scratchpad.mem[374] reg});
        res.insert_or_assign("scratchpad.mem[375]reg", DumpEntry{scratchpad.mem[375] reg});
        res.insert_or_assign("scratchpad.mem[376]reg", DumpEntry{scratchpad.mem[376] reg});
        res.insert_or_assign("scratchpad.mem[377]reg", DumpEntry{scratchpad.mem[377] reg});
        res.insert_or_assign("scratchpad.mem[378]reg", DumpEntry{scratchpad.mem[378] reg});
        res.insert_or_assign("scratchpad.mem[379]reg", DumpEntry{scratchpad.mem[379] reg});
        res.insert_or_assign("scratchpad.mem[380]reg", DumpEntry{scratchpad.mem[380] reg});
        res.insert_or_assign("scratchpad.mem[381]reg", DumpEntry{scratchpad.mem[381] reg});
        res.insert_or_assign("scratchpad.mem[382]reg", DumpEntry{scratchpad.mem[382] reg});
        res.insert_or_assign("scratchpad.mem[383]reg", DumpEntry{scratchpad.mem[383] reg});
        res.insert_or_assign("scratchpad.mem[384]reg", DumpEntry{scratchpad.mem[384] reg});
        res.insert_or_assign("scratchpad.mem[385]reg", DumpEntry{scratchpad.mem[385] reg});
        res.insert_or_assign("scratchpad.mem[386]reg", DumpEntry{scratchpad.mem[386] reg});
        res.insert_or_assign("scratchpad.mem[387]reg", DumpEntry{scratchpad.mem[387] reg});
        res.insert_or_assign("scratchpad.mem[388]reg", DumpEntry{scratchpad.mem[388] reg});
        res.insert_or_assign("scratchpad.mem[389]reg", DumpEntry{scratchpad.mem[389] reg});
        res.insert_or_assign("scratchpad.mem[390]reg", DumpEntry{scratchpad.mem[390] reg});
        res.insert_or_assign("scratchpad.mem[391]reg", DumpEntry{scratchpad.mem[391] reg});
        res.insert_or_assign("scratchpad.mem[392]reg", DumpEntry{scratchpad.mem[392] reg});
        res.insert_or_assign("scratchpad.mem[393]reg", DumpEntry{scratchpad.mem[393] reg});
        res.insert_or_assign("scratchpad.mem[394]reg", DumpEntry{scratchpad.mem[394] reg});
        res.insert_or_assign("scratchpad.mem[395]reg", DumpEntry{scratchpad.mem[395] reg});
        res.insert_or_assign("scratchpad.mem[396]reg", DumpEntry{scratchpad.mem[396] reg});
        res.insert_or_assign("scratchpad.mem[397]reg", DumpEntry{scratchpad.mem[397] reg});
        res.insert_or_assign("scratchpad.mem[398]reg", DumpEntry{scratchpad.mem[398] reg});
        res.insert_or_assign("scratchpad.mem[399]reg", DumpEntry{scratchpad.mem[399] reg});
        res.insert_or_assign("scratchpad.mem[400]reg", DumpEntry{scratchpad.mem[400] reg});
        res.insert_or_assign("scratchpad.mem[401]reg", DumpEntry{scratchpad.mem[401] reg});
        res.insert_or_assign("scratchpad.mem[402]reg", DumpEntry{scratchpad.mem[402] reg});
        res.insert_or_assign("scratchpad.mem[403]reg", DumpEntry{scratchpad.mem[403] reg});
        res.insert_or_assign("scratchpad.mem[404]reg", DumpEntry{scratchpad.mem[404] reg});
        res.insert_or_assign("scratchpad.mem[405]reg", DumpEntry{scratchpad.mem[405] reg});
        res.insert_or_assign("scratchpad.mem[406]reg", DumpEntry{scratchpad.mem[406] reg});
        res.insert_or_assign("scratchpad.mem[407]reg", DumpEntry{scratchpad.mem[407] reg});
        res.insert_or_assign("scratchpad.mem[408]reg", DumpEntry{scratchpad.mem[408] reg});
        res.insert_or_assign("scratchpad.mem[409]reg", DumpEntry{scratchpad.mem[409] reg});
        res.insert_or_assign("scratchpad.mem[410]reg", DumpEntry{scratchpad.mem[410] reg});
        res.insert_or_assign("scratchpad.mem[411]reg", DumpEntry{scratchpad.mem[411] reg});
        res.insert_or_assign("scratchpad.mem[412]reg", DumpEntry{scratchpad.mem[412] reg});
        res.insert_or_assign("scratchpad.mem[413]reg", DumpEntry{scratchpad.mem[413] reg});
        res.insert_or_assign("scratchpad.mem[414]reg", DumpEntry{scratchpad.mem[414] reg});
        res.insert_or_assign("scratchpad.mem[415]reg", DumpEntry{scratchpad.mem[415] reg});
        res.insert_or_assign("scratchpad.mem[416]reg", DumpEntry{scratchpad.mem[416] reg});
        res.insert_or_assign("scratchpad.mem[417]reg", DumpEntry{scratchpad.mem[417] reg});
        res.insert_or_assign("scratchpad.mem[418]reg", DumpEntry{scratchpad.mem[418] reg});
        res.insert_or_assign("scratchpad.mem[419]reg", DumpEntry{scratchpad.mem[419] reg});
        res.insert_or_assign("scratchpad.mem[420]reg", DumpEntry{scratchpad.mem[420] reg});
        res.insert_or_assign("scratchpad.mem[421]reg", DumpEntry{scratchpad.mem[421] reg});
        res.insert_or_assign("scratchpad.mem[422]reg", DumpEntry{scratchpad.mem[422] reg});
        res.insert_or_assign("scratchpad.mem[423]reg", DumpEntry{scratchpad.mem[423] reg});
        res.insert_or_assign("scratchpad.mem[424]reg", DumpEntry{scratchpad.mem[424] reg});
        res.insert_or_assign("scratchpad.mem[425]reg", DumpEntry{scratchpad.mem[425] reg});
        res.insert_or_assign("scratchpad.mem[426]reg", DumpEntry{scratchpad.mem[426] reg});
        res.insert_or_assign("scratchpad.mem[427]reg", DumpEntry{scratchpad.mem[427] reg});
        res.insert_or_assign("scratchpad.mem[428]reg", DumpEntry{scratchpad.mem[428] reg});
        res.insert_or_assign("scratchpad.mem[429]reg", DumpEntry{scratchpad.mem[429] reg});
        res.insert_or_assign("scratchpad.mem[430]reg", DumpEntry{scratchpad.mem[430] reg});
        res.insert_or_assign("scratchpad.mem[431]reg", DumpEntry{scratchpad.mem[431] reg});
        res.insert_or_assign("scratchpad.mem[432]reg", DumpEntry{scratchpad.mem[432] reg});
        res.insert_or_assign("scratchpad.mem[433]reg", DumpEntry{scratchpad.mem[433] reg});
        res.insert_or_assign("scratchpad.mem[434]reg", DumpEntry{scratchpad.mem[434] reg});
        res.insert_or_assign("scratchpad.mem[435]reg", DumpEntry{scratchpad.mem[435] reg});
        res.insert_or_assign("scratchpad.mem[436]reg", DumpEntry{scratchpad.mem[436] reg});
        res.insert_or_assign("scratchpad.mem[437]reg", DumpEntry{scratchpad.mem[437] reg});
        res.insert_or_assign("scratchpad.mem[438]reg", DumpEntry{scratchpad.mem[438] reg});
        res.insert_or_assign("scratchpad.mem[439]reg", DumpEntry{scratchpad.mem[439] reg});
        res.insert_or_assign("scratchpad.mem[440]reg", DumpEntry{scratchpad.mem[440] reg});
        res.insert_or_assign("scratchpad.mem[441]reg", DumpEntry{scratchpad.mem[441] reg});
        res.insert_or_assign("scratchpad.mem[442]reg", DumpEntry{scratchpad.mem[442] reg});
        res.insert_or_assign("scratchpad.mem[443]reg", DumpEntry{scratchpad.mem[443] reg});
        res.insert_or_assign("scratchpad.mem[444]reg", DumpEntry{scratchpad.mem[444] reg});
        res.insert_or_assign("scratchpad.mem[445]reg", DumpEntry{scratchpad.mem[445] reg});
        res.insert_or_assign("scratchpad.mem[446]reg", DumpEntry{scratchpad.mem[446] reg});
        res.insert_or_assign("scratchpad.mem[447]reg", DumpEntry{scratchpad.mem[447] reg});
        res.insert_or_assign("scratchpad.mem[448]reg", DumpEntry{scratchpad.mem[448] reg});
        res.insert_or_assign("scratchpad.mem[449]reg", DumpEntry{scratchpad.mem[449] reg});
        res.insert_or_assign("scratchpad.mem[450]reg", DumpEntry{scratchpad.mem[450] reg});
        res.insert_or_assign("scratchpad.mem[451]reg", DumpEntry{scratchpad.mem[451] reg});
        res.insert_or_assign("scratchpad.mem[452]reg", DumpEntry{scratchpad.mem[452] reg});
        res.insert_or_assign("scratchpad.mem[453]reg", DumpEntry{scratchpad.mem[453] reg});
        res.insert_or_assign("scratchpad.mem[454]reg", DumpEntry{scratchpad.mem[454] reg});
        res.insert_or_assign("scratchpad.mem[455]reg", DumpEntry{scratchpad.mem[455] reg});
        res.insert_or_assign("scratchpad.mem[456]reg", DumpEntry{scratchpad.mem[456] reg});
        res.insert_or_assign("scratchpad.mem[457]reg", DumpEntry{scratchpad.mem[457] reg});
        res.insert_or_assign("scratchpad.mem[458]reg", DumpEntry{scratchpad.mem[458] reg});
        res.insert_or_assign("scratchpad.mem[459]reg", DumpEntry{scratchpad.mem[459] reg});
        res.insert_or_assign("scratchpad.mem[460]reg", DumpEntry{scratchpad.mem[460] reg});
        res.insert_or_assign("scratchpad.mem[461]reg", DumpEntry{scratchpad.mem[461] reg});
        res.insert_or_assign("scratchpad.mem[462]reg", DumpEntry{scratchpad.mem[462] reg});
        res.insert_or_assign("scratchpad.mem[463]reg", DumpEntry{scratchpad.mem[463] reg});
        res.insert_or_assign("scratchpad.mem[464]reg", DumpEntry{scratchpad.mem[464] reg});
        res.insert_or_assign("scratchpad.mem[465]reg", DumpEntry{scratchpad.mem[465] reg});
        res.insert_or_assign("scratchpad.mem[466]reg", DumpEntry{scratchpad.mem[466] reg});
        res.insert_or_assign("scratchpad.mem[467]reg", DumpEntry{scratchpad.mem[467] reg});
        res.insert_or_assign("scratchpad.mem[468]reg", DumpEntry{scratchpad.mem[468] reg});
        res.insert_or_assign("scratchpad.mem[469]reg", DumpEntry{scratchpad.mem[469] reg});
        res.insert_or_assign("scratchpad.mem[470]reg", DumpEntry{scratchpad.mem[470] reg});
        res.insert_or_assign("scratchpad.mem[471]reg", DumpEntry{scratchpad.mem[471] reg});
        res.insert_or_assign("scratchpad.mem[472]reg", DumpEntry{scratchpad.mem[472] reg});
        res.insert_or_assign("scratchpad.mem[473]reg", DumpEntry{scratchpad.mem[473] reg});
        res.insert_or_assign("scratchpad.mem[474]reg", DumpEntry{scratchpad.mem[474] reg});
        res.insert_or_assign("scratchpad.mem[475]reg", DumpEntry{scratchpad.mem[475] reg});
        res.insert_or_assign("scratchpad.mem[476]reg", DumpEntry{scratchpad.mem[476] reg});
        res.insert_or_assign("scratchpad.mem[477]reg", DumpEntry{scratchpad.mem[477] reg});
        res.insert_or_assign("scratchpad.mem[478]reg", DumpEntry{scratchpad.mem[478] reg});
        res.insert_or_assign("scratchpad.mem[479]reg", DumpEntry{scratchpad.mem[479] reg});
        res.insert_or_assign("scratchpad.mem[480]reg", DumpEntry{scratchpad.mem[480] reg});
        res.insert_or_assign("scratchpad.mem[481]reg", DumpEntry{scratchpad.mem[481] reg});
        res.insert_or_assign("scratchpad.mem[482]reg", DumpEntry{scratchpad.mem[482] reg});
        res.insert_or_assign("scratchpad.mem[483]reg", DumpEntry{scratchpad.mem[483] reg});
        res.insert_or_assign("scratchpad.mem[484]reg", DumpEntry{scratchpad.mem[484] reg});
        res.insert_or_assign("scratchpad.mem[485]reg", DumpEntry{scratchpad.mem[485] reg});
        res.insert_or_assign("scratchpad.mem[486]reg", DumpEntry{scratchpad.mem[486] reg});
        res.insert_or_assign("scratchpad.mem[487]reg", DumpEntry{scratchpad.mem[487] reg});
        res.insert_or_assign("scratchpad.mem[488]reg", DumpEntry{scratchpad.mem[488] reg});
        res.insert_or_assign("scratchpad.mem[489]reg", DumpEntry{scratchpad.mem[489] reg});
        res.insert_or_assign("scratchpad.mem[490]reg", DumpEntry{scratchpad.mem[490] reg});
        res.insert_or_assign("scratchpad.mem[491]reg", DumpEntry{scratchpad.mem[491] reg});
        res.insert_or_assign("scratchpad.mem[492]reg", DumpEntry{scratchpad.mem[492] reg});
        res.insert_or_assign("scratchpad.mem[493]reg", DumpEntry{scratchpad.mem[493] reg});
        res.insert_or_assign("scratchpad.mem[494]reg", DumpEntry{scratchpad.mem[494] reg});
        res.insert_or_assign("scratchpad.mem[495]reg", DumpEntry{scratchpad.mem[495] reg});
        res.insert_or_assign("scratchpad.mem[496]reg", DumpEntry{scratchpad.mem[496] reg});
        res.insert_or_assign("scratchpad.mem[497]reg", DumpEntry{scratchpad.mem[497] reg});
        res.insert_or_assign("scratchpad.mem[498]reg", DumpEntry{scratchpad.mem[498] reg});
        res.insert_or_assign("scratchpad.mem[499]reg", DumpEntry{scratchpad.mem[499] reg});
        res.insert_or_assign("scratchpad.mem[500]reg", DumpEntry{scratchpad.mem[500] reg});
        res.insert_or_assign("scratchpad.mem[501]reg", DumpEntry{scratchpad.mem[501] reg});
        res.insert_or_assign("scratchpad.mem[502]reg", DumpEntry{scratchpad.mem[502] reg});
        res.insert_or_assign("scratchpad.mem[503]reg", DumpEntry{scratchpad.mem[503] reg});
        res.insert_or_assign("scratchpad.mem[504]reg", DumpEntry{scratchpad.mem[504] reg});
        res.insert_or_assign("scratchpad.mem[505]reg", DumpEntry{scratchpad.mem[505] reg});
        res.insert_or_assign("scratchpad.mem[506]reg", DumpEntry{scratchpad.mem[506] reg});
        res.insert_or_assign("scratchpad.mem[507]reg", DumpEntry{scratchpad.mem[507] reg});
        res.insert_or_assign("scratchpad.mem[508]reg", DumpEntry{scratchpad.mem[508] reg});
        res.insert_or_assign("scratchpad.mem[509]reg", DumpEntry{scratchpad.mem[509] reg});
        res.insert_or_assign("scratchpad.mem[510]reg", DumpEntry{scratchpad.mem[510] reg});
        res.insert_or_assign("scratchpad.mem[511]reg", DumpEntry{scratchpad.mem[511] reg});
        res.insert_or_assign("scratchpad.mem[512]reg", DumpEntry{scratchpad.mem[512] reg});
        res.insert_or_assign("scratchpad.mem[513]reg", DumpEntry{scratchpad.mem[513] reg});
        res.insert_or_assign("scratchpad.mem[514]reg", DumpEntry{scratchpad.mem[514] reg});
        res.insert_or_assign("scratchpad.mem[515]reg", DumpEntry{scratchpad.mem[515] reg});
        res.insert_or_assign("scratchpad.mem[516]reg", DumpEntry{scratchpad.mem[516] reg});
        res.insert_or_assign("scratchpad.mem[517]reg", DumpEntry{scratchpad.mem[517] reg});
        res.insert_or_assign("scratchpad.mem[518]reg", DumpEntry{scratchpad.mem[518] reg});
        res.insert_or_assign("scratchpad.mem[519]reg", DumpEntry{scratchpad.mem[519] reg});
        res.insert_or_assign("scratchpad.mem[520]reg", DumpEntry{scratchpad.mem[520] reg});
        res.insert_or_assign("scratchpad.mem[521]reg", DumpEntry{scratchpad.mem[521] reg});
        res.insert_or_assign("scratchpad.mem[522]reg", DumpEntry{scratchpad.mem[522] reg});
        res.insert_or_assign("scratchpad.mem[523]reg", DumpEntry{scratchpad.mem[523] reg});
        res.insert_or_assign("scratchpad.mem[524]reg", DumpEntry{scratchpad.mem[524] reg});
        res.insert_or_assign("scratchpad.mem[525]reg", DumpEntry{scratchpad.mem[525] reg});
        res.insert_or_assign("scratchpad.mem[526]reg", DumpEntry{scratchpad.mem[526] reg});
        res.insert_or_assign("scratchpad.mem[527]reg", DumpEntry{scratchpad.mem[527] reg});
        res.insert_or_assign("scratchpad.mem[528]reg", DumpEntry{scratchpad.mem[528] reg});
        res.insert_or_assign("scratchpad.mem[529]reg", DumpEntry{scratchpad.mem[529] reg});
        res.insert_or_assign("scratchpad.mem[530]reg", DumpEntry{scratchpad.mem[530] reg});
        res.insert_or_assign("scratchpad.mem[531]reg", DumpEntry{scratchpad.mem[531] reg});
        res.insert_or_assign("scratchpad.mem[532]reg", DumpEntry{scratchpad.mem[532] reg});
        res.insert_or_assign("scratchpad.mem[533]reg", DumpEntry{scratchpad.mem[533] reg});
        res.insert_or_assign("scratchpad.mem[534]reg", DumpEntry{scratchpad.mem[534] reg});
        res.insert_or_assign("scratchpad.mem[535]reg", DumpEntry{scratchpad.mem[535] reg});
        res.insert_or_assign("scratchpad.mem[536]reg", DumpEntry{scratchpad.mem[536] reg});
        res.insert_or_assign("scratchpad.mem[537]reg", DumpEntry{scratchpad.mem[537] reg});
        res.insert_or_assign("scratchpad.mem[538]reg", DumpEntry{scratchpad.mem[538] reg});
        res.insert_or_assign("scratchpad.mem[539]reg", DumpEntry{scratchpad.mem[539] reg});
        res.insert_or_assign("scratchpad.mem[540]reg", DumpEntry{scratchpad.mem[540] reg});
        res.insert_or_assign("scratchpad.mem[541]reg", DumpEntry{scratchpad.mem[541] reg});
        res.insert_or_assign("scratchpad.mem[542]reg", DumpEntry{scratchpad.mem[542] reg});
        res.insert_or_assign("scratchpad.mem[543]reg", DumpEntry{scratchpad.mem[543] reg});
        res.insert_or_assign("scratchpad.mem[544]reg", DumpEntry{scratchpad.mem[544] reg});
        res.insert_or_assign("scratchpad.mem[545]reg", DumpEntry{scratchpad.mem[545] reg});
        res.insert_or_assign("scratchpad.mem[546]reg", DumpEntry{scratchpad.mem[546] reg});
        res.insert_or_assign("scratchpad.mem[547]reg", DumpEntry{scratchpad.mem[547] reg});
        res.insert_or_assign("scratchpad.mem[548]reg", DumpEntry{scratchpad.mem[548] reg});
        res.insert_or_assign("scratchpad.mem[549]reg", DumpEntry{scratchpad.mem[549] reg});
        res.insert_or_assign("scratchpad.mem[550]reg", DumpEntry{scratchpad.mem[550] reg});
        res.insert_or_assign("scratchpad.mem[551]reg", DumpEntry{scratchpad.mem[551] reg});
        res.insert_or_assign("scratchpad.mem[552]reg", DumpEntry{scratchpad.mem[552] reg});
        res.insert_or_assign("scratchpad.mem[553]reg", DumpEntry{scratchpad.mem[553] reg});
        res.insert_or_assign("scratchpad.mem[554]reg", DumpEntry{scratchpad.mem[554] reg});
        res.insert_or_assign("scratchpad.mem[555]reg", DumpEntry{scratchpad.mem[555] reg});
        res.insert_or_assign("scratchpad.mem[556]reg", DumpEntry{scratchpad.mem[556] reg});
        res.insert_or_assign("scratchpad.mem[557]reg", DumpEntry{scratchpad.mem[557] reg});
        res.insert_or_assign("scratchpad.mem[558]reg", DumpEntry{scratchpad.mem[558] reg});
        res.insert_or_assign("scratchpad.mem[559]reg", DumpEntry{scratchpad.mem[559] reg});
        res.insert_or_assign("scratchpad.mem[560]reg", DumpEntry{scratchpad.mem[560] reg});
        res.insert_or_assign("scratchpad.mem[561]reg", DumpEntry{scratchpad.mem[561] reg});
        res.insert_or_assign("scratchpad.mem[562]reg", DumpEntry{scratchpad.mem[562] reg});
        res.insert_or_assign("scratchpad.mem[563]reg", DumpEntry{scratchpad.mem[563] reg});
        res.insert_or_assign("scratchpad.mem[564]reg", DumpEntry{scratchpad.mem[564] reg});
        res.insert_or_assign("scratchpad.mem[565]reg", DumpEntry{scratchpad.mem[565] reg});
        res.insert_or_assign("scratchpad.mem[566]reg", DumpEntry{scratchpad.mem[566] reg});
        res.insert_or_assign("scratchpad.mem[567]reg", DumpEntry{scratchpad.mem[567] reg});
        res.insert_or_assign("scratchpad.mem[568]reg", DumpEntry{scratchpad.mem[568] reg});
        res.insert_or_assign("scratchpad.mem[569]reg", DumpEntry{scratchpad.mem[569] reg});
        res.insert_or_assign("scratchpad.mem[570]reg", DumpEntry{scratchpad.mem[570] reg});
        res.insert_or_assign("scratchpad.mem[571]reg", DumpEntry{scratchpad.mem[571] reg});
        res.insert_or_assign("scratchpad.mem[572]reg", DumpEntry{scratchpad.mem[572] reg});
        res.insert_or_assign("scratchpad.mem[573]reg", DumpEntry{scratchpad.mem[573] reg});
        res.insert_or_assign("scratchpad.mem[574]reg", DumpEntry{scratchpad.mem[574] reg});
        res.insert_or_assign("scratchpad.mem[575]reg", DumpEntry{scratchpad.mem[575] reg});
        res.insert_or_assign("scratchpad.mem[576]reg", DumpEntry{scratchpad.mem[576] reg});
        res.insert_or_assign("scratchpad.mem[577]reg", DumpEntry{scratchpad.mem[577] reg});
        res.insert_or_assign("scratchpad.mem[578]reg", DumpEntry{scratchpad.mem[578] reg});
        res.insert_or_assign("scratchpad.mem[579]reg", DumpEntry{scratchpad.mem[579] reg});
        res.insert_or_assign("scratchpad.mem[580]reg", DumpEntry{scratchpad.mem[580] reg});
        res.insert_or_assign("scratchpad.mem[581]reg", DumpEntry{scratchpad.mem[581] reg});
        res.insert_or_assign("scratchpad.mem[582]reg", DumpEntry{scratchpad.mem[582] reg});
        res.insert_or_assign("scratchpad.mem[583]reg", DumpEntry{scratchpad.mem[583] reg});
        res.insert_or_assign("scratchpad.mem[584]reg", DumpEntry{scratchpad.mem[584] reg});
        res.insert_or_assign("scratchpad.mem[585]reg", DumpEntry{scratchpad.mem[585] reg});
        res.insert_or_assign("scratchpad.mem[586]reg", DumpEntry{scratchpad.mem[586] reg});
        res.insert_or_assign("scratchpad.mem[587]reg", DumpEntry{scratchpad.mem[587] reg});
        res.insert_or_assign("scratchpad.mem[588]reg", DumpEntry{scratchpad.mem[588] reg});
        res.insert_or_assign("scratchpad.mem[589]reg", DumpEntry{scratchpad.mem[589] reg});
        res.insert_or_assign("scratchpad.mem[590]reg", DumpEntry{scratchpad.mem[590] reg});
        res.insert_or_assign("scratchpad.mem[591]reg", DumpEntry{scratchpad.mem[591] reg});
        res.insert_or_assign("scratchpad.mem[592]reg", DumpEntry{scratchpad.mem[592] reg});
        res.insert_or_assign("scratchpad.mem[593]reg", DumpEntry{scratchpad.mem[593] reg});
        res.insert_or_assign("scratchpad.mem[594]reg", DumpEntry{scratchpad.mem[594] reg});
        res.insert_or_assign("scratchpad.mem[595]reg", DumpEntry{scratchpad.mem[595] reg});
        res.insert_or_assign("scratchpad.mem[596]reg", DumpEntry{scratchpad.mem[596] reg});
        res.insert_or_assign("scratchpad.mem[597]reg", DumpEntry{scratchpad.mem[597] reg});
        res.insert_or_assign("scratchpad.mem[598]reg", DumpEntry{scratchpad.mem[598] reg});
        res.insert_or_assign("scratchpad.mem[599]reg", DumpEntry{scratchpad.mem[599] reg});
        res.insert_or_assign("scratchpad.mem[600]reg", DumpEntry{scratchpad.mem[600] reg});
        res.insert_or_assign("scratchpad.mem[601]reg", DumpEntry{scratchpad.mem[601] reg});
        res.insert_or_assign("scratchpad.mem[602]reg", DumpEntry{scratchpad.mem[602] reg});
        res.insert_or_assign("scratchpad.mem[603]reg", DumpEntry{scratchpad.mem[603] reg});
        res.insert_or_assign("scratchpad.mem[604]reg", DumpEntry{scratchpad.mem[604] reg});
        res.insert_or_assign("scratchpad.mem[605]reg", DumpEntry{scratchpad.mem[605] reg});
        res.insert_or_assign("scratchpad.mem[606]reg", DumpEntry{scratchpad.mem[606] reg});
        res.insert_or_assign("scratchpad.mem[607]reg", DumpEntry{scratchpad.mem[607] reg});
        res.insert_or_assign("scratchpad.mem[608]reg", DumpEntry{scratchpad.mem[608] reg});
        res.insert_or_assign("scratchpad.mem[609]reg", DumpEntry{scratchpad.mem[609] reg});
        res.insert_or_assign("scratchpad.mem[610]reg", DumpEntry{scratchpad.mem[610] reg});
        res.insert_or_assign("scratchpad.mem[611]reg", DumpEntry{scratchpad.mem[611] reg});
        res.insert_or_assign("scratchpad.mem[612]reg", DumpEntry{scratchpad.mem[612] reg});
        res.insert_or_assign("scratchpad.mem[613]reg", DumpEntry{scratchpad.mem[613] reg});
        res.insert_or_assign("scratchpad.mem[614]reg", DumpEntry{scratchpad.mem[614] reg});
        res.insert_or_assign("scratchpad.mem[615]reg", DumpEntry{scratchpad.mem[615] reg});
        res.insert_or_assign("scratchpad.mem[616]reg", DumpEntry{scratchpad.mem[616] reg});
        res.insert_or_assign("scratchpad.mem[617]reg", DumpEntry{scratchpad.mem[617] reg});
        res.insert_or_assign("scratchpad.mem[618]reg", DumpEntry{scratchpad.mem[618] reg});
        res.insert_or_assign("scratchpad.mem[619]reg", DumpEntry{scratchpad.mem[619] reg});
        res.insert_or_assign("scratchpad.mem[620]reg", DumpEntry{scratchpad.mem[620] reg});
        res.insert_or_assign("scratchpad.mem[621]reg", DumpEntry{scratchpad.mem[621] reg});
        res.insert_or_assign("scratchpad.mem[622]reg", DumpEntry{scratchpad.mem[622] reg});
        res.insert_or_assign("scratchpad.mem[623]reg", DumpEntry{scratchpad.mem[623] reg});
        res.insert_or_assign("scratchpad.mem[624]reg", DumpEntry{scratchpad.mem[624] reg});
        res.insert_or_assign("scratchpad.mem[625]reg", DumpEntry{scratchpad.mem[625] reg});
        res.insert_or_assign("scratchpad.mem[626]reg", DumpEntry{scratchpad.mem[626] reg});
        res.insert_or_assign("scratchpad.mem[627]reg", DumpEntry{scratchpad.mem[627] reg});
        res.insert_or_assign("scratchpad.mem[628]reg", DumpEntry{scratchpad.mem[628] reg});
        res.insert_or_assign("scratchpad.mem[629]reg", DumpEntry{scratchpad.mem[629] reg});
        res.insert_or_assign("scratchpad.mem[630]reg", DumpEntry{scratchpad.mem[630] reg});
        res.insert_or_assign("scratchpad.mem[631]reg", DumpEntry{scratchpad.mem[631] reg});
        res.insert_or_assign("scratchpad.mem[632]reg", DumpEntry{scratchpad.mem[632] reg});
        res.insert_or_assign("scratchpad.mem[633]reg", DumpEntry{scratchpad.mem[633] reg});
        res.insert_or_assign("scratchpad.mem[634]reg", DumpEntry{scratchpad.mem[634] reg});
        res.insert_or_assign("scratchpad.mem[635]reg", DumpEntry{scratchpad.mem[635] reg});
        res.insert_or_assign("scratchpad.mem[636]reg", DumpEntry{scratchpad.mem[636] reg});
        res.insert_or_assign("scratchpad.mem[637]reg", DumpEntry{scratchpad.mem[637] reg});
        res.insert_or_assign("scratchpad.mem[638]reg", DumpEntry{scratchpad.mem[638] reg});
        res.insert_or_assign("scratchpad.mem[639]reg", DumpEntry{scratchpad.mem[639] reg});
        res.insert_or_assign("scratchpad.mem[640]reg", DumpEntry{scratchpad.mem[640] reg});
        res.insert_or_assign("scratchpad.mem[641]reg", DumpEntry{scratchpad.mem[641] reg});
        res.insert_or_assign("scratchpad.mem[642]reg", DumpEntry{scratchpad.mem[642] reg});
        res.insert_or_assign("scratchpad.mem[643]reg", DumpEntry{scratchpad.mem[643] reg});
        res.insert_or_assign("scratchpad.mem[644]reg", DumpEntry{scratchpad.mem[644] reg});
        res.insert_or_assign("scratchpad.mem[645]reg", DumpEntry{scratchpad.mem[645] reg});
        res.insert_or_assign("scratchpad.mem[646]reg", DumpEntry{scratchpad.mem[646] reg});
        res.insert_or_assign("scratchpad.mem[647]reg", DumpEntry{scratchpad.mem[647] reg});
        res.insert_or_assign("scratchpad.mem[648]reg", DumpEntry{scratchpad.mem[648] reg});
        res.insert_or_assign("scratchpad.mem[649]reg", DumpEntry{scratchpad.mem[649] reg});
        res.insert_or_assign("scratchpad.mem[650]reg", DumpEntry{scratchpad.mem[650] reg});
        res.insert_or_assign("scratchpad.mem[651]reg", DumpEntry{scratchpad.mem[651] reg});
        res.insert_or_assign("scratchpad.mem[652]reg", DumpEntry{scratchpad.mem[652] reg});
        res.insert_or_assign("scratchpad.mem[653]reg", DumpEntry{scratchpad.mem[653] reg});
        res.insert_or_assign("scratchpad.mem[654]reg", DumpEntry{scratchpad.mem[654] reg});
        res.insert_or_assign("scratchpad.mem[655]reg", DumpEntry{scratchpad.mem[655] reg});
        res.insert_or_assign("scratchpad.mem[656]reg", DumpEntry{scratchpad.mem[656] reg});
        res.insert_or_assign("scratchpad.mem[657]reg", DumpEntry{scratchpad.mem[657] reg});
        res.insert_or_assign("scratchpad.mem[658]reg", DumpEntry{scratchpad.mem[658] reg});
        res.insert_or_assign("scratchpad.mem[659]reg", DumpEntry{scratchpad.mem[659] reg});
        res.insert_or_assign("scratchpad.mem[660]reg", DumpEntry{scratchpad.mem[660] reg});
        res.insert_or_assign("scratchpad.mem[661]reg", DumpEntry{scratchpad.mem[661] reg});
        res.insert_or_assign("scratchpad.mem[662]reg", DumpEntry{scratchpad.mem[662] reg});
        res.insert_or_assign("scratchpad.mem[663]reg", DumpEntry{scratchpad.mem[663] reg});
        res.insert_or_assign("scratchpad.mem[664]reg", DumpEntry{scratchpad.mem[664] reg});
        res.insert_or_assign("scratchpad.mem[665]reg", DumpEntry{scratchpad.mem[665] reg});
        res.insert_or_assign("scratchpad.mem[666]reg", DumpEntry{scratchpad.mem[666] reg});
        res.insert_or_assign("scratchpad.mem[667]reg", DumpEntry{scratchpad.mem[667] reg});
        res.insert_or_assign("scratchpad.mem[668]reg", DumpEntry{scratchpad.mem[668] reg});
        res.insert_or_assign("scratchpad.mem[669]reg", DumpEntry{scratchpad.mem[669] reg});
        res.insert_or_assign("scratchpad.mem[670]reg", DumpEntry{scratchpad.mem[670] reg});
        res.insert_or_assign("scratchpad.mem[671]reg", DumpEntry{scratchpad.mem[671] reg});
        res.insert_or_assign("scratchpad.mem[672]reg", DumpEntry{scratchpad.mem[672] reg});
        res.insert_or_assign("scratchpad.mem[673]reg", DumpEntry{scratchpad.mem[673] reg});
        res.insert_or_assign("scratchpad.mem[674]reg", DumpEntry{scratchpad.mem[674] reg});
        res.insert_or_assign("scratchpad.mem[675]reg", DumpEntry{scratchpad.mem[675] reg});
        res.insert_or_assign("scratchpad.mem[676]reg", DumpEntry{scratchpad.mem[676] reg});
        res.insert_or_assign("scratchpad.mem[677]reg", DumpEntry{scratchpad.mem[677] reg});
        res.insert_or_assign("scratchpad.mem[678]reg", DumpEntry{scratchpad.mem[678] reg});
        res.insert_or_assign("scratchpad.mem[679]reg", DumpEntry{scratchpad.mem[679] reg});
        res.insert_or_assign("scratchpad.mem[680]reg", DumpEntry{scratchpad.mem[680] reg});
        res.insert_or_assign("scratchpad.mem[681]reg", DumpEntry{scratchpad.mem[681] reg});
        res.insert_or_assign("scratchpad.mem[682]reg", DumpEntry{scratchpad.mem[682] reg});
        res.insert_or_assign("scratchpad.mem[683]reg", DumpEntry{scratchpad.mem[683] reg});
        res.insert_or_assign("scratchpad.mem[684]reg", DumpEntry{scratchpad.mem[684] reg});
        res.insert_or_assign("scratchpad.mem[685]reg", DumpEntry{scratchpad.mem[685] reg});
        res.insert_or_assign("scratchpad.mem[686]reg", DumpEntry{scratchpad.mem[686] reg});
        res.insert_or_assign("scratchpad.mem[687]reg", DumpEntry{scratchpad.mem[687] reg});
        res.insert_or_assign("scratchpad.mem[688]reg", DumpEntry{scratchpad.mem[688] reg});
        res.insert_or_assign("scratchpad.mem[689]reg", DumpEntry{scratchpad.mem[689] reg});
        res.insert_or_assign("scratchpad.mem[690]reg", DumpEntry{scratchpad.mem[690] reg});
        res.insert_or_assign("scratchpad.mem[691]reg", DumpEntry{scratchpad.mem[691] reg});
        res.insert_or_assign("scratchpad.mem[692]reg", DumpEntry{scratchpad.mem[692] reg});
        res.insert_or_assign("scratchpad.mem[693]reg", DumpEntry{scratchpad.mem[693] reg});
        res.insert_or_assign("scratchpad.mem[694]reg", DumpEntry{scratchpad.mem[694] reg});
        res.insert_or_assign("scratchpad.mem[695]reg", DumpEntry{scratchpad.mem[695] reg});
        res.insert_or_assign("scratchpad.mem[696]reg", DumpEntry{scratchpad.mem[696] reg});
        res.insert_or_assign("scratchpad.mem[697]reg", DumpEntry{scratchpad.mem[697] reg});
        res.insert_or_assign("scratchpad.mem[698]reg", DumpEntry{scratchpad.mem[698] reg});
        res.insert_or_assign("scratchpad.mem[699]reg", DumpEntry{scratchpad.mem[699] reg});
        res.insert_or_assign("scratchpad.mem[700]reg", DumpEntry{scratchpad.mem[700] reg});
        res.insert_or_assign("scratchpad.mem[701]reg", DumpEntry{scratchpad.mem[701] reg});
        res.insert_or_assign("scratchpad.mem[702]reg", DumpEntry{scratchpad.mem[702] reg});
        res.insert_or_assign("scratchpad.mem[703]reg", DumpEntry{scratchpad.mem[703] reg});
        res.insert_or_assign("scratchpad.mem[704]reg", DumpEntry{scratchpad.mem[704] reg});
        res.insert_or_assign("scratchpad.mem[705]reg", DumpEntry{scratchpad.mem[705] reg});
        res.insert_or_assign("scratchpad.mem[706]reg", DumpEntry{scratchpad.mem[706] reg});
        res.insert_or_assign("scratchpad.mem[707]reg", DumpEntry{scratchpad.mem[707] reg});
        res.insert_or_assign("scratchpad.mem[708]reg", DumpEntry{scratchpad.mem[708] reg});
        res.insert_or_assign("scratchpad.mem[709]reg", DumpEntry{scratchpad.mem[709] reg});
        res.insert_or_assign("scratchpad.mem[710]reg", DumpEntry{scratchpad.mem[710] reg});
        res.insert_or_assign("scratchpad.mem[711]reg", DumpEntry{scratchpad.mem[711] reg});
        res.insert_or_assign("scratchpad.mem[712]reg", DumpEntry{scratchpad.mem[712] reg});
        res.insert_or_assign("scratchpad.mem[713]reg", DumpEntry{scratchpad.mem[713] reg});
        res.insert_or_assign("scratchpad.mem[714]reg", DumpEntry{scratchpad.mem[714] reg});
        res.insert_or_assign("scratchpad.mem[715]reg", DumpEntry{scratchpad.mem[715] reg});
        res.insert_or_assign("scratchpad.mem[716]reg", DumpEntry{scratchpad.mem[716] reg});
        res.insert_or_assign("scratchpad.mem[717]reg", DumpEntry{scratchpad.mem[717] reg});
        res.insert_or_assign("scratchpad.mem[718]reg", DumpEntry{scratchpad.mem[718] reg});
        res.insert_or_assign("scratchpad.mem[719]reg", DumpEntry{scratchpad.mem[719] reg});
        res.insert_or_assign("scratchpad.mem[720]reg", DumpEntry{scratchpad.mem[720] reg});
        res.insert_or_assign("scratchpad.mem[721]reg", DumpEntry{scratchpad.mem[721] reg});
        res.insert_or_assign("scratchpad.mem[722]reg", DumpEntry{scratchpad.mem[722] reg});
        res.insert_or_assign("scratchpad.mem[723]reg", DumpEntry{scratchpad.mem[723] reg});
        res.insert_or_assign("scratchpad.mem[724]reg", DumpEntry{scratchpad.mem[724] reg});
        res.insert_or_assign("scratchpad.mem[725]reg", DumpEntry{scratchpad.mem[725] reg});
        res.insert_or_assign("scratchpad.mem[726]reg", DumpEntry{scratchpad.mem[726] reg});
        res.insert_or_assign("scratchpad.mem[727]reg", DumpEntry{scratchpad.mem[727] reg});
        res.insert_or_assign("scratchpad.mem[728]reg", DumpEntry{scratchpad.mem[728] reg});
        res.insert_or_assign("scratchpad.mem[729]reg", DumpEntry{scratchpad.mem[729] reg});
        res.insert_or_assign("scratchpad.mem[730]reg", DumpEntry{scratchpad.mem[730] reg});
        res.insert_or_assign("scratchpad.mem[731]reg", DumpEntry{scratchpad.mem[731] reg});
        res.insert_or_assign("scratchpad.mem[732]reg", DumpEntry{scratchpad.mem[732] reg});
        res.insert_or_assign("scratchpad.mem[733]reg", DumpEntry{scratchpad.mem[733] reg});
        res.insert_or_assign("scratchpad.mem[734]reg", DumpEntry{scratchpad.mem[734] reg});
        res.insert_or_assign("scratchpad.mem[735]reg", DumpEntry{scratchpad.mem[735] reg});
        res.insert_or_assign("scratchpad.mem[736]reg", DumpEntry{scratchpad.mem[736] reg});
        res.insert_or_assign("scratchpad.mem[737]reg", DumpEntry{scratchpad.mem[737] reg});
        res.insert_or_assign("scratchpad.mem[738]reg", DumpEntry{scratchpad.mem[738] reg});
        res.insert_or_assign("scratchpad.mem[739]reg", DumpEntry{scratchpad.mem[739] reg});
        res.insert_or_assign("scratchpad.mem[740]reg", DumpEntry{scratchpad.mem[740] reg});
        res.insert_or_assign("scratchpad.mem[741]reg", DumpEntry{scratchpad.mem[741] reg});
        res.insert_or_assign("scratchpad.mem[742]reg", DumpEntry{scratchpad.mem[742] reg});
        res.insert_or_assign("scratchpad.mem[743]reg", DumpEntry{scratchpad.mem[743] reg});
        res.insert_or_assign("scratchpad.mem[744]reg", DumpEntry{scratchpad.mem[744] reg});
        res.insert_or_assign("scratchpad.mem[745]reg", DumpEntry{scratchpad.mem[745] reg});
        res.insert_or_assign("scratchpad.mem[746]reg", DumpEntry{scratchpad.mem[746] reg});
        res.insert_or_assign("scratchpad.mem[747]reg", DumpEntry{scratchpad.mem[747] reg});
        res.insert_or_assign("scratchpad.mem[748]reg", DumpEntry{scratchpad.mem[748] reg});
        res.insert_or_assign("scratchpad.mem[749]reg", DumpEntry{scratchpad.mem[749] reg});
        res.insert_or_assign("scratchpad.mem[750]reg", DumpEntry{scratchpad.mem[750] reg});
        res.insert_or_assign("scratchpad.mem[751]reg", DumpEntry{scratchpad.mem[751] reg});
        res.insert_or_assign("scratchpad.mem[752]reg", DumpEntry{scratchpad.mem[752] reg});
        res.insert_or_assign("scratchpad.mem[753]reg", DumpEntry{scratchpad.mem[753] reg});
        res.insert_or_assign("scratchpad.mem[754]reg", DumpEntry{scratchpad.mem[754] reg});
        res.insert_or_assign("scratchpad.mem[755]reg", DumpEntry{scratchpad.mem[755] reg});
        res.insert_or_assign("scratchpad.mem[756]reg", DumpEntry{scratchpad.mem[756] reg});
        res.insert_or_assign("scratchpad.mem[757]reg", DumpEntry{scratchpad.mem[757] reg});
        res.insert_or_assign("scratchpad.mem[758]reg", DumpEntry{scratchpad.mem[758] reg});
        res.insert_or_assign("scratchpad.mem[759]reg", DumpEntry{scratchpad.mem[759] reg});
        res.insert_or_assign("scratchpad.mem[760]reg", DumpEntry{scratchpad.mem[760] reg});
        res.insert_or_assign("scratchpad.mem[761]reg", DumpEntry{scratchpad.mem[761] reg});
        res.insert_or_assign("scratchpad.mem[762]reg", DumpEntry{scratchpad.mem[762] reg});
        res.insert_or_assign("scratchpad.mem[763]reg", DumpEntry{scratchpad.mem[763] reg});
        res.insert_or_assign("scratchpad.mem[764]reg", DumpEntry{scratchpad.mem[764] reg});
        res.insert_or_assign("scratchpad.mem[765]reg", DumpEntry{scratchpad.mem[765] reg});
        res.insert_or_assign("scratchpad.mem[766]reg", DumpEntry{scratchpad.mem[766] reg});
        res.insert_or_assign("scratchpad.mem[767]reg", DumpEntry{scratchpad.mem[767] reg});
        res.insert_or_assign("scratchpad.mem[768]reg", DumpEntry{scratchpad.mem[768] reg});
        res.insert_or_assign("scratchpad.mem[769]reg", DumpEntry{scratchpad.mem[769] reg});
        res.insert_or_assign("scratchpad.mem[770]reg", DumpEntry{scratchpad.mem[770] reg});
        res.insert_or_assign("scratchpad.mem[771]reg", DumpEntry{scratchpad.mem[771] reg});
        res.insert_or_assign("scratchpad.mem[772]reg", DumpEntry{scratchpad.mem[772] reg});
        res.insert_or_assign("scratchpad.mem[773]reg", DumpEntry{scratchpad.mem[773] reg});
        res.insert_or_assign("scratchpad.mem[774]reg", DumpEntry{scratchpad.mem[774] reg});
        res.insert_or_assign("scratchpad.mem[775]reg", DumpEntry{scratchpad.mem[775] reg});
        res.insert_or_assign("scratchpad.mem[776]reg", DumpEntry{scratchpad.mem[776] reg});
        res.insert_or_assign("scratchpad.mem[777]reg", DumpEntry{scratchpad.mem[777] reg});
        res.insert_or_assign("scratchpad.mem[778]reg", DumpEntry{scratchpad.mem[778] reg});
        res.insert_or_assign("scratchpad.mem[779]reg", DumpEntry{scratchpad.mem[779] reg});
        res.insert_or_assign("scratchpad.mem[780]reg", DumpEntry{scratchpad.mem[780] reg});
        res.insert_or_assign("scratchpad.mem[781]reg", DumpEntry{scratchpad.mem[781] reg});
        res.insert_or_assign("scratchpad.mem[782]reg", DumpEntry{scratchpad.mem[782] reg});
        res.insert_or_assign("scratchpad.mem[783]reg", DumpEntry{scratchpad.mem[783] reg});
        res.insert_or_assign("scratchpad.mem[784]reg", DumpEntry{scratchpad.mem[784] reg});
        res.insert_or_assign("scratchpad.mem[785]reg", DumpEntry{scratchpad.mem[785] reg});
        res.insert_or_assign("scratchpad.mem[786]reg", DumpEntry{scratchpad.mem[786] reg});
        res.insert_or_assign("scratchpad.mem[787]reg", DumpEntry{scratchpad.mem[787] reg});
        res.insert_or_assign("scratchpad.mem[788]reg", DumpEntry{scratchpad.mem[788] reg});
        res.insert_or_assign("scratchpad.mem[789]reg", DumpEntry{scratchpad.mem[789] reg});
        res.insert_or_assign("scratchpad.mem[790]reg", DumpEntry{scratchpad.mem[790] reg});
        res.insert_or_assign("scratchpad.mem[791]reg", DumpEntry{scratchpad.mem[791] reg});
        res.insert_or_assign("scratchpad.mem[792]reg", DumpEntry{scratchpad.mem[792] reg});
        res.insert_or_assign("scratchpad.mem[793]reg", DumpEntry{scratchpad.mem[793] reg});
        res.insert_or_assign("scratchpad.mem[794]reg", DumpEntry{scratchpad.mem[794] reg});
        res.insert_or_assign("scratchpad.mem[795]reg", DumpEntry{scratchpad.mem[795] reg});
        res.insert_or_assign("scratchpad.mem[796]reg", DumpEntry{scratchpad.mem[796] reg});
        res.insert_or_assign("scratchpad.mem[797]reg", DumpEntry{scratchpad.mem[797] reg});
        res.insert_or_assign("scratchpad.mem[798]reg", DumpEntry{scratchpad.mem[798] reg});
        res.insert_or_assign("scratchpad.mem[799]reg", DumpEntry{scratchpad.mem[799] reg});
        res.insert_or_assign("scratchpad.mem[800]reg", DumpEntry{scratchpad.mem[800] reg});
        res.insert_or_assign("scratchpad.mem[801]reg", DumpEntry{scratchpad.mem[801] reg});
        res.insert_or_assign("scratchpad.mem[802]reg", DumpEntry{scratchpad.mem[802] reg});
        res.insert_or_assign("scratchpad.mem[803]reg", DumpEntry{scratchpad.mem[803] reg});
        res.insert_or_assign("scratchpad.mem[804]reg", DumpEntry{scratchpad.mem[804] reg});
        res.insert_or_assign("scratchpad.mem[805]reg", DumpEntry{scratchpad.mem[805] reg});
        res.insert_or_assign("scratchpad.mem[806]reg", DumpEntry{scratchpad.mem[806] reg});
        res.insert_or_assign("scratchpad.mem[807]reg", DumpEntry{scratchpad.mem[807] reg});
        res.insert_or_assign("scratchpad.mem[808]reg", DumpEntry{scratchpad.mem[808] reg});
        res.insert_or_assign("scratchpad.mem[809]reg", DumpEntry{scratchpad.mem[809] reg});
        res.insert_or_assign("scratchpad.mem[810]reg", DumpEntry{scratchpad.mem[810] reg});
        res.insert_or_assign("scratchpad.mem[811]reg", DumpEntry{scratchpad.mem[811] reg});
        res.insert_or_assign("scratchpad.mem[812]reg", DumpEntry{scratchpad.mem[812] reg});
        res.insert_or_assign("scratchpad.mem[813]reg", DumpEntry{scratchpad.mem[813] reg});
        res.insert_or_assign("scratchpad.mem[814]reg", DumpEntry{scratchpad.mem[814] reg});
        res.insert_or_assign("scratchpad.mem[815]reg", DumpEntry{scratchpad.mem[815] reg});
        res.insert_or_assign("scratchpad.mem[816]reg", DumpEntry{scratchpad.mem[816] reg});
        res.insert_or_assign("scratchpad.mem[817]reg", DumpEntry{scratchpad.mem[817] reg});
        res.insert_or_assign("scratchpad.mem[818]reg", DumpEntry{scratchpad.mem[818] reg});
        res.insert_or_assign("scratchpad.mem[819]reg", DumpEntry{scratchpad.mem[819] reg});
        res.insert_or_assign("scratchpad.mem[820]reg", DumpEntry{scratchpad.mem[820] reg});
        res.insert_or_assign("scratchpad.mem[821]reg", DumpEntry{scratchpad.mem[821] reg});
        res.insert_or_assign("scratchpad.mem[822]reg", DumpEntry{scratchpad.mem[822] reg});
        res.insert_or_assign("scratchpad.mem[823]reg", DumpEntry{scratchpad.mem[823] reg});
        res.insert_or_assign("scratchpad.mem[824]reg", DumpEntry{scratchpad.mem[824] reg});
        res.insert_or_assign("scratchpad.mem[825]reg", DumpEntry{scratchpad.mem[825] reg});
        res.insert_or_assign("scratchpad.mem[826]reg", DumpEntry{scratchpad.mem[826] reg});
        res.insert_or_assign("scratchpad.mem[827]reg", DumpEntry{scratchpad.mem[827] reg});
        res.insert_or_assign("scratchpad.mem[828]reg", DumpEntry{scratchpad.mem[828] reg});
        res.insert_or_assign("scratchpad.mem[829]reg", DumpEntry{scratchpad.mem[829] reg});
        res.insert_or_assign("scratchpad.mem[830]reg", DumpEntry{scratchpad.mem[830] reg});
        res.insert_or_assign("scratchpad.mem[831]reg", DumpEntry{scratchpad.mem[831] reg});
        res.insert_or_assign("scratchpad.mem[832]reg", DumpEntry{scratchpad.mem[832] reg});
        res.insert_or_assign("scratchpad.mem[833]reg", DumpEntry{scratchpad.mem[833] reg});
        res.insert_or_assign("scratchpad.mem[834]reg", DumpEntry{scratchpad.mem[834] reg});
        res.insert_or_assign("scratchpad.mem[835]reg", DumpEntry{scratchpad.mem[835] reg});
        res.insert_or_assign("scratchpad.mem[836]reg", DumpEntry{scratchpad.mem[836] reg});
        res.insert_or_assign("scratchpad.mem[837]reg", DumpEntry{scratchpad.mem[837] reg});
        res.insert_or_assign("scratchpad.mem[838]reg", DumpEntry{scratchpad.mem[838] reg});
        res.insert_or_assign("scratchpad.mem[839]reg", DumpEntry{scratchpad.mem[839] reg});
        res.insert_or_assign("scratchpad.mem[840]reg", DumpEntry{scratchpad.mem[840] reg});
        res.insert_or_assign("scratchpad.mem[841]reg", DumpEntry{scratchpad.mem[841] reg});
        res.insert_or_assign("scratchpad.mem[842]reg", DumpEntry{scratchpad.mem[842] reg});
        res.insert_or_assign("scratchpad.mem[843]reg", DumpEntry{scratchpad.mem[843] reg});
        res.insert_or_assign("scratchpad.mem[844]reg", DumpEntry{scratchpad.mem[844] reg});
        res.insert_or_assign("scratchpad.mem[845]reg", DumpEntry{scratchpad.mem[845] reg});
        res.insert_or_assign("scratchpad.mem[846]reg", DumpEntry{scratchpad.mem[846] reg});
        res.insert_or_assign("scratchpad.mem[847]reg", DumpEntry{scratchpad.mem[847] reg});
        res.insert_or_assign("scratchpad.mem[848]reg", DumpEntry{scratchpad.mem[848] reg});
        res.insert_or_assign("scratchpad.mem[849]reg", DumpEntry{scratchpad.mem[849] reg});
        res.insert_or_assign("scratchpad.mem[850]reg", DumpEntry{scratchpad.mem[850] reg});
        res.insert_or_assign("scratchpad.mem[851]reg", DumpEntry{scratchpad.mem[851] reg});
        res.insert_or_assign("scratchpad.mem[852]reg", DumpEntry{scratchpad.mem[852] reg});
        res.insert_or_assign("scratchpad.mem[853]reg", DumpEntry{scratchpad.mem[853] reg});
        res.insert_or_assign("scratchpad.mem[854]reg", DumpEntry{scratchpad.mem[854] reg});
        res.insert_or_assign("scratchpad.mem[855]reg", DumpEntry{scratchpad.mem[855] reg});
        res.insert_or_assign("scratchpad.mem[856]reg", DumpEntry{scratchpad.mem[856] reg});
        res.insert_or_assign("scratchpad.mem[857]reg", DumpEntry{scratchpad.mem[857] reg});
        res.insert_or_assign("scratchpad.mem[858]reg", DumpEntry{scratchpad.mem[858] reg});
        res.insert_or_assign("scratchpad.mem[859]reg", DumpEntry{scratchpad.mem[859] reg});
        res.insert_or_assign("scratchpad.mem[860]reg", DumpEntry{scratchpad.mem[860] reg});
        res.insert_or_assign("scratchpad.mem[861]reg", DumpEntry{scratchpad.mem[861] reg});
        res.insert_or_assign("scratchpad.mem[862]reg", DumpEntry{scratchpad.mem[862] reg});
        res.insert_or_assign("scratchpad.mem[863]reg", DumpEntry{scratchpad.mem[863] reg});
        res.insert_or_assign("scratchpad.mem[864]reg", DumpEntry{scratchpad.mem[864] reg});
        res.insert_or_assign("scratchpad.mem[865]reg", DumpEntry{scratchpad.mem[865] reg});
        res.insert_or_assign("scratchpad.mem[866]reg", DumpEntry{scratchpad.mem[866] reg});
        res.insert_or_assign("scratchpad.mem[867]reg", DumpEntry{scratchpad.mem[867] reg});
        res.insert_or_assign("scratchpad.mem[868]reg", DumpEntry{scratchpad.mem[868] reg});
        res.insert_or_assign("scratchpad.mem[869]reg", DumpEntry{scratchpad.mem[869] reg});
        res.insert_or_assign("scratchpad.mem[870]reg", DumpEntry{scratchpad.mem[870] reg});
        res.insert_or_assign("scratchpad.mem[871]reg", DumpEntry{scratchpad.mem[871] reg});
        res.insert_or_assign("scratchpad.mem[872]reg", DumpEntry{scratchpad.mem[872] reg});
        res.insert_or_assign("scratchpad.mem[873]reg", DumpEntry{scratchpad.mem[873] reg});
        res.insert_or_assign("scratchpad.mem[874]reg", DumpEntry{scratchpad.mem[874] reg});
        res.insert_or_assign("scratchpad.mem[875]reg", DumpEntry{scratchpad.mem[875] reg});
        res.insert_or_assign("scratchpad.mem[876]reg", DumpEntry{scratchpad.mem[876] reg});
        res.insert_or_assign("scratchpad.mem[877]reg", DumpEntry{scratchpad.mem[877] reg});
        res.insert_or_assign("scratchpad.mem[878]reg", DumpEntry{scratchpad.mem[878] reg});
        res.insert_or_assign("scratchpad.mem[879]reg", DumpEntry{scratchpad.mem[879] reg});
        res.insert_or_assign("scratchpad.mem[880]reg", DumpEntry{scratchpad.mem[880] reg});
        res.insert_or_assign("scratchpad.mem[881]reg", DumpEntry{scratchpad.mem[881] reg});
        res.insert_or_assign("scratchpad.mem[882]reg", DumpEntry{scratchpad.mem[882] reg});
        res.insert_or_assign("scratchpad.mem[883]reg", DumpEntry{scratchpad.mem[883] reg});
        res.insert_or_assign("scratchpad.mem[884]reg", DumpEntry{scratchpad.mem[884] reg});
        res.insert_or_assign("scratchpad.mem[885]reg", DumpEntry{scratchpad.mem[885] reg});
        res.insert_or_assign("scratchpad.mem[886]reg", DumpEntry{scratchpad.mem[886] reg});
        res.insert_or_assign("scratchpad.mem[887]reg", DumpEntry{scratchpad.mem[887] reg});
        res.insert_or_assign("scratchpad.mem[888]reg", DumpEntry{scratchpad.mem[888] reg});
        res.insert_or_assign("scratchpad.mem[889]reg", DumpEntry{scratchpad.mem[889] reg});
        res.insert_or_assign("scratchpad.mem[890]reg", DumpEntry{scratchpad.mem[890] reg});
        res.insert_or_assign("scratchpad.mem[891]reg", DumpEntry{scratchpad.mem[891] reg});
        res.insert_or_assign("scratchpad.mem[892]reg", DumpEntry{scratchpad.mem[892] reg});
        res.insert_or_assign("scratchpad.mem[893]reg", DumpEntry{scratchpad.mem[893] reg});
        res.insert_or_assign("scratchpad.mem[894]reg", DumpEntry{scratchpad.mem[894] reg});
        res.insert_or_assign("scratchpad.mem[895]reg", DumpEntry{scratchpad.mem[895] reg});
        res.insert_or_assign("scratchpad.mem[896]reg", DumpEntry{scratchpad.mem[896] reg});
        res.insert_or_assign("scratchpad.mem[897]reg", DumpEntry{scratchpad.mem[897] reg});
        res.insert_or_assign("scratchpad.mem[898]reg", DumpEntry{scratchpad.mem[898] reg});
        res.insert_or_assign("scratchpad.mem[899]reg", DumpEntry{scratchpad.mem[899] reg});
        res.insert_or_assign("scratchpad.mem[900]reg", DumpEntry{scratchpad.mem[900] reg});
        res.insert_or_assign("scratchpad.mem[901]reg", DumpEntry{scratchpad.mem[901] reg});
        res.insert_or_assign("scratchpad.mem[902]reg", DumpEntry{scratchpad.mem[902] reg});
        res.insert_or_assign("scratchpad.mem[903]reg", DumpEntry{scratchpad.mem[903] reg});
        res.insert_or_assign("scratchpad.mem[904]reg", DumpEntry{scratchpad.mem[904] reg});
        res.insert_or_assign("scratchpad.mem[905]reg", DumpEntry{scratchpad.mem[905] reg});
        res.insert_or_assign("scratchpad.mem[906]reg", DumpEntry{scratchpad.mem[906] reg});
        res.insert_or_assign("scratchpad.mem[907]reg", DumpEntry{scratchpad.mem[907] reg});
        res.insert_or_assign("scratchpad.mem[908]reg", DumpEntry{scratchpad.mem[908] reg});
        res.insert_or_assign("scratchpad.mem[909]reg", DumpEntry{scratchpad.mem[909] reg});
        res.insert_or_assign("scratchpad.mem[910]reg", DumpEntry{scratchpad.mem[910] reg});
        res.insert_or_assign("scratchpad.mem[911]reg", DumpEntry{scratchpad.mem[911] reg});
        res.insert_or_assign("scratchpad.mem[912]reg", DumpEntry{scratchpad.mem[912] reg});
        res.insert_or_assign("scratchpad.mem[913]reg", DumpEntry{scratchpad.mem[913] reg});
        res.insert_or_assign("scratchpad.mem[914]reg", DumpEntry{scratchpad.mem[914] reg});
        res.insert_or_assign("scratchpad.mem[915]reg", DumpEntry{scratchpad.mem[915] reg});
        res.insert_or_assign("scratchpad.mem[916]reg", DumpEntry{scratchpad.mem[916] reg});
        res.insert_or_assign("scratchpad.mem[917]reg", DumpEntry{scratchpad.mem[917] reg});
        res.insert_or_assign("scratchpad.mem[918]reg", DumpEntry{scratchpad.mem[918] reg});
        res.insert_or_assign("scratchpad.mem[919]reg", DumpEntry{scratchpad.mem[919] reg});
        res.insert_or_assign("scratchpad.mem[920]reg", DumpEntry{scratchpad.mem[920] reg});
        res.insert_or_assign("scratchpad.mem[921]reg", DumpEntry{scratchpad.mem[921] reg});
        res.insert_or_assign("scratchpad.mem[922]reg", DumpEntry{scratchpad.mem[922] reg});
        res.insert_or_assign("scratchpad.mem[923]reg", DumpEntry{scratchpad.mem[923] reg});
        res.insert_or_assign("scratchpad.mem[924]reg", DumpEntry{scratchpad.mem[924] reg});
        res.insert_or_assign("scratchpad.mem[925]reg", DumpEntry{scratchpad.mem[925] reg});
        res.insert_or_assign("scratchpad.mem[926]reg", DumpEntry{scratchpad.mem[926] reg});
        res.insert_or_assign("scratchpad.mem[927]reg", DumpEntry{scratchpad.mem[927] reg});
        res.insert_or_assign("scratchpad.mem[928]reg", DumpEntry{scratchpad.mem[928] reg});
        res.insert_or_assign("scratchpad.mem[929]reg", DumpEntry{scratchpad.mem[929] reg});
        res.insert_or_assign("scratchpad.mem[930]reg", DumpEntry{scratchpad.mem[930] reg});
        res.insert_or_assign("scratchpad.mem[931]reg", DumpEntry{scratchpad.mem[931] reg});
        res.insert_or_assign("scratchpad.mem[932]reg", DumpEntry{scratchpad.mem[932] reg});
        res.insert_or_assign("scratchpad.mem[933]reg", DumpEntry{scratchpad.mem[933] reg});
        res.insert_or_assign("scratchpad.mem[934]reg", DumpEntry{scratchpad.mem[934] reg});
        res.insert_or_assign("scratchpad.mem[935]reg", DumpEntry{scratchpad.mem[935] reg});
        res.insert_or_assign("scratchpad.mem[936]reg", DumpEntry{scratchpad.mem[936] reg});
        res.insert_or_assign("scratchpad.mem[937]reg", DumpEntry{scratchpad.mem[937] reg});
        res.insert_or_assign("scratchpad.mem[938]reg", DumpEntry{scratchpad.mem[938] reg});
        res.insert_or_assign("scratchpad.mem[939]reg", DumpEntry{scratchpad.mem[939] reg});
        res.insert_or_assign("scratchpad.mem[940]reg", DumpEntry{scratchpad.mem[940] reg});
        res.insert_or_assign("scratchpad.mem[941]reg", DumpEntry{scratchpad.mem[941] reg});
        res.insert_or_assign("scratchpad.mem[942]reg", DumpEntry{scratchpad.mem[942] reg});
        res.insert_or_assign("scratchpad.mem[943]reg", DumpEntry{scratchpad.mem[943] reg});
        res.insert_or_assign("scratchpad.mem[944]reg", DumpEntry{scratchpad.mem[944] reg});
        res.insert_or_assign("scratchpad.mem[945]reg", DumpEntry{scratchpad.mem[945] reg});
        res.insert_or_assign("scratchpad.mem[946]reg", DumpEntry{scratchpad.mem[946] reg});
        res.insert_or_assign("scratchpad.mem[947]reg", DumpEntry{scratchpad.mem[947] reg});
        res.insert_or_assign("scratchpad.mem[948]reg", DumpEntry{scratchpad.mem[948] reg});
        res.insert_or_assign("scratchpad.mem[949]reg", DumpEntry{scratchpad.mem[949] reg});
        res.insert_or_assign("scratchpad.mem[950]reg", DumpEntry{scratchpad.mem[950] reg});
        res.insert_or_assign("scratchpad.mem[951]reg", DumpEntry{scratchpad.mem[951] reg});
        res.insert_or_assign("scratchpad.mem[952]reg", DumpEntry{scratchpad.mem[952] reg});
        res.insert_or_assign("scratchpad.mem[953]reg", DumpEntry{scratchpad.mem[953] reg});
        res.insert_or_assign("scratchpad.mem[954]reg", DumpEntry{scratchpad.mem[954] reg});
        res.insert_or_assign("scratchpad.mem[955]reg", DumpEntry{scratchpad.mem[955] reg});
        res.insert_or_assign("scratchpad.mem[956]reg", DumpEntry{scratchpad.mem[956] reg});
        res.insert_or_assign("scratchpad.mem[957]reg", DumpEntry{scratchpad.mem[957] reg});
        res.insert_or_assign("scratchpad.mem[958]reg", DumpEntry{scratchpad.mem[958] reg});
        res.insert_or_assign("scratchpad.mem[959]reg", DumpEntry{scratchpad.mem[959] reg});
        res.insert_or_assign("scratchpad.mem[960]reg", DumpEntry{scratchpad.mem[960] reg});
        res.insert_or_assign("scratchpad.mem[961]reg", DumpEntry{scratchpad.mem[961] reg});
        res.insert_or_assign("scratchpad.mem[962]reg", DumpEntry{scratchpad.mem[962] reg});
        res.insert_or_assign("scratchpad.mem[963]reg", DumpEntry{scratchpad.mem[963] reg});
        res.insert_or_assign("scratchpad.mem[964]reg", DumpEntry{scratchpad.mem[964] reg});
        res.insert_or_assign("scratchpad.mem[965]reg", DumpEntry{scratchpad.mem[965] reg});
        res.insert_or_assign("scratchpad.mem[966]reg", DumpEntry{scratchpad.mem[966] reg});
        res.insert_or_assign("scratchpad.mem[967]reg", DumpEntry{scratchpad.mem[967] reg});
        res.insert_or_assign("scratchpad.mem[968]reg", DumpEntry{scratchpad.mem[968] reg});
        res.insert_or_assign("scratchpad.mem[969]reg", DumpEntry{scratchpad.mem[969] reg});
        res.insert_or_assign("scratchpad.mem[970]reg", DumpEntry{scratchpad.mem[970] reg});
        res.insert_or_assign("scratchpad.mem[971]reg", DumpEntry{scratchpad.mem[971] reg});
        res.insert_or_assign("scratchpad.mem[972]reg", DumpEntry{scratchpad.mem[972] reg});
        res.insert_or_assign("scratchpad.mem[973]reg", DumpEntry{scratchpad.mem[973] reg});
        res.insert_or_assign("scratchpad.mem[974]reg", DumpEntry{scratchpad.mem[974] reg});
        res.insert_or_assign("scratchpad.mem[975]reg", DumpEntry{scratchpad.mem[975] reg});
        res.insert_or_assign("scratchpad.mem[976]reg", DumpEntry{scratchpad.mem[976] reg});
        res.insert_or_assign("scratchpad.mem[977]reg", DumpEntry{scratchpad.mem[977] reg});
        res.insert_or_assign("scratchpad.mem[978]reg", DumpEntry{scratchpad.mem[978] reg});
        res.insert_or_assign("scratchpad.mem[979]reg", DumpEntry{scratchpad.mem[979] reg});
        res.insert_or_assign("scratchpad.mem[980]reg", DumpEntry{scratchpad.mem[980] reg});
        res.insert_or_assign("scratchpad.mem[981]reg", DumpEntry{scratchpad.mem[981] reg});
        res.insert_or_assign("scratchpad.mem[982]reg", DumpEntry{scratchpad.mem[982] reg});
        res.insert_or_assign("scratchpad.mem[983]reg", DumpEntry{scratchpad.mem[983] reg});
        res.insert_or_assign("scratchpad.mem[984]reg", DumpEntry{scratchpad.mem[984] reg});
        res.insert_or_assign("scratchpad.mem[985]reg", DumpEntry{scratchpad.mem[985] reg});
        res.insert_or_assign("scratchpad.mem[986]reg", DumpEntry{scratchpad.mem[986] reg});
        res.insert_or_assign("scratchpad.mem[987]reg", DumpEntry{scratchpad.mem[987] reg});
        res.insert_or_assign("scratchpad.mem[988]reg", DumpEntry{scratchpad.mem[988] reg});
        res.insert_or_assign("scratchpad.mem[989]reg", DumpEntry{scratchpad.mem[989] reg});
        res.insert_or_assign("scratchpad.mem[990]reg", DumpEntry{scratchpad.mem[990] reg});
        res.insert_or_assign("scratchpad.mem[991]reg", DumpEntry{scratchpad.mem[991] reg});
        res.insert_or_assign("scratchpad.mem[992]reg", DumpEntry{scratchpad.mem[992] reg});
        res.insert_or_assign("scratchpad.mem[993]reg", DumpEntry{scratchpad.mem[993] reg});
        res.insert_or_assign("scratchpad.mem[994]reg", DumpEntry{scratchpad.mem[994] reg});
        res.insert_or_assign("scratchpad.mem[995]reg", DumpEntry{scratchpad.mem[995] reg});
        res.insert_or_assign("scratchpad.mem[996]reg", DumpEntry{scratchpad.mem[996] reg});
        res.insert_or_assign("scratchpad.mem[997]reg", DumpEntry{scratchpad.mem[997] reg});
        res.insert_or_assign("scratchpad.mem[998]reg", DumpEntry{scratchpad.mem[998] reg});
        res.insert_or_assign("scratchpad.mem[999]reg", DumpEntry{scratchpad.mem[999] reg});
        res.insert_or_assign("scratchpad.mem[1000]reg", DumpEntry{scratchpad.mem[1000] reg});
        res.insert_or_assign("scratchpad.mem[1001]reg", DumpEntry{scratchpad.mem[1001] reg});
        res.insert_or_assign("scratchpad.mem[1002]reg", DumpEntry{scratchpad.mem[1002] reg});
        res.insert_or_assign("scratchpad.mem[1003]reg", DumpEntry{scratchpad.mem[1003] reg});
        res.insert_or_assign("scratchpad.mem[1004]reg", DumpEntry{scratchpad.mem[1004] reg});
        res.insert_or_assign("scratchpad.mem[1005]reg", DumpEntry{scratchpad.mem[1005] reg});
        res.insert_or_assign("scratchpad.mem[1006]reg", DumpEntry{scratchpad.mem[1006] reg});
        res.insert_or_assign("scratchpad.mem[1007]reg", DumpEntry{scratchpad.mem[1007] reg});
        res.insert_or_assign("scratchpad.mem[1008]reg", DumpEntry{scratchpad.mem[1008] reg});
        res.insert_or_assign("scratchpad.mem[1009]reg", DumpEntry{scratchpad.mem[1009] reg});
        res.insert_or_assign("scratchpad.mem[1010]reg", DumpEntry{scratchpad.mem[1010] reg});
        res.insert_or_assign("scratchpad.mem[1011]reg", DumpEntry{scratchpad.mem[1011] reg});
        res.insert_or_assign("scratchpad.mem[1012]reg", DumpEntry{scratchpad.mem[1012] reg});
        res.insert_or_assign("scratchpad.mem[1013]reg", DumpEntry{scratchpad.mem[1013] reg});
        res.insert_or_assign("scratchpad.mem[1014]reg", DumpEntry{scratchpad.mem[1014] reg});
        res.insert_or_assign("scratchpad.mem[1015]reg", DumpEntry{scratchpad.mem[1015] reg});
        res.insert_or_assign("scratchpad.mem[1016]reg", DumpEntry{scratchpad.mem[1016] reg});
        res.insert_or_assign("scratchpad.mem[1017]reg", DumpEntry{scratchpad.mem[1017] reg});
        res.insert_or_assign("scratchpad.mem[1018]reg", DumpEntry{scratchpad.mem[1018] reg});
        res.insert_or_assign("scratchpad.mem[1019]reg", DumpEntry{scratchpad.mem[1019] reg});
        res.insert_or_assign("scratchpad.mem[1020]reg", DumpEntry{scratchpad.mem[1020] reg});
        res.insert_or_assign("scratchpad.mem[1021]reg", DumpEntry{scratchpad.mem[1021] reg});
        res.insert_or_assign("scratchpad.mem[1022]reg", DumpEntry{scratchpad.mem[1022] reg});
        res.insert_or_assign("scratchpad.mem[1023]reg", DumpEntry{scratchpad.mem[1023] reg});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::PwmVrefHeater`
    //!
    //! @param pwmVrefHeater A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwmVrefHeater
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::PwmVrefHeater& pwmVrefHeater)
    {
        DumpMap res{pwmVrefHeater.base()};
        res.insert_or_assign("pwmVrefHeater.ctrl", DumpEntry{pwmVrefHeater.ctrl});
        res.insert_or_assign("pwmVrefHeater.ctrl.enable", DumpEntry{pwmVrefHeater.ctrl.enable});
        res.insert_or_assign("pwmVrefHeater.ctrl.reset", DumpEntry{pwmVrefHeater.ctrl.reset});
        res.insert_or_assign("pwmVrefHeater.carrierBits", DumpEntry{pwmVrefHeater.carrierBits});
        res.insert_or_assign("pwmVrefHeater.deadtimeBits", DumpEntry{pwmVrefHeater.deadtimeBits});
        res.insert_or_assign("pwmVrefHeater.config", DumpEntry{pwmVrefHeater.config});
        res.insert_or_assign("pwmVrefHeater.config.updateType", DumpEntry{pwmVrefHeater.config.updateType});
        res.insert_or_assign("pwmVrefHeater.config.enablePwmCheck", DumpEntry{pwmVrefHeater.config.enablePwmCheck});
        res.insert_or_assign("pwmVrefHeater.config.enableStCheck", DumpEntry{pwmVrefHeater.config.enableStCheck});
        res.insert_or_assign("pwmVrefHeater.config.enableValueCheck", DumpEntry{pwmVrefHeater.config.enableValueCheck});
        res.insert_or_assign("pwmVrefHeater.config.bypassDeadtime", DumpEntry{pwmVrefHeater.config.bypassDeadtime});
        res.insert_or_assign("pwmVrefHeater.config.disableA", DumpEntry{pwmVrefHeater.config.disableA});
        res.insert_or_assign("pwmVrefHeater.config.disableB", DumpEntry{pwmVrefHeater.config.disableB});
        res.insert_or_assign("pwmVrefHeater.config.invert", DumpEntry{pwmVrefHeater.config.invert});
        res.insert_or_assign("pwmVrefHeater.config.decoupleCc1", DumpEntry{pwmVrefHeater.config.decoupleCc1});
        res.insert_or_assign("pwmVrefHeater.cc0Sc", DumpEntry{pwmVrefHeater.cc0Sc});
        res.insert_or_assign("pwmVrefHeater.cc1Sc", DumpEntry{pwmVrefHeater.cc1Sc});
        res.insert_or_assign("pwmVrefHeater.ctrhSc", DumpEntry{pwmVrefHeater.ctrhSc});
        res.insert_or_assign("pwmVrefHeater.deadtimeSc", DumpEntry{pwmVrefHeater.deadtimeSc});
        res.insert_or_assign("pwmVrefHeater.extendedDeadtimeSc", DumpEntry{pwmVrefHeater.extendedDeadtimeSc});
        res.insert_or_assign("pwmVrefHeater.minSwitchTimeSc", DumpEntry{pwmVrefHeater.minSwitchTimeSc});
        res.insert_or_assign("pwmVrefHeater.minModIdxSc", DumpEntry{pwmVrefHeater.minModIdxSc});
        res.insert_or_assign("pwmVrefHeater.maxModIdxSc", DumpEntry{pwmVrefHeater.maxModIdxSc});
        res.insert_or_assign("pwmVrefHeater.numberCcErrors", DumpEntry{pwmVrefHeater.numberCcErrors});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::EventLog::MasksArray`
    //!
    //! @param masks A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under masks
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::EventLog::MasksArray& masks)
    {
        DumpMap res{masks.base()};
        res.insert_or_assign("masks[0].re", DumpEntry{masks[0].re});
        res.insert_or_assign("masks[0].fe", DumpEntry{masks[0].fe});
        res.insert_or_assign("masks[1].re", DumpEntry{masks[1].re});
        res.insert_or_assign("masks[1].fe", DumpEntry{masks[1].fe});
        res.insert_or_assign("masks[2].re", DumpEntry{masks[2].re});
        res.insert_or_assign("masks[2].fe", DumpEntry{masks[2].fe});
        res.insert_or_assign("masks[3].re", DumpEntry{masks[3].re});
        res.insert_or_assign("masks[3].fe", DumpEntry{masks[3].fe});
        res.insert_or_assign("masks[4].re", DumpEntry{masks[4].re});
        res.insert_or_assign("masks[4].fe", DumpEntry{masks[4].fe});
        res.insert_or_assign("masks[5].re", DumpEntry{masks[5].re});
        res.insert_or_assign("masks[5].fe", DumpEntry{masks[5].fe});
        res.insert_or_assign("masks[6].re", DumpEntry{masks[6].re});
        res.insert_or_assign("masks[6].fe", DumpEntry{masks[6].fe});
        res.insert_or_assign("masks[7].re", DumpEntry{masks[7].re});
        res.insert_or_assign("masks[7].fe", DumpEntry{masks[7].fe});
        res.insert_or_assign("masks[8].re", DumpEntry{masks[8].re});
        res.insert_or_assign("masks[8].fe", DumpEntry{masks[8].fe});
        res.insert_or_assign("masks[9].re", DumpEntry{masks[9].re});
        res.insert_or_assign("masks[9].fe", DumpEntry{masks[9].fe});
        res.insert_or_assign("masks[10].re", DumpEntry{masks[10].re});
        res.insert_or_assign("masks[10].fe", DumpEntry{masks[10].fe});
        res.insert_or_assign("masks[11].re", DumpEntry{masks[11].re});
        res.insert_or_assign("masks[11].fe", DumpEntry{masks[11].fe});
        res.insert_or_assign("masks[12].re", DumpEntry{masks[12].re});
        res.insert_or_assign("masks[12].fe", DumpEntry{masks[12].fe});
        res.insert_or_assign("masks[13].re", DumpEntry{masks[13].re});
        res.insert_or_assign("masks[13].fe", DumpEntry{masks[13].fe});
        res.insert_or_assign("masks[14].re", DumpEntry{masks[14].re});
        res.insert_or_assign("masks[14].fe", DumpEntry{masks[14].fe});
        res.insert_or_assign("masks[15].re", DumpEntry{masks[15].re});
        res.insert_or_assign("masks[15].fe", DumpEntry{masks[15].fe});
        res.insert_or_assign("masks[16].re", DumpEntry{masks[16].re});
        res.insert_or_assign("masks[16].fe", DumpEntry{masks[16].fe});
        res.insert_or_assign("masks[17].re", DumpEntry{masks[17].re});
        res.insert_or_assign("masks[17].fe", DumpEntry{masks[17].fe});
        res.insert_or_assign("masks[18].re", DumpEntry{masks[18].re});
        res.insert_or_assign("masks[18].fe", DumpEntry{masks[18].fe});
        res.insert_or_assign("masks[19].re", DumpEntry{masks[19].re});
        res.insert_or_assign("masks[19].fe", DumpEntry{masks[19].fe});
        res.insert_or_assign("masks[20].re", DumpEntry{masks[20].re});
        res.insert_or_assign("masks[20].fe", DumpEntry{masks[20].fe});
        res.insert_or_assign("masks[21].re", DumpEntry{masks[21].re});
        res.insert_or_assign("masks[21].fe", DumpEntry{masks[21].fe});
        res.insert_or_assign("masks[22].re", DumpEntry{masks[22].re});
        res.insert_or_assign("masks[22].fe", DumpEntry{masks[22].fe});
        res.insert_or_assign("masks[23].re", DumpEntry{masks[23].re});
        res.insert_or_assign("masks[23].fe", DumpEntry{masks[23].fe});
        res.insert_or_assign("masks[24].re", DumpEntry{masks[24].re});
        res.insert_or_assign("masks[24].fe", DumpEntry{masks[24].fe});
        res.insert_or_assign("masks[25].re", DumpEntry{masks[25].re});
        res.insert_or_assign("masks[25].fe", DumpEntry{masks[25].fe});
        res.insert_or_assign("masks[26].re", DumpEntry{masks[26].re});
        res.insert_or_assign("masks[26].fe", DumpEntry{masks[26].fe});
        res.insert_or_assign("masks[27].re", DumpEntry{masks[27].re});
        res.insert_or_assign("masks[27].fe", DumpEntry{masks[27].fe});
        res.insert_or_assign("masks[28].re", DumpEntry{masks[28].re});
        res.insert_or_assign("masks[28].fe", DumpEntry{masks[28].fe});
        res.insert_or_assign("masks[29].re", DumpEntry{masks[29].re});
        res.insert_or_assign("masks[29].fe", DumpEntry{masks[29].fe});
        res.insert_or_assign("masks[30].re", DumpEntry{masks[30].re});
        res.insert_or_assign("masks[30].fe", DumpEntry{masks[30].fe});
        res.insert_or_assign("masks[31].re", DumpEntry{masks[31].re});
        res.insert_or_assign("masks[31].fe", DumpEntry{masks[31].fe});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::EventLog`
    //!
    //! @param eventLog A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under eventLog
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::EventLog& eventLog)
    {
        DumpMap res{eventLog.base()};
        res.insert_or_assign("eventLog.status", DumpEntry{eventLog.status});
        res.insert_or_assign("eventLog.status.entryLost", DumpEntry{eventLog.status.entryLost});
        res.insert_or_assign("eventLog.status.entryValid", DumpEntry{eventLog.status.entryValid});
        res.insert_or_assign("eventLog.status.typeIndex", DumpEntry{eventLog.status.typeIndex});
        res.insert_or_assign("eventLog.status.bankNumber", DumpEntry{eventLog.status.bankNumber});
        res.insert_or_assign("eventLog.timestampS", DumpEntry{eventLog.timestampS});
        res.insert_or_assign("eventLog.timestampUs", DumpEntry{eventLog.timestampUs});
        res.insert_or_assign("eventLog.data", DumpEntry{eventLog.data});
        res.insert_or_assign("eventLog.fifoDataCount", DumpEntry{eventLog.fifoDataCount});
        res.insert_or_assign("eventLog.masks[0].re", DumpEntry{eventLog.masks[0].re});
        res.insert_or_assign("eventLog.masks[0].fe", DumpEntry{eventLog.masks[0].fe});
        res.insert_or_assign("eventLog.masks[1].re", DumpEntry{eventLog.masks[1].re});
        res.insert_or_assign("eventLog.masks[1].fe", DumpEntry{eventLog.masks[1].fe});
        res.insert_or_assign("eventLog.masks[2].re", DumpEntry{eventLog.masks[2].re});
        res.insert_or_assign("eventLog.masks[2].fe", DumpEntry{eventLog.masks[2].fe});
        res.insert_or_assign("eventLog.masks[3].re", DumpEntry{eventLog.masks[3].re});
        res.insert_or_assign("eventLog.masks[3].fe", DumpEntry{eventLog.masks[3].fe});
        res.insert_or_assign("eventLog.masks[4].re", DumpEntry{eventLog.masks[4].re});
        res.insert_or_assign("eventLog.masks[4].fe", DumpEntry{eventLog.masks[4].fe});
        res.insert_or_assign("eventLog.masks[5].re", DumpEntry{eventLog.masks[5].re});
        res.insert_or_assign("eventLog.masks[5].fe", DumpEntry{eventLog.masks[5].fe});
        res.insert_or_assign("eventLog.masks[6].re", DumpEntry{eventLog.masks[6].re});
        res.insert_or_assign("eventLog.masks[6].fe", DumpEntry{eventLog.masks[6].fe});
        res.insert_or_assign("eventLog.masks[7].re", DumpEntry{eventLog.masks[7].re});
        res.insert_or_assign("eventLog.masks[7].fe", DumpEntry{eventLog.masks[7].fe});
        res.insert_or_assign("eventLog.masks[8].re", DumpEntry{eventLog.masks[8].re});
        res.insert_or_assign("eventLog.masks[8].fe", DumpEntry{eventLog.masks[8].fe});
        res.insert_or_assign("eventLog.masks[9].re", DumpEntry{eventLog.masks[9].re});
        res.insert_or_assign("eventLog.masks[9].fe", DumpEntry{eventLog.masks[9].fe});
        res.insert_or_assign("eventLog.masks[10].re", DumpEntry{eventLog.masks[10].re});
        res.insert_or_assign("eventLog.masks[10].fe", DumpEntry{eventLog.masks[10].fe});
        res.insert_or_assign("eventLog.masks[11].re", DumpEntry{eventLog.masks[11].re});
        res.insert_or_assign("eventLog.masks[11].fe", DumpEntry{eventLog.masks[11].fe});
        res.insert_or_assign("eventLog.masks[12].re", DumpEntry{eventLog.masks[12].re});
        res.insert_or_assign("eventLog.masks[12].fe", DumpEntry{eventLog.masks[12].fe});
        res.insert_or_assign("eventLog.masks[13].re", DumpEntry{eventLog.masks[13].re});
        res.insert_or_assign("eventLog.masks[13].fe", DumpEntry{eventLog.masks[13].fe});
        res.insert_or_assign("eventLog.masks[14].re", DumpEntry{eventLog.masks[14].re});
        res.insert_or_assign("eventLog.masks[14].fe", DumpEntry{eventLog.masks[14].fe});
        res.insert_or_assign("eventLog.masks[15].re", DumpEntry{eventLog.masks[15].re});
        res.insert_or_assign("eventLog.masks[15].fe", DumpEntry{eventLog.masks[15].fe});
        res.insert_or_assign("eventLog.masks[16].re", DumpEntry{eventLog.masks[16].re});
        res.insert_or_assign("eventLog.masks[16].fe", DumpEntry{eventLog.masks[16].fe});
        res.insert_or_assign("eventLog.masks[17].re", DumpEntry{eventLog.masks[17].re});
        res.insert_or_assign("eventLog.masks[17].fe", DumpEntry{eventLog.masks[17].fe});
        res.insert_or_assign("eventLog.masks[18].re", DumpEntry{eventLog.masks[18].re});
        res.insert_or_assign("eventLog.masks[18].fe", DumpEntry{eventLog.masks[18].fe});
        res.insert_or_assign("eventLog.masks[19].re", DumpEntry{eventLog.masks[19].re});
        res.insert_or_assign("eventLog.masks[19].fe", DumpEntry{eventLog.masks[19].fe});
        res.insert_or_assign("eventLog.masks[20].re", DumpEntry{eventLog.masks[20].re});
        res.insert_or_assign("eventLog.masks[20].fe", DumpEntry{eventLog.masks[20].fe});
        res.insert_or_assign("eventLog.masks[21].re", DumpEntry{eventLog.masks[21].re});
        res.insert_or_assign("eventLog.masks[21].fe", DumpEntry{eventLog.masks[21].fe});
        res.insert_or_assign("eventLog.masks[22].re", DumpEntry{eventLog.masks[22].re});
        res.insert_or_assign("eventLog.masks[22].fe", DumpEntry{eventLog.masks[22].fe});
        res.insert_or_assign("eventLog.masks[23].re", DumpEntry{eventLog.masks[23].re});
        res.insert_or_assign("eventLog.masks[23].fe", DumpEntry{eventLog.masks[23].fe});
        res.insert_or_assign("eventLog.masks[24].re", DumpEntry{eventLog.masks[24].re});
        res.insert_or_assign("eventLog.masks[24].fe", DumpEntry{eventLog.masks[24].fe});
        res.insert_or_assign("eventLog.masks[25].re", DumpEntry{eventLog.masks[25].re});
        res.insert_or_assign("eventLog.masks[25].fe", DumpEntry{eventLog.masks[25].fe});
        res.insert_or_assign("eventLog.masks[26].re", DumpEntry{eventLog.masks[26].re});
        res.insert_or_assign("eventLog.masks[26].fe", DumpEntry{eventLog.masks[26].fe});
        res.insert_or_assign("eventLog.masks[27].re", DumpEntry{eventLog.masks[27].re});
        res.insert_or_assign("eventLog.masks[27].fe", DumpEntry{eventLog.masks[27].fe});
        res.insert_or_assign("eventLog.masks[28].re", DumpEntry{eventLog.masks[28].re});
        res.insert_or_assign("eventLog.masks[28].fe", DumpEntry{eventLog.masks[28].fe});
        res.insert_or_assign("eventLog.masks[29].re", DumpEntry{eventLog.masks[29].re});
        res.insert_or_assign("eventLog.masks[29].fe", DumpEntry{eventLog.masks[29].fe});
        res.insert_or_assign("eventLog.masks[30].re", DumpEntry{eventLog.masks[30].re});
        res.insert_or_assign("eventLog.masks[30].fe", DumpEntry{eventLog.masks[30].fe});
        res.insert_or_assign("eventLog.masks[31].re", DumpEntry{eventLog.masks[31].re});
        res.insert_or_assign("eventLog.masks[31].fe", DumpEntry{eventLog.masks[31].fe});
        return res;
    }

    //! Dump the register and fields of `ipCores::Top::FreqWatchdog`
    //!
    //! @param freqWatchdog A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under freqWatchdog
    inline DumpMap dump([[maybe_unused]] const ipCores::Top::FreqWatchdog& freqWatchdog)
    {
        DumpMap res{freqWatchdog.base()};
        res.insert_or_assign("freqWatchdog.alive", DumpEntry{freqWatchdog.alive});
        res.insert_or_assign("freqWatchdog.minPeriodSc", DumpEntry{freqWatchdog.minPeriodSc});
        res.insert_or_assign("freqWatchdog.maxPeriodSc", DumpEntry{freqWatchdog.maxPeriodSc});
        return res;
    }
    //! Dump the register and fields of `ipCores::Top`
    //!
    //! @param top A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under top
    inline DumpMap dump([[maybe_unused]] const ipCores::Top& top)
    {
        DumpMap res{top.base()};
        res.insert_or_assign("top.adcCalint.ctrl", DumpEntry{top.adcCalint.ctrl});
        res.insert_or_assign("top.adcCalint.ctrl.reset", DumpEntry{top.adcCalint.ctrl.reset});
        res.insert_or_assign("top.adcCalint.ctrl.start", DumpEntry{top.adcCalint.ctrl.start});
        res.insert_or_assign("top.adcCalint.ctrl.hwReset", DumpEntry{top.adcCalint.ctrl.hwReset});
        res.insert_or_assign("top.adcCalint.config", DumpEntry{top.adcCalint.config});
        res.insert_or_assign("top.adcCalint.config.cpol", DumpEntry{top.adcCalint.config.cpol});
        res.insert_or_assign("top.adcCalint.config.cpha", DumpEntry{top.adcCalint.config.cpha});
        res.insert_or_assign("top.adcCalint.config.cnvPol", DumpEntry{top.adcCalint.config.cnvPol});
        res.insert_or_assign("top.adcCalint.config.cnvWithCs", DumpEntry{top.adcCalint.config.cnvWithCs});
        res.insert_or_assign("top.adcCalint.config.busyPol", DumpEntry{top.adcCalint.config.busyPol});
        res.insert_or_assign("top.adcCalint.config.busySrc", DumpEntry{top.adcCalint.config.busySrc});
        res.insert_or_assign("top.adcCalint.config.busyTime", DumpEntry{top.adcCalint.config.busyTime});
        res.insert_or_assign("top.adcCalint.config.clkActInConv", DumpEntry{top.adcCalint.config.clkActInConv});
        res.insert_or_assign("top.adcCalint.config.dataWidth", DumpEntry{top.adcCalint.config.dataWidth});
        res.insert_or_assign("top.adcCalint.config.gwCtrl", DumpEntry{top.adcCalint.config.gwCtrl});
        res.insert_or_assign("top.adcCalint.status", DumpEntry{top.adcCalint.status});
        res.insert_or_assign("top.adcCalint.status.apiVer", DumpEntry{top.adcCalint.status.apiVer});
        res.insert_or_assign("top.adcCalint.status.dinPorts", DumpEntry{top.adcCalint.status.dinPorts});
        res.insert_or_assign("top.adcCalint.status.busy", DumpEntry{top.adcCalint.status.busy});
        res.insert_or_assign("top.adcCalint.status.clkPrescaler", DumpEntry{top.adcCalint.status.clkPrescaler});
        res.insert_or_assign("top.adcCalint.data[0].value", DumpEntry{top.adcCalint.data[0].value});
        res.insert_or_assign("top.adcCalint.data[1].value", DumpEntry{top.adcCalint.data[1].value});
        res.insert_or_assign("top.adcCalint.data[2].value", DumpEntry{top.adcCalint.data[2].value});
        res.insert_or_assign("top.adcCalint.data[3].value", DumpEntry{top.adcCalint.data[3].value});
        res.insert_or_assign("top.adcCalint.data[4].value", DumpEntry{top.adcCalint.data[4].value});
        res.insert_or_assign("top.adcCalint.data[5].value", DumpEntry{top.adcCalint.data[5].value});
        res.insert_or_assign("top.adcCalint.data[6].value", DumpEntry{top.adcCalint.data[6].value});
        res.insert_or_assign("top.adcCalint.data[7].value", DumpEntry{top.adcCalint.data[7].value});
        res.insert_or_assign("top.adcCalint.data[8].value", DumpEntry{top.adcCalint.data[8].value});
        res.insert_or_assign("top.adcCalint.data[9].value", DumpEntry{top.adcCalint.data[9].value});
        res.insert_or_assign("top.adcCalint.data[10].value", DumpEntry{top.adcCalint.data[10].value});
        res.insert_or_assign("top.adcCalint.data[11].value", DumpEntry{top.adcCalint.data[11].value});
        res.insert_or_assign("top.adcCalint.data[12].value", DumpEntry{top.adcCalint.data[12].value});
        res.insert_or_assign("top.adcCalint.data[13].value", DumpEntry{top.adcCalint.data[13].value});
        res.insert_or_assign("top.adcCalint.data[14].value", DumpEntry{top.adcCalint.data[14].value});
        res.insert_or_assign("top.adcCalint.data[15].value", DumpEntry{top.adcCalint.data[15].value});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl", DumpEntry{top.adcUncalint[0].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.reset", DumpEntry{top.adcUncalint[0].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.start", DumpEntry{top.adcUncalint[0].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[0].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[0].adc.config", DumpEntry{top.adcUncalint[0].adc.config});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cpol", DumpEntry{top.adcUncalint[0].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cpha", DumpEntry{top.adcUncalint[0].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cnvPol", DumpEntry{top.adcUncalint[0].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[0].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.config.busyPol", DumpEntry{top.adcUncalint[0].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[0].adc.config.busySrc", DumpEntry{top.adcUncalint[0].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.busyTime", DumpEntry{top.adcUncalint[0].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.clkActInConv", DumpEntry{top.adcUncalint[0].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.dataWidth", DumpEntry{top.adcUncalint[0].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.config.gwCtrl", DumpEntry{top.adcUncalint[0].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[0].adc.status", DumpEntry{top.adcUncalint[0].adc.status});
        res.insert_or_assign("top.adcUncalint[0].adc.status.apiVer", DumpEntry{top.adcUncalint[0].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.status.dinPorts", DumpEntry{top.adcUncalint[0].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.status.busy", DumpEntry{top.adcUncalint[0].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[0].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.data[0].value", DumpEntry{top.adcUncalint[0].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[1].value", DumpEntry{top.adcUncalint[0].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[2].value", DumpEntry{top.adcUncalint[0].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[3].value", DumpEntry{top.adcUncalint[0].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[4].value", DumpEntry{top.adcUncalint[0].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[5].value", DumpEntry{top.adcUncalint[0].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[6].value", DumpEntry{top.adcUncalint[0].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[7].value", DumpEntry{top.adcUncalint[0].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[8].value", DumpEntry{top.adcUncalint[0].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[9].value", DumpEntry{top.adcUncalint[0].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[10].value", DumpEntry{top.adcUncalint[0].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[11].value", DumpEntry{top.adcUncalint[0].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[12].value", DumpEntry{top.adcUncalint[0].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[13].value", DumpEntry{top.adcUncalint[0].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[14].value", DumpEntry{top.adcUncalint[0].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[15].value", DumpEntry{top.adcUncalint[0].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl", DumpEntry{top.adcUncalint[1].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.reset", DumpEntry{top.adcUncalint[1].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.start", DumpEntry{top.adcUncalint[1].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[1].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[1].adc.config", DumpEntry{top.adcUncalint[1].adc.config});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cpol", DumpEntry{top.adcUncalint[1].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cpha", DumpEntry{top.adcUncalint[1].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cnvPol", DumpEntry{top.adcUncalint[1].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[1].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.config.busyPol", DumpEntry{top.adcUncalint[1].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[1].adc.config.busySrc", DumpEntry{top.adcUncalint[1].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.busyTime", DumpEntry{top.adcUncalint[1].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.clkActInConv", DumpEntry{top.adcUncalint[1].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.dataWidth", DumpEntry{top.adcUncalint[1].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.config.gwCtrl", DumpEntry{top.adcUncalint[1].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[1].adc.status", DumpEntry{top.adcUncalint[1].adc.status});
        res.insert_or_assign("top.adcUncalint[1].adc.status.apiVer", DumpEntry{top.adcUncalint[1].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.status.dinPorts", DumpEntry{top.adcUncalint[1].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.status.busy", DumpEntry{top.adcUncalint[1].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[1].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.data[0].value", DumpEntry{top.adcUncalint[1].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[1].value", DumpEntry{top.adcUncalint[1].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[2].value", DumpEntry{top.adcUncalint[1].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[3].value", DumpEntry{top.adcUncalint[1].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[4].value", DumpEntry{top.adcUncalint[1].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[5].value", DumpEntry{top.adcUncalint[1].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[6].value", DumpEntry{top.adcUncalint[1].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[7].value", DumpEntry{top.adcUncalint[1].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[8].value", DumpEntry{top.adcUncalint[1].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[9].value", DumpEntry{top.adcUncalint[1].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[10].value", DumpEntry{top.adcUncalint[1].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[11].value", DumpEntry{top.adcUncalint[1].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[12].value", DumpEntry{top.adcUncalint[1].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[13].value", DumpEntry{top.adcUncalint[1].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[14].value", DumpEntry{top.adcUncalint[1].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[15].value", DumpEntry{top.adcUncalint[1].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl", DumpEntry{top.adcUncalint[2].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.reset", DumpEntry{top.adcUncalint[2].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.start", DumpEntry{top.adcUncalint[2].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[2].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[2].adc.config", DumpEntry{top.adcUncalint[2].adc.config});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cpol", DumpEntry{top.adcUncalint[2].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cpha", DumpEntry{top.adcUncalint[2].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cnvPol", DumpEntry{top.adcUncalint[2].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[2].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.config.busyPol", DumpEntry{top.adcUncalint[2].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[2].adc.config.busySrc", DumpEntry{top.adcUncalint[2].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.busyTime", DumpEntry{top.adcUncalint[2].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.clkActInConv", DumpEntry{top.adcUncalint[2].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.dataWidth", DumpEntry{top.adcUncalint[2].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.config.gwCtrl", DumpEntry{top.adcUncalint[2].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[2].adc.status", DumpEntry{top.adcUncalint[2].adc.status});
        res.insert_or_assign("top.adcUncalint[2].adc.status.apiVer", DumpEntry{top.adcUncalint[2].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.status.dinPorts", DumpEntry{top.adcUncalint[2].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.status.busy", DumpEntry{top.adcUncalint[2].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[2].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.data[0].value", DumpEntry{top.adcUncalint[2].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[1].value", DumpEntry{top.adcUncalint[2].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[2].value", DumpEntry{top.adcUncalint[2].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[3].value", DumpEntry{top.adcUncalint[2].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[4].value", DumpEntry{top.adcUncalint[2].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[5].value", DumpEntry{top.adcUncalint[2].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[6].value", DumpEntry{top.adcUncalint[2].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[7].value", DumpEntry{top.adcUncalint[2].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[8].value", DumpEntry{top.adcUncalint[2].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[9].value", DumpEntry{top.adcUncalint[2].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[10].value", DumpEntry{top.adcUncalint[2].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[11].value", DumpEntry{top.adcUncalint[2].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[12].value", DumpEntry{top.adcUncalint[2].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[13].value", DumpEntry{top.adcUncalint[2].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[14].value", DumpEntry{top.adcUncalint[2].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[15].value", DumpEntry{top.adcUncalint[2].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl", DumpEntry{top.adcUncalint[3].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.reset", DumpEntry{top.adcUncalint[3].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.start", DumpEntry{top.adcUncalint[3].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[3].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[3].adc.config", DumpEntry{top.adcUncalint[3].adc.config});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cpol", DumpEntry{top.adcUncalint[3].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cpha", DumpEntry{top.adcUncalint[3].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cnvPol", DumpEntry{top.adcUncalint[3].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[3].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.config.busyPol", DumpEntry{top.adcUncalint[3].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[3].adc.config.busySrc", DumpEntry{top.adcUncalint[3].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.busyTime", DumpEntry{top.adcUncalint[3].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.clkActInConv", DumpEntry{top.adcUncalint[3].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.dataWidth", DumpEntry{top.adcUncalint[3].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.config.gwCtrl", DumpEntry{top.adcUncalint[3].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[3].adc.status", DumpEntry{top.adcUncalint[3].adc.status});
        res.insert_or_assign("top.adcUncalint[3].adc.status.apiVer", DumpEntry{top.adcUncalint[3].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.status.dinPorts", DumpEntry{top.adcUncalint[3].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.status.busy", DumpEntry{top.adcUncalint[3].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[3].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.data[0].value", DumpEntry{top.adcUncalint[3].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[1].value", DumpEntry{top.adcUncalint[3].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[2].value", DumpEntry{top.adcUncalint[3].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[3].value", DumpEntry{top.adcUncalint[3].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[4].value", DumpEntry{top.adcUncalint[3].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[5].value", DumpEntry{top.adcUncalint[3].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[6].value", DumpEntry{top.adcUncalint[3].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[7].value", DumpEntry{top.adcUncalint[3].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[8].value", DumpEntry{top.adcUncalint[3].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[9].value", DumpEntry{top.adcUncalint[3].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[10].value", DumpEntry{top.adcUncalint[3].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[11].value", DumpEntry{top.adcUncalint[3].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[12].value", DumpEntry{top.adcUncalint[3].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[13].value", DumpEntry{top.adcUncalint[3].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[14].value", DumpEntry{top.adcUncalint[3].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[15].value", DumpEntry{top.adcUncalint[3].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl", DumpEntry{top.adcUncalint[4].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.reset", DumpEntry{top.adcUncalint[4].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.start", DumpEntry{top.adcUncalint[4].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[4].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[4].adc.config", DumpEntry{top.adcUncalint[4].adc.config});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cpol", DumpEntry{top.adcUncalint[4].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cpha", DumpEntry{top.adcUncalint[4].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cnvPol", DumpEntry{top.adcUncalint[4].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[4].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.config.busyPol", DumpEntry{top.adcUncalint[4].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[4].adc.config.busySrc", DumpEntry{top.adcUncalint[4].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.busyTime", DumpEntry{top.adcUncalint[4].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.clkActInConv", DumpEntry{top.adcUncalint[4].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.dataWidth", DumpEntry{top.adcUncalint[4].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.config.gwCtrl", DumpEntry{top.adcUncalint[4].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[4].adc.status", DumpEntry{top.adcUncalint[4].adc.status});
        res.insert_or_assign("top.adcUncalint[4].adc.status.apiVer", DumpEntry{top.adcUncalint[4].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.status.dinPorts", DumpEntry{top.adcUncalint[4].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.status.busy", DumpEntry{top.adcUncalint[4].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[4].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.data[0].value", DumpEntry{top.adcUncalint[4].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[1].value", DumpEntry{top.adcUncalint[4].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[2].value", DumpEntry{top.adcUncalint[4].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[3].value", DumpEntry{top.adcUncalint[4].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[4].value", DumpEntry{top.adcUncalint[4].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[5].value", DumpEntry{top.adcUncalint[4].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[6].value", DumpEntry{top.adcUncalint[4].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[7].value", DumpEntry{top.adcUncalint[4].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[8].value", DumpEntry{top.adcUncalint[4].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[9].value", DumpEntry{top.adcUncalint[4].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[10].value", DumpEntry{top.adcUncalint[4].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[11].value", DumpEntry{top.adcUncalint[4].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[12].value", DumpEntry{top.adcUncalint[4].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[13].value", DumpEntry{top.adcUncalint[4].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[14].value", DumpEntry{top.adcUncalint[4].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[15].value", DumpEntry{top.adcUncalint[4].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl", DumpEntry{top.adcUncalint[5].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.reset", DumpEntry{top.adcUncalint[5].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.start", DumpEntry{top.adcUncalint[5].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[5].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[5].adc.config", DumpEntry{top.adcUncalint[5].adc.config});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cpol", DumpEntry{top.adcUncalint[5].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cpha", DumpEntry{top.adcUncalint[5].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cnvPol", DumpEntry{top.adcUncalint[5].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[5].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.config.busyPol", DumpEntry{top.adcUncalint[5].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[5].adc.config.busySrc", DumpEntry{top.adcUncalint[5].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.busyTime", DumpEntry{top.adcUncalint[5].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.clkActInConv", DumpEntry{top.adcUncalint[5].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.dataWidth", DumpEntry{top.adcUncalint[5].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.config.gwCtrl", DumpEntry{top.adcUncalint[5].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[5].adc.status", DumpEntry{top.adcUncalint[5].adc.status});
        res.insert_or_assign("top.adcUncalint[5].adc.status.apiVer", DumpEntry{top.adcUncalint[5].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.status.dinPorts", DumpEntry{top.adcUncalint[5].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.status.busy", DumpEntry{top.adcUncalint[5].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[5].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.data[0].value", DumpEntry{top.adcUncalint[5].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[1].value", DumpEntry{top.adcUncalint[5].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[2].value", DumpEntry{top.adcUncalint[5].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[3].value", DumpEntry{top.adcUncalint[5].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[4].value", DumpEntry{top.adcUncalint[5].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[5].value", DumpEntry{top.adcUncalint[5].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[6].value", DumpEntry{top.adcUncalint[5].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[7].value", DumpEntry{top.adcUncalint[5].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[8].value", DumpEntry{top.adcUncalint[5].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[9].value", DumpEntry{top.adcUncalint[5].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[10].value", DumpEntry{top.adcUncalint[5].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[11].value", DumpEntry{top.adcUncalint[5].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[12].value", DumpEntry{top.adcUncalint[5].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[13].value", DumpEntry{top.adcUncalint[5].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[14].value", DumpEntry{top.adcUncalint[5].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[15].value", DumpEntry{top.adcUncalint[5].adc.data[15].value});
        res.insert_or_assign("top.dacInt[0].dac.ctrl", DumpEntry{top.dacInt[0].dac.ctrl});
        res.insert_or_assign("top.dacInt[0].dac.ctrl.reset", DumpEntry{top.dacInt[0].dac.ctrl.reset});
        res.insert_or_assign("top.dacInt[0].dac.ctrl.start", DumpEntry{top.dacInt[0].dac.ctrl.start});
        res.insert_or_assign("top.dacInt[0].dac.config", DumpEntry{top.dacInt[0].dac.config});
        res.insert_or_assign("top.dacInt[0].dac.config.cpol", DumpEntry{top.dacInt[0].dac.config.cpol});
        res.insert_or_assign("top.dacInt[0].dac.config.cpha", DumpEntry{top.dacInt[0].dac.config.cpha});
        res.insert_or_assign("top.dacInt[0].dac.config.msbFirst", DumpEntry{top.dacInt[0].dac.config.msbFirst});
        res.insert_or_assign("top.dacInt[0].dac.config.prePad", DumpEntry{top.dacInt[0].dac.config.prePad});
        res.insert_or_assign("top.dacInt[0].dac.config.postPad", DumpEntry{top.dacInt[0].dac.config.postPad});
        res.insert_or_assign("top.dacInt[0].dac.config.dataWidth", DumpEntry{top.dacInt[0].dac.config.dataWidth});
        res.insert_or_assign("top.dacInt[0].dac.config.deadTime", DumpEntry{top.dacInt[0].dac.config.deadTime});
        res.insert_or_assign("top.dacInt[0].dac.config.clkPres", DumpEntry{top.dacInt[0].dac.config.clkPres});
        res.insert_or_assign("top.dacInt[0].dac.config.fixAddClkCyc", DumpEntry{top.dacInt[0].dac.config.fixAddClkCyc});
        res.insert_or_assign("top.dacInt[0].dac.config.gwCtrl", DumpEntry{top.dacInt[0].dac.config.gwCtrl});
        res.insert_or_assign("top.dacInt[0].dac.status", DumpEntry{top.dacInt[0].dac.status});
        res.insert_or_assign("top.dacInt[0].dac.status.apiVer", DumpEntry{top.dacInt[0].dac.status.apiVer});
        res.insert_or_assign("top.dacInt[0].dac.status.doutPorts", DumpEntry{top.dacInt[0].dac.status.doutPorts});
        res.insert_or_assign("top.dacInt[0].dac.status.busy", DumpEntry{top.dacInt[0].dac.status.busy});
        // top.dacInt[0].dac.data[0].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[1].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[2].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[3].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[4].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[5].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[6].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[7].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[8].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[9].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[10].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[11].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[12].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[13].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[14].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("top.dacInt[1].dac.ctrl", DumpEntry{top.dacInt[1].dac.ctrl});
        res.insert_or_assign("top.dacInt[1].dac.ctrl.reset", DumpEntry{top.dacInt[1].dac.ctrl.reset});
        res.insert_or_assign("top.dacInt[1].dac.ctrl.start", DumpEntry{top.dacInt[1].dac.ctrl.start});
        res.insert_or_assign("top.dacInt[1].dac.config", DumpEntry{top.dacInt[1].dac.config});
        res.insert_or_assign("top.dacInt[1].dac.config.cpol", DumpEntry{top.dacInt[1].dac.config.cpol});
        res.insert_or_assign("top.dacInt[1].dac.config.cpha", DumpEntry{top.dacInt[1].dac.config.cpha});
        res.insert_or_assign("top.dacInt[1].dac.config.msbFirst", DumpEntry{top.dacInt[1].dac.config.msbFirst});
        res.insert_or_assign("top.dacInt[1].dac.config.prePad", DumpEntry{top.dacInt[1].dac.config.prePad});
        res.insert_or_assign("top.dacInt[1].dac.config.postPad", DumpEntry{top.dacInt[1].dac.config.postPad});
        res.insert_or_assign("top.dacInt[1].dac.config.dataWidth", DumpEntry{top.dacInt[1].dac.config.dataWidth});
        res.insert_or_assign("top.dacInt[1].dac.config.deadTime", DumpEntry{top.dacInt[1].dac.config.deadTime});
        res.insert_or_assign("top.dacInt[1].dac.config.clkPres", DumpEntry{top.dacInt[1].dac.config.clkPres});
        res.insert_or_assign("top.dacInt[1].dac.config.fixAddClkCyc", DumpEntry{top.dacInt[1].dac.config.fixAddClkCyc});
        res.insert_or_assign("top.dacInt[1].dac.config.gwCtrl", DumpEntry{top.dacInt[1].dac.config.gwCtrl});
        res.insert_or_assign("top.dacInt[1].dac.status", DumpEntry{top.dacInt[1].dac.status});
        res.insert_or_assign("top.dacInt[1].dac.status.apiVer", DumpEntry{top.dacInt[1].dac.status.apiVer});
        res.insert_or_assign("top.dacInt[1].dac.status.doutPorts", DumpEntry{top.dacInt[1].dac.status.doutPorts});
        res.insert_or_assign("top.dacInt[1].dac.status.busy", DumpEntry{top.dacInt[1].dac.status.busy});
        // top.dacInt[1].dac.data[0].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[1].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[2].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[3].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[4].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[5].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[6].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[7].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[8].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[9].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[10].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[11].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[12].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[13].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[14].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("top.signalBank.digI0", DumpEntry{top.signalBank.digI0});
        res.insert_or_assign("top.signalBank.digI1", DumpEntry{top.signalBank.digI1});
        res.insert_or_assign("top.signalBank.digIndI", DumpEntry{top.signalBank.digIndI});
        res.insert_or_assign("top.signalBank.contactI", DumpEntry{top.signalBank.contactI});
        res.insert_or_assign("top.signalBank.opticalI", DumpEntry{top.signalBank.opticalI});
        res.insert_or_assign("top.signalBank.protI", DumpEntry{top.signalBank.protI});
        res.insert_or_assign("top.signalBank.digO", DumpEntry{top.signalBank.digO});
        res.insert_or_assign("top.signalBank.digOcO", DumpEntry{top.signalBank.digOcO});
        res.insert_or_assign("top.signalBank.contactO", DumpEntry{top.signalBank.contactO});
        res.insert_or_assign("top.signalBank.opticalO", DumpEntry{top.signalBank.opticalO});
        res.insert_or_assign("top.signalBank.minMaxLim0", DumpEntry{top.signalBank.minMaxLim0});
        res.insert_or_assign("top.signalBank.minMaxLim1", DumpEntry{top.signalBank.minMaxLim1});
        res.insert_or_assign("top.signalBank.rmsLim0", DumpEntry{top.signalBank.rmsLim0});
        res.insert_or_assign("top.signalBank.rmsLim1", DumpEntry{top.signalBank.rmsLim1});
        res.insert_or_assign("top.signalBank.reg[0].fir", DumpEntry{top.signalBank.reg[0].fir});
        res.insert_or_assign("top.signalBank.reg[1].fir", DumpEntry{top.signalBank.reg[1].fir});
        res.insert_or_assign("top.signalBank.reg[2].fir", DumpEntry{top.signalBank.reg[2].fir});
        res.insert_or_assign("top.signalBank.reg[3].fir", DumpEntry{top.signalBank.reg[3].fir});
        res.insert_or_assign("top.signalBank.reg[4].fir", DumpEntry{top.signalBank.reg[4].fir});
        res.insert_or_assign("top.signalBank.reg[5].fir", DumpEntry{top.signalBank.reg[5].fir});
        res.insert_or_assign("top.signalBank.reg[6].fir", DumpEntry{top.signalBank.reg[6].fir});
        res.insert_or_assign("top.signalBank.reg[7].fir", DumpEntry{top.signalBank.reg[7].fir});
        res.insert_or_assign("top.signalBank.reg[8].fir", DumpEntry{top.signalBank.reg[8].fir});
        res.insert_or_assign("top.signalBank.reg[9].fir", DumpEntry{top.signalBank.reg[9].fir});
        res.insert_or_assign("top.signalBank.reg[10].fir", DumpEntry{top.signalBank.reg[10].fir});
        res.insert_or_assign("top.signalBank.reg[11].fir", DumpEntry{top.signalBank.reg[11].fir});
        res.insert_or_assign("top.signalBank.reg[12].fir", DumpEntry{top.signalBank.reg[12].fir});
        res.insert_or_assign("top.signalBank.reg[13].fir", DumpEntry{top.signalBank.reg[13].fir});
        res.insert_or_assign("top.signalBank.reg[14].fir", DumpEntry{top.signalBank.reg[14].fir});
        res.insert_or_assign("top.signalBank.reg[15].fir", DumpEntry{top.signalBank.reg[15].fir});
        res.insert_or_assign("top.signalBank.reg[16].fir", DumpEntry{top.signalBank.reg[16].fir});
        res.insert_or_assign("top.signalBank.reg[17].fir", DumpEntry{top.signalBank.reg[17].fir});
        res.insert_or_assign("top.signalBank.reg[18].fir", DumpEntry{top.signalBank.reg[18].fir});
        res.insert_or_assign("top.signalBank.reg[19].fir", DumpEntry{top.signalBank.reg[19].fir});
        res.insert_or_assign("top.signalBank.reg[20].fir", DumpEntry{top.signalBank.reg[20].fir});
        res.insert_or_assign("top.signalBank.reg[21].fir", DumpEntry{top.signalBank.reg[21].fir});
        res.insert_or_assign("top.signalBank.reg[22].fir", DumpEntry{top.signalBank.reg[22].fir});
        res.insert_or_assign("top.signalBank.reg[23].fir", DumpEntry{top.signalBank.reg[23].fir});
        res.insert_or_assign("top.signalBank.reg[24].fir", DumpEntry{top.signalBank.reg[24].fir});
        res.insert_or_assign("top.signalBank.reg[25].fir", DumpEntry{top.signalBank.reg[25].fir});
        res.insert_or_assign("top.signalBank.reg[26].fir", DumpEntry{top.signalBank.reg[26].fir});
        res.insert_or_assign("top.signalBank.reg[27].fir", DumpEntry{top.signalBank.reg[27].fir});
        res.insert_or_assign("top.signalBank.reg[28].fir", DumpEntry{top.signalBank.reg[28].fir});
        res.insert_or_assign("top.signalBank.reg[29].fir", DumpEntry{top.signalBank.reg[29].fir});
        res.insert_or_assign("top.signalBank.reg[30].fir", DumpEntry{top.signalBank.reg[30].fir});
        res.insert_or_assign("top.signalBank.reg[31].fir", DumpEntry{top.signalBank.reg[31].fir});
        res.insert_or_assign("top.signalBank.reg[32].fir", DumpEntry{top.signalBank.reg[32].fir});
        res.insert_or_assign("top.signalBank.reg[33].fir", DumpEntry{top.signalBank.reg[33].fir});
        res.insert_or_assign("top.signalBank.reg[34].fir", DumpEntry{top.signalBank.reg[34].fir});
        res.insert_or_assign("top.signalBank.reg[35].fir", DumpEntry{top.signalBank.reg[35].fir});
        res.insert_or_assign("top.signalBank.reg[36].fir", DumpEntry{top.signalBank.reg[36].fir});
        res.insert_or_assign("top.signalBank.reg[37].fir", DumpEntry{top.signalBank.reg[37].fir});
        res.insert_or_assign("top.signalBank.reg[38].fir", DumpEntry{top.signalBank.reg[38].fir});
        res.insert_or_assign("top.signalBank.reg[39].fir", DumpEntry{top.signalBank.reg[39].fir});
        res.insert_or_assign("top.signalBank.reg[40].fir", DumpEntry{top.signalBank.reg[40].fir});
        res.insert_or_assign("top.signalBank.reg[41].fir", DumpEntry{top.signalBank.reg[41].fir});
        res.insert_or_assign("top.signalBank.reg[42].fir", DumpEntry{top.signalBank.reg[42].fir});
        res.insert_or_assign("top.signalBank.reg[43].fir", DumpEntry{top.signalBank.reg[43].fir});
        res.insert_or_assign("top.signalBank.reg[44].fir", DumpEntry{top.signalBank.reg[44].fir});
        res.insert_or_assign("top.signalBank.reg[45].fir", DumpEntry{top.signalBank.reg[45].fir});
        res.insert_or_assign("top.signalBank.reg[46].fir", DumpEntry{top.signalBank.reg[46].fir});
        res.insert_or_assign("top.signalBank.reg[47].fir", DumpEntry{top.signalBank.reg[47].fir});
        res.insert_or_assign("top.signalBank.reg[48].fir", DumpEntry{top.signalBank.reg[48].fir});
        res.insert_or_assign("top.signalBank.reg[49].fir", DumpEntry{top.signalBank.reg[49].fir});
        res.insert_or_assign("top.signalBank.reg[50].fir", DumpEntry{top.signalBank.reg[50].fir});
        res.insert_or_assign("top.signalBank.reg[51].fir", DumpEntry{top.signalBank.reg[51].fir});
        res.insert_or_assign("top.signalBank.reg[52].fir", DumpEntry{top.signalBank.reg[52].fir});
        res.insert_or_assign("top.signalBank.reg[53].fir", DumpEntry{top.signalBank.reg[53].fir});
        res.insert_or_assign("top.signalBank.reg[54].fir", DumpEntry{top.signalBank.reg[54].fir});
        res.insert_or_assign("top.signalBank.reg[55].fir", DumpEntry{top.signalBank.reg[55].fir});
        res.insert_or_assign("top.signalBank.reg[56].fir", DumpEntry{top.signalBank.reg[56].fir});
        res.insert_or_assign("top.signalBank.reg[57].fir", DumpEntry{top.signalBank.reg[57].fir});
        res.insert_or_assign("top.signalBank.reg[58].fir", DumpEntry{top.signalBank.reg[58].fir});
        res.insert_or_assign("top.signalBank.reg[59].fir", DumpEntry{top.signalBank.reg[59].fir});
        res.insert_or_assign("top.signalBank.reg[60].fir", DumpEntry{top.signalBank.reg[60].fir});
        res.insert_or_assign("top.signalBank.reg[61].fir", DumpEntry{top.signalBank.reg[61].fir});
        res.insert_or_assign("top.signalBank.vloop[0].fir", DumpEntry{top.signalBank.vloop[0].fir});
        res.insert_or_assign("top.signalBank.vloop[1].fir", DumpEntry{top.signalBank.vloop[1].fir});
        res.insert_or_assign("top.signalBank.vloop[2].fir", DumpEntry{top.signalBank.vloop[2].fir});
        res.insert_or_assign("top.signalBank.vloop[3].fir", DumpEntry{top.signalBank.vloop[3].fir});
        res.insert_or_assign("top.signalBank.vloop[4].fir", DumpEntry{top.signalBank.vloop[4].fir});
        res.insert_or_assign("top.signalBank.vloop[5].fir", DumpEntry{top.signalBank.vloop[5].fir});
        res.insert_or_assign("top.signalBank.vloop[6].fir", DumpEntry{top.signalBank.vloop[6].fir});
        res.insert_or_assign("top.signalBank.vloop[7].fir", DumpEntry{top.signalBank.vloop[7].fir});
        res.insert_or_assign("top.signalBank.vloop[8].fir", DumpEntry{top.signalBank.vloop[8].fir});
        res.insert_or_assign("top.signalBank.vloop[9].fir", DumpEntry{top.signalBank.vloop[9].fir});
        res.insert_or_assign("top.signalBank.vloop[10].fir", DumpEntry{top.signalBank.vloop[10].fir});
        res.insert_or_assign("top.signalBank.vloop[11].fir", DumpEntry{top.signalBank.vloop[11].fir});
        res.insert_or_assign("top.signalBank.vloop[12].fir", DumpEntry{top.signalBank.vloop[12].fir});
        res.insert_or_assign("top.signalBank.vloop[13].fir", DumpEntry{top.signalBank.vloop[13].fir});
        res.insert_or_assign("top.signalBank.vloop[14].fir", DumpEntry{top.signalBank.vloop[14].fir});
        res.insert_or_assign("top.signalBank.vloop[15].fir", DumpEntry{top.signalBank.vloop[15].fir});
        res.insert_or_assign("top.signalBank.vloop[16].fir", DumpEntry{top.signalBank.vloop[16].fir});
        res.insert_or_assign("top.signalBank.vloop[17].fir", DumpEntry{top.signalBank.vloop[17].fir});
        res.insert_or_assign("top.signalBank.vloop[18].fir", DumpEntry{top.signalBank.vloop[18].fir});
        res.insert_or_assign("top.signalBank.vloop[19].fir", DumpEntry{top.signalBank.vloop[19].fir});
        res.insert_or_assign("top.signalBank.vloop[20].fir", DumpEntry{top.signalBank.vloop[20].fir});
        res.insert_or_assign("top.signalBank.vloop[21].fir", DumpEntry{top.signalBank.vloop[21].fir});
        res.insert_or_assign("top.signalBank.vloop[22].fir", DumpEntry{top.signalBank.vloop[22].fir});
        res.insert_or_assign("top.signalBank.vloop[23].fir", DumpEntry{top.signalBank.vloop[23].fir});
        res.insert_or_assign("top.signalBank.vloop[24].fir", DumpEntry{top.signalBank.vloop[24].fir});
        res.insert_or_assign("top.signalBank.vloop[25].fir", DumpEntry{top.signalBank.vloop[25].fir});
        res.insert_or_assign("top.signalBank.vloop[26].fir", DumpEntry{top.signalBank.vloop[26].fir});
        res.insert_or_assign("top.signalBank.vloop[27].fir", DumpEntry{top.signalBank.vloop[27].fir});
        res.insert_or_assign("top.signalBank.vloop[28].fir", DumpEntry{top.signalBank.vloop[28].fir});
        res.insert_or_assign("top.signalBank.vloop[29].fir", DumpEntry{top.signalBank.vloop[29].fir});
        res.insert_or_assign("top.signalBank.vloop[30].fir", DumpEntry{top.signalBank.vloop[30].fir});
        res.insert_or_assign("top.signalBank.vloop[31].fir", DumpEntry{top.signalBank.vloop[31].fir});
        res.insert_or_assign("top.signalBank.vloop[32].fir", DumpEntry{top.signalBank.vloop[32].fir});
        res.insert_or_assign("top.signalBank.vloop[33].fir", DumpEntry{top.signalBank.vloop[33].fir});
        res.insert_or_assign("top.signalBank.vloop[34].fir", DumpEntry{top.signalBank.vloop[34].fir});
        res.insert_or_assign("top.signalBank.vloop[35].fir", DumpEntry{top.signalBank.vloop[35].fir});
        res.insert_or_assign("top.signalBank.vloop[36].fir", DumpEntry{top.signalBank.vloop[36].fir});
        res.insert_or_assign("top.signalBank.vloop[37].fir", DumpEntry{top.signalBank.vloop[37].fir});
        res.insert_or_assign("top.signalBank.vloop[38].fir", DumpEntry{top.signalBank.vloop[38].fir});
        res.insert_or_assign("top.signalBank.vloop[39].fir", DumpEntry{top.signalBank.vloop[39].fir});
        res.insert_or_assign("top.signalBank.vloop[40].fir", DumpEntry{top.signalBank.vloop[40].fir});
        res.insert_or_assign("top.signalBank.vloop[41].fir", DumpEntry{top.signalBank.vloop[41].fir});
        res.insert_or_assign("top.signalBank.vloop[42].fir", DumpEntry{top.signalBank.vloop[42].fir});
        res.insert_or_assign("top.signalBank.vloop[43].fir", DumpEntry{top.signalBank.vloop[43].fir});
        res.insert_or_assign("top.signalBank.vloop[44].fir", DumpEntry{top.signalBank.vloop[44].fir});
        res.insert_or_assign("top.signalBank.vloop[45].fir", DumpEntry{top.signalBank.vloop[45].fir});
        res.insert_or_assign("top.signalBank.vloop[46].fir", DumpEntry{top.signalBank.vloop[46].fir});
        res.insert_or_assign("top.signalBank.vloop[47].fir", DumpEntry{top.signalBank.vloop[47].fir});
        res.insert_or_assign("top.signalBank.vloop[48].fir", DumpEntry{top.signalBank.vloop[48].fir});
        res.insert_or_assign("top.signalBank.vloop[49].fir", DumpEntry{top.signalBank.vloop[49].fir});
        res.insert_or_assign("top.signalBank.vloop[50].fir", DumpEntry{top.signalBank.vloop[50].fir});
        res.insert_or_assign("top.signalBank.vloop[51].fir", DumpEntry{top.signalBank.vloop[51].fir});
        res.insert_or_assign("top.signalBank.vloop[52].fir", DumpEntry{top.signalBank.vloop[52].fir});
        res.insert_or_assign("top.signalBank.vloop[53].fir", DumpEntry{top.signalBank.vloop[53].fir});
        res.insert_or_assign("top.signalBank.vloop[54].fir", DumpEntry{top.signalBank.vloop[54].fir});
        res.insert_or_assign("top.signalBank.vloop[55].fir", DumpEntry{top.signalBank.vloop[55].fir});
        res.insert_or_assign("top.signalBank.vloop[56].fir", DumpEntry{top.signalBank.vloop[56].fir});
        res.insert_or_assign("top.signalBank.vloop[57].fir", DumpEntry{top.signalBank.vloop[57].fir});
        res.insert_or_assign("top.signalBank.vloop[58].fir", DumpEntry{top.signalBank.vloop[58].fir});
        res.insert_or_assign("top.signalBank.vloop[59].fir", DumpEntry{top.signalBank.vloop[59].fir});
        res.insert_or_assign("top.signalBank.vloop[60].fir", DumpEntry{top.signalBank.vloop[60].fir});
        res.insert_or_assign("top.signalBank.vloop[61].fir", DumpEntry{top.signalBank.vloop[61].fir});
        res.insert_or_assign("top.signalBank.raw[0].raw", DumpEntry{top.signalBank.raw[0].raw});
        res.insert_or_assign("top.signalBank.raw[1].raw", DumpEntry{top.signalBank.raw[1].raw});
        res.insert_or_assign("top.signalBank.raw[2].raw", DumpEntry{top.signalBank.raw[2].raw});
        res.insert_or_assign("top.signalBank.raw[3].raw", DumpEntry{top.signalBank.raw[3].raw});
        res.insert_or_assign("top.signalBank.raw[4].raw", DumpEntry{top.signalBank.raw[4].raw});
        res.insert_or_assign("top.signalBank.raw[5].raw", DumpEntry{top.signalBank.raw[5].raw});
        res.insert_or_assign("top.signalBank.raw[6].raw", DumpEntry{top.signalBank.raw[6].raw});
        res.insert_or_assign("top.signalBank.raw[7].raw", DumpEntry{top.signalBank.raw[7].raw});
        res.insert_or_assign("top.signalBank.raw[8].raw", DumpEntry{top.signalBank.raw[8].raw});
        res.insert_or_assign("top.signalBank.raw[9].raw", DumpEntry{top.signalBank.raw[9].raw});
        res.insert_or_assign("top.signalBank.raw[10].raw", DumpEntry{top.signalBank.raw[10].raw});
        res.insert_or_assign("top.signalBank.raw[11].raw", DumpEntry{top.signalBank.raw[11].raw});
        res.insert_or_assign("top.signalBank.raw[12].raw", DumpEntry{top.signalBank.raw[12].raw});
        res.insert_or_assign("top.signalBank.raw[13].raw", DumpEntry{top.signalBank.raw[13].raw});
        res.insert_or_assign("top.signalBank.raw[14].raw", DumpEntry{top.signalBank.raw[14].raw});
        res.insert_or_assign("top.signalBank.raw[15].raw", DumpEntry{top.signalBank.raw[15].raw});
        res.insert_or_assign("top.signalBank.raw[16].raw", DumpEntry{top.signalBank.raw[16].raw});
        res.insert_or_assign("top.signalBank.raw[17].raw", DumpEntry{top.signalBank.raw[17].raw});
        res.insert_or_assign("top.signalBank.raw[18].raw", DumpEntry{top.signalBank.raw[18].raw});
        res.insert_or_assign("top.signalBank.raw[19].raw", DumpEntry{top.signalBank.raw[19].raw});
        res.insert_or_assign("top.signalBank.raw[20].raw", DumpEntry{top.signalBank.raw[20].raw});
        res.insert_or_assign("top.signalBank.raw[21].raw", DumpEntry{top.signalBank.raw[21].raw});
        res.insert_or_assign("top.signalBank.raw[22].raw", DumpEntry{top.signalBank.raw[22].raw});
        res.insert_or_assign("top.signalBank.raw[23].raw", DumpEntry{top.signalBank.raw[23].raw});
        res.insert_or_assign("top.signalBank.raw[24].raw", DumpEntry{top.signalBank.raw[24].raw});
        res.insert_or_assign("top.signalBank.raw[25].raw", DumpEntry{top.signalBank.raw[25].raw});
        res.insert_or_assign("top.signalBank.raw[26].raw", DumpEntry{top.signalBank.raw[26].raw});
        res.insert_or_assign("top.signalBank.raw[27].raw", DumpEntry{top.signalBank.raw[27].raw});
        res.insert_or_assign("top.signalBank.raw[28].raw", DumpEntry{top.signalBank.raw[28].raw});
        res.insert_or_assign("top.signalBank.raw[29].raw", DumpEntry{top.signalBank.raw[29].raw});
        res.insert_or_assign("top.signalBank.raw[30].raw", DumpEntry{top.signalBank.raw[30].raw});
        res.insert_or_assign("top.signalBank.raw[31].raw", DumpEntry{top.signalBank.raw[31].raw});
        res.insert_or_assign("top.signalBank.raw[32].raw", DumpEntry{top.signalBank.raw[32].raw});
        res.insert_or_assign("top.signalBank.raw[33].raw", DumpEntry{top.signalBank.raw[33].raw});
        res.insert_or_assign("top.signalBank.raw[34].raw", DumpEntry{top.signalBank.raw[34].raw});
        res.insert_or_assign("top.signalBank.raw[35].raw", DumpEntry{top.signalBank.raw[35].raw});
        res.insert_or_assign("top.signalBank.raw[36].raw", DumpEntry{top.signalBank.raw[36].raw});
        res.insert_or_assign("top.signalBank.raw[37].raw", DumpEntry{top.signalBank.raw[37].raw});
        res.insert_or_assign("top.signalBank.raw[38].raw", DumpEntry{top.signalBank.raw[38].raw});
        res.insert_or_assign("top.signalBank.raw[39].raw", DumpEntry{top.signalBank.raw[39].raw});
        res.insert_or_assign("top.signalBank.raw[40].raw", DumpEntry{top.signalBank.raw[40].raw});
        res.insert_or_assign("top.signalBank.raw[41].raw", DumpEntry{top.signalBank.raw[41].raw});
        res.insert_or_assign("top.signalBank.raw[42].raw", DumpEntry{top.signalBank.raw[42].raw});
        res.insert_or_assign("top.signalBank.raw[43].raw", DumpEntry{top.signalBank.raw[43].raw});
        res.insert_or_assign("top.signalBank.raw[44].raw", DumpEntry{top.signalBank.raw[44].raw});
        res.insert_or_assign("top.signalBank.raw[45].raw", DumpEntry{top.signalBank.raw[45].raw});
        res.insert_or_assign("top.signalBank.raw[46].raw", DumpEntry{top.signalBank.raw[46].raw});
        res.insert_or_assign("top.signalBank.raw[47].raw", DumpEntry{top.signalBank.raw[47].raw});
        res.insert_or_assign("top.signalBank.raw[48].raw", DumpEntry{top.signalBank.raw[48].raw});
        res.insert_or_assign("top.signalBank.raw[49].raw", DumpEntry{top.signalBank.raw[49].raw});
        res.insert_or_assign("top.signalBank.raw[50].raw", DumpEntry{top.signalBank.raw[50].raw});
        res.insert_or_assign("top.signalBank.raw[51].raw", DumpEntry{top.signalBank.raw[51].raw});
        res.insert_or_assign("top.signalBank.raw[52].raw", DumpEntry{top.signalBank.raw[52].raw});
        res.insert_or_assign("top.signalBank.raw[53].raw", DumpEntry{top.signalBank.raw[53].raw});
        res.insert_or_assign("top.signalBank.raw[54].raw", DumpEntry{top.signalBank.raw[54].raw});
        res.insert_or_assign("top.signalBank.raw[55].raw", DumpEntry{top.signalBank.raw[55].raw});
        res.insert_or_assign("top.signalBank.raw[56].raw", DumpEntry{top.signalBank.raw[56].raw});
        res.insert_or_assign("top.signalBank.raw[57].raw", DumpEntry{top.signalBank.raw[57].raw});
        res.insert_or_assign("top.signalBank.raw[58].raw", DumpEntry{top.signalBank.raw[58].raw});
        res.insert_or_assign("top.signalBank.raw[59].raw", DumpEntry{top.signalBank.raw[59].raw});
        res.insert_or_assign("top.signalBank.raw[60].raw", DumpEntry{top.signalBank.raw[60].raw});
        res.insert_or_assign("top.signalBank.raw[61].raw", DumpEntry{top.signalBank.raw[61].raw});
        res.insert_or_assign("top.signalBank.mm[0].fir", DumpEntry{top.signalBank.mm[0].fir});
        res.insert_or_assign("top.signalBank.mm[1].fir", DumpEntry{top.signalBank.mm[1].fir});
        res.insert_or_assign("top.signalBank.mm[2].fir", DumpEntry{top.signalBank.mm[2].fir});
        res.insert_or_assign("top.signalBank.mm[3].fir", DumpEntry{top.signalBank.mm[3].fir});
        res.insert_or_assign("top.signalBank.mm[4].fir", DumpEntry{top.signalBank.mm[4].fir});
        res.insert_or_assign("top.signalBank.mm[5].fir", DumpEntry{top.signalBank.mm[5].fir});
        res.insert_or_assign("top.signalBank.mm[6].fir", DumpEntry{top.signalBank.mm[6].fir});
        res.insert_or_assign("top.signalBank.mm[7].fir", DumpEntry{top.signalBank.mm[7].fir});
        res.insert_or_assign("top.signalBank.mm[8].fir", DumpEntry{top.signalBank.mm[8].fir});
        res.insert_or_assign("top.signalBank.mm[9].fir", DumpEntry{top.signalBank.mm[9].fir});
        res.insert_or_assign("top.signalBank.mm[10].fir", DumpEntry{top.signalBank.mm[10].fir});
        res.insert_or_assign("top.signalBank.mm[11].fir", DumpEntry{top.signalBank.mm[11].fir});
        res.insert_or_assign("top.signalBank.mm[12].fir", DumpEntry{top.signalBank.mm[12].fir});
        res.insert_or_assign("top.signalBank.mm[13].fir", DumpEntry{top.signalBank.mm[13].fir});
        res.insert_or_assign("top.signalBank.mm[14].fir", DumpEntry{top.signalBank.mm[14].fir});
        res.insert_or_assign("top.signalBank.mm[15].fir", DumpEntry{top.signalBank.mm[15].fir});
        res.insert_or_assign("top.signalBank.mm[16].fir", DumpEntry{top.signalBank.mm[16].fir});
        res.insert_or_assign("top.signalBank.mm[17].fir", DumpEntry{top.signalBank.mm[17].fir});
        res.insert_or_assign("top.signalBank.mm[18].fir", DumpEntry{top.signalBank.mm[18].fir});
        res.insert_or_assign("top.signalBank.mm[19].fir", DumpEntry{top.signalBank.mm[19].fir});
        res.insert_or_assign("top.signalBank.mm[20].fir", DumpEntry{top.signalBank.mm[20].fir});
        res.insert_or_assign("top.signalBank.mm[21].fir", DumpEntry{top.signalBank.mm[21].fir});
        res.insert_or_assign("top.signalBank.mm[22].fir", DumpEntry{top.signalBank.mm[22].fir});
        res.insert_or_assign("top.signalBank.mm[23].fir", DumpEntry{top.signalBank.mm[23].fir});
        res.insert_or_assign("top.signalBank.mm[24].fir", DumpEntry{top.signalBank.mm[24].fir});
        res.insert_or_assign("top.signalBank.mm[25].fir", DumpEntry{top.signalBank.mm[25].fir});
        res.insert_or_assign("top.signalBank.mm[26].fir", DumpEntry{top.signalBank.mm[26].fir});
        res.insert_or_assign("top.signalBank.mm[27].fir", DumpEntry{top.signalBank.mm[27].fir});
        res.insert_or_assign("top.signalBank.mm[28].fir", DumpEntry{top.signalBank.mm[28].fir});
        res.insert_or_assign("top.signalBank.mm[29].fir", DumpEntry{top.signalBank.mm[29].fir});
        res.insert_or_assign("top.signalBank.mm[30].fir", DumpEntry{top.signalBank.mm[30].fir});
        res.insert_or_assign("top.signalBank.mm[31].fir", DumpEntry{top.signalBank.mm[31].fir});
        res.insert_or_assign("top.signalBank.mm[32].fir", DumpEntry{top.signalBank.mm[32].fir});
        res.insert_or_assign("top.signalBank.mm[33].fir", DumpEntry{top.signalBank.mm[33].fir});
        res.insert_or_assign("top.signalBank.mm[34].fir", DumpEntry{top.signalBank.mm[34].fir});
        res.insert_or_assign("top.signalBank.mm[35].fir", DumpEntry{top.signalBank.mm[35].fir});
        res.insert_or_assign("top.signalBank.mm[36].fir", DumpEntry{top.signalBank.mm[36].fir});
        res.insert_or_assign("top.signalBank.mm[37].fir", DumpEntry{top.signalBank.mm[37].fir});
        res.insert_or_assign("top.signalBank.mm[38].fir", DumpEntry{top.signalBank.mm[38].fir});
        res.insert_or_assign("top.signalBank.mm[39].fir", DumpEntry{top.signalBank.mm[39].fir});
        res.insert_or_assign("top.signalBank.mm[40].fir", DumpEntry{top.signalBank.mm[40].fir});
        res.insert_or_assign("top.signalBank.mm[41].fir", DumpEntry{top.signalBank.mm[41].fir});
        res.insert_or_assign("top.signalBank.mm[42].fir", DumpEntry{top.signalBank.mm[42].fir});
        res.insert_or_assign("top.signalBank.mm[43].fir", DumpEntry{top.signalBank.mm[43].fir});
        res.insert_or_assign("top.signalBank.mm[44].fir", DumpEntry{top.signalBank.mm[44].fir});
        res.insert_or_assign("top.signalBank.mm[45].fir", DumpEntry{top.signalBank.mm[45].fir});
        res.insert_or_assign("top.signalBank.mm[46].fir", DumpEntry{top.signalBank.mm[46].fir});
        res.insert_or_assign("top.signalBank.mm[47].fir", DumpEntry{top.signalBank.mm[47].fir});
        res.insert_or_assign("top.signalBank.mm[48].fir", DumpEntry{top.signalBank.mm[48].fir});
        res.insert_or_assign("top.signalBank.mm[49].fir", DumpEntry{top.signalBank.mm[49].fir});
        res.insert_or_assign("top.signalBank.mm[50].fir", DumpEntry{top.signalBank.mm[50].fir});
        res.insert_or_assign("top.signalBank.mm[51].fir", DumpEntry{top.signalBank.mm[51].fir});
        res.insert_or_assign("top.signalBank.mm[52].fir", DumpEntry{top.signalBank.mm[52].fir});
        res.insert_or_assign("top.signalBank.mm[53].fir", DumpEntry{top.signalBank.mm[53].fir});
        res.insert_or_assign("top.signalBank.mm[54].fir", DumpEntry{top.signalBank.mm[54].fir});
        res.insert_or_assign("top.signalBank.mm[55].fir", DumpEntry{top.signalBank.mm[55].fir});
        res.insert_or_assign("top.signalBank.mm[56].fir", DumpEntry{top.signalBank.mm[56].fir});
        res.insert_or_assign("top.signalBank.mm[57].fir", DumpEntry{top.signalBank.mm[57].fir});
        res.insert_or_assign("top.signalBank.mm[58].fir", DumpEntry{top.signalBank.mm[58].fir});
        res.insert_or_assign("top.signalBank.mm[59].fir", DumpEntry{top.signalBank.mm[59].fir});
        res.insert_or_assign("top.signalBank.mm[60].fir", DumpEntry{top.signalBank.mm[60].fir});
        res.insert_or_assign("top.signalBank.mm[61].fir", DumpEntry{top.signalBank.mm[61].fir});
        res.insert_or_assign("top.signalBank.ms[0].fir", DumpEntry{top.signalBank.ms[0].fir});
        res.insert_or_assign("top.signalBank.ms[1].fir", DumpEntry{top.signalBank.ms[1].fir});
        res.insert_or_assign("top.signalBank.ms[2].fir", DumpEntry{top.signalBank.ms[2].fir});
        res.insert_or_assign("top.signalBank.ms[3].fir", DumpEntry{top.signalBank.ms[3].fir});
        res.insert_or_assign("top.signalBank.ms[4].fir", DumpEntry{top.signalBank.ms[4].fir});
        res.insert_or_assign("top.signalBank.ms[5].fir", DumpEntry{top.signalBank.ms[5].fir});
        res.insert_or_assign("top.signalBank.ms[6].fir", DumpEntry{top.signalBank.ms[6].fir});
        res.insert_or_assign("top.signalBank.ms[7].fir", DumpEntry{top.signalBank.ms[7].fir});
        res.insert_or_assign("top.signalBank.ms[8].fir", DumpEntry{top.signalBank.ms[8].fir});
        res.insert_or_assign("top.signalBank.ms[9].fir", DumpEntry{top.signalBank.ms[9].fir});
        res.insert_or_assign("top.signalBank.ms[10].fir", DumpEntry{top.signalBank.ms[10].fir});
        res.insert_or_assign("top.signalBank.ms[11].fir", DumpEntry{top.signalBank.ms[11].fir});
        res.insert_or_assign("top.signalBank.ms[12].fir", DumpEntry{top.signalBank.ms[12].fir});
        res.insert_or_assign("top.signalBank.ms[13].fir", DumpEntry{top.signalBank.ms[13].fir});
        res.insert_or_assign("top.signalBank.ms[14].fir", DumpEntry{top.signalBank.ms[14].fir});
        res.insert_or_assign("top.signalBank.ms[15].fir", DumpEntry{top.signalBank.ms[15].fir});
        res.insert_or_assign("top.signalBank.ms[16].fir", DumpEntry{top.signalBank.ms[16].fir});
        res.insert_or_assign("top.signalBank.ms[17].fir", DumpEntry{top.signalBank.ms[17].fir});
        res.insert_or_assign("top.signalBank.ms[18].fir", DumpEntry{top.signalBank.ms[18].fir});
        res.insert_or_assign("top.signalBank.ms[19].fir", DumpEntry{top.signalBank.ms[19].fir});
        res.insert_or_assign("top.signalBank.ms[20].fir", DumpEntry{top.signalBank.ms[20].fir});
        res.insert_or_assign("top.signalBank.ms[21].fir", DumpEntry{top.signalBank.ms[21].fir});
        res.insert_or_assign("top.signalBank.ms[22].fir", DumpEntry{top.signalBank.ms[22].fir});
        res.insert_or_assign("top.signalBank.ms[23].fir", DumpEntry{top.signalBank.ms[23].fir});
        res.insert_or_assign("top.signalBank.ms[24].fir", DumpEntry{top.signalBank.ms[24].fir});
        res.insert_or_assign("top.signalBank.ms[25].fir", DumpEntry{top.signalBank.ms[25].fir});
        res.insert_or_assign("top.signalBank.ms[26].fir", DumpEntry{top.signalBank.ms[26].fir});
        res.insert_or_assign("top.signalBank.ms[27].fir", DumpEntry{top.signalBank.ms[27].fir});
        res.insert_or_assign("top.signalBank.ms[28].fir", DumpEntry{top.signalBank.ms[28].fir});
        res.insert_or_assign("top.signalBank.ms[29].fir", DumpEntry{top.signalBank.ms[29].fir});
        res.insert_or_assign("top.signalBank.ms[30].fir", DumpEntry{top.signalBank.ms[30].fir});
        res.insert_or_assign("top.signalBank.ms[31].fir", DumpEntry{top.signalBank.ms[31].fir});
        res.insert_or_assign("top.signalBank.ms[32].fir", DumpEntry{top.signalBank.ms[32].fir});
        res.insert_or_assign("top.signalBank.ms[33].fir", DumpEntry{top.signalBank.ms[33].fir});
        res.insert_or_assign("top.signalBank.ms[34].fir", DumpEntry{top.signalBank.ms[34].fir});
        res.insert_or_assign("top.signalBank.ms[35].fir", DumpEntry{top.signalBank.ms[35].fir});
        res.insert_or_assign("top.signalBank.ms[36].fir", DumpEntry{top.signalBank.ms[36].fir});
        res.insert_or_assign("top.signalBank.ms[37].fir", DumpEntry{top.signalBank.ms[37].fir});
        res.insert_or_assign("top.signalBank.ms[38].fir", DumpEntry{top.signalBank.ms[38].fir});
        res.insert_or_assign("top.signalBank.ms[39].fir", DumpEntry{top.signalBank.ms[39].fir});
        res.insert_or_assign("top.signalBank.ms[40].fir", DumpEntry{top.signalBank.ms[40].fir});
        res.insert_or_assign("top.signalBank.ms[41].fir", DumpEntry{top.signalBank.ms[41].fir});
        res.insert_or_assign("top.signalBank.ms[42].fir", DumpEntry{top.signalBank.ms[42].fir});
        res.insert_or_assign("top.signalBank.ms[43].fir", DumpEntry{top.signalBank.ms[43].fir});
        res.insert_or_assign("top.signalBank.ms[44].fir", DumpEntry{top.signalBank.ms[44].fir});
        res.insert_or_assign("top.signalBank.ms[45].fir", DumpEntry{top.signalBank.ms[45].fir});
        res.insert_or_assign("top.signalBank.ms[46].fir", DumpEntry{top.signalBank.ms[46].fir});
        res.insert_or_assign("top.signalBank.ms[47].fir", DumpEntry{top.signalBank.ms[47].fir});
        res.insert_or_assign("top.signalBank.ms[48].fir", DumpEntry{top.signalBank.ms[48].fir});
        res.insert_or_assign("top.signalBank.ms[49].fir", DumpEntry{top.signalBank.ms[49].fir});
        res.insert_or_assign("top.signalBank.ms[50].fir", DumpEntry{top.signalBank.ms[50].fir});
        res.insert_or_assign("top.signalBank.ms[51].fir", DumpEntry{top.signalBank.ms[51].fir});
        res.insert_or_assign("top.signalBank.ms[52].fir", DumpEntry{top.signalBank.ms[52].fir});
        res.insert_or_assign("top.signalBank.ms[53].fir", DumpEntry{top.signalBank.ms[53].fir});
        res.insert_or_assign("top.signalBank.ms[54].fir", DumpEntry{top.signalBank.ms[54].fir});
        res.insert_or_assign("top.signalBank.ms[55].fir", DumpEntry{top.signalBank.ms[55].fir});
        res.insert_or_assign("top.signalBank.ms[56].fir", DumpEntry{top.signalBank.ms[56].fir});
        res.insert_or_assign("top.signalBank.ms[57].fir", DumpEntry{top.signalBank.ms[57].fir});
        res.insert_or_assign("top.signalBank.ms[58].fir", DumpEntry{top.signalBank.ms[58].fir});
        res.insert_or_assign("top.signalBank.ms[59].fir", DumpEntry{top.signalBank.ms[59].fir});
        res.insert_or_assign("top.signalBank.ms[60].fir", DumpEntry{top.signalBank.ms[60].fir});
        res.insert_or_assign("top.signalBank.ms[61].fir", DumpEntry{top.signalBank.ms[61].fir});
        res.insert_or_assign("top.analogFir.channel[0].rFir.m", DumpEntry{top.analogFir.channel[0].rFir.m});
        res.insert_or_assign("top.analogFir.channel[0].rFir.n", DumpEntry{top.analogFir.channel[0].rFir.n});
        res.insert_or_assign("top.analogFir.channel[0].rFir.s", DumpEntry{top.analogFir.channel[0].rFir.s});
        res.insert_or_assign("top.analogFir.channel[0].rFir.r", DumpEntry{top.analogFir.channel[0].rFir.r});
        res.insert_or_assign("top.analogFir.channel[0].rFir.tSc", DumpEntry{top.analogFir.channel[0].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].rFir.phase", DumpEntry{top.analogFir.channel[0].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[0].vFir.m", DumpEntry{top.analogFir.channel[0].vFir.m});
        res.insert_or_assign("top.analogFir.channel[0].vFir.n", DumpEntry{top.analogFir.channel[0].vFir.n});
        res.insert_or_assign("top.analogFir.channel[0].vFir.s", DumpEntry{top.analogFir.channel[0].vFir.s});
        res.insert_or_assign("top.analogFir.channel[0].vFir.r", DumpEntry{top.analogFir.channel[0].vFir.r});
        res.insert_or_assign("top.analogFir.channel[0].vFir.tSc", DumpEntry{top.analogFir.channel[0].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].vFir.phase", DumpEntry{top.analogFir.channel[0].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.m", DumpEntry{top.analogFir.channel[0].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.n", DumpEntry{top.analogFir.channel[0].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.s", DumpEntry{top.analogFir.channel[0].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.r", DumpEntry{top.analogFir.channel[0].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.tSc", DumpEntry{top.analogFir.channel[0].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.phase", DumpEntry{top.analogFir.channel[0].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.maxLimit", DumpEntry{top.analogFir.channel[0].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.minLimit", DumpEntry{top.analogFir.channel[0].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.filterLength", DumpEntry{top.analogFir.channel[0].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[1].rFir.m", DumpEntry{top.analogFir.channel[1].rFir.m});
        res.insert_or_assign("top.analogFir.channel[1].rFir.n", DumpEntry{top.analogFir.channel[1].rFir.n});
        res.insert_or_assign("top.analogFir.channel[1].rFir.s", DumpEntry{top.analogFir.channel[1].rFir.s});
        res.insert_or_assign("top.analogFir.channel[1].rFir.r", DumpEntry{top.analogFir.channel[1].rFir.r});
        res.insert_or_assign("top.analogFir.channel[1].rFir.tSc", DumpEntry{top.analogFir.channel[1].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].rFir.phase", DumpEntry{top.analogFir.channel[1].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[1].vFir.m", DumpEntry{top.analogFir.channel[1].vFir.m});
        res.insert_or_assign("top.analogFir.channel[1].vFir.n", DumpEntry{top.analogFir.channel[1].vFir.n});
        res.insert_or_assign("top.analogFir.channel[1].vFir.s", DumpEntry{top.analogFir.channel[1].vFir.s});
        res.insert_or_assign("top.analogFir.channel[1].vFir.r", DumpEntry{top.analogFir.channel[1].vFir.r});
        res.insert_or_assign("top.analogFir.channel[1].vFir.tSc", DumpEntry{top.analogFir.channel[1].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].vFir.phase", DumpEntry{top.analogFir.channel[1].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.m", DumpEntry{top.analogFir.channel[1].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.n", DumpEntry{top.analogFir.channel[1].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.s", DumpEntry{top.analogFir.channel[1].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.r", DumpEntry{top.analogFir.channel[1].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.tSc", DumpEntry{top.analogFir.channel[1].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.phase", DumpEntry{top.analogFir.channel[1].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.maxLimit", DumpEntry{top.analogFir.channel[1].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.minLimit", DumpEntry{top.analogFir.channel[1].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.filterLength", DumpEntry{top.analogFir.channel[1].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[2].rFir.m", DumpEntry{top.analogFir.channel[2].rFir.m});
        res.insert_or_assign("top.analogFir.channel[2].rFir.n", DumpEntry{top.analogFir.channel[2].rFir.n});
        res.insert_or_assign("top.analogFir.channel[2].rFir.s", DumpEntry{top.analogFir.channel[2].rFir.s});
        res.insert_or_assign("top.analogFir.channel[2].rFir.r", DumpEntry{top.analogFir.channel[2].rFir.r});
        res.insert_or_assign("top.analogFir.channel[2].rFir.tSc", DumpEntry{top.analogFir.channel[2].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].rFir.phase", DumpEntry{top.analogFir.channel[2].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[2].vFir.m", DumpEntry{top.analogFir.channel[2].vFir.m});
        res.insert_or_assign("top.analogFir.channel[2].vFir.n", DumpEntry{top.analogFir.channel[2].vFir.n});
        res.insert_or_assign("top.analogFir.channel[2].vFir.s", DumpEntry{top.analogFir.channel[2].vFir.s});
        res.insert_or_assign("top.analogFir.channel[2].vFir.r", DumpEntry{top.analogFir.channel[2].vFir.r});
        res.insert_or_assign("top.analogFir.channel[2].vFir.tSc", DumpEntry{top.analogFir.channel[2].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].vFir.phase", DumpEntry{top.analogFir.channel[2].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.m", DumpEntry{top.analogFir.channel[2].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.n", DumpEntry{top.analogFir.channel[2].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.s", DumpEntry{top.analogFir.channel[2].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.r", DumpEntry{top.analogFir.channel[2].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.tSc", DumpEntry{top.analogFir.channel[2].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.phase", DumpEntry{top.analogFir.channel[2].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.maxLimit", DumpEntry{top.analogFir.channel[2].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.minLimit", DumpEntry{top.analogFir.channel[2].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.filterLength", DumpEntry{top.analogFir.channel[2].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[3].rFir.m", DumpEntry{top.analogFir.channel[3].rFir.m});
        res.insert_or_assign("top.analogFir.channel[3].rFir.n", DumpEntry{top.analogFir.channel[3].rFir.n});
        res.insert_or_assign("top.analogFir.channel[3].rFir.s", DumpEntry{top.analogFir.channel[3].rFir.s});
        res.insert_or_assign("top.analogFir.channel[3].rFir.r", DumpEntry{top.analogFir.channel[3].rFir.r});
        res.insert_or_assign("top.analogFir.channel[3].rFir.tSc", DumpEntry{top.analogFir.channel[3].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].rFir.phase", DumpEntry{top.analogFir.channel[3].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[3].vFir.m", DumpEntry{top.analogFir.channel[3].vFir.m});
        res.insert_or_assign("top.analogFir.channel[3].vFir.n", DumpEntry{top.analogFir.channel[3].vFir.n});
        res.insert_or_assign("top.analogFir.channel[3].vFir.s", DumpEntry{top.analogFir.channel[3].vFir.s});
        res.insert_or_assign("top.analogFir.channel[3].vFir.r", DumpEntry{top.analogFir.channel[3].vFir.r});
        res.insert_or_assign("top.analogFir.channel[3].vFir.tSc", DumpEntry{top.analogFir.channel[3].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].vFir.phase", DumpEntry{top.analogFir.channel[3].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.m", DumpEntry{top.analogFir.channel[3].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.n", DumpEntry{top.analogFir.channel[3].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.s", DumpEntry{top.analogFir.channel[3].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.r", DumpEntry{top.analogFir.channel[3].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.tSc", DumpEntry{top.analogFir.channel[3].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.phase", DumpEntry{top.analogFir.channel[3].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.maxLimit", DumpEntry{top.analogFir.channel[3].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.minLimit", DumpEntry{top.analogFir.channel[3].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.filterLength", DumpEntry{top.analogFir.channel[3].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[4].rFir.m", DumpEntry{top.analogFir.channel[4].rFir.m});
        res.insert_or_assign("top.analogFir.channel[4].rFir.n", DumpEntry{top.analogFir.channel[4].rFir.n});
        res.insert_or_assign("top.analogFir.channel[4].rFir.s", DumpEntry{top.analogFir.channel[4].rFir.s});
        res.insert_or_assign("top.analogFir.channel[4].rFir.r", DumpEntry{top.analogFir.channel[4].rFir.r});
        res.insert_or_assign("top.analogFir.channel[4].rFir.tSc", DumpEntry{top.analogFir.channel[4].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].rFir.phase", DumpEntry{top.analogFir.channel[4].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[4].vFir.m", DumpEntry{top.analogFir.channel[4].vFir.m});
        res.insert_or_assign("top.analogFir.channel[4].vFir.n", DumpEntry{top.analogFir.channel[4].vFir.n});
        res.insert_or_assign("top.analogFir.channel[4].vFir.s", DumpEntry{top.analogFir.channel[4].vFir.s});
        res.insert_or_assign("top.analogFir.channel[4].vFir.r", DumpEntry{top.analogFir.channel[4].vFir.r});
        res.insert_or_assign("top.analogFir.channel[4].vFir.tSc", DumpEntry{top.analogFir.channel[4].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].vFir.phase", DumpEntry{top.analogFir.channel[4].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.m", DumpEntry{top.analogFir.channel[4].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.n", DumpEntry{top.analogFir.channel[4].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.s", DumpEntry{top.analogFir.channel[4].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.r", DumpEntry{top.analogFir.channel[4].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.tSc", DumpEntry{top.analogFir.channel[4].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.phase", DumpEntry{top.analogFir.channel[4].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.maxLimit", DumpEntry{top.analogFir.channel[4].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.minLimit", DumpEntry{top.analogFir.channel[4].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.filterLength", DumpEntry{top.analogFir.channel[4].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[5].rFir.m", DumpEntry{top.analogFir.channel[5].rFir.m});
        res.insert_or_assign("top.analogFir.channel[5].rFir.n", DumpEntry{top.analogFir.channel[5].rFir.n});
        res.insert_or_assign("top.analogFir.channel[5].rFir.s", DumpEntry{top.analogFir.channel[5].rFir.s});
        res.insert_or_assign("top.analogFir.channel[5].rFir.r", DumpEntry{top.analogFir.channel[5].rFir.r});
        res.insert_or_assign("top.analogFir.channel[5].rFir.tSc", DumpEntry{top.analogFir.channel[5].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].rFir.phase", DumpEntry{top.analogFir.channel[5].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[5].vFir.m", DumpEntry{top.analogFir.channel[5].vFir.m});
        res.insert_or_assign("top.analogFir.channel[5].vFir.n", DumpEntry{top.analogFir.channel[5].vFir.n});
        res.insert_or_assign("top.analogFir.channel[5].vFir.s", DumpEntry{top.analogFir.channel[5].vFir.s});
        res.insert_or_assign("top.analogFir.channel[5].vFir.r", DumpEntry{top.analogFir.channel[5].vFir.r});
        res.insert_or_assign("top.analogFir.channel[5].vFir.tSc", DumpEntry{top.analogFir.channel[5].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].vFir.phase", DumpEntry{top.analogFir.channel[5].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.m", DumpEntry{top.analogFir.channel[5].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.n", DumpEntry{top.analogFir.channel[5].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.s", DumpEntry{top.analogFir.channel[5].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.r", DumpEntry{top.analogFir.channel[5].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.tSc", DumpEntry{top.analogFir.channel[5].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.phase", DumpEntry{top.analogFir.channel[5].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.maxLimit", DumpEntry{top.analogFir.channel[5].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.minLimit", DumpEntry{top.analogFir.channel[5].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.filterLength", DumpEntry{top.analogFir.channel[5].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[6].rFir.m", DumpEntry{top.analogFir.channel[6].rFir.m});
        res.insert_or_assign("top.analogFir.channel[6].rFir.n", DumpEntry{top.analogFir.channel[6].rFir.n});
        res.insert_or_assign("top.analogFir.channel[6].rFir.s", DumpEntry{top.analogFir.channel[6].rFir.s});
        res.insert_or_assign("top.analogFir.channel[6].rFir.r", DumpEntry{top.analogFir.channel[6].rFir.r});
        res.insert_or_assign("top.analogFir.channel[6].rFir.tSc", DumpEntry{top.analogFir.channel[6].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].rFir.phase", DumpEntry{top.analogFir.channel[6].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[6].vFir.m", DumpEntry{top.analogFir.channel[6].vFir.m});
        res.insert_or_assign("top.analogFir.channel[6].vFir.n", DumpEntry{top.analogFir.channel[6].vFir.n});
        res.insert_or_assign("top.analogFir.channel[6].vFir.s", DumpEntry{top.analogFir.channel[6].vFir.s});
        res.insert_or_assign("top.analogFir.channel[6].vFir.r", DumpEntry{top.analogFir.channel[6].vFir.r});
        res.insert_or_assign("top.analogFir.channel[6].vFir.tSc", DumpEntry{top.analogFir.channel[6].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].vFir.phase", DumpEntry{top.analogFir.channel[6].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.m", DumpEntry{top.analogFir.channel[6].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.n", DumpEntry{top.analogFir.channel[6].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.s", DumpEntry{top.analogFir.channel[6].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.r", DumpEntry{top.analogFir.channel[6].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.tSc", DumpEntry{top.analogFir.channel[6].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.phase", DumpEntry{top.analogFir.channel[6].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.maxLimit", DumpEntry{top.analogFir.channel[6].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.minLimit", DumpEntry{top.analogFir.channel[6].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.filterLength", DumpEntry{top.analogFir.channel[6].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[7].rFir.m", DumpEntry{top.analogFir.channel[7].rFir.m});
        res.insert_or_assign("top.analogFir.channel[7].rFir.n", DumpEntry{top.analogFir.channel[7].rFir.n});
        res.insert_or_assign("top.analogFir.channel[7].rFir.s", DumpEntry{top.analogFir.channel[7].rFir.s});
        res.insert_or_assign("top.analogFir.channel[7].rFir.r", DumpEntry{top.analogFir.channel[7].rFir.r});
        res.insert_or_assign("top.analogFir.channel[7].rFir.tSc", DumpEntry{top.analogFir.channel[7].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].rFir.phase", DumpEntry{top.analogFir.channel[7].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[7].vFir.m", DumpEntry{top.analogFir.channel[7].vFir.m});
        res.insert_or_assign("top.analogFir.channel[7].vFir.n", DumpEntry{top.analogFir.channel[7].vFir.n});
        res.insert_or_assign("top.analogFir.channel[7].vFir.s", DumpEntry{top.analogFir.channel[7].vFir.s});
        res.insert_or_assign("top.analogFir.channel[7].vFir.r", DumpEntry{top.analogFir.channel[7].vFir.r});
        res.insert_or_assign("top.analogFir.channel[7].vFir.tSc", DumpEntry{top.analogFir.channel[7].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].vFir.phase", DumpEntry{top.analogFir.channel[7].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.m", DumpEntry{top.analogFir.channel[7].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.n", DumpEntry{top.analogFir.channel[7].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.s", DumpEntry{top.analogFir.channel[7].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.r", DumpEntry{top.analogFir.channel[7].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.tSc", DumpEntry{top.analogFir.channel[7].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.phase", DumpEntry{top.analogFir.channel[7].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.maxLimit", DumpEntry{top.analogFir.channel[7].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.minLimit", DumpEntry{top.analogFir.channel[7].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.filterLength", DumpEntry{top.analogFir.channel[7].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[8].rFir.m", DumpEntry{top.analogFir.channel[8].rFir.m});
        res.insert_or_assign("top.analogFir.channel[8].rFir.n", DumpEntry{top.analogFir.channel[8].rFir.n});
        res.insert_or_assign("top.analogFir.channel[8].rFir.s", DumpEntry{top.analogFir.channel[8].rFir.s});
        res.insert_or_assign("top.analogFir.channel[8].rFir.r", DumpEntry{top.analogFir.channel[8].rFir.r});
        res.insert_or_assign("top.analogFir.channel[8].rFir.tSc", DumpEntry{top.analogFir.channel[8].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].rFir.phase", DumpEntry{top.analogFir.channel[8].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[8].vFir.m", DumpEntry{top.analogFir.channel[8].vFir.m});
        res.insert_or_assign("top.analogFir.channel[8].vFir.n", DumpEntry{top.analogFir.channel[8].vFir.n});
        res.insert_or_assign("top.analogFir.channel[8].vFir.s", DumpEntry{top.analogFir.channel[8].vFir.s});
        res.insert_or_assign("top.analogFir.channel[8].vFir.r", DumpEntry{top.analogFir.channel[8].vFir.r});
        res.insert_or_assign("top.analogFir.channel[8].vFir.tSc", DumpEntry{top.analogFir.channel[8].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].vFir.phase", DumpEntry{top.analogFir.channel[8].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.m", DumpEntry{top.analogFir.channel[8].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.n", DumpEntry{top.analogFir.channel[8].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.s", DumpEntry{top.analogFir.channel[8].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.r", DumpEntry{top.analogFir.channel[8].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.tSc", DumpEntry{top.analogFir.channel[8].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.phase", DumpEntry{top.analogFir.channel[8].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.maxLimit", DumpEntry{top.analogFir.channel[8].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.minLimit", DumpEntry{top.analogFir.channel[8].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.filterLength", DumpEntry{top.analogFir.channel[8].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[9].rFir.m", DumpEntry{top.analogFir.channel[9].rFir.m});
        res.insert_or_assign("top.analogFir.channel[9].rFir.n", DumpEntry{top.analogFir.channel[9].rFir.n});
        res.insert_or_assign("top.analogFir.channel[9].rFir.s", DumpEntry{top.analogFir.channel[9].rFir.s});
        res.insert_or_assign("top.analogFir.channel[9].rFir.r", DumpEntry{top.analogFir.channel[9].rFir.r});
        res.insert_or_assign("top.analogFir.channel[9].rFir.tSc", DumpEntry{top.analogFir.channel[9].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].rFir.phase", DumpEntry{top.analogFir.channel[9].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[9].vFir.m", DumpEntry{top.analogFir.channel[9].vFir.m});
        res.insert_or_assign("top.analogFir.channel[9].vFir.n", DumpEntry{top.analogFir.channel[9].vFir.n});
        res.insert_or_assign("top.analogFir.channel[9].vFir.s", DumpEntry{top.analogFir.channel[9].vFir.s});
        res.insert_or_assign("top.analogFir.channel[9].vFir.r", DumpEntry{top.analogFir.channel[9].vFir.r});
        res.insert_or_assign("top.analogFir.channel[9].vFir.tSc", DumpEntry{top.analogFir.channel[9].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].vFir.phase", DumpEntry{top.analogFir.channel[9].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.m", DumpEntry{top.analogFir.channel[9].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.n", DumpEntry{top.analogFir.channel[9].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.s", DumpEntry{top.analogFir.channel[9].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.r", DumpEntry{top.analogFir.channel[9].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.tSc", DumpEntry{top.analogFir.channel[9].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.phase", DumpEntry{top.analogFir.channel[9].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.maxLimit", DumpEntry{top.analogFir.channel[9].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.minLimit", DumpEntry{top.analogFir.channel[9].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.filterLength", DumpEntry{top.analogFir.channel[9].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[10].rFir.m", DumpEntry{top.analogFir.channel[10].rFir.m});
        res.insert_or_assign("top.analogFir.channel[10].rFir.n", DumpEntry{top.analogFir.channel[10].rFir.n});
        res.insert_or_assign("top.analogFir.channel[10].rFir.s", DumpEntry{top.analogFir.channel[10].rFir.s});
        res.insert_or_assign("top.analogFir.channel[10].rFir.r", DumpEntry{top.analogFir.channel[10].rFir.r});
        res.insert_or_assign("top.analogFir.channel[10].rFir.tSc", DumpEntry{top.analogFir.channel[10].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].rFir.phase", DumpEntry{top.analogFir.channel[10].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[10].vFir.m", DumpEntry{top.analogFir.channel[10].vFir.m});
        res.insert_or_assign("top.analogFir.channel[10].vFir.n", DumpEntry{top.analogFir.channel[10].vFir.n});
        res.insert_or_assign("top.analogFir.channel[10].vFir.s", DumpEntry{top.analogFir.channel[10].vFir.s});
        res.insert_or_assign("top.analogFir.channel[10].vFir.r", DumpEntry{top.analogFir.channel[10].vFir.r});
        res.insert_or_assign("top.analogFir.channel[10].vFir.tSc", DumpEntry{top.analogFir.channel[10].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].vFir.phase", DumpEntry{top.analogFir.channel[10].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.m", DumpEntry{top.analogFir.channel[10].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.n", DumpEntry{top.analogFir.channel[10].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.s", DumpEntry{top.analogFir.channel[10].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.r", DumpEntry{top.analogFir.channel[10].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.tSc", DumpEntry{top.analogFir.channel[10].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.phase", DumpEntry{top.analogFir.channel[10].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.maxLimit", DumpEntry{top.analogFir.channel[10].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.minLimit", DumpEntry{top.analogFir.channel[10].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.filterLength", DumpEntry{top.analogFir.channel[10].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[11].rFir.m", DumpEntry{top.analogFir.channel[11].rFir.m});
        res.insert_or_assign("top.analogFir.channel[11].rFir.n", DumpEntry{top.analogFir.channel[11].rFir.n});
        res.insert_or_assign("top.analogFir.channel[11].rFir.s", DumpEntry{top.analogFir.channel[11].rFir.s});
        res.insert_or_assign("top.analogFir.channel[11].rFir.r", DumpEntry{top.analogFir.channel[11].rFir.r});
        res.insert_or_assign("top.analogFir.channel[11].rFir.tSc", DumpEntry{top.analogFir.channel[11].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].rFir.phase", DumpEntry{top.analogFir.channel[11].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[11].vFir.m", DumpEntry{top.analogFir.channel[11].vFir.m});
        res.insert_or_assign("top.analogFir.channel[11].vFir.n", DumpEntry{top.analogFir.channel[11].vFir.n});
        res.insert_or_assign("top.analogFir.channel[11].vFir.s", DumpEntry{top.analogFir.channel[11].vFir.s});
        res.insert_or_assign("top.analogFir.channel[11].vFir.r", DumpEntry{top.analogFir.channel[11].vFir.r});
        res.insert_or_assign("top.analogFir.channel[11].vFir.tSc", DumpEntry{top.analogFir.channel[11].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].vFir.phase", DumpEntry{top.analogFir.channel[11].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.m", DumpEntry{top.analogFir.channel[11].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.n", DumpEntry{top.analogFir.channel[11].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.s", DumpEntry{top.analogFir.channel[11].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.r", DumpEntry{top.analogFir.channel[11].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.tSc", DumpEntry{top.analogFir.channel[11].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.phase", DumpEntry{top.analogFir.channel[11].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.maxLimit", DumpEntry{top.analogFir.channel[11].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.minLimit", DumpEntry{top.analogFir.channel[11].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.filterLength", DumpEntry{top.analogFir.channel[11].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[12].rFir.m", DumpEntry{top.analogFir.channel[12].rFir.m});
        res.insert_or_assign("top.analogFir.channel[12].rFir.n", DumpEntry{top.analogFir.channel[12].rFir.n});
        res.insert_or_assign("top.analogFir.channel[12].rFir.s", DumpEntry{top.analogFir.channel[12].rFir.s});
        res.insert_or_assign("top.analogFir.channel[12].rFir.r", DumpEntry{top.analogFir.channel[12].rFir.r});
        res.insert_or_assign("top.analogFir.channel[12].rFir.tSc", DumpEntry{top.analogFir.channel[12].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].rFir.phase", DumpEntry{top.analogFir.channel[12].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[12].vFir.m", DumpEntry{top.analogFir.channel[12].vFir.m});
        res.insert_or_assign("top.analogFir.channel[12].vFir.n", DumpEntry{top.analogFir.channel[12].vFir.n});
        res.insert_or_assign("top.analogFir.channel[12].vFir.s", DumpEntry{top.analogFir.channel[12].vFir.s});
        res.insert_or_assign("top.analogFir.channel[12].vFir.r", DumpEntry{top.analogFir.channel[12].vFir.r});
        res.insert_or_assign("top.analogFir.channel[12].vFir.tSc", DumpEntry{top.analogFir.channel[12].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].vFir.phase", DumpEntry{top.analogFir.channel[12].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.m", DumpEntry{top.analogFir.channel[12].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.n", DumpEntry{top.analogFir.channel[12].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.s", DumpEntry{top.analogFir.channel[12].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.r", DumpEntry{top.analogFir.channel[12].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.tSc", DumpEntry{top.analogFir.channel[12].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.phase", DumpEntry{top.analogFir.channel[12].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.maxLimit", DumpEntry{top.analogFir.channel[12].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.minLimit", DumpEntry{top.analogFir.channel[12].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.filterLength", DumpEntry{top.analogFir.channel[12].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[13].rFir.m", DumpEntry{top.analogFir.channel[13].rFir.m});
        res.insert_or_assign("top.analogFir.channel[13].rFir.n", DumpEntry{top.analogFir.channel[13].rFir.n});
        res.insert_or_assign("top.analogFir.channel[13].rFir.s", DumpEntry{top.analogFir.channel[13].rFir.s});
        res.insert_or_assign("top.analogFir.channel[13].rFir.r", DumpEntry{top.analogFir.channel[13].rFir.r});
        res.insert_or_assign("top.analogFir.channel[13].rFir.tSc", DumpEntry{top.analogFir.channel[13].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].rFir.phase", DumpEntry{top.analogFir.channel[13].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[13].vFir.m", DumpEntry{top.analogFir.channel[13].vFir.m});
        res.insert_or_assign("top.analogFir.channel[13].vFir.n", DumpEntry{top.analogFir.channel[13].vFir.n});
        res.insert_or_assign("top.analogFir.channel[13].vFir.s", DumpEntry{top.analogFir.channel[13].vFir.s});
        res.insert_or_assign("top.analogFir.channel[13].vFir.r", DumpEntry{top.analogFir.channel[13].vFir.r});
        res.insert_or_assign("top.analogFir.channel[13].vFir.tSc", DumpEntry{top.analogFir.channel[13].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].vFir.phase", DumpEntry{top.analogFir.channel[13].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.m", DumpEntry{top.analogFir.channel[13].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.n", DumpEntry{top.analogFir.channel[13].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.s", DumpEntry{top.analogFir.channel[13].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.r", DumpEntry{top.analogFir.channel[13].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.tSc", DumpEntry{top.analogFir.channel[13].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.phase", DumpEntry{top.analogFir.channel[13].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.maxLimit", DumpEntry{top.analogFir.channel[13].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.minLimit", DumpEntry{top.analogFir.channel[13].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.filterLength", DumpEntry{top.analogFir.channel[13].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[14].rFir.m", DumpEntry{top.analogFir.channel[14].rFir.m});
        res.insert_or_assign("top.analogFir.channel[14].rFir.n", DumpEntry{top.analogFir.channel[14].rFir.n});
        res.insert_or_assign("top.analogFir.channel[14].rFir.s", DumpEntry{top.analogFir.channel[14].rFir.s});
        res.insert_or_assign("top.analogFir.channel[14].rFir.r", DumpEntry{top.analogFir.channel[14].rFir.r});
        res.insert_or_assign("top.analogFir.channel[14].rFir.tSc", DumpEntry{top.analogFir.channel[14].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].rFir.phase", DumpEntry{top.analogFir.channel[14].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[14].vFir.m", DumpEntry{top.analogFir.channel[14].vFir.m});
        res.insert_or_assign("top.analogFir.channel[14].vFir.n", DumpEntry{top.analogFir.channel[14].vFir.n});
        res.insert_or_assign("top.analogFir.channel[14].vFir.s", DumpEntry{top.analogFir.channel[14].vFir.s});
        res.insert_or_assign("top.analogFir.channel[14].vFir.r", DumpEntry{top.analogFir.channel[14].vFir.r});
        res.insert_or_assign("top.analogFir.channel[14].vFir.tSc", DumpEntry{top.analogFir.channel[14].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].vFir.phase", DumpEntry{top.analogFir.channel[14].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.m", DumpEntry{top.analogFir.channel[14].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.n", DumpEntry{top.analogFir.channel[14].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.s", DumpEntry{top.analogFir.channel[14].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.r", DumpEntry{top.analogFir.channel[14].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.tSc", DumpEntry{top.analogFir.channel[14].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.phase", DumpEntry{top.analogFir.channel[14].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.maxLimit", DumpEntry{top.analogFir.channel[14].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.minLimit", DumpEntry{top.analogFir.channel[14].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.filterLength", DumpEntry{top.analogFir.channel[14].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[15].rFir.m", DumpEntry{top.analogFir.channel[15].rFir.m});
        res.insert_or_assign("top.analogFir.channel[15].rFir.n", DumpEntry{top.analogFir.channel[15].rFir.n});
        res.insert_or_assign("top.analogFir.channel[15].rFir.s", DumpEntry{top.analogFir.channel[15].rFir.s});
        res.insert_or_assign("top.analogFir.channel[15].rFir.r", DumpEntry{top.analogFir.channel[15].rFir.r});
        res.insert_or_assign("top.analogFir.channel[15].rFir.tSc", DumpEntry{top.analogFir.channel[15].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].rFir.phase", DumpEntry{top.analogFir.channel[15].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[15].vFir.m", DumpEntry{top.analogFir.channel[15].vFir.m});
        res.insert_or_assign("top.analogFir.channel[15].vFir.n", DumpEntry{top.analogFir.channel[15].vFir.n});
        res.insert_or_assign("top.analogFir.channel[15].vFir.s", DumpEntry{top.analogFir.channel[15].vFir.s});
        res.insert_or_assign("top.analogFir.channel[15].vFir.r", DumpEntry{top.analogFir.channel[15].vFir.r});
        res.insert_or_assign("top.analogFir.channel[15].vFir.tSc", DumpEntry{top.analogFir.channel[15].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].vFir.phase", DumpEntry{top.analogFir.channel[15].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.m", DumpEntry{top.analogFir.channel[15].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.n", DumpEntry{top.analogFir.channel[15].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.s", DumpEntry{top.analogFir.channel[15].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.r", DumpEntry{top.analogFir.channel[15].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.tSc", DumpEntry{top.analogFir.channel[15].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.phase", DumpEntry{top.analogFir.channel[15].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.maxLimit", DumpEntry{top.analogFir.channel[15].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.minLimit", DumpEntry{top.analogFir.channel[15].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.filterLength", DumpEntry{top.analogFir.channel[15].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[16].rFir.m", DumpEntry{top.analogFir.channel[16].rFir.m});
        res.insert_or_assign("top.analogFir.channel[16].rFir.n", DumpEntry{top.analogFir.channel[16].rFir.n});
        res.insert_or_assign("top.analogFir.channel[16].rFir.s", DumpEntry{top.analogFir.channel[16].rFir.s});
        res.insert_or_assign("top.analogFir.channel[16].rFir.r", DumpEntry{top.analogFir.channel[16].rFir.r});
        res.insert_or_assign("top.analogFir.channel[16].rFir.tSc", DumpEntry{top.analogFir.channel[16].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].rFir.phase", DumpEntry{top.analogFir.channel[16].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[16].vFir.m", DumpEntry{top.analogFir.channel[16].vFir.m});
        res.insert_or_assign("top.analogFir.channel[16].vFir.n", DumpEntry{top.analogFir.channel[16].vFir.n});
        res.insert_or_assign("top.analogFir.channel[16].vFir.s", DumpEntry{top.analogFir.channel[16].vFir.s});
        res.insert_or_assign("top.analogFir.channel[16].vFir.r", DumpEntry{top.analogFir.channel[16].vFir.r});
        res.insert_or_assign("top.analogFir.channel[16].vFir.tSc", DumpEntry{top.analogFir.channel[16].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].vFir.phase", DumpEntry{top.analogFir.channel[16].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.m", DumpEntry{top.analogFir.channel[16].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.n", DumpEntry{top.analogFir.channel[16].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.s", DumpEntry{top.analogFir.channel[16].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.r", DumpEntry{top.analogFir.channel[16].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.tSc", DumpEntry{top.analogFir.channel[16].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.phase", DumpEntry{top.analogFir.channel[16].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.maxLimit", DumpEntry{top.analogFir.channel[16].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.minLimit", DumpEntry{top.analogFir.channel[16].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.filterLength", DumpEntry{top.analogFir.channel[16].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[17].rFir.m", DumpEntry{top.analogFir.channel[17].rFir.m});
        res.insert_or_assign("top.analogFir.channel[17].rFir.n", DumpEntry{top.analogFir.channel[17].rFir.n});
        res.insert_or_assign("top.analogFir.channel[17].rFir.s", DumpEntry{top.analogFir.channel[17].rFir.s});
        res.insert_or_assign("top.analogFir.channel[17].rFir.r", DumpEntry{top.analogFir.channel[17].rFir.r});
        res.insert_or_assign("top.analogFir.channel[17].rFir.tSc", DumpEntry{top.analogFir.channel[17].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].rFir.phase", DumpEntry{top.analogFir.channel[17].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[17].vFir.m", DumpEntry{top.analogFir.channel[17].vFir.m});
        res.insert_or_assign("top.analogFir.channel[17].vFir.n", DumpEntry{top.analogFir.channel[17].vFir.n});
        res.insert_or_assign("top.analogFir.channel[17].vFir.s", DumpEntry{top.analogFir.channel[17].vFir.s});
        res.insert_or_assign("top.analogFir.channel[17].vFir.r", DumpEntry{top.analogFir.channel[17].vFir.r});
        res.insert_or_assign("top.analogFir.channel[17].vFir.tSc", DumpEntry{top.analogFir.channel[17].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].vFir.phase", DumpEntry{top.analogFir.channel[17].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.m", DumpEntry{top.analogFir.channel[17].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.n", DumpEntry{top.analogFir.channel[17].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.s", DumpEntry{top.analogFir.channel[17].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.r", DumpEntry{top.analogFir.channel[17].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.tSc", DumpEntry{top.analogFir.channel[17].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.phase", DumpEntry{top.analogFir.channel[17].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.maxLimit", DumpEntry{top.analogFir.channel[17].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.minLimit", DumpEntry{top.analogFir.channel[17].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.filterLength", DumpEntry{top.analogFir.channel[17].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[18].rFir.m", DumpEntry{top.analogFir.channel[18].rFir.m});
        res.insert_or_assign("top.analogFir.channel[18].rFir.n", DumpEntry{top.analogFir.channel[18].rFir.n});
        res.insert_or_assign("top.analogFir.channel[18].rFir.s", DumpEntry{top.analogFir.channel[18].rFir.s});
        res.insert_or_assign("top.analogFir.channel[18].rFir.r", DumpEntry{top.analogFir.channel[18].rFir.r});
        res.insert_or_assign("top.analogFir.channel[18].rFir.tSc", DumpEntry{top.analogFir.channel[18].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].rFir.phase", DumpEntry{top.analogFir.channel[18].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[18].vFir.m", DumpEntry{top.analogFir.channel[18].vFir.m});
        res.insert_or_assign("top.analogFir.channel[18].vFir.n", DumpEntry{top.analogFir.channel[18].vFir.n});
        res.insert_or_assign("top.analogFir.channel[18].vFir.s", DumpEntry{top.analogFir.channel[18].vFir.s});
        res.insert_or_assign("top.analogFir.channel[18].vFir.r", DumpEntry{top.analogFir.channel[18].vFir.r});
        res.insert_or_assign("top.analogFir.channel[18].vFir.tSc", DumpEntry{top.analogFir.channel[18].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].vFir.phase", DumpEntry{top.analogFir.channel[18].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.m", DumpEntry{top.analogFir.channel[18].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.n", DumpEntry{top.analogFir.channel[18].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.s", DumpEntry{top.analogFir.channel[18].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.r", DumpEntry{top.analogFir.channel[18].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.tSc", DumpEntry{top.analogFir.channel[18].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.phase", DumpEntry{top.analogFir.channel[18].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.maxLimit", DumpEntry{top.analogFir.channel[18].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.minLimit", DumpEntry{top.analogFir.channel[18].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.filterLength", DumpEntry{top.analogFir.channel[18].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[19].rFir.m", DumpEntry{top.analogFir.channel[19].rFir.m});
        res.insert_or_assign("top.analogFir.channel[19].rFir.n", DumpEntry{top.analogFir.channel[19].rFir.n});
        res.insert_or_assign("top.analogFir.channel[19].rFir.s", DumpEntry{top.analogFir.channel[19].rFir.s});
        res.insert_or_assign("top.analogFir.channel[19].rFir.r", DumpEntry{top.analogFir.channel[19].rFir.r});
        res.insert_or_assign("top.analogFir.channel[19].rFir.tSc", DumpEntry{top.analogFir.channel[19].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].rFir.phase", DumpEntry{top.analogFir.channel[19].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[19].vFir.m", DumpEntry{top.analogFir.channel[19].vFir.m});
        res.insert_or_assign("top.analogFir.channel[19].vFir.n", DumpEntry{top.analogFir.channel[19].vFir.n});
        res.insert_or_assign("top.analogFir.channel[19].vFir.s", DumpEntry{top.analogFir.channel[19].vFir.s});
        res.insert_or_assign("top.analogFir.channel[19].vFir.r", DumpEntry{top.analogFir.channel[19].vFir.r});
        res.insert_or_assign("top.analogFir.channel[19].vFir.tSc", DumpEntry{top.analogFir.channel[19].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].vFir.phase", DumpEntry{top.analogFir.channel[19].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.m", DumpEntry{top.analogFir.channel[19].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.n", DumpEntry{top.analogFir.channel[19].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.s", DumpEntry{top.analogFir.channel[19].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.r", DumpEntry{top.analogFir.channel[19].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.tSc", DumpEntry{top.analogFir.channel[19].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.phase", DumpEntry{top.analogFir.channel[19].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.maxLimit", DumpEntry{top.analogFir.channel[19].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.minLimit", DumpEntry{top.analogFir.channel[19].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.filterLength", DumpEntry{top.analogFir.channel[19].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[20].rFir.m", DumpEntry{top.analogFir.channel[20].rFir.m});
        res.insert_or_assign("top.analogFir.channel[20].rFir.n", DumpEntry{top.analogFir.channel[20].rFir.n});
        res.insert_or_assign("top.analogFir.channel[20].rFir.s", DumpEntry{top.analogFir.channel[20].rFir.s});
        res.insert_or_assign("top.analogFir.channel[20].rFir.r", DumpEntry{top.analogFir.channel[20].rFir.r});
        res.insert_or_assign("top.analogFir.channel[20].rFir.tSc", DumpEntry{top.analogFir.channel[20].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].rFir.phase", DumpEntry{top.analogFir.channel[20].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[20].vFir.m", DumpEntry{top.analogFir.channel[20].vFir.m});
        res.insert_or_assign("top.analogFir.channel[20].vFir.n", DumpEntry{top.analogFir.channel[20].vFir.n});
        res.insert_or_assign("top.analogFir.channel[20].vFir.s", DumpEntry{top.analogFir.channel[20].vFir.s});
        res.insert_or_assign("top.analogFir.channel[20].vFir.r", DumpEntry{top.analogFir.channel[20].vFir.r});
        res.insert_or_assign("top.analogFir.channel[20].vFir.tSc", DumpEntry{top.analogFir.channel[20].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].vFir.phase", DumpEntry{top.analogFir.channel[20].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.m", DumpEntry{top.analogFir.channel[20].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.n", DumpEntry{top.analogFir.channel[20].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.s", DumpEntry{top.analogFir.channel[20].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.r", DumpEntry{top.analogFir.channel[20].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.tSc", DumpEntry{top.analogFir.channel[20].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.phase", DumpEntry{top.analogFir.channel[20].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.maxLimit", DumpEntry{top.analogFir.channel[20].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.minLimit", DumpEntry{top.analogFir.channel[20].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.filterLength", DumpEntry{top.analogFir.channel[20].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[21].rFir.m", DumpEntry{top.analogFir.channel[21].rFir.m});
        res.insert_or_assign("top.analogFir.channel[21].rFir.n", DumpEntry{top.analogFir.channel[21].rFir.n});
        res.insert_or_assign("top.analogFir.channel[21].rFir.s", DumpEntry{top.analogFir.channel[21].rFir.s});
        res.insert_or_assign("top.analogFir.channel[21].rFir.r", DumpEntry{top.analogFir.channel[21].rFir.r});
        res.insert_or_assign("top.analogFir.channel[21].rFir.tSc", DumpEntry{top.analogFir.channel[21].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].rFir.phase", DumpEntry{top.analogFir.channel[21].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[21].vFir.m", DumpEntry{top.analogFir.channel[21].vFir.m});
        res.insert_or_assign("top.analogFir.channel[21].vFir.n", DumpEntry{top.analogFir.channel[21].vFir.n});
        res.insert_or_assign("top.analogFir.channel[21].vFir.s", DumpEntry{top.analogFir.channel[21].vFir.s});
        res.insert_or_assign("top.analogFir.channel[21].vFir.r", DumpEntry{top.analogFir.channel[21].vFir.r});
        res.insert_or_assign("top.analogFir.channel[21].vFir.tSc", DumpEntry{top.analogFir.channel[21].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].vFir.phase", DumpEntry{top.analogFir.channel[21].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.m", DumpEntry{top.analogFir.channel[21].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.n", DumpEntry{top.analogFir.channel[21].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.s", DumpEntry{top.analogFir.channel[21].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.r", DumpEntry{top.analogFir.channel[21].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.tSc", DumpEntry{top.analogFir.channel[21].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.phase", DumpEntry{top.analogFir.channel[21].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.maxLimit", DumpEntry{top.analogFir.channel[21].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.minLimit", DumpEntry{top.analogFir.channel[21].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.filterLength", DumpEntry{top.analogFir.channel[21].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[22].rFir.m", DumpEntry{top.analogFir.channel[22].rFir.m});
        res.insert_or_assign("top.analogFir.channel[22].rFir.n", DumpEntry{top.analogFir.channel[22].rFir.n});
        res.insert_or_assign("top.analogFir.channel[22].rFir.s", DumpEntry{top.analogFir.channel[22].rFir.s});
        res.insert_or_assign("top.analogFir.channel[22].rFir.r", DumpEntry{top.analogFir.channel[22].rFir.r});
        res.insert_or_assign("top.analogFir.channel[22].rFir.tSc", DumpEntry{top.analogFir.channel[22].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].rFir.phase", DumpEntry{top.analogFir.channel[22].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[22].vFir.m", DumpEntry{top.analogFir.channel[22].vFir.m});
        res.insert_or_assign("top.analogFir.channel[22].vFir.n", DumpEntry{top.analogFir.channel[22].vFir.n});
        res.insert_or_assign("top.analogFir.channel[22].vFir.s", DumpEntry{top.analogFir.channel[22].vFir.s});
        res.insert_or_assign("top.analogFir.channel[22].vFir.r", DumpEntry{top.analogFir.channel[22].vFir.r});
        res.insert_or_assign("top.analogFir.channel[22].vFir.tSc", DumpEntry{top.analogFir.channel[22].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].vFir.phase", DumpEntry{top.analogFir.channel[22].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.m", DumpEntry{top.analogFir.channel[22].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.n", DumpEntry{top.analogFir.channel[22].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.s", DumpEntry{top.analogFir.channel[22].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.r", DumpEntry{top.analogFir.channel[22].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.tSc", DumpEntry{top.analogFir.channel[22].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.phase", DumpEntry{top.analogFir.channel[22].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.maxLimit", DumpEntry{top.analogFir.channel[22].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.minLimit", DumpEntry{top.analogFir.channel[22].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.filterLength", DumpEntry{top.analogFir.channel[22].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[23].rFir.m", DumpEntry{top.analogFir.channel[23].rFir.m});
        res.insert_or_assign("top.analogFir.channel[23].rFir.n", DumpEntry{top.analogFir.channel[23].rFir.n});
        res.insert_or_assign("top.analogFir.channel[23].rFir.s", DumpEntry{top.analogFir.channel[23].rFir.s});
        res.insert_or_assign("top.analogFir.channel[23].rFir.r", DumpEntry{top.analogFir.channel[23].rFir.r});
        res.insert_or_assign("top.analogFir.channel[23].rFir.tSc", DumpEntry{top.analogFir.channel[23].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].rFir.phase", DumpEntry{top.analogFir.channel[23].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[23].vFir.m", DumpEntry{top.analogFir.channel[23].vFir.m});
        res.insert_or_assign("top.analogFir.channel[23].vFir.n", DumpEntry{top.analogFir.channel[23].vFir.n});
        res.insert_or_assign("top.analogFir.channel[23].vFir.s", DumpEntry{top.analogFir.channel[23].vFir.s});
        res.insert_or_assign("top.analogFir.channel[23].vFir.r", DumpEntry{top.analogFir.channel[23].vFir.r});
        res.insert_or_assign("top.analogFir.channel[23].vFir.tSc", DumpEntry{top.analogFir.channel[23].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].vFir.phase", DumpEntry{top.analogFir.channel[23].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.m", DumpEntry{top.analogFir.channel[23].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.n", DumpEntry{top.analogFir.channel[23].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.s", DumpEntry{top.analogFir.channel[23].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.r", DumpEntry{top.analogFir.channel[23].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.tSc", DumpEntry{top.analogFir.channel[23].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.phase", DumpEntry{top.analogFir.channel[23].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.maxLimit", DumpEntry{top.analogFir.channel[23].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.minLimit", DumpEntry{top.analogFir.channel[23].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.filterLength", DumpEntry{top.analogFir.channel[23].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[24].rFir.m", DumpEntry{top.analogFir.channel[24].rFir.m});
        res.insert_or_assign("top.analogFir.channel[24].rFir.n", DumpEntry{top.analogFir.channel[24].rFir.n});
        res.insert_or_assign("top.analogFir.channel[24].rFir.s", DumpEntry{top.analogFir.channel[24].rFir.s});
        res.insert_or_assign("top.analogFir.channel[24].rFir.r", DumpEntry{top.analogFir.channel[24].rFir.r});
        res.insert_or_assign("top.analogFir.channel[24].rFir.tSc", DumpEntry{top.analogFir.channel[24].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].rFir.phase", DumpEntry{top.analogFir.channel[24].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[24].vFir.m", DumpEntry{top.analogFir.channel[24].vFir.m});
        res.insert_or_assign("top.analogFir.channel[24].vFir.n", DumpEntry{top.analogFir.channel[24].vFir.n});
        res.insert_or_assign("top.analogFir.channel[24].vFir.s", DumpEntry{top.analogFir.channel[24].vFir.s});
        res.insert_or_assign("top.analogFir.channel[24].vFir.r", DumpEntry{top.analogFir.channel[24].vFir.r});
        res.insert_or_assign("top.analogFir.channel[24].vFir.tSc", DumpEntry{top.analogFir.channel[24].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].vFir.phase", DumpEntry{top.analogFir.channel[24].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.m", DumpEntry{top.analogFir.channel[24].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.n", DumpEntry{top.analogFir.channel[24].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.s", DumpEntry{top.analogFir.channel[24].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.r", DumpEntry{top.analogFir.channel[24].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.tSc", DumpEntry{top.analogFir.channel[24].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.phase", DumpEntry{top.analogFir.channel[24].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.maxLimit", DumpEntry{top.analogFir.channel[24].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.minLimit", DumpEntry{top.analogFir.channel[24].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.filterLength", DumpEntry{top.analogFir.channel[24].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[25].rFir.m", DumpEntry{top.analogFir.channel[25].rFir.m});
        res.insert_or_assign("top.analogFir.channel[25].rFir.n", DumpEntry{top.analogFir.channel[25].rFir.n});
        res.insert_or_assign("top.analogFir.channel[25].rFir.s", DumpEntry{top.analogFir.channel[25].rFir.s});
        res.insert_or_assign("top.analogFir.channel[25].rFir.r", DumpEntry{top.analogFir.channel[25].rFir.r});
        res.insert_or_assign("top.analogFir.channel[25].rFir.tSc", DumpEntry{top.analogFir.channel[25].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].rFir.phase", DumpEntry{top.analogFir.channel[25].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[25].vFir.m", DumpEntry{top.analogFir.channel[25].vFir.m});
        res.insert_or_assign("top.analogFir.channel[25].vFir.n", DumpEntry{top.analogFir.channel[25].vFir.n});
        res.insert_or_assign("top.analogFir.channel[25].vFir.s", DumpEntry{top.analogFir.channel[25].vFir.s});
        res.insert_or_assign("top.analogFir.channel[25].vFir.r", DumpEntry{top.analogFir.channel[25].vFir.r});
        res.insert_or_assign("top.analogFir.channel[25].vFir.tSc", DumpEntry{top.analogFir.channel[25].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].vFir.phase", DumpEntry{top.analogFir.channel[25].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.m", DumpEntry{top.analogFir.channel[25].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.n", DumpEntry{top.analogFir.channel[25].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.s", DumpEntry{top.analogFir.channel[25].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.r", DumpEntry{top.analogFir.channel[25].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.tSc", DumpEntry{top.analogFir.channel[25].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.phase", DumpEntry{top.analogFir.channel[25].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.maxLimit", DumpEntry{top.analogFir.channel[25].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.minLimit", DumpEntry{top.analogFir.channel[25].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.filterLength", DumpEntry{top.analogFir.channel[25].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[26].rFir.m", DumpEntry{top.analogFir.channel[26].rFir.m});
        res.insert_or_assign("top.analogFir.channel[26].rFir.n", DumpEntry{top.analogFir.channel[26].rFir.n});
        res.insert_or_assign("top.analogFir.channel[26].rFir.s", DumpEntry{top.analogFir.channel[26].rFir.s});
        res.insert_or_assign("top.analogFir.channel[26].rFir.r", DumpEntry{top.analogFir.channel[26].rFir.r});
        res.insert_or_assign("top.analogFir.channel[26].rFir.tSc", DumpEntry{top.analogFir.channel[26].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].rFir.phase", DumpEntry{top.analogFir.channel[26].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[26].vFir.m", DumpEntry{top.analogFir.channel[26].vFir.m});
        res.insert_or_assign("top.analogFir.channel[26].vFir.n", DumpEntry{top.analogFir.channel[26].vFir.n});
        res.insert_or_assign("top.analogFir.channel[26].vFir.s", DumpEntry{top.analogFir.channel[26].vFir.s});
        res.insert_or_assign("top.analogFir.channel[26].vFir.r", DumpEntry{top.analogFir.channel[26].vFir.r});
        res.insert_or_assign("top.analogFir.channel[26].vFir.tSc", DumpEntry{top.analogFir.channel[26].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].vFir.phase", DumpEntry{top.analogFir.channel[26].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.m", DumpEntry{top.analogFir.channel[26].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.n", DumpEntry{top.analogFir.channel[26].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.s", DumpEntry{top.analogFir.channel[26].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.r", DumpEntry{top.analogFir.channel[26].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.tSc", DumpEntry{top.analogFir.channel[26].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.phase", DumpEntry{top.analogFir.channel[26].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.maxLimit", DumpEntry{top.analogFir.channel[26].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.minLimit", DumpEntry{top.analogFir.channel[26].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.filterLength", DumpEntry{top.analogFir.channel[26].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[27].rFir.m", DumpEntry{top.analogFir.channel[27].rFir.m});
        res.insert_or_assign("top.analogFir.channel[27].rFir.n", DumpEntry{top.analogFir.channel[27].rFir.n});
        res.insert_or_assign("top.analogFir.channel[27].rFir.s", DumpEntry{top.analogFir.channel[27].rFir.s});
        res.insert_or_assign("top.analogFir.channel[27].rFir.r", DumpEntry{top.analogFir.channel[27].rFir.r});
        res.insert_or_assign("top.analogFir.channel[27].rFir.tSc", DumpEntry{top.analogFir.channel[27].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].rFir.phase", DumpEntry{top.analogFir.channel[27].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[27].vFir.m", DumpEntry{top.analogFir.channel[27].vFir.m});
        res.insert_or_assign("top.analogFir.channel[27].vFir.n", DumpEntry{top.analogFir.channel[27].vFir.n});
        res.insert_or_assign("top.analogFir.channel[27].vFir.s", DumpEntry{top.analogFir.channel[27].vFir.s});
        res.insert_or_assign("top.analogFir.channel[27].vFir.r", DumpEntry{top.analogFir.channel[27].vFir.r});
        res.insert_or_assign("top.analogFir.channel[27].vFir.tSc", DumpEntry{top.analogFir.channel[27].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].vFir.phase", DumpEntry{top.analogFir.channel[27].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.m", DumpEntry{top.analogFir.channel[27].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.n", DumpEntry{top.analogFir.channel[27].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.s", DumpEntry{top.analogFir.channel[27].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.r", DumpEntry{top.analogFir.channel[27].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.tSc", DumpEntry{top.analogFir.channel[27].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.phase", DumpEntry{top.analogFir.channel[27].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.maxLimit", DumpEntry{top.analogFir.channel[27].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.minLimit", DumpEntry{top.analogFir.channel[27].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.filterLength", DumpEntry{top.analogFir.channel[27].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[28].rFir.m", DumpEntry{top.analogFir.channel[28].rFir.m});
        res.insert_or_assign("top.analogFir.channel[28].rFir.n", DumpEntry{top.analogFir.channel[28].rFir.n});
        res.insert_or_assign("top.analogFir.channel[28].rFir.s", DumpEntry{top.analogFir.channel[28].rFir.s});
        res.insert_or_assign("top.analogFir.channel[28].rFir.r", DumpEntry{top.analogFir.channel[28].rFir.r});
        res.insert_or_assign("top.analogFir.channel[28].rFir.tSc", DumpEntry{top.analogFir.channel[28].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].rFir.phase", DumpEntry{top.analogFir.channel[28].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[28].vFir.m", DumpEntry{top.analogFir.channel[28].vFir.m});
        res.insert_or_assign("top.analogFir.channel[28].vFir.n", DumpEntry{top.analogFir.channel[28].vFir.n});
        res.insert_or_assign("top.analogFir.channel[28].vFir.s", DumpEntry{top.analogFir.channel[28].vFir.s});
        res.insert_or_assign("top.analogFir.channel[28].vFir.r", DumpEntry{top.analogFir.channel[28].vFir.r});
        res.insert_or_assign("top.analogFir.channel[28].vFir.tSc", DumpEntry{top.analogFir.channel[28].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].vFir.phase", DumpEntry{top.analogFir.channel[28].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.m", DumpEntry{top.analogFir.channel[28].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.n", DumpEntry{top.analogFir.channel[28].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.s", DumpEntry{top.analogFir.channel[28].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.r", DumpEntry{top.analogFir.channel[28].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.tSc", DumpEntry{top.analogFir.channel[28].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.phase", DumpEntry{top.analogFir.channel[28].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.maxLimit", DumpEntry{top.analogFir.channel[28].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.minLimit", DumpEntry{top.analogFir.channel[28].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.filterLength", DumpEntry{top.analogFir.channel[28].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[29].rFir.m", DumpEntry{top.analogFir.channel[29].rFir.m});
        res.insert_or_assign("top.analogFir.channel[29].rFir.n", DumpEntry{top.analogFir.channel[29].rFir.n});
        res.insert_or_assign("top.analogFir.channel[29].rFir.s", DumpEntry{top.analogFir.channel[29].rFir.s});
        res.insert_or_assign("top.analogFir.channel[29].rFir.r", DumpEntry{top.analogFir.channel[29].rFir.r});
        res.insert_or_assign("top.analogFir.channel[29].rFir.tSc", DumpEntry{top.analogFir.channel[29].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].rFir.phase", DumpEntry{top.analogFir.channel[29].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[29].vFir.m", DumpEntry{top.analogFir.channel[29].vFir.m});
        res.insert_or_assign("top.analogFir.channel[29].vFir.n", DumpEntry{top.analogFir.channel[29].vFir.n});
        res.insert_or_assign("top.analogFir.channel[29].vFir.s", DumpEntry{top.analogFir.channel[29].vFir.s});
        res.insert_or_assign("top.analogFir.channel[29].vFir.r", DumpEntry{top.analogFir.channel[29].vFir.r});
        res.insert_or_assign("top.analogFir.channel[29].vFir.tSc", DumpEntry{top.analogFir.channel[29].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].vFir.phase", DumpEntry{top.analogFir.channel[29].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.m", DumpEntry{top.analogFir.channel[29].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.n", DumpEntry{top.analogFir.channel[29].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.s", DumpEntry{top.analogFir.channel[29].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.r", DumpEntry{top.analogFir.channel[29].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.tSc", DumpEntry{top.analogFir.channel[29].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.phase", DumpEntry{top.analogFir.channel[29].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.maxLimit", DumpEntry{top.analogFir.channel[29].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.minLimit", DumpEntry{top.analogFir.channel[29].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.filterLength", DumpEntry{top.analogFir.channel[29].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[30].rFir.m", DumpEntry{top.analogFir.channel[30].rFir.m});
        res.insert_or_assign("top.analogFir.channel[30].rFir.n", DumpEntry{top.analogFir.channel[30].rFir.n});
        res.insert_or_assign("top.analogFir.channel[30].rFir.s", DumpEntry{top.analogFir.channel[30].rFir.s});
        res.insert_or_assign("top.analogFir.channel[30].rFir.r", DumpEntry{top.analogFir.channel[30].rFir.r});
        res.insert_or_assign("top.analogFir.channel[30].rFir.tSc", DumpEntry{top.analogFir.channel[30].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].rFir.phase", DumpEntry{top.analogFir.channel[30].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[30].vFir.m", DumpEntry{top.analogFir.channel[30].vFir.m});
        res.insert_or_assign("top.analogFir.channel[30].vFir.n", DumpEntry{top.analogFir.channel[30].vFir.n});
        res.insert_or_assign("top.analogFir.channel[30].vFir.s", DumpEntry{top.analogFir.channel[30].vFir.s});
        res.insert_or_assign("top.analogFir.channel[30].vFir.r", DumpEntry{top.analogFir.channel[30].vFir.r});
        res.insert_or_assign("top.analogFir.channel[30].vFir.tSc", DumpEntry{top.analogFir.channel[30].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].vFir.phase", DumpEntry{top.analogFir.channel[30].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.m", DumpEntry{top.analogFir.channel[30].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.n", DumpEntry{top.analogFir.channel[30].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.s", DumpEntry{top.analogFir.channel[30].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.r", DumpEntry{top.analogFir.channel[30].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.tSc", DumpEntry{top.analogFir.channel[30].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.phase", DumpEntry{top.analogFir.channel[30].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.maxLimit", DumpEntry{top.analogFir.channel[30].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.minLimit", DumpEntry{top.analogFir.channel[30].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.filterLength", DumpEntry{top.analogFir.channel[30].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[31].rFir.m", DumpEntry{top.analogFir.channel[31].rFir.m});
        res.insert_or_assign("top.analogFir.channel[31].rFir.n", DumpEntry{top.analogFir.channel[31].rFir.n});
        res.insert_or_assign("top.analogFir.channel[31].rFir.s", DumpEntry{top.analogFir.channel[31].rFir.s});
        res.insert_or_assign("top.analogFir.channel[31].rFir.r", DumpEntry{top.analogFir.channel[31].rFir.r});
        res.insert_or_assign("top.analogFir.channel[31].rFir.tSc", DumpEntry{top.analogFir.channel[31].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].rFir.phase", DumpEntry{top.analogFir.channel[31].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[31].vFir.m", DumpEntry{top.analogFir.channel[31].vFir.m});
        res.insert_or_assign("top.analogFir.channel[31].vFir.n", DumpEntry{top.analogFir.channel[31].vFir.n});
        res.insert_or_assign("top.analogFir.channel[31].vFir.s", DumpEntry{top.analogFir.channel[31].vFir.s});
        res.insert_or_assign("top.analogFir.channel[31].vFir.r", DumpEntry{top.analogFir.channel[31].vFir.r});
        res.insert_or_assign("top.analogFir.channel[31].vFir.tSc", DumpEntry{top.analogFir.channel[31].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].vFir.phase", DumpEntry{top.analogFir.channel[31].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.m", DumpEntry{top.analogFir.channel[31].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.n", DumpEntry{top.analogFir.channel[31].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.s", DumpEntry{top.analogFir.channel[31].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.r", DumpEntry{top.analogFir.channel[31].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.tSc", DumpEntry{top.analogFir.channel[31].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.phase", DumpEntry{top.analogFir.channel[31].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.maxLimit", DumpEntry{top.analogFir.channel[31].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.minLimit", DumpEntry{top.analogFir.channel[31].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.filterLength", DumpEntry{top.analogFir.channel[31].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[32].rFir.m", DumpEntry{top.analogFir.channel[32].rFir.m});
        res.insert_or_assign("top.analogFir.channel[32].rFir.n", DumpEntry{top.analogFir.channel[32].rFir.n});
        res.insert_or_assign("top.analogFir.channel[32].rFir.s", DumpEntry{top.analogFir.channel[32].rFir.s});
        res.insert_or_assign("top.analogFir.channel[32].rFir.r", DumpEntry{top.analogFir.channel[32].rFir.r});
        res.insert_or_assign("top.analogFir.channel[32].rFir.tSc", DumpEntry{top.analogFir.channel[32].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].rFir.phase", DumpEntry{top.analogFir.channel[32].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[32].vFir.m", DumpEntry{top.analogFir.channel[32].vFir.m});
        res.insert_or_assign("top.analogFir.channel[32].vFir.n", DumpEntry{top.analogFir.channel[32].vFir.n});
        res.insert_or_assign("top.analogFir.channel[32].vFir.s", DumpEntry{top.analogFir.channel[32].vFir.s});
        res.insert_or_assign("top.analogFir.channel[32].vFir.r", DumpEntry{top.analogFir.channel[32].vFir.r});
        res.insert_or_assign("top.analogFir.channel[32].vFir.tSc", DumpEntry{top.analogFir.channel[32].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].vFir.phase", DumpEntry{top.analogFir.channel[32].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.m", DumpEntry{top.analogFir.channel[32].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.n", DumpEntry{top.analogFir.channel[32].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.s", DumpEntry{top.analogFir.channel[32].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.r", DumpEntry{top.analogFir.channel[32].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.tSc", DumpEntry{top.analogFir.channel[32].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.phase", DumpEntry{top.analogFir.channel[32].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.maxLimit", DumpEntry{top.analogFir.channel[32].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.minLimit", DumpEntry{top.analogFir.channel[32].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.filterLength", DumpEntry{top.analogFir.channel[32].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[33].rFir.m", DumpEntry{top.analogFir.channel[33].rFir.m});
        res.insert_or_assign("top.analogFir.channel[33].rFir.n", DumpEntry{top.analogFir.channel[33].rFir.n});
        res.insert_or_assign("top.analogFir.channel[33].rFir.s", DumpEntry{top.analogFir.channel[33].rFir.s});
        res.insert_or_assign("top.analogFir.channel[33].rFir.r", DumpEntry{top.analogFir.channel[33].rFir.r});
        res.insert_or_assign("top.analogFir.channel[33].rFir.tSc", DumpEntry{top.analogFir.channel[33].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].rFir.phase", DumpEntry{top.analogFir.channel[33].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[33].vFir.m", DumpEntry{top.analogFir.channel[33].vFir.m});
        res.insert_or_assign("top.analogFir.channel[33].vFir.n", DumpEntry{top.analogFir.channel[33].vFir.n});
        res.insert_or_assign("top.analogFir.channel[33].vFir.s", DumpEntry{top.analogFir.channel[33].vFir.s});
        res.insert_or_assign("top.analogFir.channel[33].vFir.r", DumpEntry{top.analogFir.channel[33].vFir.r});
        res.insert_or_assign("top.analogFir.channel[33].vFir.tSc", DumpEntry{top.analogFir.channel[33].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].vFir.phase", DumpEntry{top.analogFir.channel[33].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.m", DumpEntry{top.analogFir.channel[33].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.n", DumpEntry{top.analogFir.channel[33].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.s", DumpEntry{top.analogFir.channel[33].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.r", DumpEntry{top.analogFir.channel[33].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.tSc", DumpEntry{top.analogFir.channel[33].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.phase", DumpEntry{top.analogFir.channel[33].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.maxLimit", DumpEntry{top.analogFir.channel[33].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.minLimit", DumpEntry{top.analogFir.channel[33].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.filterLength", DumpEntry{top.analogFir.channel[33].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[34].rFir.m", DumpEntry{top.analogFir.channel[34].rFir.m});
        res.insert_or_assign("top.analogFir.channel[34].rFir.n", DumpEntry{top.analogFir.channel[34].rFir.n});
        res.insert_or_assign("top.analogFir.channel[34].rFir.s", DumpEntry{top.analogFir.channel[34].rFir.s});
        res.insert_or_assign("top.analogFir.channel[34].rFir.r", DumpEntry{top.analogFir.channel[34].rFir.r});
        res.insert_or_assign("top.analogFir.channel[34].rFir.tSc", DumpEntry{top.analogFir.channel[34].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].rFir.phase", DumpEntry{top.analogFir.channel[34].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[34].vFir.m", DumpEntry{top.analogFir.channel[34].vFir.m});
        res.insert_or_assign("top.analogFir.channel[34].vFir.n", DumpEntry{top.analogFir.channel[34].vFir.n});
        res.insert_or_assign("top.analogFir.channel[34].vFir.s", DumpEntry{top.analogFir.channel[34].vFir.s});
        res.insert_or_assign("top.analogFir.channel[34].vFir.r", DumpEntry{top.analogFir.channel[34].vFir.r});
        res.insert_or_assign("top.analogFir.channel[34].vFir.tSc", DumpEntry{top.analogFir.channel[34].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].vFir.phase", DumpEntry{top.analogFir.channel[34].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.m", DumpEntry{top.analogFir.channel[34].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.n", DumpEntry{top.analogFir.channel[34].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.s", DumpEntry{top.analogFir.channel[34].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.r", DumpEntry{top.analogFir.channel[34].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.tSc", DumpEntry{top.analogFir.channel[34].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.phase", DumpEntry{top.analogFir.channel[34].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.maxLimit", DumpEntry{top.analogFir.channel[34].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.minLimit", DumpEntry{top.analogFir.channel[34].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.filterLength", DumpEntry{top.analogFir.channel[34].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[35].rFir.m", DumpEntry{top.analogFir.channel[35].rFir.m});
        res.insert_or_assign("top.analogFir.channel[35].rFir.n", DumpEntry{top.analogFir.channel[35].rFir.n});
        res.insert_or_assign("top.analogFir.channel[35].rFir.s", DumpEntry{top.analogFir.channel[35].rFir.s});
        res.insert_or_assign("top.analogFir.channel[35].rFir.r", DumpEntry{top.analogFir.channel[35].rFir.r});
        res.insert_or_assign("top.analogFir.channel[35].rFir.tSc", DumpEntry{top.analogFir.channel[35].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].rFir.phase", DumpEntry{top.analogFir.channel[35].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[35].vFir.m", DumpEntry{top.analogFir.channel[35].vFir.m});
        res.insert_or_assign("top.analogFir.channel[35].vFir.n", DumpEntry{top.analogFir.channel[35].vFir.n});
        res.insert_or_assign("top.analogFir.channel[35].vFir.s", DumpEntry{top.analogFir.channel[35].vFir.s});
        res.insert_or_assign("top.analogFir.channel[35].vFir.r", DumpEntry{top.analogFir.channel[35].vFir.r});
        res.insert_or_assign("top.analogFir.channel[35].vFir.tSc", DumpEntry{top.analogFir.channel[35].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].vFir.phase", DumpEntry{top.analogFir.channel[35].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.m", DumpEntry{top.analogFir.channel[35].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.n", DumpEntry{top.analogFir.channel[35].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.s", DumpEntry{top.analogFir.channel[35].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.r", DumpEntry{top.analogFir.channel[35].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.tSc", DumpEntry{top.analogFir.channel[35].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.phase", DumpEntry{top.analogFir.channel[35].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.maxLimit", DumpEntry{top.analogFir.channel[35].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.minLimit", DumpEntry{top.analogFir.channel[35].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.filterLength", DumpEntry{top.analogFir.channel[35].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[36].rFir.m", DumpEntry{top.analogFir.channel[36].rFir.m});
        res.insert_or_assign("top.analogFir.channel[36].rFir.n", DumpEntry{top.analogFir.channel[36].rFir.n});
        res.insert_or_assign("top.analogFir.channel[36].rFir.s", DumpEntry{top.analogFir.channel[36].rFir.s});
        res.insert_or_assign("top.analogFir.channel[36].rFir.r", DumpEntry{top.analogFir.channel[36].rFir.r});
        res.insert_or_assign("top.analogFir.channel[36].rFir.tSc", DumpEntry{top.analogFir.channel[36].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].rFir.phase", DumpEntry{top.analogFir.channel[36].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[36].vFir.m", DumpEntry{top.analogFir.channel[36].vFir.m});
        res.insert_or_assign("top.analogFir.channel[36].vFir.n", DumpEntry{top.analogFir.channel[36].vFir.n});
        res.insert_or_assign("top.analogFir.channel[36].vFir.s", DumpEntry{top.analogFir.channel[36].vFir.s});
        res.insert_or_assign("top.analogFir.channel[36].vFir.r", DumpEntry{top.analogFir.channel[36].vFir.r});
        res.insert_or_assign("top.analogFir.channel[36].vFir.tSc", DumpEntry{top.analogFir.channel[36].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].vFir.phase", DumpEntry{top.analogFir.channel[36].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.m", DumpEntry{top.analogFir.channel[36].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.n", DumpEntry{top.analogFir.channel[36].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.s", DumpEntry{top.analogFir.channel[36].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.r", DumpEntry{top.analogFir.channel[36].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.tSc", DumpEntry{top.analogFir.channel[36].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.phase", DumpEntry{top.analogFir.channel[36].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.maxLimit", DumpEntry{top.analogFir.channel[36].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.minLimit", DumpEntry{top.analogFir.channel[36].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.filterLength", DumpEntry{top.analogFir.channel[36].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[37].rFir.m", DumpEntry{top.analogFir.channel[37].rFir.m});
        res.insert_or_assign("top.analogFir.channel[37].rFir.n", DumpEntry{top.analogFir.channel[37].rFir.n});
        res.insert_or_assign("top.analogFir.channel[37].rFir.s", DumpEntry{top.analogFir.channel[37].rFir.s});
        res.insert_or_assign("top.analogFir.channel[37].rFir.r", DumpEntry{top.analogFir.channel[37].rFir.r});
        res.insert_or_assign("top.analogFir.channel[37].rFir.tSc", DumpEntry{top.analogFir.channel[37].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].rFir.phase", DumpEntry{top.analogFir.channel[37].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[37].vFir.m", DumpEntry{top.analogFir.channel[37].vFir.m});
        res.insert_or_assign("top.analogFir.channel[37].vFir.n", DumpEntry{top.analogFir.channel[37].vFir.n});
        res.insert_or_assign("top.analogFir.channel[37].vFir.s", DumpEntry{top.analogFir.channel[37].vFir.s});
        res.insert_or_assign("top.analogFir.channel[37].vFir.r", DumpEntry{top.analogFir.channel[37].vFir.r});
        res.insert_or_assign("top.analogFir.channel[37].vFir.tSc", DumpEntry{top.analogFir.channel[37].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].vFir.phase", DumpEntry{top.analogFir.channel[37].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.m", DumpEntry{top.analogFir.channel[37].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.n", DumpEntry{top.analogFir.channel[37].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.s", DumpEntry{top.analogFir.channel[37].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.r", DumpEntry{top.analogFir.channel[37].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.tSc", DumpEntry{top.analogFir.channel[37].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.phase", DumpEntry{top.analogFir.channel[37].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.maxLimit", DumpEntry{top.analogFir.channel[37].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.minLimit", DumpEntry{top.analogFir.channel[37].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.filterLength", DumpEntry{top.analogFir.channel[37].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[38].rFir.m", DumpEntry{top.analogFir.channel[38].rFir.m});
        res.insert_or_assign("top.analogFir.channel[38].rFir.n", DumpEntry{top.analogFir.channel[38].rFir.n});
        res.insert_or_assign("top.analogFir.channel[38].rFir.s", DumpEntry{top.analogFir.channel[38].rFir.s});
        res.insert_or_assign("top.analogFir.channel[38].rFir.r", DumpEntry{top.analogFir.channel[38].rFir.r});
        res.insert_or_assign("top.analogFir.channel[38].rFir.tSc", DumpEntry{top.analogFir.channel[38].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].rFir.phase", DumpEntry{top.analogFir.channel[38].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[38].vFir.m", DumpEntry{top.analogFir.channel[38].vFir.m});
        res.insert_or_assign("top.analogFir.channel[38].vFir.n", DumpEntry{top.analogFir.channel[38].vFir.n});
        res.insert_or_assign("top.analogFir.channel[38].vFir.s", DumpEntry{top.analogFir.channel[38].vFir.s});
        res.insert_or_assign("top.analogFir.channel[38].vFir.r", DumpEntry{top.analogFir.channel[38].vFir.r});
        res.insert_or_assign("top.analogFir.channel[38].vFir.tSc", DumpEntry{top.analogFir.channel[38].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].vFir.phase", DumpEntry{top.analogFir.channel[38].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.m", DumpEntry{top.analogFir.channel[38].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.n", DumpEntry{top.analogFir.channel[38].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.s", DumpEntry{top.analogFir.channel[38].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.r", DumpEntry{top.analogFir.channel[38].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.tSc", DumpEntry{top.analogFir.channel[38].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.phase", DumpEntry{top.analogFir.channel[38].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.maxLimit", DumpEntry{top.analogFir.channel[38].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.minLimit", DumpEntry{top.analogFir.channel[38].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.filterLength", DumpEntry{top.analogFir.channel[38].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[39].rFir.m", DumpEntry{top.analogFir.channel[39].rFir.m});
        res.insert_or_assign("top.analogFir.channel[39].rFir.n", DumpEntry{top.analogFir.channel[39].rFir.n});
        res.insert_or_assign("top.analogFir.channel[39].rFir.s", DumpEntry{top.analogFir.channel[39].rFir.s});
        res.insert_or_assign("top.analogFir.channel[39].rFir.r", DumpEntry{top.analogFir.channel[39].rFir.r});
        res.insert_or_assign("top.analogFir.channel[39].rFir.tSc", DumpEntry{top.analogFir.channel[39].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].rFir.phase", DumpEntry{top.analogFir.channel[39].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[39].vFir.m", DumpEntry{top.analogFir.channel[39].vFir.m});
        res.insert_or_assign("top.analogFir.channel[39].vFir.n", DumpEntry{top.analogFir.channel[39].vFir.n});
        res.insert_or_assign("top.analogFir.channel[39].vFir.s", DumpEntry{top.analogFir.channel[39].vFir.s});
        res.insert_or_assign("top.analogFir.channel[39].vFir.r", DumpEntry{top.analogFir.channel[39].vFir.r});
        res.insert_or_assign("top.analogFir.channel[39].vFir.tSc", DumpEntry{top.analogFir.channel[39].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].vFir.phase", DumpEntry{top.analogFir.channel[39].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.m", DumpEntry{top.analogFir.channel[39].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.n", DumpEntry{top.analogFir.channel[39].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.s", DumpEntry{top.analogFir.channel[39].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.r", DumpEntry{top.analogFir.channel[39].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.tSc", DumpEntry{top.analogFir.channel[39].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.phase", DumpEntry{top.analogFir.channel[39].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.maxLimit", DumpEntry{top.analogFir.channel[39].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.minLimit", DumpEntry{top.analogFir.channel[39].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.filterLength", DumpEntry{top.analogFir.channel[39].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[40].rFir.m", DumpEntry{top.analogFir.channel[40].rFir.m});
        res.insert_or_assign("top.analogFir.channel[40].rFir.n", DumpEntry{top.analogFir.channel[40].rFir.n});
        res.insert_or_assign("top.analogFir.channel[40].rFir.s", DumpEntry{top.analogFir.channel[40].rFir.s});
        res.insert_or_assign("top.analogFir.channel[40].rFir.r", DumpEntry{top.analogFir.channel[40].rFir.r});
        res.insert_or_assign("top.analogFir.channel[40].rFir.tSc", DumpEntry{top.analogFir.channel[40].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].rFir.phase", DumpEntry{top.analogFir.channel[40].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[40].vFir.m", DumpEntry{top.analogFir.channel[40].vFir.m});
        res.insert_or_assign("top.analogFir.channel[40].vFir.n", DumpEntry{top.analogFir.channel[40].vFir.n});
        res.insert_or_assign("top.analogFir.channel[40].vFir.s", DumpEntry{top.analogFir.channel[40].vFir.s});
        res.insert_or_assign("top.analogFir.channel[40].vFir.r", DumpEntry{top.analogFir.channel[40].vFir.r});
        res.insert_or_assign("top.analogFir.channel[40].vFir.tSc", DumpEntry{top.analogFir.channel[40].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].vFir.phase", DumpEntry{top.analogFir.channel[40].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.m", DumpEntry{top.analogFir.channel[40].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.n", DumpEntry{top.analogFir.channel[40].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.s", DumpEntry{top.analogFir.channel[40].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.r", DumpEntry{top.analogFir.channel[40].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.tSc", DumpEntry{top.analogFir.channel[40].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.phase", DumpEntry{top.analogFir.channel[40].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.maxLimit", DumpEntry{top.analogFir.channel[40].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.minLimit", DumpEntry{top.analogFir.channel[40].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.filterLength", DumpEntry{top.analogFir.channel[40].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[41].rFir.m", DumpEntry{top.analogFir.channel[41].rFir.m});
        res.insert_or_assign("top.analogFir.channel[41].rFir.n", DumpEntry{top.analogFir.channel[41].rFir.n});
        res.insert_or_assign("top.analogFir.channel[41].rFir.s", DumpEntry{top.analogFir.channel[41].rFir.s});
        res.insert_or_assign("top.analogFir.channel[41].rFir.r", DumpEntry{top.analogFir.channel[41].rFir.r});
        res.insert_or_assign("top.analogFir.channel[41].rFir.tSc", DumpEntry{top.analogFir.channel[41].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].rFir.phase", DumpEntry{top.analogFir.channel[41].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[41].vFir.m", DumpEntry{top.analogFir.channel[41].vFir.m});
        res.insert_or_assign("top.analogFir.channel[41].vFir.n", DumpEntry{top.analogFir.channel[41].vFir.n});
        res.insert_or_assign("top.analogFir.channel[41].vFir.s", DumpEntry{top.analogFir.channel[41].vFir.s});
        res.insert_or_assign("top.analogFir.channel[41].vFir.r", DumpEntry{top.analogFir.channel[41].vFir.r});
        res.insert_or_assign("top.analogFir.channel[41].vFir.tSc", DumpEntry{top.analogFir.channel[41].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].vFir.phase", DumpEntry{top.analogFir.channel[41].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.m", DumpEntry{top.analogFir.channel[41].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.n", DumpEntry{top.analogFir.channel[41].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.s", DumpEntry{top.analogFir.channel[41].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.r", DumpEntry{top.analogFir.channel[41].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.tSc", DumpEntry{top.analogFir.channel[41].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.phase", DumpEntry{top.analogFir.channel[41].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.maxLimit", DumpEntry{top.analogFir.channel[41].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.minLimit", DumpEntry{top.analogFir.channel[41].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.filterLength", DumpEntry{top.analogFir.channel[41].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[42].rFir.m", DumpEntry{top.analogFir.channel[42].rFir.m});
        res.insert_or_assign("top.analogFir.channel[42].rFir.n", DumpEntry{top.analogFir.channel[42].rFir.n});
        res.insert_or_assign("top.analogFir.channel[42].rFir.s", DumpEntry{top.analogFir.channel[42].rFir.s});
        res.insert_or_assign("top.analogFir.channel[42].rFir.r", DumpEntry{top.analogFir.channel[42].rFir.r});
        res.insert_or_assign("top.analogFir.channel[42].rFir.tSc", DumpEntry{top.analogFir.channel[42].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].rFir.phase", DumpEntry{top.analogFir.channel[42].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[42].vFir.m", DumpEntry{top.analogFir.channel[42].vFir.m});
        res.insert_or_assign("top.analogFir.channel[42].vFir.n", DumpEntry{top.analogFir.channel[42].vFir.n});
        res.insert_or_assign("top.analogFir.channel[42].vFir.s", DumpEntry{top.analogFir.channel[42].vFir.s});
        res.insert_or_assign("top.analogFir.channel[42].vFir.r", DumpEntry{top.analogFir.channel[42].vFir.r});
        res.insert_or_assign("top.analogFir.channel[42].vFir.tSc", DumpEntry{top.analogFir.channel[42].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].vFir.phase", DumpEntry{top.analogFir.channel[42].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.m", DumpEntry{top.analogFir.channel[42].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.n", DumpEntry{top.analogFir.channel[42].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.s", DumpEntry{top.analogFir.channel[42].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.r", DumpEntry{top.analogFir.channel[42].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.tSc", DumpEntry{top.analogFir.channel[42].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.phase", DumpEntry{top.analogFir.channel[42].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.maxLimit", DumpEntry{top.analogFir.channel[42].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.minLimit", DumpEntry{top.analogFir.channel[42].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.filterLength", DumpEntry{top.analogFir.channel[42].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[43].rFir.m", DumpEntry{top.analogFir.channel[43].rFir.m});
        res.insert_or_assign("top.analogFir.channel[43].rFir.n", DumpEntry{top.analogFir.channel[43].rFir.n});
        res.insert_or_assign("top.analogFir.channel[43].rFir.s", DumpEntry{top.analogFir.channel[43].rFir.s});
        res.insert_or_assign("top.analogFir.channel[43].rFir.r", DumpEntry{top.analogFir.channel[43].rFir.r});
        res.insert_or_assign("top.analogFir.channel[43].rFir.tSc", DumpEntry{top.analogFir.channel[43].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].rFir.phase", DumpEntry{top.analogFir.channel[43].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[43].vFir.m", DumpEntry{top.analogFir.channel[43].vFir.m});
        res.insert_or_assign("top.analogFir.channel[43].vFir.n", DumpEntry{top.analogFir.channel[43].vFir.n});
        res.insert_or_assign("top.analogFir.channel[43].vFir.s", DumpEntry{top.analogFir.channel[43].vFir.s});
        res.insert_or_assign("top.analogFir.channel[43].vFir.r", DumpEntry{top.analogFir.channel[43].vFir.r});
        res.insert_or_assign("top.analogFir.channel[43].vFir.tSc", DumpEntry{top.analogFir.channel[43].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].vFir.phase", DumpEntry{top.analogFir.channel[43].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.m", DumpEntry{top.analogFir.channel[43].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.n", DumpEntry{top.analogFir.channel[43].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.s", DumpEntry{top.analogFir.channel[43].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.r", DumpEntry{top.analogFir.channel[43].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.tSc", DumpEntry{top.analogFir.channel[43].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.phase", DumpEntry{top.analogFir.channel[43].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.maxLimit", DumpEntry{top.analogFir.channel[43].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.minLimit", DumpEntry{top.analogFir.channel[43].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.filterLength", DumpEntry{top.analogFir.channel[43].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[44].rFir.m", DumpEntry{top.analogFir.channel[44].rFir.m});
        res.insert_or_assign("top.analogFir.channel[44].rFir.n", DumpEntry{top.analogFir.channel[44].rFir.n});
        res.insert_or_assign("top.analogFir.channel[44].rFir.s", DumpEntry{top.analogFir.channel[44].rFir.s});
        res.insert_or_assign("top.analogFir.channel[44].rFir.r", DumpEntry{top.analogFir.channel[44].rFir.r});
        res.insert_or_assign("top.analogFir.channel[44].rFir.tSc", DumpEntry{top.analogFir.channel[44].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].rFir.phase", DumpEntry{top.analogFir.channel[44].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[44].vFir.m", DumpEntry{top.analogFir.channel[44].vFir.m});
        res.insert_or_assign("top.analogFir.channel[44].vFir.n", DumpEntry{top.analogFir.channel[44].vFir.n});
        res.insert_or_assign("top.analogFir.channel[44].vFir.s", DumpEntry{top.analogFir.channel[44].vFir.s});
        res.insert_or_assign("top.analogFir.channel[44].vFir.r", DumpEntry{top.analogFir.channel[44].vFir.r});
        res.insert_or_assign("top.analogFir.channel[44].vFir.tSc", DumpEntry{top.analogFir.channel[44].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].vFir.phase", DumpEntry{top.analogFir.channel[44].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.m", DumpEntry{top.analogFir.channel[44].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.n", DumpEntry{top.analogFir.channel[44].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.s", DumpEntry{top.analogFir.channel[44].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.r", DumpEntry{top.analogFir.channel[44].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.tSc", DumpEntry{top.analogFir.channel[44].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.phase", DumpEntry{top.analogFir.channel[44].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.maxLimit", DumpEntry{top.analogFir.channel[44].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.minLimit", DumpEntry{top.analogFir.channel[44].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.filterLength", DumpEntry{top.analogFir.channel[44].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[45].rFir.m", DumpEntry{top.analogFir.channel[45].rFir.m});
        res.insert_or_assign("top.analogFir.channel[45].rFir.n", DumpEntry{top.analogFir.channel[45].rFir.n});
        res.insert_or_assign("top.analogFir.channel[45].rFir.s", DumpEntry{top.analogFir.channel[45].rFir.s});
        res.insert_or_assign("top.analogFir.channel[45].rFir.r", DumpEntry{top.analogFir.channel[45].rFir.r});
        res.insert_or_assign("top.analogFir.channel[45].rFir.tSc", DumpEntry{top.analogFir.channel[45].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].rFir.phase", DumpEntry{top.analogFir.channel[45].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[45].vFir.m", DumpEntry{top.analogFir.channel[45].vFir.m});
        res.insert_or_assign("top.analogFir.channel[45].vFir.n", DumpEntry{top.analogFir.channel[45].vFir.n});
        res.insert_or_assign("top.analogFir.channel[45].vFir.s", DumpEntry{top.analogFir.channel[45].vFir.s});
        res.insert_or_assign("top.analogFir.channel[45].vFir.r", DumpEntry{top.analogFir.channel[45].vFir.r});
        res.insert_or_assign("top.analogFir.channel[45].vFir.tSc", DumpEntry{top.analogFir.channel[45].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].vFir.phase", DumpEntry{top.analogFir.channel[45].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.m", DumpEntry{top.analogFir.channel[45].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.n", DumpEntry{top.analogFir.channel[45].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.s", DumpEntry{top.analogFir.channel[45].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.r", DumpEntry{top.analogFir.channel[45].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.tSc", DumpEntry{top.analogFir.channel[45].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.phase", DumpEntry{top.analogFir.channel[45].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.maxLimit", DumpEntry{top.analogFir.channel[45].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.minLimit", DumpEntry{top.analogFir.channel[45].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.filterLength", DumpEntry{top.analogFir.channel[45].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[46].rFir.m", DumpEntry{top.analogFir.channel[46].rFir.m});
        res.insert_or_assign("top.analogFir.channel[46].rFir.n", DumpEntry{top.analogFir.channel[46].rFir.n});
        res.insert_or_assign("top.analogFir.channel[46].rFir.s", DumpEntry{top.analogFir.channel[46].rFir.s});
        res.insert_or_assign("top.analogFir.channel[46].rFir.r", DumpEntry{top.analogFir.channel[46].rFir.r});
        res.insert_or_assign("top.analogFir.channel[46].rFir.tSc", DumpEntry{top.analogFir.channel[46].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].rFir.phase", DumpEntry{top.analogFir.channel[46].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[46].vFir.m", DumpEntry{top.analogFir.channel[46].vFir.m});
        res.insert_or_assign("top.analogFir.channel[46].vFir.n", DumpEntry{top.analogFir.channel[46].vFir.n});
        res.insert_or_assign("top.analogFir.channel[46].vFir.s", DumpEntry{top.analogFir.channel[46].vFir.s});
        res.insert_or_assign("top.analogFir.channel[46].vFir.r", DumpEntry{top.analogFir.channel[46].vFir.r});
        res.insert_or_assign("top.analogFir.channel[46].vFir.tSc", DumpEntry{top.analogFir.channel[46].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].vFir.phase", DumpEntry{top.analogFir.channel[46].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.m", DumpEntry{top.analogFir.channel[46].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.n", DumpEntry{top.analogFir.channel[46].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.s", DumpEntry{top.analogFir.channel[46].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.r", DumpEntry{top.analogFir.channel[46].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.tSc", DumpEntry{top.analogFir.channel[46].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.phase", DumpEntry{top.analogFir.channel[46].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.maxLimit", DumpEntry{top.analogFir.channel[46].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.minLimit", DumpEntry{top.analogFir.channel[46].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.filterLength", DumpEntry{top.analogFir.channel[46].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[47].rFir.m", DumpEntry{top.analogFir.channel[47].rFir.m});
        res.insert_or_assign("top.analogFir.channel[47].rFir.n", DumpEntry{top.analogFir.channel[47].rFir.n});
        res.insert_or_assign("top.analogFir.channel[47].rFir.s", DumpEntry{top.analogFir.channel[47].rFir.s});
        res.insert_or_assign("top.analogFir.channel[47].rFir.r", DumpEntry{top.analogFir.channel[47].rFir.r});
        res.insert_or_assign("top.analogFir.channel[47].rFir.tSc", DumpEntry{top.analogFir.channel[47].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].rFir.phase", DumpEntry{top.analogFir.channel[47].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[47].vFir.m", DumpEntry{top.analogFir.channel[47].vFir.m});
        res.insert_or_assign("top.analogFir.channel[47].vFir.n", DumpEntry{top.analogFir.channel[47].vFir.n});
        res.insert_or_assign("top.analogFir.channel[47].vFir.s", DumpEntry{top.analogFir.channel[47].vFir.s});
        res.insert_or_assign("top.analogFir.channel[47].vFir.r", DumpEntry{top.analogFir.channel[47].vFir.r});
        res.insert_or_assign("top.analogFir.channel[47].vFir.tSc", DumpEntry{top.analogFir.channel[47].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].vFir.phase", DumpEntry{top.analogFir.channel[47].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.m", DumpEntry{top.analogFir.channel[47].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.n", DumpEntry{top.analogFir.channel[47].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.s", DumpEntry{top.analogFir.channel[47].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.r", DumpEntry{top.analogFir.channel[47].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.tSc", DumpEntry{top.analogFir.channel[47].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.phase", DumpEntry{top.analogFir.channel[47].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.maxLimit", DumpEntry{top.analogFir.channel[47].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.minLimit", DumpEntry{top.analogFir.channel[47].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.filterLength", DumpEntry{top.analogFir.channel[47].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[48].rFir.m", DumpEntry{top.analogFir.channel[48].rFir.m});
        res.insert_or_assign("top.analogFir.channel[48].rFir.n", DumpEntry{top.analogFir.channel[48].rFir.n});
        res.insert_or_assign("top.analogFir.channel[48].rFir.s", DumpEntry{top.analogFir.channel[48].rFir.s});
        res.insert_or_assign("top.analogFir.channel[48].rFir.r", DumpEntry{top.analogFir.channel[48].rFir.r});
        res.insert_or_assign("top.analogFir.channel[48].rFir.tSc", DumpEntry{top.analogFir.channel[48].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].rFir.phase", DumpEntry{top.analogFir.channel[48].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[48].vFir.m", DumpEntry{top.analogFir.channel[48].vFir.m});
        res.insert_or_assign("top.analogFir.channel[48].vFir.n", DumpEntry{top.analogFir.channel[48].vFir.n});
        res.insert_or_assign("top.analogFir.channel[48].vFir.s", DumpEntry{top.analogFir.channel[48].vFir.s});
        res.insert_or_assign("top.analogFir.channel[48].vFir.r", DumpEntry{top.analogFir.channel[48].vFir.r});
        res.insert_or_assign("top.analogFir.channel[48].vFir.tSc", DumpEntry{top.analogFir.channel[48].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].vFir.phase", DumpEntry{top.analogFir.channel[48].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.m", DumpEntry{top.analogFir.channel[48].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.n", DumpEntry{top.analogFir.channel[48].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.s", DumpEntry{top.analogFir.channel[48].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.r", DumpEntry{top.analogFir.channel[48].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.tSc", DumpEntry{top.analogFir.channel[48].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.phase", DumpEntry{top.analogFir.channel[48].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.maxLimit", DumpEntry{top.analogFir.channel[48].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.minLimit", DumpEntry{top.analogFir.channel[48].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.filterLength", DumpEntry{top.analogFir.channel[48].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[49].rFir.m", DumpEntry{top.analogFir.channel[49].rFir.m});
        res.insert_or_assign("top.analogFir.channel[49].rFir.n", DumpEntry{top.analogFir.channel[49].rFir.n});
        res.insert_or_assign("top.analogFir.channel[49].rFir.s", DumpEntry{top.analogFir.channel[49].rFir.s});
        res.insert_or_assign("top.analogFir.channel[49].rFir.r", DumpEntry{top.analogFir.channel[49].rFir.r});
        res.insert_or_assign("top.analogFir.channel[49].rFir.tSc", DumpEntry{top.analogFir.channel[49].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].rFir.phase", DumpEntry{top.analogFir.channel[49].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[49].vFir.m", DumpEntry{top.analogFir.channel[49].vFir.m});
        res.insert_or_assign("top.analogFir.channel[49].vFir.n", DumpEntry{top.analogFir.channel[49].vFir.n});
        res.insert_or_assign("top.analogFir.channel[49].vFir.s", DumpEntry{top.analogFir.channel[49].vFir.s});
        res.insert_or_assign("top.analogFir.channel[49].vFir.r", DumpEntry{top.analogFir.channel[49].vFir.r});
        res.insert_or_assign("top.analogFir.channel[49].vFir.tSc", DumpEntry{top.analogFir.channel[49].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].vFir.phase", DumpEntry{top.analogFir.channel[49].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.m", DumpEntry{top.analogFir.channel[49].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.n", DumpEntry{top.analogFir.channel[49].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.s", DumpEntry{top.analogFir.channel[49].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.r", DumpEntry{top.analogFir.channel[49].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.tSc", DumpEntry{top.analogFir.channel[49].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.phase", DumpEntry{top.analogFir.channel[49].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.maxLimit", DumpEntry{top.analogFir.channel[49].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.minLimit", DumpEntry{top.analogFir.channel[49].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.filterLength", DumpEntry{top.analogFir.channel[49].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[50].rFir.m", DumpEntry{top.analogFir.channel[50].rFir.m});
        res.insert_or_assign("top.analogFir.channel[50].rFir.n", DumpEntry{top.analogFir.channel[50].rFir.n});
        res.insert_or_assign("top.analogFir.channel[50].rFir.s", DumpEntry{top.analogFir.channel[50].rFir.s});
        res.insert_or_assign("top.analogFir.channel[50].rFir.r", DumpEntry{top.analogFir.channel[50].rFir.r});
        res.insert_or_assign("top.analogFir.channel[50].rFir.tSc", DumpEntry{top.analogFir.channel[50].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].rFir.phase", DumpEntry{top.analogFir.channel[50].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[50].vFir.m", DumpEntry{top.analogFir.channel[50].vFir.m});
        res.insert_or_assign("top.analogFir.channel[50].vFir.n", DumpEntry{top.analogFir.channel[50].vFir.n});
        res.insert_or_assign("top.analogFir.channel[50].vFir.s", DumpEntry{top.analogFir.channel[50].vFir.s});
        res.insert_or_assign("top.analogFir.channel[50].vFir.r", DumpEntry{top.analogFir.channel[50].vFir.r});
        res.insert_or_assign("top.analogFir.channel[50].vFir.tSc", DumpEntry{top.analogFir.channel[50].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].vFir.phase", DumpEntry{top.analogFir.channel[50].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.m", DumpEntry{top.analogFir.channel[50].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.n", DumpEntry{top.analogFir.channel[50].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.s", DumpEntry{top.analogFir.channel[50].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.r", DumpEntry{top.analogFir.channel[50].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.tSc", DumpEntry{top.analogFir.channel[50].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.phase", DumpEntry{top.analogFir.channel[50].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.maxLimit", DumpEntry{top.analogFir.channel[50].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.minLimit", DumpEntry{top.analogFir.channel[50].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.filterLength", DumpEntry{top.analogFir.channel[50].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[51].rFir.m", DumpEntry{top.analogFir.channel[51].rFir.m});
        res.insert_or_assign("top.analogFir.channel[51].rFir.n", DumpEntry{top.analogFir.channel[51].rFir.n});
        res.insert_or_assign("top.analogFir.channel[51].rFir.s", DumpEntry{top.analogFir.channel[51].rFir.s});
        res.insert_or_assign("top.analogFir.channel[51].rFir.r", DumpEntry{top.analogFir.channel[51].rFir.r});
        res.insert_or_assign("top.analogFir.channel[51].rFir.tSc", DumpEntry{top.analogFir.channel[51].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].rFir.phase", DumpEntry{top.analogFir.channel[51].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[51].vFir.m", DumpEntry{top.analogFir.channel[51].vFir.m});
        res.insert_or_assign("top.analogFir.channel[51].vFir.n", DumpEntry{top.analogFir.channel[51].vFir.n});
        res.insert_or_assign("top.analogFir.channel[51].vFir.s", DumpEntry{top.analogFir.channel[51].vFir.s});
        res.insert_or_assign("top.analogFir.channel[51].vFir.r", DumpEntry{top.analogFir.channel[51].vFir.r});
        res.insert_or_assign("top.analogFir.channel[51].vFir.tSc", DumpEntry{top.analogFir.channel[51].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].vFir.phase", DumpEntry{top.analogFir.channel[51].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.m", DumpEntry{top.analogFir.channel[51].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.n", DumpEntry{top.analogFir.channel[51].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.s", DumpEntry{top.analogFir.channel[51].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.r", DumpEntry{top.analogFir.channel[51].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.tSc", DumpEntry{top.analogFir.channel[51].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.phase", DumpEntry{top.analogFir.channel[51].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.maxLimit", DumpEntry{top.analogFir.channel[51].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.minLimit", DumpEntry{top.analogFir.channel[51].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.filterLength", DumpEntry{top.analogFir.channel[51].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[52].rFir.m", DumpEntry{top.analogFir.channel[52].rFir.m});
        res.insert_or_assign("top.analogFir.channel[52].rFir.n", DumpEntry{top.analogFir.channel[52].rFir.n});
        res.insert_or_assign("top.analogFir.channel[52].rFir.s", DumpEntry{top.analogFir.channel[52].rFir.s});
        res.insert_or_assign("top.analogFir.channel[52].rFir.r", DumpEntry{top.analogFir.channel[52].rFir.r});
        res.insert_or_assign("top.analogFir.channel[52].rFir.tSc", DumpEntry{top.analogFir.channel[52].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].rFir.phase", DumpEntry{top.analogFir.channel[52].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[52].vFir.m", DumpEntry{top.analogFir.channel[52].vFir.m});
        res.insert_or_assign("top.analogFir.channel[52].vFir.n", DumpEntry{top.analogFir.channel[52].vFir.n});
        res.insert_or_assign("top.analogFir.channel[52].vFir.s", DumpEntry{top.analogFir.channel[52].vFir.s});
        res.insert_or_assign("top.analogFir.channel[52].vFir.r", DumpEntry{top.analogFir.channel[52].vFir.r});
        res.insert_or_assign("top.analogFir.channel[52].vFir.tSc", DumpEntry{top.analogFir.channel[52].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].vFir.phase", DumpEntry{top.analogFir.channel[52].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.m", DumpEntry{top.analogFir.channel[52].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.n", DumpEntry{top.analogFir.channel[52].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.s", DumpEntry{top.analogFir.channel[52].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.r", DumpEntry{top.analogFir.channel[52].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.tSc", DumpEntry{top.analogFir.channel[52].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.phase", DumpEntry{top.analogFir.channel[52].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.maxLimit", DumpEntry{top.analogFir.channel[52].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.minLimit", DumpEntry{top.analogFir.channel[52].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.filterLength", DumpEntry{top.analogFir.channel[52].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[53].rFir.m", DumpEntry{top.analogFir.channel[53].rFir.m});
        res.insert_or_assign("top.analogFir.channel[53].rFir.n", DumpEntry{top.analogFir.channel[53].rFir.n});
        res.insert_or_assign("top.analogFir.channel[53].rFir.s", DumpEntry{top.analogFir.channel[53].rFir.s});
        res.insert_or_assign("top.analogFir.channel[53].rFir.r", DumpEntry{top.analogFir.channel[53].rFir.r});
        res.insert_or_assign("top.analogFir.channel[53].rFir.tSc", DumpEntry{top.analogFir.channel[53].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].rFir.phase", DumpEntry{top.analogFir.channel[53].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[53].vFir.m", DumpEntry{top.analogFir.channel[53].vFir.m});
        res.insert_or_assign("top.analogFir.channel[53].vFir.n", DumpEntry{top.analogFir.channel[53].vFir.n});
        res.insert_or_assign("top.analogFir.channel[53].vFir.s", DumpEntry{top.analogFir.channel[53].vFir.s});
        res.insert_or_assign("top.analogFir.channel[53].vFir.r", DumpEntry{top.analogFir.channel[53].vFir.r});
        res.insert_or_assign("top.analogFir.channel[53].vFir.tSc", DumpEntry{top.analogFir.channel[53].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].vFir.phase", DumpEntry{top.analogFir.channel[53].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.m", DumpEntry{top.analogFir.channel[53].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.n", DumpEntry{top.analogFir.channel[53].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.s", DumpEntry{top.analogFir.channel[53].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.r", DumpEntry{top.analogFir.channel[53].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.tSc", DumpEntry{top.analogFir.channel[53].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.phase", DumpEntry{top.analogFir.channel[53].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.maxLimit", DumpEntry{top.analogFir.channel[53].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.minLimit", DumpEntry{top.analogFir.channel[53].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.filterLength", DumpEntry{top.analogFir.channel[53].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[54].rFir.m", DumpEntry{top.analogFir.channel[54].rFir.m});
        res.insert_or_assign("top.analogFir.channel[54].rFir.n", DumpEntry{top.analogFir.channel[54].rFir.n});
        res.insert_or_assign("top.analogFir.channel[54].rFir.s", DumpEntry{top.analogFir.channel[54].rFir.s});
        res.insert_or_assign("top.analogFir.channel[54].rFir.r", DumpEntry{top.analogFir.channel[54].rFir.r});
        res.insert_or_assign("top.analogFir.channel[54].rFir.tSc", DumpEntry{top.analogFir.channel[54].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].rFir.phase", DumpEntry{top.analogFir.channel[54].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[54].vFir.m", DumpEntry{top.analogFir.channel[54].vFir.m});
        res.insert_or_assign("top.analogFir.channel[54].vFir.n", DumpEntry{top.analogFir.channel[54].vFir.n});
        res.insert_or_assign("top.analogFir.channel[54].vFir.s", DumpEntry{top.analogFir.channel[54].vFir.s});
        res.insert_or_assign("top.analogFir.channel[54].vFir.r", DumpEntry{top.analogFir.channel[54].vFir.r});
        res.insert_or_assign("top.analogFir.channel[54].vFir.tSc", DumpEntry{top.analogFir.channel[54].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].vFir.phase", DumpEntry{top.analogFir.channel[54].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.m", DumpEntry{top.analogFir.channel[54].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.n", DumpEntry{top.analogFir.channel[54].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.s", DumpEntry{top.analogFir.channel[54].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.r", DumpEntry{top.analogFir.channel[54].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.tSc", DumpEntry{top.analogFir.channel[54].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.phase", DumpEntry{top.analogFir.channel[54].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.maxLimit", DumpEntry{top.analogFir.channel[54].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.minLimit", DumpEntry{top.analogFir.channel[54].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.filterLength", DumpEntry{top.analogFir.channel[54].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[55].rFir.m", DumpEntry{top.analogFir.channel[55].rFir.m});
        res.insert_or_assign("top.analogFir.channel[55].rFir.n", DumpEntry{top.analogFir.channel[55].rFir.n});
        res.insert_or_assign("top.analogFir.channel[55].rFir.s", DumpEntry{top.analogFir.channel[55].rFir.s});
        res.insert_or_assign("top.analogFir.channel[55].rFir.r", DumpEntry{top.analogFir.channel[55].rFir.r});
        res.insert_or_assign("top.analogFir.channel[55].rFir.tSc", DumpEntry{top.analogFir.channel[55].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].rFir.phase", DumpEntry{top.analogFir.channel[55].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[55].vFir.m", DumpEntry{top.analogFir.channel[55].vFir.m});
        res.insert_or_assign("top.analogFir.channel[55].vFir.n", DumpEntry{top.analogFir.channel[55].vFir.n});
        res.insert_or_assign("top.analogFir.channel[55].vFir.s", DumpEntry{top.analogFir.channel[55].vFir.s});
        res.insert_or_assign("top.analogFir.channel[55].vFir.r", DumpEntry{top.analogFir.channel[55].vFir.r});
        res.insert_or_assign("top.analogFir.channel[55].vFir.tSc", DumpEntry{top.analogFir.channel[55].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].vFir.phase", DumpEntry{top.analogFir.channel[55].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.m", DumpEntry{top.analogFir.channel[55].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.n", DumpEntry{top.analogFir.channel[55].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.s", DumpEntry{top.analogFir.channel[55].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.r", DumpEntry{top.analogFir.channel[55].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.tSc", DumpEntry{top.analogFir.channel[55].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.phase", DumpEntry{top.analogFir.channel[55].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.maxLimit", DumpEntry{top.analogFir.channel[55].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.minLimit", DumpEntry{top.analogFir.channel[55].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.filterLength", DumpEntry{top.analogFir.channel[55].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[56].rFir.m", DumpEntry{top.analogFir.channel[56].rFir.m});
        res.insert_or_assign("top.analogFir.channel[56].rFir.n", DumpEntry{top.analogFir.channel[56].rFir.n});
        res.insert_or_assign("top.analogFir.channel[56].rFir.s", DumpEntry{top.analogFir.channel[56].rFir.s});
        res.insert_or_assign("top.analogFir.channel[56].rFir.r", DumpEntry{top.analogFir.channel[56].rFir.r});
        res.insert_or_assign("top.analogFir.channel[56].rFir.tSc", DumpEntry{top.analogFir.channel[56].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].rFir.phase", DumpEntry{top.analogFir.channel[56].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[56].vFir.m", DumpEntry{top.analogFir.channel[56].vFir.m});
        res.insert_or_assign("top.analogFir.channel[56].vFir.n", DumpEntry{top.analogFir.channel[56].vFir.n});
        res.insert_or_assign("top.analogFir.channel[56].vFir.s", DumpEntry{top.analogFir.channel[56].vFir.s});
        res.insert_or_assign("top.analogFir.channel[56].vFir.r", DumpEntry{top.analogFir.channel[56].vFir.r});
        res.insert_or_assign("top.analogFir.channel[56].vFir.tSc", DumpEntry{top.analogFir.channel[56].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].vFir.phase", DumpEntry{top.analogFir.channel[56].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.m", DumpEntry{top.analogFir.channel[56].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.n", DumpEntry{top.analogFir.channel[56].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.s", DumpEntry{top.analogFir.channel[56].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.r", DumpEntry{top.analogFir.channel[56].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.tSc", DumpEntry{top.analogFir.channel[56].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.phase", DumpEntry{top.analogFir.channel[56].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.maxLimit", DumpEntry{top.analogFir.channel[56].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.minLimit", DumpEntry{top.analogFir.channel[56].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.filterLength", DumpEntry{top.analogFir.channel[56].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[57].rFir.m", DumpEntry{top.analogFir.channel[57].rFir.m});
        res.insert_or_assign("top.analogFir.channel[57].rFir.n", DumpEntry{top.analogFir.channel[57].rFir.n});
        res.insert_or_assign("top.analogFir.channel[57].rFir.s", DumpEntry{top.analogFir.channel[57].rFir.s});
        res.insert_or_assign("top.analogFir.channel[57].rFir.r", DumpEntry{top.analogFir.channel[57].rFir.r});
        res.insert_or_assign("top.analogFir.channel[57].rFir.tSc", DumpEntry{top.analogFir.channel[57].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].rFir.phase", DumpEntry{top.analogFir.channel[57].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[57].vFir.m", DumpEntry{top.analogFir.channel[57].vFir.m});
        res.insert_or_assign("top.analogFir.channel[57].vFir.n", DumpEntry{top.analogFir.channel[57].vFir.n});
        res.insert_or_assign("top.analogFir.channel[57].vFir.s", DumpEntry{top.analogFir.channel[57].vFir.s});
        res.insert_or_assign("top.analogFir.channel[57].vFir.r", DumpEntry{top.analogFir.channel[57].vFir.r});
        res.insert_or_assign("top.analogFir.channel[57].vFir.tSc", DumpEntry{top.analogFir.channel[57].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].vFir.phase", DumpEntry{top.analogFir.channel[57].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.m", DumpEntry{top.analogFir.channel[57].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.n", DumpEntry{top.analogFir.channel[57].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.s", DumpEntry{top.analogFir.channel[57].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.r", DumpEntry{top.analogFir.channel[57].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.tSc", DumpEntry{top.analogFir.channel[57].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.phase", DumpEntry{top.analogFir.channel[57].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.maxLimit", DumpEntry{top.analogFir.channel[57].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.minLimit", DumpEntry{top.analogFir.channel[57].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.filterLength", DumpEntry{top.analogFir.channel[57].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[58].rFir.m", DumpEntry{top.analogFir.channel[58].rFir.m});
        res.insert_or_assign("top.analogFir.channel[58].rFir.n", DumpEntry{top.analogFir.channel[58].rFir.n});
        res.insert_or_assign("top.analogFir.channel[58].rFir.s", DumpEntry{top.analogFir.channel[58].rFir.s});
        res.insert_or_assign("top.analogFir.channel[58].rFir.r", DumpEntry{top.analogFir.channel[58].rFir.r});
        res.insert_or_assign("top.analogFir.channel[58].rFir.tSc", DumpEntry{top.analogFir.channel[58].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].rFir.phase", DumpEntry{top.analogFir.channel[58].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[58].vFir.m", DumpEntry{top.analogFir.channel[58].vFir.m});
        res.insert_or_assign("top.analogFir.channel[58].vFir.n", DumpEntry{top.analogFir.channel[58].vFir.n});
        res.insert_or_assign("top.analogFir.channel[58].vFir.s", DumpEntry{top.analogFir.channel[58].vFir.s});
        res.insert_or_assign("top.analogFir.channel[58].vFir.r", DumpEntry{top.analogFir.channel[58].vFir.r});
        res.insert_or_assign("top.analogFir.channel[58].vFir.tSc", DumpEntry{top.analogFir.channel[58].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].vFir.phase", DumpEntry{top.analogFir.channel[58].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.m", DumpEntry{top.analogFir.channel[58].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.n", DumpEntry{top.analogFir.channel[58].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.s", DumpEntry{top.analogFir.channel[58].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.r", DumpEntry{top.analogFir.channel[58].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.tSc", DumpEntry{top.analogFir.channel[58].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.phase", DumpEntry{top.analogFir.channel[58].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.maxLimit", DumpEntry{top.analogFir.channel[58].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.minLimit", DumpEntry{top.analogFir.channel[58].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.filterLength", DumpEntry{top.analogFir.channel[58].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[59].rFir.m", DumpEntry{top.analogFir.channel[59].rFir.m});
        res.insert_or_assign("top.analogFir.channel[59].rFir.n", DumpEntry{top.analogFir.channel[59].rFir.n});
        res.insert_or_assign("top.analogFir.channel[59].rFir.s", DumpEntry{top.analogFir.channel[59].rFir.s});
        res.insert_or_assign("top.analogFir.channel[59].rFir.r", DumpEntry{top.analogFir.channel[59].rFir.r});
        res.insert_or_assign("top.analogFir.channel[59].rFir.tSc", DumpEntry{top.analogFir.channel[59].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].rFir.phase", DumpEntry{top.analogFir.channel[59].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[59].vFir.m", DumpEntry{top.analogFir.channel[59].vFir.m});
        res.insert_or_assign("top.analogFir.channel[59].vFir.n", DumpEntry{top.analogFir.channel[59].vFir.n});
        res.insert_or_assign("top.analogFir.channel[59].vFir.s", DumpEntry{top.analogFir.channel[59].vFir.s});
        res.insert_or_assign("top.analogFir.channel[59].vFir.r", DumpEntry{top.analogFir.channel[59].vFir.r});
        res.insert_or_assign("top.analogFir.channel[59].vFir.tSc", DumpEntry{top.analogFir.channel[59].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].vFir.phase", DumpEntry{top.analogFir.channel[59].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.m", DumpEntry{top.analogFir.channel[59].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.n", DumpEntry{top.analogFir.channel[59].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.s", DumpEntry{top.analogFir.channel[59].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.r", DumpEntry{top.analogFir.channel[59].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.tSc", DumpEntry{top.analogFir.channel[59].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.phase", DumpEntry{top.analogFir.channel[59].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.maxLimit", DumpEntry{top.analogFir.channel[59].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.minLimit", DumpEntry{top.analogFir.channel[59].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.filterLength", DumpEntry{top.analogFir.channel[59].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[60].rFir.m", DumpEntry{top.analogFir.channel[60].rFir.m});
        res.insert_or_assign("top.analogFir.channel[60].rFir.n", DumpEntry{top.analogFir.channel[60].rFir.n});
        res.insert_or_assign("top.analogFir.channel[60].rFir.s", DumpEntry{top.analogFir.channel[60].rFir.s});
        res.insert_or_assign("top.analogFir.channel[60].rFir.r", DumpEntry{top.analogFir.channel[60].rFir.r});
        res.insert_or_assign("top.analogFir.channel[60].rFir.tSc", DumpEntry{top.analogFir.channel[60].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].rFir.phase", DumpEntry{top.analogFir.channel[60].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[60].vFir.m", DumpEntry{top.analogFir.channel[60].vFir.m});
        res.insert_or_assign("top.analogFir.channel[60].vFir.n", DumpEntry{top.analogFir.channel[60].vFir.n});
        res.insert_or_assign("top.analogFir.channel[60].vFir.s", DumpEntry{top.analogFir.channel[60].vFir.s});
        res.insert_or_assign("top.analogFir.channel[60].vFir.r", DumpEntry{top.analogFir.channel[60].vFir.r});
        res.insert_or_assign("top.analogFir.channel[60].vFir.tSc", DumpEntry{top.analogFir.channel[60].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].vFir.phase", DumpEntry{top.analogFir.channel[60].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.m", DumpEntry{top.analogFir.channel[60].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.n", DumpEntry{top.analogFir.channel[60].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.s", DumpEntry{top.analogFir.channel[60].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.r", DumpEntry{top.analogFir.channel[60].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.tSc", DumpEntry{top.analogFir.channel[60].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.phase", DumpEntry{top.analogFir.channel[60].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.maxLimit", DumpEntry{top.analogFir.channel[60].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.minLimit", DumpEntry{top.analogFir.channel[60].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.filterLength", DumpEntry{top.analogFir.channel[60].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[61].rFir.m", DumpEntry{top.analogFir.channel[61].rFir.m});
        res.insert_or_assign("top.analogFir.channel[61].rFir.n", DumpEntry{top.analogFir.channel[61].rFir.n});
        res.insert_or_assign("top.analogFir.channel[61].rFir.s", DumpEntry{top.analogFir.channel[61].rFir.s});
        res.insert_or_assign("top.analogFir.channel[61].rFir.r", DumpEntry{top.analogFir.channel[61].rFir.r});
        res.insert_or_assign("top.analogFir.channel[61].rFir.tSc", DumpEntry{top.analogFir.channel[61].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].rFir.phase", DumpEntry{top.analogFir.channel[61].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[61].vFir.m", DumpEntry{top.analogFir.channel[61].vFir.m});
        res.insert_or_assign("top.analogFir.channel[61].vFir.n", DumpEntry{top.analogFir.channel[61].vFir.n});
        res.insert_or_assign("top.analogFir.channel[61].vFir.s", DumpEntry{top.analogFir.channel[61].vFir.s});
        res.insert_or_assign("top.analogFir.channel[61].vFir.r", DumpEntry{top.analogFir.channel[61].vFir.r});
        res.insert_or_assign("top.analogFir.channel[61].vFir.tSc", DumpEntry{top.analogFir.channel[61].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].vFir.phase", DumpEntry{top.analogFir.channel[61].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.m", DumpEntry{top.analogFir.channel[61].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.n", DumpEntry{top.analogFir.channel[61].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.s", DumpEntry{top.analogFir.channel[61].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.r", DumpEntry{top.analogFir.channel[61].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.tSc", DumpEntry{top.analogFir.channel[61].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.phase", DumpEntry{top.analogFir.channel[61].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.maxLimit", DumpEntry{top.analogFir.channel[61].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.minLimit", DumpEntry{top.analogFir.channel[61].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.filterLength", DumpEntry{top.analogFir.channel[61].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.mmTrip", DumpEntry{top.analogFir.mmTrip});
        res.insert_or_assign("top.analogMs.channel[0].ms.algorithms", DumpEntry{top.analogMs.channel[0].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[0].ms.algorithms.alg", DumpEntry{top.analogMs.channel[0].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[0].ms.offset", DumpEntry{top.analogMs.channel[0].ms.offset});
        res.insert_or_assign("top.analogMs.channel[0].ms.iirA", DumpEntry{top.analogMs.channel[0].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[0].ms.iirB", DumpEntry{top.analogMs.channel[0].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[0].ms.maxLimit", DumpEntry{top.analogMs.channel[0].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[0].ms.minLimit", DumpEntry{top.analogMs.channel[0].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[0].ms.accLength", DumpEntry{top.analogMs.channel[0].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[0].ms.firMask", DumpEntry{top.analogMs.channel[0].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[1].ms.algorithms", DumpEntry{top.analogMs.channel[1].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[1].ms.algorithms.alg", DumpEntry{top.analogMs.channel[1].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[1].ms.offset", DumpEntry{top.analogMs.channel[1].ms.offset});
        res.insert_or_assign("top.analogMs.channel[1].ms.iirA", DumpEntry{top.analogMs.channel[1].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[1].ms.iirB", DumpEntry{top.analogMs.channel[1].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[1].ms.maxLimit", DumpEntry{top.analogMs.channel[1].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[1].ms.minLimit", DumpEntry{top.analogMs.channel[1].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[1].ms.accLength", DumpEntry{top.analogMs.channel[1].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[1].ms.firMask", DumpEntry{top.analogMs.channel[1].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[2].ms.algorithms", DumpEntry{top.analogMs.channel[2].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[2].ms.algorithms.alg", DumpEntry{top.analogMs.channel[2].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[2].ms.offset", DumpEntry{top.analogMs.channel[2].ms.offset});
        res.insert_or_assign("top.analogMs.channel[2].ms.iirA", DumpEntry{top.analogMs.channel[2].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[2].ms.iirB", DumpEntry{top.analogMs.channel[2].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[2].ms.maxLimit", DumpEntry{top.analogMs.channel[2].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[2].ms.minLimit", DumpEntry{top.analogMs.channel[2].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[2].ms.accLength", DumpEntry{top.analogMs.channel[2].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[2].ms.firMask", DumpEntry{top.analogMs.channel[2].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[3].ms.algorithms", DumpEntry{top.analogMs.channel[3].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[3].ms.algorithms.alg", DumpEntry{top.analogMs.channel[3].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[3].ms.offset", DumpEntry{top.analogMs.channel[3].ms.offset});
        res.insert_or_assign("top.analogMs.channel[3].ms.iirA", DumpEntry{top.analogMs.channel[3].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[3].ms.iirB", DumpEntry{top.analogMs.channel[3].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[3].ms.maxLimit", DumpEntry{top.analogMs.channel[3].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[3].ms.minLimit", DumpEntry{top.analogMs.channel[3].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[3].ms.accLength", DumpEntry{top.analogMs.channel[3].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[3].ms.firMask", DumpEntry{top.analogMs.channel[3].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[4].ms.algorithms", DumpEntry{top.analogMs.channel[4].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[4].ms.algorithms.alg", DumpEntry{top.analogMs.channel[4].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[4].ms.offset", DumpEntry{top.analogMs.channel[4].ms.offset});
        res.insert_or_assign("top.analogMs.channel[4].ms.iirA", DumpEntry{top.analogMs.channel[4].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[4].ms.iirB", DumpEntry{top.analogMs.channel[4].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[4].ms.maxLimit", DumpEntry{top.analogMs.channel[4].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[4].ms.minLimit", DumpEntry{top.analogMs.channel[4].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[4].ms.accLength", DumpEntry{top.analogMs.channel[4].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[4].ms.firMask", DumpEntry{top.analogMs.channel[4].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[5].ms.algorithms", DumpEntry{top.analogMs.channel[5].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[5].ms.algorithms.alg", DumpEntry{top.analogMs.channel[5].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[5].ms.offset", DumpEntry{top.analogMs.channel[5].ms.offset});
        res.insert_or_assign("top.analogMs.channel[5].ms.iirA", DumpEntry{top.analogMs.channel[5].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[5].ms.iirB", DumpEntry{top.analogMs.channel[5].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[5].ms.maxLimit", DumpEntry{top.analogMs.channel[5].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[5].ms.minLimit", DumpEntry{top.analogMs.channel[5].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[5].ms.accLength", DumpEntry{top.analogMs.channel[5].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[5].ms.firMask", DumpEntry{top.analogMs.channel[5].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[6].ms.algorithms", DumpEntry{top.analogMs.channel[6].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[6].ms.algorithms.alg", DumpEntry{top.analogMs.channel[6].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[6].ms.offset", DumpEntry{top.analogMs.channel[6].ms.offset});
        res.insert_or_assign("top.analogMs.channel[6].ms.iirA", DumpEntry{top.analogMs.channel[6].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[6].ms.iirB", DumpEntry{top.analogMs.channel[6].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[6].ms.maxLimit", DumpEntry{top.analogMs.channel[6].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[6].ms.minLimit", DumpEntry{top.analogMs.channel[6].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[6].ms.accLength", DumpEntry{top.analogMs.channel[6].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[6].ms.firMask", DumpEntry{top.analogMs.channel[6].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[7].ms.algorithms", DumpEntry{top.analogMs.channel[7].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[7].ms.algorithms.alg", DumpEntry{top.analogMs.channel[7].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[7].ms.offset", DumpEntry{top.analogMs.channel[7].ms.offset});
        res.insert_or_assign("top.analogMs.channel[7].ms.iirA", DumpEntry{top.analogMs.channel[7].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[7].ms.iirB", DumpEntry{top.analogMs.channel[7].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[7].ms.maxLimit", DumpEntry{top.analogMs.channel[7].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[7].ms.minLimit", DumpEntry{top.analogMs.channel[7].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[7].ms.accLength", DumpEntry{top.analogMs.channel[7].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[7].ms.firMask", DumpEntry{top.analogMs.channel[7].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[8].ms.algorithms", DumpEntry{top.analogMs.channel[8].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[8].ms.algorithms.alg", DumpEntry{top.analogMs.channel[8].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[8].ms.offset", DumpEntry{top.analogMs.channel[8].ms.offset});
        res.insert_or_assign("top.analogMs.channel[8].ms.iirA", DumpEntry{top.analogMs.channel[8].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[8].ms.iirB", DumpEntry{top.analogMs.channel[8].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[8].ms.maxLimit", DumpEntry{top.analogMs.channel[8].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[8].ms.minLimit", DumpEntry{top.analogMs.channel[8].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[8].ms.accLength", DumpEntry{top.analogMs.channel[8].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[8].ms.firMask", DumpEntry{top.analogMs.channel[8].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[9].ms.algorithms", DumpEntry{top.analogMs.channel[9].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[9].ms.algorithms.alg", DumpEntry{top.analogMs.channel[9].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[9].ms.offset", DumpEntry{top.analogMs.channel[9].ms.offset});
        res.insert_or_assign("top.analogMs.channel[9].ms.iirA", DumpEntry{top.analogMs.channel[9].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[9].ms.iirB", DumpEntry{top.analogMs.channel[9].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[9].ms.maxLimit", DumpEntry{top.analogMs.channel[9].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[9].ms.minLimit", DumpEntry{top.analogMs.channel[9].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[9].ms.accLength", DumpEntry{top.analogMs.channel[9].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[9].ms.firMask", DumpEntry{top.analogMs.channel[9].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[10].ms.algorithms", DumpEntry{top.analogMs.channel[10].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[10].ms.algorithms.alg", DumpEntry{top.analogMs.channel[10].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[10].ms.offset", DumpEntry{top.analogMs.channel[10].ms.offset});
        res.insert_or_assign("top.analogMs.channel[10].ms.iirA", DumpEntry{top.analogMs.channel[10].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[10].ms.iirB", DumpEntry{top.analogMs.channel[10].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[10].ms.maxLimit", DumpEntry{top.analogMs.channel[10].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[10].ms.minLimit", DumpEntry{top.analogMs.channel[10].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[10].ms.accLength", DumpEntry{top.analogMs.channel[10].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[10].ms.firMask", DumpEntry{top.analogMs.channel[10].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[11].ms.algorithms", DumpEntry{top.analogMs.channel[11].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[11].ms.algorithms.alg", DumpEntry{top.analogMs.channel[11].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[11].ms.offset", DumpEntry{top.analogMs.channel[11].ms.offset});
        res.insert_or_assign("top.analogMs.channel[11].ms.iirA", DumpEntry{top.analogMs.channel[11].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[11].ms.iirB", DumpEntry{top.analogMs.channel[11].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[11].ms.maxLimit", DumpEntry{top.analogMs.channel[11].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[11].ms.minLimit", DumpEntry{top.analogMs.channel[11].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[11].ms.accLength", DumpEntry{top.analogMs.channel[11].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[11].ms.firMask", DumpEntry{top.analogMs.channel[11].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[12].ms.algorithms", DumpEntry{top.analogMs.channel[12].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[12].ms.algorithms.alg", DumpEntry{top.analogMs.channel[12].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[12].ms.offset", DumpEntry{top.analogMs.channel[12].ms.offset});
        res.insert_or_assign("top.analogMs.channel[12].ms.iirA", DumpEntry{top.analogMs.channel[12].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[12].ms.iirB", DumpEntry{top.analogMs.channel[12].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[12].ms.maxLimit", DumpEntry{top.analogMs.channel[12].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[12].ms.minLimit", DumpEntry{top.analogMs.channel[12].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[12].ms.accLength", DumpEntry{top.analogMs.channel[12].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[12].ms.firMask", DumpEntry{top.analogMs.channel[12].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[13].ms.algorithms", DumpEntry{top.analogMs.channel[13].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[13].ms.algorithms.alg", DumpEntry{top.analogMs.channel[13].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[13].ms.offset", DumpEntry{top.analogMs.channel[13].ms.offset});
        res.insert_or_assign("top.analogMs.channel[13].ms.iirA", DumpEntry{top.analogMs.channel[13].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[13].ms.iirB", DumpEntry{top.analogMs.channel[13].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[13].ms.maxLimit", DumpEntry{top.analogMs.channel[13].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[13].ms.minLimit", DumpEntry{top.analogMs.channel[13].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[13].ms.accLength", DumpEntry{top.analogMs.channel[13].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[13].ms.firMask", DumpEntry{top.analogMs.channel[13].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[14].ms.algorithms", DumpEntry{top.analogMs.channel[14].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[14].ms.algorithms.alg", DumpEntry{top.analogMs.channel[14].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[14].ms.offset", DumpEntry{top.analogMs.channel[14].ms.offset});
        res.insert_or_assign("top.analogMs.channel[14].ms.iirA", DumpEntry{top.analogMs.channel[14].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[14].ms.iirB", DumpEntry{top.analogMs.channel[14].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[14].ms.maxLimit", DumpEntry{top.analogMs.channel[14].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[14].ms.minLimit", DumpEntry{top.analogMs.channel[14].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[14].ms.accLength", DumpEntry{top.analogMs.channel[14].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[14].ms.firMask", DumpEntry{top.analogMs.channel[14].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[15].ms.algorithms", DumpEntry{top.analogMs.channel[15].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[15].ms.algorithms.alg", DumpEntry{top.analogMs.channel[15].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[15].ms.offset", DumpEntry{top.analogMs.channel[15].ms.offset});
        res.insert_or_assign("top.analogMs.channel[15].ms.iirA", DumpEntry{top.analogMs.channel[15].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[15].ms.iirB", DumpEntry{top.analogMs.channel[15].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[15].ms.maxLimit", DumpEntry{top.analogMs.channel[15].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[15].ms.minLimit", DumpEntry{top.analogMs.channel[15].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[15].ms.accLength", DumpEntry{top.analogMs.channel[15].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[15].ms.firMask", DumpEntry{top.analogMs.channel[15].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[16].ms.algorithms", DumpEntry{top.analogMs.channel[16].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[16].ms.algorithms.alg", DumpEntry{top.analogMs.channel[16].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[16].ms.offset", DumpEntry{top.analogMs.channel[16].ms.offset});
        res.insert_or_assign("top.analogMs.channel[16].ms.iirA", DumpEntry{top.analogMs.channel[16].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[16].ms.iirB", DumpEntry{top.analogMs.channel[16].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[16].ms.maxLimit", DumpEntry{top.analogMs.channel[16].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[16].ms.minLimit", DumpEntry{top.analogMs.channel[16].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[16].ms.accLength", DumpEntry{top.analogMs.channel[16].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[16].ms.firMask", DumpEntry{top.analogMs.channel[16].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[17].ms.algorithms", DumpEntry{top.analogMs.channel[17].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[17].ms.algorithms.alg", DumpEntry{top.analogMs.channel[17].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[17].ms.offset", DumpEntry{top.analogMs.channel[17].ms.offset});
        res.insert_or_assign("top.analogMs.channel[17].ms.iirA", DumpEntry{top.analogMs.channel[17].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[17].ms.iirB", DumpEntry{top.analogMs.channel[17].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[17].ms.maxLimit", DumpEntry{top.analogMs.channel[17].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[17].ms.minLimit", DumpEntry{top.analogMs.channel[17].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[17].ms.accLength", DumpEntry{top.analogMs.channel[17].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[17].ms.firMask", DumpEntry{top.analogMs.channel[17].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[18].ms.algorithms", DumpEntry{top.analogMs.channel[18].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[18].ms.algorithms.alg", DumpEntry{top.analogMs.channel[18].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[18].ms.offset", DumpEntry{top.analogMs.channel[18].ms.offset});
        res.insert_or_assign("top.analogMs.channel[18].ms.iirA", DumpEntry{top.analogMs.channel[18].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[18].ms.iirB", DumpEntry{top.analogMs.channel[18].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[18].ms.maxLimit", DumpEntry{top.analogMs.channel[18].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[18].ms.minLimit", DumpEntry{top.analogMs.channel[18].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[18].ms.accLength", DumpEntry{top.analogMs.channel[18].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[18].ms.firMask", DumpEntry{top.analogMs.channel[18].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[19].ms.algorithms", DumpEntry{top.analogMs.channel[19].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[19].ms.algorithms.alg", DumpEntry{top.analogMs.channel[19].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[19].ms.offset", DumpEntry{top.analogMs.channel[19].ms.offset});
        res.insert_or_assign("top.analogMs.channel[19].ms.iirA", DumpEntry{top.analogMs.channel[19].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[19].ms.iirB", DumpEntry{top.analogMs.channel[19].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[19].ms.maxLimit", DumpEntry{top.analogMs.channel[19].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[19].ms.minLimit", DumpEntry{top.analogMs.channel[19].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[19].ms.accLength", DumpEntry{top.analogMs.channel[19].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[19].ms.firMask", DumpEntry{top.analogMs.channel[19].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[20].ms.algorithms", DumpEntry{top.analogMs.channel[20].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[20].ms.algorithms.alg", DumpEntry{top.analogMs.channel[20].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[20].ms.offset", DumpEntry{top.analogMs.channel[20].ms.offset});
        res.insert_or_assign("top.analogMs.channel[20].ms.iirA", DumpEntry{top.analogMs.channel[20].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[20].ms.iirB", DumpEntry{top.analogMs.channel[20].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[20].ms.maxLimit", DumpEntry{top.analogMs.channel[20].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[20].ms.minLimit", DumpEntry{top.analogMs.channel[20].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[20].ms.accLength", DumpEntry{top.analogMs.channel[20].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[20].ms.firMask", DumpEntry{top.analogMs.channel[20].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[21].ms.algorithms", DumpEntry{top.analogMs.channel[21].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[21].ms.algorithms.alg", DumpEntry{top.analogMs.channel[21].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[21].ms.offset", DumpEntry{top.analogMs.channel[21].ms.offset});
        res.insert_or_assign("top.analogMs.channel[21].ms.iirA", DumpEntry{top.analogMs.channel[21].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[21].ms.iirB", DumpEntry{top.analogMs.channel[21].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[21].ms.maxLimit", DumpEntry{top.analogMs.channel[21].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[21].ms.minLimit", DumpEntry{top.analogMs.channel[21].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[21].ms.accLength", DumpEntry{top.analogMs.channel[21].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[21].ms.firMask", DumpEntry{top.analogMs.channel[21].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[22].ms.algorithms", DumpEntry{top.analogMs.channel[22].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[22].ms.algorithms.alg", DumpEntry{top.analogMs.channel[22].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[22].ms.offset", DumpEntry{top.analogMs.channel[22].ms.offset});
        res.insert_or_assign("top.analogMs.channel[22].ms.iirA", DumpEntry{top.analogMs.channel[22].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[22].ms.iirB", DumpEntry{top.analogMs.channel[22].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[22].ms.maxLimit", DumpEntry{top.analogMs.channel[22].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[22].ms.minLimit", DumpEntry{top.analogMs.channel[22].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[22].ms.accLength", DumpEntry{top.analogMs.channel[22].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[22].ms.firMask", DumpEntry{top.analogMs.channel[22].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[23].ms.algorithms", DumpEntry{top.analogMs.channel[23].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[23].ms.algorithms.alg", DumpEntry{top.analogMs.channel[23].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[23].ms.offset", DumpEntry{top.analogMs.channel[23].ms.offset});
        res.insert_or_assign("top.analogMs.channel[23].ms.iirA", DumpEntry{top.analogMs.channel[23].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[23].ms.iirB", DumpEntry{top.analogMs.channel[23].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[23].ms.maxLimit", DumpEntry{top.analogMs.channel[23].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[23].ms.minLimit", DumpEntry{top.analogMs.channel[23].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[23].ms.accLength", DumpEntry{top.analogMs.channel[23].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[23].ms.firMask", DumpEntry{top.analogMs.channel[23].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[24].ms.algorithms", DumpEntry{top.analogMs.channel[24].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[24].ms.algorithms.alg", DumpEntry{top.analogMs.channel[24].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[24].ms.offset", DumpEntry{top.analogMs.channel[24].ms.offset});
        res.insert_or_assign("top.analogMs.channel[24].ms.iirA", DumpEntry{top.analogMs.channel[24].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[24].ms.iirB", DumpEntry{top.analogMs.channel[24].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[24].ms.maxLimit", DumpEntry{top.analogMs.channel[24].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[24].ms.minLimit", DumpEntry{top.analogMs.channel[24].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[24].ms.accLength", DumpEntry{top.analogMs.channel[24].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[24].ms.firMask", DumpEntry{top.analogMs.channel[24].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[25].ms.algorithms", DumpEntry{top.analogMs.channel[25].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[25].ms.algorithms.alg", DumpEntry{top.analogMs.channel[25].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[25].ms.offset", DumpEntry{top.analogMs.channel[25].ms.offset});
        res.insert_or_assign("top.analogMs.channel[25].ms.iirA", DumpEntry{top.analogMs.channel[25].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[25].ms.iirB", DumpEntry{top.analogMs.channel[25].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[25].ms.maxLimit", DumpEntry{top.analogMs.channel[25].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[25].ms.minLimit", DumpEntry{top.analogMs.channel[25].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[25].ms.accLength", DumpEntry{top.analogMs.channel[25].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[25].ms.firMask", DumpEntry{top.analogMs.channel[25].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[26].ms.algorithms", DumpEntry{top.analogMs.channel[26].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[26].ms.algorithms.alg", DumpEntry{top.analogMs.channel[26].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[26].ms.offset", DumpEntry{top.analogMs.channel[26].ms.offset});
        res.insert_or_assign("top.analogMs.channel[26].ms.iirA", DumpEntry{top.analogMs.channel[26].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[26].ms.iirB", DumpEntry{top.analogMs.channel[26].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[26].ms.maxLimit", DumpEntry{top.analogMs.channel[26].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[26].ms.minLimit", DumpEntry{top.analogMs.channel[26].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[26].ms.accLength", DumpEntry{top.analogMs.channel[26].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[26].ms.firMask", DumpEntry{top.analogMs.channel[26].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[27].ms.algorithms", DumpEntry{top.analogMs.channel[27].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[27].ms.algorithms.alg", DumpEntry{top.analogMs.channel[27].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[27].ms.offset", DumpEntry{top.analogMs.channel[27].ms.offset});
        res.insert_or_assign("top.analogMs.channel[27].ms.iirA", DumpEntry{top.analogMs.channel[27].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[27].ms.iirB", DumpEntry{top.analogMs.channel[27].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[27].ms.maxLimit", DumpEntry{top.analogMs.channel[27].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[27].ms.minLimit", DumpEntry{top.analogMs.channel[27].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[27].ms.accLength", DumpEntry{top.analogMs.channel[27].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[27].ms.firMask", DumpEntry{top.analogMs.channel[27].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[28].ms.algorithms", DumpEntry{top.analogMs.channel[28].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[28].ms.algorithms.alg", DumpEntry{top.analogMs.channel[28].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[28].ms.offset", DumpEntry{top.analogMs.channel[28].ms.offset});
        res.insert_or_assign("top.analogMs.channel[28].ms.iirA", DumpEntry{top.analogMs.channel[28].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[28].ms.iirB", DumpEntry{top.analogMs.channel[28].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[28].ms.maxLimit", DumpEntry{top.analogMs.channel[28].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[28].ms.minLimit", DumpEntry{top.analogMs.channel[28].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[28].ms.accLength", DumpEntry{top.analogMs.channel[28].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[28].ms.firMask", DumpEntry{top.analogMs.channel[28].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[29].ms.algorithms", DumpEntry{top.analogMs.channel[29].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[29].ms.algorithms.alg", DumpEntry{top.analogMs.channel[29].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[29].ms.offset", DumpEntry{top.analogMs.channel[29].ms.offset});
        res.insert_or_assign("top.analogMs.channel[29].ms.iirA", DumpEntry{top.analogMs.channel[29].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[29].ms.iirB", DumpEntry{top.analogMs.channel[29].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[29].ms.maxLimit", DumpEntry{top.analogMs.channel[29].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[29].ms.minLimit", DumpEntry{top.analogMs.channel[29].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[29].ms.accLength", DumpEntry{top.analogMs.channel[29].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[29].ms.firMask", DumpEntry{top.analogMs.channel[29].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[30].ms.algorithms", DumpEntry{top.analogMs.channel[30].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[30].ms.algorithms.alg", DumpEntry{top.analogMs.channel[30].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[30].ms.offset", DumpEntry{top.analogMs.channel[30].ms.offset});
        res.insert_or_assign("top.analogMs.channel[30].ms.iirA", DumpEntry{top.analogMs.channel[30].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[30].ms.iirB", DumpEntry{top.analogMs.channel[30].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[30].ms.maxLimit", DumpEntry{top.analogMs.channel[30].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[30].ms.minLimit", DumpEntry{top.analogMs.channel[30].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[30].ms.accLength", DumpEntry{top.analogMs.channel[30].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[30].ms.firMask", DumpEntry{top.analogMs.channel[30].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[31].ms.algorithms", DumpEntry{top.analogMs.channel[31].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[31].ms.algorithms.alg", DumpEntry{top.analogMs.channel[31].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[31].ms.offset", DumpEntry{top.analogMs.channel[31].ms.offset});
        res.insert_or_assign("top.analogMs.channel[31].ms.iirA", DumpEntry{top.analogMs.channel[31].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[31].ms.iirB", DumpEntry{top.analogMs.channel[31].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[31].ms.maxLimit", DumpEntry{top.analogMs.channel[31].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[31].ms.minLimit", DumpEntry{top.analogMs.channel[31].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[31].ms.accLength", DumpEntry{top.analogMs.channel[31].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[31].ms.firMask", DumpEntry{top.analogMs.channel[31].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[32].ms.algorithms", DumpEntry{top.analogMs.channel[32].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[32].ms.algorithms.alg", DumpEntry{top.analogMs.channel[32].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[32].ms.offset", DumpEntry{top.analogMs.channel[32].ms.offset});
        res.insert_or_assign("top.analogMs.channel[32].ms.iirA", DumpEntry{top.analogMs.channel[32].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[32].ms.iirB", DumpEntry{top.analogMs.channel[32].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[32].ms.maxLimit", DumpEntry{top.analogMs.channel[32].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[32].ms.minLimit", DumpEntry{top.analogMs.channel[32].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[32].ms.accLength", DumpEntry{top.analogMs.channel[32].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[32].ms.firMask", DumpEntry{top.analogMs.channel[32].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[33].ms.algorithms", DumpEntry{top.analogMs.channel[33].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[33].ms.algorithms.alg", DumpEntry{top.analogMs.channel[33].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[33].ms.offset", DumpEntry{top.analogMs.channel[33].ms.offset});
        res.insert_or_assign("top.analogMs.channel[33].ms.iirA", DumpEntry{top.analogMs.channel[33].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[33].ms.iirB", DumpEntry{top.analogMs.channel[33].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[33].ms.maxLimit", DumpEntry{top.analogMs.channel[33].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[33].ms.minLimit", DumpEntry{top.analogMs.channel[33].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[33].ms.accLength", DumpEntry{top.analogMs.channel[33].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[33].ms.firMask", DumpEntry{top.analogMs.channel[33].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[34].ms.algorithms", DumpEntry{top.analogMs.channel[34].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[34].ms.algorithms.alg", DumpEntry{top.analogMs.channel[34].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[34].ms.offset", DumpEntry{top.analogMs.channel[34].ms.offset});
        res.insert_or_assign("top.analogMs.channel[34].ms.iirA", DumpEntry{top.analogMs.channel[34].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[34].ms.iirB", DumpEntry{top.analogMs.channel[34].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[34].ms.maxLimit", DumpEntry{top.analogMs.channel[34].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[34].ms.minLimit", DumpEntry{top.analogMs.channel[34].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[34].ms.accLength", DumpEntry{top.analogMs.channel[34].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[34].ms.firMask", DumpEntry{top.analogMs.channel[34].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[35].ms.algorithms", DumpEntry{top.analogMs.channel[35].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[35].ms.algorithms.alg", DumpEntry{top.analogMs.channel[35].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[35].ms.offset", DumpEntry{top.analogMs.channel[35].ms.offset});
        res.insert_or_assign("top.analogMs.channel[35].ms.iirA", DumpEntry{top.analogMs.channel[35].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[35].ms.iirB", DumpEntry{top.analogMs.channel[35].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[35].ms.maxLimit", DumpEntry{top.analogMs.channel[35].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[35].ms.minLimit", DumpEntry{top.analogMs.channel[35].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[35].ms.accLength", DumpEntry{top.analogMs.channel[35].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[35].ms.firMask", DumpEntry{top.analogMs.channel[35].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[36].ms.algorithms", DumpEntry{top.analogMs.channel[36].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[36].ms.algorithms.alg", DumpEntry{top.analogMs.channel[36].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[36].ms.offset", DumpEntry{top.analogMs.channel[36].ms.offset});
        res.insert_or_assign("top.analogMs.channel[36].ms.iirA", DumpEntry{top.analogMs.channel[36].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[36].ms.iirB", DumpEntry{top.analogMs.channel[36].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[36].ms.maxLimit", DumpEntry{top.analogMs.channel[36].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[36].ms.minLimit", DumpEntry{top.analogMs.channel[36].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[36].ms.accLength", DumpEntry{top.analogMs.channel[36].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[36].ms.firMask", DumpEntry{top.analogMs.channel[36].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[37].ms.algorithms", DumpEntry{top.analogMs.channel[37].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[37].ms.algorithms.alg", DumpEntry{top.analogMs.channel[37].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[37].ms.offset", DumpEntry{top.analogMs.channel[37].ms.offset});
        res.insert_or_assign("top.analogMs.channel[37].ms.iirA", DumpEntry{top.analogMs.channel[37].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[37].ms.iirB", DumpEntry{top.analogMs.channel[37].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[37].ms.maxLimit", DumpEntry{top.analogMs.channel[37].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[37].ms.minLimit", DumpEntry{top.analogMs.channel[37].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[37].ms.accLength", DumpEntry{top.analogMs.channel[37].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[37].ms.firMask", DumpEntry{top.analogMs.channel[37].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[38].ms.algorithms", DumpEntry{top.analogMs.channel[38].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[38].ms.algorithms.alg", DumpEntry{top.analogMs.channel[38].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[38].ms.offset", DumpEntry{top.analogMs.channel[38].ms.offset});
        res.insert_or_assign("top.analogMs.channel[38].ms.iirA", DumpEntry{top.analogMs.channel[38].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[38].ms.iirB", DumpEntry{top.analogMs.channel[38].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[38].ms.maxLimit", DumpEntry{top.analogMs.channel[38].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[38].ms.minLimit", DumpEntry{top.analogMs.channel[38].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[38].ms.accLength", DumpEntry{top.analogMs.channel[38].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[38].ms.firMask", DumpEntry{top.analogMs.channel[38].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[39].ms.algorithms", DumpEntry{top.analogMs.channel[39].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[39].ms.algorithms.alg", DumpEntry{top.analogMs.channel[39].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[39].ms.offset", DumpEntry{top.analogMs.channel[39].ms.offset});
        res.insert_or_assign("top.analogMs.channel[39].ms.iirA", DumpEntry{top.analogMs.channel[39].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[39].ms.iirB", DumpEntry{top.analogMs.channel[39].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[39].ms.maxLimit", DumpEntry{top.analogMs.channel[39].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[39].ms.minLimit", DumpEntry{top.analogMs.channel[39].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[39].ms.accLength", DumpEntry{top.analogMs.channel[39].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[39].ms.firMask", DumpEntry{top.analogMs.channel[39].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[40].ms.algorithms", DumpEntry{top.analogMs.channel[40].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[40].ms.algorithms.alg", DumpEntry{top.analogMs.channel[40].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[40].ms.offset", DumpEntry{top.analogMs.channel[40].ms.offset});
        res.insert_or_assign("top.analogMs.channel[40].ms.iirA", DumpEntry{top.analogMs.channel[40].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[40].ms.iirB", DumpEntry{top.analogMs.channel[40].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[40].ms.maxLimit", DumpEntry{top.analogMs.channel[40].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[40].ms.minLimit", DumpEntry{top.analogMs.channel[40].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[40].ms.accLength", DumpEntry{top.analogMs.channel[40].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[40].ms.firMask", DumpEntry{top.analogMs.channel[40].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[41].ms.algorithms", DumpEntry{top.analogMs.channel[41].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[41].ms.algorithms.alg", DumpEntry{top.analogMs.channel[41].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[41].ms.offset", DumpEntry{top.analogMs.channel[41].ms.offset});
        res.insert_or_assign("top.analogMs.channel[41].ms.iirA", DumpEntry{top.analogMs.channel[41].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[41].ms.iirB", DumpEntry{top.analogMs.channel[41].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[41].ms.maxLimit", DumpEntry{top.analogMs.channel[41].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[41].ms.minLimit", DumpEntry{top.analogMs.channel[41].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[41].ms.accLength", DumpEntry{top.analogMs.channel[41].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[41].ms.firMask", DumpEntry{top.analogMs.channel[41].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[42].ms.algorithms", DumpEntry{top.analogMs.channel[42].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[42].ms.algorithms.alg", DumpEntry{top.analogMs.channel[42].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[42].ms.offset", DumpEntry{top.analogMs.channel[42].ms.offset});
        res.insert_or_assign("top.analogMs.channel[42].ms.iirA", DumpEntry{top.analogMs.channel[42].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[42].ms.iirB", DumpEntry{top.analogMs.channel[42].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[42].ms.maxLimit", DumpEntry{top.analogMs.channel[42].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[42].ms.minLimit", DumpEntry{top.analogMs.channel[42].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[42].ms.accLength", DumpEntry{top.analogMs.channel[42].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[42].ms.firMask", DumpEntry{top.analogMs.channel[42].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[43].ms.algorithms", DumpEntry{top.analogMs.channel[43].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[43].ms.algorithms.alg", DumpEntry{top.analogMs.channel[43].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[43].ms.offset", DumpEntry{top.analogMs.channel[43].ms.offset});
        res.insert_or_assign("top.analogMs.channel[43].ms.iirA", DumpEntry{top.analogMs.channel[43].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[43].ms.iirB", DumpEntry{top.analogMs.channel[43].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[43].ms.maxLimit", DumpEntry{top.analogMs.channel[43].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[43].ms.minLimit", DumpEntry{top.analogMs.channel[43].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[43].ms.accLength", DumpEntry{top.analogMs.channel[43].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[43].ms.firMask", DumpEntry{top.analogMs.channel[43].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[44].ms.algorithms", DumpEntry{top.analogMs.channel[44].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[44].ms.algorithms.alg", DumpEntry{top.analogMs.channel[44].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[44].ms.offset", DumpEntry{top.analogMs.channel[44].ms.offset});
        res.insert_or_assign("top.analogMs.channel[44].ms.iirA", DumpEntry{top.analogMs.channel[44].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[44].ms.iirB", DumpEntry{top.analogMs.channel[44].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[44].ms.maxLimit", DumpEntry{top.analogMs.channel[44].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[44].ms.minLimit", DumpEntry{top.analogMs.channel[44].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[44].ms.accLength", DumpEntry{top.analogMs.channel[44].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[44].ms.firMask", DumpEntry{top.analogMs.channel[44].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[45].ms.algorithms", DumpEntry{top.analogMs.channel[45].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[45].ms.algorithms.alg", DumpEntry{top.analogMs.channel[45].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[45].ms.offset", DumpEntry{top.analogMs.channel[45].ms.offset});
        res.insert_or_assign("top.analogMs.channel[45].ms.iirA", DumpEntry{top.analogMs.channel[45].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[45].ms.iirB", DumpEntry{top.analogMs.channel[45].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[45].ms.maxLimit", DumpEntry{top.analogMs.channel[45].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[45].ms.minLimit", DumpEntry{top.analogMs.channel[45].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[45].ms.accLength", DumpEntry{top.analogMs.channel[45].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[45].ms.firMask", DumpEntry{top.analogMs.channel[45].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[46].ms.algorithms", DumpEntry{top.analogMs.channel[46].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[46].ms.algorithms.alg", DumpEntry{top.analogMs.channel[46].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[46].ms.offset", DumpEntry{top.analogMs.channel[46].ms.offset});
        res.insert_or_assign("top.analogMs.channel[46].ms.iirA", DumpEntry{top.analogMs.channel[46].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[46].ms.iirB", DumpEntry{top.analogMs.channel[46].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[46].ms.maxLimit", DumpEntry{top.analogMs.channel[46].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[46].ms.minLimit", DumpEntry{top.analogMs.channel[46].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[46].ms.accLength", DumpEntry{top.analogMs.channel[46].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[46].ms.firMask", DumpEntry{top.analogMs.channel[46].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[47].ms.algorithms", DumpEntry{top.analogMs.channel[47].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[47].ms.algorithms.alg", DumpEntry{top.analogMs.channel[47].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[47].ms.offset", DumpEntry{top.analogMs.channel[47].ms.offset});
        res.insert_or_assign("top.analogMs.channel[47].ms.iirA", DumpEntry{top.analogMs.channel[47].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[47].ms.iirB", DumpEntry{top.analogMs.channel[47].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[47].ms.maxLimit", DumpEntry{top.analogMs.channel[47].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[47].ms.minLimit", DumpEntry{top.analogMs.channel[47].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[47].ms.accLength", DumpEntry{top.analogMs.channel[47].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[47].ms.firMask", DumpEntry{top.analogMs.channel[47].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[48].ms.algorithms", DumpEntry{top.analogMs.channel[48].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[48].ms.algorithms.alg", DumpEntry{top.analogMs.channel[48].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[48].ms.offset", DumpEntry{top.analogMs.channel[48].ms.offset});
        res.insert_or_assign("top.analogMs.channel[48].ms.iirA", DumpEntry{top.analogMs.channel[48].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[48].ms.iirB", DumpEntry{top.analogMs.channel[48].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[48].ms.maxLimit", DumpEntry{top.analogMs.channel[48].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[48].ms.minLimit", DumpEntry{top.analogMs.channel[48].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[48].ms.accLength", DumpEntry{top.analogMs.channel[48].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[48].ms.firMask", DumpEntry{top.analogMs.channel[48].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[49].ms.algorithms", DumpEntry{top.analogMs.channel[49].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[49].ms.algorithms.alg", DumpEntry{top.analogMs.channel[49].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[49].ms.offset", DumpEntry{top.analogMs.channel[49].ms.offset});
        res.insert_or_assign("top.analogMs.channel[49].ms.iirA", DumpEntry{top.analogMs.channel[49].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[49].ms.iirB", DumpEntry{top.analogMs.channel[49].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[49].ms.maxLimit", DumpEntry{top.analogMs.channel[49].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[49].ms.minLimit", DumpEntry{top.analogMs.channel[49].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[49].ms.accLength", DumpEntry{top.analogMs.channel[49].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[49].ms.firMask", DumpEntry{top.analogMs.channel[49].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[50].ms.algorithms", DumpEntry{top.analogMs.channel[50].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[50].ms.algorithms.alg", DumpEntry{top.analogMs.channel[50].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[50].ms.offset", DumpEntry{top.analogMs.channel[50].ms.offset});
        res.insert_or_assign("top.analogMs.channel[50].ms.iirA", DumpEntry{top.analogMs.channel[50].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[50].ms.iirB", DumpEntry{top.analogMs.channel[50].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[50].ms.maxLimit", DumpEntry{top.analogMs.channel[50].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[50].ms.minLimit", DumpEntry{top.analogMs.channel[50].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[50].ms.accLength", DumpEntry{top.analogMs.channel[50].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[50].ms.firMask", DumpEntry{top.analogMs.channel[50].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[51].ms.algorithms", DumpEntry{top.analogMs.channel[51].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[51].ms.algorithms.alg", DumpEntry{top.analogMs.channel[51].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[51].ms.offset", DumpEntry{top.analogMs.channel[51].ms.offset});
        res.insert_or_assign("top.analogMs.channel[51].ms.iirA", DumpEntry{top.analogMs.channel[51].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[51].ms.iirB", DumpEntry{top.analogMs.channel[51].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[51].ms.maxLimit", DumpEntry{top.analogMs.channel[51].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[51].ms.minLimit", DumpEntry{top.analogMs.channel[51].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[51].ms.accLength", DumpEntry{top.analogMs.channel[51].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[51].ms.firMask", DumpEntry{top.analogMs.channel[51].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[52].ms.algorithms", DumpEntry{top.analogMs.channel[52].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[52].ms.algorithms.alg", DumpEntry{top.analogMs.channel[52].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[52].ms.offset", DumpEntry{top.analogMs.channel[52].ms.offset});
        res.insert_or_assign("top.analogMs.channel[52].ms.iirA", DumpEntry{top.analogMs.channel[52].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[52].ms.iirB", DumpEntry{top.analogMs.channel[52].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[52].ms.maxLimit", DumpEntry{top.analogMs.channel[52].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[52].ms.minLimit", DumpEntry{top.analogMs.channel[52].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[52].ms.accLength", DumpEntry{top.analogMs.channel[52].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[52].ms.firMask", DumpEntry{top.analogMs.channel[52].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[53].ms.algorithms", DumpEntry{top.analogMs.channel[53].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[53].ms.algorithms.alg", DumpEntry{top.analogMs.channel[53].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[53].ms.offset", DumpEntry{top.analogMs.channel[53].ms.offset});
        res.insert_or_assign("top.analogMs.channel[53].ms.iirA", DumpEntry{top.analogMs.channel[53].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[53].ms.iirB", DumpEntry{top.analogMs.channel[53].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[53].ms.maxLimit", DumpEntry{top.analogMs.channel[53].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[53].ms.minLimit", DumpEntry{top.analogMs.channel[53].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[53].ms.accLength", DumpEntry{top.analogMs.channel[53].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[53].ms.firMask", DumpEntry{top.analogMs.channel[53].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[54].ms.algorithms", DumpEntry{top.analogMs.channel[54].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[54].ms.algorithms.alg", DumpEntry{top.analogMs.channel[54].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[54].ms.offset", DumpEntry{top.analogMs.channel[54].ms.offset});
        res.insert_or_assign("top.analogMs.channel[54].ms.iirA", DumpEntry{top.analogMs.channel[54].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[54].ms.iirB", DumpEntry{top.analogMs.channel[54].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[54].ms.maxLimit", DumpEntry{top.analogMs.channel[54].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[54].ms.minLimit", DumpEntry{top.analogMs.channel[54].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[54].ms.accLength", DumpEntry{top.analogMs.channel[54].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[54].ms.firMask", DumpEntry{top.analogMs.channel[54].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[55].ms.algorithms", DumpEntry{top.analogMs.channel[55].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[55].ms.algorithms.alg", DumpEntry{top.analogMs.channel[55].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[55].ms.offset", DumpEntry{top.analogMs.channel[55].ms.offset});
        res.insert_or_assign("top.analogMs.channel[55].ms.iirA", DumpEntry{top.analogMs.channel[55].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[55].ms.iirB", DumpEntry{top.analogMs.channel[55].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[55].ms.maxLimit", DumpEntry{top.analogMs.channel[55].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[55].ms.minLimit", DumpEntry{top.analogMs.channel[55].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[55].ms.accLength", DumpEntry{top.analogMs.channel[55].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[55].ms.firMask", DumpEntry{top.analogMs.channel[55].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[56].ms.algorithms", DumpEntry{top.analogMs.channel[56].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[56].ms.algorithms.alg", DumpEntry{top.analogMs.channel[56].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[56].ms.offset", DumpEntry{top.analogMs.channel[56].ms.offset});
        res.insert_or_assign("top.analogMs.channel[56].ms.iirA", DumpEntry{top.analogMs.channel[56].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[56].ms.iirB", DumpEntry{top.analogMs.channel[56].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[56].ms.maxLimit", DumpEntry{top.analogMs.channel[56].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[56].ms.minLimit", DumpEntry{top.analogMs.channel[56].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[56].ms.accLength", DumpEntry{top.analogMs.channel[56].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[56].ms.firMask", DumpEntry{top.analogMs.channel[56].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[57].ms.algorithms", DumpEntry{top.analogMs.channel[57].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[57].ms.algorithms.alg", DumpEntry{top.analogMs.channel[57].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[57].ms.offset", DumpEntry{top.analogMs.channel[57].ms.offset});
        res.insert_or_assign("top.analogMs.channel[57].ms.iirA", DumpEntry{top.analogMs.channel[57].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[57].ms.iirB", DumpEntry{top.analogMs.channel[57].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[57].ms.maxLimit", DumpEntry{top.analogMs.channel[57].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[57].ms.minLimit", DumpEntry{top.analogMs.channel[57].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[57].ms.accLength", DumpEntry{top.analogMs.channel[57].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[57].ms.firMask", DumpEntry{top.analogMs.channel[57].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[58].ms.algorithms", DumpEntry{top.analogMs.channel[58].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[58].ms.algorithms.alg", DumpEntry{top.analogMs.channel[58].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[58].ms.offset", DumpEntry{top.analogMs.channel[58].ms.offset});
        res.insert_or_assign("top.analogMs.channel[58].ms.iirA", DumpEntry{top.analogMs.channel[58].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[58].ms.iirB", DumpEntry{top.analogMs.channel[58].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[58].ms.maxLimit", DumpEntry{top.analogMs.channel[58].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[58].ms.minLimit", DumpEntry{top.analogMs.channel[58].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[58].ms.accLength", DumpEntry{top.analogMs.channel[58].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[58].ms.firMask", DumpEntry{top.analogMs.channel[58].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[59].ms.algorithms", DumpEntry{top.analogMs.channel[59].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[59].ms.algorithms.alg", DumpEntry{top.analogMs.channel[59].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[59].ms.offset", DumpEntry{top.analogMs.channel[59].ms.offset});
        res.insert_or_assign("top.analogMs.channel[59].ms.iirA", DumpEntry{top.analogMs.channel[59].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[59].ms.iirB", DumpEntry{top.analogMs.channel[59].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[59].ms.maxLimit", DumpEntry{top.analogMs.channel[59].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[59].ms.minLimit", DumpEntry{top.analogMs.channel[59].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[59].ms.accLength", DumpEntry{top.analogMs.channel[59].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[59].ms.firMask", DumpEntry{top.analogMs.channel[59].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[60].ms.algorithms", DumpEntry{top.analogMs.channel[60].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[60].ms.algorithms.alg", DumpEntry{top.analogMs.channel[60].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[60].ms.offset", DumpEntry{top.analogMs.channel[60].ms.offset});
        res.insert_or_assign("top.analogMs.channel[60].ms.iirA", DumpEntry{top.analogMs.channel[60].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[60].ms.iirB", DumpEntry{top.analogMs.channel[60].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[60].ms.maxLimit", DumpEntry{top.analogMs.channel[60].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[60].ms.minLimit", DumpEntry{top.analogMs.channel[60].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[60].ms.accLength", DumpEntry{top.analogMs.channel[60].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[60].ms.firMask", DumpEntry{top.analogMs.channel[60].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[61].ms.algorithms", DumpEntry{top.analogMs.channel[61].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[61].ms.algorithms.alg", DumpEntry{top.analogMs.channel[61].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[61].ms.offset", DumpEntry{top.analogMs.channel[61].ms.offset});
        res.insert_or_assign("top.analogMs.channel[61].ms.iirA", DumpEntry{top.analogMs.channel[61].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[61].ms.iirB", DumpEntry{top.analogMs.channel[61].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[61].ms.maxLimit", DumpEntry{top.analogMs.channel[61].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[61].ms.minLimit", DumpEntry{top.analogMs.channel[61].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[61].ms.accLength", DumpEntry{top.analogMs.channel[61].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[61].ms.firMask", DumpEntry{top.analogMs.channel[61].ms.firMask});
        res.insert_or_assign("top.dig.digI0.staticParams", DumpEntry{top.dig.digI0.staticParams});
        res.insert_or_assign("top.dig.digI0.staticParams.invertIsEn", DumpEntry{top.dig.digI0.staticParams.invertIsEn});
        res.insert_or_assign("top.dig.digI0.staticParams.enableIsEn", DumpEntry{top.dig.digI0.staticParams.enableIsEn});
        res.insert_or_assign("top.dig.digI0.staticParams.latchIsEn", DumpEntry{top.dig.digI0.staticParams.latchIsEn});
        res.insert_or_assign(
            "top.dig.digI0.staticParams.deglitchIsEn", DumpEntry{top.dig.digI0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("top.dig.digI0.staticParams.reTimeIsEn", DumpEntry{top.dig.digI0.staticParams.reTimeIsEn});
        res.insert_or_assign(
            "top.dig.digI0.staticParams.numChannels", DumpEntry{top.dig.digI0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digI0.data", DumpEntry{top.dig.digI0.data});
        res.insert_or_assign("top.dig.digI0.dataChanged", DumpEntry{top.dig.digI0.dataChanged});
        res.insert_or_assign("top.dig.digI0.invert", DumpEntry{top.dig.digI0.invert});
        res.insert_or_assign("top.dig.digI0.enable", DumpEntry{top.dig.digI0.enable});
        res.insert_or_assign("top.dig.digI0.latch", DumpEntry{top.dig.digI0.latch});
        res.insert_or_assign("top.dig.digI0.rstLatch", DumpEntry{top.dig.digI0.rstLatch});
        res.insert_or_assign("top.dig.digI0.risingInterrupt", DumpEntry{top.dig.digI0.risingInterrupt});
        res.insert_or_assign("top.dig.digI0.fallingInterrupt", DumpEntry{top.dig.digI0.fallingInterrupt});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[0].val", DumpEntry{top.dig.digI0.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[1].val", DumpEntry{top.dig.digI0.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[2].val", DumpEntry{top.dig.digI0.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[3].val", DumpEntry{top.dig.digI0.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[4].val", DumpEntry{top.dig.digI0.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[5].val", DumpEntry{top.dig.digI0.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[6].val", DumpEntry{top.dig.digI0.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[7].val", DumpEntry{top.dig.digI0.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[8].val", DumpEntry{top.dig.digI0.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[9].val", DumpEntry{top.dig.digI0.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[10].val", DumpEntry{top.dig.digI0.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[11].val", DumpEntry{top.dig.digI0.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[12].val", DumpEntry{top.dig.digI0.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[13].val", DumpEntry{top.dig.digI0.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[14].val", DumpEntry{top.dig.digI0.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[15].val", DumpEntry{top.dig.digI0.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[16].val", DumpEntry{top.dig.digI0.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[17].val", DumpEntry{top.dig.digI0.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[18].val", DumpEntry{top.dig.digI0.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[19].val", DumpEntry{top.dig.digI0.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[20].val", DumpEntry{top.dig.digI0.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[21].val", DumpEntry{top.dig.digI0.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[22].val", DumpEntry{top.dig.digI0.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[23].val", DumpEntry{top.dig.digI0.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[24].val", DumpEntry{top.dig.digI0.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[25].val", DumpEntry{top.dig.digI0.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[26].val", DumpEntry{top.dig.digI0.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[27].val", DumpEntry{top.dig.digI0.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[28].val", DumpEntry{top.dig.digI0.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[29].val", DumpEntry{top.dig.digI0.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[30].val", DumpEntry{top.dig.digI0.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.digI0.fastFilterSc[31].val", DumpEntry{top.dig.digI0.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[0].val", DumpEntry{top.dig.digI0.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[1].val", DumpEntry{top.dig.digI0.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[2].val", DumpEntry{top.dig.digI0.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[3].val", DumpEntry{top.dig.digI0.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[4].val", DumpEntry{top.dig.digI0.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[5].val", DumpEntry{top.dig.digI0.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[6].val", DumpEntry{top.dig.digI0.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[7].val", DumpEntry{top.dig.digI0.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[8].val", DumpEntry{top.dig.digI0.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[9].val", DumpEntry{top.dig.digI0.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[10].val", DumpEntry{top.dig.digI0.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[11].val", DumpEntry{top.dig.digI0.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[12].val", DumpEntry{top.dig.digI0.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[13].val", DumpEntry{top.dig.digI0.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[14].val", DumpEntry{top.dig.digI0.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[15].val", DumpEntry{top.dig.digI0.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[16].val", DumpEntry{top.dig.digI0.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[17].val", DumpEntry{top.dig.digI0.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[18].val", DumpEntry{top.dig.digI0.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[19].val", DumpEntry{top.dig.digI0.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[20].val", DumpEntry{top.dig.digI0.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[21].val", DumpEntry{top.dig.digI0.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[22].val", DumpEntry{top.dig.digI0.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[23].val", DumpEntry{top.dig.digI0.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[24].val", DumpEntry{top.dig.digI0.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[25].val", DumpEntry{top.dig.digI0.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[26].val", DumpEntry{top.dig.digI0.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[27].val", DumpEntry{top.dig.digI0.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[28].val", DumpEntry{top.dig.digI0.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[29].val", DumpEntry{top.dig.digI0.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[30].val", DumpEntry{top.dig.digI0.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.digI0.slowFilterSc[31].val", DumpEntry{top.dig.digI0.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.digI0.reTime[0].s", DumpEntry{top.dig.digI0.reTime[0].s});
        res.insert_or_assign("top.dig.digI0.reTime[0].ns", DumpEntry{top.dig.digI0.reTime[0].ns});
        res.insert_or_assign("top.dig.digI0.reTime[1].s", DumpEntry{top.dig.digI0.reTime[1].s});
        res.insert_or_assign("top.dig.digI0.reTime[1].ns", DumpEntry{top.dig.digI0.reTime[1].ns});
        res.insert_or_assign("top.dig.digI0.reTime[2].s", DumpEntry{top.dig.digI0.reTime[2].s});
        res.insert_or_assign("top.dig.digI0.reTime[2].ns", DumpEntry{top.dig.digI0.reTime[2].ns});
        res.insert_or_assign("top.dig.digI0.reTime[3].s", DumpEntry{top.dig.digI0.reTime[3].s});
        res.insert_or_assign("top.dig.digI0.reTime[3].ns", DumpEntry{top.dig.digI0.reTime[3].ns});
        res.insert_or_assign("top.dig.digI0.reTime[4].s", DumpEntry{top.dig.digI0.reTime[4].s});
        res.insert_or_assign("top.dig.digI0.reTime[4].ns", DumpEntry{top.dig.digI0.reTime[4].ns});
        res.insert_or_assign("top.dig.digI0.reTime[5].s", DumpEntry{top.dig.digI0.reTime[5].s});
        res.insert_or_assign("top.dig.digI0.reTime[5].ns", DumpEntry{top.dig.digI0.reTime[5].ns});
        res.insert_or_assign("top.dig.digI0.reTime[6].s", DumpEntry{top.dig.digI0.reTime[6].s});
        res.insert_or_assign("top.dig.digI0.reTime[6].ns", DumpEntry{top.dig.digI0.reTime[6].ns});
        res.insert_or_assign("top.dig.digI0.reTime[7].s", DumpEntry{top.dig.digI0.reTime[7].s});
        res.insert_or_assign("top.dig.digI0.reTime[7].ns", DumpEntry{top.dig.digI0.reTime[7].ns});
        res.insert_or_assign("top.dig.digI0.reTime[8].s", DumpEntry{top.dig.digI0.reTime[8].s});
        res.insert_or_assign("top.dig.digI0.reTime[8].ns", DumpEntry{top.dig.digI0.reTime[8].ns});
        res.insert_or_assign("top.dig.digI0.reTime[9].s", DumpEntry{top.dig.digI0.reTime[9].s});
        res.insert_or_assign("top.dig.digI0.reTime[9].ns", DumpEntry{top.dig.digI0.reTime[9].ns});
        res.insert_or_assign("top.dig.digI0.reTime[10].s", DumpEntry{top.dig.digI0.reTime[10].s});
        res.insert_or_assign("top.dig.digI0.reTime[10].ns", DumpEntry{top.dig.digI0.reTime[10].ns});
        res.insert_or_assign("top.dig.digI0.reTime[11].s", DumpEntry{top.dig.digI0.reTime[11].s});
        res.insert_or_assign("top.dig.digI0.reTime[11].ns", DumpEntry{top.dig.digI0.reTime[11].ns});
        res.insert_or_assign("top.dig.digI0.reTime[12].s", DumpEntry{top.dig.digI0.reTime[12].s});
        res.insert_or_assign("top.dig.digI0.reTime[12].ns", DumpEntry{top.dig.digI0.reTime[12].ns});
        res.insert_or_assign("top.dig.digI0.reTime[13].s", DumpEntry{top.dig.digI0.reTime[13].s});
        res.insert_or_assign("top.dig.digI0.reTime[13].ns", DumpEntry{top.dig.digI0.reTime[13].ns});
        res.insert_or_assign("top.dig.digI0.reTime[14].s", DumpEntry{top.dig.digI0.reTime[14].s});
        res.insert_or_assign("top.dig.digI0.reTime[14].ns", DumpEntry{top.dig.digI0.reTime[14].ns});
        res.insert_or_assign("top.dig.digI0.reTime[15].s", DumpEntry{top.dig.digI0.reTime[15].s});
        res.insert_or_assign("top.dig.digI0.reTime[15].ns", DumpEntry{top.dig.digI0.reTime[15].ns});
        res.insert_or_assign("top.dig.digI0.reTime[16].s", DumpEntry{top.dig.digI0.reTime[16].s});
        res.insert_or_assign("top.dig.digI0.reTime[16].ns", DumpEntry{top.dig.digI0.reTime[16].ns});
        res.insert_or_assign("top.dig.digI0.reTime[17].s", DumpEntry{top.dig.digI0.reTime[17].s});
        res.insert_or_assign("top.dig.digI0.reTime[17].ns", DumpEntry{top.dig.digI0.reTime[17].ns});
        res.insert_or_assign("top.dig.digI0.reTime[18].s", DumpEntry{top.dig.digI0.reTime[18].s});
        res.insert_or_assign("top.dig.digI0.reTime[18].ns", DumpEntry{top.dig.digI0.reTime[18].ns});
        res.insert_or_assign("top.dig.digI0.reTime[19].s", DumpEntry{top.dig.digI0.reTime[19].s});
        res.insert_or_assign("top.dig.digI0.reTime[19].ns", DumpEntry{top.dig.digI0.reTime[19].ns});
        res.insert_or_assign("top.dig.digI0.reTime[20].s", DumpEntry{top.dig.digI0.reTime[20].s});
        res.insert_or_assign("top.dig.digI0.reTime[20].ns", DumpEntry{top.dig.digI0.reTime[20].ns});
        res.insert_or_assign("top.dig.digI0.reTime[21].s", DumpEntry{top.dig.digI0.reTime[21].s});
        res.insert_or_assign("top.dig.digI0.reTime[21].ns", DumpEntry{top.dig.digI0.reTime[21].ns});
        res.insert_or_assign("top.dig.digI0.reTime[22].s", DumpEntry{top.dig.digI0.reTime[22].s});
        res.insert_or_assign("top.dig.digI0.reTime[22].ns", DumpEntry{top.dig.digI0.reTime[22].ns});
        res.insert_or_assign("top.dig.digI0.reTime[23].s", DumpEntry{top.dig.digI0.reTime[23].s});
        res.insert_or_assign("top.dig.digI0.reTime[23].ns", DumpEntry{top.dig.digI0.reTime[23].ns});
        res.insert_or_assign("top.dig.digI0.reTime[24].s", DumpEntry{top.dig.digI0.reTime[24].s});
        res.insert_or_assign("top.dig.digI0.reTime[24].ns", DumpEntry{top.dig.digI0.reTime[24].ns});
        res.insert_or_assign("top.dig.digI0.reTime[25].s", DumpEntry{top.dig.digI0.reTime[25].s});
        res.insert_or_assign("top.dig.digI0.reTime[25].ns", DumpEntry{top.dig.digI0.reTime[25].ns});
        res.insert_or_assign("top.dig.digI0.reTime[26].s", DumpEntry{top.dig.digI0.reTime[26].s});
        res.insert_or_assign("top.dig.digI0.reTime[26].ns", DumpEntry{top.dig.digI0.reTime[26].ns});
        res.insert_or_assign("top.dig.digI0.reTime[27].s", DumpEntry{top.dig.digI0.reTime[27].s});
        res.insert_or_assign("top.dig.digI0.reTime[27].ns", DumpEntry{top.dig.digI0.reTime[27].ns});
        res.insert_or_assign("top.dig.digI0.reTime[28].s", DumpEntry{top.dig.digI0.reTime[28].s});
        res.insert_or_assign("top.dig.digI0.reTime[28].ns", DumpEntry{top.dig.digI0.reTime[28].ns});
        res.insert_or_assign("top.dig.digI0.reTime[29].s", DumpEntry{top.dig.digI0.reTime[29].s});
        res.insert_or_assign("top.dig.digI0.reTime[29].ns", DumpEntry{top.dig.digI0.reTime[29].ns});
        res.insert_or_assign("top.dig.digI0.reTime[30].s", DumpEntry{top.dig.digI0.reTime[30].s});
        res.insert_or_assign("top.dig.digI0.reTime[30].ns", DumpEntry{top.dig.digI0.reTime[30].ns});
        res.insert_or_assign("top.dig.digI0.reTime[31].s", DumpEntry{top.dig.digI0.reTime[31].s});
        res.insert_or_assign("top.dig.digI0.reTime[31].ns", DumpEntry{top.dig.digI0.reTime[31].ns});
        res.insert_or_assign("top.dig.digI1.staticParams", DumpEntry{top.dig.digI1.staticParams});
        res.insert_or_assign("top.dig.digI1.staticParams.invertIsEn", DumpEntry{top.dig.digI1.staticParams.invertIsEn});
        res.insert_or_assign("top.dig.digI1.staticParams.enableIsEn", DumpEntry{top.dig.digI1.staticParams.enableIsEn});
        res.insert_or_assign("top.dig.digI1.staticParams.latchIsEn", DumpEntry{top.dig.digI1.staticParams.latchIsEn});
        res.insert_or_assign(
            "top.dig.digI1.staticParams.deglitchIsEn", DumpEntry{top.dig.digI1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("top.dig.digI1.staticParams.reTimeIsEn", DumpEntry{top.dig.digI1.staticParams.reTimeIsEn});
        res.insert_or_assign(
            "top.dig.digI1.staticParams.numChannels", DumpEntry{top.dig.digI1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digI1.data", DumpEntry{top.dig.digI1.data});
        res.insert_or_assign("top.dig.digI1.dataChanged", DumpEntry{top.dig.digI1.dataChanged});
        res.insert_or_assign("top.dig.digI1.invert", DumpEntry{top.dig.digI1.invert});
        res.insert_or_assign("top.dig.digI1.enable", DumpEntry{top.dig.digI1.enable});
        res.insert_or_assign("top.dig.digI1.latch", DumpEntry{top.dig.digI1.latch});
        res.insert_or_assign("top.dig.digI1.rstLatch", DumpEntry{top.dig.digI1.rstLatch});
        res.insert_or_assign("top.dig.digI1.risingInterrupt", DumpEntry{top.dig.digI1.risingInterrupt});
        res.insert_or_assign("top.dig.digI1.fallingInterrupt", DumpEntry{top.dig.digI1.fallingInterrupt});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[0].val", DumpEntry{top.dig.digI1.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[1].val", DumpEntry{top.dig.digI1.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[2].val", DumpEntry{top.dig.digI1.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[3].val", DumpEntry{top.dig.digI1.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[4].val", DumpEntry{top.dig.digI1.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[5].val", DumpEntry{top.dig.digI1.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[6].val", DumpEntry{top.dig.digI1.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[7].val", DumpEntry{top.dig.digI1.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[8].val", DumpEntry{top.dig.digI1.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[9].val", DumpEntry{top.dig.digI1.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[10].val", DumpEntry{top.dig.digI1.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[11].val", DumpEntry{top.dig.digI1.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[12].val", DumpEntry{top.dig.digI1.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[13].val", DumpEntry{top.dig.digI1.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[14].val", DumpEntry{top.dig.digI1.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[15].val", DumpEntry{top.dig.digI1.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[16].val", DumpEntry{top.dig.digI1.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[17].val", DumpEntry{top.dig.digI1.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[18].val", DumpEntry{top.dig.digI1.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[19].val", DumpEntry{top.dig.digI1.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[20].val", DumpEntry{top.dig.digI1.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[21].val", DumpEntry{top.dig.digI1.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[22].val", DumpEntry{top.dig.digI1.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[23].val", DumpEntry{top.dig.digI1.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[24].val", DumpEntry{top.dig.digI1.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[25].val", DumpEntry{top.dig.digI1.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[26].val", DumpEntry{top.dig.digI1.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[27].val", DumpEntry{top.dig.digI1.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[28].val", DumpEntry{top.dig.digI1.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[29].val", DumpEntry{top.dig.digI1.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[30].val", DumpEntry{top.dig.digI1.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.digI1.fastFilterSc[31].val", DumpEntry{top.dig.digI1.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[0].val", DumpEntry{top.dig.digI1.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[1].val", DumpEntry{top.dig.digI1.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[2].val", DumpEntry{top.dig.digI1.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[3].val", DumpEntry{top.dig.digI1.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[4].val", DumpEntry{top.dig.digI1.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[5].val", DumpEntry{top.dig.digI1.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[6].val", DumpEntry{top.dig.digI1.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[7].val", DumpEntry{top.dig.digI1.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[8].val", DumpEntry{top.dig.digI1.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[9].val", DumpEntry{top.dig.digI1.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[10].val", DumpEntry{top.dig.digI1.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[11].val", DumpEntry{top.dig.digI1.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[12].val", DumpEntry{top.dig.digI1.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[13].val", DumpEntry{top.dig.digI1.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[14].val", DumpEntry{top.dig.digI1.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[15].val", DumpEntry{top.dig.digI1.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[16].val", DumpEntry{top.dig.digI1.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[17].val", DumpEntry{top.dig.digI1.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[18].val", DumpEntry{top.dig.digI1.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[19].val", DumpEntry{top.dig.digI1.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[20].val", DumpEntry{top.dig.digI1.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[21].val", DumpEntry{top.dig.digI1.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[22].val", DumpEntry{top.dig.digI1.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[23].val", DumpEntry{top.dig.digI1.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[24].val", DumpEntry{top.dig.digI1.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[25].val", DumpEntry{top.dig.digI1.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[26].val", DumpEntry{top.dig.digI1.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[27].val", DumpEntry{top.dig.digI1.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[28].val", DumpEntry{top.dig.digI1.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[29].val", DumpEntry{top.dig.digI1.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[30].val", DumpEntry{top.dig.digI1.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.digI1.slowFilterSc[31].val", DumpEntry{top.dig.digI1.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.digI1.reTime[0].s", DumpEntry{top.dig.digI1.reTime[0].s});
        res.insert_or_assign("top.dig.digI1.reTime[0].ns", DumpEntry{top.dig.digI1.reTime[0].ns});
        res.insert_or_assign("top.dig.digI1.reTime[1].s", DumpEntry{top.dig.digI1.reTime[1].s});
        res.insert_or_assign("top.dig.digI1.reTime[1].ns", DumpEntry{top.dig.digI1.reTime[1].ns});
        res.insert_or_assign("top.dig.digI1.reTime[2].s", DumpEntry{top.dig.digI1.reTime[2].s});
        res.insert_or_assign("top.dig.digI1.reTime[2].ns", DumpEntry{top.dig.digI1.reTime[2].ns});
        res.insert_or_assign("top.dig.digI1.reTime[3].s", DumpEntry{top.dig.digI1.reTime[3].s});
        res.insert_or_assign("top.dig.digI1.reTime[3].ns", DumpEntry{top.dig.digI1.reTime[3].ns});
        res.insert_or_assign("top.dig.digI1.reTime[4].s", DumpEntry{top.dig.digI1.reTime[4].s});
        res.insert_or_assign("top.dig.digI1.reTime[4].ns", DumpEntry{top.dig.digI1.reTime[4].ns});
        res.insert_or_assign("top.dig.digI1.reTime[5].s", DumpEntry{top.dig.digI1.reTime[5].s});
        res.insert_or_assign("top.dig.digI1.reTime[5].ns", DumpEntry{top.dig.digI1.reTime[5].ns});
        res.insert_or_assign("top.dig.digI1.reTime[6].s", DumpEntry{top.dig.digI1.reTime[6].s});
        res.insert_or_assign("top.dig.digI1.reTime[6].ns", DumpEntry{top.dig.digI1.reTime[6].ns});
        res.insert_or_assign("top.dig.digI1.reTime[7].s", DumpEntry{top.dig.digI1.reTime[7].s});
        res.insert_or_assign("top.dig.digI1.reTime[7].ns", DumpEntry{top.dig.digI1.reTime[7].ns});
        res.insert_or_assign("top.dig.digI1.reTime[8].s", DumpEntry{top.dig.digI1.reTime[8].s});
        res.insert_or_assign("top.dig.digI1.reTime[8].ns", DumpEntry{top.dig.digI1.reTime[8].ns});
        res.insert_or_assign("top.dig.digI1.reTime[9].s", DumpEntry{top.dig.digI1.reTime[9].s});
        res.insert_or_assign("top.dig.digI1.reTime[9].ns", DumpEntry{top.dig.digI1.reTime[9].ns});
        res.insert_or_assign("top.dig.digI1.reTime[10].s", DumpEntry{top.dig.digI1.reTime[10].s});
        res.insert_or_assign("top.dig.digI1.reTime[10].ns", DumpEntry{top.dig.digI1.reTime[10].ns});
        res.insert_or_assign("top.dig.digI1.reTime[11].s", DumpEntry{top.dig.digI1.reTime[11].s});
        res.insert_or_assign("top.dig.digI1.reTime[11].ns", DumpEntry{top.dig.digI1.reTime[11].ns});
        res.insert_or_assign("top.dig.digI1.reTime[12].s", DumpEntry{top.dig.digI1.reTime[12].s});
        res.insert_or_assign("top.dig.digI1.reTime[12].ns", DumpEntry{top.dig.digI1.reTime[12].ns});
        res.insert_or_assign("top.dig.digI1.reTime[13].s", DumpEntry{top.dig.digI1.reTime[13].s});
        res.insert_or_assign("top.dig.digI1.reTime[13].ns", DumpEntry{top.dig.digI1.reTime[13].ns});
        res.insert_or_assign("top.dig.digI1.reTime[14].s", DumpEntry{top.dig.digI1.reTime[14].s});
        res.insert_or_assign("top.dig.digI1.reTime[14].ns", DumpEntry{top.dig.digI1.reTime[14].ns});
        res.insert_or_assign("top.dig.digI1.reTime[15].s", DumpEntry{top.dig.digI1.reTime[15].s});
        res.insert_or_assign("top.dig.digI1.reTime[15].ns", DumpEntry{top.dig.digI1.reTime[15].ns});
        res.insert_or_assign("top.dig.digI1.reTime[16].s", DumpEntry{top.dig.digI1.reTime[16].s});
        res.insert_or_assign("top.dig.digI1.reTime[16].ns", DumpEntry{top.dig.digI1.reTime[16].ns});
        res.insert_or_assign("top.dig.digI1.reTime[17].s", DumpEntry{top.dig.digI1.reTime[17].s});
        res.insert_or_assign("top.dig.digI1.reTime[17].ns", DumpEntry{top.dig.digI1.reTime[17].ns});
        res.insert_or_assign("top.dig.digI1.reTime[18].s", DumpEntry{top.dig.digI1.reTime[18].s});
        res.insert_or_assign("top.dig.digI1.reTime[18].ns", DumpEntry{top.dig.digI1.reTime[18].ns});
        res.insert_or_assign("top.dig.digI1.reTime[19].s", DumpEntry{top.dig.digI1.reTime[19].s});
        res.insert_or_assign("top.dig.digI1.reTime[19].ns", DumpEntry{top.dig.digI1.reTime[19].ns});
        res.insert_or_assign("top.dig.digI1.reTime[20].s", DumpEntry{top.dig.digI1.reTime[20].s});
        res.insert_or_assign("top.dig.digI1.reTime[20].ns", DumpEntry{top.dig.digI1.reTime[20].ns});
        res.insert_or_assign("top.dig.digI1.reTime[21].s", DumpEntry{top.dig.digI1.reTime[21].s});
        res.insert_or_assign("top.dig.digI1.reTime[21].ns", DumpEntry{top.dig.digI1.reTime[21].ns});
        res.insert_or_assign("top.dig.digI1.reTime[22].s", DumpEntry{top.dig.digI1.reTime[22].s});
        res.insert_or_assign("top.dig.digI1.reTime[22].ns", DumpEntry{top.dig.digI1.reTime[22].ns});
        res.insert_or_assign("top.dig.digI1.reTime[23].s", DumpEntry{top.dig.digI1.reTime[23].s});
        res.insert_or_assign("top.dig.digI1.reTime[23].ns", DumpEntry{top.dig.digI1.reTime[23].ns});
        res.insert_or_assign("top.dig.digI1.reTime[24].s", DumpEntry{top.dig.digI1.reTime[24].s});
        res.insert_or_assign("top.dig.digI1.reTime[24].ns", DumpEntry{top.dig.digI1.reTime[24].ns});
        res.insert_or_assign("top.dig.digI1.reTime[25].s", DumpEntry{top.dig.digI1.reTime[25].s});
        res.insert_or_assign("top.dig.digI1.reTime[25].ns", DumpEntry{top.dig.digI1.reTime[25].ns});
        res.insert_or_assign("top.dig.digI1.reTime[26].s", DumpEntry{top.dig.digI1.reTime[26].s});
        res.insert_or_assign("top.dig.digI1.reTime[26].ns", DumpEntry{top.dig.digI1.reTime[26].ns});
        res.insert_or_assign("top.dig.digI1.reTime[27].s", DumpEntry{top.dig.digI1.reTime[27].s});
        res.insert_or_assign("top.dig.digI1.reTime[27].ns", DumpEntry{top.dig.digI1.reTime[27].ns});
        res.insert_or_assign("top.dig.digI1.reTime[28].s", DumpEntry{top.dig.digI1.reTime[28].s});
        res.insert_or_assign("top.dig.digI1.reTime[28].ns", DumpEntry{top.dig.digI1.reTime[28].ns});
        res.insert_or_assign("top.dig.digI1.reTime[29].s", DumpEntry{top.dig.digI1.reTime[29].s});
        res.insert_or_assign("top.dig.digI1.reTime[29].ns", DumpEntry{top.dig.digI1.reTime[29].ns});
        res.insert_or_assign("top.dig.digI1.reTime[30].s", DumpEntry{top.dig.digI1.reTime[30].s});
        res.insert_or_assign("top.dig.digI1.reTime[30].ns", DumpEntry{top.dig.digI1.reTime[30].ns});
        res.insert_or_assign("top.dig.digI1.reTime[31].s", DumpEntry{top.dig.digI1.reTime[31].s});
        res.insert_or_assign("top.dig.digI1.reTime[31].ns", DumpEntry{top.dig.digI1.reTime[31].ns});
        res.insert_or_assign("top.dig.digIndI.staticParams", DumpEntry{top.dig.digIndI.staticParams});
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.invertIsEn", DumpEntry{top.dig.digIndI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.enableIsEn", DumpEntry{top.dig.digIndI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.latchIsEn", DumpEntry{top.dig.digIndI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.deglitchIsEn", DumpEntry{top.dig.digIndI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.reTimeIsEn", DumpEntry{top.dig.digIndI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.numChannels", DumpEntry{top.dig.digIndI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digIndI.data", DumpEntry{top.dig.digIndI.data});
        res.insert_or_assign("top.dig.digIndI.dataChanged", DumpEntry{top.dig.digIndI.dataChanged});
        res.insert_or_assign("top.dig.digIndI.invert", DumpEntry{top.dig.digIndI.invert});
        res.insert_or_assign("top.dig.digIndI.enable", DumpEntry{top.dig.digIndI.enable});
        res.insert_or_assign("top.dig.digIndI.latch", DumpEntry{top.dig.digIndI.latch});
        res.insert_or_assign("top.dig.digIndI.rstLatch", DumpEntry{top.dig.digIndI.rstLatch});
        res.insert_or_assign("top.dig.digIndI.risingInterrupt", DumpEntry{top.dig.digIndI.risingInterrupt});
        res.insert_or_assign("top.dig.digIndI.fallingInterrupt", DumpEntry{top.dig.digIndI.fallingInterrupt});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[0].val", DumpEntry{top.dig.digIndI.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[1].val", DumpEntry{top.dig.digIndI.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[2].val", DumpEntry{top.dig.digIndI.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[3].val", DumpEntry{top.dig.digIndI.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[4].val", DumpEntry{top.dig.digIndI.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[5].val", DumpEntry{top.dig.digIndI.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[6].val", DumpEntry{top.dig.digIndI.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[7].val", DumpEntry{top.dig.digIndI.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[8].val", DumpEntry{top.dig.digIndI.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[9].val", DumpEntry{top.dig.digIndI.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[10].val", DumpEntry{top.dig.digIndI.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[11].val", DumpEntry{top.dig.digIndI.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[12].val", DumpEntry{top.dig.digIndI.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[13].val", DumpEntry{top.dig.digIndI.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[14].val", DumpEntry{top.dig.digIndI.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[15].val", DumpEntry{top.dig.digIndI.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[16].val", DumpEntry{top.dig.digIndI.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[17].val", DumpEntry{top.dig.digIndI.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[18].val", DumpEntry{top.dig.digIndI.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[19].val", DumpEntry{top.dig.digIndI.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[20].val", DumpEntry{top.dig.digIndI.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[21].val", DumpEntry{top.dig.digIndI.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[22].val", DumpEntry{top.dig.digIndI.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[23].val", DumpEntry{top.dig.digIndI.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[24].val", DumpEntry{top.dig.digIndI.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[25].val", DumpEntry{top.dig.digIndI.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[26].val", DumpEntry{top.dig.digIndI.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[27].val", DumpEntry{top.dig.digIndI.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[28].val", DumpEntry{top.dig.digIndI.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[29].val", DumpEntry{top.dig.digIndI.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[30].val", DumpEntry{top.dig.digIndI.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.digIndI.fastFilterSc[31].val", DumpEntry{top.dig.digIndI.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[0].val", DumpEntry{top.dig.digIndI.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[1].val", DumpEntry{top.dig.digIndI.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[2].val", DumpEntry{top.dig.digIndI.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[3].val", DumpEntry{top.dig.digIndI.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[4].val", DumpEntry{top.dig.digIndI.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[5].val", DumpEntry{top.dig.digIndI.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[6].val", DumpEntry{top.dig.digIndI.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[7].val", DumpEntry{top.dig.digIndI.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[8].val", DumpEntry{top.dig.digIndI.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[9].val", DumpEntry{top.dig.digIndI.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[10].val", DumpEntry{top.dig.digIndI.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[11].val", DumpEntry{top.dig.digIndI.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[12].val", DumpEntry{top.dig.digIndI.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[13].val", DumpEntry{top.dig.digIndI.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[14].val", DumpEntry{top.dig.digIndI.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[15].val", DumpEntry{top.dig.digIndI.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[16].val", DumpEntry{top.dig.digIndI.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[17].val", DumpEntry{top.dig.digIndI.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[18].val", DumpEntry{top.dig.digIndI.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[19].val", DumpEntry{top.dig.digIndI.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[20].val", DumpEntry{top.dig.digIndI.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[21].val", DumpEntry{top.dig.digIndI.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[22].val", DumpEntry{top.dig.digIndI.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[23].val", DumpEntry{top.dig.digIndI.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[24].val", DumpEntry{top.dig.digIndI.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[25].val", DumpEntry{top.dig.digIndI.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[26].val", DumpEntry{top.dig.digIndI.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[27].val", DumpEntry{top.dig.digIndI.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[28].val", DumpEntry{top.dig.digIndI.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[29].val", DumpEntry{top.dig.digIndI.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[30].val", DumpEntry{top.dig.digIndI.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.digIndI.slowFilterSc[31].val", DumpEntry{top.dig.digIndI.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.digIndI.reTime[0].s", DumpEntry{top.dig.digIndI.reTime[0].s});
        res.insert_or_assign("top.dig.digIndI.reTime[0].ns", DumpEntry{top.dig.digIndI.reTime[0].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[1].s", DumpEntry{top.dig.digIndI.reTime[1].s});
        res.insert_or_assign("top.dig.digIndI.reTime[1].ns", DumpEntry{top.dig.digIndI.reTime[1].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[2].s", DumpEntry{top.dig.digIndI.reTime[2].s});
        res.insert_or_assign("top.dig.digIndI.reTime[2].ns", DumpEntry{top.dig.digIndI.reTime[2].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[3].s", DumpEntry{top.dig.digIndI.reTime[3].s});
        res.insert_or_assign("top.dig.digIndI.reTime[3].ns", DumpEntry{top.dig.digIndI.reTime[3].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[4].s", DumpEntry{top.dig.digIndI.reTime[4].s});
        res.insert_or_assign("top.dig.digIndI.reTime[4].ns", DumpEntry{top.dig.digIndI.reTime[4].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[5].s", DumpEntry{top.dig.digIndI.reTime[5].s});
        res.insert_or_assign("top.dig.digIndI.reTime[5].ns", DumpEntry{top.dig.digIndI.reTime[5].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[6].s", DumpEntry{top.dig.digIndI.reTime[6].s});
        res.insert_or_assign("top.dig.digIndI.reTime[6].ns", DumpEntry{top.dig.digIndI.reTime[6].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[7].s", DumpEntry{top.dig.digIndI.reTime[7].s});
        res.insert_or_assign("top.dig.digIndI.reTime[7].ns", DumpEntry{top.dig.digIndI.reTime[7].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[8].s", DumpEntry{top.dig.digIndI.reTime[8].s});
        res.insert_or_assign("top.dig.digIndI.reTime[8].ns", DumpEntry{top.dig.digIndI.reTime[8].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[9].s", DumpEntry{top.dig.digIndI.reTime[9].s});
        res.insert_or_assign("top.dig.digIndI.reTime[9].ns", DumpEntry{top.dig.digIndI.reTime[9].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[10].s", DumpEntry{top.dig.digIndI.reTime[10].s});
        res.insert_or_assign("top.dig.digIndI.reTime[10].ns", DumpEntry{top.dig.digIndI.reTime[10].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[11].s", DumpEntry{top.dig.digIndI.reTime[11].s});
        res.insert_or_assign("top.dig.digIndI.reTime[11].ns", DumpEntry{top.dig.digIndI.reTime[11].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[12].s", DumpEntry{top.dig.digIndI.reTime[12].s});
        res.insert_or_assign("top.dig.digIndI.reTime[12].ns", DumpEntry{top.dig.digIndI.reTime[12].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[13].s", DumpEntry{top.dig.digIndI.reTime[13].s});
        res.insert_or_assign("top.dig.digIndI.reTime[13].ns", DumpEntry{top.dig.digIndI.reTime[13].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[14].s", DumpEntry{top.dig.digIndI.reTime[14].s});
        res.insert_or_assign("top.dig.digIndI.reTime[14].ns", DumpEntry{top.dig.digIndI.reTime[14].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[15].s", DumpEntry{top.dig.digIndI.reTime[15].s});
        res.insert_or_assign("top.dig.digIndI.reTime[15].ns", DumpEntry{top.dig.digIndI.reTime[15].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[16].s", DumpEntry{top.dig.digIndI.reTime[16].s});
        res.insert_or_assign("top.dig.digIndI.reTime[16].ns", DumpEntry{top.dig.digIndI.reTime[16].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[17].s", DumpEntry{top.dig.digIndI.reTime[17].s});
        res.insert_or_assign("top.dig.digIndI.reTime[17].ns", DumpEntry{top.dig.digIndI.reTime[17].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[18].s", DumpEntry{top.dig.digIndI.reTime[18].s});
        res.insert_or_assign("top.dig.digIndI.reTime[18].ns", DumpEntry{top.dig.digIndI.reTime[18].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[19].s", DumpEntry{top.dig.digIndI.reTime[19].s});
        res.insert_or_assign("top.dig.digIndI.reTime[19].ns", DumpEntry{top.dig.digIndI.reTime[19].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[20].s", DumpEntry{top.dig.digIndI.reTime[20].s});
        res.insert_or_assign("top.dig.digIndI.reTime[20].ns", DumpEntry{top.dig.digIndI.reTime[20].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[21].s", DumpEntry{top.dig.digIndI.reTime[21].s});
        res.insert_or_assign("top.dig.digIndI.reTime[21].ns", DumpEntry{top.dig.digIndI.reTime[21].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[22].s", DumpEntry{top.dig.digIndI.reTime[22].s});
        res.insert_or_assign("top.dig.digIndI.reTime[22].ns", DumpEntry{top.dig.digIndI.reTime[22].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[23].s", DumpEntry{top.dig.digIndI.reTime[23].s});
        res.insert_or_assign("top.dig.digIndI.reTime[23].ns", DumpEntry{top.dig.digIndI.reTime[23].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[24].s", DumpEntry{top.dig.digIndI.reTime[24].s});
        res.insert_or_assign("top.dig.digIndI.reTime[24].ns", DumpEntry{top.dig.digIndI.reTime[24].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[25].s", DumpEntry{top.dig.digIndI.reTime[25].s});
        res.insert_or_assign("top.dig.digIndI.reTime[25].ns", DumpEntry{top.dig.digIndI.reTime[25].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[26].s", DumpEntry{top.dig.digIndI.reTime[26].s});
        res.insert_or_assign("top.dig.digIndI.reTime[26].ns", DumpEntry{top.dig.digIndI.reTime[26].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[27].s", DumpEntry{top.dig.digIndI.reTime[27].s});
        res.insert_or_assign("top.dig.digIndI.reTime[27].ns", DumpEntry{top.dig.digIndI.reTime[27].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[28].s", DumpEntry{top.dig.digIndI.reTime[28].s});
        res.insert_or_assign("top.dig.digIndI.reTime[28].ns", DumpEntry{top.dig.digIndI.reTime[28].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[29].s", DumpEntry{top.dig.digIndI.reTime[29].s});
        res.insert_or_assign("top.dig.digIndI.reTime[29].ns", DumpEntry{top.dig.digIndI.reTime[29].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[30].s", DumpEntry{top.dig.digIndI.reTime[30].s});
        res.insert_or_assign("top.dig.digIndI.reTime[30].ns", DumpEntry{top.dig.digIndI.reTime[30].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[31].s", DumpEntry{top.dig.digIndI.reTime[31].s});
        res.insert_or_assign("top.dig.digIndI.reTime[31].ns", DumpEntry{top.dig.digIndI.reTime[31].ns});
        res.insert_or_assign("top.dig.contactI.staticParams", DumpEntry{top.dig.contactI.staticParams});
        res.insert_or_assign(
            "top.dig.contactI.staticParams.invertIsEn", DumpEntry{top.dig.contactI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.enableIsEn", DumpEntry{top.dig.contactI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.latchIsEn", DumpEntry{top.dig.contactI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.deglitchIsEn", DumpEntry{top.dig.contactI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.reTimeIsEn", DumpEntry{top.dig.contactI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.numChannels", DumpEntry{top.dig.contactI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.contactI.data", DumpEntry{top.dig.contactI.data});
        res.insert_or_assign("top.dig.contactI.dataChanged", DumpEntry{top.dig.contactI.dataChanged});
        res.insert_or_assign("top.dig.contactI.invert", DumpEntry{top.dig.contactI.invert});
        res.insert_or_assign("top.dig.contactI.enable", DumpEntry{top.dig.contactI.enable});
        res.insert_or_assign("top.dig.contactI.latch", DumpEntry{top.dig.contactI.latch});
        res.insert_or_assign("top.dig.contactI.rstLatch", DumpEntry{top.dig.contactI.rstLatch});
        res.insert_or_assign("top.dig.contactI.risingInterrupt", DumpEntry{top.dig.contactI.risingInterrupt});
        res.insert_or_assign("top.dig.contactI.fallingInterrupt", DumpEntry{top.dig.contactI.fallingInterrupt});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[0].val", DumpEntry{top.dig.contactI.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[1].val", DumpEntry{top.dig.contactI.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[2].val", DumpEntry{top.dig.contactI.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[3].val", DumpEntry{top.dig.contactI.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[4].val", DumpEntry{top.dig.contactI.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[5].val", DumpEntry{top.dig.contactI.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[6].val", DumpEntry{top.dig.contactI.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[7].val", DumpEntry{top.dig.contactI.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[8].val", DumpEntry{top.dig.contactI.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[9].val", DumpEntry{top.dig.contactI.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[10].val", DumpEntry{top.dig.contactI.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[11].val", DumpEntry{top.dig.contactI.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[12].val", DumpEntry{top.dig.contactI.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[13].val", DumpEntry{top.dig.contactI.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[14].val", DumpEntry{top.dig.contactI.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[15].val", DumpEntry{top.dig.contactI.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[16].val", DumpEntry{top.dig.contactI.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[17].val", DumpEntry{top.dig.contactI.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[18].val", DumpEntry{top.dig.contactI.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[19].val", DumpEntry{top.dig.contactI.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[20].val", DumpEntry{top.dig.contactI.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[21].val", DumpEntry{top.dig.contactI.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[22].val", DumpEntry{top.dig.contactI.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[23].val", DumpEntry{top.dig.contactI.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[24].val", DumpEntry{top.dig.contactI.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[25].val", DumpEntry{top.dig.contactI.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[26].val", DumpEntry{top.dig.contactI.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[27].val", DumpEntry{top.dig.contactI.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[28].val", DumpEntry{top.dig.contactI.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[29].val", DumpEntry{top.dig.contactI.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[30].val", DumpEntry{top.dig.contactI.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.contactI.fastFilterSc[31].val", DumpEntry{top.dig.contactI.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[0].val", DumpEntry{top.dig.contactI.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[1].val", DumpEntry{top.dig.contactI.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[2].val", DumpEntry{top.dig.contactI.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[3].val", DumpEntry{top.dig.contactI.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[4].val", DumpEntry{top.dig.contactI.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[5].val", DumpEntry{top.dig.contactI.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[6].val", DumpEntry{top.dig.contactI.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[7].val", DumpEntry{top.dig.contactI.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[8].val", DumpEntry{top.dig.contactI.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[9].val", DumpEntry{top.dig.contactI.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[10].val", DumpEntry{top.dig.contactI.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[11].val", DumpEntry{top.dig.contactI.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[12].val", DumpEntry{top.dig.contactI.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[13].val", DumpEntry{top.dig.contactI.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[14].val", DumpEntry{top.dig.contactI.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[15].val", DumpEntry{top.dig.contactI.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[16].val", DumpEntry{top.dig.contactI.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[17].val", DumpEntry{top.dig.contactI.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[18].val", DumpEntry{top.dig.contactI.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[19].val", DumpEntry{top.dig.contactI.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[20].val", DumpEntry{top.dig.contactI.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[21].val", DumpEntry{top.dig.contactI.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[22].val", DumpEntry{top.dig.contactI.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[23].val", DumpEntry{top.dig.contactI.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[24].val", DumpEntry{top.dig.contactI.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[25].val", DumpEntry{top.dig.contactI.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[26].val", DumpEntry{top.dig.contactI.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[27].val", DumpEntry{top.dig.contactI.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[28].val", DumpEntry{top.dig.contactI.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[29].val", DumpEntry{top.dig.contactI.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[30].val", DumpEntry{top.dig.contactI.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.contactI.slowFilterSc[31].val", DumpEntry{top.dig.contactI.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.contactI.reTime[0].s", DumpEntry{top.dig.contactI.reTime[0].s});
        res.insert_or_assign("top.dig.contactI.reTime[0].ns", DumpEntry{top.dig.contactI.reTime[0].ns});
        res.insert_or_assign("top.dig.contactI.reTime[1].s", DumpEntry{top.dig.contactI.reTime[1].s});
        res.insert_or_assign("top.dig.contactI.reTime[1].ns", DumpEntry{top.dig.contactI.reTime[1].ns});
        res.insert_or_assign("top.dig.contactI.reTime[2].s", DumpEntry{top.dig.contactI.reTime[2].s});
        res.insert_or_assign("top.dig.contactI.reTime[2].ns", DumpEntry{top.dig.contactI.reTime[2].ns});
        res.insert_or_assign("top.dig.contactI.reTime[3].s", DumpEntry{top.dig.contactI.reTime[3].s});
        res.insert_or_assign("top.dig.contactI.reTime[3].ns", DumpEntry{top.dig.contactI.reTime[3].ns});
        res.insert_or_assign("top.dig.contactI.reTime[4].s", DumpEntry{top.dig.contactI.reTime[4].s});
        res.insert_or_assign("top.dig.contactI.reTime[4].ns", DumpEntry{top.dig.contactI.reTime[4].ns});
        res.insert_or_assign("top.dig.contactI.reTime[5].s", DumpEntry{top.dig.contactI.reTime[5].s});
        res.insert_or_assign("top.dig.contactI.reTime[5].ns", DumpEntry{top.dig.contactI.reTime[5].ns});
        res.insert_or_assign("top.dig.contactI.reTime[6].s", DumpEntry{top.dig.contactI.reTime[6].s});
        res.insert_or_assign("top.dig.contactI.reTime[6].ns", DumpEntry{top.dig.contactI.reTime[6].ns});
        res.insert_or_assign("top.dig.contactI.reTime[7].s", DumpEntry{top.dig.contactI.reTime[7].s});
        res.insert_or_assign("top.dig.contactI.reTime[7].ns", DumpEntry{top.dig.contactI.reTime[7].ns});
        res.insert_or_assign("top.dig.contactI.reTime[8].s", DumpEntry{top.dig.contactI.reTime[8].s});
        res.insert_or_assign("top.dig.contactI.reTime[8].ns", DumpEntry{top.dig.contactI.reTime[8].ns});
        res.insert_or_assign("top.dig.contactI.reTime[9].s", DumpEntry{top.dig.contactI.reTime[9].s});
        res.insert_or_assign("top.dig.contactI.reTime[9].ns", DumpEntry{top.dig.contactI.reTime[9].ns});
        res.insert_or_assign("top.dig.contactI.reTime[10].s", DumpEntry{top.dig.contactI.reTime[10].s});
        res.insert_or_assign("top.dig.contactI.reTime[10].ns", DumpEntry{top.dig.contactI.reTime[10].ns});
        res.insert_or_assign("top.dig.contactI.reTime[11].s", DumpEntry{top.dig.contactI.reTime[11].s});
        res.insert_or_assign("top.dig.contactI.reTime[11].ns", DumpEntry{top.dig.contactI.reTime[11].ns});
        res.insert_or_assign("top.dig.contactI.reTime[12].s", DumpEntry{top.dig.contactI.reTime[12].s});
        res.insert_or_assign("top.dig.contactI.reTime[12].ns", DumpEntry{top.dig.contactI.reTime[12].ns});
        res.insert_or_assign("top.dig.contactI.reTime[13].s", DumpEntry{top.dig.contactI.reTime[13].s});
        res.insert_or_assign("top.dig.contactI.reTime[13].ns", DumpEntry{top.dig.contactI.reTime[13].ns});
        res.insert_or_assign("top.dig.contactI.reTime[14].s", DumpEntry{top.dig.contactI.reTime[14].s});
        res.insert_or_assign("top.dig.contactI.reTime[14].ns", DumpEntry{top.dig.contactI.reTime[14].ns});
        res.insert_or_assign("top.dig.contactI.reTime[15].s", DumpEntry{top.dig.contactI.reTime[15].s});
        res.insert_or_assign("top.dig.contactI.reTime[15].ns", DumpEntry{top.dig.contactI.reTime[15].ns});
        res.insert_or_assign("top.dig.contactI.reTime[16].s", DumpEntry{top.dig.contactI.reTime[16].s});
        res.insert_or_assign("top.dig.contactI.reTime[16].ns", DumpEntry{top.dig.contactI.reTime[16].ns});
        res.insert_or_assign("top.dig.contactI.reTime[17].s", DumpEntry{top.dig.contactI.reTime[17].s});
        res.insert_or_assign("top.dig.contactI.reTime[17].ns", DumpEntry{top.dig.contactI.reTime[17].ns});
        res.insert_or_assign("top.dig.contactI.reTime[18].s", DumpEntry{top.dig.contactI.reTime[18].s});
        res.insert_or_assign("top.dig.contactI.reTime[18].ns", DumpEntry{top.dig.contactI.reTime[18].ns});
        res.insert_or_assign("top.dig.contactI.reTime[19].s", DumpEntry{top.dig.contactI.reTime[19].s});
        res.insert_or_assign("top.dig.contactI.reTime[19].ns", DumpEntry{top.dig.contactI.reTime[19].ns});
        res.insert_or_assign("top.dig.contactI.reTime[20].s", DumpEntry{top.dig.contactI.reTime[20].s});
        res.insert_or_assign("top.dig.contactI.reTime[20].ns", DumpEntry{top.dig.contactI.reTime[20].ns});
        res.insert_or_assign("top.dig.contactI.reTime[21].s", DumpEntry{top.dig.contactI.reTime[21].s});
        res.insert_or_assign("top.dig.contactI.reTime[21].ns", DumpEntry{top.dig.contactI.reTime[21].ns});
        res.insert_or_assign("top.dig.contactI.reTime[22].s", DumpEntry{top.dig.contactI.reTime[22].s});
        res.insert_or_assign("top.dig.contactI.reTime[22].ns", DumpEntry{top.dig.contactI.reTime[22].ns});
        res.insert_or_assign("top.dig.contactI.reTime[23].s", DumpEntry{top.dig.contactI.reTime[23].s});
        res.insert_or_assign("top.dig.contactI.reTime[23].ns", DumpEntry{top.dig.contactI.reTime[23].ns});
        res.insert_or_assign("top.dig.contactI.reTime[24].s", DumpEntry{top.dig.contactI.reTime[24].s});
        res.insert_or_assign("top.dig.contactI.reTime[24].ns", DumpEntry{top.dig.contactI.reTime[24].ns});
        res.insert_or_assign("top.dig.contactI.reTime[25].s", DumpEntry{top.dig.contactI.reTime[25].s});
        res.insert_or_assign("top.dig.contactI.reTime[25].ns", DumpEntry{top.dig.contactI.reTime[25].ns});
        res.insert_or_assign("top.dig.contactI.reTime[26].s", DumpEntry{top.dig.contactI.reTime[26].s});
        res.insert_or_assign("top.dig.contactI.reTime[26].ns", DumpEntry{top.dig.contactI.reTime[26].ns});
        res.insert_or_assign("top.dig.contactI.reTime[27].s", DumpEntry{top.dig.contactI.reTime[27].s});
        res.insert_or_assign("top.dig.contactI.reTime[27].ns", DumpEntry{top.dig.contactI.reTime[27].ns});
        res.insert_or_assign("top.dig.contactI.reTime[28].s", DumpEntry{top.dig.contactI.reTime[28].s});
        res.insert_or_assign("top.dig.contactI.reTime[28].ns", DumpEntry{top.dig.contactI.reTime[28].ns});
        res.insert_or_assign("top.dig.contactI.reTime[29].s", DumpEntry{top.dig.contactI.reTime[29].s});
        res.insert_or_assign("top.dig.contactI.reTime[29].ns", DumpEntry{top.dig.contactI.reTime[29].ns});
        res.insert_or_assign("top.dig.contactI.reTime[30].s", DumpEntry{top.dig.contactI.reTime[30].s});
        res.insert_or_assign("top.dig.contactI.reTime[30].ns", DumpEntry{top.dig.contactI.reTime[30].ns});
        res.insert_or_assign("top.dig.contactI.reTime[31].s", DumpEntry{top.dig.contactI.reTime[31].s});
        res.insert_or_assign("top.dig.contactI.reTime[31].ns", DumpEntry{top.dig.contactI.reTime[31].ns});
        res.insert_or_assign("top.dig.opticalI.staticParams", DumpEntry{top.dig.opticalI.staticParams});
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.invertIsEn", DumpEntry{top.dig.opticalI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.enableIsEn", DumpEntry{top.dig.opticalI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.latchIsEn", DumpEntry{top.dig.opticalI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.deglitchIsEn", DumpEntry{top.dig.opticalI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.reTimeIsEn", DumpEntry{top.dig.opticalI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.numChannels", DumpEntry{top.dig.opticalI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.opticalI.data", DumpEntry{top.dig.opticalI.data});
        res.insert_or_assign("top.dig.opticalI.dataChanged", DumpEntry{top.dig.opticalI.dataChanged});
        res.insert_or_assign("top.dig.opticalI.invert", DumpEntry{top.dig.opticalI.invert});
        res.insert_or_assign("top.dig.opticalI.enable", DumpEntry{top.dig.opticalI.enable});
        res.insert_or_assign("top.dig.opticalI.latch", DumpEntry{top.dig.opticalI.latch});
        res.insert_or_assign("top.dig.opticalI.rstLatch", DumpEntry{top.dig.opticalI.rstLatch});
        res.insert_or_assign("top.dig.opticalI.risingInterrupt", DumpEntry{top.dig.opticalI.risingInterrupt});
        res.insert_or_assign("top.dig.opticalI.fallingInterrupt", DumpEntry{top.dig.opticalI.fallingInterrupt});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[0].val", DumpEntry{top.dig.opticalI.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[1].val", DumpEntry{top.dig.opticalI.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[2].val", DumpEntry{top.dig.opticalI.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[3].val", DumpEntry{top.dig.opticalI.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[4].val", DumpEntry{top.dig.opticalI.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[5].val", DumpEntry{top.dig.opticalI.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[6].val", DumpEntry{top.dig.opticalI.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[7].val", DumpEntry{top.dig.opticalI.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[8].val", DumpEntry{top.dig.opticalI.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[9].val", DumpEntry{top.dig.opticalI.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[10].val", DumpEntry{top.dig.opticalI.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[11].val", DumpEntry{top.dig.opticalI.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[12].val", DumpEntry{top.dig.opticalI.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[13].val", DumpEntry{top.dig.opticalI.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[14].val", DumpEntry{top.dig.opticalI.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[15].val", DumpEntry{top.dig.opticalI.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[16].val", DumpEntry{top.dig.opticalI.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[17].val", DumpEntry{top.dig.opticalI.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[18].val", DumpEntry{top.dig.opticalI.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[19].val", DumpEntry{top.dig.opticalI.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[20].val", DumpEntry{top.dig.opticalI.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[21].val", DumpEntry{top.dig.opticalI.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[22].val", DumpEntry{top.dig.opticalI.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[23].val", DumpEntry{top.dig.opticalI.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[24].val", DumpEntry{top.dig.opticalI.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[25].val", DumpEntry{top.dig.opticalI.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[26].val", DumpEntry{top.dig.opticalI.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[27].val", DumpEntry{top.dig.opticalI.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[28].val", DumpEntry{top.dig.opticalI.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[29].val", DumpEntry{top.dig.opticalI.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[30].val", DumpEntry{top.dig.opticalI.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.opticalI.fastFilterSc[31].val", DumpEntry{top.dig.opticalI.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[0].val", DumpEntry{top.dig.opticalI.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[1].val", DumpEntry{top.dig.opticalI.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[2].val", DumpEntry{top.dig.opticalI.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[3].val", DumpEntry{top.dig.opticalI.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[4].val", DumpEntry{top.dig.opticalI.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[5].val", DumpEntry{top.dig.opticalI.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[6].val", DumpEntry{top.dig.opticalI.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[7].val", DumpEntry{top.dig.opticalI.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[8].val", DumpEntry{top.dig.opticalI.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[9].val", DumpEntry{top.dig.opticalI.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[10].val", DumpEntry{top.dig.opticalI.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[11].val", DumpEntry{top.dig.opticalI.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[12].val", DumpEntry{top.dig.opticalI.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[13].val", DumpEntry{top.dig.opticalI.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[14].val", DumpEntry{top.dig.opticalI.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[15].val", DumpEntry{top.dig.opticalI.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[16].val", DumpEntry{top.dig.opticalI.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[17].val", DumpEntry{top.dig.opticalI.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[18].val", DumpEntry{top.dig.opticalI.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[19].val", DumpEntry{top.dig.opticalI.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[20].val", DumpEntry{top.dig.opticalI.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[21].val", DumpEntry{top.dig.opticalI.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[22].val", DumpEntry{top.dig.opticalI.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[23].val", DumpEntry{top.dig.opticalI.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[24].val", DumpEntry{top.dig.opticalI.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[25].val", DumpEntry{top.dig.opticalI.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[26].val", DumpEntry{top.dig.opticalI.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[27].val", DumpEntry{top.dig.opticalI.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[28].val", DumpEntry{top.dig.opticalI.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[29].val", DumpEntry{top.dig.opticalI.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[30].val", DumpEntry{top.dig.opticalI.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.opticalI.slowFilterSc[31].val", DumpEntry{top.dig.opticalI.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.opticalI.reTime[0].s", DumpEntry{top.dig.opticalI.reTime[0].s});
        res.insert_or_assign("top.dig.opticalI.reTime[0].ns", DumpEntry{top.dig.opticalI.reTime[0].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[1].s", DumpEntry{top.dig.opticalI.reTime[1].s});
        res.insert_or_assign("top.dig.opticalI.reTime[1].ns", DumpEntry{top.dig.opticalI.reTime[1].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[2].s", DumpEntry{top.dig.opticalI.reTime[2].s});
        res.insert_or_assign("top.dig.opticalI.reTime[2].ns", DumpEntry{top.dig.opticalI.reTime[2].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[3].s", DumpEntry{top.dig.opticalI.reTime[3].s});
        res.insert_or_assign("top.dig.opticalI.reTime[3].ns", DumpEntry{top.dig.opticalI.reTime[3].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[4].s", DumpEntry{top.dig.opticalI.reTime[4].s});
        res.insert_or_assign("top.dig.opticalI.reTime[4].ns", DumpEntry{top.dig.opticalI.reTime[4].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[5].s", DumpEntry{top.dig.opticalI.reTime[5].s});
        res.insert_or_assign("top.dig.opticalI.reTime[5].ns", DumpEntry{top.dig.opticalI.reTime[5].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[6].s", DumpEntry{top.dig.opticalI.reTime[6].s});
        res.insert_or_assign("top.dig.opticalI.reTime[6].ns", DumpEntry{top.dig.opticalI.reTime[6].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[7].s", DumpEntry{top.dig.opticalI.reTime[7].s});
        res.insert_or_assign("top.dig.opticalI.reTime[7].ns", DumpEntry{top.dig.opticalI.reTime[7].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[8].s", DumpEntry{top.dig.opticalI.reTime[8].s});
        res.insert_or_assign("top.dig.opticalI.reTime[8].ns", DumpEntry{top.dig.opticalI.reTime[8].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[9].s", DumpEntry{top.dig.opticalI.reTime[9].s});
        res.insert_or_assign("top.dig.opticalI.reTime[9].ns", DumpEntry{top.dig.opticalI.reTime[9].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[10].s", DumpEntry{top.dig.opticalI.reTime[10].s});
        res.insert_or_assign("top.dig.opticalI.reTime[10].ns", DumpEntry{top.dig.opticalI.reTime[10].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[11].s", DumpEntry{top.dig.opticalI.reTime[11].s});
        res.insert_or_assign("top.dig.opticalI.reTime[11].ns", DumpEntry{top.dig.opticalI.reTime[11].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[12].s", DumpEntry{top.dig.opticalI.reTime[12].s});
        res.insert_or_assign("top.dig.opticalI.reTime[12].ns", DumpEntry{top.dig.opticalI.reTime[12].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[13].s", DumpEntry{top.dig.opticalI.reTime[13].s});
        res.insert_or_assign("top.dig.opticalI.reTime[13].ns", DumpEntry{top.dig.opticalI.reTime[13].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[14].s", DumpEntry{top.dig.opticalI.reTime[14].s});
        res.insert_or_assign("top.dig.opticalI.reTime[14].ns", DumpEntry{top.dig.opticalI.reTime[14].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[15].s", DumpEntry{top.dig.opticalI.reTime[15].s});
        res.insert_or_assign("top.dig.opticalI.reTime[15].ns", DumpEntry{top.dig.opticalI.reTime[15].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[16].s", DumpEntry{top.dig.opticalI.reTime[16].s});
        res.insert_or_assign("top.dig.opticalI.reTime[16].ns", DumpEntry{top.dig.opticalI.reTime[16].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[17].s", DumpEntry{top.dig.opticalI.reTime[17].s});
        res.insert_or_assign("top.dig.opticalI.reTime[17].ns", DumpEntry{top.dig.opticalI.reTime[17].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[18].s", DumpEntry{top.dig.opticalI.reTime[18].s});
        res.insert_or_assign("top.dig.opticalI.reTime[18].ns", DumpEntry{top.dig.opticalI.reTime[18].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[19].s", DumpEntry{top.dig.opticalI.reTime[19].s});
        res.insert_or_assign("top.dig.opticalI.reTime[19].ns", DumpEntry{top.dig.opticalI.reTime[19].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[20].s", DumpEntry{top.dig.opticalI.reTime[20].s});
        res.insert_or_assign("top.dig.opticalI.reTime[20].ns", DumpEntry{top.dig.opticalI.reTime[20].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[21].s", DumpEntry{top.dig.opticalI.reTime[21].s});
        res.insert_or_assign("top.dig.opticalI.reTime[21].ns", DumpEntry{top.dig.opticalI.reTime[21].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[22].s", DumpEntry{top.dig.opticalI.reTime[22].s});
        res.insert_or_assign("top.dig.opticalI.reTime[22].ns", DumpEntry{top.dig.opticalI.reTime[22].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[23].s", DumpEntry{top.dig.opticalI.reTime[23].s});
        res.insert_or_assign("top.dig.opticalI.reTime[23].ns", DumpEntry{top.dig.opticalI.reTime[23].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[24].s", DumpEntry{top.dig.opticalI.reTime[24].s});
        res.insert_or_assign("top.dig.opticalI.reTime[24].ns", DumpEntry{top.dig.opticalI.reTime[24].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[25].s", DumpEntry{top.dig.opticalI.reTime[25].s});
        res.insert_or_assign("top.dig.opticalI.reTime[25].ns", DumpEntry{top.dig.opticalI.reTime[25].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[26].s", DumpEntry{top.dig.opticalI.reTime[26].s});
        res.insert_or_assign("top.dig.opticalI.reTime[26].ns", DumpEntry{top.dig.opticalI.reTime[26].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[27].s", DumpEntry{top.dig.opticalI.reTime[27].s});
        res.insert_or_assign("top.dig.opticalI.reTime[27].ns", DumpEntry{top.dig.opticalI.reTime[27].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[28].s", DumpEntry{top.dig.opticalI.reTime[28].s});
        res.insert_or_assign("top.dig.opticalI.reTime[28].ns", DumpEntry{top.dig.opticalI.reTime[28].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[29].s", DumpEntry{top.dig.opticalI.reTime[29].s});
        res.insert_or_assign("top.dig.opticalI.reTime[29].ns", DumpEntry{top.dig.opticalI.reTime[29].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[30].s", DumpEntry{top.dig.opticalI.reTime[30].s});
        res.insert_or_assign("top.dig.opticalI.reTime[30].ns", DumpEntry{top.dig.opticalI.reTime[30].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[31].s", DumpEntry{top.dig.opticalI.reTime[31].s});
        res.insert_or_assign("top.dig.opticalI.reTime[31].ns", DumpEntry{top.dig.opticalI.reTime[31].ns});
        res.insert_or_assign("top.dig.minMaxLim0.staticParams", DumpEntry{top.dig.minMaxLim0.staticParams});
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.invertIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.enableIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.latchIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.deglitchIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.reTimeIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.numChannels", DumpEntry{top.dig.minMaxLim0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.minMaxLim0.data", DumpEntry{top.dig.minMaxLim0.data});
        res.insert_or_assign("top.dig.minMaxLim0.dataChanged", DumpEntry{top.dig.minMaxLim0.dataChanged});
        res.insert_or_assign("top.dig.minMaxLim0.invert", DumpEntry{top.dig.minMaxLim0.invert});
        res.insert_or_assign("top.dig.minMaxLim0.enable", DumpEntry{top.dig.minMaxLim0.enable});
        res.insert_or_assign("top.dig.minMaxLim0.latch", DumpEntry{top.dig.minMaxLim0.latch});
        res.insert_or_assign("top.dig.minMaxLim0.rstLatch", DumpEntry{top.dig.minMaxLim0.rstLatch});
        res.insert_or_assign("top.dig.minMaxLim0.risingInterrupt", DumpEntry{top.dig.minMaxLim0.risingInterrupt});
        res.insert_or_assign("top.dig.minMaxLim0.fallingInterrupt", DumpEntry{top.dig.minMaxLim0.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[0].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[1].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[2].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[3].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[4].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[5].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[6].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[7].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[8].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[9].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[10].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[11].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[12].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[13].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[14].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[15].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[16].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[17].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[18].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[19].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[20].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[21].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[22].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[23].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[24].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[25].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[26].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[27].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[28].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[29].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[30].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.fastFilterSc[31].val", DumpEntry{top.dig.minMaxLim0.fastFilterSc[31].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[0].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[1].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[2].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[3].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[4].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[5].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[6].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[7].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[8].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[9].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[10].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[11].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[12].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[13].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[14].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[15].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[16].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[17].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[18].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[19].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[20].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[21].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[22].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[23].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[24].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[25].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[26].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[27].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[28].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[29].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[30].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.slowFilterSc[31].val", DumpEntry{top.dig.minMaxLim0.slowFilterSc[31].val}
        );
        res.insert_or_assign("top.dig.minMaxLim0.reTime[0].s", DumpEntry{top.dig.minMaxLim0.reTime[0].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[0].ns", DumpEntry{top.dig.minMaxLim0.reTime[0].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[1].s", DumpEntry{top.dig.minMaxLim0.reTime[1].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[1].ns", DumpEntry{top.dig.minMaxLim0.reTime[1].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[2].s", DumpEntry{top.dig.minMaxLim0.reTime[2].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[2].ns", DumpEntry{top.dig.minMaxLim0.reTime[2].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[3].s", DumpEntry{top.dig.minMaxLim0.reTime[3].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[3].ns", DumpEntry{top.dig.minMaxLim0.reTime[3].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[4].s", DumpEntry{top.dig.minMaxLim0.reTime[4].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[4].ns", DumpEntry{top.dig.minMaxLim0.reTime[4].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[5].s", DumpEntry{top.dig.minMaxLim0.reTime[5].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[5].ns", DumpEntry{top.dig.minMaxLim0.reTime[5].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[6].s", DumpEntry{top.dig.minMaxLim0.reTime[6].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[6].ns", DumpEntry{top.dig.minMaxLim0.reTime[6].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[7].s", DumpEntry{top.dig.minMaxLim0.reTime[7].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[7].ns", DumpEntry{top.dig.minMaxLim0.reTime[7].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[8].s", DumpEntry{top.dig.minMaxLim0.reTime[8].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[8].ns", DumpEntry{top.dig.minMaxLim0.reTime[8].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[9].s", DumpEntry{top.dig.minMaxLim0.reTime[9].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[9].ns", DumpEntry{top.dig.minMaxLim0.reTime[9].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[10].s", DumpEntry{top.dig.minMaxLim0.reTime[10].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[10].ns", DumpEntry{top.dig.minMaxLim0.reTime[10].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[11].s", DumpEntry{top.dig.minMaxLim0.reTime[11].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[11].ns", DumpEntry{top.dig.minMaxLim0.reTime[11].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[12].s", DumpEntry{top.dig.minMaxLim0.reTime[12].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[12].ns", DumpEntry{top.dig.minMaxLim0.reTime[12].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[13].s", DumpEntry{top.dig.minMaxLim0.reTime[13].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[13].ns", DumpEntry{top.dig.minMaxLim0.reTime[13].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[14].s", DumpEntry{top.dig.minMaxLim0.reTime[14].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[14].ns", DumpEntry{top.dig.minMaxLim0.reTime[14].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[15].s", DumpEntry{top.dig.minMaxLim0.reTime[15].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[15].ns", DumpEntry{top.dig.minMaxLim0.reTime[15].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[16].s", DumpEntry{top.dig.minMaxLim0.reTime[16].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[16].ns", DumpEntry{top.dig.minMaxLim0.reTime[16].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[17].s", DumpEntry{top.dig.minMaxLim0.reTime[17].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[17].ns", DumpEntry{top.dig.minMaxLim0.reTime[17].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[18].s", DumpEntry{top.dig.minMaxLim0.reTime[18].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[18].ns", DumpEntry{top.dig.minMaxLim0.reTime[18].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[19].s", DumpEntry{top.dig.minMaxLim0.reTime[19].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[19].ns", DumpEntry{top.dig.minMaxLim0.reTime[19].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[20].s", DumpEntry{top.dig.minMaxLim0.reTime[20].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[20].ns", DumpEntry{top.dig.minMaxLim0.reTime[20].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[21].s", DumpEntry{top.dig.minMaxLim0.reTime[21].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[21].ns", DumpEntry{top.dig.minMaxLim0.reTime[21].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[22].s", DumpEntry{top.dig.minMaxLim0.reTime[22].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[22].ns", DumpEntry{top.dig.minMaxLim0.reTime[22].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[23].s", DumpEntry{top.dig.minMaxLim0.reTime[23].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[23].ns", DumpEntry{top.dig.minMaxLim0.reTime[23].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[24].s", DumpEntry{top.dig.minMaxLim0.reTime[24].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[24].ns", DumpEntry{top.dig.minMaxLim0.reTime[24].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[25].s", DumpEntry{top.dig.minMaxLim0.reTime[25].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[25].ns", DumpEntry{top.dig.minMaxLim0.reTime[25].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[26].s", DumpEntry{top.dig.minMaxLim0.reTime[26].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[26].ns", DumpEntry{top.dig.minMaxLim0.reTime[26].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[27].s", DumpEntry{top.dig.minMaxLim0.reTime[27].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[27].ns", DumpEntry{top.dig.minMaxLim0.reTime[27].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[28].s", DumpEntry{top.dig.minMaxLim0.reTime[28].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[28].ns", DumpEntry{top.dig.minMaxLim0.reTime[28].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[29].s", DumpEntry{top.dig.minMaxLim0.reTime[29].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[29].ns", DumpEntry{top.dig.minMaxLim0.reTime[29].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[30].s", DumpEntry{top.dig.minMaxLim0.reTime[30].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[30].ns", DumpEntry{top.dig.minMaxLim0.reTime[30].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[31].s", DumpEntry{top.dig.minMaxLim0.reTime[31].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[31].ns", DumpEntry{top.dig.minMaxLim0.reTime[31].ns});
        res.insert_or_assign("top.dig.minMaxLim1.staticParams", DumpEntry{top.dig.minMaxLim1.staticParams});
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.invertIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.enableIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.latchIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.deglitchIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.reTimeIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.numChannels", DumpEntry{top.dig.minMaxLim1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.minMaxLim1.data", DumpEntry{top.dig.minMaxLim1.data});
        res.insert_or_assign("top.dig.minMaxLim1.dataChanged", DumpEntry{top.dig.minMaxLim1.dataChanged});
        res.insert_or_assign("top.dig.minMaxLim1.invert", DumpEntry{top.dig.minMaxLim1.invert});
        res.insert_or_assign("top.dig.minMaxLim1.enable", DumpEntry{top.dig.minMaxLim1.enable});
        res.insert_or_assign("top.dig.minMaxLim1.latch", DumpEntry{top.dig.minMaxLim1.latch});
        res.insert_or_assign("top.dig.minMaxLim1.rstLatch", DumpEntry{top.dig.minMaxLim1.rstLatch});
        res.insert_or_assign("top.dig.minMaxLim1.risingInterrupt", DumpEntry{top.dig.minMaxLim1.risingInterrupt});
        res.insert_or_assign("top.dig.minMaxLim1.fallingInterrupt", DumpEntry{top.dig.minMaxLim1.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[0].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[1].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[2].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[3].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[4].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[5].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[6].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[7].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[8].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[9].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[10].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[11].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[12].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[13].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[14].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[15].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[16].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[17].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[18].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[19].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[20].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[21].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[22].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[23].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[24].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[25].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[26].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[27].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[28].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[29].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[30].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.fastFilterSc[31].val", DumpEntry{top.dig.minMaxLim1.fastFilterSc[31].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[0].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[1].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[2].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[3].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[4].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[5].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[6].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[7].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[8].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[9].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[10].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[11].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[12].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[13].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[14].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[15].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[16].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[17].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[18].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[19].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[20].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[21].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[22].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[23].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[24].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[25].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[26].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[27].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[28].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[29].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[30].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.slowFilterSc[31].val", DumpEntry{top.dig.minMaxLim1.slowFilterSc[31].val}
        );
        res.insert_or_assign("top.dig.minMaxLim1.reTime[0].s", DumpEntry{top.dig.minMaxLim1.reTime[0].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[0].ns", DumpEntry{top.dig.minMaxLim1.reTime[0].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[1].s", DumpEntry{top.dig.minMaxLim1.reTime[1].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[1].ns", DumpEntry{top.dig.minMaxLim1.reTime[1].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[2].s", DumpEntry{top.dig.minMaxLim1.reTime[2].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[2].ns", DumpEntry{top.dig.minMaxLim1.reTime[2].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[3].s", DumpEntry{top.dig.minMaxLim1.reTime[3].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[3].ns", DumpEntry{top.dig.minMaxLim1.reTime[3].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[4].s", DumpEntry{top.dig.minMaxLim1.reTime[4].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[4].ns", DumpEntry{top.dig.minMaxLim1.reTime[4].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[5].s", DumpEntry{top.dig.minMaxLim1.reTime[5].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[5].ns", DumpEntry{top.dig.minMaxLim1.reTime[5].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[6].s", DumpEntry{top.dig.minMaxLim1.reTime[6].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[6].ns", DumpEntry{top.dig.minMaxLim1.reTime[6].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[7].s", DumpEntry{top.dig.minMaxLim1.reTime[7].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[7].ns", DumpEntry{top.dig.minMaxLim1.reTime[7].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[8].s", DumpEntry{top.dig.minMaxLim1.reTime[8].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[8].ns", DumpEntry{top.dig.minMaxLim1.reTime[8].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[9].s", DumpEntry{top.dig.minMaxLim1.reTime[9].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[9].ns", DumpEntry{top.dig.minMaxLim1.reTime[9].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[10].s", DumpEntry{top.dig.minMaxLim1.reTime[10].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[10].ns", DumpEntry{top.dig.minMaxLim1.reTime[10].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[11].s", DumpEntry{top.dig.minMaxLim1.reTime[11].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[11].ns", DumpEntry{top.dig.minMaxLim1.reTime[11].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[12].s", DumpEntry{top.dig.minMaxLim1.reTime[12].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[12].ns", DumpEntry{top.dig.minMaxLim1.reTime[12].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[13].s", DumpEntry{top.dig.minMaxLim1.reTime[13].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[13].ns", DumpEntry{top.dig.minMaxLim1.reTime[13].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[14].s", DumpEntry{top.dig.minMaxLim1.reTime[14].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[14].ns", DumpEntry{top.dig.minMaxLim1.reTime[14].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[15].s", DumpEntry{top.dig.minMaxLim1.reTime[15].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[15].ns", DumpEntry{top.dig.minMaxLim1.reTime[15].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[16].s", DumpEntry{top.dig.minMaxLim1.reTime[16].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[16].ns", DumpEntry{top.dig.minMaxLim1.reTime[16].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[17].s", DumpEntry{top.dig.minMaxLim1.reTime[17].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[17].ns", DumpEntry{top.dig.minMaxLim1.reTime[17].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[18].s", DumpEntry{top.dig.minMaxLim1.reTime[18].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[18].ns", DumpEntry{top.dig.minMaxLim1.reTime[18].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[19].s", DumpEntry{top.dig.minMaxLim1.reTime[19].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[19].ns", DumpEntry{top.dig.minMaxLim1.reTime[19].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[20].s", DumpEntry{top.dig.minMaxLim1.reTime[20].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[20].ns", DumpEntry{top.dig.minMaxLim1.reTime[20].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[21].s", DumpEntry{top.dig.minMaxLim1.reTime[21].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[21].ns", DumpEntry{top.dig.minMaxLim1.reTime[21].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[22].s", DumpEntry{top.dig.minMaxLim1.reTime[22].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[22].ns", DumpEntry{top.dig.minMaxLim1.reTime[22].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[23].s", DumpEntry{top.dig.minMaxLim1.reTime[23].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[23].ns", DumpEntry{top.dig.minMaxLim1.reTime[23].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[24].s", DumpEntry{top.dig.minMaxLim1.reTime[24].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[24].ns", DumpEntry{top.dig.minMaxLim1.reTime[24].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[25].s", DumpEntry{top.dig.minMaxLim1.reTime[25].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[25].ns", DumpEntry{top.dig.minMaxLim1.reTime[25].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[26].s", DumpEntry{top.dig.minMaxLim1.reTime[26].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[26].ns", DumpEntry{top.dig.minMaxLim1.reTime[26].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[27].s", DumpEntry{top.dig.minMaxLim1.reTime[27].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[27].ns", DumpEntry{top.dig.minMaxLim1.reTime[27].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[28].s", DumpEntry{top.dig.minMaxLim1.reTime[28].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[28].ns", DumpEntry{top.dig.minMaxLim1.reTime[28].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[29].s", DumpEntry{top.dig.minMaxLim1.reTime[29].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[29].ns", DumpEntry{top.dig.minMaxLim1.reTime[29].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[30].s", DumpEntry{top.dig.minMaxLim1.reTime[30].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[30].ns", DumpEntry{top.dig.minMaxLim1.reTime[30].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[31].s", DumpEntry{top.dig.minMaxLim1.reTime[31].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[31].ns", DumpEntry{top.dig.minMaxLim1.reTime[31].ns});
        res.insert_or_assign("top.dig.rmsLim0.staticParams", DumpEntry{top.dig.rmsLim0.staticParams});
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.invertIsEn", DumpEntry{top.dig.rmsLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.enableIsEn", DumpEntry{top.dig.rmsLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.latchIsEn", DumpEntry{top.dig.rmsLim0.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.deglitchIsEn", DumpEntry{top.dig.rmsLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.reTimeIsEn", DumpEntry{top.dig.rmsLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.numChannels", DumpEntry{top.dig.rmsLim0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.rmsLim0.data", DumpEntry{top.dig.rmsLim0.data});
        res.insert_or_assign("top.dig.rmsLim0.dataChanged", DumpEntry{top.dig.rmsLim0.dataChanged});
        res.insert_or_assign("top.dig.rmsLim0.invert", DumpEntry{top.dig.rmsLim0.invert});
        res.insert_or_assign("top.dig.rmsLim0.enable", DumpEntry{top.dig.rmsLim0.enable});
        res.insert_or_assign("top.dig.rmsLim0.latch", DumpEntry{top.dig.rmsLim0.latch});
        res.insert_or_assign("top.dig.rmsLim0.rstLatch", DumpEntry{top.dig.rmsLim0.rstLatch});
        res.insert_or_assign("top.dig.rmsLim0.risingInterrupt", DumpEntry{top.dig.rmsLim0.risingInterrupt});
        res.insert_or_assign("top.dig.rmsLim0.fallingInterrupt", DumpEntry{top.dig.rmsLim0.fallingInterrupt});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[0].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[1].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[2].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[3].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[4].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[5].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[6].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[7].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[8].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[9].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[10].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[11].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[12].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[13].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[14].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[15].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[16].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[17].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[18].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[19].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[20].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[21].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[22].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[23].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[24].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[25].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[26].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[27].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[28].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[29].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[30].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.rmsLim0.fastFilterSc[31].val", DumpEntry{top.dig.rmsLim0.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[0].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[1].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[2].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[3].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[4].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[5].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[6].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[7].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[8].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[9].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[10].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[11].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[12].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[13].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[14].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[15].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[16].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[17].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[18].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[19].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[20].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[21].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[22].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[23].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[24].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[25].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[26].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[27].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[28].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[29].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[30].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.rmsLim0.slowFilterSc[31].val", DumpEntry{top.dig.rmsLim0.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.rmsLim0.reTime[0].s", DumpEntry{top.dig.rmsLim0.reTime[0].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[0].ns", DumpEntry{top.dig.rmsLim0.reTime[0].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[1].s", DumpEntry{top.dig.rmsLim0.reTime[1].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[1].ns", DumpEntry{top.dig.rmsLim0.reTime[1].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[2].s", DumpEntry{top.dig.rmsLim0.reTime[2].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[2].ns", DumpEntry{top.dig.rmsLim0.reTime[2].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[3].s", DumpEntry{top.dig.rmsLim0.reTime[3].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[3].ns", DumpEntry{top.dig.rmsLim0.reTime[3].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[4].s", DumpEntry{top.dig.rmsLim0.reTime[4].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[4].ns", DumpEntry{top.dig.rmsLim0.reTime[4].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[5].s", DumpEntry{top.dig.rmsLim0.reTime[5].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[5].ns", DumpEntry{top.dig.rmsLim0.reTime[5].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[6].s", DumpEntry{top.dig.rmsLim0.reTime[6].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[6].ns", DumpEntry{top.dig.rmsLim0.reTime[6].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[7].s", DumpEntry{top.dig.rmsLim0.reTime[7].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[7].ns", DumpEntry{top.dig.rmsLim0.reTime[7].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[8].s", DumpEntry{top.dig.rmsLim0.reTime[8].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[8].ns", DumpEntry{top.dig.rmsLim0.reTime[8].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[9].s", DumpEntry{top.dig.rmsLim0.reTime[9].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[9].ns", DumpEntry{top.dig.rmsLim0.reTime[9].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[10].s", DumpEntry{top.dig.rmsLim0.reTime[10].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[10].ns", DumpEntry{top.dig.rmsLim0.reTime[10].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[11].s", DumpEntry{top.dig.rmsLim0.reTime[11].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[11].ns", DumpEntry{top.dig.rmsLim0.reTime[11].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[12].s", DumpEntry{top.dig.rmsLim0.reTime[12].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[12].ns", DumpEntry{top.dig.rmsLim0.reTime[12].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[13].s", DumpEntry{top.dig.rmsLim0.reTime[13].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[13].ns", DumpEntry{top.dig.rmsLim0.reTime[13].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[14].s", DumpEntry{top.dig.rmsLim0.reTime[14].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[14].ns", DumpEntry{top.dig.rmsLim0.reTime[14].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[15].s", DumpEntry{top.dig.rmsLim0.reTime[15].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[15].ns", DumpEntry{top.dig.rmsLim0.reTime[15].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[16].s", DumpEntry{top.dig.rmsLim0.reTime[16].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[16].ns", DumpEntry{top.dig.rmsLim0.reTime[16].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[17].s", DumpEntry{top.dig.rmsLim0.reTime[17].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[17].ns", DumpEntry{top.dig.rmsLim0.reTime[17].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[18].s", DumpEntry{top.dig.rmsLim0.reTime[18].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[18].ns", DumpEntry{top.dig.rmsLim0.reTime[18].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[19].s", DumpEntry{top.dig.rmsLim0.reTime[19].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[19].ns", DumpEntry{top.dig.rmsLim0.reTime[19].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[20].s", DumpEntry{top.dig.rmsLim0.reTime[20].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[20].ns", DumpEntry{top.dig.rmsLim0.reTime[20].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[21].s", DumpEntry{top.dig.rmsLim0.reTime[21].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[21].ns", DumpEntry{top.dig.rmsLim0.reTime[21].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[22].s", DumpEntry{top.dig.rmsLim0.reTime[22].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[22].ns", DumpEntry{top.dig.rmsLim0.reTime[22].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[23].s", DumpEntry{top.dig.rmsLim0.reTime[23].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[23].ns", DumpEntry{top.dig.rmsLim0.reTime[23].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[24].s", DumpEntry{top.dig.rmsLim0.reTime[24].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[24].ns", DumpEntry{top.dig.rmsLim0.reTime[24].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[25].s", DumpEntry{top.dig.rmsLim0.reTime[25].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[25].ns", DumpEntry{top.dig.rmsLim0.reTime[25].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[26].s", DumpEntry{top.dig.rmsLim0.reTime[26].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[26].ns", DumpEntry{top.dig.rmsLim0.reTime[26].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[27].s", DumpEntry{top.dig.rmsLim0.reTime[27].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[27].ns", DumpEntry{top.dig.rmsLim0.reTime[27].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[28].s", DumpEntry{top.dig.rmsLim0.reTime[28].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[28].ns", DumpEntry{top.dig.rmsLim0.reTime[28].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[29].s", DumpEntry{top.dig.rmsLim0.reTime[29].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[29].ns", DumpEntry{top.dig.rmsLim0.reTime[29].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[30].s", DumpEntry{top.dig.rmsLim0.reTime[30].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[30].ns", DumpEntry{top.dig.rmsLim0.reTime[30].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[31].s", DumpEntry{top.dig.rmsLim0.reTime[31].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[31].ns", DumpEntry{top.dig.rmsLim0.reTime[31].ns});
        res.insert_or_assign("top.dig.rmsLim1.staticParams", DumpEntry{top.dig.rmsLim1.staticParams});
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.invertIsEn", DumpEntry{top.dig.rmsLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.enableIsEn", DumpEntry{top.dig.rmsLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.latchIsEn", DumpEntry{top.dig.rmsLim1.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.deglitchIsEn", DumpEntry{top.dig.rmsLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.reTimeIsEn", DumpEntry{top.dig.rmsLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.numChannels", DumpEntry{top.dig.rmsLim1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.rmsLim1.data", DumpEntry{top.dig.rmsLim1.data});
        res.insert_or_assign("top.dig.rmsLim1.dataChanged", DumpEntry{top.dig.rmsLim1.dataChanged});
        res.insert_or_assign("top.dig.rmsLim1.invert", DumpEntry{top.dig.rmsLim1.invert});
        res.insert_or_assign("top.dig.rmsLim1.enable", DumpEntry{top.dig.rmsLim1.enable});
        res.insert_or_assign("top.dig.rmsLim1.latch", DumpEntry{top.dig.rmsLim1.latch});
        res.insert_or_assign("top.dig.rmsLim1.rstLatch", DumpEntry{top.dig.rmsLim1.rstLatch});
        res.insert_or_assign("top.dig.rmsLim1.risingInterrupt", DumpEntry{top.dig.rmsLim1.risingInterrupt});
        res.insert_or_assign("top.dig.rmsLim1.fallingInterrupt", DumpEntry{top.dig.rmsLim1.fallingInterrupt});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[0].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[0].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[1].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[1].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[2].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[2].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[3].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[3].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[4].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[4].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[5].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[5].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[6].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[6].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[7].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[7].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[8].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[8].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[9].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[9].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[10].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[10].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[11].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[11].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[12].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[12].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[13].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[13].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[14].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[14].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[15].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[15].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[16].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[16].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[17].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[17].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[18].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[18].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[19].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[19].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[20].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[20].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[21].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[21].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[22].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[22].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[23].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[23].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[24].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[24].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[25].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[25].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[26].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[26].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[27].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[27].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[28].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[28].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[29].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[29].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[30].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[30].val});
        res.insert_or_assign("top.dig.rmsLim1.fastFilterSc[31].val", DumpEntry{top.dig.rmsLim1.fastFilterSc[31].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[0].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[0].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[1].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[1].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[2].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[2].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[3].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[3].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[4].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[4].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[5].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[5].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[6].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[6].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[7].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[7].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[8].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[8].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[9].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[9].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[10].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[10].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[11].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[11].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[12].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[12].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[13].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[13].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[14].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[14].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[15].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[15].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[16].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[16].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[17].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[17].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[18].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[18].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[19].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[19].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[20].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[20].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[21].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[21].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[22].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[22].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[23].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[23].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[24].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[24].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[25].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[25].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[26].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[26].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[27].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[27].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[28].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[28].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[29].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[29].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[30].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[30].val});
        res.insert_or_assign("top.dig.rmsLim1.slowFilterSc[31].val", DumpEntry{top.dig.rmsLim1.slowFilterSc[31].val});
        res.insert_or_assign("top.dig.rmsLim1.reTime[0].s", DumpEntry{top.dig.rmsLim1.reTime[0].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[0].ns", DumpEntry{top.dig.rmsLim1.reTime[0].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[1].s", DumpEntry{top.dig.rmsLim1.reTime[1].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[1].ns", DumpEntry{top.dig.rmsLim1.reTime[1].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[2].s", DumpEntry{top.dig.rmsLim1.reTime[2].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[2].ns", DumpEntry{top.dig.rmsLim1.reTime[2].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[3].s", DumpEntry{top.dig.rmsLim1.reTime[3].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[3].ns", DumpEntry{top.dig.rmsLim1.reTime[3].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[4].s", DumpEntry{top.dig.rmsLim1.reTime[4].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[4].ns", DumpEntry{top.dig.rmsLim1.reTime[4].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[5].s", DumpEntry{top.dig.rmsLim1.reTime[5].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[5].ns", DumpEntry{top.dig.rmsLim1.reTime[5].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[6].s", DumpEntry{top.dig.rmsLim1.reTime[6].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[6].ns", DumpEntry{top.dig.rmsLim1.reTime[6].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[7].s", DumpEntry{top.dig.rmsLim1.reTime[7].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[7].ns", DumpEntry{top.dig.rmsLim1.reTime[7].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[8].s", DumpEntry{top.dig.rmsLim1.reTime[8].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[8].ns", DumpEntry{top.dig.rmsLim1.reTime[8].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[9].s", DumpEntry{top.dig.rmsLim1.reTime[9].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[9].ns", DumpEntry{top.dig.rmsLim1.reTime[9].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[10].s", DumpEntry{top.dig.rmsLim1.reTime[10].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[10].ns", DumpEntry{top.dig.rmsLim1.reTime[10].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[11].s", DumpEntry{top.dig.rmsLim1.reTime[11].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[11].ns", DumpEntry{top.dig.rmsLim1.reTime[11].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[12].s", DumpEntry{top.dig.rmsLim1.reTime[12].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[12].ns", DumpEntry{top.dig.rmsLim1.reTime[12].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[13].s", DumpEntry{top.dig.rmsLim1.reTime[13].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[13].ns", DumpEntry{top.dig.rmsLim1.reTime[13].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[14].s", DumpEntry{top.dig.rmsLim1.reTime[14].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[14].ns", DumpEntry{top.dig.rmsLim1.reTime[14].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[15].s", DumpEntry{top.dig.rmsLim1.reTime[15].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[15].ns", DumpEntry{top.dig.rmsLim1.reTime[15].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[16].s", DumpEntry{top.dig.rmsLim1.reTime[16].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[16].ns", DumpEntry{top.dig.rmsLim1.reTime[16].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[17].s", DumpEntry{top.dig.rmsLim1.reTime[17].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[17].ns", DumpEntry{top.dig.rmsLim1.reTime[17].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[18].s", DumpEntry{top.dig.rmsLim1.reTime[18].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[18].ns", DumpEntry{top.dig.rmsLim1.reTime[18].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[19].s", DumpEntry{top.dig.rmsLim1.reTime[19].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[19].ns", DumpEntry{top.dig.rmsLim1.reTime[19].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[20].s", DumpEntry{top.dig.rmsLim1.reTime[20].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[20].ns", DumpEntry{top.dig.rmsLim1.reTime[20].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[21].s", DumpEntry{top.dig.rmsLim1.reTime[21].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[21].ns", DumpEntry{top.dig.rmsLim1.reTime[21].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[22].s", DumpEntry{top.dig.rmsLim1.reTime[22].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[22].ns", DumpEntry{top.dig.rmsLim1.reTime[22].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[23].s", DumpEntry{top.dig.rmsLim1.reTime[23].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[23].ns", DumpEntry{top.dig.rmsLim1.reTime[23].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[24].s", DumpEntry{top.dig.rmsLim1.reTime[24].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[24].ns", DumpEntry{top.dig.rmsLim1.reTime[24].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[25].s", DumpEntry{top.dig.rmsLim1.reTime[25].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[25].ns", DumpEntry{top.dig.rmsLim1.reTime[25].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[26].s", DumpEntry{top.dig.rmsLim1.reTime[26].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[26].ns", DumpEntry{top.dig.rmsLim1.reTime[26].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[27].s", DumpEntry{top.dig.rmsLim1.reTime[27].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[27].ns", DumpEntry{top.dig.rmsLim1.reTime[27].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[28].s", DumpEntry{top.dig.rmsLim1.reTime[28].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[28].ns", DumpEntry{top.dig.rmsLim1.reTime[28].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[29].s", DumpEntry{top.dig.rmsLim1.reTime[29].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[29].ns", DumpEntry{top.dig.rmsLim1.reTime[29].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[30].s", DumpEntry{top.dig.rmsLim1.reTime[30].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[30].ns", DumpEntry{top.dig.rmsLim1.reTime[30].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[31].s", DumpEntry{top.dig.rmsLim1.reTime[31].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[31].ns", DumpEntry{top.dig.rmsLim1.reTime[31].ns});
        res.insert_or_assign("top.pwm[0].pwm.ctrl", DumpEntry{top.pwm[0].pwm.ctrl});
        res.insert_or_assign("top.pwm[0].pwm.ctrl.enable", DumpEntry{top.pwm[0].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[0].pwm.ctrl.reset", DumpEntry{top.pwm[0].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[0].pwm.carrierBits", DumpEntry{top.pwm[0].pwm.carrierBits});
        res.insert_or_assign("top.pwm[0].pwm.deadtimeBits", DumpEntry{top.pwm[0].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[0].pwm.config", DumpEntry{top.pwm[0].pwm.config});
        res.insert_or_assign("top.pwm[0].pwm.config.updateType", DumpEntry{top.pwm[0].pwm.config.updateType});
        res.insert_or_assign("top.pwm[0].pwm.config.enablePwmCheck", DumpEntry{top.pwm[0].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[0].pwm.config.enableStCheck", DumpEntry{top.pwm[0].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[0].pwm.config.enableValueCheck", DumpEntry{top.pwm[0].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[0].pwm.config.bypassDeadtime", DumpEntry{top.pwm[0].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[0].pwm.config.disableA", DumpEntry{top.pwm[0].pwm.config.disableA});
        res.insert_or_assign("top.pwm[0].pwm.config.disableB", DumpEntry{top.pwm[0].pwm.config.disableB});
        res.insert_or_assign("top.pwm[0].pwm.config.invert", DumpEntry{top.pwm[0].pwm.config.invert});
        res.insert_or_assign("top.pwm[0].pwm.config.decoupleCc1", DumpEntry{top.pwm[0].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[0].pwm.cc0Sc", DumpEntry{top.pwm[0].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[0].pwm.cc1Sc", DumpEntry{top.pwm[0].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[0].pwm.ctrhSc", DumpEntry{top.pwm[0].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[0].pwm.deadtimeSc", DumpEntry{top.pwm[0].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[0].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[0].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[0].pwm.minSwitchTimeSc", DumpEntry{top.pwm[0].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[0].pwm.minModIdxSc", DumpEntry{top.pwm[0].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[0].pwm.maxModIdxSc", DumpEntry{top.pwm[0].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[0].pwm.numberCcErrors", DumpEntry{top.pwm[0].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[1].pwm.ctrl", DumpEntry{top.pwm[1].pwm.ctrl});
        res.insert_or_assign("top.pwm[1].pwm.ctrl.enable", DumpEntry{top.pwm[1].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[1].pwm.ctrl.reset", DumpEntry{top.pwm[1].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[1].pwm.carrierBits", DumpEntry{top.pwm[1].pwm.carrierBits});
        res.insert_or_assign("top.pwm[1].pwm.deadtimeBits", DumpEntry{top.pwm[1].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[1].pwm.config", DumpEntry{top.pwm[1].pwm.config});
        res.insert_or_assign("top.pwm[1].pwm.config.updateType", DumpEntry{top.pwm[1].pwm.config.updateType});
        res.insert_or_assign("top.pwm[1].pwm.config.enablePwmCheck", DumpEntry{top.pwm[1].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[1].pwm.config.enableStCheck", DumpEntry{top.pwm[1].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[1].pwm.config.enableValueCheck", DumpEntry{top.pwm[1].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[1].pwm.config.bypassDeadtime", DumpEntry{top.pwm[1].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[1].pwm.config.disableA", DumpEntry{top.pwm[1].pwm.config.disableA});
        res.insert_or_assign("top.pwm[1].pwm.config.disableB", DumpEntry{top.pwm[1].pwm.config.disableB});
        res.insert_or_assign("top.pwm[1].pwm.config.invert", DumpEntry{top.pwm[1].pwm.config.invert});
        res.insert_or_assign("top.pwm[1].pwm.config.decoupleCc1", DumpEntry{top.pwm[1].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[1].pwm.cc0Sc", DumpEntry{top.pwm[1].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[1].pwm.cc1Sc", DumpEntry{top.pwm[1].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[1].pwm.ctrhSc", DumpEntry{top.pwm[1].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[1].pwm.deadtimeSc", DumpEntry{top.pwm[1].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[1].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[1].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[1].pwm.minSwitchTimeSc", DumpEntry{top.pwm[1].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[1].pwm.minModIdxSc", DumpEntry{top.pwm[1].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[1].pwm.maxModIdxSc", DumpEntry{top.pwm[1].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[1].pwm.numberCcErrors", DumpEntry{top.pwm[1].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[2].pwm.ctrl", DumpEntry{top.pwm[2].pwm.ctrl});
        res.insert_or_assign("top.pwm[2].pwm.ctrl.enable", DumpEntry{top.pwm[2].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[2].pwm.ctrl.reset", DumpEntry{top.pwm[2].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[2].pwm.carrierBits", DumpEntry{top.pwm[2].pwm.carrierBits});
        res.insert_or_assign("top.pwm[2].pwm.deadtimeBits", DumpEntry{top.pwm[2].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[2].pwm.config", DumpEntry{top.pwm[2].pwm.config});
        res.insert_or_assign("top.pwm[2].pwm.config.updateType", DumpEntry{top.pwm[2].pwm.config.updateType});
        res.insert_or_assign("top.pwm[2].pwm.config.enablePwmCheck", DumpEntry{top.pwm[2].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[2].pwm.config.enableStCheck", DumpEntry{top.pwm[2].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[2].pwm.config.enableValueCheck", DumpEntry{top.pwm[2].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[2].pwm.config.bypassDeadtime", DumpEntry{top.pwm[2].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[2].pwm.config.disableA", DumpEntry{top.pwm[2].pwm.config.disableA});
        res.insert_or_assign("top.pwm[2].pwm.config.disableB", DumpEntry{top.pwm[2].pwm.config.disableB});
        res.insert_or_assign("top.pwm[2].pwm.config.invert", DumpEntry{top.pwm[2].pwm.config.invert});
        res.insert_or_assign("top.pwm[2].pwm.config.decoupleCc1", DumpEntry{top.pwm[2].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[2].pwm.cc0Sc", DumpEntry{top.pwm[2].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[2].pwm.cc1Sc", DumpEntry{top.pwm[2].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[2].pwm.ctrhSc", DumpEntry{top.pwm[2].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[2].pwm.deadtimeSc", DumpEntry{top.pwm[2].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[2].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[2].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[2].pwm.minSwitchTimeSc", DumpEntry{top.pwm[2].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[2].pwm.minModIdxSc", DumpEntry{top.pwm[2].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[2].pwm.maxModIdxSc", DumpEntry{top.pwm[2].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[2].pwm.numberCcErrors", DumpEntry{top.pwm[2].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[3].pwm.ctrl", DumpEntry{top.pwm[3].pwm.ctrl});
        res.insert_or_assign("top.pwm[3].pwm.ctrl.enable", DumpEntry{top.pwm[3].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[3].pwm.ctrl.reset", DumpEntry{top.pwm[3].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[3].pwm.carrierBits", DumpEntry{top.pwm[3].pwm.carrierBits});
        res.insert_or_assign("top.pwm[3].pwm.deadtimeBits", DumpEntry{top.pwm[3].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[3].pwm.config", DumpEntry{top.pwm[3].pwm.config});
        res.insert_or_assign("top.pwm[3].pwm.config.updateType", DumpEntry{top.pwm[3].pwm.config.updateType});
        res.insert_or_assign("top.pwm[3].pwm.config.enablePwmCheck", DumpEntry{top.pwm[3].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[3].pwm.config.enableStCheck", DumpEntry{top.pwm[3].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[3].pwm.config.enableValueCheck", DumpEntry{top.pwm[3].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[3].pwm.config.bypassDeadtime", DumpEntry{top.pwm[3].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[3].pwm.config.disableA", DumpEntry{top.pwm[3].pwm.config.disableA});
        res.insert_or_assign("top.pwm[3].pwm.config.disableB", DumpEntry{top.pwm[3].pwm.config.disableB});
        res.insert_or_assign("top.pwm[3].pwm.config.invert", DumpEntry{top.pwm[3].pwm.config.invert});
        res.insert_or_assign("top.pwm[3].pwm.config.decoupleCc1", DumpEntry{top.pwm[3].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[3].pwm.cc0Sc", DumpEntry{top.pwm[3].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[3].pwm.cc1Sc", DumpEntry{top.pwm[3].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[3].pwm.ctrhSc", DumpEntry{top.pwm[3].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[3].pwm.deadtimeSc", DumpEntry{top.pwm[3].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[3].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[3].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[3].pwm.minSwitchTimeSc", DumpEntry{top.pwm[3].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[3].pwm.minModIdxSc", DumpEntry{top.pwm[3].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[3].pwm.maxModIdxSc", DumpEntry{top.pwm[3].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[3].pwm.numberCcErrors", DumpEntry{top.pwm[3].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[4].pwm.ctrl", DumpEntry{top.pwm[4].pwm.ctrl});
        res.insert_or_assign("top.pwm[4].pwm.ctrl.enable", DumpEntry{top.pwm[4].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[4].pwm.ctrl.reset", DumpEntry{top.pwm[4].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[4].pwm.carrierBits", DumpEntry{top.pwm[4].pwm.carrierBits});
        res.insert_or_assign("top.pwm[4].pwm.deadtimeBits", DumpEntry{top.pwm[4].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[4].pwm.config", DumpEntry{top.pwm[4].pwm.config});
        res.insert_or_assign("top.pwm[4].pwm.config.updateType", DumpEntry{top.pwm[4].pwm.config.updateType});
        res.insert_or_assign("top.pwm[4].pwm.config.enablePwmCheck", DumpEntry{top.pwm[4].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[4].pwm.config.enableStCheck", DumpEntry{top.pwm[4].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[4].pwm.config.enableValueCheck", DumpEntry{top.pwm[4].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[4].pwm.config.bypassDeadtime", DumpEntry{top.pwm[4].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[4].pwm.config.disableA", DumpEntry{top.pwm[4].pwm.config.disableA});
        res.insert_or_assign("top.pwm[4].pwm.config.disableB", DumpEntry{top.pwm[4].pwm.config.disableB});
        res.insert_or_assign("top.pwm[4].pwm.config.invert", DumpEntry{top.pwm[4].pwm.config.invert});
        res.insert_or_assign("top.pwm[4].pwm.config.decoupleCc1", DumpEntry{top.pwm[4].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[4].pwm.cc0Sc", DumpEntry{top.pwm[4].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[4].pwm.cc1Sc", DumpEntry{top.pwm[4].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[4].pwm.ctrhSc", DumpEntry{top.pwm[4].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[4].pwm.deadtimeSc", DumpEntry{top.pwm[4].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[4].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[4].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[4].pwm.minSwitchTimeSc", DumpEntry{top.pwm[4].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[4].pwm.minModIdxSc", DumpEntry{top.pwm[4].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[4].pwm.maxModIdxSc", DumpEntry{top.pwm[4].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[4].pwm.numberCcErrors", DumpEntry{top.pwm[4].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[5].pwm.ctrl", DumpEntry{top.pwm[5].pwm.ctrl});
        res.insert_or_assign("top.pwm[5].pwm.ctrl.enable", DumpEntry{top.pwm[5].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[5].pwm.ctrl.reset", DumpEntry{top.pwm[5].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[5].pwm.carrierBits", DumpEntry{top.pwm[5].pwm.carrierBits});
        res.insert_or_assign("top.pwm[5].pwm.deadtimeBits", DumpEntry{top.pwm[5].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[5].pwm.config", DumpEntry{top.pwm[5].pwm.config});
        res.insert_or_assign("top.pwm[5].pwm.config.updateType", DumpEntry{top.pwm[5].pwm.config.updateType});
        res.insert_or_assign("top.pwm[5].pwm.config.enablePwmCheck", DumpEntry{top.pwm[5].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[5].pwm.config.enableStCheck", DumpEntry{top.pwm[5].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[5].pwm.config.enableValueCheck", DumpEntry{top.pwm[5].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[5].pwm.config.bypassDeadtime", DumpEntry{top.pwm[5].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[5].pwm.config.disableA", DumpEntry{top.pwm[5].pwm.config.disableA});
        res.insert_or_assign("top.pwm[5].pwm.config.disableB", DumpEntry{top.pwm[5].pwm.config.disableB});
        res.insert_or_assign("top.pwm[5].pwm.config.invert", DumpEntry{top.pwm[5].pwm.config.invert});
        res.insert_or_assign("top.pwm[5].pwm.config.decoupleCc1", DumpEntry{top.pwm[5].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[5].pwm.cc0Sc", DumpEntry{top.pwm[5].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[5].pwm.cc1Sc", DumpEntry{top.pwm[5].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[5].pwm.ctrhSc", DumpEntry{top.pwm[5].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[5].pwm.deadtimeSc", DumpEntry{top.pwm[5].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[5].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[5].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[5].pwm.minSwitchTimeSc", DumpEntry{top.pwm[5].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[5].pwm.minModIdxSc", DumpEntry{top.pwm[5].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[5].pwm.maxModIdxSc", DumpEntry{top.pwm[5].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[5].pwm.numberCcErrors", DumpEntry{top.pwm[5].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[6].pwm.ctrl", DumpEntry{top.pwm[6].pwm.ctrl});
        res.insert_or_assign("top.pwm[6].pwm.ctrl.enable", DumpEntry{top.pwm[6].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[6].pwm.ctrl.reset", DumpEntry{top.pwm[6].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[6].pwm.carrierBits", DumpEntry{top.pwm[6].pwm.carrierBits});
        res.insert_or_assign("top.pwm[6].pwm.deadtimeBits", DumpEntry{top.pwm[6].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[6].pwm.config", DumpEntry{top.pwm[6].pwm.config});
        res.insert_or_assign("top.pwm[6].pwm.config.updateType", DumpEntry{top.pwm[6].pwm.config.updateType});
        res.insert_or_assign("top.pwm[6].pwm.config.enablePwmCheck", DumpEntry{top.pwm[6].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[6].pwm.config.enableStCheck", DumpEntry{top.pwm[6].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[6].pwm.config.enableValueCheck", DumpEntry{top.pwm[6].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[6].pwm.config.bypassDeadtime", DumpEntry{top.pwm[6].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[6].pwm.config.disableA", DumpEntry{top.pwm[6].pwm.config.disableA});
        res.insert_or_assign("top.pwm[6].pwm.config.disableB", DumpEntry{top.pwm[6].pwm.config.disableB});
        res.insert_or_assign("top.pwm[6].pwm.config.invert", DumpEntry{top.pwm[6].pwm.config.invert});
        res.insert_or_assign("top.pwm[6].pwm.config.decoupleCc1", DumpEntry{top.pwm[6].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[6].pwm.cc0Sc", DumpEntry{top.pwm[6].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[6].pwm.cc1Sc", DumpEntry{top.pwm[6].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[6].pwm.ctrhSc", DumpEntry{top.pwm[6].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[6].pwm.deadtimeSc", DumpEntry{top.pwm[6].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[6].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[6].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[6].pwm.minSwitchTimeSc", DumpEntry{top.pwm[6].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[6].pwm.minModIdxSc", DumpEntry{top.pwm[6].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[6].pwm.maxModIdxSc", DumpEntry{top.pwm[6].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[6].pwm.numberCcErrors", DumpEntry{top.pwm[6].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[7].pwm.ctrl", DumpEntry{top.pwm[7].pwm.ctrl});
        res.insert_or_assign("top.pwm[7].pwm.ctrl.enable", DumpEntry{top.pwm[7].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[7].pwm.ctrl.reset", DumpEntry{top.pwm[7].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[7].pwm.carrierBits", DumpEntry{top.pwm[7].pwm.carrierBits});
        res.insert_or_assign("top.pwm[7].pwm.deadtimeBits", DumpEntry{top.pwm[7].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[7].pwm.config", DumpEntry{top.pwm[7].pwm.config});
        res.insert_or_assign("top.pwm[7].pwm.config.updateType", DumpEntry{top.pwm[7].pwm.config.updateType});
        res.insert_or_assign("top.pwm[7].pwm.config.enablePwmCheck", DumpEntry{top.pwm[7].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[7].pwm.config.enableStCheck", DumpEntry{top.pwm[7].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[7].pwm.config.enableValueCheck", DumpEntry{top.pwm[7].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[7].pwm.config.bypassDeadtime", DumpEntry{top.pwm[7].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[7].pwm.config.disableA", DumpEntry{top.pwm[7].pwm.config.disableA});
        res.insert_or_assign("top.pwm[7].pwm.config.disableB", DumpEntry{top.pwm[7].pwm.config.disableB});
        res.insert_or_assign("top.pwm[7].pwm.config.invert", DumpEntry{top.pwm[7].pwm.config.invert});
        res.insert_or_assign("top.pwm[7].pwm.config.decoupleCc1", DumpEntry{top.pwm[7].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[7].pwm.cc0Sc", DumpEntry{top.pwm[7].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[7].pwm.cc1Sc", DumpEntry{top.pwm[7].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[7].pwm.ctrhSc", DumpEntry{top.pwm[7].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[7].pwm.deadtimeSc", DumpEntry{top.pwm[7].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[7].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[7].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[7].pwm.minSwitchTimeSc", DumpEntry{top.pwm[7].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[7].pwm.minModIdxSc", DumpEntry{top.pwm[7].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[7].pwm.maxModIdxSc", DumpEntry{top.pwm[7].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[7].pwm.numberCcErrors", DumpEntry{top.pwm[7].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[8].pwm.ctrl", DumpEntry{top.pwm[8].pwm.ctrl});
        res.insert_or_assign("top.pwm[8].pwm.ctrl.enable", DumpEntry{top.pwm[8].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[8].pwm.ctrl.reset", DumpEntry{top.pwm[8].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[8].pwm.carrierBits", DumpEntry{top.pwm[8].pwm.carrierBits});
        res.insert_or_assign("top.pwm[8].pwm.deadtimeBits", DumpEntry{top.pwm[8].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[8].pwm.config", DumpEntry{top.pwm[8].pwm.config});
        res.insert_or_assign("top.pwm[8].pwm.config.updateType", DumpEntry{top.pwm[8].pwm.config.updateType});
        res.insert_or_assign("top.pwm[8].pwm.config.enablePwmCheck", DumpEntry{top.pwm[8].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[8].pwm.config.enableStCheck", DumpEntry{top.pwm[8].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[8].pwm.config.enableValueCheck", DumpEntry{top.pwm[8].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[8].pwm.config.bypassDeadtime", DumpEntry{top.pwm[8].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[8].pwm.config.disableA", DumpEntry{top.pwm[8].pwm.config.disableA});
        res.insert_or_assign("top.pwm[8].pwm.config.disableB", DumpEntry{top.pwm[8].pwm.config.disableB});
        res.insert_or_assign("top.pwm[8].pwm.config.invert", DumpEntry{top.pwm[8].pwm.config.invert});
        res.insert_or_assign("top.pwm[8].pwm.config.decoupleCc1", DumpEntry{top.pwm[8].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[8].pwm.cc0Sc", DumpEntry{top.pwm[8].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[8].pwm.cc1Sc", DumpEntry{top.pwm[8].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[8].pwm.ctrhSc", DumpEntry{top.pwm[8].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[8].pwm.deadtimeSc", DumpEntry{top.pwm[8].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[8].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[8].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[8].pwm.minSwitchTimeSc", DumpEntry{top.pwm[8].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[8].pwm.minModIdxSc", DumpEntry{top.pwm[8].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[8].pwm.maxModIdxSc", DumpEntry{top.pwm[8].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[8].pwm.numberCcErrors", DumpEntry{top.pwm[8].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[9].pwm.ctrl", DumpEntry{top.pwm[9].pwm.ctrl});
        res.insert_or_assign("top.pwm[9].pwm.ctrl.enable", DumpEntry{top.pwm[9].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[9].pwm.ctrl.reset", DumpEntry{top.pwm[9].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[9].pwm.carrierBits", DumpEntry{top.pwm[9].pwm.carrierBits});
        res.insert_or_assign("top.pwm[9].pwm.deadtimeBits", DumpEntry{top.pwm[9].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[9].pwm.config", DumpEntry{top.pwm[9].pwm.config});
        res.insert_or_assign("top.pwm[9].pwm.config.updateType", DumpEntry{top.pwm[9].pwm.config.updateType});
        res.insert_or_assign("top.pwm[9].pwm.config.enablePwmCheck", DumpEntry{top.pwm[9].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[9].pwm.config.enableStCheck", DumpEntry{top.pwm[9].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[9].pwm.config.enableValueCheck", DumpEntry{top.pwm[9].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[9].pwm.config.bypassDeadtime", DumpEntry{top.pwm[9].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[9].pwm.config.disableA", DumpEntry{top.pwm[9].pwm.config.disableA});
        res.insert_or_assign("top.pwm[9].pwm.config.disableB", DumpEntry{top.pwm[9].pwm.config.disableB});
        res.insert_or_assign("top.pwm[9].pwm.config.invert", DumpEntry{top.pwm[9].pwm.config.invert});
        res.insert_or_assign("top.pwm[9].pwm.config.decoupleCc1", DumpEntry{top.pwm[9].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[9].pwm.cc0Sc", DumpEntry{top.pwm[9].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[9].pwm.cc1Sc", DumpEntry{top.pwm[9].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[9].pwm.ctrhSc", DumpEntry{top.pwm[9].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[9].pwm.deadtimeSc", DumpEntry{top.pwm[9].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[9].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[9].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[9].pwm.minSwitchTimeSc", DumpEntry{top.pwm[9].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[9].pwm.minModIdxSc", DumpEntry{top.pwm[9].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[9].pwm.maxModIdxSc", DumpEntry{top.pwm[9].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[9].pwm.numberCcErrors", DumpEntry{top.pwm[9].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[10].pwm.ctrl", DumpEntry{top.pwm[10].pwm.ctrl});
        res.insert_or_assign("top.pwm[10].pwm.ctrl.enable", DumpEntry{top.pwm[10].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[10].pwm.ctrl.reset", DumpEntry{top.pwm[10].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[10].pwm.carrierBits", DumpEntry{top.pwm[10].pwm.carrierBits});
        res.insert_or_assign("top.pwm[10].pwm.deadtimeBits", DumpEntry{top.pwm[10].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[10].pwm.config", DumpEntry{top.pwm[10].pwm.config});
        res.insert_or_assign("top.pwm[10].pwm.config.updateType", DumpEntry{top.pwm[10].pwm.config.updateType});
        res.insert_or_assign("top.pwm[10].pwm.config.enablePwmCheck", DumpEntry{top.pwm[10].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[10].pwm.config.enableStCheck", DumpEntry{top.pwm[10].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[10].pwm.config.enableValueCheck", DumpEntry{top.pwm[10].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[10].pwm.config.bypassDeadtime", DumpEntry{top.pwm[10].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[10].pwm.config.disableA", DumpEntry{top.pwm[10].pwm.config.disableA});
        res.insert_or_assign("top.pwm[10].pwm.config.disableB", DumpEntry{top.pwm[10].pwm.config.disableB});
        res.insert_or_assign("top.pwm[10].pwm.config.invert", DumpEntry{top.pwm[10].pwm.config.invert});
        res.insert_or_assign("top.pwm[10].pwm.config.decoupleCc1", DumpEntry{top.pwm[10].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[10].pwm.cc0Sc", DumpEntry{top.pwm[10].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[10].pwm.cc1Sc", DumpEntry{top.pwm[10].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[10].pwm.ctrhSc", DumpEntry{top.pwm[10].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[10].pwm.deadtimeSc", DumpEntry{top.pwm[10].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[10].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[10].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[10].pwm.minSwitchTimeSc", DumpEntry{top.pwm[10].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[10].pwm.minModIdxSc", DumpEntry{top.pwm[10].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[10].pwm.maxModIdxSc", DumpEntry{top.pwm[10].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[10].pwm.numberCcErrors", DumpEntry{top.pwm[10].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[11].pwm.ctrl", DumpEntry{top.pwm[11].pwm.ctrl});
        res.insert_or_assign("top.pwm[11].pwm.ctrl.enable", DumpEntry{top.pwm[11].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[11].pwm.ctrl.reset", DumpEntry{top.pwm[11].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[11].pwm.carrierBits", DumpEntry{top.pwm[11].pwm.carrierBits});
        res.insert_or_assign("top.pwm[11].pwm.deadtimeBits", DumpEntry{top.pwm[11].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[11].pwm.config", DumpEntry{top.pwm[11].pwm.config});
        res.insert_or_assign("top.pwm[11].pwm.config.updateType", DumpEntry{top.pwm[11].pwm.config.updateType});
        res.insert_or_assign("top.pwm[11].pwm.config.enablePwmCheck", DumpEntry{top.pwm[11].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[11].pwm.config.enableStCheck", DumpEntry{top.pwm[11].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[11].pwm.config.enableValueCheck", DumpEntry{top.pwm[11].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[11].pwm.config.bypassDeadtime", DumpEntry{top.pwm[11].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[11].pwm.config.disableA", DumpEntry{top.pwm[11].pwm.config.disableA});
        res.insert_or_assign("top.pwm[11].pwm.config.disableB", DumpEntry{top.pwm[11].pwm.config.disableB});
        res.insert_or_assign("top.pwm[11].pwm.config.invert", DumpEntry{top.pwm[11].pwm.config.invert});
        res.insert_or_assign("top.pwm[11].pwm.config.decoupleCc1", DumpEntry{top.pwm[11].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[11].pwm.cc0Sc", DumpEntry{top.pwm[11].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[11].pwm.cc1Sc", DumpEntry{top.pwm[11].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[11].pwm.ctrhSc", DumpEntry{top.pwm[11].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[11].pwm.deadtimeSc", DumpEntry{top.pwm[11].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[11].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[11].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[11].pwm.minSwitchTimeSc", DumpEntry{top.pwm[11].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[11].pwm.minModIdxSc", DumpEntry{top.pwm[11].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[11].pwm.maxModIdxSc", DumpEntry{top.pwm[11].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[11].pwm.numberCcErrors", DumpEntry{top.pwm[11].pwm.numberCcErrors});
        // top.ddma.trigPl2psLow skipped (Register is not readable).
        // top.ddma.trigPl2psHigh skipped (Register is not readable).
        // top.ddma.trigPs2plLow skipped (Register is not readable).
        // top.ddma.trigPs2plHigh skipped (Register is not readable).
        res.insert_or_assign("top.ddma.tdPl2ps[0].srcAddr", DumpEntry{top.ddma.tdPl2ps[0].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[0].destAddr", DumpEntry{top.ddma.tdPl2ps[0].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[0].wtt", DumpEntry{top.ddma.tdPl2ps[0].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[0].wtt.value", DumpEntry{top.ddma.tdPl2ps[0].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[1].srcAddr", DumpEntry{top.ddma.tdPl2ps[1].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[1].destAddr", DumpEntry{top.ddma.tdPl2ps[1].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[1].wtt", DumpEntry{top.ddma.tdPl2ps[1].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[1].wtt.value", DumpEntry{top.ddma.tdPl2ps[1].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[2].srcAddr", DumpEntry{top.ddma.tdPl2ps[2].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[2].destAddr", DumpEntry{top.ddma.tdPl2ps[2].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[2].wtt", DumpEntry{top.ddma.tdPl2ps[2].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[2].wtt.value", DumpEntry{top.ddma.tdPl2ps[2].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[3].srcAddr", DumpEntry{top.ddma.tdPl2ps[3].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[3].destAddr", DumpEntry{top.ddma.tdPl2ps[3].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[3].wtt", DumpEntry{top.ddma.tdPl2ps[3].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[3].wtt.value", DumpEntry{top.ddma.tdPl2ps[3].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[4].srcAddr", DumpEntry{top.ddma.tdPl2ps[4].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[4].destAddr", DumpEntry{top.ddma.tdPl2ps[4].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[4].wtt", DumpEntry{top.ddma.tdPl2ps[4].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[4].wtt.value", DumpEntry{top.ddma.tdPl2ps[4].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[5].srcAddr", DumpEntry{top.ddma.tdPl2ps[5].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[5].destAddr", DumpEntry{top.ddma.tdPl2ps[5].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[5].wtt", DumpEntry{top.ddma.tdPl2ps[5].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[5].wtt.value", DumpEntry{top.ddma.tdPl2ps[5].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[6].srcAddr", DumpEntry{top.ddma.tdPl2ps[6].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[6].destAddr", DumpEntry{top.ddma.tdPl2ps[6].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[6].wtt", DumpEntry{top.ddma.tdPl2ps[6].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[6].wtt.value", DumpEntry{top.ddma.tdPl2ps[6].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[7].srcAddr", DumpEntry{top.ddma.tdPl2ps[7].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[7].destAddr", DumpEntry{top.ddma.tdPl2ps[7].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[7].wtt", DumpEntry{top.ddma.tdPl2ps[7].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[7].wtt.value", DumpEntry{top.ddma.tdPl2ps[7].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[8].srcAddr", DumpEntry{top.ddma.tdPl2ps[8].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[8].destAddr", DumpEntry{top.ddma.tdPl2ps[8].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[8].wtt", DumpEntry{top.ddma.tdPl2ps[8].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[8].wtt.value", DumpEntry{top.ddma.tdPl2ps[8].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[9].srcAddr", DumpEntry{top.ddma.tdPl2ps[9].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[9].destAddr", DumpEntry{top.ddma.tdPl2ps[9].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[9].wtt", DumpEntry{top.ddma.tdPl2ps[9].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[9].wtt.value", DumpEntry{top.ddma.tdPl2ps[9].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[10].srcAddr", DumpEntry{top.ddma.tdPl2ps[10].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[10].destAddr", DumpEntry{top.ddma.tdPl2ps[10].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[10].wtt", DumpEntry{top.ddma.tdPl2ps[10].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[10].wtt.value", DumpEntry{top.ddma.tdPl2ps[10].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[11].srcAddr", DumpEntry{top.ddma.tdPl2ps[11].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[11].destAddr", DumpEntry{top.ddma.tdPl2ps[11].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[11].wtt", DumpEntry{top.ddma.tdPl2ps[11].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[11].wtt.value", DumpEntry{top.ddma.tdPl2ps[11].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[12].srcAddr", DumpEntry{top.ddma.tdPl2ps[12].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[12].destAddr", DumpEntry{top.ddma.tdPl2ps[12].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[12].wtt", DumpEntry{top.ddma.tdPl2ps[12].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[12].wtt.value", DumpEntry{top.ddma.tdPl2ps[12].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[13].srcAddr", DumpEntry{top.ddma.tdPl2ps[13].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[13].destAddr", DumpEntry{top.ddma.tdPl2ps[13].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[13].wtt", DumpEntry{top.ddma.tdPl2ps[13].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[13].wtt.value", DumpEntry{top.ddma.tdPl2ps[13].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[14].srcAddr", DumpEntry{top.ddma.tdPl2ps[14].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[14].destAddr", DumpEntry{top.ddma.tdPl2ps[14].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[14].wtt", DumpEntry{top.ddma.tdPl2ps[14].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[14].wtt.value", DumpEntry{top.ddma.tdPl2ps[14].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[15].srcAddr", DumpEntry{top.ddma.tdPl2ps[15].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[15].destAddr", DumpEntry{top.ddma.tdPl2ps[15].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[15].wtt", DumpEntry{top.ddma.tdPl2ps[15].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[15].wtt.value", DumpEntry{top.ddma.tdPl2ps[15].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[16].srcAddr", DumpEntry{top.ddma.tdPl2ps[16].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[16].destAddr", DumpEntry{top.ddma.tdPl2ps[16].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[16].wtt", DumpEntry{top.ddma.tdPl2ps[16].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[16].wtt.value", DumpEntry{top.ddma.tdPl2ps[16].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[17].srcAddr", DumpEntry{top.ddma.tdPl2ps[17].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[17].destAddr", DumpEntry{top.ddma.tdPl2ps[17].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[17].wtt", DumpEntry{top.ddma.tdPl2ps[17].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[17].wtt.value", DumpEntry{top.ddma.tdPl2ps[17].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[18].srcAddr", DumpEntry{top.ddma.tdPl2ps[18].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[18].destAddr", DumpEntry{top.ddma.tdPl2ps[18].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[18].wtt", DumpEntry{top.ddma.tdPl2ps[18].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[18].wtt.value", DumpEntry{top.ddma.tdPl2ps[18].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[19].srcAddr", DumpEntry{top.ddma.tdPl2ps[19].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[19].destAddr", DumpEntry{top.ddma.tdPl2ps[19].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[19].wtt", DumpEntry{top.ddma.tdPl2ps[19].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[19].wtt.value", DumpEntry{top.ddma.tdPl2ps[19].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[20].srcAddr", DumpEntry{top.ddma.tdPl2ps[20].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[20].destAddr", DumpEntry{top.ddma.tdPl2ps[20].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[20].wtt", DumpEntry{top.ddma.tdPl2ps[20].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[20].wtt.value", DumpEntry{top.ddma.tdPl2ps[20].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[21].srcAddr", DumpEntry{top.ddma.tdPl2ps[21].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[21].destAddr", DumpEntry{top.ddma.tdPl2ps[21].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[21].wtt", DumpEntry{top.ddma.tdPl2ps[21].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[21].wtt.value", DumpEntry{top.ddma.tdPl2ps[21].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[22].srcAddr", DumpEntry{top.ddma.tdPl2ps[22].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[22].destAddr", DumpEntry{top.ddma.tdPl2ps[22].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[22].wtt", DumpEntry{top.ddma.tdPl2ps[22].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[22].wtt.value", DumpEntry{top.ddma.tdPl2ps[22].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[23].srcAddr", DumpEntry{top.ddma.tdPl2ps[23].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[23].destAddr", DumpEntry{top.ddma.tdPl2ps[23].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[23].wtt", DumpEntry{top.ddma.tdPl2ps[23].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[23].wtt.value", DumpEntry{top.ddma.tdPl2ps[23].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[24].srcAddr", DumpEntry{top.ddma.tdPl2ps[24].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[24].destAddr", DumpEntry{top.ddma.tdPl2ps[24].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[24].wtt", DumpEntry{top.ddma.tdPl2ps[24].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[24].wtt.value", DumpEntry{top.ddma.tdPl2ps[24].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[25].srcAddr", DumpEntry{top.ddma.tdPl2ps[25].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[25].destAddr", DumpEntry{top.ddma.tdPl2ps[25].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[25].wtt", DumpEntry{top.ddma.tdPl2ps[25].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[25].wtt.value", DumpEntry{top.ddma.tdPl2ps[25].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[26].srcAddr", DumpEntry{top.ddma.tdPl2ps[26].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[26].destAddr", DumpEntry{top.ddma.tdPl2ps[26].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[26].wtt", DumpEntry{top.ddma.tdPl2ps[26].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[26].wtt.value", DumpEntry{top.ddma.tdPl2ps[26].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[27].srcAddr", DumpEntry{top.ddma.tdPl2ps[27].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[27].destAddr", DumpEntry{top.ddma.tdPl2ps[27].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[27].wtt", DumpEntry{top.ddma.tdPl2ps[27].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[27].wtt.value", DumpEntry{top.ddma.tdPl2ps[27].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[28].srcAddr", DumpEntry{top.ddma.tdPl2ps[28].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[28].destAddr", DumpEntry{top.ddma.tdPl2ps[28].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[28].wtt", DumpEntry{top.ddma.tdPl2ps[28].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[28].wtt.value", DumpEntry{top.ddma.tdPl2ps[28].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[29].srcAddr", DumpEntry{top.ddma.tdPl2ps[29].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[29].destAddr", DumpEntry{top.ddma.tdPl2ps[29].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[29].wtt", DumpEntry{top.ddma.tdPl2ps[29].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[29].wtt.value", DumpEntry{top.ddma.tdPl2ps[29].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[30].srcAddr", DumpEntry{top.ddma.tdPl2ps[30].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[30].destAddr", DumpEntry{top.ddma.tdPl2ps[30].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[30].wtt", DumpEntry{top.ddma.tdPl2ps[30].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[30].wtt.value", DumpEntry{top.ddma.tdPl2ps[30].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[31].srcAddr", DumpEntry{top.ddma.tdPl2ps[31].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[31].destAddr", DumpEntry{top.ddma.tdPl2ps[31].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[31].wtt", DumpEntry{top.ddma.tdPl2ps[31].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[31].wtt.value", DumpEntry{top.ddma.tdPl2ps[31].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[32].srcAddr", DumpEntry{top.ddma.tdPl2ps[32].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[32].destAddr", DumpEntry{top.ddma.tdPl2ps[32].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[32].wtt", DumpEntry{top.ddma.tdPl2ps[32].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[32].wtt.value", DumpEntry{top.ddma.tdPl2ps[32].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[33].srcAddr", DumpEntry{top.ddma.tdPl2ps[33].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[33].destAddr", DumpEntry{top.ddma.tdPl2ps[33].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[33].wtt", DumpEntry{top.ddma.tdPl2ps[33].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[33].wtt.value", DumpEntry{top.ddma.tdPl2ps[33].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[34].srcAddr", DumpEntry{top.ddma.tdPl2ps[34].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[34].destAddr", DumpEntry{top.ddma.tdPl2ps[34].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[34].wtt", DumpEntry{top.ddma.tdPl2ps[34].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[34].wtt.value", DumpEntry{top.ddma.tdPl2ps[34].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[35].srcAddr", DumpEntry{top.ddma.tdPl2ps[35].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[35].destAddr", DumpEntry{top.ddma.tdPl2ps[35].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[35].wtt", DumpEntry{top.ddma.tdPl2ps[35].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[35].wtt.value", DumpEntry{top.ddma.tdPl2ps[35].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[36].srcAddr", DumpEntry{top.ddma.tdPl2ps[36].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[36].destAddr", DumpEntry{top.ddma.tdPl2ps[36].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[36].wtt", DumpEntry{top.ddma.tdPl2ps[36].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[36].wtt.value", DumpEntry{top.ddma.tdPl2ps[36].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[37].srcAddr", DumpEntry{top.ddma.tdPl2ps[37].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[37].destAddr", DumpEntry{top.ddma.tdPl2ps[37].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[37].wtt", DumpEntry{top.ddma.tdPl2ps[37].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[37].wtt.value", DumpEntry{top.ddma.tdPl2ps[37].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[38].srcAddr", DumpEntry{top.ddma.tdPl2ps[38].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[38].destAddr", DumpEntry{top.ddma.tdPl2ps[38].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[38].wtt", DumpEntry{top.ddma.tdPl2ps[38].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[38].wtt.value", DumpEntry{top.ddma.tdPl2ps[38].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[39].srcAddr", DumpEntry{top.ddma.tdPl2ps[39].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[39].destAddr", DumpEntry{top.ddma.tdPl2ps[39].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[39].wtt", DumpEntry{top.ddma.tdPl2ps[39].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[39].wtt.value", DumpEntry{top.ddma.tdPl2ps[39].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[40].srcAddr", DumpEntry{top.ddma.tdPl2ps[40].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[40].destAddr", DumpEntry{top.ddma.tdPl2ps[40].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[40].wtt", DumpEntry{top.ddma.tdPl2ps[40].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[40].wtt.value", DumpEntry{top.ddma.tdPl2ps[40].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[41].srcAddr", DumpEntry{top.ddma.tdPl2ps[41].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[41].destAddr", DumpEntry{top.ddma.tdPl2ps[41].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[41].wtt", DumpEntry{top.ddma.tdPl2ps[41].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[41].wtt.value", DumpEntry{top.ddma.tdPl2ps[41].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[42].srcAddr", DumpEntry{top.ddma.tdPl2ps[42].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[42].destAddr", DumpEntry{top.ddma.tdPl2ps[42].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[42].wtt", DumpEntry{top.ddma.tdPl2ps[42].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[42].wtt.value", DumpEntry{top.ddma.tdPl2ps[42].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[43].srcAddr", DumpEntry{top.ddma.tdPl2ps[43].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[43].destAddr", DumpEntry{top.ddma.tdPl2ps[43].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[43].wtt", DumpEntry{top.ddma.tdPl2ps[43].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[43].wtt.value", DumpEntry{top.ddma.tdPl2ps[43].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[44].srcAddr", DumpEntry{top.ddma.tdPl2ps[44].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[44].destAddr", DumpEntry{top.ddma.tdPl2ps[44].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[44].wtt", DumpEntry{top.ddma.tdPl2ps[44].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[44].wtt.value", DumpEntry{top.ddma.tdPl2ps[44].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[45].srcAddr", DumpEntry{top.ddma.tdPl2ps[45].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[45].destAddr", DumpEntry{top.ddma.tdPl2ps[45].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[45].wtt", DumpEntry{top.ddma.tdPl2ps[45].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[45].wtt.value", DumpEntry{top.ddma.tdPl2ps[45].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[46].srcAddr", DumpEntry{top.ddma.tdPl2ps[46].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[46].destAddr", DumpEntry{top.ddma.tdPl2ps[46].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[46].wtt", DumpEntry{top.ddma.tdPl2ps[46].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[46].wtt.value", DumpEntry{top.ddma.tdPl2ps[46].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[47].srcAddr", DumpEntry{top.ddma.tdPl2ps[47].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[47].destAddr", DumpEntry{top.ddma.tdPl2ps[47].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[47].wtt", DumpEntry{top.ddma.tdPl2ps[47].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[47].wtt.value", DumpEntry{top.ddma.tdPl2ps[47].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[48].srcAddr", DumpEntry{top.ddma.tdPl2ps[48].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[48].destAddr", DumpEntry{top.ddma.tdPl2ps[48].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[48].wtt", DumpEntry{top.ddma.tdPl2ps[48].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[48].wtt.value", DumpEntry{top.ddma.tdPl2ps[48].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[49].srcAddr", DumpEntry{top.ddma.tdPl2ps[49].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[49].destAddr", DumpEntry{top.ddma.tdPl2ps[49].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[49].wtt", DumpEntry{top.ddma.tdPl2ps[49].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[49].wtt.value", DumpEntry{top.ddma.tdPl2ps[49].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[50].srcAddr", DumpEntry{top.ddma.tdPl2ps[50].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[50].destAddr", DumpEntry{top.ddma.tdPl2ps[50].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[50].wtt", DumpEntry{top.ddma.tdPl2ps[50].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[50].wtt.value", DumpEntry{top.ddma.tdPl2ps[50].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[51].srcAddr", DumpEntry{top.ddma.tdPl2ps[51].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[51].destAddr", DumpEntry{top.ddma.tdPl2ps[51].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[51].wtt", DumpEntry{top.ddma.tdPl2ps[51].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[51].wtt.value", DumpEntry{top.ddma.tdPl2ps[51].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[52].srcAddr", DumpEntry{top.ddma.tdPl2ps[52].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[52].destAddr", DumpEntry{top.ddma.tdPl2ps[52].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[52].wtt", DumpEntry{top.ddma.tdPl2ps[52].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[52].wtt.value", DumpEntry{top.ddma.tdPl2ps[52].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[53].srcAddr", DumpEntry{top.ddma.tdPl2ps[53].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[53].destAddr", DumpEntry{top.ddma.tdPl2ps[53].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[53].wtt", DumpEntry{top.ddma.tdPl2ps[53].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[53].wtt.value", DumpEntry{top.ddma.tdPl2ps[53].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[54].srcAddr", DumpEntry{top.ddma.tdPl2ps[54].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[54].destAddr", DumpEntry{top.ddma.tdPl2ps[54].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[54].wtt", DumpEntry{top.ddma.tdPl2ps[54].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[54].wtt.value", DumpEntry{top.ddma.tdPl2ps[54].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[55].srcAddr", DumpEntry{top.ddma.tdPl2ps[55].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[55].destAddr", DumpEntry{top.ddma.tdPl2ps[55].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[55].wtt", DumpEntry{top.ddma.tdPl2ps[55].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[55].wtt.value", DumpEntry{top.ddma.tdPl2ps[55].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[56].srcAddr", DumpEntry{top.ddma.tdPl2ps[56].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[56].destAddr", DumpEntry{top.ddma.tdPl2ps[56].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[56].wtt", DumpEntry{top.ddma.tdPl2ps[56].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[56].wtt.value", DumpEntry{top.ddma.tdPl2ps[56].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[57].srcAddr", DumpEntry{top.ddma.tdPl2ps[57].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[57].destAddr", DumpEntry{top.ddma.tdPl2ps[57].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[57].wtt", DumpEntry{top.ddma.tdPl2ps[57].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[57].wtt.value", DumpEntry{top.ddma.tdPl2ps[57].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[58].srcAddr", DumpEntry{top.ddma.tdPl2ps[58].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[58].destAddr", DumpEntry{top.ddma.tdPl2ps[58].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[58].wtt", DumpEntry{top.ddma.tdPl2ps[58].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[58].wtt.value", DumpEntry{top.ddma.tdPl2ps[58].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[59].srcAddr", DumpEntry{top.ddma.tdPl2ps[59].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[59].destAddr", DumpEntry{top.ddma.tdPl2ps[59].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[59].wtt", DumpEntry{top.ddma.tdPl2ps[59].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[59].wtt.value", DumpEntry{top.ddma.tdPl2ps[59].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[60].srcAddr", DumpEntry{top.ddma.tdPl2ps[60].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[60].destAddr", DumpEntry{top.ddma.tdPl2ps[60].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[60].wtt", DumpEntry{top.ddma.tdPl2ps[60].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[60].wtt.value", DumpEntry{top.ddma.tdPl2ps[60].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[61].srcAddr", DumpEntry{top.ddma.tdPl2ps[61].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[61].destAddr", DumpEntry{top.ddma.tdPl2ps[61].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[61].wtt", DumpEntry{top.ddma.tdPl2ps[61].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[61].wtt.value", DumpEntry{top.ddma.tdPl2ps[61].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[62].srcAddr", DumpEntry{top.ddma.tdPl2ps[62].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[62].destAddr", DumpEntry{top.ddma.tdPl2ps[62].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[62].wtt", DumpEntry{top.ddma.tdPl2ps[62].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[62].wtt.value", DumpEntry{top.ddma.tdPl2ps[62].wtt.value});
        res.insert_or_assign("top.ddma.tdPl2ps[63].srcAddr", DumpEntry{top.ddma.tdPl2ps[63].srcAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[63].destAddr", DumpEntry{top.ddma.tdPl2ps[63].destAddr});
        res.insert_or_assign("top.ddma.tdPl2ps[63].wtt", DumpEntry{top.ddma.tdPl2ps[63].wtt});
        res.insert_or_assign("top.ddma.tdPl2ps[63].wtt.value", DumpEntry{top.ddma.tdPl2ps[63].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[0].srcAddr", DumpEntry{top.ddma.tdPs2pl[0].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[0].destAddr", DumpEntry{top.ddma.tdPs2pl[0].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[0].wtt", DumpEntry{top.ddma.tdPs2pl[0].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[0].wtt.value", DumpEntry{top.ddma.tdPs2pl[0].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[1].srcAddr", DumpEntry{top.ddma.tdPs2pl[1].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[1].destAddr", DumpEntry{top.ddma.tdPs2pl[1].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[1].wtt", DumpEntry{top.ddma.tdPs2pl[1].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[1].wtt.value", DumpEntry{top.ddma.tdPs2pl[1].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[2].srcAddr", DumpEntry{top.ddma.tdPs2pl[2].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[2].destAddr", DumpEntry{top.ddma.tdPs2pl[2].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[2].wtt", DumpEntry{top.ddma.tdPs2pl[2].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[2].wtt.value", DumpEntry{top.ddma.tdPs2pl[2].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[3].srcAddr", DumpEntry{top.ddma.tdPs2pl[3].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[3].destAddr", DumpEntry{top.ddma.tdPs2pl[3].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[3].wtt", DumpEntry{top.ddma.tdPs2pl[3].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[3].wtt.value", DumpEntry{top.ddma.tdPs2pl[3].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[4].srcAddr", DumpEntry{top.ddma.tdPs2pl[4].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[4].destAddr", DumpEntry{top.ddma.tdPs2pl[4].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[4].wtt", DumpEntry{top.ddma.tdPs2pl[4].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[4].wtt.value", DumpEntry{top.ddma.tdPs2pl[4].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[5].srcAddr", DumpEntry{top.ddma.tdPs2pl[5].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[5].destAddr", DumpEntry{top.ddma.tdPs2pl[5].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[5].wtt", DumpEntry{top.ddma.tdPs2pl[5].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[5].wtt.value", DumpEntry{top.ddma.tdPs2pl[5].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[6].srcAddr", DumpEntry{top.ddma.tdPs2pl[6].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[6].destAddr", DumpEntry{top.ddma.tdPs2pl[6].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[6].wtt", DumpEntry{top.ddma.tdPs2pl[6].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[6].wtt.value", DumpEntry{top.ddma.tdPs2pl[6].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[7].srcAddr", DumpEntry{top.ddma.tdPs2pl[7].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[7].destAddr", DumpEntry{top.ddma.tdPs2pl[7].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[7].wtt", DumpEntry{top.ddma.tdPs2pl[7].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[7].wtt.value", DumpEntry{top.ddma.tdPs2pl[7].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[8].srcAddr", DumpEntry{top.ddma.tdPs2pl[8].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[8].destAddr", DumpEntry{top.ddma.tdPs2pl[8].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[8].wtt", DumpEntry{top.ddma.tdPs2pl[8].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[8].wtt.value", DumpEntry{top.ddma.tdPs2pl[8].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[9].srcAddr", DumpEntry{top.ddma.tdPs2pl[9].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[9].destAddr", DumpEntry{top.ddma.tdPs2pl[9].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[9].wtt", DumpEntry{top.ddma.tdPs2pl[9].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[9].wtt.value", DumpEntry{top.ddma.tdPs2pl[9].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[10].srcAddr", DumpEntry{top.ddma.tdPs2pl[10].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[10].destAddr", DumpEntry{top.ddma.tdPs2pl[10].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[10].wtt", DumpEntry{top.ddma.tdPs2pl[10].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[10].wtt.value", DumpEntry{top.ddma.tdPs2pl[10].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[11].srcAddr", DumpEntry{top.ddma.tdPs2pl[11].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[11].destAddr", DumpEntry{top.ddma.tdPs2pl[11].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[11].wtt", DumpEntry{top.ddma.tdPs2pl[11].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[11].wtt.value", DumpEntry{top.ddma.tdPs2pl[11].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[12].srcAddr", DumpEntry{top.ddma.tdPs2pl[12].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[12].destAddr", DumpEntry{top.ddma.tdPs2pl[12].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[12].wtt", DumpEntry{top.ddma.tdPs2pl[12].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[12].wtt.value", DumpEntry{top.ddma.tdPs2pl[12].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[13].srcAddr", DumpEntry{top.ddma.tdPs2pl[13].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[13].destAddr", DumpEntry{top.ddma.tdPs2pl[13].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[13].wtt", DumpEntry{top.ddma.tdPs2pl[13].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[13].wtt.value", DumpEntry{top.ddma.tdPs2pl[13].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[14].srcAddr", DumpEntry{top.ddma.tdPs2pl[14].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[14].destAddr", DumpEntry{top.ddma.tdPs2pl[14].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[14].wtt", DumpEntry{top.ddma.tdPs2pl[14].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[14].wtt.value", DumpEntry{top.ddma.tdPs2pl[14].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[15].srcAddr", DumpEntry{top.ddma.tdPs2pl[15].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[15].destAddr", DumpEntry{top.ddma.tdPs2pl[15].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[15].wtt", DumpEntry{top.ddma.tdPs2pl[15].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[15].wtt.value", DumpEntry{top.ddma.tdPs2pl[15].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[16].srcAddr", DumpEntry{top.ddma.tdPs2pl[16].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[16].destAddr", DumpEntry{top.ddma.tdPs2pl[16].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[16].wtt", DumpEntry{top.ddma.tdPs2pl[16].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[16].wtt.value", DumpEntry{top.ddma.tdPs2pl[16].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[17].srcAddr", DumpEntry{top.ddma.tdPs2pl[17].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[17].destAddr", DumpEntry{top.ddma.tdPs2pl[17].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[17].wtt", DumpEntry{top.ddma.tdPs2pl[17].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[17].wtt.value", DumpEntry{top.ddma.tdPs2pl[17].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[18].srcAddr", DumpEntry{top.ddma.tdPs2pl[18].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[18].destAddr", DumpEntry{top.ddma.tdPs2pl[18].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[18].wtt", DumpEntry{top.ddma.tdPs2pl[18].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[18].wtt.value", DumpEntry{top.ddma.tdPs2pl[18].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[19].srcAddr", DumpEntry{top.ddma.tdPs2pl[19].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[19].destAddr", DumpEntry{top.ddma.tdPs2pl[19].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[19].wtt", DumpEntry{top.ddma.tdPs2pl[19].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[19].wtt.value", DumpEntry{top.ddma.tdPs2pl[19].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[20].srcAddr", DumpEntry{top.ddma.tdPs2pl[20].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[20].destAddr", DumpEntry{top.ddma.tdPs2pl[20].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[20].wtt", DumpEntry{top.ddma.tdPs2pl[20].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[20].wtt.value", DumpEntry{top.ddma.tdPs2pl[20].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[21].srcAddr", DumpEntry{top.ddma.tdPs2pl[21].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[21].destAddr", DumpEntry{top.ddma.tdPs2pl[21].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[21].wtt", DumpEntry{top.ddma.tdPs2pl[21].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[21].wtt.value", DumpEntry{top.ddma.tdPs2pl[21].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[22].srcAddr", DumpEntry{top.ddma.tdPs2pl[22].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[22].destAddr", DumpEntry{top.ddma.tdPs2pl[22].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[22].wtt", DumpEntry{top.ddma.tdPs2pl[22].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[22].wtt.value", DumpEntry{top.ddma.tdPs2pl[22].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[23].srcAddr", DumpEntry{top.ddma.tdPs2pl[23].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[23].destAddr", DumpEntry{top.ddma.tdPs2pl[23].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[23].wtt", DumpEntry{top.ddma.tdPs2pl[23].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[23].wtt.value", DumpEntry{top.ddma.tdPs2pl[23].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[24].srcAddr", DumpEntry{top.ddma.tdPs2pl[24].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[24].destAddr", DumpEntry{top.ddma.tdPs2pl[24].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[24].wtt", DumpEntry{top.ddma.tdPs2pl[24].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[24].wtt.value", DumpEntry{top.ddma.tdPs2pl[24].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[25].srcAddr", DumpEntry{top.ddma.tdPs2pl[25].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[25].destAddr", DumpEntry{top.ddma.tdPs2pl[25].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[25].wtt", DumpEntry{top.ddma.tdPs2pl[25].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[25].wtt.value", DumpEntry{top.ddma.tdPs2pl[25].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[26].srcAddr", DumpEntry{top.ddma.tdPs2pl[26].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[26].destAddr", DumpEntry{top.ddma.tdPs2pl[26].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[26].wtt", DumpEntry{top.ddma.tdPs2pl[26].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[26].wtt.value", DumpEntry{top.ddma.tdPs2pl[26].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[27].srcAddr", DumpEntry{top.ddma.tdPs2pl[27].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[27].destAddr", DumpEntry{top.ddma.tdPs2pl[27].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[27].wtt", DumpEntry{top.ddma.tdPs2pl[27].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[27].wtt.value", DumpEntry{top.ddma.tdPs2pl[27].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[28].srcAddr", DumpEntry{top.ddma.tdPs2pl[28].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[28].destAddr", DumpEntry{top.ddma.tdPs2pl[28].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[28].wtt", DumpEntry{top.ddma.tdPs2pl[28].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[28].wtt.value", DumpEntry{top.ddma.tdPs2pl[28].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[29].srcAddr", DumpEntry{top.ddma.tdPs2pl[29].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[29].destAddr", DumpEntry{top.ddma.tdPs2pl[29].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[29].wtt", DumpEntry{top.ddma.tdPs2pl[29].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[29].wtt.value", DumpEntry{top.ddma.tdPs2pl[29].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[30].srcAddr", DumpEntry{top.ddma.tdPs2pl[30].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[30].destAddr", DumpEntry{top.ddma.tdPs2pl[30].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[30].wtt", DumpEntry{top.ddma.tdPs2pl[30].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[30].wtt.value", DumpEntry{top.ddma.tdPs2pl[30].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[31].srcAddr", DumpEntry{top.ddma.tdPs2pl[31].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[31].destAddr", DumpEntry{top.ddma.tdPs2pl[31].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[31].wtt", DumpEntry{top.ddma.tdPs2pl[31].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[31].wtt.value", DumpEntry{top.ddma.tdPs2pl[31].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[32].srcAddr", DumpEntry{top.ddma.tdPs2pl[32].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[32].destAddr", DumpEntry{top.ddma.tdPs2pl[32].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[32].wtt", DumpEntry{top.ddma.tdPs2pl[32].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[32].wtt.value", DumpEntry{top.ddma.tdPs2pl[32].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[33].srcAddr", DumpEntry{top.ddma.tdPs2pl[33].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[33].destAddr", DumpEntry{top.ddma.tdPs2pl[33].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[33].wtt", DumpEntry{top.ddma.tdPs2pl[33].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[33].wtt.value", DumpEntry{top.ddma.tdPs2pl[33].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[34].srcAddr", DumpEntry{top.ddma.tdPs2pl[34].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[34].destAddr", DumpEntry{top.ddma.tdPs2pl[34].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[34].wtt", DumpEntry{top.ddma.tdPs2pl[34].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[34].wtt.value", DumpEntry{top.ddma.tdPs2pl[34].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[35].srcAddr", DumpEntry{top.ddma.tdPs2pl[35].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[35].destAddr", DumpEntry{top.ddma.tdPs2pl[35].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[35].wtt", DumpEntry{top.ddma.tdPs2pl[35].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[35].wtt.value", DumpEntry{top.ddma.tdPs2pl[35].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[36].srcAddr", DumpEntry{top.ddma.tdPs2pl[36].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[36].destAddr", DumpEntry{top.ddma.tdPs2pl[36].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[36].wtt", DumpEntry{top.ddma.tdPs2pl[36].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[36].wtt.value", DumpEntry{top.ddma.tdPs2pl[36].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[37].srcAddr", DumpEntry{top.ddma.tdPs2pl[37].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[37].destAddr", DumpEntry{top.ddma.tdPs2pl[37].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[37].wtt", DumpEntry{top.ddma.tdPs2pl[37].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[37].wtt.value", DumpEntry{top.ddma.tdPs2pl[37].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[38].srcAddr", DumpEntry{top.ddma.tdPs2pl[38].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[38].destAddr", DumpEntry{top.ddma.tdPs2pl[38].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[38].wtt", DumpEntry{top.ddma.tdPs2pl[38].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[38].wtt.value", DumpEntry{top.ddma.tdPs2pl[38].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[39].srcAddr", DumpEntry{top.ddma.tdPs2pl[39].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[39].destAddr", DumpEntry{top.ddma.tdPs2pl[39].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[39].wtt", DumpEntry{top.ddma.tdPs2pl[39].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[39].wtt.value", DumpEntry{top.ddma.tdPs2pl[39].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[40].srcAddr", DumpEntry{top.ddma.tdPs2pl[40].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[40].destAddr", DumpEntry{top.ddma.tdPs2pl[40].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[40].wtt", DumpEntry{top.ddma.tdPs2pl[40].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[40].wtt.value", DumpEntry{top.ddma.tdPs2pl[40].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[41].srcAddr", DumpEntry{top.ddma.tdPs2pl[41].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[41].destAddr", DumpEntry{top.ddma.tdPs2pl[41].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[41].wtt", DumpEntry{top.ddma.tdPs2pl[41].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[41].wtt.value", DumpEntry{top.ddma.tdPs2pl[41].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[42].srcAddr", DumpEntry{top.ddma.tdPs2pl[42].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[42].destAddr", DumpEntry{top.ddma.tdPs2pl[42].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[42].wtt", DumpEntry{top.ddma.tdPs2pl[42].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[42].wtt.value", DumpEntry{top.ddma.tdPs2pl[42].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[43].srcAddr", DumpEntry{top.ddma.tdPs2pl[43].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[43].destAddr", DumpEntry{top.ddma.tdPs2pl[43].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[43].wtt", DumpEntry{top.ddma.tdPs2pl[43].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[43].wtt.value", DumpEntry{top.ddma.tdPs2pl[43].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[44].srcAddr", DumpEntry{top.ddma.tdPs2pl[44].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[44].destAddr", DumpEntry{top.ddma.tdPs2pl[44].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[44].wtt", DumpEntry{top.ddma.tdPs2pl[44].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[44].wtt.value", DumpEntry{top.ddma.tdPs2pl[44].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[45].srcAddr", DumpEntry{top.ddma.tdPs2pl[45].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[45].destAddr", DumpEntry{top.ddma.tdPs2pl[45].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[45].wtt", DumpEntry{top.ddma.tdPs2pl[45].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[45].wtt.value", DumpEntry{top.ddma.tdPs2pl[45].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[46].srcAddr", DumpEntry{top.ddma.tdPs2pl[46].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[46].destAddr", DumpEntry{top.ddma.tdPs2pl[46].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[46].wtt", DumpEntry{top.ddma.tdPs2pl[46].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[46].wtt.value", DumpEntry{top.ddma.tdPs2pl[46].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[47].srcAddr", DumpEntry{top.ddma.tdPs2pl[47].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[47].destAddr", DumpEntry{top.ddma.tdPs2pl[47].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[47].wtt", DumpEntry{top.ddma.tdPs2pl[47].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[47].wtt.value", DumpEntry{top.ddma.tdPs2pl[47].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[48].srcAddr", DumpEntry{top.ddma.tdPs2pl[48].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[48].destAddr", DumpEntry{top.ddma.tdPs2pl[48].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[48].wtt", DumpEntry{top.ddma.tdPs2pl[48].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[48].wtt.value", DumpEntry{top.ddma.tdPs2pl[48].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[49].srcAddr", DumpEntry{top.ddma.tdPs2pl[49].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[49].destAddr", DumpEntry{top.ddma.tdPs2pl[49].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[49].wtt", DumpEntry{top.ddma.tdPs2pl[49].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[49].wtt.value", DumpEntry{top.ddma.tdPs2pl[49].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[50].srcAddr", DumpEntry{top.ddma.tdPs2pl[50].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[50].destAddr", DumpEntry{top.ddma.tdPs2pl[50].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[50].wtt", DumpEntry{top.ddma.tdPs2pl[50].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[50].wtt.value", DumpEntry{top.ddma.tdPs2pl[50].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[51].srcAddr", DumpEntry{top.ddma.tdPs2pl[51].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[51].destAddr", DumpEntry{top.ddma.tdPs2pl[51].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[51].wtt", DumpEntry{top.ddma.tdPs2pl[51].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[51].wtt.value", DumpEntry{top.ddma.tdPs2pl[51].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[52].srcAddr", DumpEntry{top.ddma.tdPs2pl[52].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[52].destAddr", DumpEntry{top.ddma.tdPs2pl[52].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[52].wtt", DumpEntry{top.ddma.tdPs2pl[52].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[52].wtt.value", DumpEntry{top.ddma.tdPs2pl[52].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[53].srcAddr", DumpEntry{top.ddma.tdPs2pl[53].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[53].destAddr", DumpEntry{top.ddma.tdPs2pl[53].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[53].wtt", DumpEntry{top.ddma.tdPs2pl[53].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[53].wtt.value", DumpEntry{top.ddma.tdPs2pl[53].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[54].srcAddr", DumpEntry{top.ddma.tdPs2pl[54].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[54].destAddr", DumpEntry{top.ddma.tdPs2pl[54].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[54].wtt", DumpEntry{top.ddma.tdPs2pl[54].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[54].wtt.value", DumpEntry{top.ddma.tdPs2pl[54].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[55].srcAddr", DumpEntry{top.ddma.tdPs2pl[55].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[55].destAddr", DumpEntry{top.ddma.tdPs2pl[55].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[55].wtt", DumpEntry{top.ddma.tdPs2pl[55].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[55].wtt.value", DumpEntry{top.ddma.tdPs2pl[55].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[56].srcAddr", DumpEntry{top.ddma.tdPs2pl[56].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[56].destAddr", DumpEntry{top.ddma.tdPs2pl[56].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[56].wtt", DumpEntry{top.ddma.tdPs2pl[56].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[56].wtt.value", DumpEntry{top.ddma.tdPs2pl[56].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[57].srcAddr", DumpEntry{top.ddma.tdPs2pl[57].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[57].destAddr", DumpEntry{top.ddma.tdPs2pl[57].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[57].wtt", DumpEntry{top.ddma.tdPs2pl[57].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[57].wtt.value", DumpEntry{top.ddma.tdPs2pl[57].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[58].srcAddr", DumpEntry{top.ddma.tdPs2pl[58].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[58].destAddr", DumpEntry{top.ddma.tdPs2pl[58].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[58].wtt", DumpEntry{top.ddma.tdPs2pl[58].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[58].wtt.value", DumpEntry{top.ddma.tdPs2pl[58].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[59].srcAddr", DumpEntry{top.ddma.tdPs2pl[59].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[59].destAddr", DumpEntry{top.ddma.tdPs2pl[59].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[59].wtt", DumpEntry{top.ddma.tdPs2pl[59].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[59].wtt.value", DumpEntry{top.ddma.tdPs2pl[59].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[60].srcAddr", DumpEntry{top.ddma.tdPs2pl[60].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[60].destAddr", DumpEntry{top.ddma.tdPs2pl[60].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[60].wtt", DumpEntry{top.ddma.tdPs2pl[60].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[60].wtt.value", DumpEntry{top.ddma.tdPs2pl[60].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[61].srcAddr", DumpEntry{top.ddma.tdPs2pl[61].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[61].destAddr", DumpEntry{top.ddma.tdPs2pl[61].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[61].wtt", DumpEntry{top.ddma.tdPs2pl[61].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[61].wtt.value", DumpEntry{top.ddma.tdPs2pl[61].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[62].srcAddr", DumpEntry{top.ddma.tdPs2pl[62].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[62].destAddr", DumpEntry{top.ddma.tdPs2pl[62].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[62].wtt", DumpEntry{top.ddma.tdPs2pl[62].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[62].wtt.value", DumpEntry{top.ddma.tdPs2pl[62].wtt.value});
        res.insert_or_assign("top.ddma.tdPs2pl[63].srcAddr", DumpEntry{top.ddma.tdPs2pl[63].srcAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[63].destAddr", DumpEntry{top.ddma.tdPs2pl[63].destAddr});
        res.insert_or_assign("top.ddma.tdPs2pl[63].wtt", DumpEntry{top.ddma.tdPs2pl[63].wtt});
        res.insert_or_assign("top.ddma.tdPs2pl[63].wtt.value", DumpEntry{top.ddma.tdPs2pl[63].wtt.value});
        res.insert_or_assign("top.ddma.errors[0].acp", DumpEntry{top.ddma.errors[0].acp});
        res.insert_or_assign("top.ddma.errors[0].acp.rSlverr", DumpEntry{top.ddma.errors[0].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[0].acp.rDecerr", DumpEntry{top.ddma.errors[0].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[0].acp.wSlverr", DumpEntry{top.ddma.errors[0].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[0].acp.wDecerr", DumpEntry{top.ddma.errors[0].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[0].axil", DumpEntry{top.ddma.errors[0].axil});
        res.insert_or_assign("top.ddma.errors[0].axil.rSlverr", DumpEntry{top.ddma.errors[0].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[0].axil.rDecerr", DumpEntry{top.ddma.errors[0].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[0].axil.wSlverr", DumpEntry{top.ddma.errors[0].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[0].axil.wDecerr", DumpEntry{top.ddma.errors[0].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[1].acp", DumpEntry{top.ddma.errors[1].acp});
        res.insert_or_assign("top.ddma.errors[1].acp.rSlverr", DumpEntry{top.ddma.errors[1].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[1].acp.rDecerr", DumpEntry{top.ddma.errors[1].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[1].acp.wSlverr", DumpEntry{top.ddma.errors[1].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[1].acp.wDecerr", DumpEntry{top.ddma.errors[1].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[1].axil", DumpEntry{top.ddma.errors[1].axil});
        res.insert_or_assign("top.ddma.errors[1].axil.rSlverr", DumpEntry{top.ddma.errors[1].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[1].axil.rDecerr", DumpEntry{top.ddma.errors[1].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[1].axil.wSlverr", DumpEntry{top.ddma.errors[1].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[1].axil.wDecerr", DumpEntry{top.ddma.errors[1].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[2].acp", DumpEntry{top.ddma.errors[2].acp});
        res.insert_or_assign("top.ddma.errors[2].acp.rSlverr", DumpEntry{top.ddma.errors[2].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[2].acp.rDecerr", DumpEntry{top.ddma.errors[2].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[2].acp.wSlverr", DumpEntry{top.ddma.errors[2].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[2].acp.wDecerr", DumpEntry{top.ddma.errors[2].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[2].axil", DumpEntry{top.ddma.errors[2].axil});
        res.insert_or_assign("top.ddma.errors[2].axil.rSlverr", DumpEntry{top.ddma.errors[2].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[2].axil.rDecerr", DumpEntry{top.ddma.errors[2].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[2].axil.wSlverr", DumpEntry{top.ddma.errors[2].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[2].axil.wDecerr", DumpEntry{top.ddma.errors[2].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[3].acp", DumpEntry{top.ddma.errors[3].acp});
        res.insert_or_assign("top.ddma.errors[3].acp.rSlverr", DumpEntry{top.ddma.errors[3].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[3].acp.rDecerr", DumpEntry{top.ddma.errors[3].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[3].acp.wSlverr", DumpEntry{top.ddma.errors[3].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[3].acp.wDecerr", DumpEntry{top.ddma.errors[3].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[3].axil", DumpEntry{top.ddma.errors[3].axil});
        res.insert_or_assign("top.ddma.errors[3].axil.rSlverr", DumpEntry{top.ddma.errors[3].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[3].axil.rDecerr", DumpEntry{top.ddma.errors[3].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[3].axil.wSlverr", DumpEntry{top.ddma.errors[3].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[3].axil.wDecerr", DumpEntry{top.ddma.errors[3].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[4].acp", DumpEntry{top.ddma.errors[4].acp});
        res.insert_or_assign("top.ddma.errors[4].acp.rSlverr", DumpEntry{top.ddma.errors[4].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[4].acp.rDecerr", DumpEntry{top.ddma.errors[4].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[4].acp.wSlverr", DumpEntry{top.ddma.errors[4].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[4].acp.wDecerr", DumpEntry{top.ddma.errors[4].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[4].axil", DumpEntry{top.ddma.errors[4].axil});
        res.insert_or_assign("top.ddma.errors[4].axil.rSlverr", DumpEntry{top.ddma.errors[4].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[4].axil.rDecerr", DumpEntry{top.ddma.errors[4].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[4].axil.wSlverr", DumpEntry{top.ddma.errors[4].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[4].axil.wDecerr", DumpEntry{top.ddma.errors[4].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[5].acp", DumpEntry{top.ddma.errors[5].acp});
        res.insert_or_assign("top.ddma.errors[5].acp.rSlverr", DumpEntry{top.ddma.errors[5].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[5].acp.rDecerr", DumpEntry{top.ddma.errors[5].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[5].acp.wSlverr", DumpEntry{top.ddma.errors[5].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[5].acp.wDecerr", DumpEntry{top.ddma.errors[5].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[5].axil", DumpEntry{top.ddma.errors[5].axil});
        res.insert_or_assign("top.ddma.errors[5].axil.rSlverr", DumpEntry{top.ddma.errors[5].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[5].axil.rDecerr", DumpEntry{top.ddma.errors[5].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[5].axil.wSlverr", DumpEntry{top.ddma.errors[5].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[5].axil.wDecerr", DumpEntry{top.ddma.errors[5].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[6].acp", DumpEntry{top.ddma.errors[6].acp});
        res.insert_or_assign("top.ddma.errors[6].acp.rSlverr", DumpEntry{top.ddma.errors[6].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[6].acp.rDecerr", DumpEntry{top.ddma.errors[6].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[6].acp.wSlverr", DumpEntry{top.ddma.errors[6].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[6].acp.wDecerr", DumpEntry{top.ddma.errors[6].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[6].axil", DumpEntry{top.ddma.errors[6].axil});
        res.insert_or_assign("top.ddma.errors[6].axil.rSlverr", DumpEntry{top.ddma.errors[6].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[6].axil.rDecerr", DumpEntry{top.ddma.errors[6].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[6].axil.wSlverr", DumpEntry{top.ddma.errors[6].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[6].axil.wDecerr", DumpEntry{top.ddma.errors[6].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[7].acp", DumpEntry{top.ddma.errors[7].acp});
        res.insert_or_assign("top.ddma.errors[7].acp.rSlverr", DumpEntry{top.ddma.errors[7].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[7].acp.rDecerr", DumpEntry{top.ddma.errors[7].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[7].acp.wSlverr", DumpEntry{top.ddma.errors[7].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[7].acp.wDecerr", DumpEntry{top.ddma.errors[7].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[7].axil", DumpEntry{top.ddma.errors[7].axil});
        res.insert_or_assign("top.ddma.errors[7].axil.rSlverr", DumpEntry{top.ddma.errors[7].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[7].axil.rDecerr", DumpEntry{top.ddma.errors[7].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[7].axil.wSlverr", DumpEntry{top.ddma.errors[7].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[7].axil.wDecerr", DumpEntry{top.ddma.errors[7].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[8].acp", DumpEntry{top.ddma.errors[8].acp});
        res.insert_or_assign("top.ddma.errors[8].acp.rSlverr", DumpEntry{top.ddma.errors[8].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[8].acp.rDecerr", DumpEntry{top.ddma.errors[8].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[8].acp.wSlverr", DumpEntry{top.ddma.errors[8].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[8].acp.wDecerr", DumpEntry{top.ddma.errors[8].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[8].axil", DumpEntry{top.ddma.errors[8].axil});
        res.insert_or_assign("top.ddma.errors[8].axil.rSlverr", DumpEntry{top.ddma.errors[8].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[8].axil.rDecerr", DumpEntry{top.ddma.errors[8].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[8].axil.wSlverr", DumpEntry{top.ddma.errors[8].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[8].axil.wDecerr", DumpEntry{top.ddma.errors[8].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[9].acp", DumpEntry{top.ddma.errors[9].acp});
        res.insert_or_assign("top.ddma.errors[9].acp.rSlverr", DumpEntry{top.ddma.errors[9].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[9].acp.rDecerr", DumpEntry{top.ddma.errors[9].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[9].acp.wSlverr", DumpEntry{top.ddma.errors[9].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[9].acp.wDecerr", DumpEntry{top.ddma.errors[9].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[9].axil", DumpEntry{top.ddma.errors[9].axil});
        res.insert_or_assign("top.ddma.errors[9].axil.rSlverr", DumpEntry{top.ddma.errors[9].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[9].axil.rDecerr", DumpEntry{top.ddma.errors[9].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[9].axil.wSlverr", DumpEntry{top.ddma.errors[9].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[9].axil.wDecerr", DumpEntry{top.ddma.errors[9].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[10].acp", DumpEntry{top.ddma.errors[10].acp});
        res.insert_or_assign("top.ddma.errors[10].acp.rSlverr", DumpEntry{top.ddma.errors[10].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[10].acp.rDecerr", DumpEntry{top.ddma.errors[10].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[10].acp.wSlverr", DumpEntry{top.ddma.errors[10].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[10].acp.wDecerr", DumpEntry{top.ddma.errors[10].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[10].axil", DumpEntry{top.ddma.errors[10].axil});
        res.insert_or_assign("top.ddma.errors[10].axil.rSlverr", DumpEntry{top.ddma.errors[10].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[10].axil.rDecerr", DumpEntry{top.ddma.errors[10].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[10].axil.wSlverr", DumpEntry{top.ddma.errors[10].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[10].axil.wDecerr", DumpEntry{top.ddma.errors[10].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[11].acp", DumpEntry{top.ddma.errors[11].acp});
        res.insert_or_assign("top.ddma.errors[11].acp.rSlverr", DumpEntry{top.ddma.errors[11].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[11].acp.rDecerr", DumpEntry{top.ddma.errors[11].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[11].acp.wSlverr", DumpEntry{top.ddma.errors[11].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[11].acp.wDecerr", DumpEntry{top.ddma.errors[11].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[11].axil", DumpEntry{top.ddma.errors[11].axil});
        res.insert_or_assign("top.ddma.errors[11].axil.rSlverr", DumpEntry{top.ddma.errors[11].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[11].axil.rDecerr", DumpEntry{top.ddma.errors[11].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[11].axil.wSlverr", DumpEntry{top.ddma.errors[11].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[11].axil.wDecerr", DumpEntry{top.ddma.errors[11].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[12].acp", DumpEntry{top.ddma.errors[12].acp});
        res.insert_or_assign("top.ddma.errors[12].acp.rSlverr", DumpEntry{top.ddma.errors[12].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[12].acp.rDecerr", DumpEntry{top.ddma.errors[12].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[12].acp.wSlverr", DumpEntry{top.ddma.errors[12].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[12].acp.wDecerr", DumpEntry{top.ddma.errors[12].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[12].axil", DumpEntry{top.ddma.errors[12].axil});
        res.insert_or_assign("top.ddma.errors[12].axil.rSlverr", DumpEntry{top.ddma.errors[12].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[12].axil.rDecerr", DumpEntry{top.ddma.errors[12].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[12].axil.wSlverr", DumpEntry{top.ddma.errors[12].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[12].axil.wDecerr", DumpEntry{top.ddma.errors[12].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[13].acp", DumpEntry{top.ddma.errors[13].acp});
        res.insert_or_assign("top.ddma.errors[13].acp.rSlverr", DumpEntry{top.ddma.errors[13].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[13].acp.rDecerr", DumpEntry{top.ddma.errors[13].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[13].acp.wSlverr", DumpEntry{top.ddma.errors[13].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[13].acp.wDecerr", DumpEntry{top.ddma.errors[13].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[13].axil", DumpEntry{top.ddma.errors[13].axil});
        res.insert_or_assign("top.ddma.errors[13].axil.rSlverr", DumpEntry{top.ddma.errors[13].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[13].axil.rDecerr", DumpEntry{top.ddma.errors[13].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[13].axil.wSlverr", DumpEntry{top.ddma.errors[13].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[13].axil.wDecerr", DumpEntry{top.ddma.errors[13].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[14].acp", DumpEntry{top.ddma.errors[14].acp});
        res.insert_or_assign("top.ddma.errors[14].acp.rSlverr", DumpEntry{top.ddma.errors[14].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[14].acp.rDecerr", DumpEntry{top.ddma.errors[14].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[14].acp.wSlverr", DumpEntry{top.ddma.errors[14].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[14].acp.wDecerr", DumpEntry{top.ddma.errors[14].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[14].axil", DumpEntry{top.ddma.errors[14].axil});
        res.insert_or_assign("top.ddma.errors[14].axil.rSlverr", DumpEntry{top.ddma.errors[14].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[14].axil.rDecerr", DumpEntry{top.ddma.errors[14].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[14].axil.wSlverr", DumpEntry{top.ddma.errors[14].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[14].axil.wDecerr", DumpEntry{top.ddma.errors[14].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[15].acp", DumpEntry{top.ddma.errors[15].acp});
        res.insert_or_assign("top.ddma.errors[15].acp.rSlverr", DumpEntry{top.ddma.errors[15].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[15].acp.rDecerr", DumpEntry{top.ddma.errors[15].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[15].acp.wSlverr", DumpEntry{top.ddma.errors[15].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[15].acp.wDecerr", DumpEntry{top.ddma.errors[15].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[15].axil", DumpEntry{top.ddma.errors[15].axil});
        res.insert_or_assign("top.ddma.errors[15].axil.rSlverr", DumpEntry{top.ddma.errors[15].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[15].axil.rDecerr", DumpEntry{top.ddma.errors[15].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[15].axil.wSlverr", DumpEntry{top.ddma.errors[15].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[15].axil.wDecerr", DumpEntry{top.ddma.errors[15].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[16].acp", DumpEntry{top.ddma.errors[16].acp});
        res.insert_or_assign("top.ddma.errors[16].acp.rSlverr", DumpEntry{top.ddma.errors[16].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[16].acp.rDecerr", DumpEntry{top.ddma.errors[16].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[16].acp.wSlverr", DumpEntry{top.ddma.errors[16].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[16].acp.wDecerr", DumpEntry{top.ddma.errors[16].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[16].axil", DumpEntry{top.ddma.errors[16].axil});
        res.insert_or_assign("top.ddma.errors[16].axil.rSlverr", DumpEntry{top.ddma.errors[16].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[16].axil.rDecerr", DumpEntry{top.ddma.errors[16].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[16].axil.wSlverr", DumpEntry{top.ddma.errors[16].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[16].axil.wDecerr", DumpEntry{top.ddma.errors[16].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[17].acp", DumpEntry{top.ddma.errors[17].acp});
        res.insert_or_assign("top.ddma.errors[17].acp.rSlverr", DumpEntry{top.ddma.errors[17].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[17].acp.rDecerr", DumpEntry{top.ddma.errors[17].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[17].acp.wSlverr", DumpEntry{top.ddma.errors[17].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[17].acp.wDecerr", DumpEntry{top.ddma.errors[17].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[17].axil", DumpEntry{top.ddma.errors[17].axil});
        res.insert_or_assign("top.ddma.errors[17].axil.rSlverr", DumpEntry{top.ddma.errors[17].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[17].axil.rDecerr", DumpEntry{top.ddma.errors[17].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[17].axil.wSlverr", DumpEntry{top.ddma.errors[17].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[17].axil.wDecerr", DumpEntry{top.ddma.errors[17].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[18].acp", DumpEntry{top.ddma.errors[18].acp});
        res.insert_or_assign("top.ddma.errors[18].acp.rSlverr", DumpEntry{top.ddma.errors[18].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[18].acp.rDecerr", DumpEntry{top.ddma.errors[18].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[18].acp.wSlverr", DumpEntry{top.ddma.errors[18].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[18].acp.wDecerr", DumpEntry{top.ddma.errors[18].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[18].axil", DumpEntry{top.ddma.errors[18].axil});
        res.insert_or_assign("top.ddma.errors[18].axil.rSlverr", DumpEntry{top.ddma.errors[18].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[18].axil.rDecerr", DumpEntry{top.ddma.errors[18].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[18].axil.wSlverr", DumpEntry{top.ddma.errors[18].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[18].axil.wDecerr", DumpEntry{top.ddma.errors[18].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[19].acp", DumpEntry{top.ddma.errors[19].acp});
        res.insert_or_assign("top.ddma.errors[19].acp.rSlverr", DumpEntry{top.ddma.errors[19].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[19].acp.rDecerr", DumpEntry{top.ddma.errors[19].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[19].acp.wSlverr", DumpEntry{top.ddma.errors[19].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[19].acp.wDecerr", DumpEntry{top.ddma.errors[19].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[19].axil", DumpEntry{top.ddma.errors[19].axil});
        res.insert_or_assign("top.ddma.errors[19].axil.rSlverr", DumpEntry{top.ddma.errors[19].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[19].axil.rDecerr", DumpEntry{top.ddma.errors[19].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[19].axil.wSlverr", DumpEntry{top.ddma.errors[19].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[19].axil.wDecerr", DumpEntry{top.ddma.errors[19].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[20].acp", DumpEntry{top.ddma.errors[20].acp});
        res.insert_or_assign("top.ddma.errors[20].acp.rSlverr", DumpEntry{top.ddma.errors[20].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[20].acp.rDecerr", DumpEntry{top.ddma.errors[20].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[20].acp.wSlverr", DumpEntry{top.ddma.errors[20].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[20].acp.wDecerr", DumpEntry{top.ddma.errors[20].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[20].axil", DumpEntry{top.ddma.errors[20].axil});
        res.insert_or_assign("top.ddma.errors[20].axil.rSlverr", DumpEntry{top.ddma.errors[20].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[20].axil.rDecerr", DumpEntry{top.ddma.errors[20].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[20].axil.wSlverr", DumpEntry{top.ddma.errors[20].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[20].axil.wDecerr", DumpEntry{top.ddma.errors[20].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[21].acp", DumpEntry{top.ddma.errors[21].acp});
        res.insert_or_assign("top.ddma.errors[21].acp.rSlverr", DumpEntry{top.ddma.errors[21].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[21].acp.rDecerr", DumpEntry{top.ddma.errors[21].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[21].acp.wSlverr", DumpEntry{top.ddma.errors[21].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[21].acp.wDecerr", DumpEntry{top.ddma.errors[21].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[21].axil", DumpEntry{top.ddma.errors[21].axil});
        res.insert_or_assign("top.ddma.errors[21].axil.rSlverr", DumpEntry{top.ddma.errors[21].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[21].axil.rDecerr", DumpEntry{top.ddma.errors[21].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[21].axil.wSlverr", DumpEntry{top.ddma.errors[21].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[21].axil.wDecerr", DumpEntry{top.ddma.errors[21].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[22].acp", DumpEntry{top.ddma.errors[22].acp});
        res.insert_or_assign("top.ddma.errors[22].acp.rSlverr", DumpEntry{top.ddma.errors[22].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[22].acp.rDecerr", DumpEntry{top.ddma.errors[22].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[22].acp.wSlverr", DumpEntry{top.ddma.errors[22].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[22].acp.wDecerr", DumpEntry{top.ddma.errors[22].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[22].axil", DumpEntry{top.ddma.errors[22].axil});
        res.insert_or_assign("top.ddma.errors[22].axil.rSlverr", DumpEntry{top.ddma.errors[22].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[22].axil.rDecerr", DumpEntry{top.ddma.errors[22].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[22].axil.wSlverr", DumpEntry{top.ddma.errors[22].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[22].axil.wDecerr", DumpEntry{top.ddma.errors[22].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[23].acp", DumpEntry{top.ddma.errors[23].acp});
        res.insert_or_assign("top.ddma.errors[23].acp.rSlverr", DumpEntry{top.ddma.errors[23].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[23].acp.rDecerr", DumpEntry{top.ddma.errors[23].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[23].acp.wSlverr", DumpEntry{top.ddma.errors[23].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[23].acp.wDecerr", DumpEntry{top.ddma.errors[23].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[23].axil", DumpEntry{top.ddma.errors[23].axil});
        res.insert_or_assign("top.ddma.errors[23].axil.rSlverr", DumpEntry{top.ddma.errors[23].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[23].axil.rDecerr", DumpEntry{top.ddma.errors[23].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[23].axil.wSlverr", DumpEntry{top.ddma.errors[23].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[23].axil.wDecerr", DumpEntry{top.ddma.errors[23].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[24].acp", DumpEntry{top.ddma.errors[24].acp});
        res.insert_or_assign("top.ddma.errors[24].acp.rSlverr", DumpEntry{top.ddma.errors[24].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[24].acp.rDecerr", DumpEntry{top.ddma.errors[24].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[24].acp.wSlverr", DumpEntry{top.ddma.errors[24].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[24].acp.wDecerr", DumpEntry{top.ddma.errors[24].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[24].axil", DumpEntry{top.ddma.errors[24].axil});
        res.insert_or_assign("top.ddma.errors[24].axil.rSlverr", DumpEntry{top.ddma.errors[24].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[24].axil.rDecerr", DumpEntry{top.ddma.errors[24].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[24].axil.wSlverr", DumpEntry{top.ddma.errors[24].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[24].axil.wDecerr", DumpEntry{top.ddma.errors[24].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[25].acp", DumpEntry{top.ddma.errors[25].acp});
        res.insert_or_assign("top.ddma.errors[25].acp.rSlverr", DumpEntry{top.ddma.errors[25].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[25].acp.rDecerr", DumpEntry{top.ddma.errors[25].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[25].acp.wSlverr", DumpEntry{top.ddma.errors[25].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[25].acp.wDecerr", DumpEntry{top.ddma.errors[25].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[25].axil", DumpEntry{top.ddma.errors[25].axil});
        res.insert_or_assign("top.ddma.errors[25].axil.rSlverr", DumpEntry{top.ddma.errors[25].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[25].axil.rDecerr", DumpEntry{top.ddma.errors[25].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[25].axil.wSlverr", DumpEntry{top.ddma.errors[25].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[25].axil.wDecerr", DumpEntry{top.ddma.errors[25].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[26].acp", DumpEntry{top.ddma.errors[26].acp});
        res.insert_or_assign("top.ddma.errors[26].acp.rSlverr", DumpEntry{top.ddma.errors[26].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[26].acp.rDecerr", DumpEntry{top.ddma.errors[26].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[26].acp.wSlverr", DumpEntry{top.ddma.errors[26].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[26].acp.wDecerr", DumpEntry{top.ddma.errors[26].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[26].axil", DumpEntry{top.ddma.errors[26].axil});
        res.insert_or_assign("top.ddma.errors[26].axil.rSlverr", DumpEntry{top.ddma.errors[26].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[26].axil.rDecerr", DumpEntry{top.ddma.errors[26].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[26].axil.wSlverr", DumpEntry{top.ddma.errors[26].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[26].axil.wDecerr", DumpEntry{top.ddma.errors[26].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[27].acp", DumpEntry{top.ddma.errors[27].acp});
        res.insert_or_assign("top.ddma.errors[27].acp.rSlverr", DumpEntry{top.ddma.errors[27].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[27].acp.rDecerr", DumpEntry{top.ddma.errors[27].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[27].acp.wSlverr", DumpEntry{top.ddma.errors[27].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[27].acp.wDecerr", DumpEntry{top.ddma.errors[27].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[27].axil", DumpEntry{top.ddma.errors[27].axil});
        res.insert_or_assign("top.ddma.errors[27].axil.rSlverr", DumpEntry{top.ddma.errors[27].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[27].axil.rDecerr", DumpEntry{top.ddma.errors[27].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[27].axil.wSlverr", DumpEntry{top.ddma.errors[27].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[27].axil.wDecerr", DumpEntry{top.ddma.errors[27].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[28].acp", DumpEntry{top.ddma.errors[28].acp});
        res.insert_or_assign("top.ddma.errors[28].acp.rSlverr", DumpEntry{top.ddma.errors[28].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[28].acp.rDecerr", DumpEntry{top.ddma.errors[28].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[28].acp.wSlverr", DumpEntry{top.ddma.errors[28].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[28].acp.wDecerr", DumpEntry{top.ddma.errors[28].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[28].axil", DumpEntry{top.ddma.errors[28].axil});
        res.insert_or_assign("top.ddma.errors[28].axil.rSlverr", DumpEntry{top.ddma.errors[28].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[28].axil.rDecerr", DumpEntry{top.ddma.errors[28].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[28].axil.wSlverr", DumpEntry{top.ddma.errors[28].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[28].axil.wDecerr", DumpEntry{top.ddma.errors[28].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[29].acp", DumpEntry{top.ddma.errors[29].acp});
        res.insert_or_assign("top.ddma.errors[29].acp.rSlverr", DumpEntry{top.ddma.errors[29].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[29].acp.rDecerr", DumpEntry{top.ddma.errors[29].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[29].acp.wSlverr", DumpEntry{top.ddma.errors[29].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[29].acp.wDecerr", DumpEntry{top.ddma.errors[29].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[29].axil", DumpEntry{top.ddma.errors[29].axil});
        res.insert_or_assign("top.ddma.errors[29].axil.rSlverr", DumpEntry{top.ddma.errors[29].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[29].axil.rDecerr", DumpEntry{top.ddma.errors[29].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[29].axil.wSlverr", DumpEntry{top.ddma.errors[29].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[29].axil.wDecerr", DumpEntry{top.ddma.errors[29].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[30].acp", DumpEntry{top.ddma.errors[30].acp});
        res.insert_or_assign("top.ddma.errors[30].acp.rSlverr", DumpEntry{top.ddma.errors[30].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[30].acp.rDecerr", DumpEntry{top.ddma.errors[30].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[30].acp.wSlverr", DumpEntry{top.ddma.errors[30].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[30].acp.wDecerr", DumpEntry{top.ddma.errors[30].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[30].axil", DumpEntry{top.ddma.errors[30].axil});
        res.insert_or_assign("top.ddma.errors[30].axil.rSlverr", DumpEntry{top.ddma.errors[30].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[30].axil.rDecerr", DumpEntry{top.ddma.errors[30].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[30].axil.wSlverr", DumpEntry{top.ddma.errors[30].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[30].axil.wDecerr", DumpEntry{top.ddma.errors[30].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[31].acp", DumpEntry{top.ddma.errors[31].acp});
        res.insert_or_assign("top.ddma.errors[31].acp.rSlverr", DumpEntry{top.ddma.errors[31].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[31].acp.rDecerr", DumpEntry{top.ddma.errors[31].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[31].acp.wSlverr", DumpEntry{top.ddma.errors[31].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[31].acp.wDecerr", DumpEntry{top.ddma.errors[31].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[31].axil", DumpEntry{top.ddma.errors[31].axil});
        res.insert_or_assign("top.ddma.errors[31].axil.rSlverr", DumpEntry{top.ddma.errors[31].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[31].axil.rDecerr", DumpEntry{top.ddma.errors[31].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[31].axil.wSlverr", DumpEntry{top.ddma.errors[31].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[31].axil.wDecerr", DumpEntry{top.ddma.errors[31].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[32].acp", DumpEntry{top.ddma.errors[32].acp});
        res.insert_or_assign("top.ddma.errors[32].acp.rSlverr", DumpEntry{top.ddma.errors[32].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[32].acp.rDecerr", DumpEntry{top.ddma.errors[32].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[32].acp.wSlverr", DumpEntry{top.ddma.errors[32].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[32].acp.wDecerr", DumpEntry{top.ddma.errors[32].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[32].axil", DumpEntry{top.ddma.errors[32].axil});
        res.insert_or_assign("top.ddma.errors[32].axil.rSlverr", DumpEntry{top.ddma.errors[32].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[32].axil.rDecerr", DumpEntry{top.ddma.errors[32].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[32].axil.wSlverr", DumpEntry{top.ddma.errors[32].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[32].axil.wDecerr", DumpEntry{top.ddma.errors[32].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[33].acp", DumpEntry{top.ddma.errors[33].acp});
        res.insert_or_assign("top.ddma.errors[33].acp.rSlverr", DumpEntry{top.ddma.errors[33].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[33].acp.rDecerr", DumpEntry{top.ddma.errors[33].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[33].acp.wSlverr", DumpEntry{top.ddma.errors[33].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[33].acp.wDecerr", DumpEntry{top.ddma.errors[33].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[33].axil", DumpEntry{top.ddma.errors[33].axil});
        res.insert_or_assign("top.ddma.errors[33].axil.rSlverr", DumpEntry{top.ddma.errors[33].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[33].axil.rDecerr", DumpEntry{top.ddma.errors[33].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[33].axil.wSlverr", DumpEntry{top.ddma.errors[33].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[33].axil.wDecerr", DumpEntry{top.ddma.errors[33].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[34].acp", DumpEntry{top.ddma.errors[34].acp});
        res.insert_or_assign("top.ddma.errors[34].acp.rSlverr", DumpEntry{top.ddma.errors[34].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[34].acp.rDecerr", DumpEntry{top.ddma.errors[34].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[34].acp.wSlverr", DumpEntry{top.ddma.errors[34].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[34].acp.wDecerr", DumpEntry{top.ddma.errors[34].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[34].axil", DumpEntry{top.ddma.errors[34].axil});
        res.insert_or_assign("top.ddma.errors[34].axil.rSlverr", DumpEntry{top.ddma.errors[34].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[34].axil.rDecerr", DumpEntry{top.ddma.errors[34].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[34].axil.wSlverr", DumpEntry{top.ddma.errors[34].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[34].axil.wDecerr", DumpEntry{top.ddma.errors[34].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[35].acp", DumpEntry{top.ddma.errors[35].acp});
        res.insert_or_assign("top.ddma.errors[35].acp.rSlverr", DumpEntry{top.ddma.errors[35].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[35].acp.rDecerr", DumpEntry{top.ddma.errors[35].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[35].acp.wSlverr", DumpEntry{top.ddma.errors[35].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[35].acp.wDecerr", DumpEntry{top.ddma.errors[35].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[35].axil", DumpEntry{top.ddma.errors[35].axil});
        res.insert_or_assign("top.ddma.errors[35].axil.rSlverr", DumpEntry{top.ddma.errors[35].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[35].axil.rDecerr", DumpEntry{top.ddma.errors[35].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[35].axil.wSlverr", DumpEntry{top.ddma.errors[35].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[35].axil.wDecerr", DumpEntry{top.ddma.errors[35].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[36].acp", DumpEntry{top.ddma.errors[36].acp});
        res.insert_or_assign("top.ddma.errors[36].acp.rSlverr", DumpEntry{top.ddma.errors[36].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[36].acp.rDecerr", DumpEntry{top.ddma.errors[36].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[36].acp.wSlverr", DumpEntry{top.ddma.errors[36].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[36].acp.wDecerr", DumpEntry{top.ddma.errors[36].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[36].axil", DumpEntry{top.ddma.errors[36].axil});
        res.insert_or_assign("top.ddma.errors[36].axil.rSlverr", DumpEntry{top.ddma.errors[36].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[36].axil.rDecerr", DumpEntry{top.ddma.errors[36].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[36].axil.wSlverr", DumpEntry{top.ddma.errors[36].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[36].axil.wDecerr", DumpEntry{top.ddma.errors[36].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[37].acp", DumpEntry{top.ddma.errors[37].acp});
        res.insert_or_assign("top.ddma.errors[37].acp.rSlverr", DumpEntry{top.ddma.errors[37].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[37].acp.rDecerr", DumpEntry{top.ddma.errors[37].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[37].acp.wSlverr", DumpEntry{top.ddma.errors[37].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[37].acp.wDecerr", DumpEntry{top.ddma.errors[37].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[37].axil", DumpEntry{top.ddma.errors[37].axil});
        res.insert_or_assign("top.ddma.errors[37].axil.rSlverr", DumpEntry{top.ddma.errors[37].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[37].axil.rDecerr", DumpEntry{top.ddma.errors[37].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[37].axil.wSlverr", DumpEntry{top.ddma.errors[37].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[37].axil.wDecerr", DumpEntry{top.ddma.errors[37].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[38].acp", DumpEntry{top.ddma.errors[38].acp});
        res.insert_or_assign("top.ddma.errors[38].acp.rSlverr", DumpEntry{top.ddma.errors[38].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[38].acp.rDecerr", DumpEntry{top.ddma.errors[38].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[38].acp.wSlverr", DumpEntry{top.ddma.errors[38].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[38].acp.wDecerr", DumpEntry{top.ddma.errors[38].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[38].axil", DumpEntry{top.ddma.errors[38].axil});
        res.insert_or_assign("top.ddma.errors[38].axil.rSlverr", DumpEntry{top.ddma.errors[38].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[38].axil.rDecerr", DumpEntry{top.ddma.errors[38].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[38].axil.wSlverr", DumpEntry{top.ddma.errors[38].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[38].axil.wDecerr", DumpEntry{top.ddma.errors[38].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[39].acp", DumpEntry{top.ddma.errors[39].acp});
        res.insert_or_assign("top.ddma.errors[39].acp.rSlverr", DumpEntry{top.ddma.errors[39].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[39].acp.rDecerr", DumpEntry{top.ddma.errors[39].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[39].acp.wSlverr", DumpEntry{top.ddma.errors[39].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[39].acp.wDecerr", DumpEntry{top.ddma.errors[39].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[39].axil", DumpEntry{top.ddma.errors[39].axil});
        res.insert_or_assign("top.ddma.errors[39].axil.rSlverr", DumpEntry{top.ddma.errors[39].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[39].axil.rDecerr", DumpEntry{top.ddma.errors[39].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[39].axil.wSlverr", DumpEntry{top.ddma.errors[39].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[39].axil.wDecerr", DumpEntry{top.ddma.errors[39].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[40].acp", DumpEntry{top.ddma.errors[40].acp});
        res.insert_or_assign("top.ddma.errors[40].acp.rSlverr", DumpEntry{top.ddma.errors[40].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[40].acp.rDecerr", DumpEntry{top.ddma.errors[40].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[40].acp.wSlverr", DumpEntry{top.ddma.errors[40].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[40].acp.wDecerr", DumpEntry{top.ddma.errors[40].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[40].axil", DumpEntry{top.ddma.errors[40].axil});
        res.insert_or_assign("top.ddma.errors[40].axil.rSlverr", DumpEntry{top.ddma.errors[40].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[40].axil.rDecerr", DumpEntry{top.ddma.errors[40].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[40].axil.wSlverr", DumpEntry{top.ddma.errors[40].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[40].axil.wDecerr", DumpEntry{top.ddma.errors[40].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[41].acp", DumpEntry{top.ddma.errors[41].acp});
        res.insert_or_assign("top.ddma.errors[41].acp.rSlverr", DumpEntry{top.ddma.errors[41].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[41].acp.rDecerr", DumpEntry{top.ddma.errors[41].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[41].acp.wSlverr", DumpEntry{top.ddma.errors[41].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[41].acp.wDecerr", DumpEntry{top.ddma.errors[41].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[41].axil", DumpEntry{top.ddma.errors[41].axil});
        res.insert_or_assign("top.ddma.errors[41].axil.rSlverr", DumpEntry{top.ddma.errors[41].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[41].axil.rDecerr", DumpEntry{top.ddma.errors[41].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[41].axil.wSlverr", DumpEntry{top.ddma.errors[41].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[41].axil.wDecerr", DumpEntry{top.ddma.errors[41].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[42].acp", DumpEntry{top.ddma.errors[42].acp});
        res.insert_or_assign("top.ddma.errors[42].acp.rSlverr", DumpEntry{top.ddma.errors[42].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[42].acp.rDecerr", DumpEntry{top.ddma.errors[42].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[42].acp.wSlverr", DumpEntry{top.ddma.errors[42].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[42].acp.wDecerr", DumpEntry{top.ddma.errors[42].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[42].axil", DumpEntry{top.ddma.errors[42].axil});
        res.insert_or_assign("top.ddma.errors[42].axil.rSlverr", DumpEntry{top.ddma.errors[42].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[42].axil.rDecerr", DumpEntry{top.ddma.errors[42].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[42].axil.wSlverr", DumpEntry{top.ddma.errors[42].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[42].axil.wDecerr", DumpEntry{top.ddma.errors[42].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[43].acp", DumpEntry{top.ddma.errors[43].acp});
        res.insert_or_assign("top.ddma.errors[43].acp.rSlverr", DumpEntry{top.ddma.errors[43].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[43].acp.rDecerr", DumpEntry{top.ddma.errors[43].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[43].acp.wSlverr", DumpEntry{top.ddma.errors[43].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[43].acp.wDecerr", DumpEntry{top.ddma.errors[43].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[43].axil", DumpEntry{top.ddma.errors[43].axil});
        res.insert_or_assign("top.ddma.errors[43].axil.rSlverr", DumpEntry{top.ddma.errors[43].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[43].axil.rDecerr", DumpEntry{top.ddma.errors[43].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[43].axil.wSlverr", DumpEntry{top.ddma.errors[43].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[43].axil.wDecerr", DumpEntry{top.ddma.errors[43].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[44].acp", DumpEntry{top.ddma.errors[44].acp});
        res.insert_or_assign("top.ddma.errors[44].acp.rSlverr", DumpEntry{top.ddma.errors[44].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[44].acp.rDecerr", DumpEntry{top.ddma.errors[44].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[44].acp.wSlverr", DumpEntry{top.ddma.errors[44].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[44].acp.wDecerr", DumpEntry{top.ddma.errors[44].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[44].axil", DumpEntry{top.ddma.errors[44].axil});
        res.insert_or_assign("top.ddma.errors[44].axil.rSlverr", DumpEntry{top.ddma.errors[44].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[44].axil.rDecerr", DumpEntry{top.ddma.errors[44].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[44].axil.wSlverr", DumpEntry{top.ddma.errors[44].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[44].axil.wDecerr", DumpEntry{top.ddma.errors[44].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[45].acp", DumpEntry{top.ddma.errors[45].acp});
        res.insert_or_assign("top.ddma.errors[45].acp.rSlverr", DumpEntry{top.ddma.errors[45].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[45].acp.rDecerr", DumpEntry{top.ddma.errors[45].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[45].acp.wSlverr", DumpEntry{top.ddma.errors[45].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[45].acp.wDecerr", DumpEntry{top.ddma.errors[45].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[45].axil", DumpEntry{top.ddma.errors[45].axil});
        res.insert_or_assign("top.ddma.errors[45].axil.rSlverr", DumpEntry{top.ddma.errors[45].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[45].axil.rDecerr", DumpEntry{top.ddma.errors[45].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[45].axil.wSlverr", DumpEntry{top.ddma.errors[45].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[45].axil.wDecerr", DumpEntry{top.ddma.errors[45].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[46].acp", DumpEntry{top.ddma.errors[46].acp});
        res.insert_or_assign("top.ddma.errors[46].acp.rSlverr", DumpEntry{top.ddma.errors[46].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[46].acp.rDecerr", DumpEntry{top.ddma.errors[46].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[46].acp.wSlverr", DumpEntry{top.ddma.errors[46].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[46].acp.wDecerr", DumpEntry{top.ddma.errors[46].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[46].axil", DumpEntry{top.ddma.errors[46].axil});
        res.insert_or_assign("top.ddma.errors[46].axil.rSlverr", DumpEntry{top.ddma.errors[46].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[46].axil.rDecerr", DumpEntry{top.ddma.errors[46].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[46].axil.wSlverr", DumpEntry{top.ddma.errors[46].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[46].axil.wDecerr", DumpEntry{top.ddma.errors[46].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[47].acp", DumpEntry{top.ddma.errors[47].acp});
        res.insert_or_assign("top.ddma.errors[47].acp.rSlverr", DumpEntry{top.ddma.errors[47].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[47].acp.rDecerr", DumpEntry{top.ddma.errors[47].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[47].acp.wSlverr", DumpEntry{top.ddma.errors[47].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[47].acp.wDecerr", DumpEntry{top.ddma.errors[47].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[47].axil", DumpEntry{top.ddma.errors[47].axil});
        res.insert_or_assign("top.ddma.errors[47].axil.rSlverr", DumpEntry{top.ddma.errors[47].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[47].axil.rDecerr", DumpEntry{top.ddma.errors[47].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[47].axil.wSlverr", DumpEntry{top.ddma.errors[47].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[47].axil.wDecerr", DumpEntry{top.ddma.errors[47].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[48].acp", DumpEntry{top.ddma.errors[48].acp});
        res.insert_or_assign("top.ddma.errors[48].acp.rSlverr", DumpEntry{top.ddma.errors[48].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[48].acp.rDecerr", DumpEntry{top.ddma.errors[48].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[48].acp.wSlverr", DumpEntry{top.ddma.errors[48].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[48].acp.wDecerr", DumpEntry{top.ddma.errors[48].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[48].axil", DumpEntry{top.ddma.errors[48].axil});
        res.insert_or_assign("top.ddma.errors[48].axil.rSlverr", DumpEntry{top.ddma.errors[48].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[48].axil.rDecerr", DumpEntry{top.ddma.errors[48].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[48].axil.wSlverr", DumpEntry{top.ddma.errors[48].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[48].axil.wDecerr", DumpEntry{top.ddma.errors[48].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[49].acp", DumpEntry{top.ddma.errors[49].acp});
        res.insert_or_assign("top.ddma.errors[49].acp.rSlverr", DumpEntry{top.ddma.errors[49].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[49].acp.rDecerr", DumpEntry{top.ddma.errors[49].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[49].acp.wSlverr", DumpEntry{top.ddma.errors[49].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[49].acp.wDecerr", DumpEntry{top.ddma.errors[49].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[49].axil", DumpEntry{top.ddma.errors[49].axil});
        res.insert_or_assign("top.ddma.errors[49].axil.rSlverr", DumpEntry{top.ddma.errors[49].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[49].axil.rDecerr", DumpEntry{top.ddma.errors[49].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[49].axil.wSlverr", DumpEntry{top.ddma.errors[49].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[49].axil.wDecerr", DumpEntry{top.ddma.errors[49].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[50].acp", DumpEntry{top.ddma.errors[50].acp});
        res.insert_or_assign("top.ddma.errors[50].acp.rSlverr", DumpEntry{top.ddma.errors[50].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[50].acp.rDecerr", DumpEntry{top.ddma.errors[50].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[50].acp.wSlverr", DumpEntry{top.ddma.errors[50].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[50].acp.wDecerr", DumpEntry{top.ddma.errors[50].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[50].axil", DumpEntry{top.ddma.errors[50].axil});
        res.insert_or_assign("top.ddma.errors[50].axil.rSlverr", DumpEntry{top.ddma.errors[50].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[50].axil.rDecerr", DumpEntry{top.ddma.errors[50].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[50].axil.wSlverr", DumpEntry{top.ddma.errors[50].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[50].axil.wDecerr", DumpEntry{top.ddma.errors[50].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[51].acp", DumpEntry{top.ddma.errors[51].acp});
        res.insert_or_assign("top.ddma.errors[51].acp.rSlverr", DumpEntry{top.ddma.errors[51].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[51].acp.rDecerr", DumpEntry{top.ddma.errors[51].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[51].acp.wSlverr", DumpEntry{top.ddma.errors[51].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[51].acp.wDecerr", DumpEntry{top.ddma.errors[51].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[51].axil", DumpEntry{top.ddma.errors[51].axil});
        res.insert_or_assign("top.ddma.errors[51].axil.rSlverr", DumpEntry{top.ddma.errors[51].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[51].axil.rDecerr", DumpEntry{top.ddma.errors[51].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[51].axil.wSlverr", DumpEntry{top.ddma.errors[51].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[51].axil.wDecerr", DumpEntry{top.ddma.errors[51].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[52].acp", DumpEntry{top.ddma.errors[52].acp});
        res.insert_or_assign("top.ddma.errors[52].acp.rSlverr", DumpEntry{top.ddma.errors[52].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[52].acp.rDecerr", DumpEntry{top.ddma.errors[52].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[52].acp.wSlverr", DumpEntry{top.ddma.errors[52].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[52].acp.wDecerr", DumpEntry{top.ddma.errors[52].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[52].axil", DumpEntry{top.ddma.errors[52].axil});
        res.insert_or_assign("top.ddma.errors[52].axil.rSlverr", DumpEntry{top.ddma.errors[52].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[52].axil.rDecerr", DumpEntry{top.ddma.errors[52].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[52].axil.wSlverr", DumpEntry{top.ddma.errors[52].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[52].axil.wDecerr", DumpEntry{top.ddma.errors[52].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[53].acp", DumpEntry{top.ddma.errors[53].acp});
        res.insert_or_assign("top.ddma.errors[53].acp.rSlverr", DumpEntry{top.ddma.errors[53].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[53].acp.rDecerr", DumpEntry{top.ddma.errors[53].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[53].acp.wSlverr", DumpEntry{top.ddma.errors[53].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[53].acp.wDecerr", DumpEntry{top.ddma.errors[53].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[53].axil", DumpEntry{top.ddma.errors[53].axil});
        res.insert_or_assign("top.ddma.errors[53].axil.rSlverr", DumpEntry{top.ddma.errors[53].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[53].axil.rDecerr", DumpEntry{top.ddma.errors[53].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[53].axil.wSlverr", DumpEntry{top.ddma.errors[53].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[53].axil.wDecerr", DumpEntry{top.ddma.errors[53].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[54].acp", DumpEntry{top.ddma.errors[54].acp});
        res.insert_or_assign("top.ddma.errors[54].acp.rSlverr", DumpEntry{top.ddma.errors[54].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[54].acp.rDecerr", DumpEntry{top.ddma.errors[54].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[54].acp.wSlverr", DumpEntry{top.ddma.errors[54].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[54].acp.wDecerr", DumpEntry{top.ddma.errors[54].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[54].axil", DumpEntry{top.ddma.errors[54].axil});
        res.insert_or_assign("top.ddma.errors[54].axil.rSlverr", DumpEntry{top.ddma.errors[54].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[54].axil.rDecerr", DumpEntry{top.ddma.errors[54].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[54].axil.wSlverr", DumpEntry{top.ddma.errors[54].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[54].axil.wDecerr", DumpEntry{top.ddma.errors[54].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[55].acp", DumpEntry{top.ddma.errors[55].acp});
        res.insert_or_assign("top.ddma.errors[55].acp.rSlverr", DumpEntry{top.ddma.errors[55].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[55].acp.rDecerr", DumpEntry{top.ddma.errors[55].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[55].acp.wSlverr", DumpEntry{top.ddma.errors[55].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[55].acp.wDecerr", DumpEntry{top.ddma.errors[55].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[55].axil", DumpEntry{top.ddma.errors[55].axil});
        res.insert_or_assign("top.ddma.errors[55].axil.rSlverr", DumpEntry{top.ddma.errors[55].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[55].axil.rDecerr", DumpEntry{top.ddma.errors[55].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[55].axil.wSlverr", DumpEntry{top.ddma.errors[55].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[55].axil.wDecerr", DumpEntry{top.ddma.errors[55].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[56].acp", DumpEntry{top.ddma.errors[56].acp});
        res.insert_or_assign("top.ddma.errors[56].acp.rSlverr", DumpEntry{top.ddma.errors[56].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[56].acp.rDecerr", DumpEntry{top.ddma.errors[56].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[56].acp.wSlverr", DumpEntry{top.ddma.errors[56].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[56].acp.wDecerr", DumpEntry{top.ddma.errors[56].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[56].axil", DumpEntry{top.ddma.errors[56].axil});
        res.insert_or_assign("top.ddma.errors[56].axil.rSlverr", DumpEntry{top.ddma.errors[56].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[56].axil.rDecerr", DumpEntry{top.ddma.errors[56].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[56].axil.wSlverr", DumpEntry{top.ddma.errors[56].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[56].axil.wDecerr", DumpEntry{top.ddma.errors[56].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[57].acp", DumpEntry{top.ddma.errors[57].acp});
        res.insert_or_assign("top.ddma.errors[57].acp.rSlverr", DumpEntry{top.ddma.errors[57].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[57].acp.rDecerr", DumpEntry{top.ddma.errors[57].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[57].acp.wSlverr", DumpEntry{top.ddma.errors[57].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[57].acp.wDecerr", DumpEntry{top.ddma.errors[57].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[57].axil", DumpEntry{top.ddma.errors[57].axil});
        res.insert_or_assign("top.ddma.errors[57].axil.rSlverr", DumpEntry{top.ddma.errors[57].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[57].axil.rDecerr", DumpEntry{top.ddma.errors[57].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[57].axil.wSlverr", DumpEntry{top.ddma.errors[57].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[57].axil.wDecerr", DumpEntry{top.ddma.errors[57].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[58].acp", DumpEntry{top.ddma.errors[58].acp});
        res.insert_or_assign("top.ddma.errors[58].acp.rSlverr", DumpEntry{top.ddma.errors[58].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[58].acp.rDecerr", DumpEntry{top.ddma.errors[58].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[58].acp.wSlverr", DumpEntry{top.ddma.errors[58].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[58].acp.wDecerr", DumpEntry{top.ddma.errors[58].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[58].axil", DumpEntry{top.ddma.errors[58].axil});
        res.insert_or_assign("top.ddma.errors[58].axil.rSlverr", DumpEntry{top.ddma.errors[58].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[58].axil.rDecerr", DumpEntry{top.ddma.errors[58].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[58].axil.wSlverr", DumpEntry{top.ddma.errors[58].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[58].axil.wDecerr", DumpEntry{top.ddma.errors[58].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[59].acp", DumpEntry{top.ddma.errors[59].acp});
        res.insert_or_assign("top.ddma.errors[59].acp.rSlverr", DumpEntry{top.ddma.errors[59].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[59].acp.rDecerr", DumpEntry{top.ddma.errors[59].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[59].acp.wSlverr", DumpEntry{top.ddma.errors[59].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[59].acp.wDecerr", DumpEntry{top.ddma.errors[59].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[59].axil", DumpEntry{top.ddma.errors[59].axil});
        res.insert_or_assign("top.ddma.errors[59].axil.rSlverr", DumpEntry{top.ddma.errors[59].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[59].axil.rDecerr", DumpEntry{top.ddma.errors[59].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[59].axil.wSlverr", DumpEntry{top.ddma.errors[59].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[59].axil.wDecerr", DumpEntry{top.ddma.errors[59].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[60].acp", DumpEntry{top.ddma.errors[60].acp});
        res.insert_or_assign("top.ddma.errors[60].acp.rSlverr", DumpEntry{top.ddma.errors[60].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[60].acp.rDecerr", DumpEntry{top.ddma.errors[60].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[60].acp.wSlverr", DumpEntry{top.ddma.errors[60].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[60].acp.wDecerr", DumpEntry{top.ddma.errors[60].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[60].axil", DumpEntry{top.ddma.errors[60].axil});
        res.insert_or_assign("top.ddma.errors[60].axil.rSlverr", DumpEntry{top.ddma.errors[60].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[60].axil.rDecerr", DumpEntry{top.ddma.errors[60].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[60].axil.wSlverr", DumpEntry{top.ddma.errors[60].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[60].axil.wDecerr", DumpEntry{top.ddma.errors[60].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[61].acp", DumpEntry{top.ddma.errors[61].acp});
        res.insert_or_assign("top.ddma.errors[61].acp.rSlverr", DumpEntry{top.ddma.errors[61].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[61].acp.rDecerr", DumpEntry{top.ddma.errors[61].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[61].acp.wSlverr", DumpEntry{top.ddma.errors[61].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[61].acp.wDecerr", DumpEntry{top.ddma.errors[61].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[61].axil", DumpEntry{top.ddma.errors[61].axil});
        res.insert_or_assign("top.ddma.errors[61].axil.rSlverr", DumpEntry{top.ddma.errors[61].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[61].axil.rDecerr", DumpEntry{top.ddma.errors[61].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[61].axil.wSlverr", DumpEntry{top.ddma.errors[61].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[61].axil.wDecerr", DumpEntry{top.ddma.errors[61].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[62].acp", DumpEntry{top.ddma.errors[62].acp});
        res.insert_or_assign("top.ddma.errors[62].acp.rSlverr", DumpEntry{top.ddma.errors[62].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[62].acp.rDecerr", DumpEntry{top.ddma.errors[62].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[62].acp.wSlverr", DumpEntry{top.ddma.errors[62].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[62].acp.wDecerr", DumpEntry{top.ddma.errors[62].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[62].axil", DumpEntry{top.ddma.errors[62].axil});
        res.insert_or_assign("top.ddma.errors[62].axil.rSlverr", DumpEntry{top.ddma.errors[62].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[62].axil.rDecerr", DumpEntry{top.ddma.errors[62].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[62].axil.wSlverr", DumpEntry{top.ddma.errors[62].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[62].axil.wDecerr", DumpEntry{top.ddma.errors[62].axil.wDecerr});
        res.insert_or_assign("top.ddma.errors[63].acp", DumpEntry{top.ddma.errors[63].acp});
        res.insert_or_assign("top.ddma.errors[63].acp.rSlverr", DumpEntry{top.ddma.errors[63].acp.rSlverr});
        res.insert_or_assign("top.ddma.errors[63].acp.rDecerr", DumpEntry{top.ddma.errors[63].acp.rDecerr});
        res.insert_or_assign("top.ddma.errors[63].acp.wSlverr", DumpEntry{top.ddma.errors[63].acp.wSlverr});
        res.insert_or_assign("top.ddma.errors[63].acp.wDecerr", DumpEntry{top.ddma.errors[63].acp.wDecerr});
        res.insert_or_assign("top.ddma.errors[63].axil", DumpEntry{top.ddma.errors[63].axil});
        res.insert_or_assign("top.ddma.errors[63].axil.rSlverr", DumpEntry{top.ddma.errors[63].axil.rSlverr});
        res.insert_or_assign("top.ddma.errors[63].axil.rDecerr", DumpEntry{top.ddma.errors[63].axil.rDecerr});
        res.insert_or_assign("top.ddma.errors[63].axil.wSlverr", DumpEntry{top.ddma.errors[63].axil.wSlverr});
        res.insert_or_assign("top.ddma.errors[63].axil.wDecerr", DumpEntry{top.ddma.errors[63].axil.wDecerr});
        res.insert_or_assign("top.ddma.numAwid", DumpEntry{top.ddma.numAwid});
        res.insert_or_assign("top.ddma.numAwid.value", DumpEntry{top.ddma.numAwid.value});
        res.insert_or_assign("top.ddma.numChannels", DumpEntry{top.ddma.numChannels});
        res.insert_or_assign("top.syncTime.s", DumpEntry{top.syncTime.s});
        res.insert_or_assign("top.syncTime.sc", DumpEntry{top.syncTime.sc});
        res.insert_or_assign("top.syncTime.utcS", DumpEntry{top.syncTime.utcS});
        res.insert_or_assign("top.syncTime.utcNs", DumpEntry{top.syncTime.utcNs});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl", DumpEntry{top.syncTrig[0].stg.ctrl});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl.periodic", DumpEntry{top.syncTrig[0].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl.resync", DumpEntry{top.syncTrig[0].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[0].stg.delaySc", DumpEntry{top.syncTrig[0].stg.delaySc});
        res.insert_or_assign("top.syncTrig[0].stg.periodSc", DumpEntry{top.syncTrig[0].stg.periodSc});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl", DumpEntry{top.syncTrig[1].stg.ctrl});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl.periodic", DumpEntry{top.syncTrig[1].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl.resync", DumpEntry{top.syncTrig[1].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[1].stg.delaySc", DumpEntry{top.syncTrig[1].stg.delaySc});
        res.insert_or_assign("top.syncTrig[1].stg.periodSc", DumpEntry{top.syncTrig[1].stg.periodSc});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl", DumpEntry{top.syncTrig[2].stg.ctrl});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl.periodic", DumpEntry{top.syncTrig[2].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl.resync", DumpEntry{top.syncTrig[2].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[2].stg.delaySc", DumpEntry{top.syncTrig[2].stg.delaySc});
        res.insert_or_assign("top.syncTrig[2].stg.periodSc", DumpEntry{top.syncTrig[2].stg.periodSc});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl", DumpEntry{top.syncTrig[3].stg.ctrl});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl.periodic", DumpEntry{top.syncTrig[3].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl.resync", DumpEntry{top.syncTrig[3].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[3].stg.delaySc", DumpEntry{top.syncTrig[3].stg.delaySc});
        res.insert_or_assign("top.syncTrig[3].stg.periodSc", DumpEntry{top.syncTrig[3].stg.periodSc});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl", DumpEntry{top.syncTrig[4].stg.ctrl});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl.periodic", DumpEntry{top.syncTrig[4].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl.resync", DumpEntry{top.syncTrig[4].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[4].stg.delaySc", DumpEntry{top.syncTrig[4].stg.delaySc});
        res.insert_or_assign("top.syncTrig[4].stg.periodSc", DumpEntry{top.syncTrig[4].stg.periodSc});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl", DumpEntry{top.syncTrig[5].stg.ctrl});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl.periodic", DumpEntry{top.syncTrig[5].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl.resync", DumpEntry{top.syncTrig[5].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[5].stg.delaySc", DumpEntry{top.syncTrig[5].stg.delaySc});
        res.insert_or_assign("top.syncTrig[5].stg.periodSc", DumpEntry{top.syncTrig[5].stg.periodSc});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl", DumpEntry{top.syncTrig[6].stg.ctrl});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl.periodic", DumpEntry{top.syncTrig[6].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl.resync", DumpEntry{top.syncTrig[6].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[6].stg.delaySc", DumpEntry{top.syncTrig[6].stg.delaySc});
        res.insert_or_assign("top.syncTrig[6].stg.periodSc", DumpEntry{top.syncTrig[6].stg.periodSc});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl", DumpEntry{top.syncTrig[7].stg.ctrl});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl.periodic", DumpEntry{top.syncTrig[7].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl.resync", DumpEntry{top.syncTrig[7].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[7].stg.delaySc", DumpEntry{top.syncTrig[7].stg.delaySc});
        res.insert_or_assign("top.syncTrig[7].stg.periodSc", DumpEntry{top.syncTrig[7].stg.periodSc});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl", DumpEntry{top.syncTrig[8].stg.ctrl});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl.periodic", DumpEntry{top.syncTrig[8].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl.resync", DumpEntry{top.syncTrig[8].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[8].stg.delaySc", DumpEntry{top.syncTrig[8].stg.delaySc});
        res.insert_or_assign("top.syncTrig[8].stg.periodSc", DumpEntry{top.syncTrig[8].stg.periodSc});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl", DumpEntry{top.syncTrig[9].stg.ctrl});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl.periodic", DumpEntry{top.syncTrig[9].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl.resync", DumpEntry{top.syncTrig[9].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[9].stg.delaySc", DumpEntry{top.syncTrig[9].stg.delaySc});
        res.insert_or_assign("top.syncTrig[9].stg.periodSc", DumpEntry{top.syncTrig[9].stg.periodSc});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl", DumpEntry{top.syncTrig[10].stg.ctrl});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl.periodic", DumpEntry{top.syncTrig[10].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl.resync", DumpEntry{top.syncTrig[10].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[10].stg.delaySc", DumpEntry{top.syncTrig[10].stg.delaySc});
        res.insert_or_assign("top.syncTrig[10].stg.periodSc", DumpEntry{top.syncTrig[10].stg.periodSc});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl", DumpEntry{top.syncTrig[11].stg.ctrl});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl.periodic", DumpEntry{top.syncTrig[11].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl.resync", DumpEntry{top.syncTrig[11].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[11].stg.delaySc", DumpEntry{top.syncTrig[11].stg.delaySc});
        res.insert_or_assign("top.syncTrig[11].stg.periodSc", DumpEntry{top.syncTrig[11].stg.periodSc});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl", DumpEntry{top.syncTrig[12].stg.ctrl});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl.periodic", DumpEntry{top.syncTrig[12].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl.resync", DumpEntry{top.syncTrig[12].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[12].stg.delaySc", DumpEntry{top.syncTrig[12].stg.delaySc});
        res.insert_or_assign("top.syncTrig[12].stg.periodSc", DumpEntry{top.syncTrig[12].stg.periodSc});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl", DumpEntry{top.syncTrig[13].stg.ctrl});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl.periodic", DumpEntry{top.syncTrig[13].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl.resync", DumpEntry{top.syncTrig[13].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[13].stg.delaySc", DumpEntry{top.syncTrig[13].stg.delaySc});
        res.insert_or_assign("top.syncTrig[13].stg.periodSc", DumpEntry{top.syncTrig[13].stg.periodSc});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl", DumpEntry{top.syncTrig[14].stg.ctrl});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl.periodic", DumpEntry{top.syncTrig[14].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl.resync", DumpEntry{top.syncTrig[14].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[14].stg.delaySc", DumpEntry{top.syncTrig[14].stg.delaySc});
        res.insert_or_assign("top.syncTrig[14].stg.periodSc", DumpEntry{top.syncTrig[14].stg.periodSc});
        res.insert_or_assign("top.syncTrig[15].stg.ctrl", DumpEntry{top.syncTrig[15].stg.ctrl});
        res.insert_or_assign("top.syncTrig[15].stg.ctrl.periodic", DumpEntry{top.syncTrig[15].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[15].stg.ctrl.resync", DumpEntry{top.syncTrig[15].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[15].stg.delaySc", DumpEntry{top.syncTrig[15].stg.delaySc});
        res.insert_or_assign("top.syncTrig[15].stg.periodSc", DumpEntry{top.syncTrig[15].stg.periodSc});
        res.insert_or_assign("top.syncTrig[16].stg.ctrl", DumpEntry{top.syncTrig[16].stg.ctrl});
        res.insert_or_assign("top.syncTrig[16].stg.ctrl.periodic", DumpEntry{top.syncTrig[16].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[16].stg.ctrl.resync", DumpEntry{top.syncTrig[16].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[16].stg.delaySc", DumpEntry{top.syncTrig[16].stg.delaySc});
        res.insert_or_assign("top.syncTrig[16].stg.periodSc", DumpEntry{top.syncTrig[16].stg.periodSc});
        res.insert_or_assign("top.syncTrig[17].stg.ctrl", DumpEntry{top.syncTrig[17].stg.ctrl});
        res.insert_or_assign("top.syncTrig[17].stg.ctrl.periodic", DumpEntry{top.syncTrig[17].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[17].stg.ctrl.resync", DumpEntry{top.syncTrig[17].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[17].stg.delaySc", DumpEntry{top.syncTrig[17].stg.delaySc});
        res.insert_or_assign("top.syncTrig[17].stg.periodSc", DumpEntry{top.syncTrig[17].stg.periodSc});
        res.insert_or_assign("top.syncTrig[18].stg.ctrl", DumpEntry{top.syncTrig[18].stg.ctrl});
        res.insert_or_assign("top.syncTrig[18].stg.ctrl.periodic", DumpEntry{top.syncTrig[18].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[18].stg.ctrl.resync", DumpEntry{top.syncTrig[18].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[18].stg.delaySc", DumpEntry{top.syncTrig[18].stg.delaySc});
        res.insert_or_assign("top.syncTrig[18].stg.periodSc", DumpEntry{top.syncTrig[18].stg.periodSc});
        res.insert_or_assign("top.syncTrig[19].stg.ctrl", DumpEntry{top.syncTrig[19].stg.ctrl});
        res.insert_or_assign("top.syncTrig[19].stg.ctrl.periodic", DumpEntry{top.syncTrig[19].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[19].stg.ctrl.resync", DumpEntry{top.syncTrig[19].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[19].stg.delaySc", DumpEntry{top.syncTrig[19].stg.delaySc});
        res.insert_or_assign("top.syncTrig[19].stg.periodSc", DumpEntry{top.syncTrig[19].stg.periodSc});
        res.insert_or_assign("top.syncTrig[20].stg.ctrl", DumpEntry{top.syncTrig[20].stg.ctrl});
        res.insert_or_assign("top.syncTrig[20].stg.ctrl.periodic", DumpEntry{top.syncTrig[20].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[20].stg.ctrl.resync", DumpEntry{top.syncTrig[20].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[20].stg.delaySc", DumpEntry{top.syncTrig[20].stg.delaySc});
        res.insert_or_assign("top.syncTrig[20].stg.periodSc", DumpEntry{top.syncTrig[20].stg.periodSc});
        res.insert_or_assign("top.syncTrig[21].stg.ctrl", DumpEntry{top.syncTrig[21].stg.ctrl});
        res.insert_or_assign("top.syncTrig[21].stg.ctrl.periodic", DumpEntry{top.syncTrig[21].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[21].stg.ctrl.resync", DumpEntry{top.syncTrig[21].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[21].stg.delaySc", DumpEntry{top.syncTrig[21].stg.delaySc});
        res.insert_or_assign("top.syncTrig[21].stg.periodSc", DumpEntry{top.syncTrig[21].stg.periodSc});
        res.insert_or_assign("top.syncTrig[22].stg.ctrl", DumpEntry{top.syncTrig[22].stg.ctrl});
        res.insert_or_assign("top.syncTrig[22].stg.ctrl.periodic", DumpEntry{top.syncTrig[22].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[22].stg.ctrl.resync", DumpEntry{top.syncTrig[22].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[22].stg.delaySc", DumpEntry{top.syncTrig[22].stg.delaySc});
        res.insert_or_assign("top.syncTrig[22].stg.periodSc", DumpEntry{top.syncTrig[22].stg.periodSc});
        res.insert_or_assign("top.syncTrig[23].stg.ctrl", DumpEntry{top.syncTrig[23].stg.ctrl});
        res.insert_or_assign("top.syncTrig[23].stg.ctrl.periodic", DumpEntry{top.syncTrig[23].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[23].stg.ctrl.resync", DumpEntry{top.syncTrig[23].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[23].stg.delaySc", DumpEntry{top.syncTrig[23].stg.delaySc});
        res.insert_or_assign("top.syncTrig[23].stg.periodSc", DumpEntry{top.syncTrig[23].stg.periodSc});
        res.insert_or_assign("top.syncTrig[24].stg.ctrl", DumpEntry{top.syncTrig[24].stg.ctrl});
        res.insert_or_assign("top.syncTrig[24].stg.ctrl.periodic", DumpEntry{top.syncTrig[24].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[24].stg.ctrl.resync", DumpEntry{top.syncTrig[24].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[24].stg.delaySc", DumpEntry{top.syncTrig[24].stg.delaySc});
        res.insert_or_assign("top.syncTrig[24].stg.periodSc", DumpEntry{top.syncTrig[24].stg.periodSc});
        res.insert_or_assign("top.syncTrig[25].stg.ctrl", DumpEntry{top.syncTrig[25].stg.ctrl});
        res.insert_or_assign("top.syncTrig[25].stg.ctrl.periodic", DumpEntry{top.syncTrig[25].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[25].stg.ctrl.resync", DumpEntry{top.syncTrig[25].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[25].stg.delaySc", DumpEntry{top.syncTrig[25].stg.delaySc});
        res.insert_or_assign("top.syncTrig[25].stg.periodSc", DumpEntry{top.syncTrig[25].stg.periodSc});
        res.insert_or_assign("top.syncTrig[26].stg.ctrl", DumpEntry{top.syncTrig[26].stg.ctrl});
        res.insert_or_assign("top.syncTrig[26].stg.ctrl.periodic", DumpEntry{top.syncTrig[26].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[26].stg.ctrl.resync", DumpEntry{top.syncTrig[26].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[26].stg.delaySc", DumpEntry{top.syncTrig[26].stg.delaySc});
        res.insert_or_assign("top.syncTrig[26].stg.periodSc", DumpEntry{top.syncTrig[26].stg.periodSc});
        res.insert_or_assign("top.syncTrig[27].stg.ctrl", DumpEntry{top.syncTrig[27].stg.ctrl});
        res.insert_or_assign("top.syncTrig[27].stg.ctrl.periodic", DumpEntry{top.syncTrig[27].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[27].stg.ctrl.resync", DumpEntry{top.syncTrig[27].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[27].stg.delaySc", DumpEntry{top.syncTrig[27].stg.delaySc});
        res.insert_or_assign("top.syncTrig[27].stg.periodSc", DumpEntry{top.syncTrig[27].stg.periodSc});
        res.insert_or_assign("top.syncTrig[28].stg.ctrl", DumpEntry{top.syncTrig[28].stg.ctrl});
        res.insert_or_assign("top.syncTrig[28].stg.ctrl.periodic", DumpEntry{top.syncTrig[28].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[28].stg.ctrl.resync", DumpEntry{top.syncTrig[28].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[28].stg.delaySc", DumpEntry{top.syncTrig[28].stg.delaySc});
        res.insert_or_assign("top.syncTrig[28].stg.periodSc", DumpEntry{top.syncTrig[28].stg.periodSc});
        res.insert_or_assign("top.syncUart.ctrl", DumpEntry{top.syncUart.ctrl});
        res.insert_or_assign("top.syncUart.ctrl.setTxData", DumpEntry{top.syncUart.ctrl.setTxData});
        res.insert_or_assign("top.syncUart.config", DumpEntry{top.syncUart.config});
        res.insert_or_assign("top.syncUart.config.enParity", DumpEntry{top.syncUart.config.enParity});
        res.insert_or_assign("top.syncUart.config.interFrameGap", DumpEntry{top.syncUart.config.interFrameGap});
        res.insert_or_assign("top.syncUart.uartSendTimeNs", DumpEntry{top.syncUart.uartSendTimeNs});
        res.insert_or_assign("top.syncUart.scPerUartBit", DumpEntry{top.syncUart.scPerUartBit});
        res.insert_or_assign("top.syncUart.scPerUartBit.val", DumpEntry{top.syncUart.scPerUartBit.val});
        res.insert_or_assign("top.syncUart.uartData", DumpEntry{top.syncUart.uartData});
        res.insert_or_assign("top.syncUart.uartData.val", DumpEntry{top.syncUart.uartData.val});
        res.insert_or_assign("top.syncUart.firingTimeS", DumpEntry{top.syncUart.firingTimeS});
        res.insert_or_assign("top.syncUart.firingTimeNs", DumpEntry{top.syncUart.firingTimeNs});
        res.insert_or_assign("top.syncUart.magic", DumpEntry{top.syncUart.magic});
        res.insert_or_assign("top.pwmBank.cc0[0].value", DumpEntry{top.pwmBank.cc0[0].value});
        res.insert_or_assign("top.pwmBank.cc0[1].value", DumpEntry{top.pwmBank.cc0[1].value});
        res.insert_or_assign("top.pwmBank.cc0[2].value", DumpEntry{top.pwmBank.cc0[2].value});
        res.insert_or_assign("top.pwmBank.cc0[3].value", DumpEntry{top.pwmBank.cc0[3].value});
        res.insert_or_assign("top.pwmBank.cc0[4].value", DumpEntry{top.pwmBank.cc0[4].value});
        res.insert_or_assign("top.pwmBank.cc0[5].value", DumpEntry{top.pwmBank.cc0[5].value});
        res.insert_or_assign("top.pwmBank.cc0[6].value", DumpEntry{top.pwmBank.cc0[6].value});
        res.insert_or_assign("top.pwmBank.cc0[7].value", DumpEntry{top.pwmBank.cc0[7].value});
        res.insert_or_assign("top.pwmBank.cc0[8].value", DumpEntry{top.pwmBank.cc0[8].value});
        res.insert_or_assign("top.pwmBank.cc0[9].value", DumpEntry{top.pwmBank.cc0[9].value});
        res.insert_or_assign("top.pwmBank.cc0[10].value", DumpEntry{top.pwmBank.cc0[10].value});
        res.insert_or_assign("top.pwmBank.cc0[11].value", DumpEntry{top.pwmBank.cc0[11].value});
        res.insert_or_assign("top.pwmBank.cc1[0].value", DumpEntry{top.pwmBank.cc1[0].value});
        res.insert_or_assign("top.pwmBank.cc1[1].value", DumpEntry{top.pwmBank.cc1[1].value});
        res.insert_or_assign("top.pwmBank.cc1[2].value", DumpEntry{top.pwmBank.cc1[2].value});
        res.insert_or_assign("top.pwmBank.cc1[3].value", DumpEntry{top.pwmBank.cc1[3].value});
        res.insert_or_assign("top.pwmBank.cc1[4].value", DumpEntry{top.pwmBank.cc1[4].value});
        res.insert_or_assign("top.pwmBank.cc1[5].value", DumpEntry{top.pwmBank.cc1[5].value});
        res.insert_or_assign("top.pwmBank.cc1[6].value", DumpEntry{top.pwmBank.cc1[6].value});
        res.insert_or_assign("top.pwmBank.cc1[7].value", DumpEntry{top.pwmBank.cc1[7].value});
        res.insert_or_assign("top.pwmBank.cc1[8].value", DumpEntry{top.pwmBank.cc1[8].value});
        res.insert_or_assign("top.pwmBank.cc1[9].value", DumpEntry{top.pwmBank.cc1[9].value});
        res.insert_or_assign("top.pwmBank.cc1[10].value", DumpEntry{top.pwmBank.cc1[10].value});
        res.insert_or_assign("top.pwmBank.cc1[11].value", DumpEntry{top.pwmBank.cc1[11].value});
        res.insert_or_assign("top.scratchpad.mem[0]reg", DumpEntry{top.scratchpad.mem[0] reg});
        res.insert_or_assign("top.scratchpad.mem[1]reg", DumpEntry{top.scratchpad.mem[1] reg});
        res.insert_or_assign("top.scratchpad.mem[2]reg", DumpEntry{top.scratchpad.mem[2] reg});
        res.insert_or_assign("top.scratchpad.mem[3]reg", DumpEntry{top.scratchpad.mem[3] reg});
        res.insert_or_assign("top.scratchpad.mem[4]reg", DumpEntry{top.scratchpad.mem[4] reg});
        res.insert_or_assign("top.scratchpad.mem[5]reg", DumpEntry{top.scratchpad.mem[5] reg});
        res.insert_or_assign("top.scratchpad.mem[6]reg", DumpEntry{top.scratchpad.mem[6] reg});
        res.insert_or_assign("top.scratchpad.mem[7]reg", DumpEntry{top.scratchpad.mem[7] reg});
        res.insert_or_assign("top.scratchpad.mem[8]reg", DumpEntry{top.scratchpad.mem[8] reg});
        res.insert_or_assign("top.scratchpad.mem[9]reg", DumpEntry{top.scratchpad.mem[9] reg});
        res.insert_or_assign("top.scratchpad.mem[10]reg", DumpEntry{top.scratchpad.mem[10] reg});
        res.insert_or_assign("top.scratchpad.mem[11]reg", DumpEntry{top.scratchpad.mem[11] reg});
        res.insert_or_assign("top.scratchpad.mem[12]reg", DumpEntry{top.scratchpad.mem[12] reg});
        res.insert_or_assign("top.scratchpad.mem[13]reg", DumpEntry{top.scratchpad.mem[13] reg});
        res.insert_or_assign("top.scratchpad.mem[14]reg", DumpEntry{top.scratchpad.mem[14] reg});
        res.insert_or_assign("top.scratchpad.mem[15]reg", DumpEntry{top.scratchpad.mem[15] reg});
        res.insert_or_assign("top.scratchpad.mem[16]reg", DumpEntry{top.scratchpad.mem[16] reg});
        res.insert_or_assign("top.scratchpad.mem[17]reg", DumpEntry{top.scratchpad.mem[17] reg});
        res.insert_or_assign("top.scratchpad.mem[18]reg", DumpEntry{top.scratchpad.mem[18] reg});
        res.insert_or_assign("top.scratchpad.mem[19]reg", DumpEntry{top.scratchpad.mem[19] reg});
        res.insert_or_assign("top.scratchpad.mem[20]reg", DumpEntry{top.scratchpad.mem[20] reg});
        res.insert_or_assign("top.scratchpad.mem[21]reg", DumpEntry{top.scratchpad.mem[21] reg});
        res.insert_or_assign("top.scratchpad.mem[22]reg", DumpEntry{top.scratchpad.mem[22] reg});
        res.insert_or_assign("top.scratchpad.mem[23]reg", DumpEntry{top.scratchpad.mem[23] reg});
        res.insert_or_assign("top.scratchpad.mem[24]reg", DumpEntry{top.scratchpad.mem[24] reg});
        res.insert_or_assign("top.scratchpad.mem[25]reg", DumpEntry{top.scratchpad.mem[25] reg});
        res.insert_or_assign("top.scratchpad.mem[26]reg", DumpEntry{top.scratchpad.mem[26] reg});
        res.insert_or_assign("top.scratchpad.mem[27]reg", DumpEntry{top.scratchpad.mem[27] reg});
        res.insert_or_assign("top.scratchpad.mem[28]reg", DumpEntry{top.scratchpad.mem[28] reg});
        res.insert_or_assign("top.scratchpad.mem[29]reg", DumpEntry{top.scratchpad.mem[29] reg});
        res.insert_or_assign("top.scratchpad.mem[30]reg", DumpEntry{top.scratchpad.mem[30] reg});
        res.insert_or_assign("top.scratchpad.mem[31]reg", DumpEntry{top.scratchpad.mem[31] reg});
        res.insert_or_assign("top.scratchpad.mem[32]reg", DumpEntry{top.scratchpad.mem[32] reg});
        res.insert_or_assign("top.scratchpad.mem[33]reg", DumpEntry{top.scratchpad.mem[33] reg});
        res.insert_or_assign("top.scratchpad.mem[34]reg", DumpEntry{top.scratchpad.mem[34] reg});
        res.insert_or_assign("top.scratchpad.mem[35]reg", DumpEntry{top.scratchpad.mem[35] reg});
        res.insert_or_assign("top.scratchpad.mem[36]reg", DumpEntry{top.scratchpad.mem[36] reg});
        res.insert_or_assign("top.scratchpad.mem[37]reg", DumpEntry{top.scratchpad.mem[37] reg});
        res.insert_or_assign("top.scratchpad.mem[38]reg", DumpEntry{top.scratchpad.mem[38] reg});
        res.insert_or_assign("top.scratchpad.mem[39]reg", DumpEntry{top.scratchpad.mem[39] reg});
        res.insert_or_assign("top.scratchpad.mem[40]reg", DumpEntry{top.scratchpad.mem[40] reg});
        res.insert_or_assign("top.scratchpad.mem[41]reg", DumpEntry{top.scratchpad.mem[41] reg});
        res.insert_or_assign("top.scratchpad.mem[42]reg", DumpEntry{top.scratchpad.mem[42] reg});
        res.insert_or_assign("top.scratchpad.mem[43]reg", DumpEntry{top.scratchpad.mem[43] reg});
        res.insert_or_assign("top.scratchpad.mem[44]reg", DumpEntry{top.scratchpad.mem[44] reg});
        res.insert_or_assign("top.scratchpad.mem[45]reg", DumpEntry{top.scratchpad.mem[45] reg});
        res.insert_or_assign("top.scratchpad.mem[46]reg", DumpEntry{top.scratchpad.mem[46] reg});
        res.insert_or_assign("top.scratchpad.mem[47]reg", DumpEntry{top.scratchpad.mem[47] reg});
        res.insert_or_assign("top.scratchpad.mem[48]reg", DumpEntry{top.scratchpad.mem[48] reg});
        res.insert_or_assign("top.scratchpad.mem[49]reg", DumpEntry{top.scratchpad.mem[49] reg});
        res.insert_or_assign("top.scratchpad.mem[50]reg", DumpEntry{top.scratchpad.mem[50] reg});
        res.insert_or_assign("top.scratchpad.mem[51]reg", DumpEntry{top.scratchpad.mem[51] reg});
        res.insert_or_assign("top.scratchpad.mem[52]reg", DumpEntry{top.scratchpad.mem[52] reg});
        res.insert_or_assign("top.scratchpad.mem[53]reg", DumpEntry{top.scratchpad.mem[53] reg});
        res.insert_or_assign("top.scratchpad.mem[54]reg", DumpEntry{top.scratchpad.mem[54] reg});
        res.insert_or_assign("top.scratchpad.mem[55]reg", DumpEntry{top.scratchpad.mem[55] reg});
        res.insert_or_assign("top.scratchpad.mem[56]reg", DumpEntry{top.scratchpad.mem[56] reg});
        res.insert_or_assign("top.scratchpad.mem[57]reg", DumpEntry{top.scratchpad.mem[57] reg});
        res.insert_or_assign("top.scratchpad.mem[58]reg", DumpEntry{top.scratchpad.mem[58] reg});
        res.insert_or_assign("top.scratchpad.mem[59]reg", DumpEntry{top.scratchpad.mem[59] reg});
        res.insert_or_assign("top.scratchpad.mem[60]reg", DumpEntry{top.scratchpad.mem[60] reg});
        res.insert_or_assign("top.scratchpad.mem[61]reg", DumpEntry{top.scratchpad.mem[61] reg});
        res.insert_or_assign("top.scratchpad.mem[62]reg", DumpEntry{top.scratchpad.mem[62] reg});
        res.insert_or_assign("top.scratchpad.mem[63]reg", DumpEntry{top.scratchpad.mem[63] reg});
        res.insert_or_assign("top.scratchpad.mem[64]reg", DumpEntry{top.scratchpad.mem[64] reg});
        res.insert_or_assign("top.scratchpad.mem[65]reg", DumpEntry{top.scratchpad.mem[65] reg});
        res.insert_or_assign("top.scratchpad.mem[66]reg", DumpEntry{top.scratchpad.mem[66] reg});
        res.insert_or_assign("top.scratchpad.mem[67]reg", DumpEntry{top.scratchpad.mem[67] reg});
        res.insert_or_assign("top.scratchpad.mem[68]reg", DumpEntry{top.scratchpad.mem[68] reg});
        res.insert_or_assign("top.scratchpad.mem[69]reg", DumpEntry{top.scratchpad.mem[69] reg});
        res.insert_or_assign("top.scratchpad.mem[70]reg", DumpEntry{top.scratchpad.mem[70] reg});
        res.insert_or_assign("top.scratchpad.mem[71]reg", DumpEntry{top.scratchpad.mem[71] reg});
        res.insert_or_assign("top.scratchpad.mem[72]reg", DumpEntry{top.scratchpad.mem[72] reg});
        res.insert_or_assign("top.scratchpad.mem[73]reg", DumpEntry{top.scratchpad.mem[73] reg});
        res.insert_or_assign("top.scratchpad.mem[74]reg", DumpEntry{top.scratchpad.mem[74] reg});
        res.insert_or_assign("top.scratchpad.mem[75]reg", DumpEntry{top.scratchpad.mem[75] reg});
        res.insert_or_assign("top.scratchpad.mem[76]reg", DumpEntry{top.scratchpad.mem[76] reg});
        res.insert_or_assign("top.scratchpad.mem[77]reg", DumpEntry{top.scratchpad.mem[77] reg});
        res.insert_or_assign("top.scratchpad.mem[78]reg", DumpEntry{top.scratchpad.mem[78] reg});
        res.insert_or_assign("top.scratchpad.mem[79]reg", DumpEntry{top.scratchpad.mem[79] reg});
        res.insert_or_assign("top.scratchpad.mem[80]reg", DumpEntry{top.scratchpad.mem[80] reg});
        res.insert_or_assign("top.scratchpad.mem[81]reg", DumpEntry{top.scratchpad.mem[81] reg});
        res.insert_or_assign("top.scratchpad.mem[82]reg", DumpEntry{top.scratchpad.mem[82] reg});
        res.insert_or_assign("top.scratchpad.mem[83]reg", DumpEntry{top.scratchpad.mem[83] reg});
        res.insert_or_assign("top.scratchpad.mem[84]reg", DumpEntry{top.scratchpad.mem[84] reg});
        res.insert_or_assign("top.scratchpad.mem[85]reg", DumpEntry{top.scratchpad.mem[85] reg});
        res.insert_or_assign("top.scratchpad.mem[86]reg", DumpEntry{top.scratchpad.mem[86] reg});
        res.insert_or_assign("top.scratchpad.mem[87]reg", DumpEntry{top.scratchpad.mem[87] reg});
        res.insert_or_assign("top.scratchpad.mem[88]reg", DumpEntry{top.scratchpad.mem[88] reg});
        res.insert_or_assign("top.scratchpad.mem[89]reg", DumpEntry{top.scratchpad.mem[89] reg});
        res.insert_or_assign("top.scratchpad.mem[90]reg", DumpEntry{top.scratchpad.mem[90] reg});
        res.insert_or_assign("top.scratchpad.mem[91]reg", DumpEntry{top.scratchpad.mem[91] reg});
        res.insert_or_assign("top.scratchpad.mem[92]reg", DumpEntry{top.scratchpad.mem[92] reg});
        res.insert_or_assign("top.scratchpad.mem[93]reg", DumpEntry{top.scratchpad.mem[93] reg});
        res.insert_or_assign("top.scratchpad.mem[94]reg", DumpEntry{top.scratchpad.mem[94] reg});
        res.insert_or_assign("top.scratchpad.mem[95]reg", DumpEntry{top.scratchpad.mem[95] reg});
        res.insert_or_assign("top.scratchpad.mem[96]reg", DumpEntry{top.scratchpad.mem[96] reg});
        res.insert_or_assign("top.scratchpad.mem[97]reg", DumpEntry{top.scratchpad.mem[97] reg});
        res.insert_or_assign("top.scratchpad.mem[98]reg", DumpEntry{top.scratchpad.mem[98] reg});
        res.insert_or_assign("top.scratchpad.mem[99]reg", DumpEntry{top.scratchpad.mem[99] reg});
        res.insert_or_assign("top.scratchpad.mem[100]reg", DumpEntry{top.scratchpad.mem[100] reg});
        res.insert_or_assign("top.scratchpad.mem[101]reg", DumpEntry{top.scratchpad.mem[101] reg});
        res.insert_or_assign("top.scratchpad.mem[102]reg", DumpEntry{top.scratchpad.mem[102] reg});
        res.insert_or_assign("top.scratchpad.mem[103]reg", DumpEntry{top.scratchpad.mem[103] reg});
        res.insert_or_assign("top.scratchpad.mem[104]reg", DumpEntry{top.scratchpad.mem[104] reg});
        res.insert_or_assign("top.scratchpad.mem[105]reg", DumpEntry{top.scratchpad.mem[105] reg});
        res.insert_or_assign("top.scratchpad.mem[106]reg", DumpEntry{top.scratchpad.mem[106] reg});
        res.insert_or_assign("top.scratchpad.mem[107]reg", DumpEntry{top.scratchpad.mem[107] reg});
        res.insert_or_assign("top.scratchpad.mem[108]reg", DumpEntry{top.scratchpad.mem[108] reg});
        res.insert_or_assign("top.scratchpad.mem[109]reg", DumpEntry{top.scratchpad.mem[109] reg});
        res.insert_or_assign("top.scratchpad.mem[110]reg", DumpEntry{top.scratchpad.mem[110] reg});
        res.insert_or_assign("top.scratchpad.mem[111]reg", DumpEntry{top.scratchpad.mem[111] reg});
        res.insert_or_assign("top.scratchpad.mem[112]reg", DumpEntry{top.scratchpad.mem[112] reg});
        res.insert_or_assign("top.scratchpad.mem[113]reg", DumpEntry{top.scratchpad.mem[113] reg});
        res.insert_or_assign("top.scratchpad.mem[114]reg", DumpEntry{top.scratchpad.mem[114] reg});
        res.insert_or_assign("top.scratchpad.mem[115]reg", DumpEntry{top.scratchpad.mem[115] reg});
        res.insert_or_assign("top.scratchpad.mem[116]reg", DumpEntry{top.scratchpad.mem[116] reg});
        res.insert_or_assign("top.scratchpad.mem[117]reg", DumpEntry{top.scratchpad.mem[117] reg});
        res.insert_or_assign("top.scratchpad.mem[118]reg", DumpEntry{top.scratchpad.mem[118] reg});
        res.insert_or_assign("top.scratchpad.mem[119]reg", DumpEntry{top.scratchpad.mem[119] reg});
        res.insert_or_assign("top.scratchpad.mem[120]reg", DumpEntry{top.scratchpad.mem[120] reg});
        res.insert_or_assign("top.scratchpad.mem[121]reg", DumpEntry{top.scratchpad.mem[121] reg});
        res.insert_or_assign("top.scratchpad.mem[122]reg", DumpEntry{top.scratchpad.mem[122] reg});
        res.insert_or_assign("top.scratchpad.mem[123]reg", DumpEntry{top.scratchpad.mem[123] reg});
        res.insert_or_assign("top.scratchpad.mem[124]reg", DumpEntry{top.scratchpad.mem[124] reg});
        res.insert_or_assign("top.scratchpad.mem[125]reg", DumpEntry{top.scratchpad.mem[125] reg});
        res.insert_or_assign("top.scratchpad.mem[126]reg", DumpEntry{top.scratchpad.mem[126] reg});
        res.insert_or_assign("top.scratchpad.mem[127]reg", DumpEntry{top.scratchpad.mem[127] reg});
        res.insert_or_assign("top.scratchpad.mem[128]reg", DumpEntry{top.scratchpad.mem[128] reg});
        res.insert_or_assign("top.scratchpad.mem[129]reg", DumpEntry{top.scratchpad.mem[129] reg});
        res.insert_or_assign("top.scratchpad.mem[130]reg", DumpEntry{top.scratchpad.mem[130] reg});
        res.insert_or_assign("top.scratchpad.mem[131]reg", DumpEntry{top.scratchpad.mem[131] reg});
        res.insert_or_assign("top.scratchpad.mem[132]reg", DumpEntry{top.scratchpad.mem[132] reg});
        res.insert_or_assign("top.scratchpad.mem[133]reg", DumpEntry{top.scratchpad.mem[133] reg});
        res.insert_or_assign("top.scratchpad.mem[134]reg", DumpEntry{top.scratchpad.mem[134] reg});
        res.insert_or_assign("top.scratchpad.mem[135]reg", DumpEntry{top.scratchpad.mem[135] reg});
        res.insert_or_assign("top.scratchpad.mem[136]reg", DumpEntry{top.scratchpad.mem[136] reg});
        res.insert_or_assign("top.scratchpad.mem[137]reg", DumpEntry{top.scratchpad.mem[137] reg});
        res.insert_or_assign("top.scratchpad.mem[138]reg", DumpEntry{top.scratchpad.mem[138] reg});
        res.insert_or_assign("top.scratchpad.mem[139]reg", DumpEntry{top.scratchpad.mem[139] reg});
        res.insert_or_assign("top.scratchpad.mem[140]reg", DumpEntry{top.scratchpad.mem[140] reg});
        res.insert_or_assign("top.scratchpad.mem[141]reg", DumpEntry{top.scratchpad.mem[141] reg});
        res.insert_or_assign("top.scratchpad.mem[142]reg", DumpEntry{top.scratchpad.mem[142] reg});
        res.insert_or_assign("top.scratchpad.mem[143]reg", DumpEntry{top.scratchpad.mem[143] reg});
        res.insert_or_assign("top.scratchpad.mem[144]reg", DumpEntry{top.scratchpad.mem[144] reg});
        res.insert_or_assign("top.scratchpad.mem[145]reg", DumpEntry{top.scratchpad.mem[145] reg});
        res.insert_or_assign("top.scratchpad.mem[146]reg", DumpEntry{top.scratchpad.mem[146] reg});
        res.insert_or_assign("top.scratchpad.mem[147]reg", DumpEntry{top.scratchpad.mem[147] reg});
        res.insert_or_assign("top.scratchpad.mem[148]reg", DumpEntry{top.scratchpad.mem[148] reg});
        res.insert_or_assign("top.scratchpad.mem[149]reg", DumpEntry{top.scratchpad.mem[149] reg});
        res.insert_or_assign("top.scratchpad.mem[150]reg", DumpEntry{top.scratchpad.mem[150] reg});
        res.insert_or_assign("top.scratchpad.mem[151]reg", DumpEntry{top.scratchpad.mem[151] reg});
        res.insert_or_assign("top.scratchpad.mem[152]reg", DumpEntry{top.scratchpad.mem[152] reg});
        res.insert_or_assign("top.scratchpad.mem[153]reg", DumpEntry{top.scratchpad.mem[153] reg});
        res.insert_or_assign("top.scratchpad.mem[154]reg", DumpEntry{top.scratchpad.mem[154] reg});
        res.insert_or_assign("top.scratchpad.mem[155]reg", DumpEntry{top.scratchpad.mem[155] reg});
        res.insert_or_assign("top.scratchpad.mem[156]reg", DumpEntry{top.scratchpad.mem[156] reg});
        res.insert_or_assign("top.scratchpad.mem[157]reg", DumpEntry{top.scratchpad.mem[157] reg});
        res.insert_or_assign("top.scratchpad.mem[158]reg", DumpEntry{top.scratchpad.mem[158] reg});
        res.insert_or_assign("top.scratchpad.mem[159]reg", DumpEntry{top.scratchpad.mem[159] reg});
        res.insert_or_assign("top.scratchpad.mem[160]reg", DumpEntry{top.scratchpad.mem[160] reg});
        res.insert_or_assign("top.scratchpad.mem[161]reg", DumpEntry{top.scratchpad.mem[161] reg});
        res.insert_or_assign("top.scratchpad.mem[162]reg", DumpEntry{top.scratchpad.mem[162] reg});
        res.insert_or_assign("top.scratchpad.mem[163]reg", DumpEntry{top.scratchpad.mem[163] reg});
        res.insert_or_assign("top.scratchpad.mem[164]reg", DumpEntry{top.scratchpad.mem[164] reg});
        res.insert_or_assign("top.scratchpad.mem[165]reg", DumpEntry{top.scratchpad.mem[165] reg});
        res.insert_or_assign("top.scratchpad.mem[166]reg", DumpEntry{top.scratchpad.mem[166] reg});
        res.insert_or_assign("top.scratchpad.mem[167]reg", DumpEntry{top.scratchpad.mem[167] reg});
        res.insert_or_assign("top.scratchpad.mem[168]reg", DumpEntry{top.scratchpad.mem[168] reg});
        res.insert_or_assign("top.scratchpad.mem[169]reg", DumpEntry{top.scratchpad.mem[169] reg});
        res.insert_or_assign("top.scratchpad.mem[170]reg", DumpEntry{top.scratchpad.mem[170] reg});
        res.insert_or_assign("top.scratchpad.mem[171]reg", DumpEntry{top.scratchpad.mem[171] reg});
        res.insert_or_assign("top.scratchpad.mem[172]reg", DumpEntry{top.scratchpad.mem[172] reg});
        res.insert_or_assign("top.scratchpad.mem[173]reg", DumpEntry{top.scratchpad.mem[173] reg});
        res.insert_or_assign("top.scratchpad.mem[174]reg", DumpEntry{top.scratchpad.mem[174] reg});
        res.insert_or_assign("top.scratchpad.mem[175]reg", DumpEntry{top.scratchpad.mem[175] reg});
        res.insert_or_assign("top.scratchpad.mem[176]reg", DumpEntry{top.scratchpad.mem[176] reg});
        res.insert_or_assign("top.scratchpad.mem[177]reg", DumpEntry{top.scratchpad.mem[177] reg});
        res.insert_or_assign("top.scratchpad.mem[178]reg", DumpEntry{top.scratchpad.mem[178] reg});
        res.insert_or_assign("top.scratchpad.mem[179]reg", DumpEntry{top.scratchpad.mem[179] reg});
        res.insert_or_assign("top.scratchpad.mem[180]reg", DumpEntry{top.scratchpad.mem[180] reg});
        res.insert_or_assign("top.scratchpad.mem[181]reg", DumpEntry{top.scratchpad.mem[181] reg});
        res.insert_or_assign("top.scratchpad.mem[182]reg", DumpEntry{top.scratchpad.mem[182] reg});
        res.insert_or_assign("top.scratchpad.mem[183]reg", DumpEntry{top.scratchpad.mem[183] reg});
        res.insert_or_assign("top.scratchpad.mem[184]reg", DumpEntry{top.scratchpad.mem[184] reg});
        res.insert_or_assign("top.scratchpad.mem[185]reg", DumpEntry{top.scratchpad.mem[185] reg});
        res.insert_or_assign("top.scratchpad.mem[186]reg", DumpEntry{top.scratchpad.mem[186] reg});
        res.insert_or_assign("top.scratchpad.mem[187]reg", DumpEntry{top.scratchpad.mem[187] reg});
        res.insert_or_assign("top.scratchpad.mem[188]reg", DumpEntry{top.scratchpad.mem[188] reg});
        res.insert_or_assign("top.scratchpad.mem[189]reg", DumpEntry{top.scratchpad.mem[189] reg});
        res.insert_or_assign("top.scratchpad.mem[190]reg", DumpEntry{top.scratchpad.mem[190] reg});
        res.insert_or_assign("top.scratchpad.mem[191]reg", DumpEntry{top.scratchpad.mem[191] reg});
        res.insert_or_assign("top.scratchpad.mem[192]reg", DumpEntry{top.scratchpad.mem[192] reg});
        res.insert_or_assign("top.scratchpad.mem[193]reg", DumpEntry{top.scratchpad.mem[193] reg});
        res.insert_or_assign("top.scratchpad.mem[194]reg", DumpEntry{top.scratchpad.mem[194] reg});
        res.insert_or_assign("top.scratchpad.mem[195]reg", DumpEntry{top.scratchpad.mem[195] reg});
        res.insert_or_assign("top.scratchpad.mem[196]reg", DumpEntry{top.scratchpad.mem[196] reg});
        res.insert_or_assign("top.scratchpad.mem[197]reg", DumpEntry{top.scratchpad.mem[197] reg});
        res.insert_or_assign("top.scratchpad.mem[198]reg", DumpEntry{top.scratchpad.mem[198] reg});
        res.insert_or_assign("top.scratchpad.mem[199]reg", DumpEntry{top.scratchpad.mem[199] reg});
        res.insert_or_assign("top.scratchpad.mem[200]reg", DumpEntry{top.scratchpad.mem[200] reg});
        res.insert_or_assign("top.scratchpad.mem[201]reg", DumpEntry{top.scratchpad.mem[201] reg});
        res.insert_or_assign("top.scratchpad.mem[202]reg", DumpEntry{top.scratchpad.mem[202] reg});
        res.insert_or_assign("top.scratchpad.mem[203]reg", DumpEntry{top.scratchpad.mem[203] reg});
        res.insert_or_assign("top.scratchpad.mem[204]reg", DumpEntry{top.scratchpad.mem[204] reg});
        res.insert_or_assign("top.scratchpad.mem[205]reg", DumpEntry{top.scratchpad.mem[205] reg});
        res.insert_or_assign("top.scratchpad.mem[206]reg", DumpEntry{top.scratchpad.mem[206] reg});
        res.insert_or_assign("top.scratchpad.mem[207]reg", DumpEntry{top.scratchpad.mem[207] reg});
        res.insert_or_assign("top.scratchpad.mem[208]reg", DumpEntry{top.scratchpad.mem[208] reg});
        res.insert_or_assign("top.scratchpad.mem[209]reg", DumpEntry{top.scratchpad.mem[209] reg});
        res.insert_or_assign("top.scratchpad.mem[210]reg", DumpEntry{top.scratchpad.mem[210] reg});
        res.insert_or_assign("top.scratchpad.mem[211]reg", DumpEntry{top.scratchpad.mem[211] reg});
        res.insert_or_assign("top.scratchpad.mem[212]reg", DumpEntry{top.scratchpad.mem[212] reg});
        res.insert_or_assign("top.scratchpad.mem[213]reg", DumpEntry{top.scratchpad.mem[213] reg});
        res.insert_or_assign("top.scratchpad.mem[214]reg", DumpEntry{top.scratchpad.mem[214] reg});
        res.insert_or_assign("top.scratchpad.mem[215]reg", DumpEntry{top.scratchpad.mem[215] reg});
        res.insert_or_assign("top.scratchpad.mem[216]reg", DumpEntry{top.scratchpad.mem[216] reg});
        res.insert_or_assign("top.scratchpad.mem[217]reg", DumpEntry{top.scratchpad.mem[217] reg});
        res.insert_or_assign("top.scratchpad.mem[218]reg", DumpEntry{top.scratchpad.mem[218] reg});
        res.insert_or_assign("top.scratchpad.mem[219]reg", DumpEntry{top.scratchpad.mem[219] reg});
        res.insert_or_assign("top.scratchpad.mem[220]reg", DumpEntry{top.scratchpad.mem[220] reg});
        res.insert_or_assign("top.scratchpad.mem[221]reg", DumpEntry{top.scratchpad.mem[221] reg});
        res.insert_or_assign("top.scratchpad.mem[222]reg", DumpEntry{top.scratchpad.mem[222] reg});
        res.insert_or_assign("top.scratchpad.mem[223]reg", DumpEntry{top.scratchpad.mem[223] reg});
        res.insert_or_assign("top.scratchpad.mem[224]reg", DumpEntry{top.scratchpad.mem[224] reg});
        res.insert_or_assign("top.scratchpad.mem[225]reg", DumpEntry{top.scratchpad.mem[225] reg});
        res.insert_or_assign("top.scratchpad.mem[226]reg", DumpEntry{top.scratchpad.mem[226] reg});
        res.insert_or_assign("top.scratchpad.mem[227]reg", DumpEntry{top.scratchpad.mem[227] reg});
        res.insert_or_assign("top.scratchpad.mem[228]reg", DumpEntry{top.scratchpad.mem[228] reg});
        res.insert_or_assign("top.scratchpad.mem[229]reg", DumpEntry{top.scratchpad.mem[229] reg});
        res.insert_or_assign("top.scratchpad.mem[230]reg", DumpEntry{top.scratchpad.mem[230] reg});
        res.insert_or_assign("top.scratchpad.mem[231]reg", DumpEntry{top.scratchpad.mem[231] reg});
        res.insert_or_assign("top.scratchpad.mem[232]reg", DumpEntry{top.scratchpad.mem[232] reg});
        res.insert_or_assign("top.scratchpad.mem[233]reg", DumpEntry{top.scratchpad.mem[233] reg});
        res.insert_or_assign("top.scratchpad.mem[234]reg", DumpEntry{top.scratchpad.mem[234] reg});
        res.insert_or_assign("top.scratchpad.mem[235]reg", DumpEntry{top.scratchpad.mem[235] reg});
        res.insert_or_assign("top.scratchpad.mem[236]reg", DumpEntry{top.scratchpad.mem[236] reg});
        res.insert_or_assign("top.scratchpad.mem[237]reg", DumpEntry{top.scratchpad.mem[237] reg});
        res.insert_or_assign("top.scratchpad.mem[238]reg", DumpEntry{top.scratchpad.mem[238] reg});
        res.insert_or_assign("top.scratchpad.mem[239]reg", DumpEntry{top.scratchpad.mem[239] reg});
        res.insert_or_assign("top.scratchpad.mem[240]reg", DumpEntry{top.scratchpad.mem[240] reg});
        res.insert_or_assign("top.scratchpad.mem[241]reg", DumpEntry{top.scratchpad.mem[241] reg});
        res.insert_or_assign("top.scratchpad.mem[242]reg", DumpEntry{top.scratchpad.mem[242] reg});
        res.insert_or_assign("top.scratchpad.mem[243]reg", DumpEntry{top.scratchpad.mem[243] reg});
        res.insert_or_assign("top.scratchpad.mem[244]reg", DumpEntry{top.scratchpad.mem[244] reg});
        res.insert_or_assign("top.scratchpad.mem[245]reg", DumpEntry{top.scratchpad.mem[245] reg});
        res.insert_or_assign("top.scratchpad.mem[246]reg", DumpEntry{top.scratchpad.mem[246] reg});
        res.insert_or_assign("top.scratchpad.mem[247]reg", DumpEntry{top.scratchpad.mem[247] reg});
        res.insert_or_assign("top.scratchpad.mem[248]reg", DumpEntry{top.scratchpad.mem[248] reg});
        res.insert_or_assign("top.scratchpad.mem[249]reg", DumpEntry{top.scratchpad.mem[249] reg});
        res.insert_or_assign("top.scratchpad.mem[250]reg", DumpEntry{top.scratchpad.mem[250] reg});
        res.insert_or_assign("top.scratchpad.mem[251]reg", DumpEntry{top.scratchpad.mem[251] reg});
        res.insert_or_assign("top.scratchpad.mem[252]reg", DumpEntry{top.scratchpad.mem[252] reg});
        res.insert_or_assign("top.scratchpad.mem[253]reg", DumpEntry{top.scratchpad.mem[253] reg});
        res.insert_or_assign("top.scratchpad.mem[254]reg", DumpEntry{top.scratchpad.mem[254] reg});
        res.insert_or_assign("top.scratchpad.mem[255]reg", DumpEntry{top.scratchpad.mem[255] reg});
        res.insert_or_assign("top.scratchpad.mem[256]reg", DumpEntry{top.scratchpad.mem[256] reg});
        res.insert_or_assign("top.scratchpad.mem[257]reg", DumpEntry{top.scratchpad.mem[257] reg});
        res.insert_or_assign("top.scratchpad.mem[258]reg", DumpEntry{top.scratchpad.mem[258] reg});
        res.insert_or_assign("top.scratchpad.mem[259]reg", DumpEntry{top.scratchpad.mem[259] reg});
        res.insert_or_assign("top.scratchpad.mem[260]reg", DumpEntry{top.scratchpad.mem[260] reg});
        res.insert_or_assign("top.scratchpad.mem[261]reg", DumpEntry{top.scratchpad.mem[261] reg});
        res.insert_or_assign("top.scratchpad.mem[262]reg", DumpEntry{top.scratchpad.mem[262] reg});
        res.insert_or_assign("top.scratchpad.mem[263]reg", DumpEntry{top.scratchpad.mem[263] reg});
        res.insert_or_assign("top.scratchpad.mem[264]reg", DumpEntry{top.scratchpad.mem[264] reg});
        res.insert_or_assign("top.scratchpad.mem[265]reg", DumpEntry{top.scratchpad.mem[265] reg});
        res.insert_or_assign("top.scratchpad.mem[266]reg", DumpEntry{top.scratchpad.mem[266] reg});
        res.insert_or_assign("top.scratchpad.mem[267]reg", DumpEntry{top.scratchpad.mem[267] reg});
        res.insert_or_assign("top.scratchpad.mem[268]reg", DumpEntry{top.scratchpad.mem[268] reg});
        res.insert_or_assign("top.scratchpad.mem[269]reg", DumpEntry{top.scratchpad.mem[269] reg});
        res.insert_or_assign("top.scratchpad.mem[270]reg", DumpEntry{top.scratchpad.mem[270] reg});
        res.insert_or_assign("top.scratchpad.mem[271]reg", DumpEntry{top.scratchpad.mem[271] reg});
        res.insert_or_assign("top.scratchpad.mem[272]reg", DumpEntry{top.scratchpad.mem[272] reg});
        res.insert_or_assign("top.scratchpad.mem[273]reg", DumpEntry{top.scratchpad.mem[273] reg});
        res.insert_or_assign("top.scratchpad.mem[274]reg", DumpEntry{top.scratchpad.mem[274] reg});
        res.insert_or_assign("top.scratchpad.mem[275]reg", DumpEntry{top.scratchpad.mem[275] reg});
        res.insert_or_assign("top.scratchpad.mem[276]reg", DumpEntry{top.scratchpad.mem[276] reg});
        res.insert_or_assign("top.scratchpad.mem[277]reg", DumpEntry{top.scratchpad.mem[277] reg});
        res.insert_or_assign("top.scratchpad.mem[278]reg", DumpEntry{top.scratchpad.mem[278] reg});
        res.insert_or_assign("top.scratchpad.mem[279]reg", DumpEntry{top.scratchpad.mem[279] reg});
        res.insert_or_assign("top.scratchpad.mem[280]reg", DumpEntry{top.scratchpad.mem[280] reg});
        res.insert_or_assign("top.scratchpad.mem[281]reg", DumpEntry{top.scratchpad.mem[281] reg});
        res.insert_or_assign("top.scratchpad.mem[282]reg", DumpEntry{top.scratchpad.mem[282] reg});
        res.insert_or_assign("top.scratchpad.mem[283]reg", DumpEntry{top.scratchpad.mem[283] reg});
        res.insert_or_assign("top.scratchpad.mem[284]reg", DumpEntry{top.scratchpad.mem[284] reg});
        res.insert_or_assign("top.scratchpad.mem[285]reg", DumpEntry{top.scratchpad.mem[285] reg});
        res.insert_or_assign("top.scratchpad.mem[286]reg", DumpEntry{top.scratchpad.mem[286] reg});
        res.insert_or_assign("top.scratchpad.mem[287]reg", DumpEntry{top.scratchpad.mem[287] reg});
        res.insert_or_assign("top.scratchpad.mem[288]reg", DumpEntry{top.scratchpad.mem[288] reg});
        res.insert_or_assign("top.scratchpad.mem[289]reg", DumpEntry{top.scratchpad.mem[289] reg});
        res.insert_or_assign("top.scratchpad.mem[290]reg", DumpEntry{top.scratchpad.mem[290] reg});
        res.insert_or_assign("top.scratchpad.mem[291]reg", DumpEntry{top.scratchpad.mem[291] reg});
        res.insert_or_assign("top.scratchpad.mem[292]reg", DumpEntry{top.scratchpad.mem[292] reg});
        res.insert_or_assign("top.scratchpad.mem[293]reg", DumpEntry{top.scratchpad.mem[293] reg});
        res.insert_or_assign("top.scratchpad.mem[294]reg", DumpEntry{top.scratchpad.mem[294] reg});
        res.insert_or_assign("top.scratchpad.mem[295]reg", DumpEntry{top.scratchpad.mem[295] reg});
        res.insert_or_assign("top.scratchpad.mem[296]reg", DumpEntry{top.scratchpad.mem[296] reg});
        res.insert_or_assign("top.scratchpad.mem[297]reg", DumpEntry{top.scratchpad.mem[297] reg});
        res.insert_or_assign("top.scratchpad.mem[298]reg", DumpEntry{top.scratchpad.mem[298] reg});
        res.insert_or_assign("top.scratchpad.mem[299]reg", DumpEntry{top.scratchpad.mem[299] reg});
        res.insert_or_assign("top.scratchpad.mem[300]reg", DumpEntry{top.scratchpad.mem[300] reg});
        res.insert_or_assign("top.scratchpad.mem[301]reg", DumpEntry{top.scratchpad.mem[301] reg});
        res.insert_or_assign("top.scratchpad.mem[302]reg", DumpEntry{top.scratchpad.mem[302] reg});
        res.insert_or_assign("top.scratchpad.mem[303]reg", DumpEntry{top.scratchpad.mem[303] reg});
        res.insert_or_assign("top.scratchpad.mem[304]reg", DumpEntry{top.scratchpad.mem[304] reg});
        res.insert_or_assign("top.scratchpad.mem[305]reg", DumpEntry{top.scratchpad.mem[305] reg});
        res.insert_or_assign("top.scratchpad.mem[306]reg", DumpEntry{top.scratchpad.mem[306] reg});
        res.insert_or_assign("top.scratchpad.mem[307]reg", DumpEntry{top.scratchpad.mem[307] reg});
        res.insert_or_assign("top.scratchpad.mem[308]reg", DumpEntry{top.scratchpad.mem[308] reg});
        res.insert_or_assign("top.scratchpad.mem[309]reg", DumpEntry{top.scratchpad.mem[309] reg});
        res.insert_or_assign("top.scratchpad.mem[310]reg", DumpEntry{top.scratchpad.mem[310] reg});
        res.insert_or_assign("top.scratchpad.mem[311]reg", DumpEntry{top.scratchpad.mem[311] reg});
        res.insert_or_assign("top.scratchpad.mem[312]reg", DumpEntry{top.scratchpad.mem[312] reg});
        res.insert_or_assign("top.scratchpad.mem[313]reg", DumpEntry{top.scratchpad.mem[313] reg});
        res.insert_or_assign("top.scratchpad.mem[314]reg", DumpEntry{top.scratchpad.mem[314] reg});
        res.insert_or_assign("top.scratchpad.mem[315]reg", DumpEntry{top.scratchpad.mem[315] reg});
        res.insert_or_assign("top.scratchpad.mem[316]reg", DumpEntry{top.scratchpad.mem[316] reg});
        res.insert_or_assign("top.scratchpad.mem[317]reg", DumpEntry{top.scratchpad.mem[317] reg});
        res.insert_or_assign("top.scratchpad.mem[318]reg", DumpEntry{top.scratchpad.mem[318] reg});
        res.insert_or_assign("top.scratchpad.mem[319]reg", DumpEntry{top.scratchpad.mem[319] reg});
        res.insert_or_assign("top.scratchpad.mem[320]reg", DumpEntry{top.scratchpad.mem[320] reg});
        res.insert_or_assign("top.scratchpad.mem[321]reg", DumpEntry{top.scratchpad.mem[321] reg});
        res.insert_or_assign("top.scratchpad.mem[322]reg", DumpEntry{top.scratchpad.mem[322] reg});
        res.insert_or_assign("top.scratchpad.mem[323]reg", DumpEntry{top.scratchpad.mem[323] reg});
        res.insert_or_assign("top.scratchpad.mem[324]reg", DumpEntry{top.scratchpad.mem[324] reg});
        res.insert_or_assign("top.scratchpad.mem[325]reg", DumpEntry{top.scratchpad.mem[325] reg});
        res.insert_or_assign("top.scratchpad.mem[326]reg", DumpEntry{top.scratchpad.mem[326] reg});
        res.insert_or_assign("top.scratchpad.mem[327]reg", DumpEntry{top.scratchpad.mem[327] reg});
        res.insert_or_assign("top.scratchpad.mem[328]reg", DumpEntry{top.scratchpad.mem[328] reg});
        res.insert_or_assign("top.scratchpad.mem[329]reg", DumpEntry{top.scratchpad.mem[329] reg});
        res.insert_or_assign("top.scratchpad.mem[330]reg", DumpEntry{top.scratchpad.mem[330] reg});
        res.insert_or_assign("top.scratchpad.mem[331]reg", DumpEntry{top.scratchpad.mem[331] reg});
        res.insert_or_assign("top.scratchpad.mem[332]reg", DumpEntry{top.scratchpad.mem[332] reg});
        res.insert_or_assign("top.scratchpad.mem[333]reg", DumpEntry{top.scratchpad.mem[333] reg});
        res.insert_or_assign("top.scratchpad.mem[334]reg", DumpEntry{top.scratchpad.mem[334] reg});
        res.insert_or_assign("top.scratchpad.mem[335]reg", DumpEntry{top.scratchpad.mem[335] reg});
        res.insert_or_assign("top.scratchpad.mem[336]reg", DumpEntry{top.scratchpad.mem[336] reg});
        res.insert_or_assign("top.scratchpad.mem[337]reg", DumpEntry{top.scratchpad.mem[337] reg});
        res.insert_or_assign("top.scratchpad.mem[338]reg", DumpEntry{top.scratchpad.mem[338] reg});
        res.insert_or_assign("top.scratchpad.mem[339]reg", DumpEntry{top.scratchpad.mem[339] reg});
        res.insert_or_assign("top.scratchpad.mem[340]reg", DumpEntry{top.scratchpad.mem[340] reg});
        res.insert_or_assign("top.scratchpad.mem[341]reg", DumpEntry{top.scratchpad.mem[341] reg});
        res.insert_or_assign("top.scratchpad.mem[342]reg", DumpEntry{top.scratchpad.mem[342] reg});
        res.insert_or_assign("top.scratchpad.mem[343]reg", DumpEntry{top.scratchpad.mem[343] reg});
        res.insert_or_assign("top.scratchpad.mem[344]reg", DumpEntry{top.scratchpad.mem[344] reg});
        res.insert_or_assign("top.scratchpad.mem[345]reg", DumpEntry{top.scratchpad.mem[345] reg});
        res.insert_or_assign("top.scratchpad.mem[346]reg", DumpEntry{top.scratchpad.mem[346] reg});
        res.insert_or_assign("top.scratchpad.mem[347]reg", DumpEntry{top.scratchpad.mem[347] reg});
        res.insert_or_assign("top.scratchpad.mem[348]reg", DumpEntry{top.scratchpad.mem[348] reg});
        res.insert_or_assign("top.scratchpad.mem[349]reg", DumpEntry{top.scratchpad.mem[349] reg});
        res.insert_or_assign("top.scratchpad.mem[350]reg", DumpEntry{top.scratchpad.mem[350] reg});
        res.insert_or_assign("top.scratchpad.mem[351]reg", DumpEntry{top.scratchpad.mem[351] reg});
        res.insert_or_assign("top.scratchpad.mem[352]reg", DumpEntry{top.scratchpad.mem[352] reg});
        res.insert_or_assign("top.scratchpad.mem[353]reg", DumpEntry{top.scratchpad.mem[353] reg});
        res.insert_or_assign("top.scratchpad.mem[354]reg", DumpEntry{top.scratchpad.mem[354] reg});
        res.insert_or_assign("top.scratchpad.mem[355]reg", DumpEntry{top.scratchpad.mem[355] reg});
        res.insert_or_assign("top.scratchpad.mem[356]reg", DumpEntry{top.scratchpad.mem[356] reg});
        res.insert_or_assign("top.scratchpad.mem[357]reg", DumpEntry{top.scratchpad.mem[357] reg});
        res.insert_or_assign("top.scratchpad.mem[358]reg", DumpEntry{top.scratchpad.mem[358] reg});
        res.insert_or_assign("top.scratchpad.mem[359]reg", DumpEntry{top.scratchpad.mem[359] reg});
        res.insert_or_assign("top.scratchpad.mem[360]reg", DumpEntry{top.scratchpad.mem[360] reg});
        res.insert_or_assign("top.scratchpad.mem[361]reg", DumpEntry{top.scratchpad.mem[361] reg});
        res.insert_or_assign("top.scratchpad.mem[362]reg", DumpEntry{top.scratchpad.mem[362] reg});
        res.insert_or_assign("top.scratchpad.mem[363]reg", DumpEntry{top.scratchpad.mem[363] reg});
        res.insert_or_assign("top.scratchpad.mem[364]reg", DumpEntry{top.scratchpad.mem[364] reg});
        res.insert_or_assign("top.scratchpad.mem[365]reg", DumpEntry{top.scratchpad.mem[365] reg});
        res.insert_or_assign("top.scratchpad.mem[366]reg", DumpEntry{top.scratchpad.mem[366] reg});
        res.insert_or_assign("top.scratchpad.mem[367]reg", DumpEntry{top.scratchpad.mem[367] reg});
        res.insert_or_assign("top.scratchpad.mem[368]reg", DumpEntry{top.scratchpad.mem[368] reg});
        res.insert_or_assign("top.scratchpad.mem[369]reg", DumpEntry{top.scratchpad.mem[369] reg});
        res.insert_or_assign("top.scratchpad.mem[370]reg", DumpEntry{top.scratchpad.mem[370] reg});
        res.insert_or_assign("top.scratchpad.mem[371]reg", DumpEntry{top.scratchpad.mem[371] reg});
        res.insert_or_assign("top.scratchpad.mem[372]reg", DumpEntry{top.scratchpad.mem[372] reg});
        res.insert_or_assign("top.scratchpad.mem[373]reg", DumpEntry{top.scratchpad.mem[373] reg});
        res.insert_or_assign("top.scratchpad.mem[374]reg", DumpEntry{top.scratchpad.mem[374] reg});
        res.insert_or_assign("top.scratchpad.mem[375]reg", DumpEntry{top.scratchpad.mem[375] reg});
        res.insert_or_assign("top.scratchpad.mem[376]reg", DumpEntry{top.scratchpad.mem[376] reg});
        res.insert_or_assign("top.scratchpad.mem[377]reg", DumpEntry{top.scratchpad.mem[377] reg});
        res.insert_or_assign("top.scratchpad.mem[378]reg", DumpEntry{top.scratchpad.mem[378] reg});
        res.insert_or_assign("top.scratchpad.mem[379]reg", DumpEntry{top.scratchpad.mem[379] reg});
        res.insert_or_assign("top.scratchpad.mem[380]reg", DumpEntry{top.scratchpad.mem[380] reg});
        res.insert_or_assign("top.scratchpad.mem[381]reg", DumpEntry{top.scratchpad.mem[381] reg});
        res.insert_or_assign("top.scratchpad.mem[382]reg", DumpEntry{top.scratchpad.mem[382] reg});
        res.insert_or_assign("top.scratchpad.mem[383]reg", DumpEntry{top.scratchpad.mem[383] reg});
        res.insert_or_assign("top.scratchpad.mem[384]reg", DumpEntry{top.scratchpad.mem[384] reg});
        res.insert_or_assign("top.scratchpad.mem[385]reg", DumpEntry{top.scratchpad.mem[385] reg});
        res.insert_or_assign("top.scratchpad.mem[386]reg", DumpEntry{top.scratchpad.mem[386] reg});
        res.insert_or_assign("top.scratchpad.mem[387]reg", DumpEntry{top.scratchpad.mem[387] reg});
        res.insert_or_assign("top.scratchpad.mem[388]reg", DumpEntry{top.scratchpad.mem[388] reg});
        res.insert_or_assign("top.scratchpad.mem[389]reg", DumpEntry{top.scratchpad.mem[389] reg});
        res.insert_or_assign("top.scratchpad.mem[390]reg", DumpEntry{top.scratchpad.mem[390] reg});
        res.insert_or_assign("top.scratchpad.mem[391]reg", DumpEntry{top.scratchpad.mem[391] reg});
        res.insert_or_assign("top.scratchpad.mem[392]reg", DumpEntry{top.scratchpad.mem[392] reg});
        res.insert_or_assign("top.scratchpad.mem[393]reg", DumpEntry{top.scratchpad.mem[393] reg});
        res.insert_or_assign("top.scratchpad.mem[394]reg", DumpEntry{top.scratchpad.mem[394] reg});
        res.insert_or_assign("top.scratchpad.mem[395]reg", DumpEntry{top.scratchpad.mem[395] reg});
        res.insert_or_assign("top.scratchpad.mem[396]reg", DumpEntry{top.scratchpad.mem[396] reg});
        res.insert_or_assign("top.scratchpad.mem[397]reg", DumpEntry{top.scratchpad.mem[397] reg});
        res.insert_or_assign("top.scratchpad.mem[398]reg", DumpEntry{top.scratchpad.mem[398] reg});
        res.insert_or_assign("top.scratchpad.mem[399]reg", DumpEntry{top.scratchpad.mem[399] reg});
        res.insert_or_assign("top.scratchpad.mem[400]reg", DumpEntry{top.scratchpad.mem[400] reg});
        res.insert_or_assign("top.scratchpad.mem[401]reg", DumpEntry{top.scratchpad.mem[401] reg});
        res.insert_or_assign("top.scratchpad.mem[402]reg", DumpEntry{top.scratchpad.mem[402] reg});
        res.insert_or_assign("top.scratchpad.mem[403]reg", DumpEntry{top.scratchpad.mem[403] reg});
        res.insert_or_assign("top.scratchpad.mem[404]reg", DumpEntry{top.scratchpad.mem[404] reg});
        res.insert_or_assign("top.scratchpad.mem[405]reg", DumpEntry{top.scratchpad.mem[405] reg});
        res.insert_or_assign("top.scratchpad.mem[406]reg", DumpEntry{top.scratchpad.mem[406] reg});
        res.insert_or_assign("top.scratchpad.mem[407]reg", DumpEntry{top.scratchpad.mem[407] reg});
        res.insert_or_assign("top.scratchpad.mem[408]reg", DumpEntry{top.scratchpad.mem[408] reg});
        res.insert_or_assign("top.scratchpad.mem[409]reg", DumpEntry{top.scratchpad.mem[409] reg});
        res.insert_or_assign("top.scratchpad.mem[410]reg", DumpEntry{top.scratchpad.mem[410] reg});
        res.insert_or_assign("top.scratchpad.mem[411]reg", DumpEntry{top.scratchpad.mem[411] reg});
        res.insert_or_assign("top.scratchpad.mem[412]reg", DumpEntry{top.scratchpad.mem[412] reg});
        res.insert_or_assign("top.scratchpad.mem[413]reg", DumpEntry{top.scratchpad.mem[413] reg});
        res.insert_or_assign("top.scratchpad.mem[414]reg", DumpEntry{top.scratchpad.mem[414] reg});
        res.insert_or_assign("top.scratchpad.mem[415]reg", DumpEntry{top.scratchpad.mem[415] reg});
        res.insert_or_assign("top.scratchpad.mem[416]reg", DumpEntry{top.scratchpad.mem[416] reg});
        res.insert_or_assign("top.scratchpad.mem[417]reg", DumpEntry{top.scratchpad.mem[417] reg});
        res.insert_or_assign("top.scratchpad.mem[418]reg", DumpEntry{top.scratchpad.mem[418] reg});
        res.insert_or_assign("top.scratchpad.mem[419]reg", DumpEntry{top.scratchpad.mem[419] reg});
        res.insert_or_assign("top.scratchpad.mem[420]reg", DumpEntry{top.scratchpad.mem[420] reg});
        res.insert_or_assign("top.scratchpad.mem[421]reg", DumpEntry{top.scratchpad.mem[421] reg});
        res.insert_or_assign("top.scratchpad.mem[422]reg", DumpEntry{top.scratchpad.mem[422] reg});
        res.insert_or_assign("top.scratchpad.mem[423]reg", DumpEntry{top.scratchpad.mem[423] reg});
        res.insert_or_assign("top.scratchpad.mem[424]reg", DumpEntry{top.scratchpad.mem[424] reg});
        res.insert_or_assign("top.scratchpad.mem[425]reg", DumpEntry{top.scratchpad.mem[425] reg});
        res.insert_or_assign("top.scratchpad.mem[426]reg", DumpEntry{top.scratchpad.mem[426] reg});
        res.insert_or_assign("top.scratchpad.mem[427]reg", DumpEntry{top.scratchpad.mem[427] reg});
        res.insert_or_assign("top.scratchpad.mem[428]reg", DumpEntry{top.scratchpad.mem[428] reg});
        res.insert_or_assign("top.scratchpad.mem[429]reg", DumpEntry{top.scratchpad.mem[429] reg});
        res.insert_or_assign("top.scratchpad.mem[430]reg", DumpEntry{top.scratchpad.mem[430] reg});
        res.insert_or_assign("top.scratchpad.mem[431]reg", DumpEntry{top.scratchpad.mem[431] reg});
        res.insert_or_assign("top.scratchpad.mem[432]reg", DumpEntry{top.scratchpad.mem[432] reg});
        res.insert_or_assign("top.scratchpad.mem[433]reg", DumpEntry{top.scratchpad.mem[433] reg});
        res.insert_or_assign("top.scratchpad.mem[434]reg", DumpEntry{top.scratchpad.mem[434] reg});
        res.insert_or_assign("top.scratchpad.mem[435]reg", DumpEntry{top.scratchpad.mem[435] reg});
        res.insert_or_assign("top.scratchpad.mem[436]reg", DumpEntry{top.scratchpad.mem[436] reg});
        res.insert_or_assign("top.scratchpad.mem[437]reg", DumpEntry{top.scratchpad.mem[437] reg});
        res.insert_or_assign("top.scratchpad.mem[438]reg", DumpEntry{top.scratchpad.mem[438] reg});
        res.insert_or_assign("top.scratchpad.mem[439]reg", DumpEntry{top.scratchpad.mem[439] reg});
        res.insert_or_assign("top.scratchpad.mem[440]reg", DumpEntry{top.scratchpad.mem[440] reg});
        res.insert_or_assign("top.scratchpad.mem[441]reg", DumpEntry{top.scratchpad.mem[441] reg});
        res.insert_or_assign("top.scratchpad.mem[442]reg", DumpEntry{top.scratchpad.mem[442] reg});
        res.insert_or_assign("top.scratchpad.mem[443]reg", DumpEntry{top.scratchpad.mem[443] reg});
        res.insert_or_assign("top.scratchpad.mem[444]reg", DumpEntry{top.scratchpad.mem[444] reg});
        res.insert_or_assign("top.scratchpad.mem[445]reg", DumpEntry{top.scratchpad.mem[445] reg});
        res.insert_or_assign("top.scratchpad.mem[446]reg", DumpEntry{top.scratchpad.mem[446] reg});
        res.insert_or_assign("top.scratchpad.mem[447]reg", DumpEntry{top.scratchpad.mem[447] reg});
        res.insert_or_assign("top.scratchpad.mem[448]reg", DumpEntry{top.scratchpad.mem[448] reg});
        res.insert_or_assign("top.scratchpad.mem[449]reg", DumpEntry{top.scratchpad.mem[449] reg});
        res.insert_or_assign("top.scratchpad.mem[450]reg", DumpEntry{top.scratchpad.mem[450] reg});
        res.insert_or_assign("top.scratchpad.mem[451]reg", DumpEntry{top.scratchpad.mem[451] reg});
        res.insert_or_assign("top.scratchpad.mem[452]reg", DumpEntry{top.scratchpad.mem[452] reg});
        res.insert_or_assign("top.scratchpad.mem[453]reg", DumpEntry{top.scratchpad.mem[453] reg});
        res.insert_or_assign("top.scratchpad.mem[454]reg", DumpEntry{top.scratchpad.mem[454] reg});
        res.insert_or_assign("top.scratchpad.mem[455]reg", DumpEntry{top.scratchpad.mem[455] reg});
        res.insert_or_assign("top.scratchpad.mem[456]reg", DumpEntry{top.scratchpad.mem[456] reg});
        res.insert_or_assign("top.scratchpad.mem[457]reg", DumpEntry{top.scratchpad.mem[457] reg});
        res.insert_or_assign("top.scratchpad.mem[458]reg", DumpEntry{top.scratchpad.mem[458] reg});
        res.insert_or_assign("top.scratchpad.mem[459]reg", DumpEntry{top.scratchpad.mem[459] reg});
        res.insert_or_assign("top.scratchpad.mem[460]reg", DumpEntry{top.scratchpad.mem[460] reg});
        res.insert_or_assign("top.scratchpad.mem[461]reg", DumpEntry{top.scratchpad.mem[461] reg});
        res.insert_or_assign("top.scratchpad.mem[462]reg", DumpEntry{top.scratchpad.mem[462] reg});
        res.insert_or_assign("top.scratchpad.mem[463]reg", DumpEntry{top.scratchpad.mem[463] reg});
        res.insert_or_assign("top.scratchpad.mem[464]reg", DumpEntry{top.scratchpad.mem[464] reg});
        res.insert_or_assign("top.scratchpad.mem[465]reg", DumpEntry{top.scratchpad.mem[465] reg});
        res.insert_or_assign("top.scratchpad.mem[466]reg", DumpEntry{top.scratchpad.mem[466] reg});
        res.insert_or_assign("top.scratchpad.mem[467]reg", DumpEntry{top.scratchpad.mem[467] reg});
        res.insert_or_assign("top.scratchpad.mem[468]reg", DumpEntry{top.scratchpad.mem[468] reg});
        res.insert_or_assign("top.scratchpad.mem[469]reg", DumpEntry{top.scratchpad.mem[469] reg});
        res.insert_or_assign("top.scratchpad.mem[470]reg", DumpEntry{top.scratchpad.mem[470] reg});
        res.insert_or_assign("top.scratchpad.mem[471]reg", DumpEntry{top.scratchpad.mem[471] reg});
        res.insert_or_assign("top.scratchpad.mem[472]reg", DumpEntry{top.scratchpad.mem[472] reg});
        res.insert_or_assign("top.scratchpad.mem[473]reg", DumpEntry{top.scratchpad.mem[473] reg});
        res.insert_or_assign("top.scratchpad.mem[474]reg", DumpEntry{top.scratchpad.mem[474] reg});
        res.insert_or_assign("top.scratchpad.mem[475]reg", DumpEntry{top.scratchpad.mem[475] reg});
        res.insert_or_assign("top.scratchpad.mem[476]reg", DumpEntry{top.scratchpad.mem[476] reg});
        res.insert_or_assign("top.scratchpad.mem[477]reg", DumpEntry{top.scratchpad.mem[477] reg});
        res.insert_or_assign("top.scratchpad.mem[478]reg", DumpEntry{top.scratchpad.mem[478] reg});
        res.insert_or_assign("top.scratchpad.mem[479]reg", DumpEntry{top.scratchpad.mem[479] reg});
        res.insert_or_assign("top.scratchpad.mem[480]reg", DumpEntry{top.scratchpad.mem[480] reg});
        res.insert_or_assign("top.scratchpad.mem[481]reg", DumpEntry{top.scratchpad.mem[481] reg});
        res.insert_or_assign("top.scratchpad.mem[482]reg", DumpEntry{top.scratchpad.mem[482] reg});
        res.insert_or_assign("top.scratchpad.mem[483]reg", DumpEntry{top.scratchpad.mem[483] reg});
        res.insert_or_assign("top.scratchpad.mem[484]reg", DumpEntry{top.scratchpad.mem[484] reg});
        res.insert_or_assign("top.scratchpad.mem[485]reg", DumpEntry{top.scratchpad.mem[485] reg});
        res.insert_or_assign("top.scratchpad.mem[486]reg", DumpEntry{top.scratchpad.mem[486] reg});
        res.insert_or_assign("top.scratchpad.mem[487]reg", DumpEntry{top.scratchpad.mem[487] reg});
        res.insert_or_assign("top.scratchpad.mem[488]reg", DumpEntry{top.scratchpad.mem[488] reg});
        res.insert_or_assign("top.scratchpad.mem[489]reg", DumpEntry{top.scratchpad.mem[489] reg});
        res.insert_or_assign("top.scratchpad.mem[490]reg", DumpEntry{top.scratchpad.mem[490] reg});
        res.insert_or_assign("top.scratchpad.mem[491]reg", DumpEntry{top.scratchpad.mem[491] reg});
        res.insert_or_assign("top.scratchpad.mem[492]reg", DumpEntry{top.scratchpad.mem[492] reg});
        res.insert_or_assign("top.scratchpad.mem[493]reg", DumpEntry{top.scratchpad.mem[493] reg});
        res.insert_or_assign("top.scratchpad.mem[494]reg", DumpEntry{top.scratchpad.mem[494] reg});
        res.insert_or_assign("top.scratchpad.mem[495]reg", DumpEntry{top.scratchpad.mem[495] reg});
        res.insert_or_assign("top.scratchpad.mem[496]reg", DumpEntry{top.scratchpad.mem[496] reg});
        res.insert_or_assign("top.scratchpad.mem[497]reg", DumpEntry{top.scratchpad.mem[497] reg});
        res.insert_or_assign("top.scratchpad.mem[498]reg", DumpEntry{top.scratchpad.mem[498] reg});
        res.insert_or_assign("top.scratchpad.mem[499]reg", DumpEntry{top.scratchpad.mem[499] reg});
        res.insert_or_assign("top.scratchpad.mem[500]reg", DumpEntry{top.scratchpad.mem[500] reg});
        res.insert_or_assign("top.scratchpad.mem[501]reg", DumpEntry{top.scratchpad.mem[501] reg});
        res.insert_or_assign("top.scratchpad.mem[502]reg", DumpEntry{top.scratchpad.mem[502] reg});
        res.insert_or_assign("top.scratchpad.mem[503]reg", DumpEntry{top.scratchpad.mem[503] reg});
        res.insert_or_assign("top.scratchpad.mem[504]reg", DumpEntry{top.scratchpad.mem[504] reg});
        res.insert_or_assign("top.scratchpad.mem[505]reg", DumpEntry{top.scratchpad.mem[505] reg});
        res.insert_or_assign("top.scratchpad.mem[506]reg", DumpEntry{top.scratchpad.mem[506] reg});
        res.insert_or_assign("top.scratchpad.mem[507]reg", DumpEntry{top.scratchpad.mem[507] reg});
        res.insert_or_assign("top.scratchpad.mem[508]reg", DumpEntry{top.scratchpad.mem[508] reg});
        res.insert_or_assign("top.scratchpad.mem[509]reg", DumpEntry{top.scratchpad.mem[509] reg});
        res.insert_or_assign("top.scratchpad.mem[510]reg", DumpEntry{top.scratchpad.mem[510] reg});
        res.insert_or_assign("top.scratchpad.mem[511]reg", DumpEntry{top.scratchpad.mem[511] reg});
        res.insert_or_assign("top.scratchpad.mem[512]reg", DumpEntry{top.scratchpad.mem[512] reg});
        res.insert_or_assign("top.scratchpad.mem[513]reg", DumpEntry{top.scratchpad.mem[513] reg});
        res.insert_or_assign("top.scratchpad.mem[514]reg", DumpEntry{top.scratchpad.mem[514] reg});
        res.insert_or_assign("top.scratchpad.mem[515]reg", DumpEntry{top.scratchpad.mem[515] reg});
        res.insert_or_assign("top.scratchpad.mem[516]reg", DumpEntry{top.scratchpad.mem[516] reg});
        res.insert_or_assign("top.scratchpad.mem[517]reg", DumpEntry{top.scratchpad.mem[517] reg});
        res.insert_or_assign("top.scratchpad.mem[518]reg", DumpEntry{top.scratchpad.mem[518] reg});
        res.insert_or_assign("top.scratchpad.mem[519]reg", DumpEntry{top.scratchpad.mem[519] reg});
        res.insert_or_assign("top.scratchpad.mem[520]reg", DumpEntry{top.scratchpad.mem[520] reg});
        res.insert_or_assign("top.scratchpad.mem[521]reg", DumpEntry{top.scratchpad.mem[521] reg});
        res.insert_or_assign("top.scratchpad.mem[522]reg", DumpEntry{top.scratchpad.mem[522] reg});
        res.insert_or_assign("top.scratchpad.mem[523]reg", DumpEntry{top.scratchpad.mem[523] reg});
        res.insert_or_assign("top.scratchpad.mem[524]reg", DumpEntry{top.scratchpad.mem[524] reg});
        res.insert_or_assign("top.scratchpad.mem[525]reg", DumpEntry{top.scratchpad.mem[525] reg});
        res.insert_or_assign("top.scratchpad.mem[526]reg", DumpEntry{top.scratchpad.mem[526] reg});
        res.insert_or_assign("top.scratchpad.mem[527]reg", DumpEntry{top.scratchpad.mem[527] reg});
        res.insert_or_assign("top.scratchpad.mem[528]reg", DumpEntry{top.scratchpad.mem[528] reg});
        res.insert_or_assign("top.scratchpad.mem[529]reg", DumpEntry{top.scratchpad.mem[529] reg});
        res.insert_or_assign("top.scratchpad.mem[530]reg", DumpEntry{top.scratchpad.mem[530] reg});
        res.insert_or_assign("top.scratchpad.mem[531]reg", DumpEntry{top.scratchpad.mem[531] reg});
        res.insert_or_assign("top.scratchpad.mem[532]reg", DumpEntry{top.scratchpad.mem[532] reg});
        res.insert_or_assign("top.scratchpad.mem[533]reg", DumpEntry{top.scratchpad.mem[533] reg});
        res.insert_or_assign("top.scratchpad.mem[534]reg", DumpEntry{top.scratchpad.mem[534] reg});
        res.insert_or_assign("top.scratchpad.mem[535]reg", DumpEntry{top.scratchpad.mem[535] reg});
        res.insert_or_assign("top.scratchpad.mem[536]reg", DumpEntry{top.scratchpad.mem[536] reg});
        res.insert_or_assign("top.scratchpad.mem[537]reg", DumpEntry{top.scratchpad.mem[537] reg});
        res.insert_or_assign("top.scratchpad.mem[538]reg", DumpEntry{top.scratchpad.mem[538] reg});
        res.insert_or_assign("top.scratchpad.mem[539]reg", DumpEntry{top.scratchpad.mem[539] reg});
        res.insert_or_assign("top.scratchpad.mem[540]reg", DumpEntry{top.scratchpad.mem[540] reg});
        res.insert_or_assign("top.scratchpad.mem[541]reg", DumpEntry{top.scratchpad.mem[541] reg});
        res.insert_or_assign("top.scratchpad.mem[542]reg", DumpEntry{top.scratchpad.mem[542] reg});
        res.insert_or_assign("top.scratchpad.mem[543]reg", DumpEntry{top.scratchpad.mem[543] reg});
        res.insert_or_assign("top.scratchpad.mem[544]reg", DumpEntry{top.scratchpad.mem[544] reg});
        res.insert_or_assign("top.scratchpad.mem[545]reg", DumpEntry{top.scratchpad.mem[545] reg});
        res.insert_or_assign("top.scratchpad.mem[546]reg", DumpEntry{top.scratchpad.mem[546] reg});
        res.insert_or_assign("top.scratchpad.mem[547]reg", DumpEntry{top.scratchpad.mem[547] reg});
        res.insert_or_assign("top.scratchpad.mem[548]reg", DumpEntry{top.scratchpad.mem[548] reg});
        res.insert_or_assign("top.scratchpad.mem[549]reg", DumpEntry{top.scratchpad.mem[549] reg});
        res.insert_or_assign("top.scratchpad.mem[550]reg", DumpEntry{top.scratchpad.mem[550] reg});
        res.insert_or_assign("top.scratchpad.mem[551]reg", DumpEntry{top.scratchpad.mem[551] reg});
        res.insert_or_assign("top.scratchpad.mem[552]reg", DumpEntry{top.scratchpad.mem[552] reg});
        res.insert_or_assign("top.scratchpad.mem[553]reg", DumpEntry{top.scratchpad.mem[553] reg});
        res.insert_or_assign("top.scratchpad.mem[554]reg", DumpEntry{top.scratchpad.mem[554] reg});
        res.insert_or_assign("top.scratchpad.mem[555]reg", DumpEntry{top.scratchpad.mem[555] reg});
        res.insert_or_assign("top.scratchpad.mem[556]reg", DumpEntry{top.scratchpad.mem[556] reg});
        res.insert_or_assign("top.scratchpad.mem[557]reg", DumpEntry{top.scratchpad.mem[557] reg});
        res.insert_or_assign("top.scratchpad.mem[558]reg", DumpEntry{top.scratchpad.mem[558] reg});
        res.insert_or_assign("top.scratchpad.mem[559]reg", DumpEntry{top.scratchpad.mem[559] reg});
        res.insert_or_assign("top.scratchpad.mem[560]reg", DumpEntry{top.scratchpad.mem[560] reg});
        res.insert_or_assign("top.scratchpad.mem[561]reg", DumpEntry{top.scratchpad.mem[561] reg});
        res.insert_or_assign("top.scratchpad.mem[562]reg", DumpEntry{top.scratchpad.mem[562] reg});
        res.insert_or_assign("top.scratchpad.mem[563]reg", DumpEntry{top.scratchpad.mem[563] reg});
        res.insert_or_assign("top.scratchpad.mem[564]reg", DumpEntry{top.scratchpad.mem[564] reg});
        res.insert_or_assign("top.scratchpad.mem[565]reg", DumpEntry{top.scratchpad.mem[565] reg});
        res.insert_or_assign("top.scratchpad.mem[566]reg", DumpEntry{top.scratchpad.mem[566] reg});
        res.insert_or_assign("top.scratchpad.mem[567]reg", DumpEntry{top.scratchpad.mem[567] reg});
        res.insert_or_assign("top.scratchpad.mem[568]reg", DumpEntry{top.scratchpad.mem[568] reg});
        res.insert_or_assign("top.scratchpad.mem[569]reg", DumpEntry{top.scratchpad.mem[569] reg});
        res.insert_or_assign("top.scratchpad.mem[570]reg", DumpEntry{top.scratchpad.mem[570] reg});
        res.insert_or_assign("top.scratchpad.mem[571]reg", DumpEntry{top.scratchpad.mem[571] reg});
        res.insert_or_assign("top.scratchpad.mem[572]reg", DumpEntry{top.scratchpad.mem[572] reg});
        res.insert_or_assign("top.scratchpad.mem[573]reg", DumpEntry{top.scratchpad.mem[573] reg});
        res.insert_or_assign("top.scratchpad.mem[574]reg", DumpEntry{top.scratchpad.mem[574] reg});
        res.insert_or_assign("top.scratchpad.mem[575]reg", DumpEntry{top.scratchpad.mem[575] reg});
        res.insert_or_assign("top.scratchpad.mem[576]reg", DumpEntry{top.scratchpad.mem[576] reg});
        res.insert_or_assign("top.scratchpad.mem[577]reg", DumpEntry{top.scratchpad.mem[577] reg});
        res.insert_or_assign("top.scratchpad.mem[578]reg", DumpEntry{top.scratchpad.mem[578] reg});
        res.insert_or_assign("top.scratchpad.mem[579]reg", DumpEntry{top.scratchpad.mem[579] reg});
        res.insert_or_assign("top.scratchpad.mem[580]reg", DumpEntry{top.scratchpad.mem[580] reg});
        res.insert_or_assign("top.scratchpad.mem[581]reg", DumpEntry{top.scratchpad.mem[581] reg});
        res.insert_or_assign("top.scratchpad.mem[582]reg", DumpEntry{top.scratchpad.mem[582] reg});
        res.insert_or_assign("top.scratchpad.mem[583]reg", DumpEntry{top.scratchpad.mem[583] reg});
        res.insert_or_assign("top.scratchpad.mem[584]reg", DumpEntry{top.scratchpad.mem[584] reg});
        res.insert_or_assign("top.scratchpad.mem[585]reg", DumpEntry{top.scratchpad.mem[585] reg});
        res.insert_or_assign("top.scratchpad.mem[586]reg", DumpEntry{top.scratchpad.mem[586] reg});
        res.insert_or_assign("top.scratchpad.mem[587]reg", DumpEntry{top.scratchpad.mem[587] reg});
        res.insert_or_assign("top.scratchpad.mem[588]reg", DumpEntry{top.scratchpad.mem[588] reg});
        res.insert_or_assign("top.scratchpad.mem[589]reg", DumpEntry{top.scratchpad.mem[589] reg});
        res.insert_or_assign("top.scratchpad.mem[590]reg", DumpEntry{top.scratchpad.mem[590] reg});
        res.insert_or_assign("top.scratchpad.mem[591]reg", DumpEntry{top.scratchpad.mem[591] reg});
        res.insert_or_assign("top.scratchpad.mem[592]reg", DumpEntry{top.scratchpad.mem[592] reg});
        res.insert_or_assign("top.scratchpad.mem[593]reg", DumpEntry{top.scratchpad.mem[593] reg});
        res.insert_or_assign("top.scratchpad.mem[594]reg", DumpEntry{top.scratchpad.mem[594] reg});
        res.insert_or_assign("top.scratchpad.mem[595]reg", DumpEntry{top.scratchpad.mem[595] reg});
        res.insert_or_assign("top.scratchpad.mem[596]reg", DumpEntry{top.scratchpad.mem[596] reg});
        res.insert_or_assign("top.scratchpad.mem[597]reg", DumpEntry{top.scratchpad.mem[597] reg});
        res.insert_or_assign("top.scratchpad.mem[598]reg", DumpEntry{top.scratchpad.mem[598] reg});
        res.insert_or_assign("top.scratchpad.mem[599]reg", DumpEntry{top.scratchpad.mem[599] reg});
        res.insert_or_assign("top.scratchpad.mem[600]reg", DumpEntry{top.scratchpad.mem[600] reg});
        res.insert_or_assign("top.scratchpad.mem[601]reg", DumpEntry{top.scratchpad.mem[601] reg});
        res.insert_or_assign("top.scratchpad.mem[602]reg", DumpEntry{top.scratchpad.mem[602] reg});
        res.insert_or_assign("top.scratchpad.mem[603]reg", DumpEntry{top.scratchpad.mem[603] reg});
        res.insert_or_assign("top.scratchpad.mem[604]reg", DumpEntry{top.scratchpad.mem[604] reg});
        res.insert_or_assign("top.scratchpad.mem[605]reg", DumpEntry{top.scratchpad.mem[605] reg});
        res.insert_or_assign("top.scratchpad.mem[606]reg", DumpEntry{top.scratchpad.mem[606] reg});
        res.insert_or_assign("top.scratchpad.mem[607]reg", DumpEntry{top.scratchpad.mem[607] reg});
        res.insert_or_assign("top.scratchpad.mem[608]reg", DumpEntry{top.scratchpad.mem[608] reg});
        res.insert_or_assign("top.scratchpad.mem[609]reg", DumpEntry{top.scratchpad.mem[609] reg});
        res.insert_or_assign("top.scratchpad.mem[610]reg", DumpEntry{top.scratchpad.mem[610] reg});
        res.insert_or_assign("top.scratchpad.mem[611]reg", DumpEntry{top.scratchpad.mem[611] reg});
        res.insert_or_assign("top.scratchpad.mem[612]reg", DumpEntry{top.scratchpad.mem[612] reg});
        res.insert_or_assign("top.scratchpad.mem[613]reg", DumpEntry{top.scratchpad.mem[613] reg});
        res.insert_or_assign("top.scratchpad.mem[614]reg", DumpEntry{top.scratchpad.mem[614] reg});
        res.insert_or_assign("top.scratchpad.mem[615]reg", DumpEntry{top.scratchpad.mem[615] reg});
        res.insert_or_assign("top.scratchpad.mem[616]reg", DumpEntry{top.scratchpad.mem[616] reg});
        res.insert_or_assign("top.scratchpad.mem[617]reg", DumpEntry{top.scratchpad.mem[617] reg});
        res.insert_or_assign("top.scratchpad.mem[618]reg", DumpEntry{top.scratchpad.mem[618] reg});
        res.insert_or_assign("top.scratchpad.mem[619]reg", DumpEntry{top.scratchpad.mem[619] reg});
        res.insert_or_assign("top.scratchpad.mem[620]reg", DumpEntry{top.scratchpad.mem[620] reg});
        res.insert_or_assign("top.scratchpad.mem[621]reg", DumpEntry{top.scratchpad.mem[621] reg});
        res.insert_or_assign("top.scratchpad.mem[622]reg", DumpEntry{top.scratchpad.mem[622] reg});
        res.insert_or_assign("top.scratchpad.mem[623]reg", DumpEntry{top.scratchpad.mem[623] reg});
        res.insert_or_assign("top.scratchpad.mem[624]reg", DumpEntry{top.scratchpad.mem[624] reg});
        res.insert_or_assign("top.scratchpad.mem[625]reg", DumpEntry{top.scratchpad.mem[625] reg});
        res.insert_or_assign("top.scratchpad.mem[626]reg", DumpEntry{top.scratchpad.mem[626] reg});
        res.insert_or_assign("top.scratchpad.mem[627]reg", DumpEntry{top.scratchpad.mem[627] reg});
        res.insert_or_assign("top.scratchpad.mem[628]reg", DumpEntry{top.scratchpad.mem[628] reg});
        res.insert_or_assign("top.scratchpad.mem[629]reg", DumpEntry{top.scratchpad.mem[629] reg});
        res.insert_or_assign("top.scratchpad.mem[630]reg", DumpEntry{top.scratchpad.mem[630] reg});
        res.insert_or_assign("top.scratchpad.mem[631]reg", DumpEntry{top.scratchpad.mem[631] reg});
        res.insert_or_assign("top.scratchpad.mem[632]reg", DumpEntry{top.scratchpad.mem[632] reg});
        res.insert_or_assign("top.scratchpad.mem[633]reg", DumpEntry{top.scratchpad.mem[633] reg});
        res.insert_or_assign("top.scratchpad.mem[634]reg", DumpEntry{top.scratchpad.mem[634] reg});
        res.insert_or_assign("top.scratchpad.mem[635]reg", DumpEntry{top.scratchpad.mem[635] reg});
        res.insert_or_assign("top.scratchpad.mem[636]reg", DumpEntry{top.scratchpad.mem[636] reg});
        res.insert_or_assign("top.scratchpad.mem[637]reg", DumpEntry{top.scratchpad.mem[637] reg});
        res.insert_or_assign("top.scratchpad.mem[638]reg", DumpEntry{top.scratchpad.mem[638] reg});
        res.insert_or_assign("top.scratchpad.mem[639]reg", DumpEntry{top.scratchpad.mem[639] reg});
        res.insert_or_assign("top.scratchpad.mem[640]reg", DumpEntry{top.scratchpad.mem[640] reg});
        res.insert_or_assign("top.scratchpad.mem[641]reg", DumpEntry{top.scratchpad.mem[641] reg});
        res.insert_or_assign("top.scratchpad.mem[642]reg", DumpEntry{top.scratchpad.mem[642] reg});
        res.insert_or_assign("top.scratchpad.mem[643]reg", DumpEntry{top.scratchpad.mem[643] reg});
        res.insert_or_assign("top.scratchpad.mem[644]reg", DumpEntry{top.scratchpad.mem[644] reg});
        res.insert_or_assign("top.scratchpad.mem[645]reg", DumpEntry{top.scratchpad.mem[645] reg});
        res.insert_or_assign("top.scratchpad.mem[646]reg", DumpEntry{top.scratchpad.mem[646] reg});
        res.insert_or_assign("top.scratchpad.mem[647]reg", DumpEntry{top.scratchpad.mem[647] reg});
        res.insert_or_assign("top.scratchpad.mem[648]reg", DumpEntry{top.scratchpad.mem[648] reg});
        res.insert_or_assign("top.scratchpad.mem[649]reg", DumpEntry{top.scratchpad.mem[649] reg});
        res.insert_or_assign("top.scratchpad.mem[650]reg", DumpEntry{top.scratchpad.mem[650] reg});
        res.insert_or_assign("top.scratchpad.mem[651]reg", DumpEntry{top.scratchpad.mem[651] reg});
        res.insert_or_assign("top.scratchpad.mem[652]reg", DumpEntry{top.scratchpad.mem[652] reg});
        res.insert_or_assign("top.scratchpad.mem[653]reg", DumpEntry{top.scratchpad.mem[653] reg});
        res.insert_or_assign("top.scratchpad.mem[654]reg", DumpEntry{top.scratchpad.mem[654] reg});
        res.insert_or_assign("top.scratchpad.mem[655]reg", DumpEntry{top.scratchpad.mem[655] reg});
        res.insert_or_assign("top.scratchpad.mem[656]reg", DumpEntry{top.scratchpad.mem[656] reg});
        res.insert_or_assign("top.scratchpad.mem[657]reg", DumpEntry{top.scratchpad.mem[657] reg});
        res.insert_or_assign("top.scratchpad.mem[658]reg", DumpEntry{top.scratchpad.mem[658] reg});
        res.insert_or_assign("top.scratchpad.mem[659]reg", DumpEntry{top.scratchpad.mem[659] reg});
        res.insert_or_assign("top.scratchpad.mem[660]reg", DumpEntry{top.scratchpad.mem[660] reg});
        res.insert_or_assign("top.scratchpad.mem[661]reg", DumpEntry{top.scratchpad.mem[661] reg});
        res.insert_or_assign("top.scratchpad.mem[662]reg", DumpEntry{top.scratchpad.mem[662] reg});
        res.insert_or_assign("top.scratchpad.mem[663]reg", DumpEntry{top.scratchpad.mem[663] reg});
        res.insert_or_assign("top.scratchpad.mem[664]reg", DumpEntry{top.scratchpad.mem[664] reg});
        res.insert_or_assign("top.scratchpad.mem[665]reg", DumpEntry{top.scratchpad.mem[665] reg});
        res.insert_or_assign("top.scratchpad.mem[666]reg", DumpEntry{top.scratchpad.mem[666] reg});
        res.insert_or_assign("top.scratchpad.mem[667]reg", DumpEntry{top.scratchpad.mem[667] reg});
        res.insert_or_assign("top.scratchpad.mem[668]reg", DumpEntry{top.scratchpad.mem[668] reg});
        res.insert_or_assign("top.scratchpad.mem[669]reg", DumpEntry{top.scratchpad.mem[669] reg});
        res.insert_or_assign("top.scratchpad.mem[670]reg", DumpEntry{top.scratchpad.mem[670] reg});
        res.insert_or_assign("top.scratchpad.mem[671]reg", DumpEntry{top.scratchpad.mem[671] reg});
        res.insert_or_assign("top.scratchpad.mem[672]reg", DumpEntry{top.scratchpad.mem[672] reg});
        res.insert_or_assign("top.scratchpad.mem[673]reg", DumpEntry{top.scratchpad.mem[673] reg});
        res.insert_or_assign("top.scratchpad.mem[674]reg", DumpEntry{top.scratchpad.mem[674] reg});
        res.insert_or_assign("top.scratchpad.mem[675]reg", DumpEntry{top.scratchpad.mem[675] reg});
        res.insert_or_assign("top.scratchpad.mem[676]reg", DumpEntry{top.scratchpad.mem[676] reg});
        res.insert_or_assign("top.scratchpad.mem[677]reg", DumpEntry{top.scratchpad.mem[677] reg});
        res.insert_or_assign("top.scratchpad.mem[678]reg", DumpEntry{top.scratchpad.mem[678] reg});
        res.insert_or_assign("top.scratchpad.mem[679]reg", DumpEntry{top.scratchpad.mem[679] reg});
        res.insert_or_assign("top.scratchpad.mem[680]reg", DumpEntry{top.scratchpad.mem[680] reg});
        res.insert_or_assign("top.scratchpad.mem[681]reg", DumpEntry{top.scratchpad.mem[681] reg});
        res.insert_or_assign("top.scratchpad.mem[682]reg", DumpEntry{top.scratchpad.mem[682] reg});
        res.insert_or_assign("top.scratchpad.mem[683]reg", DumpEntry{top.scratchpad.mem[683] reg});
        res.insert_or_assign("top.scratchpad.mem[684]reg", DumpEntry{top.scratchpad.mem[684] reg});
        res.insert_or_assign("top.scratchpad.mem[685]reg", DumpEntry{top.scratchpad.mem[685] reg});
        res.insert_or_assign("top.scratchpad.mem[686]reg", DumpEntry{top.scratchpad.mem[686] reg});
        res.insert_or_assign("top.scratchpad.mem[687]reg", DumpEntry{top.scratchpad.mem[687] reg});
        res.insert_or_assign("top.scratchpad.mem[688]reg", DumpEntry{top.scratchpad.mem[688] reg});
        res.insert_or_assign("top.scratchpad.mem[689]reg", DumpEntry{top.scratchpad.mem[689] reg});
        res.insert_or_assign("top.scratchpad.mem[690]reg", DumpEntry{top.scratchpad.mem[690] reg});
        res.insert_or_assign("top.scratchpad.mem[691]reg", DumpEntry{top.scratchpad.mem[691] reg});
        res.insert_or_assign("top.scratchpad.mem[692]reg", DumpEntry{top.scratchpad.mem[692] reg});
        res.insert_or_assign("top.scratchpad.mem[693]reg", DumpEntry{top.scratchpad.mem[693] reg});
        res.insert_or_assign("top.scratchpad.mem[694]reg", DumpEntry{top.scratchpad.mem[694] reg});
        res.insert_or_assign("top.scratchpad.mem[695]reg", DumpEntry{top.scratchpad.mem[695] reg});
        res.insert_or_assign("top.scratchpad.mem[696]reg", DumpEntry{top.scratchpad.mem[696] reg});
        res.insert_or_assign("top.scratchpad.mem[697]reg", DumpEntry{top.scratchpad.mem[697] reg});
        res.insert_or_assign("top.scratchpad.mem[698]reg", DumpEntry{top.scratchpad.mem[698] reg});
        res.insert_or_assign("top.scratchpad.mem[699]reg", DumpEntry{top.scratchpad.mem[699] reg});
        res.insert_or_assign("top.scratchpad.mem[700]reg", DumpEntry{top.scratchpad.mem[700] reg});
        res.insert_or_assign("top.scratchpad.mem[701]reg", DumpEntry{top.scratchpad.mem[701] reg});
        res.insert_or_assign("top.scratchpad.mem[702]reg", DumpEntry{top.scratchpad.mem[702] reg});
        res.insert_or_assign("top.scratchpad.mem[703]reg", DumpEntry{top.scratchpad.mem[703] reg});
        res.insert_or_assign("top.scratchpad.mem[704]reg", DumpEntry{top.scratchpad.mem[704] reg});
        res.insert_or_assign("top.scratchpad.mem[705]reg", DumpEntry{top.scratchpad.mem[705] reg});
        res.insert_or_assign("top.scratchpad.mem[706]reg", DumpEntry{top.scratchpad.mem[706] reg});
        res.insert_or_assign("top.scratchpad.mem[707]reg", DumpEntry{top.scratchpad.mem[707] reg});
        res.insert_or_assign("top.scratchpad.mem[708]reg", DumpEntry{top.scratchpad.mem[708] reg});
        res.insert_or_assign("top.scratchpad.mem[709]reg", DumpEntry{top.scratchpad.mem[709] reg});
        res.insert_or_assign("top.scratchpad.mem[710]reg", DumpEntry{top.scratchpad.mem[710] reg});
        res.insert_or_assign("top.scratchpad.mem[711]reg", DumpEntry{top.scratchpad.mem[711] reg});
        res.insert_or_assign("top.scratchpad.mem[712]reg", DumpEntry{top.scratchpad.mem[712] reg});
        res.insert_or_assign("top.scratchpad.mem[713]reg", DumpEntry{top.scratchpad.mem[713] reg});
        res.insert_or_assign("top.scratchpad.mem[714]reg", DumpEntry{top.scratchpad.mem[714] reg});
        res.insert_or_assign("top.scratchpad.mem[715]reg", DumpEntry{top.scratchpad.mem[715] reg});
        res.insert_or_assign("top.scratchpad.mem[716]reg", DumpEntry{top.scratchpad.mem[716] reg});
        res.insert_or_assign("top.scratchpad.mem[717]reg", DumpEntry{top.scratchpad.mem[717] reg});
        res.insert_or_assign("top.scratchpad.mem[718]reg", DumpEntry{top.scratchpad.mem[718] reg});
        res.insert_or_assign("top.scratchpad.mem[719]reg", DumpEntry{top.scratchpad.mem[719] reg});
        res.insert_or_assign("top.scratchpad.mem[720]reg", DumpEntry{top.scratchpad.mem[720] reg});
        res.insert_or_assign("top.scratchpad.mem[721]reg", DumpEntry{top.scratchpad.mem[721] reg});
        res.insert_or_assign("top.scratchpad.mem[722]reg", DumpEntry{top.scratchpad.mem[722] reg});
        res.insert_or_assign("top.scratchpad.mem[723]reg", DumpEntry{top.scratchpad.mem[723] reg});
        res.insert_or_assign("top.scratchpad.mem[724]reg", DumpEntry{top.scratchpad.mem[724] reg});
        res.insert_or_assign("top.scratchpad.mem[725]reg", DumpEntry{top.scratchpad.mem[725] reg});
        res.insert_or_assign("top.scratchpad.mem[726]reg", DumpEntry{top.scratchpad.mem[726] reg});
        res.insert_or_assign("top.scratchpad.mem[727]reg", DumpEntry{top.scratchpad.mem[727] reg});
        res.insert_or_assign("top.scratchpad.mem[728]reg", DumpEntry{top.scratchpad.mem[728] reg});
        res.insert_or_assign("top.scratchpad.mem[729]reg", DumpEntry{top.scratchpad.mem[729] reg});
        res.insert_or_assign("top.scratchpad.mem[730]reg", DumpEntry{top.scratchpad.mem[730] reg});
        res.insert_or_assign("top.scratchpad.mem[731]reg", DumpEntry{top.scratchpad.mem[731] reg});
        res.insert_or_assign("top.scratchpad.mem[732]reg", DumpEntry{top.scratchpad.mem[732] reg});
        res.insert_or_assign("top.scratchpad.mem[733]reg", DumpEntry{top.scratchpad.mem[733] reg});
        res.insert_or_assign("top.scratchpad.mem[734]reg", DumpEntry{top.scratchpad.mem[734] reg});
        res.insert_or_assign("top.scratchpad.mem[735]reg", DumpEntry{top.scratchpad.mem[735] reg});
        res.insert_or_assign("top.scratchpad.mem[736]reg", DumpEntry{top.scratchpad.mem[736] reg});
        res.insert_or_assign("top.scratchpad.mem[737]reg", DumpEntry{top.scratchpad.mem[737] reg});
        res.insert_or_assign("top.scratchpad.mem[738]reg", DumpEntry{top.scratchpad.mem[738] reg});
        res.insert_or_assign("top.scratchpad.mem[739]reg", DumpEntry{top.scratchpad.mem[739] reg});
        res.insert_or_assign("top.scratchpad.mem[740]reg", DumpEntry{top.scratchpad.mem[740] reg});
        res.insert_or_assign("top.scratchpad.mem[741]reg", DumpEntry{top.scratchpad.mem[741] reg});
        res.insert_or_assign("top.scratchpad.mem[742]reg", DumpEntry{top.scratchpad.mem[742] reg});
        res.insert_or_assign("top.scratchpad.mem[743]reg", DumpEntry{top.scratchpad.mem[743] reg});
        res.insert_or_assign("top.scratchpad.mem[744]reg", DumpEntry{top.scratchpad.mem[744] reg});
        res.insert_or_assign("top.scratchpad.mem[745]reg", DumpEntry{top.scratchpad.mem[745] reg});
        res.insert_or_assign("top.scratchpad.mem[746]reg", DumpEntry{top.scratchpad.mem[746] reg});
        res.insert_or_assign("top.scratchpad.mem[747]reg", DumpEntry{top.scratchpad.mem[747] reg});
        res.insert_or_assign("top.scratchpad.mem[748]reg", DumpEntry{top.scratchpad.mem[748] reg});
        res.insert_or_assign("top.scratchpad.mem[749]reg", DumpEntry{top.scratchpad.mem[749] reg});
        res.insert_or_assign("top.scratchpad.mem[750]reg", DumpEntry{top.scratchpad.mem[750] reg});
        res.insert_or_assign("top.scratchpad.mem[751]reg", DumpEntry{top.scratchpad.mem[751] reg});
        res.insert_or_assign("top.scratchpad.mem[752]reg", DumpEntry{top.scratchpad.mem[752] reg});
        res.insert_or_assign("top.scratchpad.mem[753]reg", DumpEntry{top.scratchpad.mem[753] reg});
        res.insert_or_assign("top.scratchpad.mem[754]reg", DumpEntry{top.scratchpad.mem[754] reg});
        res.insert_or_assign("top.scratchpad.mem[755]reg", DumpEntry{top.scratchpad.mem[755] reg});
        res.insert_or_assign("top.scratchpad.mem[756]reg", DumpEntry{top.scratchpad.mem[756] reg});
        res.insert_or_assign("top.scratchpad.mem[757]reg", DumpEntry{top.scratchpad.mem[757] reg});
        res.insert_or_assign("top.scratchpad.mem[758]reg", DumpEntry{top.scratchpad.mem[758] reg});
        res.insert_or_assign("top.scratchpad.mem[759]reg", DumpEntry{top.scratchpad.mem[759] reg});
        res.insert_or_assign("top.scratchpad.mem[760]reg", DumpEntry{top.scratchpad.mem[760] reg});
        res.insert_or_assign("top.scratchpad.mem[761]reg", DumpEntry{top.scratchpad.mem[761] reg});
        res.insert_or_assign("top.scratchpad.mem[762]reg", DumpEntry{top.scratchpad.mem[762] reg});
        res.insert_or_assign("top.scratchpad.mem[763]reg", DumpEntry{top.scratchpad.mem[763] reg});
        res.insert_or_assign("top.scratchpad.mem[764]reg", DumpEntry{top.scratchpad.mem[764] reg});
        res.insert_or_assign("top.scratchpad.mem[765]reg", DumpEntry{top.scratchpad.mem[765] reg});
        res.insert_or_assign("top.scratchpad.mem[766]reg", DumpEntry{top.scratchpad.mem[766] reg});
        res.insert_or_assign("top.scratchpad.mem[767]reg", DumpEntry{top.scratchpad.mem[767] reg});
        res.insert_or_assign("top.scratchpad.mem[768]reg", DumpEntry{top.scratchpad.mem[768] reg});
        res.insert_or_assign("top.scratchpad.mem[769]reg", DumpEntry{top.scratchpad.mem[769] reg});
        res.insert_or_assign("top.scratchpad.mem[770]reg", DumpEntry{top.scratchpad.mem[770] reg});
        res.insert_or_assign("top.scratchpad.mem[771]reg", DumpEntry{top.scratchpad.mem[771] reg});
        res.insert_or_assign("top.scratchpad.mem[772]reg", DumpEntry{top.scratchpad.mem[772] reg});
        res.insert_or_assign("top.scratchpad.mem[773]reg", DumpEntry{top.scratchpad.mem[773] reg});
        res.insert_or_assign("top.scratchpad.mem[774]reg", DumpEntry{top.scratchpad.mem[774] reg});
        res.insert_or_assign("top.scratchpad.mem[775]reg", DumpEntry{top.scratchpad.mem[775] reg});
        res.insert_or_assign("top.scratchpad.mem[776]reg", DumpEntry{top.scratchpad.mem[776] reg});
        res.insert_or_assign("top.scratchpad.mem[777]reg", DumpEntry{top.scratchpad.mem[777] reg});
        res.insert_or_assign("top.scratchpad.mem[778]reg", DumpEntry{top.scratchpad.mem[778] reg});
        res.insert_or_assign("top.scratchpad.mem[779]reg", DumpEntry{top.scratchpad.mem[779] reg});
        res.insert_or_assign("top.scratchpad.mem[780]reg", DumpEntry{top.scratchpad.mem[780] reg});
        res.insert_or_assign("top.scratchpad.mem[781]reg", DumpEntry{top.scratchpad.mem[781] reg});
        res.insert_or_assign("top.scratchpad.mem[782]reg", DumpEntry{top.scratchpad.mem[782] reg});
        res.insert_or_assign("top.scratchpad.mem[783]reg", DumpEntry{top.scratchpad.mem[783] reg});
        res.insert_or_assign("top.scratchpad.mem[784]reg", DumpEntry{top.scratchpad.mem[784] reg});
        res.insert_or_assign("top.scratchpad.mem[785]reg", DumpEntry{top.scratchpad.mem[785] reg});
        res.insert_or_assign("top.scratchpad.mem[786]reg", DumpEntry{top.scratchpad.mem[786] reg});
        res.insert_or_assign("top.scratchpad.mem[787]reg", DumpEntry{top.scratchpad.mem[787] reg});
        res.insert_or_assign("top.scratchpad.mem[788]reg", DumpEntry{top.scratchpad.mem[788] reg});
        res.insert_or_assign("top.scratchpad.mem[789]reg", DumpEntry{top.scratchpad.mem[789] reg});
        res.insert_or_assign("top.scratchpad.mem[790]reg", DumpEntry{top.scratchpad.mem[790] reg});
        res.insert_or_assign("top.scratchpad.mem[791]reg", DumpEntry{top.scratchpad.mem[791] reg});
        res.insert_or_assign("top.scratchpad.mem[792]reg", DumpEntry{top.scratchpad.mem[792] reg});
        res.insert_or_assign("top.scratchpad.mem[793]reg", DumpEntry{top.scratchpad.mem[793] reg});
        res.insert_or_assign("top.scratchpad.mem[794]reg", DumpEntry{top.scratchpad.mem[794] reg});
        res.insert_or_assign("top.scratchpad.mem[795]reg", DumpEntry{top.scratchpad.mem[795] reg});
        res.insert_or_assign("top.scratchpad.mem[796]reg", DumpEntry{top.scratchpad.mem[796] reg});
        res.insert_or_assign("top.scratchpad.mem[797]reg", DumpEntry{top.scratchpad.mem[797] reg});
        res.insert_or_assign("top.scratchpad.mem[798]reg", DumpEntry{top.scratchpad.mem[798] reg});
        res.insert_or_assign("top.scratchpad.mem[799]reg", DumpEntry{top.scratchpad.mem[799] reg});
        res.insert_or_assign("top.scratchpad.mem[800]reg", DumpEntry{top.scratchpad.mem[800] reg});
        res.insert_or_assign("top.scratchpad.mem[801]reg", DumpEntry{top.scratchpad.mem[801] reg});
        res.insert_or_assign("top.scratchpad.mem[802]reg", DumpEntry{top.scratchpad.mem[802] reg});
        res.insert_or_assign("top.scratchpad.mem[803]reg", DumpEntry{top.scratchpad.mem[803] reg});
        res.insert_or_assign("top.scratchpad.mem[804]reg", DumpEntry{top.scratchpad.mem[804] reg});
        res.insert_or_assign("top.scratchpad.mem[805]reg", DumpEntry{top.scratchpad.mem[805] reg});
        res.insert_or_assign("top.scratchpad.mem[806]reg", DumpEntry{top.scratchpad.mem[806] reg});
        res.insert_or_assign("top.scratchpad.mem[807]reg", DumpEntry{top.scratchpad.mem[807] reg});
        res.insert_or_assign("top.scratchpad.mem[808]reg", DumpEntry{top.scratchpad.mem[808] reg});
        res.insert_or_assign("top.scratchpad.mem[809]reg", DumpEntry{top.scratchpad.mem[809] reg});
        res.insert_or_assign("top.scratchpad.mem[810]reg", DumpEntry{top.scratchpad.mem[810] reg});
        res.insert_or_assign("top.scratchpad.mem[811]reg", DumpEntry{top.scratchpad.mem[811] reg});
        res.insert_or_assign("top.scratchpad.mem[812]reg", DumpEntry{top.scratchpad.mem[812] reg});
        res.insert_or_assign("top.scratchpad.mem[813]reg", DumpEntry{top.scratchpad.mem[813] reg});
        res.insert_or_assign("top.scratchpad.mem[814]reg", DumpEntry{top.scratchpad.mem[814] reg});
        res.insert_or_assign("top.scratchpad.mem[815]reg", DumpEntry{top.scratchpad.mem[815] reg});
        res.insert_or_assign("top.scratchpad.mem[816]reg", DumpEntry{top.scratchpad.mem[816] reg});
        res.insert_or_assign("top.scratchpad.mem[817]reg", DumpEntry{top.scratchpad.mem[817] reg});
        res.insert_or_assign("top.scratchpad.mem[818]reg", DumpEntry{top.scratchpad.mem[818] reg});
        res.insert_or_assign("top.scratchpad.mem[819]reg", DumpEntry{top.scratchpad.mem[819] reg});
        res.insert_or_assign("top.scratchpad.mem[820]reg", DumpEntry{top.scratchpad.mem[820] reg});
        res.insert_or_assign("top.scratchpad.mem[821]reg", DumpEntry{top.scratchpad.mem[821] reg});
        res.insert_or_assign("top.scratchpad.mem[822]reg", DumpEntry{top.scratchpad.mem[822] reg});
        res.insert_or_assign("top.scratchpad.mem[823]reg", DumpEntry{top.scratchpad.mem[823] reg});
        res.insert_or_assign("top.scratchpad.mem[824]reg", DumpEntry{top.scratchpad.mem[824] reg});
        res.insert_or_assign("top.scratchpad.mem[825]reg", DumpEntry{top.scratchpad.mem[825] reg});
        res.insert_or_assign("top.scratchpad.mem[826]reg", DumpEntry{top.scratchpad.mem[826] reg});
        res.insert_or_assign("top.scratchpad.mem[827]reg", DumpEntry{top.scratchpad.mem[827] reg});
        res.insert_or_assign("top.scratchpad.mem[828]reg", DumpEntry{top.scratchpad.mem[828] reg});
        res.insert_or_assign("top.scratchpad.mem[829]reg", DumpEntry{top.scratchpad.mem[829] reg});
        res.insert_or_assign("top.scratchpad.mem[830]reg", DumpEntry{top.scratchpad.mem[830] reg});
        res.insert_or_assign("top.scratchpad.mem[831]reg", DumpEntry{top.scratchpad.mem[831] reg});
        res.insert_or_assign("top.scratchpad.mem[832]reg", DumpEntry{top.scratchpad.mem[832] reg});
        res.insert_or_assign("top.scratchpad.mem[833]reg", DumpEntry{top.scratchpad.mem[833] reg});
        res.insert_or_assign("top.scratchpad.mem[834]reg", DumpEntry{top.scratchpad.mem[834] reg});
        res.insert_or_assign("top.scratchpad.mem[835]reg", DumpEntry{top.scratchpad.mem[835] reg});
        res.insert_or_assign("top.scratchpad.mem[836]reg", DumpEntry{top.scratchpad.mem[836] reg});
        res.insert_or_assign("top.scratchpad.mem[837]reg", DumpEntry{top.scratchpad.mem[837] reg});
        res.insert_or_assign("top.scratchpad.mem[838]reg", DumpEntry{top.scratchpad.mem[838] reg});
        res.insert_or_assign("top.scratchpad.mem[839]reg", DumpEntry{top.scratchpad.mem[839] reg});
        res.insert_or_assign("top.scratchpad.mem[840]reg", DumpEntry{top.scratchpad.mem[840] reg});
        res.insert_or_assign("top.scratchpad.mem[841]reg", DumpEntry{top.scratchpad.mem[841] reg});
        res.insert_or_assign("top.scratchpad.mem[842]reg", DumpEntry{top.scratchpad.mem[842] reg});
        res.insert_or_assign("top.scratchpad.mem[843]reg", DumpEntry{top.scratchpad.mem[843] reg});
        res.insert_or_assign("top.scratchpad.mem[844]reg", DumpEntry{top.scratchpad.mem[844] reg});
        res.insert_or_assign("top.scratchpad.mem[845]reg", DumpEntry{top.scratchpad.mem[845] reg});
        res.insert_or_assign("top.scratchpad.mem[846]reg", DumpEntry{top.scratchpad.mem[846] reg});
        res.insert_or_assign("top.scratchpad.mem[847]reg", DumpEntry{top.scratchpad.mem[847] reg});
        res.insert_or_assign("top.scratchpad.mem[848]reg", DumpEntry{top.scratchpad.mem[848] reg});
        res.insert_or_assign("top.scratchpad.mem[849]reg", DumpEntry{top.scratchpad.mem[849] reg});
        res.insert_or_assign("top.scratchpad.mem[850]reg", DumpEntry{top.scratchpad.mem[850] reg});
        res.insert_or_assign("top.scratchpad.mem[851]reg", DumpEntry{top.scratchpad.mem[851] reg});
        res.insert_or_assign("top.scratchpad.mem[852]reg", DumpEntry{top.scratchpad.mem[852] reg});
        res.insert_or_assign("top.scratchpad.mem[853]reg", DumpEntry{top.scratchpad.mem[853] reg});
        res.insert_or_assign("top.scratchpad.mem[854]reg", DumpEntry{top.scratchpad.mem[854] reg});
        res.insert_or_assign("top.scratchpad.mem[855]reg", DumpEntry{top.scratchpad.mem[855] reg});
        res.insert_or_assign("top.scratchpad.mem[856]reg", DumpEntry{top.scratchpad.mem[856] reg});
        res.insert_or_assign("top.scratchpad.mem[857]reg", DumpEntry{top.scratchpad.mem[857] reg});
        res.insert_or_assign("top.scratchpad.mem[858]reg", DumpEntry{top.scratchpad.mem[858] reg});
        res.insert_or_assign("top.scratchpad.mem[859]reg", DumpEntry{top.scratchpad.mem[859] reg});
        res.insert_or_assign("top.scratchpad.mem[860]reg", DumpEntry{top.scratchpad.mem[860] reg});
        res.insert_or_assign("top.scratchpad.mem[861]reg", DumpEntry{top.scratchpad.mem[861] reg});
        res.insert_or_assign("top.scratchpad.mem[862]reg", DumpEntry{top.scratchpad.mem[862] reg});
        res.insert_or_assign("top.scratchpad.mem[863]reg", DumpEntry{top.scratchpad.mem[863] reg});
        res.insert_or_assign("top.scratchpad.mem[864]reg", DumpEntry{top.scratchpad.mem[864] reg});
        res.insert_or_assign("top.scratchpad.mem[865]reg", DumpEntry{top.scratchpad.mem[865] reg});
        res.insert_or_assign("top.scratchpad.mem[866]reg", DumpEntry{top.scratchpad.mem[866] reg});
        res.insert_or_assign("top.scratchpad.mem[867]reg", DumpEntry{top.scratchpad.mem[867] reg});
        res.insert_or_assign("top.scratchpad.mem[868]reg", DumpEntry{top.scratchpad.mem[868] reg});
        res.insert_or_assign("top.scratchpad.mem[869]reg", DumpEntry{top.scratchpad.mem[869] reg});
        res.insert_or_assign("top.scratchpad.mem[870]reg", DumpEntry{top.scratchpad.mem[870] reg});
        res.insert_or_assign("top.scratchpad.mem[871]reg", DumpEntry{top.scratchpad.mem[871] reg});
        res.insert_or_assign("top.scratchpad.mem[872]reg", DumpEntry{top.scratchpad.mem[872] reg});
        res.insert_or_assign("top.scratchpad.mem[873]reg", DumpEntry{top.scratchpad.mem[873] reg});
        res.insert_or_assign("top.scratchpad.mem[874]reg", DumpEntry{top.scratchpad.mem[874] reg});
        res.insert_or_assign("top.scratchpad.mem[875]reg", DumpEntry{top.scratchpad.mem[875] reg});
        res.insert_or_assign("top.scratchpad.mem[876]reg", DumpEntry{top.scratchpad.mem[876] reg});
        res.insert_or_assign("top.scratchpad.mem[877]reg", DumpEntry{top.scratchpad.mem[877] reg});
        res.insert_or_assign("top.scratchpad.mem[878]reg", DumpEntry{top.scratchpad.mem[878] reg});
        res.insert_or_assign("top.scratchpad.mem[879]reg", DumpEntry{top.scratchpad.mem[879] reg});
        res.insert_or_assign("top.scratchpad.mem[880]reg", DumpEntry{top.scratchpad.mem[880] reg});
        res.insert_or_assign("top.scratchpad.mem[881]reg", DumpEntry{top.scratchpad.mem[881] reg});
        res.insert_or_assign("top.scratchpad.mem[882]reg", DumpEntry{top.scratchpad.mem[882] reg});
        res.insert_or_assign("top.scratchpad.mem[883]reg", DumpEntry{top.scratchpad.mem[883] reg});
        res.insert_or_assign("top.scratchpad.mem[884]reg", DumpEntry{top.scratchpad.mem[884] reg});
        res.insert_or_assign("top.scratchpad.mem[885]reg", DumpEntry{top.scratchpad.mem[885] reg});
        res.insert_or_assign("top.scratchpad.mem[886]reg", DumpEntry{top.scratchpad.mem[886] reg});
        res.insert_or_assign("top.scratchpad.mem[887]reg", DumpEntry{top.scratchpad.mem[887] reg});
        res.insert_or_assign("top.scratchpad.mem[888]reg", DumpEntry{top.scratchpad.mem[888] reg});
        res.insert_or_assign("top.scratchpad.mem[889]reg", DumpEntry{top.scratchpad.mem[889] reg});
        res.insert_or_assign("top.scratchpad.mem[890]reg", DumpEntry{top.scratchpad.mem[890] reg});
        res.insert_or_assign("top.scratchpad.mem[891]reg", DumpEntry{top.scratchpad.mem[891] reg});
        res.insert_or_assign("top.scratchpad.mem[892]reg", DumpEntry{top.scratchpad.mem[892] reg});
        res.insert_or_assign("top.scratchpad.mem[893]reg", DumpEntry{top.scratchpad.mem[893] reg});
        res.insert_or_assign("top.scratchpad.mem[894]reg", DumpEntry{top.scratchpad.mem[894] reg});
        res.insert_or_assign("top.scratchpad.mem[895]reg", DumpEntry{top.scratchpad.mem[895] reg});
        res.insert_or_assign("top.scratchpad.mem[896]reg", DumpEntry{top.scratchpad.mem[896] reg});
        res.insert_or_assign("top.scratchpad.mem[897]reg", DumpEntry{top.scratchpad.mem[897] reg});
        res.insert_or_assign("top.scratchpad.mem[898]reg", DumpEntry{top.scratchpad.mem[898] reg});
        res.insert_or_assign("top.scratchpad.mem[899]reg", DumpEntry{top.scratchpad.mem[899] reg});
        res.insert_or_assign("top.scratchpad.mem[900]reg", DumpEntry{top.scratchpad.mem[900] reg});
        res.insert_or_assign("top.scratchpad.mem[901]reg", DumpEntry{top.scratchpad.mem[901] reg});
        res.insert_or_assign("top.scratchpad.mem[902]reg", DumpEntry{top.scratchpad.mem[902] reg});
        res.insert_or_assign("top.scratchpad.mem[903]reg", DumpEntry{top.scratchpad.mem[903] reg});
        res.insert_or_assign("top.scratchpad.mem[904]reg", DumpEntry{top.scratchpad.mem[904] reg});
        res.insert_or_assign("top.scratchpad.mem[905]reg", DumpEntry{top.scratchpad.mem[905] reg});
        res.insert_or_assign("top.scratchpad.mem[906]reg", DumpEntry{top.scratchpad.mem[906] reg});
        res.insert_or_assign("top.scratchpad.mem[907]reg", DumpEntry{top.scratchpad.mem[907] reg});
        res.insert_or_assign("top.scratchpad.mem[908]reg", DumpEntry{top.scratchpad.mem[908] reg});
        res.insert_or_assign("top.scratchpad.mem[909]reg", DumpEntry{top.scratchpad.mem[909] reg});
        res.insert_or_assign("top.scratchpad.mem[910]reg", DumpEntry{top.scratchpad.mem[910] reg});
        res.insert_or_assign("top.scratchpad.mem[911]reg", DumpEntry{top.scratchpad.mem[911] reg});
        res.insert_or_assign("top.scratchpad.mem[912]reg", DumpEntry{top.scratchpad.mem[912] reg});
        res.insert_or_assign("top.scratchpad.mem[913]reg", DumpEntry{top.scratchpad.mem[913] reg});
        res.insert_or_assign("top.scratchpad.mem[914]reg", DumpEntry{top.scratchpad.mem[914] reg});
        res.insert_or_assign("top.scratchpad.mem[915]reg", DumpEntry{top.scratchpad.mem[915] reg});
        res.insert_or_assign("top.scratchpad.mem[916]reg", DumpEntry{top.scratchpad.mem[916] reg});
        res.insert_or_assign("top.scratchpad.mem[917]reg", DumpEntry{top.scratchpad.mem[917] reg});
        res.insert_or_assign("top.scratchpad.mem[918]reg", DumpEntry{top.scratchpad.mem[918] reg});
        res.insert_or_assign("top.scratchpad.mem[919]reg", DumpEntry{top.scratchpad.mem[919] reg});
        res.insert_or_assign("top.scratchpad.mem[920]reg", DumpEntry{top.scratchpad.mem[920] reg});
        res.insert_or_assign("top.scratchpad.mem[921]reg", DumpEntry{top.scratchpad.mem[921] reg});
        res.insert_or_assign("top.scratchpad.mem[922]reg", DumpEntry{top.scratchpad.mem[922] reg});
        res.insert_or_assign("top.scratchpad.mem[923]reg", DumpEntry{top.scratchpad.mem[923] reg});
        res.insert_or_assign("top.scratchpad.mem[924]reg", DumpEntry{top.scratchpad.mem[924] reg});
        res.insert_or_assign("top.scratchpad.mem[925]reg", DumpEntry{top.scratchpad.mem[925] reg});
        res.insert_or_assign("top.scratchpad.mem[926]reg", DumpEntry{top.scratchpad.mem[926] reg});
        res.insert_or_assign("top.scratchpad.mem[927]reg", DumpEntry{top.scratchpad.mem[927] reg});
        res.insert_or_assign("top.scratchpad.mem[928]reg", DumpEntry{top.scratchpad.mem[928] reg});
        res.insert_or_assign("top.scratchpad.mem[929]reg", DumpEntry{top.scratchpad.mem[929] reg});
        res.insert_or_assign("top.scratchpad.mem[930]reg", DumpEntry{top.scratchpad.mem[930] reg});
        res.insert_or_assign("top.scratchpad.mem[931]reg", DumpEntry{top.scratchpad.mem[931] reg});
        res.insert_or_assign("top.scratchpad.mem[932]reg", DumpEntry{top.scratchpad.mem[932] reg});
        res.insert_or_assign("top.scratchpad.mem[933]reg", DumpEntry{top.scratchpad.mem[933] reg});
        res.insert_or_assign("top.scratchpad.mem[934]reg", DumpEntry{top.scratchpad.mem[934] reg});
        res.insert_or_assign("top.scratchpad.mem[935]reg", DumpEntry{top.scratchpad.mem[935] reg});
        res.insert_or_assign("top.scratchpad.mem[936]reg", DumpEntry{top.scratchpad.mem[936] reg});
        res.insert_or_assign("top.scratchpad.mem[937]reg", DumpEntry{top.scratchpad.mem[937] reg});
        res.insert_or_assign("top.scratchpad.mem[938]reg", DumpEntry{top.scratchpad.mem[938] reg});
        res.insert_or_assign("top.scratchpad.mem[939]reg", DumpEntry{top.scratchpad.mem[939] reg});
        res.insert_or_assign("top.scratchpad.mem[940]reg", DumpEntry{top.scratchpad.mem[940] reg});
        res.insert_or_assign("top.scratchpad.mem[941]reg", DumpEntry{top.scratchpad.mem[941] reg});
        res.insert_or_assign("top.scratchpad.mem[942]reg", DumpEntry{top.scratchpad.mem[942] reg});
        res.insert_or_assign("top.scratchpad.mem[943]reg", DumpEntry{top.scratchpad.mem[943] reg});
        res.insert_or_assign("top.scratchpad.mem[944]reg", DumpEntry{top.scratchpad.mem[944] reg});
        res.insert_or_assign("top.scratchpad.mem[945]reg", DumpEntry{top.scratchpad.mem[945] reg});
        res.insert_or_assign("top.scratchpad.mem[946]reg", DumpEntry{top.scratchpad.mem[946] reg});
        res.insert_or_assign("top.scratchpad.mem[947]reg", DumpEntry{top.scratchpad.mem[947] reg});
        res.insert_or_assign("top.scratchpad.mem[948]reg", DumpEntry{top.scratchpad.mem[948] reg});
        res.insert_or_assign("top.scratchpad.mem[949]reg", DumpEntry{top.scratchpad.mem[949] reg});
        res.insert_or_assign("top.scratchpad.mem[950]reg", DumpEntry{top.scratchpad.mem[950] reg});
        res.insert_or_assign("top.scratchpad.mem[951]reg", DumpEntry{top.scratchpad.mem[951] reg});
        res.insert_or_assign("top.scratchpad.mem[952]reg", DumpEntry{top.scratchpad.mem[952] reg});
        res.insert_or_assign("top.scratchpad.mem[953]reg", DumpEntry{top.scratchpad.mem[953] reg});
        res.insert_or_assign("top.scratchpad.mem[954]reg", DumpEntry{top.scratchpad.mem[954] reg});
        res.insert_or_assign("top.scratchpad.mem[955]reg", DumpEntry{top.scratchpad.mem[955] reg});
        res.insert_or_assign("top.scratchpad.mem[956]reg", DumpEntry{top.scratchpad.mem[956] reg});
        res.insert_or_assign("top.scratchpad.mem[957]reg", DumpEntry{top.scratchpad.mem[957] reg});
        res.insert_or_assign("top.scratchpad.mem[958]reg", DumpEntry{top.scratchpad.mem[958] reg});
        res.insert_or_assign("top.scratchpad.mem[959]reg", DumpEntry{top.scratchpad.mem[959] reg});
        res.insert_or_assign("top.scratchpad.mem[960]reg", DumpEntry{top.scratchpad.mem[960] reg});
        res.insert_or_assign("top.scratchpad.mem[961]reg", DumpEntry{top.scratchpad.mem[961] reg});
        res.insert_or_assign("top.scratchpad.mem[962]reg", DumpEntry{top.scratchpad.mem[962] reg});
        res.insert_or_assign("top.scratchpad.mem[963]reg", DumpEntry{top.scratchpad.mem[963] reg});
        res.insert_or_assign("top.scratchpad.mem[964]reg", DumpEntry{top.scratchpad.mem[964] reg});
        res.insert_or_assign("top.scratchpad.mem[965]reg", DumpEntry{top.scratchpad.mem[965] reg});
        res.insert_or_assign("top.scratchpad.mem[966]reg", DumpEntry{top.scratchpad.mem[966] reg});
        res.insert_or_assign("top.scratchpad.mem[967]reg", DumpEntry{top.scratchpad.mem[967] reg});
        res.insert_or_assign("top.scratchpad.mem[968]reg", DumpEntry{top.scratchpad.mem[968] reg});
        res.insert_or_assign("top.scratchpad.mem[969]reg", DumpEntry{top.scratchpad.mem[969] reg});
        res.insert_or_assign("top.scratchpad.mem[970]reg", DumpEntry{top.scratchpad.mem[970] reg});
        res.insert_or_assign("top.scratchpad.mem[971]reg", DumpEntry{top.scratchpad.mem[971] reg});
        res.insert_or_assign("top.scratchpad.mem[972]reg", DumpEntry{top.scratchpad.mem[972] reg});
        res.insert_or_assign("top.scratchpad.mem[973]reg", DumpEntry{top.scratchpad.mem[973] reg});
        res.insert_or_assign("top.scratchpad.mem[974]reg", DumpEntry{top.scratchpad.mem[974] reg});
        res.insert_or_assign("top.scratchpad.mem[975]reg", DumpEntry{top.scratchpad.mem[975] reg});
        res.insert_or_assign("top.scratchpad.mem[976]reg", DumpEntry{top.scratchpad.mem[976] reg});
        res.insert_or_assign("top.scratchpad.mem[977]reg", DumpEntry{top.scratchpad.mem[977] reg});
        res.insert_or_assign("top.scratchpad.mem[978]reg", DumpEntry{top.scratchpad.mem[978] reg});
        res.insert_or_assign("top.scratchpad.mem[979]reg", DumpEntry{top.scratchpad.mem[979] reg});
        res.insert_or_assign("top.scratchpad.mem[980]reg", DumpEntry{top.scratchpad.mem[980] reg});
        res.insert_or_assign("top.scratchpad.mem[981]reg", DumpEntry{top.scratchpad.mem[981] reg});
        res.insert_or_assign("top.scratchpad.mem[982]reg", DumpEntry{top.scratchpad.mem[982] reg});
        res.insert_or_assign("top.scratchpad.mem[983]reg", DumpEntry{top.scratchpad.mem[983] reg});
        res.insert_or_assign("top.scratchpad.mem[984]reg", DumpEntry{top.scratchpad.mem[984] reg});
        res.insert_or_assign("top.scratchpad.mem[985]reg", DumpEntry{top.scratchpad.mem[985] reg});
        res.insert_or_assign("top.scratchpad.mem[986]reg", DumpEntry{top.scratchpad.mem[986] reg});
        res.insert_or_assign("top.scratchpad.mem[987]reg", DumpEntry{top.scratchpad.mem[987] reg});
        res.insert_or_assign("top.scratchpad.mem[988]reg", DumpEntry{top.scratchpad.mem[988] reg});
        res.insert_or_assign("top.scratchpad.mem[989]reg", DumpEntry{top.scratchpad.mem[989] reg});
        res.insert_or_assign("top.scratchpad.mem[990]reg", DumpEntry{top.scratchpad.mem[990] reg});
        res.insert_or_assign("top.scratchpad.mem[991]reg", DumpEntry{top.scratchpad.mem[991] reg});
        res.insert_or_assign("top.scratchpad.mem[992]reg", DumpEntry{top.scratchpad.mem[992] reg});
        res.insert_or_assign("top.scratchpad.mem[993]reg", DumpEntry{top.scratchpad.mem[993] reg});
        res.insert_or_assign("top.scratchpad.mem[994]reg", DumpEntry{top.scratchpad.mem[994] reg});
        res.insert_or_assign("top.scratchpad.mem[995]reg", DumpEntry{top.scratchpad.mem[995] reg});
        res.insert_or_assign("top.scratchpad.mem[996]reg", DumpEntry{top.scratchpad.mem[996] reg});
        res.insert_or_assign("top.scratchpad.mem[997]reg", DumpEntry{top.scratchpad.mem[997] reg});
        res.insert_or_assign("top.scratchpad.mem[998]reg", DumpEntry{top.scratchpad.mem[998] reg});
        res.insert_or_assign("top.scratchpad.mem[999]reg", DumpEntry{top.scratchpad.mem[999] reg});
        res.insert_or_assign("top.scratchpad.mem[1000]reg", DumpEntry{top.scratchpad.mem[1000] reg});
        res.insert_or_assign("top.scratchpad.mem[1001]reg", DumpEntry{top.scratchpad.mem[1001] reg});
        res.insert_or_assign("top.scratchpad.mem[1002]reg", DumpEntry{top.scratchpad.mem[1002] reg});
        res.insert_or_assign("top.scratchpad.mem[1003]reg", DumpEntry{top.scratchpad.mem[1003] reg});
        res.insert_or_assign("top.scratchpad.mem[1004]reg", DumpEntry{top.scratchpad.mem[1004] reg});
        res.insert_or_assign("top.scratchpad.mem[1005]reg", DumpEntry{top.scratchpad.mem[1005] reg});
        res.insert_or_assign("top.scratchpad.mem[1006]reg", DumpEntry{top.scratchpad.mem[1006] reg});
        res.insert_or_assign("top.scratchpad.mem[1007]reg", DumpEntry{top.scratchpad.mem[1007] reg});
        res.insert_or_assign("top.scratchpad.mem[1008]reg", DumpEntry{top.scratchpad.mem[1008] reg});
        res.insert_or_assign("top.scratchpad.mem[1009]reg", DumpEntry{top.scratchpad.mem[1009] reg});
        res.insert_or_assign("top.scratchpad.mem[1010]reg", DumpEntry{top.scratchpad.mem[1010] reg});
        res.insert_or_assign("top.scratchpad.mem[1011]reg", DumpEntry{top.scratchpad.mem[1011] reg});
        res.insert_or_assign("top.scratchpad.mem[1012]reg", DumpEntry{top.scratchpad.mem[1012] reg});
        res.insert_or_assign("top.scratchpad.mem[1013]reg", DumpEntry{top.scratchpad.mem[1013] reg});
        res.insert_or_assign("top.scratchpad.mem[1014]reg", DumpEntry{top.scratchpad.mem[1014] reg});
        res.insert_or_assign("top.scratchpad.mem[1015]reg", DumpEntry{top.scratchpad.mem[1015] reg});
        res.insert_or_assign("top.scratchpad.mem[1016]reg", DumpEntry{top.scratchpad.mem[1016] reg});
        res.insert_or_assign("top.scratchpad.mem[1017]reg", DumpEntry{top.scratchpad.mem[1017] reg});
        res.insert_or_assign("top.scratchpad.mem[1018]reg", DumpEntry{top.scratchpad.mem[1018] reg});
        res.insert_or_assign("top.scratchpad.mem[1019]reg", DumpEntry{top.scratchpad.mem[1019] reg});
        res.insert_or_assign("top.scratchpad.mem[1020]reg", DumpEntry{top.scratchpad.mem[1020] reg});
        res.insert_or_assign("top.scratchpad.mem[1021]reg", DumpEntry{top.scratchpad.mem[1021] reg});
        res.insert_or_assign("top.scratchpad.mem[1022]reg", DumpEntry{top.scratchpad.mem[1022] reg});
        res.insert_or_assign("top.scratchpad.mem[1023]reg", DumpEntry{top.scratchpad.mem[1023] reg});
        res.insert_or_assign("top.pwmVrefHeater.ctrl", DumpEntry{top.pwmVrefHeater.ctrl});
        res.insert_or_assign("top.pwmVrefHeater.ctrl.enable", DumpEntry{top.pwmVrefHeater.ctrl.enable});
        res.insert_or_assign("top.pwmVrefHeater.ctrl.reset", DumpEntry{top.pwmVrefHeater.ctrl.reset});
        res.insert_or_assign("top.pwmVrefHeater.carrierBits", DumpEntry{top.pwmVrefHeater.carrierBits});
        res.insert_or_assign("top.pwmVrefHeater.deadtimeBits", DumpEntry{top.pwmVrefHeater.deadtimeBits});
        res.insert_or_assign("top.pwmVrefHeater.config", DumpEntry{top.pwmVrefHeater.config});
        res.insert_or_assign("top.pwmVrefHeater.config.updateType", DumpEntry{top.pwmVrefHeater.config.updateType});
        res.insert_or_assign(
            "top.pwmVrefHeater.config.enablePwmCheck", DumpEntry{top.pwmVrefHeater.config.enablePwmCheck}
        );
        res.insert_or_assign(
            "top.pwmVrefHeater.config.enableStCheck", DumpEntry{top.pwmVrefHeater.config.enableStCheck}
        );
        res.insert_or_assign(
            "top.pwmVrefHeater.config.enableValueCheck", DumpEntry{top.pwmVrefHeater.config.enableValueCheck}
        );
        res.insert_or_assign(
            "top.pwmVrefHeater.config.bypassDeadtime", DumpEntry{top.pwmVrefHeater.config.bypassDeadtime}
        );
        res.insert_or_assign("top.pwmVrefHeater.config.disableA", DumpEntry{top.pwmVrefHeater.config.disableA});
        res.insert_or_assign("top.pwmVrefHeater.config.disableB", DumpEntry{top.pwmVrefHeater.config.disableB});
        res.insert_or_assign("top.pwmVrefHeater.config.invert", DumpEntry{top.pwmVrefHeater.config.invert});
        res.insert_or_assign("top.pwmVrefHeater.config.decoupleCc1", DumpEntry{top.pwmVrefHeater.config.decoupleCc1});
        res.insert_or_assign("top.pwmVrefHeater.cc0Sc", DumpEntry{top.pwmVrefHeater.cc0Sc});
        res.insert_or_assign("top.pwmVrefHeater.cc1Sc", DumpEntry{top.pwmVrefHeater.cc1Sc});
        res.insert_or_assign("top.pwmVrefHeater.ctrhSc", DumpEntry{top.pwmVrefHeater.ctrhSc});
        res.insert_or_assign("top.pwmVrefHeater.deadtimeSc", DumpEntry{top.pwmVrefHeater.deadtimeSc});
        res.insert_or_assign("top.pwmVrefHeater.extendedDeadtimeSc", DumpEntry{top.pwmVrefHeater.extendedDeadtimeSc});
        res.insert_or_assign("top.pwmVrefHeater.minSwitchTimeSc", DumpEntry{top.pwmVrefHeater.minSwitchTimeSc});
        res.insert_or_assign("top.pwmVrefHeater.minModIdxSc", DumpEntry{top.pwmVrefHeater.minModIdxSc});
        res.insert_or_assign("top.pwmVrefHeater.maxModIdxSc", DumpEntry{top.pwmVrefHeater.maxModIdxSc});
        res.insert_or_assign("top.pwmVrefHeater.numberCcErrors", DumpEntry{top.pwmVrefHeater.numberCcErrors});
        res.insert_or_assign("top.eventLog.status", DumpEntry{top.eventLog.status});
        res.insert_or_assign("top.eventLog.status.entryLost", DumpEntry{top.eventLog.status.entryLost});
        res.insert_or_assign("top.eventLog.status.entryValid", DumpEntry{top.eventLog.status.entryValid});
        res.insert_or_assign("top.eventLog.status.typeIndex", DumpEntry{top.eventLog.status.typeIndex});
        res.insert_or_assign("top.eventLog.status.bankNumber", DumpEntry{top.eventLog.status.bankNumber});
        res.insert_or_assign("top.eventLog.timestampS", DumpEntry{top.eventLog.timestampS});
        res.insert_or_assign("top.eventLog.timestampUs", DumpEntry{top.eventLog.timestampUs});
        res.insert_or_assign("top.eventLog.data", DumpEntry{top.eventLog.data});
        res.insert_or_assign("top.eventLog.fifoDataCount", DumpEntry{top.eventLog.fifoDataCount});
        res.insert_or_assign("top.eventLog.masks[0].re", DumpEntry{top.eventLog.masks[0].re});
        res.insert_or_assign("top.eventLog.masks[0].fe", DumpEntry{top.eventLog.masks[0].fe});
        res.insert_or_assign("top.eventLog.masks[1].re", DumpEntry{top.eventLog.masks[1].re});
        res.insert_or_assign("top.eventLog.masks[1].fe", DumpEntry{top.eventLog.masks[1].fe});
        res.insert_or_assign("top.eventLog.masks[2].re", DumpEntry{top.eventLog.masks[2].re});
        res.insert_or_assign("top.eventLog.masks[2].fe", DumpEntry{top.eventLog.masks[2].fe});
        res.insert_or_assign("top.eventLog.masks[3].re", DumpEntry{top.eventLog.masks[3].re});
        res.insert_or_assign("top.eventLog.masks[3].fe", DumpEntry{top.eventLog.masks[3].fe});
        res.insert_or_assign("top.eventLog.masks[4].re", DumpEntry{top.eventLog.masks[4].re});
        res.insert_or_assign("top.eventLog.masks[4].fe", DumpEntry{top.eventLog.masks[4].fe});
        res.insert_or_assign("top.eventLog.masks[5].re", DumpEntry{top.eventLog.masks[5].re});
        res.insert_or_assign("top.eventLog.masks[5].fe", DumpEntry{top.eventLog.masks[5].fe});
        res.insert_or_assign("top.eventLog.masks[6].re", DumpEntry{top.eventLog.masks[6].re});
        res.insert_or_assign("top.eventLog.masks[6].fe", DumpEntry{top.eventLog.masks[6].fe});
        res.insert_or_assign("top.eventLog.masks[7].re", DumpEntry{top.eventLog.masks[7].re});
        res.insert_or_assign("top.eventLog.masks[7].fe", DumpEntry{top.eventLog.masks[7].fe});
        res.insert_or_assign("top.eventLog.masks[8].re", DumpEntry{top.eventLog.masks[8].re});
        res.insert_or_assign("top.eventLog.masks[8].fe", DumpEntry{top.eventLog.masks[8].fe});
        res.insert_or_assign("top.eventLog.masks[9].re", DumpEntry{top.eventLog.masks[9].re});
        res.insert_or_assign("top.eventLog.masks[9].fe", DumpEntry{top.eventLog.masks[9].fe});
        res.insert_or_assign("top.eventLog.masks[10].re", DumpEntry{top.eventLog.masks[10].re});
        res.insert_or_assign("top.eventLog.masks[10].fe", DumpEntry{top.eventLog.masks[10].fe});
        res.insert_or_assign("top.eventLog.masks[11].re", DumpEntry{top.eventLog.masks[11].re});
        res.insert_or_assign("top.eventLog.masks[11].fe", DumpEntry{top.eventLog.masks[11].fe});
        res.insert_or_assign("top.eventLog.masks[12].re", DumpEntry{top.eventLog.masks[12].re});
        res.insert_or_assign("top.eventLog.masks[12].fe", DumpEntry{top.eventLog.masks[12].fe});
        res.insert_or_assign("top.eventLog.masks[13].re", DumpEntry{top.eventLog.masks[13].re});
        res.insert_or_assign("top.eventLog.masks[13].fe", DumpEntry{top.eventLog.masks[13].fe});
        res.insert_or_assign("top.eventLog.masks[14].re", DumpEntry{top.eventLog.masks[14].re});
        res.insert_or_assign("top.eventLog.masks[14].fe", DumpEntry{top.eventLog.masks[14].fe});
        res.insert_or_assign("top.eventLog.masks[15].re", DumpEntry{top.eventLog.masks[15].re});
        res.insert_or_assign("top.eventLog.masks[15].fe", DumpEntry{top.eventLog.masks[15].fe});
        res.insert_or_assign("top.eventLog.masks[16].re", DumpEntry{top.eventLog.masks[16].re});
        res.insert_or_assign("top.eventLog.masks[16].fe", DumpEntry{top.eventLog.masks[16].fe});
        res.insert_or_assign("top.eventLog.masks[17].re", DumpEntry{top.eventLog.masks[17].re});
        res.insert_or_assign("top.eventLog.masks[17].fe", DumpEntry{top.eventLog.masks[17].fe});
        res.insert_or_assign("top.eventLog.masks[18].re", DumpEntry{top.eventLog.masks[18].re});
        res.insert_or_assign("top.eventLog.masks[18].fe", DumpEntry{top.eventLog.masks[18].fe});
        res.insert_or_assign("top.eventLog.masks[19].re", DumpEntry{top.eventLog.masks[19].re});
        res.insert_or_assign("top.eventLog.masks[19].fe", DumpEntry{top.eventLog.masks[19].fe});
        res.insert_or_assign("top.eventLog.masks[20].re", DumpEntry{top.eventLog.masks[20].re});
        res.insert_or_assign("top.eventLog.masks[20].fe", DumpEntry{top.eventLog.masks[20].fe});
        res.insert_or_assign("top.eventLog.masks[21].re", DumpEntry{top.eventLog.masks[21].re});
        res.insert_or_assign("top.eventLog.masks[21].fe", DumpEntry{top.eventLog.masks[21].fe});
        res.insert_or_assign("top.eventLog.masks[22].re", DumpEntry{top.eventLog.masks[22].re});
        res.insert_or_assign("top.eventLog.masks[22].fe", DumpEntry{top.eventLog.masks[22].fe});
        res.insert_or_assign("top.eventLog.masks[23].re", DumpEntry{top.eventLog.masks[23].re});
        res.insert_or_assign("top.eventLog.masks[23].fe", DumpEntry{top.eventLog.masks[23].fe});
        res.insert_or_assign("top.eventLog.masks[24].re", DumpEntry{top.eventLog.masks[24].re});
        res.insert_or_assign("top.eventLog.masks[24].fe", DumpEntry{top.eventLog.masks[24].fe});
        res.insert_or_assign("top.eventLog.masks[25].re", DumpEntry{top.eventLog.masks[25].re});
        res.insert_or_assign("top.eventLog.masks[25].fe", DumpEntry{top.eventLog.masks[25].fe});
        res.insert_or_assign("top.eventLog.masks[26].re", DumpEntry{top.eventLog.masks[26].re});
        res.insert_or_assign("top.eventLog.masks[26].fe", DumpEntry{top.eventLog.masks[26].fe});
        res.insert_or_assign("top.eventLog.masks[27].re", DumpEntry{top.eventLog.masks[27].re});
        res.insert_or_assign("top.eventLog.masks[27].fe", DumpEntry{top.eventLog.masks[27].fe});
        res.insert_or_assign("top.eventLog.masks[28].re", DumpEntry{top.eventLog.masks[28].re});
        res.insert_or_assign("top.eventLog.masks[28].fe", DumpEntry{top.eventLog.masks[28].fe});
        res.insert_or_assign("top.eventLog.masks[29].re", DumpEntry{top.eventLog.masks[29].re});
        res.insert_or_assign("top.eventLog.masks[29].fe", DumpEntry{top.eventLog.masks[29].fe});
        res.insert_or_assign("top.eventLog.masks[30].re", DumpEntry{top.eventLog.masks[30].re});
        res.insert_or_assign("top.eventLog.masks[30].fe", DumpEntry{top.eventLog.masks[30].fe});
        res.insert_or_assign("top.eventLog.masks[31].re", DumpEntry{top.eventLog.masks[31].re});
        res.insert_or_assign("top.eventLog.masks[31].fe", DumpEntry{top.eventLog.masks[31].fe});
        res.insert_or_assign("top.freqWatchdog.alive", DumpEntry{top.freqWatchdog.alive});
        res.insert_or_assign("top.freqWatchdog.minPeriodSc", DumpEntry{top.freqWatchdog.minPeriodSc});
        res.insert_or_assign("top.freqWatchdog.maxPeriodSc", DumpEntry{top.freqWatchdog.maxPeriodSc});
        return res;
    }
}
