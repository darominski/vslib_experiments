// This header file was auto-generated using cheby
// User: daromins
// Date: 2025-04-14 16:48:51.034506
// Source map: mb_top.cheby
// Command used: /home/daromins/project/code/cheby/proto/cheby.py --gen-cpp=mb_top.hpp --cpp-json=cpp/mb_top.json -i
// mb_top.cheby
//
// It is meant to be used in conjunction with the MemMap++ library (mmpp):
//     https://gitlab.cern.ch/czrounba/mmpp
//
// ************************************************************

#pragma once

#include <mmpp.h>


namespace unnamed
{
    using namespace mmpp;

    //! ::Top
    //!
    //! Top level address space mapping for FGC4 Main Board FPGA
    struct Top : MemModule<54784, uint32_t, attributes::ByteOrdering::little, attributes::WordOrdering::little>
    {
        // No version information provided.

        using MemModule::MemModule;

        //! Make this memory item point to another memory location
        //!
        //! @param new_base the new base address in memory that the memory item will map to
        void relocate(uint8_t* new_base) noexcept
        {
            // Construct new item in place using the new base address
            *this = Top(new_base);
        }

        struct AdcCalint : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Ctrl : MemReg<AdcCalint, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{base() + 0};   //!< Reset the ADC interface
                MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                    base() + 0};   //!< Start the ADC conversion and transmission
                //! Reset the external ADC (hardware-dependent feature)
                MemField<Ctrl, 2, 2, attributes::AccessMode::RW, bool> hwReset{base() + 0};
            };

            struct Config : MemReg<AdcCalint, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                    base() + 0};   //!< Clock polarity as defined in SPI spec.
                MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                    base() + 0};   //!< Clock phase as defined in SPI spec.
                //! Polarity of CNV output. 0 - negative, 1 - positive
                MemField<Config, 2, 2, attributes::AccessMode::RW, bool> cnvPol{base() + 0};
                MemField<Config, 3, 3, attributes::AccessMode::RW, bool> cnvWithCs{
                    base() + 0};   //!< CNV output is also CS output
                //! Polarity of BUSY input. 0 - negative, 1 - positive
                MemField<Config, 4, 4, attributes::AccessMode::RW, bool> busyPol{base() + 0};
                //! Source of BUSY feedback. 0x0 - dedicated BUSY signal, 0x1 -
                //! multiplexed with SDO data pin, 0x2 - internal programmable
                //! timer
                MemField<Config, 5, 6, attributes::AccessMode::RW, uint8_t> busySrc{base() + 0};
                //! Number of SPI clock cycles that controller should wait in
                //! BUSY state. Valid only if BUSY source is set to internal
                //! timer
                MemField<Config, 7, 12, attributes::AccessMode::RW, uint8_t> busyTime{base() + 0};
                //! SPI clock is active (1) or disabled (0) in conversion/BUSY
                //! state
                MemField<Config, 13, 13, attributes::AccessMode::RW, bool>    clkActInConv{base() + 0};
                MemField<Config, 16, 20, attributes::AccessMode::RW, uint8_t> dataWidth{
                    base() + 0};   //!< ADC data width
                //! The adc can either be controlled via a SW register (0) or
                //! via a gateware port (1). Control means starting the adc.
                MemField<Config, 21, 21, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
            };

            struct Status : MemReg<AdcCalint, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;

                MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                //! Number of active data in ports (hardcoded at compile time)
                MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> dinPorts{base() + 0};
                MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                    base() + 0};   //!< Core is busy sending data
                //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                //! clk_prescaler
                MemField<Status, 16, 20, attributes::AccessMode::RO, uint8_t> clkPrescaler{base() + 0};
            };

            struct DataArrayItem : MemSubmodule<AdcCalint, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Value value{base() + 0};   //!< (no comment provided)
            };
            using DataArray = MemArray<AdcCalint, DataArrayItem, 16, 4>;

            Ctrl      ctrl{base() + 0};     //!< Control register
            Config    config{base() + 4};   //!< ADC interface configuration
            Status    status{base() + 8};   //!< Status register
            DataArray data{base() + 64};    //!< Data received from ADC
        };

        struct AdcUncalintArrayItem : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Adc : MemSubmodule<AdcUncalintArrayItem, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Adc, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{
                        base() + 0};   //!< Reset the ADC interface
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                        base() + 0};   //!< Start the ADC conversion and transmission
                    //! Reset the external ADC (hardware-dependent feature)
                    MemField<Ctrl, 2, 2, attributes::AccessMode::RW, bool> hwReset{base() + 0};
                };

                struct Config : MemReg<Adc, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                        base() + 0};   //!< Clock polarity as defined in SPI spec.
                    MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                        base() + 0};   //!< Clock phase as defined in SPI spec.
                    //! Polarity of CNV output. 0 - negative, 1 - positive
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> cnvPol{base() + 0};
                    MemField<Config, 3, 3, attributes::AccessMode::RW, bool> cnvWithCs{
                        base() + 0};   //!< CNV output is also CS output
                    //! Polarity of BUSY input. 0 - negative, 1 - positive
                    MemField<Config, 4, 4, attributes::AccessMode::RW, bool> busyPol{base() + 0};
                    //! Source of BUSY feedback. 0x0 - dedicated BUSY signal, 0x1 -
                    //! multiplexed with SDO data pin, 0x2 - internal programmable
                    //! timer
                    MemField<Config, 5, 6, attributes::AccessMode::RW, uint8_t> busySrc{base() + 0};
                    //! Number of SPI clock cycles that controller should wait in
                    //! BUSY state. Valid only if BUSY source is set to internal
                    //! timer
                    MemField<Config, 7, 12, attributes::AccessMode::RW, uint8_t> busyTime{base() + 0};
                    //! SPI clock is active (1) or disabled (0) in conversion/BUSY
                    //! state
                    MemField<Config, 13, 13, attributes::AccessMode::RW, bool>    clkActInConv{base() + 0};
                    MemField<Config, 16, 20, attributes::AccessMode::RW, uint8_t> dataWidth{
                        base() + 0};   //!< ADC data width
                    //! The adc can either be controlled via a SW register (0) or
                    //! via a gateware port (1). Control means starting the adc.
                    MemField<Config, 21, 21, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
                };

                struct Status : MemReg<Adc, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                    //! Number of active data in ports (hardcoded at compile time)
                    MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> dinPorts{base() + 0};
                    MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                        base() + 0};   //!< Core is busy sending data
                    //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                    //! clk_prescaler
                    MemField<Status, 16, 20, attributes::AccessMode::RO, uint8_t> clkPrescaler{base() + 0};
                };

                struct DataArrayItem : MemSubmodule<Adc, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Value value{base() + 0};   //!< (no comment provided)
                };
                using DataArray = MemArray<Adc, DataArrayItem, 16, 4>;

                Ctrl      ctrl{base() + 0};     //!< Control register
                Config    config{base() + 4};   //!< ADC interface configuration
                Status    status{base() + 8};   //!< Status register
                DataArray data{base() + 64};    //!< Data received from ADC
            };

            Adc adc{base() + 0};   //!< ADC controller
        };
        using AdcUncalintArray = MemArray<Top, AdcUncalintArrayItem, 6, 128>;

        struct DacIntArrayItem : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;

            struct Dac : MemSubmodule<DacIntArrayItem, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Dac, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> reset{
                        base() + 0};   //!< Reset the DAC interface
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> start{
                        base() + 0};   //!< Start the DAC transmission
                };

                struct Config : MemReg<Dac, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 0, attributes::AccessMode::RW, bool> cpol{
                        base() + 0};   //!< Clock polarity as defined in SPI spec.
                    MemField<Config, 1, 1, attributes::AccessMode::RW, bool> cpha{
                        base() + 0};   //!< Clock phase as defined in SPI spec.
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> msbFirst{
                        base() + 0};   //!< Bit order - transfer MSB as first or last bit
                    MemField<Config, 3, 5, attributes::AccessMode::RW, uint8_t> prePad{
                        base() + 0};   //!< Number of '0's pre-padded before the data
                    MemField<Config, 6, 8, attributes::AccessMode::RW, uint8_t> postPad{
                        base() + 0};   //!< Number of '0's post-padded after the data
                    MemField<Config, 9, 13, attributes::AccessMode::RW, uint8_t> dataWidth{
                        base() + 0};   //!< DAC data width
                    //! Dead time between end of SPI transfer and end of whole DAC
                    //! control cycle
                    MemField<Config, 14, 19, attributes::AccessMode::RW, uint8_t> deadTime{base() + 0};
                    //! SPI clock prescaler. Final SPI freq is Fclk / 2 /
                    //! clk_prescaler
                    MemField<Config, 20, 25, attributes::AccessMode::RW, uint8_t> clkPres{base() + 0};
                    //! Number of additional clock cycles to generate after
                    //! transmission
                    MemField<Config, 26, 29, attributes::AccessMode::RW, uint8_t> fixAddClkCyc{base() + 0};
                    //! The dac can either be controlled via a SW register (0) or
                    //! via a gateware ports (1). Control means starting the dac and
                    //! giving data to the dac.
                    MemField<Config, 30, 30, attributes::AccessMode::RW, bool> gwCtrl{base() + 0};
                };

                struct Status : MemReg<Dac, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Status, 0, 3, attributes::AccessMode::RO, uint8_t> apiVer{base() + 0};   //!< API version
                    //! Number of active data out ports (hardcoded at compile time)
                    MemField<Status, 4, 7, attributes::AccessMode::RO, uint8_t> doutPorts{base() + 0};
                    MemField<Status, 8, 8, attributes::AccessMode::RO, bool>    busy{
                        base() + 0};   //!< Core is busy sending data
                };

                struct DataArrayItem : MemSubmodule<Dac, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Value : MemReg<DataArrayItem, 4, attributes::AccessMode::WO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Value value{base() + 0};   //!< (no comment provided)
                };
                using DataArray = MemArray<Dac, DataArrayItem, 16, 4>;

                Ctrl      ctrl{base() + 0};     //!< Control register
                Config    config{base() + 4};   //!< DAC interface configuration
                Status    status{base() + 8};   //!< Status register
                DataArray data{base() + 64};    //!< Data to be sent to DAC
            };

            Dac dac{base() + 0};   //!< DAC controller
        };
        using DacIntArray = MemArray<Top, DacIntArrayItem, 2, 128>;

        struct SignalBank : MemSubmodule<Top, 2048>
        {

            using MemSubmodule::MemSubmodule;

            struct DigI0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigI1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigIndI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ContactI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct OpticalI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ProtI : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct DigOcO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct ContactO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct OpticalO : MemReg<SignalBank, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinMaxLim0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct MinMaxLim1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RmsLim0 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RmsLim1 : MemReg<SignalBank, 4, attributes::AccessMode::RO, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct RegArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<RegArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir reg register
            };
            using RegArray = MemArray<SignalBank, RegArrayItem, 62, 4>;

            struct VloopArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<VloopArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir vloop register
            };
            using VloopArray = MemArray<SignalBank, VloopArrayItem, 62, 4>;

            struct RawArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Raw : MemReg<RawArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Raw raw{base() + 0};   //!< Raw ADC values
            };
            using RawArray = MemArray<SignalBank, RawArrayItem, 62, 4>;

            struct MmArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<MmArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir register
            };
            using MmArray = MemArray<SignalBank, MmArrayItem, 62, 4>;

            struct MsArrayItem : MemSubmodule<SignalBank, 4>
            {

                using MemSubmodule::MemSubmodule;

                struct Fir : MemReg<MsArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Fir fir{base() + 0};   //!< Fir register
            };
            using MsArray = MemArray<SignalBank, MsArrayItem, 62, 4>;

            DigI0      digI0{base() + 0};          //!< DIG_I bank 0. 28-bit.
            DigI1      digI1{base() + 4};          //!< DIG_I bank 1. 28-bit.
            DigIndI    digIndI{base() + 8};        //!< DIG_IND_I. 16-bit.
            ContactI   contactI{base() + 12};      //!< CONTACT_I. 8-bit.
            OpticalI   opticalI{base() + 16};      //!< OPTICAL_I. 6-bit.
            ProtI      protI{base() + 20};         //!< PROT_I. 3-bit or 4-bit.
            DigO       digO{base() + 24};          //!< DIG_O. 28-bit.
            DigOcO     digOcO{base() + 28};        //!< DIG_OC_O. 24-bit.
            ContactO   contactO{base() + 32};      //!< CONTACT_O. 6-bit.
            OpticalO   opticalO{base() + 36};      //!< OPTICAL_O. 6-bit.
            MinMaxLim0 minMaxLim0{base() + 112};   //!< MIN_MAX_LIM bank 0. 32-bit.
            MinMaxLim1 minMaxLim1{base() + 116};   //!< MIN_MAX_LIM bank 1. 32-bit.
            RmsLim0    rmsLim0{base() + 120};      //!< RMS_LIM bank 0. 32-bit.
            RmsLim1    rmsLim1{base() + 124};      //!< RMS_LIM bank 1. 32-bit.
            RegArray   reg{base() + 256};          //!< The 62 reg fir values
            VloopArray vloop{base() + 512};        //!< The 62 vloop fir values
            RawArray   raw{base() + 768};          //!< The 62 values coming directly from the ADCs
            MmArray    mm{base() + 1024};          //!< The 62 min/max fir values
            MsArray    ms{base() + 1280};          //!< The 62 ms fir values
        };

        struct AnalogFir : MemSubmodule<Top, 16384>
        {

            using MemSubmodule::MemSubmodule;

            struct ChannelArrayItem : MemSubmodule<AnalogFir, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct RFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<RFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct VFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<VFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct MmFir : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    struct M : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct N : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct S : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct R : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct TSc : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Phase : MemReg<MmFir, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    M m{base() + 0};    //!< Accumulator window. 10 bits.
                    N n{base() + 4};    //!< Fir sampling window. 10 bits.
                    S s{base() + 8};    //!< Fir output bit shift. 4 bits.
                    R r{base() + 12};   //!< Upsampling ratio. 11 bits.
                    //! adc_sc/upsamling_ratio. (adc sampling period in sc divided
                    //! by upsamling ratio (which is r)). 18 bits. This is used for
                    //! the PTG to space the cic data generation over the adc's
                    //! sample period. This is also used to control the data
                    //! transfer to the software.
                    TSc tSc{base() + 16};
                    //! Fir phase relative to the CIC. Is the initial value of the
                    //! downcounter. 10 bits.
                    Phase phase{base() + 20};
                };

                struct Limit : MemSubmodule<ChannelArrayItem, 16>
                {

                    using MemSubmodule::MemSubmodule;

                    struct MaxLimit : MemReg<Limit, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MinLimit : MemReg<Limit, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct FilterLength : MemReg<Limit, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    MaxLimit maxLimit{base() + 0};   //!< Max limit
                    MinLimit minLimit{base() + 4};   //!< Min limit
                    //! The filter length. only the lower 5 bits are used. Possible
                    //! values are 1 to 31.
                    FilterLength filterLength{base() + 8};
                };

                RFir  rFir{base() + 0};     //!< (no comment provided)
                VFir  vFir{base() + 32};    //!< (no comment provided)
                MmFir mmFir{base() + 64};   //!< (no comment provided)
                Limit limit{base() + 96};   //!< (no comment provided)
            };
            using ChannelArray = MemArray<AnalogFir, ChannelArrayItem, 62, 128>;

            struct MmTrip : MemReg<AnalogFir, 8, attributes::AccessMode::RO, uint64_t>
            {
                using MemReg::MemReg;
            };

            ChannelArray channel{base() + 0};     //!< The 62 channels
            MmTrip       mmTrip{base() + 8192};   //!< Min/Max limiter trip register
        };

        struct AnalogMs : MemSubmodule<Top, 2048>
        {

            using MemSubmodule::MemSubmodule;

            struct ChannelArrayItem : MemSubmodule<AnalogMs, 32>
            {

                using MemSubmodule::MemSubmodule;

                struct Ms : MemSubmodule<ChannelArrayItem, 32>
                {

                    using MemSubmodule::MemSubmodule;

                    // ************************************************************

                    enum class MsAlgorithm : uint8_t
                    {
                        notInUse      = 0,   //!< ADC_nn_MS will always be zero
                        accSlidingAvg = 1,   //!< Algorithm 1, Accumulator and sliding average
                        firstOrderIir = 2,   //!< Algorithm 2, First-order IIR filter
                        reserved      = 3,   //!< Not in use. ADC_nn_MS will always be zero
                    };

                    // ************************************************************

                    struct Algorithms : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;

                        MemField<Algorithms, 0, 1, attributes::AccessMode::RW, MsAlgorithm> alg{
                            base() + 0};   //!< See enum `ms_algorithm`.
                    };

                    struct Offset : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct IirA : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct IirB : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MaxLimit : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct MinLimit : MemReg<Ms, 4, attributes::AccessMode::RW, int32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct AccLength : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct FirMask : MemReg<Ms, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Algorithms algorithms{base() + 0};   //!< For selecting the different MS algorithms
                    Offset     offset{base() + 4};       //!< The offset. 24 bits are used
                    IirA       iirA{base() + 8};         //!< The a factor of the iir.
                    IirB       iirB{base() + 12};        //!< The b factor of the iir.
                    //! A trip is generated if the filtered signal exceeds this
                    //! limit.
                    MaxLimit maxLimit{base() + 16};
                    //! A trip is generated if the filtered signal falls below this
                    //! limit.
                    MinLimit  minLimit{base() + 20};
                    AccLength accLength{base() + 24};   //!< The accumulator length. 15 bits are used
                    //! The software can select the length of the circular buffer by
                    //! setting this register register to a bit mask for the FIR
                    //! filter pointer. fir_mask = BOXCAR_LENGTH - 1. 12 bits are
                    //! used.
                    FirMask firMask{base() + 28};
                };

                Ms ms{base() + 0};   //!< (no comment provided)
            };
            using ChannelArray = MemArray<AnalogMs, ChannelArrayItem, 62, 32>;

            ChannelArray channel{base() + 0};   //!< The 62 ADCs
        };

        struct Dig : MemSubmodule<Top, 8192>
        {

            using MemSubmodule::MemSubmodule;

            struct DigI0 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigI0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigI0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<DigI0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<DigI0, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigI0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigI0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct DigI1 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigI1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigI1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<DigI1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<DigI1, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigI1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigI1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct DigIndI : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<DigIndI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<DigIndI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<DigIndI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<DigIndI, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<DigIndI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<DigIndI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct ContactI : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<ContactI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<ContactI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<ContactI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<ContactI, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<ContactI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<ContactI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct OpticalI : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<OpticalI, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<OpticalI, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<OpticalI, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<OpticalI, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<OpticalI, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<OpticalI, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct MinMaxLim0 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<MinMaxLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<MinMaxLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<MinMaxLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<MinMaxLim0, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<MinMaxLim0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<MinMaxLim0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct MinMaxLim1 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<MinMaxLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<MinMaxLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<MinMaxLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<MinMaxLim1, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<MinMaxLim1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<MinMaxLim1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct RmsLim0 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<RmsLim0, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<RmsLim0, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<RmsLim0, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<RmsLim0, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<RmsLim0, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<RmsLim0, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            struct RmsLim1 : MemSubmodule<Dig, 512>
            {

                using MemSubmodule::MemSubmodule;

                struct StaticParams : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<StaticParams, 0, 0, attributes::AccessMode::RO, bool> invertIsEn{
                        base() + 0};   //!< Invert is enabled.
                    MemField<StaticParams, 1, 1, attributes::AccessMode::RO, bool> enableIsEn{
                        base() + 0};   //!< Enable is enabled.
                    MemField<StaticParams, 2, 2, attributes::AccessMode::RO, bool> latchIsEn{
                        base() + 0};   //!< Latch is enabled.
                    MemField<StaticParams, 3, 3, attributes::AccessMode::RO, bool> deglitchIsEn{
                        base() + 0};   //!< Deglitch is enabled.
                    MemField<StaticParams, 4, 4, attributes::AccessMode::RO, bool> reTimeIsEn{
                        base() + 0};   //!< Rising-edge timestamping is enabled.
                    MemField<StaticParams, 8, 15, attributes::AccessMode::RO, uint8_t> numChannels{
                        base() + 0};   //!< The number of active digital input channels.
                };

                struct Data : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DataChanged : MemReg<RmsLim1, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Invert : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Enable : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Latch : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RstLatch : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct RisingInterrupt : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FallingInterrupt : MemReg<RmsLim1, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct FilterLengthScArrayItem : MemSubmodule<RmsLim1, 4>
                {

                    using MemSubmodule::MemSubmodule;

                    struct Val : MemReg<FilterLengthScArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    Val val{base() + 0};   //!< (no comment provided)
                };
                using FilterLengthScArray = MemArray<RmsLim1, FilterLengthScArrayItem, 32, 4>;

                struct ReTimeArrayItem : MemSubmodule<RmsLim1, 8>
                {

                    using MemSubmodule::MemSubmodule;

                    struct S : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    struct Ns : MemReg<ReTimeArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                    {
                        using MemReg::MemReg;
                    };

                    S  s{base() + 0};    //!< (no comment provided)
                    Ns ns{base() + 4};   //!< (no comment provided)
                };
                using ReTimeArray = MemArray<RmsLim1, ReTimeArrayItem, 32, 8>;

                //! Contains static information on the Digital Input module.
                StaticParams staticParams{base() + 0};
                //! The current input data AFTER processing. Bit 0 corresponds
                //! to channel 0 and so on.
                Data data{base() + 4};
                //! If the data changed since the last read. Clears on read.
                DataChanged dataChanged{base() + 8};
                //! Inverts the signal on each channel where the invert-bit is
                //! set.
                Invert invert{base() + 12};
                //! Enables the signal on each channel where the enable-bit is
                //! set.
                Enable enable{base() + 16};
                //! When this register is set, the corresponing channel is
                //! latched if it goes high.
                Latch            latch{base() + 20};
                RstLatch         rstLatch{base() + 24};           //!< Resets the data latch/ff.
                RisingInterrupt  risingInterrupt{base() + 28};    //!< Enables an interrupt on the rising-edge.
                FallingInterrupt fallingInterrupt{base() + 32};   //!< Enables an interrupt on the falling-edge.
                //! The length of the glitch filter in system clock periods. A
                //! length of 0 disables the glitch filtering on this channel. A
                //! certain filter length means that all signals that are
                //! SHORTER in duration are filtered out.
                FilterLengthScArray filterLengthSc{base() + 128};
                //! The last time in seconds and nanoseconds that a rising edge
                //! occurred on each channel.
                ReTimeArray reTime{base() + 256};
            };

            DigI0      digI0{base() + 0};           //!< (no comment provided)
            DigI1      digI1{base() + 512};         //!< (no comment provided)
            DigIndI    digIndI{base() + 1024};      //!< (no comment provided)
            ContactI   contactI{base() + 1536};     //!< (no comment provided)
            OpticalI   opticalI{base() + 2048};     //!< (no comment provided)
            MinMaxLim0 minMaxLim0{base() + 2560};   //!< (no comment provided)
            MinMaxLim1 minMaxLim1{base() + 3072};   //!< (no comment provided)
            RmsLim0    rmsLim0{base() + 3584};      //!< (no comment provided)
            RmsLim1    rmsLim1{base() + 4096};      //!< (no comment provided)
        };

        struct PwmArrayItem : MemSubmodule<Top, 64>
        {

            using MemSubmodule::MemSubmodule;

            struct Pwm : MemSubmodule<PwmArrayItem, 64>
            {

                using MemSubmodule::MemSubmodule;

                // ************************************************************

                enum class UpdateType : uint8_t
                {
                    zero       = 0,   //!< Update when the carrier is equal to 0.
                    period     = 1,   //!< Update when the carrier is equal to period.
                    zeroPeriod = 2,   //!< Update at zero and period.
                    immediate  = 3,
                };

                // ************************************************************

                struct Ctrl : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    //! Enable the PWM. There are two ways to start the PWM:
                    //! 1.
                    //! First, the SW writes '1' to this register. The PWM then
                    //! starts when it receives the GW start signal.
                    //! 2. The GW start
                    //! signal is used first to synchronize the PWM carrier. Then,
                    //! SW writes '1' to this register. The SW enable is
                    //! synchronized with the carrier, and the PWM starts the next
                    //! time the carrier reaches 0.
                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> enable{base() + 0};
                    //! Reset the PWM to the default state. Register values are not
                    //! reset.
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> reset{base() + 0};
                };

                struct CarrierBits : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DeadtimeBits : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Config : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Config, 0, 1, attributes::AccessMode::RW, UpdateType> updateType{
                        base() + 0};   //!< See enum `update_type`.
                    //! Enable the minimum on/off-time protection on the PWM
                    //! signals. If a violation is detected, the PWM goes to a fail-
                    //! safe state (both PWM signals go to low).
                    MemField<Config, 2, 2, attributes::AccessMode::RW, bool> enablePwmCheck{base() + 0};
                    //! Enable the shoot-through protection. If a shoot-through is
                    //! detected (both PWM outputs '1'), the PWM goes to a fail-safe
                    //! state. Not yet implemented.
                    MemField<Config, 3, 3, attributes::AccessMode::RW, bool> enableStCheck{base() + 0};
                    //! Enable the safe range check of the modulation index.
                    MemField<Config, 4, 4, attributes::AccessMode::RW, bool> enableValueCheck{base() + 0};
                    MemField<Config, 5, 5, attributes::AccessMode::RW, bool> bypassDeadtime{
                        base() + 0};   //!< Disable the deadtime.
                    MemField<Config, 6, 6, attributes::AccessMode::RW, bool> disableA{
                        base() + 0};   //!< Individually disable PWMA.
                    MemField<Config, 7, 7, attributes::AccessMode::RW, bool> disableB{
                        base() + 0};   //!< Individually disable PWMB.
                    MemField<Config, 8, 8, attributes::AccessMode::RW, bool> invert{
                        base() + 0};   //!< Invert both PWM outputs.
                    //! If this is set to 0, cc1 is always set to cc0. Set this to 1
                    //! to set cc0 and cc1 independently.
                    MemField<Config, 9, 9, attributes::AccessMode::RW, bool> decoupleCc1{base() + 0};
                };

                struct Cc0Sc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Cc1Sc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct CtrhSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DeadtimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct ExtendedDeadtimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MinSwitchTimeSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MinModIdxSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct MaxModIdxSc : MemReg<Pwm, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct NumberCcErrors : MemReg<Pwm, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;
                };

                //! Control signals. These signals are intended to be used
                //! during runtime.
                Ctrl ctrl{base() + 0};
                //! The number of available carrier bits. Static during runtime.
                CarrierBits carrierBits{base() + 4};
                //! The number of available deadtime bits. Static during
                //! runtime.
                DeadtimeBits deadtimeBits{base() + 8};
                //! Configuration registers are meant to be set once during
                //! startup (by the configurator).
                Config config{base() + 12};
                Cc0Sc  cc0Sc{base() + 16};   //!< cc0 in system clocks.
                Cc1Sc  cc1Sc{base() + 20};   //!< cc1 in system clocks.
                //! The maximum carrier value in system clocks. The PWM counts
                //! up to ctrh and then counts down to zero again in one PWM
                //! cycle.
                CtrhSc ctrhSc{base() + 24};
                //! Amount of deadtime in system clocks. This is a safety
                //! parameter and must not be changed during runtime. Deadtime
                //! is implemented similar to the TMS320 DSP
                DeadtimeSc deadtimeSc{base() + 28};
                //! Extended deadtime in system clocks. Is used by some (LPC)
                //! converters to be more energy efficient.
                ExtendedDeadtimeSc extendedDeadtimeSc{base() + 32};
                //! Minimum switch time in system clocks. Deadtime is applied
                //! after the minimum switch time, which means that
                //! (min_switch_time_sc - deadtime) must be greater or equal to
                //! the minimum switch time the converter can handle. For
                //! example, if the converter requires a min_switch_time of 1000
                //! sc and a deadtime of 200 sc, then min_switch_time_sc must be
                //! 1200. Because of the (possibly) inverted PWMB signal, the
                //! minimum on/off time must be symmetrical, which is why are no
                //! separate min_on_time and min_off_time.
                MinSwitchTimeSc minSwitchTimeSc{base() + 36};
                //! Minimum safe modulation index. This applies to both cc0 and
                //! cc1.
                MinModIdxSc minModIdxSc{base() + 40};
                //! Maximum safe modulation index. This applies to both cc0 and
                //! cc1.
                MaxModIdxSc maxModIdxSc{base() + 44};
                //! Counts the number of times the value check clipped cc
                //! values. Saturates at 0xFFFFFFFF.
                NumberCcErrors numberCcErrors{base() + 48};
            };

            Pwm pwm{base() + 0};   //!< PWM controller
        };
        using PwmArray = MemArray<Top, PwmArrayItem, 12, 64>;

        struct Ddma : MemSubmodule<Top, 2048>
        {

            using MemSubmodule::MemSubmodule;

            struct Trig : MemSubmodule<Ddma, 128>
            {

                using MemSubmodule::MemSubmodule;

                struct TrigReg : MemReg<Trig, 8, attributes::AccessMode::WO, uint64_t>
                {
                    using MemReg::MemReg;
                };

                //! Trigger register. Each bit corresponds to a trigger. When
                //! set, the trigger is active.
                TrigReg trig{base() + 0};
            };

            struct TdArrayItem : MemSubmodule<Ddma, 16>
            {

                using MemSubmodule::MemSubmodule;

                struct SrcAddr : MemReg<TdArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct DestAddr : MemReg<TdArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct Btt : MemReg<TdArrayItem, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Btt, 0, 25, attributes::AccessMode::RW, uint32_t> value{
                        base() + 0};   //!< Bytes-to-transfer
                };

                struct Errors : MemReg<TdArrayItem, 4, attributes::AccessMode::RO, uint32_t>
                {
                    using MemReg::MemReg;

                    //! Count of the internal DMA errors. Does not roll over after
                    //! 255.
                    MemField<Errors, 0, 7, attributes::AccessMode::RO, uint8_t> internalError{base() + 0};
                    //! Count of the DMA slave errors received from slave interface.
                    //! Does not roll over after 255.
                    MemField<Errors, 8, 15, attributes::AccessMode::RO, uint8_t> slaveError{base() + 0};
                    //! Count of the DMA decode errors received from slave
                    //! interface. Does not roll over after 255.
                    MemField<Errors, 16, 23, attributes::AccessMode::RO, uint8_t> decodeError{base() + 0};
                };

                SrcAddr  srcAddr{base() + 0};    //!< Source address
                DestAddr destAddr{base() + 4};   //!< Destination address
                Btt      btt{base() + 8};        //!< (no comment provided)
                Errors   errors{base() + 12};    //!< Error counter
            };
            using TdArray = MemArray<Ddma, TdArrayItem, 64, 16>;

            Trig    trig{base() + 0};    //!< (no comment provided)
            TdArray td{base() + 1024};   //!< (no comment provided)
        };

        struct SyncTime : MemSubmodule<Top, 8>
        {

            using MemSubmodule::MemSubmodule;

            struct S : MemReg<SyncTime, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            struct Sc : MemReg<SyncTime, 4, attributes::AccessMode::RW, uint32_t>
            {
                using MemReg::MemReg;
            };

            S s{base() + 0};   //!< The seconds part of the sync time.
            //! The system clock periods part of the sync time. The period
            //! is 5 ns. Only the lower 28 bits are used.
            Sc sc{base() + 4};
        };

        struct SyncTrigArrayItem : MemSubmodule<Top, 16>
        {

            using MemSubmodule::MemSubmodule;

            struct Stg : MemSubmodule<SyncTrigArrayItem, 16>
            {

                using MemSubmodule::MemSubmodule;

                struct Ctrl : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;

                    MemField<Ctrl, 0, 0, attributes::AccessMode::RW, bool> periodic{
                        base() + 0};   //!< When set, STG will generate periodic triggers
                    //! When set, STG will resynchronize when SYNC_RUN is set again
                    MemField<Ctrl, 1, 1, attributes::AccessMode::RW, bool> resync{base() + 0};
                };

                struct DelaySc : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                struct PeriodSc : MemReg<Stg, 4, attributes::AccessMode::RW, uint32_t>
                {
                    using MemReg::MemReg;
                };

                Ctrl ctrl{base() + 0};   //!< Control register
                //! Delay register. The delay is in system clock periods. Only
                //! 18 bits are used.
                DelaySc delaySc{base() + 4};
                //! Period register. The period is in system clock periods. Must
                //! be 1 at minimum.
                PeriodSc periodSc{base() + 8};
            };

            Stg stg{base() + 0};   //!< Synced Trigger Generator
        };
        using SyncTrigArray = MemArray<Top, SyncTrigArrayItem, 15, 16>;

        struct XilSpi : MemSubmodule<Top, 128>
        {

            using MemSubmodule::MemSubmodule;
        };

        struct XilI2c : MemSubmodule<Top, 512>
        {

            using MemSubmodule::MemSubmodule;
        };

        AdcCalint        adcCalint{base() + 0};        //!< Internal ADC controller (calibrated)
        AdcUncalintArray adcUncalint{base() + 1024};   //!< Internal ADC controllers (uncalibrated)
        DacIntArray      dacInt{base() + 2048};        //!< Internal DAC controllers
        SignalBank       signalBank{base() + 4096};    //!< Analog/Digital signal bank
        AnalogFir        analogFir{base() + 16384};    //!< Analog FIR filter config
        AnalogMs         analogMs{base() + 32768};     //!< Analog Mean Square filter config
        Dig              dig{base() + 40960};          //!< Digital I/O block config
        PwmArray         pwm{base() + 49152};          //!< PWM block
        Ddma             ddma{base() + 51200};         //!< Distribuded DMA controller
        SyncTime         syncTime{base() + 53248};     //!< Central synchronised RUN trigger
        SyncTrigArray    syncTrig{base() + 53504};     //!< Synchronised triggers
        XilSpi           xilSpi{base() + 53760};       //!< Xilinx SPI controller
        XilI2c           xilI2c{base() + 54272};       //!< Xilinx I2C controller
    };
}

// Populate the `mmpp::utils` namespace with functions pertaining to `unnamed`
namespace mmpp::utils
{
    //! Specialization of `to_string` for `unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm`
    template<>
    inline std::string to_string(const unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm& val)
    {
        switch (val)
        {
            case unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::notInUse:
                return "notInUse";
            case unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::accSlidingAvg:
                return "accSlidingAvg";
            case unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::firstOrderIir:
                return "firstOrderIir";
            case unnamed::Top::AnalogMs::ChannelArrayItem::Ms::MsAlgorithm::reserved:
                return "reserved";
            default:
                return "<undefined> (raw value: " + to_string(utils::as_unsigned(val)) + ")";
        }
    }

    //! Specialization of `to_string` for `unnamed::Top::PwmArrayItem::Pwm::UpdateType`
    template<>
    inline std::string to_string(const unnamed::Top::PwmArrayItem::Pwm::UpdateType& val)
    {
        switch (val)
        {
            case unnamed::Top::PwmArrayItem::Pwm::UpdateType::zero:
                return "zero";
            case unnamed::Top::PwmArrayItem::Pwm::UpdateType::period:
                return "period";
            case unnamed::Top::PwmArrayItem::Pwm::UpdateType::zeroPeriod:
                return "zeroPeriod";
            case unnamed::Top::PwmArrayItem::Pwm::UpdateType::immediate:
                return "immediate";
            default:
                return "<undefined> (raw value: " + to_string(utils::as_unsigned(val)) + ")";
        }
    }

    // ************************************************************

    //! Dump the register and fields of `unnamed::Top::AdcCalint::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AdcCalint::DataArray& data)
    {
        DumpMap res{data.base()};
        res.insert_or_assign("data[0].value", DumpEntry{data[0].value});
        res.insert_or_assign("data[1].value", DumpEntry{data[1].value});
        res.insert_or_assign("data[2].value", DumpEntry{data[2].value});
        res.insert_or_assign("data[3].value", DumpEntry{data[3].value});
        res.insert_or_assign("data[4].value", DumpEntry{data[4].value});
        res.insert_or_assign("data[5].value", DumpEntry{data[5].value});
        res.insert_or_assign("data[6].value", DumpEntry{data[6].value});
        res.insert_or_assign("data[7].value", DumpEntry{data[7].value});
        res.insert_or_assign("data[8].value", DumpEntry{data[8].value});
        res.insert_or_assign("data[9].value", DumpEntry{data[9].value});
        res.insert_or_assign("data[10].value", DumpEntry{data[10].value});
        res.insert_or_assign("data[11].value", DumpEntry{data[11].value});
        res.insert_or_assign("data[12].value", DumpEntry{data[12].value});
        res.insert_or_assign("data[13].value", DumpEntry{data[13].value});
        res.insert_or_assign("data[14].value", DumpEntry{data[14].value});
        res.insert_or_assign("data[15].value", DumpEntry{data[15].value});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AdcCalint`
    //!
    //! @param adcCalint A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adcCalint
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AdcCalint& adcCalint)
    {
        DumpMap res{adcCalint.base()};
        res.insert_or_assign("adcCalint.ctrl", DumpEntry{adcCalint.ctrl});
        res.insert_or_assign("adcCalint.ctrl.reset", DumpEntry{adcCalint.ctrl.reset});
        res.insert_or_assign("adcCalint.ctrl.start", DumpEntry{adcCalint.ctrl.start});
        res.insert_or_assign("adcCalint.ctrl.hwReset", DumpEntry{adcCalint.ctrl.hwReset});
        res.insert_or_assign("adcCalint.config", DumpEntry{adcCalint.config});
        res.insert_or_assign("adcCalint.config.cpol", DumpEntry{adcCalint.config.cpol});
        res.insert_or_assign("adcCalint.config.cpha", DumpEntry{adcCalint.config.cpha});
        res.insert_or_assign("adcCalint.config.cnvPol", DumpEntry{adcCalint.config.cnvPol});
        res.insert_or_assign("adcCalint.config.cnvWithCs", DumpEntry{adcCalint.config.cnvWithCs});
        res.insert_or_assign("adcCalint.config.busyPol", DumpEntry{adcCalint.config.busyPol});
        res.insert_or_assign("adcCalint.config.busySrc", DumpEntry{adcCalint.config.busySrc});
        res.insert_or_assign("adcCalint.config.busyTime", DumpEntry{adcCalint.config.busyTime});
        res.insert_or_assign("adcCalint.config.clkActInConv", DumpEntry{adcCalint.config.clkActInConv});
        res.insert_or_assign("adcCalint.config.dataWidth", DumpEntry{adcCalint.config.dataWidth});
        res.insert_or_assign("adcCalint.config.gwCtrl", DumpEntry{adcCalint.config.gwCtrl});
        res.insert_or_assign("adcCalint.status", DumpEntry{adcCalint.status});
        res.insert_or_assign("adcCalint.status.apiVer", DumpEntry{adcCalint.status.apiVer});
        res.insert_or_assign("adcCalint.status.dinPorts", DumpEntry{adcCalint.status.dinPorts});
        res.insert_or_assign("adcCalint.status.busy", DumpEntry{adcCalint.status.busy});
        res.insert_or_assign("adcCalint.status.clkPrescaler", DumpEntry{adcCalint.status.clkPrescaler});
        res.insert_or_assign("adcCalint.data[0].value", DumpEntry{adcCalint.data[0].value});
        res.insert_or_assign("adcCalint.data[1].value", DumpEntry{adcCalint.data[1].value});
        res.insert_or_assign("adcCalint.data[2].value", DumpEntry{adcCalint.data[2].value});
        res.insert_or_assign("adcCalint.data[3].value", DumpEntry{adcCalint.data[3].value});
        res.insert_or_assign("adcCalint.data[4].value", DumpEntry{adcCalint.data[4].value});
        res.insert_or_assign("adcCalint.data[5].value", DumpEntry{adcCalint.data[5].value});
        res.insert_or_assign("adcCalint.data[6].value", DumpEntry{adcCalint.data[6].value});
        res.insert_or_assign("adcCalint.data[7].value", DumpEntry{adcCalint.data[7].value});
        res.insert_or_assign("adcCalint.data[8].value", DumpEntry{adcCalint.data[8].value});
        res.insert_or_assign("adcCalint.data[9].value", DumpEntry{adcCalint.data[9].value});
        res.insert_or_assign("adcCalint.data[10].value", DumpEntry{adcCalint.data[10].value});
        res.insert_or_assign("adcCalint.data[11].value", DumpEntry{adcCalint.data[11].value});
        res.insert_or_assign("adcCalint.data[12].value", DumpEntry{adcCalint.data[12].value});
        res.insert_or_assign("adcCalint.data[13].value", DumpEntry{adcCalint.data[13].value});
        res.insert_or_assign("adcCalint.data[14].value", DumpEntry{adcCalint.data[14].value});
        res.insert_or_assign("adcCalint.data[15].value", DumpEntry{adcCalint.data[15].value});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AdcUncalintArrayItem::Adc::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AdcUncalintArrayItem::Adc::DataArray& data)
    {
        DumpMap res{data.base()};
        res.insert_or_assign("data[0].value", DumpEntry{data[0].value});
        res.insert_or_assign("data[1].value", DumpEntry{data[1].value});
        res.insert_or_assign("data[2].value", DumpEntry{data[2].value});
        res.insert_or_assign("data[3].value", DumpEntry{data[3].value});
        res.insert_or_assign("data[4].value", DumpEntry{data[4].value});
        res.insert_or_assign("data[5].value", DumpEntry{data[5].value});
        res.insert_or_assign("data[6].value", DumpEntry{data[6].value});
        res.insert_or_assign("data[7].value", DumpEntry{data[7].value});
        res.insert_or_assign("data[8].value", DumpEntry{data[8].value});
        res.insert_or_assign("data[9].value", DumpEntry{data[9].value});
        res.insert_or_assign("data[10].value", DumpEntry{data[10].value});
        res.insert_or_assign("data[11].value", DumpEntry{data[11].value});
        res.insert_or_assign("data[12].value", DumpEntry{data[12].value});
        res.insert_or_assign("data[13].value", DumpEntry{data[13].value});
        res.insert_or_assign("data[14].value", DumpEntry{data[14].value});
        res.insert_or_assign("data[15].value", DumpEntry{data[15].value});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AdcUncalintArrayItem::Adc`
    //!
    //! @param adc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AdcUncalintArrayItem::Adc& adc)
    {
        DumpMap res{adc.base()};
        res.insert_or_assign("adc.ctrl", DumpEntry{adc.ctrl});
        res.insert_or_assign("adc.ctrl.reset", DumpEntry{adc.ctrl.reset});
        res.insert_or_assign("adc.ctrl.start", DumpEntry{adc.ctrl.start});
        res.insert_or_assign("adc.ctrl.hwReset", DumpEntry{adc.ctrl.hwReset});
        res.insert_or_assign("adc.config", DumpEntry{adc.config});
        res.insert_or_assign("adc.config.cpol", DumpEntry{adc.config.cpol});
        res.insert_or_assign("adc.config.cpha", DumpEntry{adc.config.cpha});
        res.insert_or_assign("adc.config.cnvPol", DumpEntry{adc.config.cnvPol});
        res.insert_or_assign("adc.config.cnvWithCs", DumpEntry{adc.config.cnvWithCs});
        res.insert_or_assign("adc.config.busyPol", DumpEntry{adc.config.busyPol});
        res.insert_or_assign("adc.config.busySrc", DumpEntry{adc.config.busySrc});
        res.insert_or_assign("adc.config.busyTime", DumpEntry{adc.config.busyTime});
        res.insert_or_assign("adc.config.clkActInConv", DumpEntry{adc.config.clkActInConv});
        res.insert_or_assign("adc.config.dataWidth", DumpEntry{adc.config.dataWidth});
        res.insert_or_assign("adc.config.gwCtrl", DumpEntry{adc.config.gwCtrl});
        res.insert_or_assign("adc.status", DumpEntry{adc.status});
        res.insert_or_assign("adc.status.apiVer", DumpEntry{adc.status.apiVer});
        res.insert_or_assign("adc.status.dinPorts", DumpEntry{adc.status.dinPorts});
        res.insert_or_assign("adc.status.busy", DumpEntry{adc.status.busy});
        res.insert_or_assign("adc.status.clkPrescaler", DumpEntry{adc.status.clkPrescaler});
        res.insert_or_assign("adc.data[0].value", DumpEntry{adc.data[0].value});
        res.insert_or_assign("adc.data[1].value", DumpEntry{adc.data[1].value});
        res.insert_or_assign("adc.data[2].value", DumpEntry{adc.data[2].value});
        res.insert_or_assign("adc.data[3].value", DumpEntry{adc.data[3].value});
        res.insert_or_assign("adc.data[4].value", DumpEntry{adc.data[4].value});
        res.insert_or_assign("adc.data[5].value", DumpEntry{adc.data[5].value});
        res.insert_or_assign("adc.data[6].value", DumpEntry{adc.data[6].value});
        res.insert_or_assign("adc.data[7].value", DumpEntry{adc.data[7].value});
        res.insert_or_assign("adc.data[8].value", DumpEntry{adc.data[8].value});
        res.insert_or_assign("adc.data[9].value", DumpEntry{adc.data[9].value});
        res.insert_or_assign("adc.data[10].value", DumpEntry{adc.data[10].value});
        res.insert_or_assign("adc.data[11].value", DumpEntry{adc.data[11].value});
        res.insert_or_assign("adc.data[12].value", DumpEntry{adc.data[12].value});
        res.insert_or_assign("adc.data[13].value", DumpEntry{adc.data[13].value});
        res.insert_or_assign("adc.data[14].value", DumpEntry{adc.data[14].value});
        res.insert_or_assign("adc.data[15].value", DumpEntry{adc.data[15].value});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AdcUncalintArray`
    //!
    //! @param adcUncalint A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under adcUncalint
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AdcUncalintArray& adcUncalint)
    {
        DumpMap res{adcUncalint.base()};
        res.insert_or_assign("adcUncalint[0].adc.ctrl", DumpEntry{adcUncalint[0].adc.ctrl});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.reset", DumpEntry{adcUncalint[0].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.start", DumpEntry{adcUncalint[0].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[0].adc.ctrl.hwReset", DumpEntry{adcUncalint[0].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[0].adc.config", DumpEntry{adcUncalint[0].adc.config});
        res.insert_or_assign("adcUncalint[0].adc.config.cpol", DumpEntry{adcUncalint[0].adc.config.cpol});
        res.insert_or_assign("adcUncalint[0].adc.config.cpha", DumpEntry{adcUncalint[0].adc.config.cpha});
        res.insert_or_assign("adcUncalint[0].adc.config.cnvPol", DumpEntry{adcUncalint[0].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[0].adc.config.cnvWithCs", DumpEntry{adcUncalint[0].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[0].adc.config.busyPol", DumpEntry{adcUncalint[0].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[0].adc.config.busySrc", DumpEntry{adcUncalint[0].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[0].adc.config.busyTime", DumpEntry{adcUncalint[0].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[0].adc.config.clkActInConv", DumpEntry{adcUncalint[0].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[0].adc.config.dataWidth", DumpEntry{adcUncalint[0].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[0].adc.config.gwCtrl", DumpEntry{adcUncalint[0].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[0].adc.status", DumpEntry{adcUncalint[0].adc.status});
        res.insert_or_assign("adcUncalint[0].adc.status.apiVer", DumpEntry{adcUncalint[0].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[0].adc.status.dinPorts", DumpEntry{adcUncalint[0].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[0].adc.status.busy", DumpEntry{adcUncalint[0].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[0].adc.status.clkPrescaler", DumpEntry{adcUncalint[0].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[0].adc.data[0].value", DumpEntry{adcUncalint[0].adc.data[0].value});
        res.insert_or_assign("adcUncalint[0].adc.data[1].value", DumpEntry{adcUncalint[0].adc.data[1].value});
        res.insert_or_assign("adcUncalint[0].adc.data[2].value", DumpEntry{adcUncalint[0].adc.data[2].value});
        res.insert_or_assign("adcUncalint[0].adc.data[3].value", DumpEntry{adcUncalint[0].adc.data[3].value});
        res.insert_or_assign("adcUncalint[0].adc.data[4].value", DumpEntry{adcUncalint[0].adc.data[4].value});
        res.insert_or_assign("adcUncalint[0].adc.data[5].value", DumpEntry{adcUncalint[0].adc.data[5].value});
        res.insert_or_assign("adcUncalint[0].adc.data[6].value", DumpEntry{adcUncalint[0].adc.data[6].value});
        res.insert_or_assign("adcUncalint[0].adc.data[7].value", DumpEntry{adcUncalint[0].adc.data[7].value});
        res.insert_or_assign("adcUncalint[0].adc.data[8].value", DumpEntry{adcUncalint[0].adc.data[8].value});
        res.insert_or_assign("adcUncalint[0].adc.data[9].value", DumpEntry{adcUncalint[0].adc.data[9].value});
        res.insert_or_assign("adcUncalint[0].adc.data[10].value", DumpEntry{adcUncalint[0].adc.data[10].value});
        res.insert_or_assign("adcUncalint[0].adc.data[11].value", DumpEntry{adcUncalint[0].adc.data[11].value});
        res.insert_or_assign("adcUncalint[0].adc.data[12].value", DumpEntry{adcUncalint[0].adc.data[12].value});
        res.insert_or_assign("adcUncalint[0].adc.data[13].value", DumpEntry{adcUncalint[0].adc.data[13].value});
        res.insert_or_assign("adcUncalint[0].adc.data[14].value", DumpEntry{adcUncalint[0].adc.data[14].value});
        res.insert_or_assign("adcUncalint[0].adc.data[15].value", DumpEntry{adcUncalint[0].adc.data[15].value});
        res.insert_or_assign("adcUncalint[1].adc.ctrl", DumpEntry{adcUncalint[1].adc.ctrl});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.reset", DumpEntry{adcUncalint[1].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.start", DumpEntry{adcUncalint[1].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[1].adc.ctrl.hwReset", DumpEntry{adcUncalint[1].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[1].adc.config", DumpEntry{adcUncalint[1].adc.config});
        res.insert_or_assign("adcUncalint[1].adc.config.cpol", DumpEntry{adcUncalint[1].adc.config.cpol});
        res.insert_or_assign("adcUncalint[1].adc.config.cpha", DumpEntry{adcUncalint[1].adc.config.cpha});
        res.insert_or_assign("adcUncalint[1].adc.config.cnvPol", DumpEntry{adcUncalint[1].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[1].adc.config.cnvWithCs", DumpEntry{adcUncalint[1].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[1].adc.config.busyPol", DumpEntry{adcUncalint[1].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[1].adc.config.busySrc", DumpEntry{adcUncalint[1].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[1].adc.config.busyTime", DumpEntry{adcUncalint[1].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[1].adc.config.clkActInConv", DumpEntry{adcUncalint[1].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[1].adc.config.dataWidth", DumpEntry{adcUncalint[1].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[1].adc.config.gwCtrl", DumpEntry{adcUncalint[1].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[1].adc.status", DumpEntry{adcUncalint[1].adc.status});
        res.insert_or_assign("adcUncalint[1].adc.status.apiVer", DumpEntry{adcUncalint[1].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[1].adc.status.dinPorts", DumpEntry{adcUncalint[1].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[1].adc.status.busy", DumpEntry{adcUncalint[1].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[1].adc.status.clkPrescaler", DumpEntry{adcUncalint[1].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[1].adc.data[0].value", DumpEntry{adcUncalint[1].adc.data[0].value});
        res.insert_or_assign("adcUncalint[1].adc.data[1].value", DumpEntry{adcUncalint[1].adc.data[1].value});
        res.insert_or_assign("adcUncalint[1].adc.data[2].value", DumpEntry{adcUncalint[1].adc.data[2].value});
        res.insert_or_assign("adcUncalint[1].adc.data[3].value", DumpEntry{adcUncalint[1].adc.data[3].value});
        res.insert_or_assign("adcUncalint[1].adc.data[4].value", DumpEntry{adcUncalint[1].adc.data[4].value});
        res.insert_or_assign("adcUncalint[1].adc.data[5].value", DumpEntry{adcUncalint[1].adc.data[5].value});
        res.insert_or_assign("adcUncalint[1].adc.data[6].value", DumpEntry{adcUncalint[1].adc.data[6].value});
        res.insert_or_assign("adcUncalint[1].adc.data[7].value", DumpEntry{adcUncalint[1].adc.data[7].value});
        res.insert_or_assign("adcUncalint[1].adc.data[8].value", DumpEntry{adcUncalint[1].adc.data[8].value});
        res.insert_or_assign("adcUncalint[1].adc.data[9].value", DumpEntry{adcUncalint[1].adc.data[9].value});
        res.insert_or_assign("adcUncalint[1].adc.data[10].value", DumpEntry{adcUncalint[1].adc.data[10].value});
        res.insert_or_assign("adcUncalint[1].adc.data[11].value", DumpEntry{adcUncalint[1].adc.data[11].value});
        res.insert_or_assign("adcUncalint[1].adc.data[12].value", DumpEntry{adcUncalint[1].adc.data[12].value});
        res.insert_or_assign("adcUncalint[1].adc.data[13].value", DumpEntry{adcUncalint[1].adc.data[13].value});
        res.insert_or_assign("adcUncalint[1].adc.data[14].value", DumpEntry{adcUncalint[1].adc.data[14].value});
        res.insert_or_assign("adcUncalint[1].adc.data[15].value", DumpEntry{adcUncalint[1].adc.data[15].value});
        res.insert_or_assign("adcUncalint[2].adc.ctrl", DumpEntry{adcUncalint[2].adc.ctrl});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.reset", DumpEntry{adcUncalint[2].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.start", DumpEntry{adcUncalint[2].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[2].adc.ctrl.hwReset", DumpEntry{adcUncalint[2].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[2].adc.config", DumpEntry{adcUncalint[2].adc.config});
        res.insert_or_assign("adcUncalint[2].adc.config.cpol", DumpEntry{adcUncalint[2].adc.config.cpol});
        res.insert_or_assign("adcUncalint[2].adc.config.cpha", DumpEntry{adcUncalint[2].adc.config.cpha});
        res.insert_or_assign("adcUncalint[2].adc.config.cnvPol", DumpEntry{adcUncalint[2].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[2].adc.config.cnvWithCs", DumpEntry{adcUncalint[2].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[2].adc.config.busyPol", DumpEntry{adcUncalint[2].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[2].adc.config.busySrc", DumpEntry{adcUncalint[2].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[2].adc.config.busyTime", DumpEntry{adcUncalint[2].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[2].adc.config.clkActInConv", DumpEntry{adcUncalint[2].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[2].adc.config.dataWidth", DumpEntry{adcUncalint[2].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[2].adc.config.gwCtrl", DumpEntry{adcUncalint[2].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[2].adc.status", DumpEntry{adcUncalint[2].adc.status});
        res.insert_or_assign("adcUncalint[2].adc.status.apiVer", DumpEntry{adcUncalint[2].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[2].adc.status.dinPorts", DumpEntry{adcUncalint[2].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[2].adc.status.busy", DumpEntry{adcUncalint[2].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[2].adc.status.clkPrescaler", DumpEntry{adcUncalint[2].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[2].adc.data[0].value", DumpEntry{adcUncalint[2].adc.data[0].value});
        res.insert_or_assign("adcUncalint[2].adc.data[1].value", DumpEntry{adcUncalint[2].adc.data[1].value});
        res.insert_or_assign("adcUncalint[2].adc.data[2].value", DumpEntry{adcUncalint[2].adc.data[2].value});
        res.insert_or_assign("adcUncalint[2].adc.data[3].value", DumpEntry{adcUncalint[2].adc.data[3].value});
        res.insert_or_assign("adcUncalint[2].adc.data[4].value", DumpEntry{adcUncalint[2].adc.data[4].value});
        res.insert_or_assign("adcUncalint[2].adc.data[5].value", DumpEntry{adcUncalint[2].adc.data[5].value});
        res.insert_or_assign("adcUncalint[2].adc.data[6].value", DumpEntry{adcUncalint[2].adc.data[6].value});
        res.insert_or_assign("adcUncalint[2].adc.data[7].value", DumpEntry{adcUncalint[2].adc.data[7].value});
        res.insert_or_assign("adcUncalint[2].adc.data[8].value", DumpEntry{adcUncalint[2].adc.data[8].value});
        res.insert_or_assign("adcUncalint[2].adc.data[9].value", DumpEntry{adcUncalint[2].adc.data[9].value});
        res.insert_or_assign("adcUncalint[2].adc.data[10].value", DumpEntry{adcUncalint[2].adc.data[10].value});
        res.insert_or_assign("adcUncalint[2].adc.data[11].value", DumpEntry{adcUncalint[2].adc.data[11].value});
        res.insert_or_assign("adcUncalint[2].adc.data[12].value", DumpEntry{adcUncalint[2].adc.data[12].value});
        res.insert_or_assign("adcUncalint[2].adc.data[13].value", DumpEntry{adcUncalint[2].adc.data[13].value});
        res.insert_or_assign("adcUncalint[2].adc.data[14].value", DumpEntry{adcUncalint[2].adc.data[14].value});
        res.insert_or_assign("adcUncalint[2].adc.data[15].value", DumpEntry{adcUncalint[2].adc.data[15].value});
        res.insert_or_assign("adcUncalint[3].adc.ctrl", DumpEntry{adcUncalint[3].adc.ctrl});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.reset", DumpEntry{adcUncalint[3].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.start", DumpEntry{adcUncalint[3].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[3].adc.ctrl.hwReset", DumpEntry{adcUncalint[3].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[3].adc.config", DumpEntry{adcUncalint[3].adc.config});
        res.insert_or_assign("adcUncalint[3].adc.config.cpol", DumpEntry{adcUncalint[3].adc.config.cpol});
        res.insert_or_assign("adcUncalint[3].adc.config.cpha", DumpEntry{adcUncalint[3].adc.config.cpha});
        res.insert_or_assign("adcUncalint[3].adc.config.cnvPol", DumpEntry{adcUncalint[3].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[3].adc.config.cnvWithCs", DumpEntry{adcUncalint[3].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[3].adc.config.busyPol", DumpEntry{adcUncalint[3].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[3].adc.config.busySrc", DumpEntry{adcUncalint[3].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[3].adc.config.busyTime", DumpEntry{adcUncalint[3].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[3].adc.config.clkActInConv", DumpEntry{adcUncalint[3].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[3].adc.config.dataWidth", DumpEntry{adcUncalint[3].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[3].adc.config.gwCtrl", DumpEntry{adcUncalint[3].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[3].adc.status", DumpEntry{adcUncalint[3].adc.status});
        res.insert_or_assign("adcUncalint[3].adc.status.apiVer", DumpEntry{adcUncalint[3].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[3].adc.status.dinPorts", DumpEntry{adcUncalint[3].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[3].adc.status.busy", DumpEntry{adcUncalint[3].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[3].adc.status.clkPrescaler", DumpEntry{adcUncalint[3].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[3].adc.data[0].value", DumpEntry{adcUncalint[3].adc.data[0].value});
        res.insert_or_assign("adcUncalint[3].adc.data[1].value", DumpEntry{adcUncalint[3].adc.data[1].value});
        res.insert_or_assign("adcUncalint[3].adc.data[2].value", DumpEntry{adcUncalint[3].adc.data[2].value});
        res.insert_or_assign("adcUncalint[3].adc.data[3].value", DumpEntry{adcUncalint[3].adc.data[3].value});
        res.insert_or_assign("adcUncalint[3].adc.data[4].value", DumpEntry{adcUncalint[3].adc.data[4].value});
        res.insert_or_assign("adcUncalint[3].adc.data[5].value", DumpEntry{adcUncalint[3].adc.data[5].value});
        res.insert_or_assign("adcUncalint[3].adc.data[6].value", DumpEntry{adcUncalint[3].adc.data[6].value});
        res.insert_or_assign("adcUncalint[3].adc.data[7].value", DumpEntry{adcUncalint[3].adc.data[7].value});
        res.insert_or_assign("adcUncalint[3].adc.data[8].value", DumpEntry{adcUncalint[3].adc.data[8].value});
        res.insert_or_assign("adcUncalint[3].adc.data[9].value", DumpEntry{adcUncalint[3].adc.data[9].value});
        res.insert_or_assign("adcUncalint[3].adc.data[10].value", DumpEntry{adcUncalint[3].adc.data[10].value});
        res.insert_or_assign("adcUncalint[3].adc.data[11].value", DumpEntry{adcUncalint[3].adc.data[11].value});
        res.insert_or_assign("adcUncalint[3].adc.data[12].value", DumpEntry{adcUncalint[3].adc.data[12].value});
        res.insert_or_assign("adcUncalint[3].adc.data[13].value", DumpEntry{adcUncalint[3].adc.data[13].value});
        res.insert_or_assign("adcUncalint[3].adc.data[14].value", DumpEntry{adcUncalint[3].adc.data[14].value});
        res.insert_or_assign("adcUncalint[3].adc.data[15].value", DumpEntry{adcUncalint[3].adc.data[15].value});
        res.insert_or_assign("adcUncalint[4].adc.ctrl", DumpEntry{adcUncalint[4].adc.ctrl});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.reset", DumpEntry{adcUncalint[4].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.start", DumpEntry{adcUncalint[4].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[4].adc.ctrl.hwReset", DumpEntry{adcUncalint[4].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[4].adc.config", DumpEntry{adcUncalint[4].adc.config});
        res.insert_or_assign("adcUncalint[4].adc.config.cpol", DumpEntry{adcUncalint[4].adc.config.cpol});
        res.insert_or_assign("adcUncalint[4].adc.config.cpha", DumpEntry{adcUncalint[4].adc.config.cpha});
        res.insert_or_assign("adcUncalint[4].adc.config.cnvPol", DumpEntry{adcUncalint[4].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[4].adc.config.cnvWithCs", DumpEntry{adcUncalint[4].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[4].adc.config.busyPol", DumpEntry{adcUncalint[4].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[4].adc.config.busySrc", DumpEntry{adcUncalint[4].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[4].adc.config.busyTime", DumpEntry{adcUncalint[4].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[4].adc.config.clkActInConv", DumpEntry{adcUncalint[4].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[4].adc.config.dataWidth", DumpEntry{adcUncalint[4].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[4].adc.config.gwCtrl", DumpEntry{adcUncalint[4].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[4].adc.status", DumpEntry{adcUncalint[4].adc.status});
        res.insert_or_assign("adcUncalint[4].adc.status.apiVer", DumpEntry{adcUncalint[4].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[4].adc.status.dinPorts", DumpEntry{adcUncalint[4].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[4].adc.status.busy", DumpEntry{adcUncalint[4].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[4].adc.status.clkPrescaler", DumpEntry{adcUncalint[4].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[4].adc.data[0].value", DumpEntry{adcUncalint[4].adc.data[0].value});
        res.insert_or_assign("adcUncalint[4].adc.data[1].value", DumpEntry{adcUncalint[4].adc.data[1].value});
        res.insert_or_assign("adcUncalint[4].adc.data[2].value", DumpEntry{adcUncalint[4].adc.data[2].value});
        res.insert_or_assign("adcUncalint[4].adc.data[3].value", DumpEntry{adcUncalint[4].adc.data[3].value});
        res.insert_or_assign("adcUncalint[4].adc.data[4].value", DumpEntry{adcUncalint[4].adc.data[4].value});
        res.insert_or_assign("adcUncalint[4].adc.data[5].value", DumpEntry{adcUncalint[4].adc.data[5].value});
        res.insert_or_assign("adcUncalint[4].adc.data[6].value", DumpEntry{adcUncalint[4].adc.data[6].value});
        res.insert_or_assign("adcUncalint[4].adc.data[7].value", DumpEntry{adcUncalint[4].adc.data[7].value});
        res.insert_or_assign("adcUncalint[4].adc.data[8].value", DumpEntry{adcUncalint[4].adc.data[8].value});
        res.insert_or_assign("adcUncalint[4].adc.data[9].value", DumpEntry{adcUncalint[4].adc.data[9].value});
        res.insert_or_assign("adcUncalint[4].adc.data[10].value", DumpEntry{adcUncalint[4].adc.data[10].value});
        res.insert_or_assign("adcUncalint[4].adc.data[11].value", DumpEntry{adcUncalint[4].adc.data[11].value});
        res.insert_or_assign("adcUncalint[4].adc.data[12].value", DumpEntry{adcUncalint[4].adc.data[12].value});
        res.insert_or_assign("adcUncalint[4].adc.data[13].value", DumpEntry{adcUncalint[4].adc.data[13].value});
        res.insert_or_assign("adcUncalint[4].adc.data[14].value", DumpEntry{adcUncalint[4].adc.data[14].value});
        res.insert_or_assign("adcUncalint[4].adc.data[15].value", DumpEntry{adcUncalint[4].adc.data[15].value});
        res.insert_or_assign("adcUncalint[5].adc.ctrl", DumpEntry{adcUncalint[5].adc.ctrl});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.reset", DumpEntry{adcUncalint[5].adc.ctrl.reset});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.start", DumpEntry{adcUncalint[5].adc.ctrl.start});
        res.insert_or_assign("adcUncalint[5].adc.ctrl.hwReset", DumpEntry{adcUncalint[5].adc.ctrl.hwReset});
        res.insert_or_assign("adcUncalint[5].adc.config", DumpEntry{adcUncalint[5].adc.config});
        res.insert_or_assign("adcUncalint[5].adc.config.cpol", DumpEntry{adcUncalint[5].adc.config.cpol});
        res.insert_or_assign("adcUncalint[5].adc.config.cpha", DumpEntry{adcUncalint[5].adc.config.cpha});
        res.insert_or_assign("adcUncalint[5].adc.config.cnvPol", DumpEntry{adcUncalint[5].adc.config.cnvPol});
        res.insert_or_assign("adcUncalint[5].adc.config.cnvWithCs", DumpEntry{adcUncalint[5].adc.config.cnvWithCs});
        res.insert_or_assign("adcUncalint[5].adc.config.busyPol", DumpEntry{adcUncalint[5].adc.config.busyPol});
        res.insert_or_assign("adcUncalint[5].adc.config.busySrc", DumpEntry{adcUncalint[5].adc.config.busySrc});
        res.insert_or_assign("adcUncalint[5].adc.config.busyTime", DumpEntry{adcUncalint[5].adc.config.busyTime});
        res.insert_or_assign(
            "adcUncalint[5].adc.config.clkActInConv", DumpEntry{adcUncalint[5].adc.config.clkActInConv}
        );
        res.insert_or_assign("adcUncalint[5].adc.config.dataWidth", DumpEntry{adcUncalint[5].adc.config.dataWidth});
        res.insert_or_assign("adcUncalint[5].adc.config.gwCtrl", DumpEntry{adcUncalint[5].adc.config.gwCtrl});
        res.insert_or_assign("adcUncalint[5].adc.status", DumpEntry{adcUncalint[5].adc.status});
        res.insert_or_assign("adcUncalint[5].adc.status.apiVer", DumpEntry{adcUncalint[5].adc.status.apiVer});
        res.insert_or_assign("adcUncalint[5].adc.status.dinPorts", DumpEntry{adcUncalint[5].adc.status.dinPorts});
        res.insert_or_assign("adcUncalint[5].adc.status.busy", DumpEntry{adcUncalint[5].adc.status.busy});
        res.insert_or_assign(
            "adcUncalint[5].adc.status.clkPrescaler", DumpEntry{adcUncalint[5].adc.status.clkPrescaler}
        );
        res.insert_or_assign("adcUncalint[5].adc.data[0].value", DumpEntry{adcUncalint[5].adc.data[0].value});
        res.insert_or_assign("adcUncalint[5].adc.data[1].value", DumpEntry{adcUncalint[5].adc.data[1].value});
        res.insert_or_assign("adcUncalint[5].adc.data[2].value", DumpEntry{adcUncalint[5].adc.data[2].value});
        res.insert_or_assign("adcUncalint[5].adc.data[3].value", DumpEntry{adcUncalint[5].adc.data[3].value});
        res.insert_or_assign("adcUncalint[5].adc.data[4].value", DumpEntry{adcUncalint[5].adc.data[4].value});
        res.insert_or_assign("adcUncalint[5].adc.data[5].value", DumpEntry{adcUncalint[5].adc.data[5].value});
        res.insert_or_assign("adcUncalint[5].adc.data[6].value", DumpEntry{adcUncalint[5].adc.data[6].value});
        res.insert_or_assign("adcUncalint[5].adc.data[7].value", DumpEntry{adcUncalint[5].adc.data[7].value});
        res.insert_or_assign("adcUncalint[5].adc.data[8].value", DumpEntry{adcUncalint[5].adc.data[8].value});
        res.insert_or_assign("adcUncalint[5].adc.data[9].value", DumpEntry{adcUncalint[5].adc.data[9].value});
        res.insert_or_assign("adcUncalint[5].adc.data[10].value", DumpEntry{adcUncalint[5].adc.data[10].value});
        res.insert_or_assign("adcUncalint[5].adc.data[11].value", DumpEntry{adcUncalint[5].adc.data[11].value});
        res.insert_or_assign("adcUncalint[5].adc.data[12].value", DumpEntry{adcUncalint[5].adc.data[12].value});
        res.insert_or_assign("adcUncalint[5].adc.data[13].value", DumpEntry{adcUncalint[5].adc.data[13].value});
        res.insert_or_assign("adcUncalint[5].adc.data[14].value", DumpEntry{adcUncalint[5].adc.data[14].value});
        res.insert_or_assign("adcUncalint[5].adc.data[15].value", DumpEntry{adcUncalint[5].adc.data[15].value});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::DacIntArrayItem::Dac::DataArray`
    //!
    //! @param data A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under data
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::DacIntArrayItem::Dac::DataArray& data)
    {
        DumpMap res{data.base()};
        // data[0].value skipped (Register is not readable).
        // data[1].value skipped (Register is not readable).
        // data[2].value skipped (Register is not readable).
        // data[3].value skipped (Register is not readable).
        // data[4].value skipped (Register is not readable).
        // data[5].value skipped (Register is not readable).
        // data[6].value skipped (Register is not readable).
        // data[7].value skipped (Register is not readable).
        // data[8].value skipped (Register is not readable).
        // data[9].value skipped (Register is not readable).
        // data[10].value skipped (Register is not readable).
        // data[11].value skipped (Register is not readable).
        // data[12].value skipped (Register is not readable).
        // data[13].value skipped (Register is not readable).
        // data[14].value skipped (Register is not readable).
        // data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::DacIntArrayItem::Dac`
    //!
    //! @param dac A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dac
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::DacIntArrayItem::Dac& dac)
    {
        DumpMap res{dac.base()};
        res.insert_or_assign("dac.ctrl", DumpEntry{dac.ctrl});
        res.insert_or_assign("dac.ctrl.reset", DumpEntry{dac.ctrl.reset});
        res.insert_or_assign("dac.ctrl.start", DumpEntry{dac.ctrl.start});
        res.insert_or_assign("dac.config", DumpEntry{dac.config});
        res.insert_or_assign("dac.config.cpol", DumpEntry{dac.config.cpol});
        res.insert_or_assign("dac.config.cpha", DumpEntry{dac.config.cpha});
        res.insert_or_assign("dac.config.msbFirst", DumpEntry{dac.config.msbFirst});
        res.insert_or_assign("dac.config.prePad", DumpEntry{dac.config.prePad});
        res.insert_or_assign("dac.config.postPad", DumpEntry{dac.config.postPad});
        res.insert_or_assign("dac.config.dataWidth", DumpEntry{dac.config.dataWidth});
        res.insert_or_assign("dac.config.deadTime", DumpEntry{dac.config.deadTime});
        res.insert_or_assign("dac.config.clkPres", DumpEntry{dac.config.clkPres});
        res.insert_or_assign("dac.config.fixAddClkCyc", DumpEntry{dac.config.fixAddClkCyc});
        res.insert_or_assign("dac.config.gwCtrl", DumpEntry{dac.config.gwCtrl});
        res.insert_or_assign("dac.status", DumpEntry{dac.status});
        res.insert_or_assign("dac.status.apiVer", DumpEntry{dac.status.apiVer});
        res.insert_or_assign("dac.status.doutPorts", DumpEntry{dac.status.doutPorts});
        res.insert_or_assign("dac.status.busy", DumpEntry{dac.status.busy});
        // dac.data[0].value skipped (Register is not readable).
        // dac.data[1].value skipped (Register is not readable).
        // dac.data[2].value skipped (Register is not readable).
        // dac.data[3].value skipped (Register is not readable).
        // dac.data[4].value skipped (Register is not readable).
        // dac.data[5].value skipped (Register is not readable).
        // dac.data[6].value skipped (Register is not readable).
        // dac.data[7].value skipped (Register is not readable).
        // dac.data[8].value skipped (Register is not readable).
        // dac.data[9].value skipped (Register is not readable).
        // dac.data[10].value skipped (Register is not readable).
        // dac.data[11].value skipped (Register is not readable).
        // dac.data[12].value skipped (Register is not readable).
        // dac.data[13].value skipped (Register is not readable).
        // dac.data[14].value skipped (Register is not readable).
        // dac.data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::DacIntArray`
    //!
    //! @param dacInt A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dacInt
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::DacIntArray& dacInt)
    {
        DumpMap res{dacInt.base()};
        res.insert_or_assign("dacInt[0].dac.ctrl", DumpEntry{dacInt[0].dac.ctrl});
        res.insert_or_assign("dacInt[0].dac.ctrl.reset", DumpEntry{dacInt[0].dac.ctrl.reset});
        res.insert_or_assign("dacInt[0].dac.ctrl.start", DumpEntry{dacInt[0].dac.ctrl.start});
        res.insert_or_assign("dacInt[0].dac.config", DumpEntry{dacInt[0].dac.config});
        res.insert_or_assign("dacInt[0].dac.config.cpol", DumpEntry{dacInt[0].dac.config.cpol});
        res.insert_or_assign("dacInt[0].dac.config.cpha", DumpEntry{dacInt[0].dac.config.cpha});
        res.insert_or_assign("dacInt[0].dac.config.msbFirst", DumpEntry{dacInt[0].dac.config.msbFirst});
        res.insert_or_assign("dacInt[0].dac.config.prePad", DumpEntry{dacInt[0].dac.config.prePad});
        res.insert_or_assign("dacInt[0].dac.config.postPad", DumpEntry{dacInt[0].dac.config.postPad});
        res.insert_or_assign("dacInt[0].dac.config.dataWidth", DumpEntry{dacInt[0].dac.config.dataWidth});
        res.insert_or_assign("dacInt[0].dac.config.deadTime", DumpEntry{dacInt[0].dac.config.deadTime});
        res.insert_or_assign("dacInt[0].dac.config.clkPres", DumpEntry{dacInt[0].dac.config.clkPres});
        res.insert_or_assign("dacInt[0].dac.config.fixAddClkCyc", DumpEntry{dacInt[0].dac.config.fixAddClkCyc});
        res.insert_or_assign("dacInt[0].dac.config.gwCtrl", DumpEntry{dacInt[0].dac.config.gwCtrl});
        res.insert_or_assign("dacInt[0].dac.status", DumpEntry{dacInt[0].dac.status});
        res.insert_or_assign("dacInt[0].dac.status.apiVer", DumpEntry{dacInt[0].dac.status.apiVer});
        res.insert_or_assign("dacInt[0].dac.status.doutPorts", DumpEntry{dacInt[0].dac.status.doutPorts});
        res.insert_or_assign("dacInt[0].dac.status.busy", DumpEntry{dacInt[0].dac.status.busy});
        // dacInt[0].dac.data[0].value skipped (Register is not readable).
        // dacInt[0].dac.data[1].value skipped (Register is not readable).
        // dacInt[0].dac.data[2].value skipped (Register is not readable).
        // dacInt[0].dac.data[3].value skipped (Register is not readable).
        // dacInt[0].dac.data[4].value skipped (Register is not readable).
        // dacInt[0].dac.data[5].value skipped (Register is not readable).
        // dacInt[0].dac.data[6].value skipped (Register is not readable).
        // dacInt[0].dac.data[7].value skipped (Register is not readable).
        // dacInt[0].dac.data[8].value skipped (Register is not readable).
        // dacInt[0].dac.data[9].value skipped (Register is not readable).
        // dacInt[0].dac.data[10].value skipped (Register is not readable).
        // dacInt[0].dac.data[11].value skipped (Register is not readable).
        // dacInt[0].dac.data[12].value skipped (Register is not readable).
        // dacInt[0].dac.data[13].value skipped (Register is not readable).
        // dacInt[0].dac.data[14].value skipped (Register is not readable).
        // dacInt[0].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("dacInt[1].dac.ctrl", DumpEntry{dacInt[1].dac.ctrl});
        res.insert_or_assign("dacInt[1].dac.ctrl.reset", DumpEntry{dacInt[1].dac.ctrl.reset});
        res.insert_or_assign("dacInt[1].dac.ctrl.start", DumpEntry{dacInt[1].dac.ctrl.start});
        res.insert_or_assign("dacInt[1].dac.config", DumpEntry{dacInt[1].dac.config});
        res.insert_or_assign("dacInt[1].dac.config.cpol", DumpEntry{dacInt[1].dac.config.cpol});
        res.insert_or_assign("dacInt[1].dac.config.cpha", DumpEntry{dacInt[1].dac.config.cpha});
        res.insert_or_assign("dacInt[1].dac.config.msbFirst", DumpEntry{dacInt[1].dac.config.msbFirst});
        res.insert_or_assign("dacInt[1].dac.config.prePad", DumpEntry{dacInt[1].dac.config.prePad});
        res.insert_or_assign("dacInt[1].dac.config.postPad", DumpEntry{dacInt[1].dac.config.postPad});
        res.insert_or_assign("dacInt[1].dac.config.dataWidth", DumpEntry{dacInt[1].dac.config.dataWidth});
        res.insert_or_assign("dacInt[1].dac.config.deadTime", DumpEntry{dacInt[1].dac.config.deadTime});
        res.insert_or_assign("dacInt[1].dac.config.clkPres", DumpEntry{dacInt[1].dac.config.clkPres});
        res.insert_or_assign("dacInt[1].dac.config.fixAddClkCyc", DumpEntry{dacInt[1].dac.config.fixAddClkCyc});
        res.insert_or_assign("dacInt[1].dac.config.gwCtrl", DumpEntry{dacInt[1].dac.config.gwCtrl});
        res.insert_or_assign("dacInt[1].dac.status", DumpEntry{dacInt[1].dac.status});
        res.insert_or_assign("dacInt[1].dac.status.apiVer", DumpEntry{dacInt[1].dac.status.apiVer});
        res.insert_or_assign("dacInt[1].dac.status.doutPorts", DumpEntry{dacInt[1].dac.status.doutPorts});
        res.insert_or_assign("dacInt[1].dac.status.busy", DumpEntry{dacInt[1].dac.status.busy});
        // dacInt[1].dac.data[0].value skipped (Register is not readable).
        // dacInt[1].dac.data[1].value skipped (Register is not readable).
        // dacInt[1].dac.data[2].value skipped (Register is not readable).
        // dacInt[1].dac.data[3].value skipped (Register is not readable).
        // dacInt[1].dac.data[4].value skipped (Register is not readable).
        // dacInt[1].dac.data[5].value skipped (Register is not readable).
        // dacInt[1].dac.data[6].value skipped (Register is not readable).
        // dacInt[1].dac.data[7].value skipped (Register is not readable).
        // dacInt[1].dac.data[8].value skipped (Register is not readable).
        // dacInt[1].dac.data[9].value skipped (Register is not readable).
        // dacInt[1].dac.data[10].value skipped (Register is not readable).
        // dacInt[1].dac.data[11].value skipped (Register is not readable).
        // dacInt[1].dac.data[12].value skipped (Register is not readable).
        // dacInt[1].dac.data[13].value skipped (Register is not readable).
        // dacInt[1].dac.data[14].value skipped (Register is not readable).
        // dacInt[1].dac.data[15].value skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank::RegArray`
    //!
    //! @param reg A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reg
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank::RegArray& reg)
    {
        DumpMap res{reg.base()};
        res.insert_or_assign("reg[0].fir", DumpEntry{reg[0].fir});
        res.insert_or_assign("reg[1].fir", DumpEntry{reg[1].fir});
        res.insert_or_assign("reg[2].fir", DumpEntry{reg[2].fir});
        res.insert_or_assign("reg[3].fir", DumpEntry{reg[3].fir});
        res.insert_or_assign("reg[4].fir", DumpEntry{reg[4].fir});
        res.insert_or_assign("reg[5].fir", DumpEntry{reg[5].fir});
        res.insert_or_assign("reg[6].fir", DumpEntry{reg[6].fir});
        res.insert_or_assign("reg[7].fir", DumpEntry{reg[7].fir});
        res.insert_or_assign("reg[8].fir", DumpEntry{reg[8].fir});
        res.insert_or_assign("reg[9].fir", DumpEntry{reg[9].fir});
        res.insert_or_assign("reg[10].fir", DumpEntry{reg[10].fir});
        res.insert_or_assign("reg[11].fir", DumpEntry{reg[11].fir});
        res.insert_or_assign("reg[12].fir", DumpEntry{reg[12].fir});
        res.insert_or_assign("reg[13].fir", DumpEntry{reg[13].fir});
        res.insert_or_assign("reg[14].fir", DumpEntry{reg[14].fir});
        res.insert_or_assign("reg[15].fir", DumpEntry{reg[15].fir});
        res.insert_or_assign("reg[16].fir", DumpEntry{reg[16].fir});
        res.insert_or_assign("reg[17].fir", DumpEntry{reg[17].fir});
        res.insert_or_assign("reg[18].fir", DumpEntry{reg[18].fir});
        res.insert_or_assign("reg[19].fir", DumpEntry{reg[19].fir});
        res.insert_or_assign("reg[20].fir", DumpEntry{reg[20].fir});
        res.insert_or_assign("reg[21].fir", DumpEntry{reg[21].fir});
        res.insert_or_assign("reg[22].fir", DumpEntry{reg[22].fir});
        res.insert_or_assign("reg[23].fir", DumpEntry{reg[23].fir});
        res.insert_or_assign("reg[24].fir", DumpEntry{reg[24].fir});
        res.insert_or_assign("reg[25].fir", DumpEntry{reg[25].fir});
        res.insert_or_assign("reg[26].fir", DumpEntry{reg[26].fir});
        res.insert_or_assign("reg[27].fir", DumpEntry{reg[27].fir});
        res.insert_or_assign("reg[28].fir", DumpEntry{reg[28].fir});
        res.insert_or_assign("reg[29].fir", DumpEntry{reg[29].fir});
        res.insert_or_assign("reg[30].fir", DumpEntry{reg[30].fir});
        res.insert_or_assign("reg[31].fir", DumpEntry{reg[31].fir});
        res.insert_or_assign("reg[32].fir", DumpEntry{reg[32].fir});
        res.insert_or_assign("reg[33].fir", DumpEntry{reg[33].fir});
        res.insert_or_assign("reg[34].fir", DumpEntry{reg[34].fir});
        res.insert_or_assign("reg[35].fir", DumpEntry{reg[35].fir});
        res.insert_or_assign("reg[36].fir", DumpEntry{reg[36].fir});
        res.insert_or_assign("reg[37].fir", DumpEntry{reg[37].fir});
        res.insert_or_assign("reg[38].fir", DumpEntry{reg[38].fir});
        res.insert_or_assign("reg[39].fir", DumpEntry{reg[39].fir});
        res.insert_or_assign("reg[40].fir", DumpEntry{reg[40].fir});
        res.insert_or_assign("reg[41].fir", DumpEntry{reg[41].fir});
        res.insert_or_assign("reg[42].fir", DumpEntry{reg[42].fir});
        res.insert_or_assign("reg[43].fir", DumpEntry{reg[43].fir});
        res.insert_or_assign("reg[44].fir", DumpEntry{reg[44].fir});
        res.insert_or_assign("reg[45].fir", DumpEntry{reg[45].fir});
        res.insert_or_assign("reg[46].fir", DumpEntry{reg[46].fir});
        res.insert_or_assign("reg[47].fir", DumpEntry{reg[47].fir});
        res.insert_or_assign("reg[48].fir", DumpEntry{reg[48].fir});
        res.insert_or_assign("reg[49].fir", DumpEntry{reg[49].fir});
        res.insert_or_assign("reg[50].fir", DumpEntry{reg[50].fir});
        res.insert_or_assign("reg[51].fir", DumpEntry{reg[51].fir});
        res.insert_or_assign("reg[52].fir", DumpEntry{reg[52].fir});
        res.insert_or_assign("reg[53].fir", DumpEntry{reg[53].fir});
        res.insert_or_assign("reg[54].fir", DumpEntry{reg[54].fir});
        res.insert_or_assign("reg[55].fir", DumpEntry{reg[55].fir});
        res.insert_or_assign("reg[56].fir", DumpEntry{reg[56].fir});
        res.insert_or_assign("reg[57].fir", DumpEntry{reg[57].fir});
        res.insert_or_assign("reg[58].fir", DumpEntry{reg[58].fir});
        res.insert_or_assign("reg[59].fir", DumpEntry{reg[59].fir});
        res.insert_or_assign("reg[60].fir", DumpEntry{reg[60].fir});
        res.insert_or_assign("reg[61].fir", DumpEntry{reg[61].fir});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank::VloopArray`
    //!
    //! @param vloop A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under vloop
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank::VloopArray& vloop)
    {
        DumpMap res{vloop.base()};
        res.insert_or_assign("vloop[0].fir", DumpEntry{vloop[0].fir});
        res.insert_or_assign("vloop[1].fir", DumpEntry{vloop[1].fir});
        res.insert_or_assign("vloop[2].fir", DumpEntry{vloop[2].fir});
        res.insert_or_assign("vloop[3].fir", DumpEntry{vloop[3].fir});
        res.insert_or_assign("vloop[4].fir", DumpEntry{vloop[4].fir});
        res.insert_or_assign("vloop[5].fir", DumpEntry{vloop[5].fir});
        res.insert_or_assign("vloop[6].fir", DumpEntry{vloop[6].fir});
        res.insert_or_assign("vloop[7].fir", DumpEntry{vloop[7].fir});
        res.insert_or_assign("vloop[8].fir", DumpEntry{vloop[8].fir});
        res.insert_or_assign("vloop[9].fir", DumpEntry{vloop[9].fir});
        res.insert_or_assign("vloop[10].fir", DumpEntry{vloop[10].fir});
        res.insert_or_assign("vloop[11].fir", DumpEntry{vloop[11].fir});
        res.insert_or_assign("vloop[12].fir", DumpEntry{vloop[12].fir});
        res.insert_or_assign("vloop[13].fir", DumpEntry{vloop[13].fir});
        res.insert_or_assign("vloop[14].fir", DumpEntry{vloop[14].fir});
        res.insert_or_assign("vloop[15].fir", DumpEntry{vloop[15].fir});
        res.insert_or_assign("vloop[16].fir", DumpEntry{vloop[16].fir});
        res.insert_or_assign("vloop[17].fir", DumpEntry{vloop[17].fir});
        res.insert_or_assign("vloop[18].fir", DumpEntry{vloop[18].fir});
        res.insert_or_assign("vloop[19].fir", DumpEntry{vloop[19].fir});
        res.insert_or_assign("vloop[20].fir", DumpEntry{vloop[20].fir});
        res.insert_or_assign("vloop[21].fir", DumpEntry{vloop[21].fir});
        res.insert_or_assign("vloop[22].fir", DumpEntry{vloop[22].fir});
        res.insert_or_assign("vloop[23].fir", DumpEntry{vloop[23].fir});
        res.insert_or_assign("vloop[24].fir", DumpEntry{vloop[24].fir});
        res.insert_or_assign("vloop[25].fir", DumpEntry{vloop[25].fir});
        res.insert_or_assign("vloop[26].fir", DumpEntry{vloop[26].fir});
        res.insert_or_assign("vloop[27].fir", DumpEntry{vloop[27].fir});
        res.insert_or_assign("vloop[28].fir", DumpEntry{vloop[28].fir});
        res.insert_or_assign("vloop[29].fir", DumpEntry{vloop[29].fir});
        res.insert_or_assign("vloop[30].fir", DumpEntry{vloop[30].fir});
        res.insert_or_assign("vloop[31].fir", DumpEntry{vloop[31].fir});
        res.insert_or_assign("vloop[32].fir", DumpEntry{vloop[32].fir});
        res.insert_or_assign("vloop[33].fir", DumpEntry{vloop[33].fir});
        res.insert_or_assign("vloop[34].fir", DumpEntry{vloop[34].fir});
        res.insert_or_assign("vloop[35].fir", DumpEntry{vloop[35].fir});
        res.insert_or_assign("vloop[36].fir", DumpEntry{vloop[36].fir});
        res.insert_or_assign("vloop[37].fir", DumpEntry{vloop[37].fir});
        res.insert_or_assign("vloop[38].fir", DumpEntry{vloop[38].fir});
        res.insert_or_assign("vloop[39].fir", DumpEntry{vloop[39].fir});
        res.insert_or_assign("vloop[40].fir", DumpEntry{vloop[40].fir});
        res.insert_or_assign("vloop[41].fir", DumpEntry{vloop[41].fir});
        res.insert_or_assign("vloop[42].fir", DumpEntry{vloop[42].fir});
        res.insert_or_assign("vloop[43].fir", DumpEntry{vloop[43].fir});
        res.insert_or_assign("vloop[44].fir", DumpEntry{vloop[44].fir});
        res.insert_or_assign("vloop[45].fir", DumpEntry{vloop[45].fir});
        res.insert_or_assign("vloop[46].fir", DumpEntry{vloop[46].fir});
        res.insert_or_assign("vloop[47].fir", DumpEntry{vloop[47].fir});
        res.insert_or_assign("vloop[48].fir", DumpEntry{vloop[48].fir});
        res.insert_or_assign("vloop[49].fir", DumpEntry{vloop[49].fir});
        res.insert_or_assign("vloop[50].fir", DumpEntry{vloop[50].fir});
        res.insert_or_assign("vloop[51].fir", DumpEntry{vloop[51].fir});
        res.insert_or_assign("vloop[52].fir", DumpEntry{vloop[52].fir});
        res.insert_or_assign("vloop[53].fir", DumpEntry{vloop[53].fir});
        res.insert_or_assign("vloop[54].fir", DumpEntry{vloop[54].fir});
        res.insert_or_assign("vloop[55].fir", DumpEntry{vloop[55].fir});
        res.insert_or_assign("vloop[56].fir", DumpEntry{vloop[56].fir});
        res.insert_or_assign("vloop[57].fir", DumpEntry{vloop[57].fir});
        res.insert_or_assign("vloop[58].fir", DumpEntry{vloop[58].fir});
        res.insert_or_assign("vloop[59].fir", DumpEntry{vloop[59].fir});
        res.insert_or_assign("vloop[60].fir", DumpEntry{vloop[60].fir});
        res.insert_or_assign("vloop[61].fir", DumpEntry{vloop[61].fir});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank::RawArray`
    //!
    //! @param raw A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under raw
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank::RawArray& raw)
    {
        DumpMap res{raw.base()};
        res.insert_or_assign("raw[0].raw", DumpEntry{raw[0].raw});
        res.insert_or_assign("raw[1].raw", DumpEntry{raw[1].raw});
        res.insert_or_assign("raw[2].raw", DumpEntry{raw[2].raw});
        res.insert_or_assign("raw[3].raw", DumpEntry{raw[3].raw});
        res.insert_or_assign("raw[4].raw", DumpEntry{raw[4].raw});
        res.insert_or_assign("raw[5].raw", DumpEntry{raw[5].raw});
        res.insert_or_assign("raw[6].raw", DumpEntry{raw[6].raw});
        res.insert_or_assign("raw[7].raw", DumpEntry{raw[7].raw});
        res.insert_or_assign("raw[8].raw", DumpEntry{raw[8].raw});
        res.insert_or_assign("raw[9].raw", DumpEntry{raw[9].raw});
        res.insert_or_assign("raw[10].raw", DumpEntry{raw[10].raw});
        res.insert_or_assign("raw[11].raw", DumpEntry{raw[11].raw});
        res.insert_or_assign("raw[12].raw", DumpEntry{raw[12].raw});
        res.insert_or_assign("raw[13].raw", DumpEntry{raw[13].raw});
        res.insert_or_assign("raw[14].raw", DumpEntry{raw[14].raw});
        res.insert_or_assign("raw[15].raw", DumpEntry{raw[15].raw});
        res.insert_or_assign("raw[16].raw", DumpEntry{raw[16].raw});
        res.insert_or_assign("raw[17].raw", DumpEntry{raw[17].raw});
        res.insert_or_assign("raw[18].raw", DumpEntry{raw[18].raw});
        res.insert_or_assign("raw[19].raw", DumpEntry{raw[19].raw});
        res.insert_or_assign("raw[20].raw", DumpEntry{raw[20].raw});
        res.insert_or_assign("raw[21].raw", DumpEntry{raw[21].raw});
        res.insert_or_assign("raw[22].raw", DumpEntry{raw[22].raw});
        res.insert_or_assign("raw[23].raw", DumpEntry{raw[23].raw});
        res.insert_or_assign("raw[24].raw", DumpEntry{raw[24].raw});
        res.insert_or_assign("raw[25].raw", DumpEntry{raw[25].raw});
        res.insert_or_assign("raw[26].raw", DumpEntry{raw[26].raw});
        res.insert_or_assign("raw[27].raw", DumpEntry{raw[27].raw});
        res.insert_or_assign("raw[28].raw", DumpEntry{raw[28].raw});
        res.insert_or_assign("raw[29].raw", DumpEntry{raw[29].raw});
        res.insert_or_assign("raw[30].raw", DumpEntry{raw[30].raw});
        res.insert_or_assign("raw[31].raw", DumpEntry{raw[31].raw});
        res.insert_or_assign("raw[32].raw", DumpEntry{raw[32].raw});
        res.insert_or_assign("raw[33].raw", DumpEntry{raw[33].raw});
        res.insert_or_assign("raw[34].raw", DumpEntry{raw[34].raw});
        res.insert_or_assign("raw[35].raw", DumpEntry{raw[35].raw});
        res.insert_or_assign("raw[36].raw", DumpEntry{raw[36].raw});
        res.insert_or_assign("raw[37].raw", DumpEntry{raw[37].raw});
        res.insert_or_assign("raw[38].raw", DumpEntry{raw[38].raw});
        res.insert_or_assign("raw[39].raw", DumpEntry{raw[39].raw});
        res.insert_or_assign("raw[40].raw", DumpEntry{raw[40].raw});
        res.insert_or_assign("raw[41].raw", DumpEntry{raw[41].raw});
        res.insert_or_assign("raw[42].raw", DumpEntry{raw[42].raw});
        res.insert_or_assign("raw[43].raw", DumpEntry{raw[43].raw});
        res.insert_or_assign("raw[44].raw", DumpEntry{raw[44].raw});
        res.insert_or_assign("raw[45].raw", DumpEntry{raw[45].raw});
        res.insert_or_assign("raw[46].raw", DumpEntry{raw[46].raw});
        res.insert_or_assign("raw[47].raw", DumpEntry{raw[47].raw});
        res.insert_or_assign("raw[48].raw", DumpEntry{raw[48].raw});
        res.insert_or_assign("raw[49].raw", DumpEntry{raw[49].raw});
        res.insert_or_assign("raw[50].raw", DumpEntry{raw[50].raw});
        res.insert_or_assign("raw[51].raw", DumpEntry{raw[51].raw});
        res.insert_or_assign("raw[52].raw", DumpEntry{raw[52].raw});
        res.insert_or_assign("raw[53].raw", DumpEntry{raw[53].raw});
        res.insert_or_assign("raw[54].raw", DumpEntry{raw[54].raw});
        res.insert_or_assign("raw[55].raw", DumpEntry{raw[55].raw});
        res.insert_or_assign("raw[56].raw", DumpEntry{raw[56].raw});
        res.insert_or_assign("raw[57].raw", DumpEntry{raw[57].raw});
        res.insert_or_assign("raw[58].raw", DumpEntry{raw[58].raw});
        res.insert_or_assign("raw[59].raw", DumpEntry{raw[59].raw});
        res.insert_or_assign("raw[60].raw", DumpEntry{raw[60].raw});
        res.insert_or_assign("raw[61].raw", DumpEntry{raw[61].raw});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank::MmArray`
    //!
    //! @param mm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under mm
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank::MmArray& mm)
    {
        DumpMap res{mm.base()};
        res.insert_or_assign("mm[0].fir", DumpEntry{mm[0].fir});
        res.insert_or_assign("mm[1].fir", DumpEntry{mm[1].fir});
        res.insert_or_assign("mm[2].fir", DumpEntry{mm[2].fir});
        res.insert_or_assign("mm[3].fir", DumpEntry{mm[3].fir});
        res.insert_or_assign("mm[4].fir", DumpEntry{mm[4].fir});
        res.insert_or_assign("mm[5].fir", DumpEntry{mm[5].fir});
        res.insert_or_assign("mm[6].fir", DumpEntry{mm[6].fir});
        res.insert_or_assign("mm[7].fir", DumpEntry{mm[7].fir});
        res.insert_or_assign("mm[8].fir", DumpEntry{mm[8].fir});
        res.insert_or_assign("mm[9].fir", DumpEntry{mm[9].fir});
        res.insert_or_assign("mm[10].fir", DumpEntry{mm[10].fir});
        res.insert_or_assign("mm[11].fir", DumpEntry{mm[11].fir});
        res.insert_or_assign("mm[12].fir", DumpEntry{mm[12].fir});
        res.insert_or_assign("mm[13].fir", DumpEntry{mm[13].fir});
        res.insert_or_assign("mm[14].fir", DumpEntry{mm[14].fir});
        res.insert_or_assign("mm[15].fir", DumpEntry{mm[15].fir});
        res.insert_or_assign("mm[16].fir", DumpEntry{mm[16].fir});
        res.insert_or_assign("mm[17].fir", DumpEntry{mm[17].fir});
        res.insert_or_assign("mm[18].fir", DumpEntry{mm[18].fir});
        res.insert_or_assign("mm[19].fir", DumpEntry{mm[19].fir});
        res.insert_or_assign("mm[20].fir", DumpEntry{mm[20].fir});
        res.insert_or_assign("mm[21].fir", DumpEntry{mm[21].fir});
        res.insert_or_assign("mm[22].fir", DumpEntry{mm[22].fir});
        res.insert_or_assign("mm[23].fir", DumpEntry{mm[23].fir});
        res.insert_or_assign("mm[24].fir", DumpEntry{mm[24].fir});
        res.insert_or_assign("mm[25].fir", DumpEntry{mm[25].fir});
        res.insert_or_assign("mm[26].fir", DumpEntry{mm[26].fir});
        res.insert_or_assign("mm[27].fir", DumpEntry{mm[27].fir});
        res.insert_or_assign("mm[28].fir", DumpEntry{mm[28].fir});
        res.insert_or_assign("mm[29].fir", DumpEntry{mm[29].fir});
        res.insert_or_assign("mm[30].fir", DumpEntry{mm[30].fir});
        res.insert_or_assign("mm[31].fir", DumpEntry{mm[31].fir});
        res.insert_or_assign("mm[32].fir", DumpEntry{mm[32].fir});
        res.insert_or_assign("mm[33].fir", DumpEntry{mm[33].fir});
        res.insert_or_assign("mm[34].fir", DumpEntry{mm[34].fir});
        res.insert_or_assign("mm[35].fir", DumpEntry{mm[35].fir});
        res.insert_or_assign("mm[36].fir", DumpEntry{mm[36].fir});
        res.insert_or_assign("mm[37].fir", DumpEntry{mm[37].fir});
        res.insert_or_assign("mm[38].fir", DumpEntry{mm[38].fir});
        res.insert_or_assign("mm[39].fir", DumpEntry{mm[39].fir});
        res.insert_or_assign("mm[40].fir", DumpEntry{mm[40].fir});
        res.insert_or_assign("mm[41].fir", DumpEntry{mm[41].fir});
        res.insert_or_assign("mm[42].fir", DumpEntry{mm[42].fir});
        res.insert_or_assign("mm[43].fir", DumpEntry{mm[43].fir});
        res.insert_or_assign("mm[44].fir", DumpEntry{mm[44].fir});
        res.insert_or_assign("mm[45].fir", DumpEntry{mm[45].fir});
        res.insert_or_assign("mm[46].fir", DumpEntry{mm[46].fir});
        res.insert_or_assign("mm[47].fir", DumpEntry{mm[47].fir});
        res.insert_or_assign("mm[48].fir", DumpEntry{mm[48].fir});
        res.insert_or_assign("mm[49].fir", DumpEntry{mm[49].fir});
        res.insert_or_assign("mm[50].fir", DumpEntry{mm[50].fir});
        res.insert_or_assign("mm[51].fir", DumpEntry{mm[51].fir});
        res.insert_or_assign("mm[52].fir", DumpEntry{mm[52].fir});
        res.insert_or_assign("mm[53].fir", DumpEntry{mm[53].fir});
        res.insert_or_assign("mm[54].fir", DumpEntry{mm[54].fir});
        res.insert_or_assign("mm[55].fir", DumpEntry{mm[55].fir});
        res.insert_or_assign("mm[56].fir", DumpEntry{mm[56].fir});
        res.insert_or_assign("mm[57].fir", DumpEntry{mm[57].fir});
        res.insert_or_assign("mm[58].fir", DumpEntry{mm[58].fir});
        res.insert_or_assign("mm[59].fir", DumpEntry{mm[59].fir});
        res.insert_or_assign("mm[60].fir", DumpEntry{mm[60].fir});
        res.insert_or_assign("mm[61].fir", DumpEntry{mm[61].fir});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank::MsArray`
    //!
    //! @param ms A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ms
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank::MsArray& ms)
    {
        DumpMap res{ms.base()};
        res.insert_or_assign("ms[0].fir", DumpEntry{ms[0].fir});
        res.insert_or_assign("ms[1].fir", DumpEntry{ms[1].fir});
        res.insert_or_assign("ms[2].fir", DumpEntry{ms[2].fir});
        res.insert_or_assign("ms[3].fir", DumpEntry{ms[3].fir});
        res.insert_or_assign("ms[4].fir", DumpEntry{ms[4].fir});
        res.insert_or_assign("ms[5].fir", DumpEntry{ms[5].fir});
        res.insert_or_assign("ms[6].fir", DumpEntry{ms[6].fir});
        res.insert_or_assign("ms[7].fir", DumpEntry{ms[7].fir});
        res.insert_or_assign("ms[8].fir", DumpEntry{ms[8].fir});
        res.insert_or_assign("ms[9].fir", DumpEntry{ms[9].fir});
        res.insert_or_assign("ms[10].fir", DumpEntry{ms[10].fir});
        res.insert_or_assign("ms[11].fir", DumpEntry{ms[11].fir});
        res.insert_or_assign("ms[12].fir", DumpEntry{ms[12].fir});
        res.insert_or_assign("ms[13].fir", DumpEntry{ms[13].fir});
        res.insert_or_assign("ms[14].fir", DumpEntry{ms[14].fir});
        res.insert_or_assign("ms[15].fir", DumpEntry{ms[15].fir});
        res.insert_or_assign("ms[16].fir", DumpEntry{ms[16].fir});
        res.insert_or_assign("ms[17].fir", DumpEntry{ms[17].fir});
        res.insert_or_assign("ms[18].fir", DumpEntry{ms[18].fir});
        res.insert_or_assign("ms[19].fir", DumpEntry{ms[19].fir});
        res.insert_or_assign("ms[20].fir", DumpEntry{ms[20].fir});
        res.insert_or_assign("ms[21].fir", DumpEntry{ms[21].fir});
        res.insert_or_assign("ms[22].fir", DumpEntry{ms[22].fir});
        res.insert_or_assign("ms[23].fir", DumpEntry{ms[23].fir});
        res.insert_or_assign("ms[24].fir", DumpEntry{ms[24].fir});
        res.insert_or_assign("ms[25].fir", DumpEntry{ms[25].fir});
        res.insert_or_assign("ms[26].fir", DumpEntry{ms[26].fir});
        res.insert_or_assign("ms[27].fir", DumpEntry{ms[27].fir});
        res.insert_or_assign("ms[28].fir", DumpEntry{ms[28].fir});
        res.insert_or_assign("ms[29].fir", DumpEntry{ms[29].fir});
        res.insert_or_assign("ms[30].fir", DumpEntry{ms[30].fir});
        res.insert_or_assign("ms[31].fir", DumpEntry{ms[31].fir});
        res.insert_or_assign("ms[32].fir", DumpEntry{ms[32].fir});
        res.insert_or_assign("ms[33].fir", DumpEntry{ms[33].fir});
        res.insert_or_assign("ms[34].fir", DumpEntry{ms[34].fir});
        res.insert_or_assign("ms[35].fir", DumpEntry{ms[35].fir});
        res.insert_or_assign("ms[36].fir", DumpEntry{ms[36].fir});
        res.insert_or_assign("ms[37].fir", DumpEntry{ms[37].fir});
        res.insert_or_assign("ms[38].fir", DumpEntry{ms[38].fir});
        res.insert_or_assign("ms[39].fir", DumpEntry{ms[39].fir});
        res.insert_or_assign("ms[40].fir", DumpEntry{ms[40].fir});
        res.insert_or_assign("ms[41].fir", DumpEntry{ms[41].fir});
        res.insert_or_assign("ms[42].fir", DumpEntry{ms[42].fir});
        res.insert_or_assign("ms[43].fir", DumpEntry{ms[43].fir});
        res.insert_or_assign("ms[44].fir", DumpEntry{ms[44].fir});
        res.insert_or_assign("ms[45].fir", DumpEntry{ms[45].fir});
        res.insert_or_assign("ms[46].fir", DumpEntry{ms[46].fir});
        res.insert_or_assign("ms[47].fir", DumpEntry{ms[47].fir});
        res.insert_or_assign("ms[48].fir", DumpEntry{ms[48].fir});
        res.insert_or_assign("ms[49].fir", DumpEntry{ms[49].fir});
        res.insert_or_assign("ms[50].fir", DumpEntry{ms[50].fir});
        res.insert_or_assign("ms[51].fir", DumpEntry{ms[51].fir});
        res.insert_or_assign("ms[52].fir", DumpEntry{ms[52].fir});
        res.insert_or_assign("ms[53].fir", DumpEntry{ms[53].fir});
        res.insert_or_assign("ms[54].fir", DumpEntry{ms[54].fir});
        res.insert_or_assign("ms[55].fir", DumpEntry{ms[55].fir});
        res.insert_or_assign("ms[56].fir", DumpEntry{ms[56].fir});
        res.insert_or_assign("ms[57].fir", DumpEntry{ms[57].fir});
        res.insert_or_assign("ms[58].fir", DumpEntry{ms[58].fir});
        res.insert_or_assign("ms[59].fir", DumpEntry{ms[59].fir});
        res.insert_or_assign("ms[60].fir", DumpEntry{ms[60].fir});
        res.insert_or_assign("ms[61].fir", DumpEntry{ms[61].fir});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SignalBank`
    //!
    //! @param signalBank A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under signalBank
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SignalBank& signalBank)
    {
        DumpMap res{signalBank.base()};
        res.insert_or_assign("signalBank.digI0", DumpEntry{signalBank.digI0});
        res.insert_or_assign("signalBank.digI1", DumpEntry{signalBank.digI1});
        res.insert_or_assign("signalBank.digIndI", DumpEntry{signalBank.digIndI});
        res.insert_or_assign("signalBank.contactI", DumpEntry{signalBank.contactI});
        res.insert_or_assign("signalBank.opticalI", DumpEntry{signalBank.opticalI});
        res.insert_or_assign("signalBank.protI", DumpEntry{signalBank.protI});
        res.insert_or_assign("signalBank.digO", DumpEntry{signalBank.digO});
        res.insert_or_assign("signalBank.digOcO", DumpEntry{signalBank.digOcO});
        res.insert_or_assign("signalBank.contactO", DumpEntry{signalBank.contactO});
        res.insert_or_assign("signalBank.opticalO", DumpEntry{signalBank.opticalO});
        res.insert_or_assign("signalBank.minMaxLim0", DumpEntry{signalBank.minMaxLim0});
        res.insert_or_assign("signalBank.minMaxLim1", DumpEntry{signalBank.minMaxLim1});
        res.insert_or_assign("signalBank.rmsLim0", DumpEntry{signalBank.rmsLim0});
        res.insert_or_assign("signalBank.rmsLim1", DumpEntry{signalBank.rmsLim1});
        res.insert_or_assign("signalBank.reg[0].fir", DumpEntry{signalBank.reg[0].fir});
        res.insert_or_assign("signalBank.reg[1].fir", DumpEntry{signalBank.reg[1].fir});
        res.insert_or_assign("signalBank.reg[2].fir", DumpEntry{signalBank.reg[2].fir});
        res.insert_or_assign("signalBank.reg[3].fir", DumpEntry{signalBank.reg[3].fir});
        res.insert_or_assign("signalBank.reg[4].fir", DumpEntry{signalBank.reg[4].fir});
        res.insert_or_assign("signalBank.reg[5].fir", DumpEntry{signalBank.reg[5].fir});
        res.insert_or_assign("signalBank.reg[6].fir", DumpEntry{signalBank.reg[6].fir});
        res.insert_or_assign("signalBank.reg[7].fir", DumpEntry{signalBank.reg[7].fir});
        res.insert_or_assign("signalBank.reg[8].fir", DumpEntry{signalBank.reg[8].fir});
        res.insert_or_assign("signalBank.reg[9].fir", DumpEntry{signalBank.reg[9].fir});
        res.insert_or_assign("signalBank.reg[10].fir", DumpEntry{signalBank.reg[10].fir});
        res.insert_or_assign("signalBank.reg[11].fir", DumpEntry{signalBank.reg[11].fir});
        res.insert_or_assign("signalBank.reg[12].fir", DumpEntry{signalBank.reg[12].fir});
        res.insert_or_assign("signalBank.reg[13].fir", DumpEntry{signalBank.reg[13].fir});
        res.insert_or_assign("signalBank.reg[14].fir", DumpEntry{signalBank.reg[14].fir});
        res.insert_or_assign("signalBank.reg[15].fir", DumpEntry{signalBank.reg[15].fir});
        res.insert_or_assign("signalBank.reg[16].fir", DumpEntry{signalBank.reg[16].fir});
        res.insert_or_assign("signalBank.reg[17].fir", DumpEntry{signalBank.reg[17].fir});
        res.insert_or_assign("signalBank.reg[18].fir", DumpEntry{signalBank.reg[18].fir});
        res.insert_or_assign("signalBank.reg[19].fir", DumpEntry{signalBank.reg[19].fir});
        res.insert_or_assign("signalBank.reg[20].fir", DumpEntry{signalBank.reg[20].fir});
        res.insert_or_assign("signalBank.reg[21].fir", DumpEntry{signalBank.reg[21].fir});
        res.insert_or_assign("signalBank.reg[22].fir", DumpEntry{signalBank.reg[22].fir});
        res.insert_or_assign("signalBank.reg[23].fir", DumpEntry{signalBank.reg[23].fir});
        res.insert_or_assign("signalBank.reg[24].fir", DumpEntry{signalBank.reg[24].fir});
        res.insert_or_assign("signalBank.reg[25].fir", DumpEntry{signalBank.reg[25].fir});
        res.insert_or_assign("signalBank.reg[26].fir", DumpEntry{signalBank.reg[26].fir});
        res.insert_or_assign("signalBank.reg[27].fir", DumpEntry{signalBank.reg[27].fir});
        res.insert_or_assign("signalBank.reg[28].fir", DumpEntry{signalBank.reg[28].fir});
        res.insert_or_assign("signalBank.reg[29].fir", DumpEntry{signalBank.reg[29].fir});
        res.insert_or_assign("signalBank.reg[30].fir", DumpEntry{signalBank.reg[30].fir});
        res.insert_or_assign("signalBank.reg[31].fir", DumpEntry{signalBank.reg[31].fir});
        res.insert_or_assign("signalBank.reg[32].fir", DumpEntry{signalBank.reg[32].fir});
        res.insert_or_assign("signalBank.reg[33].fir", DumpEntry{signalBank.reg[33].fir});
        res.insert_or_assign("signalBank.reg[34].fir", DumpEntry{signalBank.reg[34].fir});
        res.insert_or_assign("signalBank.reg[35].fir", DumpEntry{signalBank.reg[35].fir});
        res.insert_or_assign("signalBank.reg[36].fir", DumpEntry{signalBank.reg[36].fir});
        res.insert_or_assign("signalBank.reg[37].fir", DumpEntry{signalBank.reg[37].fir});
        res.insert_or_assign("signalBank.reg[38].fir", DumpEntry{signalBank.reg[38].fir});
        res.insert_or_assign("signalBank.reg[39].fir", DumpEntry{signalBank.reg[39].fir});
        res.insert_or_assign("signalBank.reg[40].fir", DumpEntry{signalBank.reg[40].fir});
        res.insert_or_assign("signalBank.reg[41].fir", DumpEntry{signalBank.reg[41].fir});
        res.insert_or_assign("signalBank.reg[42].fir", DumpEntry{signalBank.reg[42].fir});
        res.insert_or_assign("signalBank.reg[43].fir", DumpEntry{signalBank.reg[43].fir});
        res.insert_or_assign("signalBank.reg[44].fir", DumpEntry{signalBank.reg[44].fir});
        res.insert_or_assign("signalBank.reg[45].fir", DumpEntry{signalBank.reg[45].fir});
        res.insert_or_assign("signalBank.reg[46].fir", DumpEntry{signalBank.reg[46].fir});
        res.insert_or_assign("signalBank.reg[47].fir", DumpEntry{signalBank.reg[47].fir});
        res.insert_or_assign("signalBank.reg[48].fir", DumpEntry{signalBank.reg[48].fir});
        res.insert_or_assign("signalBank.reg[49].fir", DumpEntry{signalBank.reg[49].fir});
        res.insert_or_assign("signalBank.reg[50].fir", DumpEntry{signalBank.reg[50].fir});
        res.insert_or_assign("signalBank.reg[51].fir", DumpEntry{signalBank.reg[51].fir});
        res.insert_or_assign("signalBank.reg[52].fir", DumpEntry{signalBank.reg[52].fir});
        res.insert_or_assign("signalBank.reg[53].fir", DumpEntry{signalBank.reg[53].fir});
        res.insert_or_assign("signalBank.reg[54].fir", DumpEntry{signalBank.reg[54].fir});
        res.insert_or_assign("signalBank.reg[55].fir", DumpEntry{signalBank.reg[55].fir});
        res.insert_or_assign("signalBank.reg[56].fir", DumpEntry{signalBank.reg[56].fir});
        res.insert_or_assign("signalBank.reg[57].fir", DumpEntry{signalBank.reg[57].fir});
        res.insert_or_assign("signalBank.reg[58].fir", DumpEntry{signalBank.reg[58].fir});
        res.insert_or_assign("signalBank.reg[59].fir", DumpEntry{signalBank.reg[59].fir});
        res.insert_or_assign("signalBank.reg[60].fir", DumpEntry{signalBank.reg[60].fir});
        res.insert_or_assign("signalBank.reg[61].fir", DumpEntry{signalBank.reg[61].fir});
        res.insert_or_assign("signalBank.vloop[0].fir", DumpEntry{signalBank.vloop[0].fir});
        res.insert_or_assign("signalBank.vloop[1].fir", DumpEntry{signalBank.vloop[1].fir});
        res.insert_or_assign("signalBank.vloop[2].fir", DumpEntry{signalBank.vloop[2].fir});
        res.insert_or_assign("signalBank.vloop[3].fir", DumpEntry{signalBank.vloop[3].fir});
        res.insert_or_assign("signalBank.vloop[4].fir", DumpEntry{signalBank.vloop[4].fir});
        res.insert_or_assign("signalBank.vloop[5].fir", DumpEntry{signalBank.vloop[5].fir});
        res.insert_or_assign("signalBank.vloop[6].fir", DumpEntry{signalBank.vloop[6].fir});
        res.insert_or_assign("signalBank.vloop[7].fir", DumpEntry{signalBank.vloop[7].fir});
        res.insert_or_assign("signalBank.vloop[8].fir", DumpEntry{signalBank.vloop[8].fir});
        res.insert_or_assign("signalBank.vloop[9].fir", DumpEntry{signalBank.vloop[9].fir});
        res.insert_or_assign("signalBank.vloop[10].fir", DumpEntry{signalBank.vloop[10].fir});
        res.insert_or_assign("signalBank.vloop[11].fir", DumpEntry{signalBank.vloop[11].fir});
        res.insert_or_assign("signalBank.vloop[12].fir", DumpEntry{signalBank.vloop[12].fir});
        res.insert_or_assign("signalBank.vloop[13].fir", DumpEntry{signalBank.vloop[13].fir});
        res.insert_or_assign("signalBank.vloop[14].fir", DumpEntry{signalBank.vloop[14].fir});
        res.insert_or_assign("signalBank.vloop[15].fir", DumpEntry{signalBank.vloop[15].fir});
        res.insert_or_assign("signalBank.vloop[16].fir", DumpEntry{signalBank.vloop[16].fir});
        res.insert_or_assign("signalBank.vloop[17].fir", DumpEntry{signalBank.vloop[17].fir});
        res.insert_or_assign("signalBank.vloop[18].fir", DumpEntry{signalBank.vloop[18].fir});
        res.insert_or_assign("signalBank.vloop[19].fir", DumpEntry{signalBank.vloop[19].fir});
        res.insert_or_assign("signalBank.vloop[20].fir", DumpEntry{signalBank.vloop[20].fir});
        res.insert_or_assign("signalBank.vloop[21].fir", DumpEntry{signalBank.vloop[21].fir});
        res.insert_or_assign("signalBank.vloop[22].fir", DumpEntry{signalBank.vloop[22].fir});
        res.insert_or_assign("signalBank.vloop[23].fir", DumpEntry{signalBank.vloop[23].fir});
        res.insert_or_assign("signalBank.vloop[24].fir", DumpEntry{signalBank.vloop[24].fir});
        res.insert_or_assign("signalBank.vloop[25].fir", DumpEntry{signalBank.vloop[25].fir});
        res.insert_or_assign("signalBank.vloop[26].fir", DumpEntry{signalBank.vloop[26].fir});
        res.insert_or_assign("signalBank.vloop[27].fir", DumpEntry{signalBank.vloop[27].fir});
        res.insert_or_assign("signalBank.vloop[28].fir", DumpEntry{signalBank.vloop[28].fir});
        res.insert_or_assign("signalBank.vloop[29].fir", DumpEntry{signalBank.vloop[29].fir});
        res.insert_or_assign("signalBank.vloop[30].fir", DumpEntry{signalBank.vloop[30].fir});
        res.insert_or_assign("signalBank.vloop[31].fir", DumpEntry{signalBank.vloop[31].fir});
        res.insert_or_assign("signalBank.vloop[32].fir", DumpEntry{signalBank.vloop[32].fir});
        res.insert_or_assign("signalBank.vloop[33].fir", DumpEntry{signalBank.vloop[33].fir});
        res.insert_or_assign("signalBank.vloop[34].fir", DumpEntry{signalBank.vloop[34].fir});
        res.insert_or_assign("signalBank.vloop[35].fir", DumpEntry{signalBank.vloop[35].fir});
        res.insert_or_assign("signalBank.vloop[36].fir", DumpEntry{signalBank.vloop[36].fir});
        res.insert_or_assign("signalBank.vloop[37].fir", DumpEntry{signalBank.vloop[37].fir});
        res.insert_or_assign("signalBank.vloop[38].fir", DumpEntry{signalBank.vloop[38].fir});
        res.insert_or_assign("signalBank.vloop[39].fir", DumpEntry{signalBank.vloop[39].fir});
        res.insert_or_assign("signalBank.vloop[40].fir", DumpEntry{signalBank.vloop[40].fir});
        res.insert_or_assign("signalBank.vloop[41].fir", DumpEntry{signalBank.vloop[41].fir});
        res.insert_or_assign("signalBank.vloop[42].fir", DumpEntry{signalBank.vloop[42].fir});
        res.insert_or_assign("signalBank.vloop[43].fir", DumpEntry{signalBank.vloop[43].fir});
        res.insert_or_assign("signalBank.vloop[44].fir", DumpEntry{signalBank.vloop[44].fir});
        res.insert_or_assign("signalBank.vloop[45].fir", DumpEntry{signalBank.vloop[45].fir});
        res.insert_or_assign("signalBank.vloop[46].fir", DumpEntry{signalBank.vloop[46].fir});
        res.insert_or_assign("signalBank.vloop[47].fir", DumpEntry{signalBank.vloop[47].fir});
        res.insert_or_assign("signalBank.vloop[48].fir", DumpEntry{signalBank.vloop[48].fir});
        res.insert_or_assign("signalBank.vloop[49].fir", DumpEntry{signalBank.vloop[49].fir});
        res.insert_or_assign("signalBank.vloop[50].fir", DumpEntry{signalBank.vloop[50].fir});
        res.insert_or_assign("signalBank.vloop[51].fir", DumpEntry{signalBank.vloop[51].fir});
        res.insert_or_assign("signalBank.vloop[52].fir", DumpEntry{signalBank.vloop[52].fir});
        res.insert_or_assign("signalBank.vloop[53].fir", DumpEntry{signalBank.vloop[53].fir});
        res.insert_or_assign("signalBank.vloop[54].fir", DumpEntry{signalBank.vloop[54].fir});
        res.insert_or_assign("signalBank.vloop[55].fir", DumpEntry{signalBank.vloop[55].fir});
        res.insert_or_assign("signalBank.vloop[56].fir", DumpEntry{signalBank.vloop[56].fir});
        res.insert_or_assign("signalBank.vloop[57].fir", DumpEntry{signalBank.vloop[57].fir});
        res.insert_or_assign("signalBank.vloop[58].fir", DumpEntry{signalBank.vloop[58].fir});
        res.insert_or_assign("signalBank.vloop[59].fir", DumpEntry{signalBank.vloop[59].fir});
        res.insert_or_assign("signalBank.vloop[60].fir", DumpEntry{signalBank.vloop[60].fir});
        res.insert_or_assign("signalBank.vloop[61].fir", DumpEntry{signalBank.vloop[61].fir});
        res.insert_or_assign("signalBank.raw[0].raw", DumpEntry{signalBank.raw[0].raw});
        res.insert_or_assign("signalBank.raw[1].raw", DumpEntry{signalBank.raw[1].raw});
        res.insert_or_assign("signalBank.raw[2].raw", DumpEntry{signalBank.raw[2].raw});
        res.insert_or_assign("signalBank.raw[3].raw", DumpEntry{signalBank.raw[3].raw});
        res.insert_or_assign("signalBank.raw[4].raw", DumpEntry{signalBank.raw[4].raw});
        res.insert_or_assign("signalBank.raw[5].raw", DumpEntry{signalBank.raw[5].raw});
        res.insert_or_assign("signalBank.raw[6].raw", DumpEntry{signalBank.raw[6].raw});
        res.insert_or_assign("signalBank.raw[7].raw", DumpEntry{signalBank.raw[7].raw});
        res.insert_or_assign("signalBank.raw[8].raw", DumpEntry{signalBank.raw[8].raw});
        res.insert_or_assign("signalBank.raw[9].raw", DumpEntry{signalBank.raw[9].raw});
        res.insert_or_assign("signalBank.raw[10].raw", DumpEntry{signalBank.raw[10].raw});
        res.insert_or_assign("signalBank.raw[11].raw", DumpEntry{signalBank.raw[11].raw});
        res.insert_or_assign("signalBank.raw[12].raw", DumpEntry{signalBank.raw[12].raw});
        res.insert_or_assign("signalBank.raw[13].raw", DumpEntry{signalBank.raw[13].raw});
        res.insert_or_assign("signalBank.raw[14].raw", DumpEntry{signalBank.raw[14].raw});
        res.insert_or_assign("signalBank.raw[15].raw", DumpEntry{signalBank.raw[15].raw});
        res.insert_or_assign("signalBank.raw[16].raw", DumpEntry{signalBank.raw[16].raw});
        res.insert_or_assign("signalBank.raw[17].raw", DumpEntry{signalBank.raw[17].raw});
        res.insert_or_assign("signalBank.raw[18].raw", DumpEntry{signalBank.raw[18].raw});
        res.insert_or_assign("signalBank.raw[19].raw", DumpEntry{signalBank.raw[19].raw});
        res.insert_or_assign("signalBank.raw[20].raw", DumpEntry{signalBank.raw[20].raw});
        res.insert_or_assign("signalBank.raw[21].raw", DumpEntry{signalBank.raw[21].raw});
        res.insert_or_assign("signalBank.raw[22].raw", DumpEntry{signalBank.raw[22].raw});
        res.insert_or_assign("signalBank.raw[23].raw", DumpEntry{signalBank.raw[23].raw});
        res.insert_or_assign("signalBank.raw[24].raw", DumpEntry{signalBank.raw[24].raw});
        res.insert_or_assign("signalBank.raw[25].raw", DumpEntry{signalBank.raw[25].raw});
        res.insert_or_assign("signalBank.raw[26].raw", DumpEntry{signalBank.raw[26].raw});
        res.insert_or_assign("signalBank.raw[27].raw", DumpEntry{signalBank.raw[27].raw});
        res.insert_or_assign("signalBank.raw[28].raw", DumpEntry{signalBank.raw[28].raw});
        res.insert_or_assign("signalBank.raw[29].raw", DumpEntry{signalBank.raw[29].raw});
        res.insert_or_assign("signalBank.raw[30].raw", DumpEntry{signalBank.raw[30].raw});
        res.insert_or_assign("signalBank.raw[31].raw", DumpEntry{signalBank.raw[31].raw});
        res.insert_or_assign("signalBank.raw[32].raw", DumpEntry{signalBank.raw[32].raw});
        res.insert_or_assign("signalBank.raw[33].raw", DumpEntry{signalBank.raw[33].raw});
        res.insert_or_assign("signalBank.raw[34].raw", DumpEntry{signalBank.raw[34].raw});
        res.insert_or_assign("signalBank.raw[35].raw", DumpEntry{signalBank.raw[35].raw});
        res.insert_or_assign("signalBank.raw[36].raw", DumpEntry{signalBank.raw[36].raw});
        res.insert_or_assign("signalBank.raw[37].raw", DumpEntry{signalBank.raw[37].raw});
        res.insert_or_assign("signalBank.raw[38].raw", DumpEntry{signalBank.raw[38].raw});
        res.insert_or_assign("signalBank.raw[39].raw", DumpEntry{signalBank.raw[39].raw});
        res.insert_or_assign("signalBank.raw[40].raw", DumpEntry{signalBank.raw[40].raw});
        res.insert_or_assign("signalBank.raw[41].raw", DumpEntry{signalBank.raw[41].raw});
        res.insert_or_assign("signalBank.raw[42].raw", DumpEntry{signalBank.raw[42].raw});
        res.insert_or_assign("signalBank.raw[43].raw", DumpEntry{signalBank.raw[43].raw});
        res.insert_or_assign("signalBank.raw[44].raw", DumpEntry{signalBank.raw[44].raw});
        res.insert_or_assign("signalBank.raw[45].raw", DumpEntry{signalBank.raw[45].raw});
        res.insert_or_assign("signalBank.raw[46].raw", DumpEntry{signalBank.raw[46].raw});
        res.insert_or_assign("signalBank.raw[47].raw", DumpEntry{signalBank.raw[47].raw});
        res.insert_or_assign("signalBank.raw[48].raw", DumpEntry{signalBank.raw[48].raw});
        res.insert_or_assign("signalBank.raw[49].raw", DumpEntry{signalBank.raw[49].raw});
        res.insert_or_assign("signalBank.raw[50].raw", DumpEntry{signalBank.raw[50].raw});
        res.insert_or_assign("signalBank.raw[51].raw", DumpEntry{signalBank.raw[51].raw});
        res.insert_or_assign("signalBank.raw[52].raw", DumpEntry{signalBank.raw[52].raw});
        res.insert_or_assign("signalBank.raw[53].raw", DumpEntry{signalBank.raw[53].raw});
        res.insert_or_assign("signalBank.raw[54].raw", DumpEntry{signalBank.raw[54].raw});
        res.insert_or_assign("signalBank.raw[55].raw", DumpEntry{signalBank.raw[55].raw});
        res.insert_or_assign("signalBank.raw[56].raw", DumpEntry{signalBank.raw[56].raw});
        res.insert_or_assign("signalBank.raw[57].raw", DumpEntry{signalBank.raw[57].raw});
        res.insert_or_assign("signalBank.raw[58].raw", DumpEntry{signalBank.raw[58].raw});
        res.insert_or_assign("signalBank.raw[59].raw", DumpEntry{signalBank.raw[59].raw});
        res.insert_or_assign("signalBank.raw[60].raw", DumpEntry{signalBank.raw[60].raw});
        res.insert_or_assign("signalBank.raw[61].raw", DumpEntry{signalBank.raw[61].raw});
        res.insert_or_assign("signalBank.mm[0].fir", DumpEntry{signalBank.mm[0].fir});
        res.insert_or_assign("signalBank.mm[1].fir", DumpEntry{signalBank.mm[1].fir});
        res.insert_or_assign("signalBank.mm[2].fir", DumpEntry{signalBank.mm[2].fir});
        res.insert_or_assign("signalBank.mm[3].fir", DumpEntry{signalBank.mm[3].fir});
        res.insert_or_assign("signalBank.mm[4].fir", DumpEntry{signalBank.mm[4].fir});
        res.insert_or_assign("signalBank.mm[5].fir", DumpEntry{signalBank.mm[5].fir});
        res.insert_or_assign("signalBank.mm[6].fir", DumpEntry{signalBank.mm[6].fir});
        res.insert_or_assign("signalBank.mm[7].fir", DumpEntry{signalBank.mm[7].fir});
        res.insert_or_assign("signalBank.mm[8].fir", DumpEntry{signalBank.mm[8].fir});
        res.insert_or_assign("signalBank.mm[9].fir", DumpEntry{signalBank.mm[9].fir});
        res.insert_or_assign("signalBank.mm[10].fir", DumpEntry{signalBank.mm[10].fir});
        res.insert_or_assign("signalBank.mm[11].fir", DumpEntry{signalBank.mm[11].fir});
        res.insert_or_assign("signalBank.mm[12].fir", DumpEntry{signalBank.mm[12].fir});
        res.insert_or_assign("signalBank.mm[13].fir", DumpEntry{signalBank.mm[13].fir});
        res.insert_or_assign("signalBank.mm[14].fir", DumpEntry{signalBank.mm[14].fir});
        res.insert_or_assign("signalBank.mm[15].fir", DumpEntry{signalBank.mm[15].fir});
        res.insert_or_assign("signalBank.mm[16].fir", DumpEntry{signalBank.mm[16].fir});
        res.insert_or_assign("signalBank.mm[17].fir", DumpEntry{signalBank.mm[17].fir});
        res.insert_or_assign("signalBank.mm[18].fir", DumpEntry{signalBank.mm[18].fir});
        res.insert_or_assign("signalBank.mm[19].fir", DumpEntry{signalBank.mm[19].fir});
        res.insert_or_assign("signalBank.mm[20].fir", DumpEntry{signalBank.mm[20].fir});
        res.insert_or_assign("signalBank.mm[21].fir", DumpEntry{signalBank.mm[21].fir});
        res.insert_or_assign("signalBank.mm[22].fir", DumpEntry{signalBank.mm[22].fir});
        res.insert_or_assign("signalBank.mm[23].fir", DumpEntry{signalBank.mm[23].fir});
        res.insert_or_assign("signalBank.mm[24].fir", DumpEntry{signalBank.mm[24].fir});
        res.insert_or_assign("signalBank.mm[25].fir", DumpEntry{signalBank.mm[25].fir});
        res.insert_or_assign("signalBank.mm[26].fir", DumpEntry{signalBank.mm[26].fir});
        res.insert_or_assign("signalBank.mm[27].fir", DumpEntry{signalBank.mm[27].fir});
        res.insert_or_assign("signalBank.mm[28].fir", DumpEntry{signalBank.mm[28].fir});
        res.insert_or_assign("signalBank.mm[29].fir", DumpEntry{signalBank.mm[29].fir});
        res.insert_or_assign("signalBank.mm[30].fir", DumpEntry{signalBank.mm[30].fir});
        res.insert_or_assign("signalBank.mm[31].fir", DumpEntry{signalBank.mm[31].fir});
        res.insert_or_assign("signalBank.mm[32].fir", DumpEntry{signalBank.mm[32].fir});
        res.insert_or_assign("signalBank.mm[33].fir", DumpEntry{signalBank.mm[33].fir});
        res.insert_or_assign("signalBank.mm[34].fir", DumpEntry{signalBank.mm[34].fir});
        res.insert_or_assign("signalBank.mm[35].fir", DumpEntry{signalBank.mm[35].fir});
        res.insert_or_assign("signalBank.mm[36].fir", DumpEntry{signalBank.mm[36].fir});
        res.insert_or_assign("signalBank.mm[37].fir", DumpEntry{signalBank.mm[37].fir});
        res.insert_or_assign("signalBank.mm[38].fir", DumpEntry{signalBank.mm[38].fir});
        res.insert_or_assign("signalBank.mm[39].fir", DumpEntry{signalBank.mm[39].fir});
        res.insert_or_assign("signalBank.mm[40].fir", DumpEntry{signalBank.mm[40].fir});
        res.insert_or_assign("signalBank.mm[41].fir", DumpEntry{signalBank.mm[41].fir});
        res.insert_or_assign("signalBank.mm[42].fir", DumpEntry{signalBank.mm[42].fir});
        res.insert_or_assign("signalBank.mm[43].fir", DumpEntry{signalBank.mm[43].fir});
        res.insert_or_assign("signalBank.mm[44].fir", DumpEntry{signalBank.mm[44].fir});
        res.insert_or_assign("signalBank.mm[45].fir", DumpEntry{signalBank.mm[45].fir});
        res.insert_or_assign("signalBank.mm[46].fir", DumpEntry{signalBank.mm[46].fir});
        res.insert_or_assign("signalBank.mm[47].fir", DumpEntry{signalBank.mm[47].fir});
        res.insert_or_assign("signalBank.mm[48].fir", DumpEntry{signalBank.mm[48].fir});
        res.insert_or_assign("signalBank.mm[49].fir", DumpEntry{signalBank.mm[49].fir});
        res.insert_or_assign("signalBank.mm[50].fir", DumpEntry{signalBank.mm[50].fir});
        res.insert_or_assign("signalBank.mm[51].fir", DumpEntry{signalBank.mm[51].fir});
        res.insert_or_assign("signalBank.mm[52].fir", DumpEntry{signalBank.mm[52].fir});
        res.insert_or_assign("signalBank.mm[53].fir", DumpEntry{signalBank.mm[53].fir});
        res.insert_or_assign("signalBank.mm[54].fir", DumpEntry{signalBank.mm[54].fir});
        res.insert_or_assign("signalBank.mm[55].fir", DumpEntry{signalBank.mm[55].fir});
        res.insert_or_assign("signalBank.mm[56].fir", DumpEntry{signalBank.mm[56].fir});
        res.insert_or_assign("signalBank.mm[57].fir", DumpEntry{signalBank.mm[57].fir});
        res.insert_or_assign("signalBank.mm[58].fir", DumpEntry{signalBank.mm[58].fir});
        res.insert_or_assign("signalBank.mm[59].fir", DumpEntry{signalBank.mm[59].fir});
        res.insert_or_assign("signalBank.mm[60].fir", DumpEntry{signalBank.mm[60].fir});
        res.insert_or_assign("signalBank.mm[61].fir", DumpEntry{signalBank.mm[61].fir});
        res.insert_or_assign("signalBank.ms[0].fir", DumpEntry{signalBank.ms[0].fir});
        res.insert_or_assign("signalBank.ms[1].fir", DumpEntry{signalBank.ms[1].fir});
        res.insert_or_assign("signalBank.ms[2].fir", DumpEntry{signalBank.ms[2].fir});
        res.insert_or_assign("signalBank.ms[3].fir", DumpEntry{signalBank.ms[3].fir});
        res.insert_or_assign("signalBank.ms[4].fir", DumpEntry{signalBank.ms[4].fir});
        res.insert_or_assign("signalBank.ms[5].fir", DumpEntry{signalBank.ms[5].fir});
        res.insert_or_assign("signalBank.ms[6].fir", DumpEntry{signalBank.ms[6].fir});
        res.insert_or_assign("signalBank.ms[7].fir", DumpEntry{signalBank.ms[7].fir});
        res.insert_or_assign("signalBank.ms[8].fir", DumpEntry{signalBank.ms[8].fir});
        res.insert_or_assign("signalBank.ms[9].fir", DumpEntry{signalBank.ms[9].fir});
        res.insert_or_assign("signalBank.ms[10].fir", DumpEntry{signalBank.ms[10].fir});
        res.insert_or_assign("signalBank.ms[11].fir", DumpEntry{signalBank.ms[11].fir});
        res.insert_or_assign("signalBank.ms[12].fir", DumpEntry{signalBank.ms[12].fir});
        res.insert_or_assign("signalBank.ms[13].fir", DumpEntry{signalBank.ms[13].fir});
        res.insert_or_assign("signalBank.ms[14].fir", DumpEntry{signalBank.ms[14].fir});
        res.insert_or_assign("signalBank.ms[15].fir", DumpEntry{signalBank.ms[15].fir});
        res.insert_or_assign("signalBank.ms[16].fir", DumpEntry{signalBank.ms[16].fir});
        res.insert_or_assign("signalBank.ms[17].fir", DumpEntry{signalBank.ms[17].fir});
        res.insert_or_assign("signalBank.ms[18].fir", DumpEntry{signalBank.ms[18].fir});
        res.insert_or_assign("signalBank.ms[19].fir", DumpEntry{signalBank.ms[19].fir});
        res.insert_or_assign("signalBank.ms[20].fir", DumpEntry{signalBank.ms[20].fir});
        res.insert_or_assign("signalBank.ms[21].fir", DumpEntry{signalBank.ms[21].fir});
        res.insert_or_assign("signalBank.ms[22].fir", DumpEntry{signalBank.ms[22].fir});
        res.insert_or_assign("signalBank.ms[23].fir", DumpEntry{signalBank.ms[23].fir});
        res.insert_or_assign("signalBank.ms[24].fir", DumpEntry{signalBank.ms[24].fir});
        res.insert_or_assign("signalBank.ms[25].fir", DumpEntry{signalBank.ms[25].fir});
        res.insert_or_assign("signalBank.ms[26].fir", DumpEntry{signalBank.ms[26].fir});
        res.insert_or_assign("signalBank.ms[27].fir", DumpEntry{signalBank.ms[27].fir});
        res.insert_or_assign("signalBank.ms[28].fir", DumpEntry{signalBank.ms[28].fir});
        res.insert_or_assign("signalBank.ms[29].fir", DumpEntry{signalBank.ms[29].fir});
        res.insert_or_assign("signalBank.ms[30].fir", DumpEntry{signalBank.ms[30].fir});
        res.insert_or_assign("signalBank.ms[31].fir", DumpEntry{signalBank.ms[31].fir});
        res.insert_or_assign("signalBank.ms[32].fir", DumpEntry{signalBank.ms[32].fir});
        res.insert_or_assign("signalBank.ms[33].fir", DumpEntry{signalBank.ms[33].fir});
        res.insert_or_assign("signalBank.ms[34].fir", DumpEntry{signalBank.ms[34].fir});
        res.insert_or_assign("signalBank.ms[35].fir", DumpEntry{signalBank.ms[35].fir});
        res.insert_or_assign("signalBank.ms[36].fir", DumpEntry{signalBank.ms[36].fir});
        res.insert_or_assign("signalBank.ms[37].fir", DumpEntry{signalBank.ms[37].fir});
        res.insert_or_assign("signalBank.ms[38].fir", DumpEntry{signalBank.ms[38].fir});
        res.insert_or_assign("signalBank.ms[39].fir", DumpEntry{signalBank.ms[39].fir});
        res.insert_or_assign("signalBank.ms[40].fir", DumpEntry{signalBank.ms[40].fir});
        res.insert_or_assign("signalBank.ms[41].fir", DumpEntry{signalBank.ms[41].fir});
        res.insert_or_assign("signalBank.ms[42].fir", DumpEntry{signalBank.ms[42].fir});
        res.insert_or_assign("signalBank.ms[43].fir", DumpEntry{signalBank.ms[43].fir});
        res.insert_or_assign("signalBank.ms[44].fir", DumpEntry{signalBank.ms[44].fir});
        res.insert_or_assign("signalBank.ms[45].fir", DumpEntry{signalBank.ms[45].fir});
        res.insert_or_assign("signalBank.ms[46].fir", DumpEntry{signalBank.ms[46].fir});
        res.insert_or_assign("signalBank.ms[47].fir", DumpEntry{signalBank.ms[47].fir});
        res.insert_or_assign("signalBank.ms[48].fir", DumpEntry{signalBank.ms[48].fir});
        res.insert_or_assign("signalBank.ms[49].fir", DumpEntry{signalBank.ms[49].fir});
        res.insert_or_assign("signalBank.ms[50].fir", DumpEntry{signalBank.ms[50].fir});
        res.insert_or_assign("signalBank.ms[51].fir", DumpEntry{signalBank.ms[51].fir});
        res.insert_or_assign("signalBank.ms[52].fir", DumpEntry{signalBank.ms[52].fir});
        res.insert_or_assign("signalBank.ms[53].fir", DumpEntry{signalBank.ms[53].fir});
        res.insert_or_assign("signalBank.ms[54].fir", DumpEntry{signalBank.ms[54].fir});
        res.insert_or_assign("signalBank.ms[55].fir", DumpEntry{signalBank.ms[55].fir});
        res.insert_or_assign("signalBank.ms[56].fir", DumpEntry{signalBank.ms[56].fir});
        res.insert_or_assign("signalBank.ms[57].fir", DumpEntry{signalBank.ms[57].fir});
        res.insert_or_assign("signalBank.ms[58].fir", DumpEntry{signalBank.ms[58].fir});
        res.insert_or_assign("signalBank.ms[59].fir", DumpEntry{signalBank.ms[59].fir});
        res.insert_or_assign("signalBank.ms[60].fir", DumpEntry{signalBank.ms[60].fir});
        res.insert_or_assign("signalBank.ms[61].fir", DumpEntry{signalBank.ms[61].fir});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir::ChannelArrayItem::RFir`
    //!
    //! @param rFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rFir
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir::ChannelArrayItem::RFir& rFir)
    {
        DumpMap res{rFir.base()};
        res.insert_or_assign("rFir.m", DumpEntry{rFir.m});
        res.insert_or_assign("rFir.n", DumpEntry{rFir.n});
        res.insert_or_assign("rFir.s", DumpEntry{rFir.s});
        res.insert_or_assign("rFir.r", DumpEntry{rFir.r});
        res.insert_or_assign("rFir.tSc", DumpEntry{rFir.tSc});
        res.insert_or_assign("rFir.phase", DumpEntry{rFir.phase});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir::ChannelArrayItem::VFir`
    //!
    //! @param vFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under vFir
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir::ChannelArrayItem::VFir& vFir)
    {
        DumpMap res{vFir.base()};
        res.insert_or_assign("vFir.m", DumpEntry{vFir.m});
        res.insert_or_assign("vFir.n", DumpEntry{vFir.n});
        res.insert_or_assign("vFir.s", DumpEntry{vFir.s});
        res.insert_or_assign("vFir.r", DumpEntry{vFir.r});
        res.insert_or_assign("vFir.tSc", DumpEntry{vFir.tSc});
        res.insert_or_assign("vFir.phase", DumpEntry{vFir.phase});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir::ChannelArrayItem::MmFir`
    //!
    //! @param mmFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under mmFir
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir::ChannelArrayItem::MmFir& mmFir)
    {
        DumpMap res{mmFir.base()};
        res.insert_or_assign("mmFir.m", DumpEntry{mmFir.m});
        res.insert_or_assign("mmFir.n", DumpEntry{mmFir.n});
        res.insert_or_assign("mmFir.s", DumpEntry{mmFir.s});
        res.insert_or_assign("mmFir.r", DumpEntry{mmFir.r});
        res.insert_or_assign("mmFir.tSc", DumpEntry{mmFir.tSc});
        res.insert_or_assign("mmFir.phase", DumpEntry{mmFir.phase});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir::ChannelArrayItem::Limit`
    //!
    //! @param limit A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under limit
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir::ChannelArrayItem::Limit& limit)
    {
        DumpMap res{limit.base()};
        res.insert_or_assign("limit.maxLimit", DumpEntry{limit.maxLimit});
        res.insert_or_assign("limit.minLimit", DumpEntry{limit.minLimit});
        res.insert_or_assign("limit.filterLength", DumpEntry{limit.filterLength});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir::ChannelArray`
    //!
    //! @param channel A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under channel
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir::ChannelArray& channel)
    {
        DumpMap res{channel.base()};
        res.insert_or_assign("channel[0].rFir.m", DumpEntry{channel[0].rFir.m});
        res.insert_or_assign("channel[0].rFir.n", DumpEntry{channel[0].rFir.n});
        res.insert_or_assign("channel[0].rFir.s", DumpEntry{channel[0].rFir.s});
        res.insert_or_assign("channel[0].rFir.r", DumpEntry{channel[0].rFir.r});
        res.insert_or_assign("channel[0].rFir.tSc", DumpEntry{channel[0].rFir.tSc});
        res.insert_or_assign("channel[0].rFir.phase", DumpEntry{channel[0].rFir.phase});
        res.insert_or_assign("channel[0].vFir.m", DumpEntry{channel[0].vFir.m});
        res.insert_or_assign("channel[0].vFir.n", DumpEntry{channel[0].vFir.n});
        res.insert_or_assign("channel[0].vFir.s", DumpEntry{channel[0].vFir.s});
        res.insert_or_assign("channel[0].vFir.r", DumpEntry{channel[0].vFir.r});
        res.insert_or_assign("channel[0].vFir.tSc", DumpEntry{channel[0].vFir.tSc});
        res.insert_or_assign("channel[0].vFir.phase", DumpEntry{channel[0].vFir.phase});
        res.insert_or_assign("channel[0].mmFir.m", DumpEntry{channel[0].mmFir.m});
        res.insert_or_assign("channel[0].mmFir.n", DumpEntry{channel[0].mmFir.n});
        res.insert_or_assign("channel[0].mmFir.s", DumpEntry{channel[0].mmFir.s});
        res.insert_or_assign("channel[0].mmFir.r", DumpEntry{channel[0].mmFir.r});
        res.insert_or_assign("channel[0].mmFir.tSc", DumpEntry{channel[0].mmFir.tSc});
        res.insert_or_assign("channel[0].mmFir.phase", DumpEntry{channel[0].mmFir.phase});
        res.insert_or_assign("channel[0].limit.maxLimit", DumpEntry{channel[0].limit.maxLimit});
        res.insert_or_assign("channel[0].limit.minLimit", DumpEntry{channel[0].limit.minLimit});
        res.insert_or_assign("channel[0].limit.filterLength", DumpEntry{channel[0].limit.filterLength});
        res.insert_or_assign("channel[1].rFir.m", DumpEntry{channel[1].rFir.m});
        res.insert_or_assign("channel[1].rFir.n", DumpEntry{channel[1].rFir.n});
        res.insert_or_assign("channel[1].rFir.s", DumpEntry{channel[1].rFir.s});
        res.insert_or_assign("channel[1].rFir.r", DumpEntry{channel[1].rFir.r});
        res.insert_or_assign("channel[1].rFir.tSc", DumpEntry{channel[1].rFir.tSc});
        res.insert_or_assign("channel[1].rFir.phase", DumpEntry{channel[1].rFir.phase});
        res.insert_or_assign("channel[1].vFir.m", DumpEntry{channel[1].vFir.m});
        res.insert_or_assign("channel[1].vFir.n", DumpEntry{channel[1].vFir.n});
        res.insert_or_assign("channel[1].vFir.s", DumpEntry{channel[1].vFir.s});
        res.insert_or_assign("channel[1].vFir.r", DumpEntry{channel[1].vFir.r});
        res.insert_or_assign("channel[1].vFir.tSc", DumpEntry{channel[1].vFir.tSc});
        res.insert_or_assign("channel[1].vFir.phase", DumpEntry{channel[1].vFir.phase});
        res.insert_or_assign("channel[1].mmFir.m", DumpEntry{channel[1].mmFir.m});
        res.insert_or_assign("channel[1].mmFir.n", DumpEntry{channel[1].mmFir.n});
        res.insert_or_assign("channel[1].mmFir.s", DumpEntry{channel[1].mmFir.s});
        res.insert_or_assign("channel[1].mmFir.r", DumpEntry{channel[1].mmFir.r});
        res.insert_or_assign("channel[1].mmFir.tSc", DumpEntry{channel[1].mmFir.tSc});
        res.insert_or_assign("channel[1].mmFir.phase", DumpEntry{channel[1].mmFir.phase});
        res.insert_or_assign("channel[1].limit.maxLimit", DumpEntry{channel[1].limit.maxLimit});
        res.insert_or_assign("channel[1].limit.minLimit", DumpEntry{channel[1].limit.minLimit});
        res.insert_or_assign("channel[1].limit.filterLength", DumpEntry{channel[1].limit.filterLength});
        res.insert_or_assign("channel[2].rFir.m", DumpEntry{channel[2].rFir.m});
        res.insert_or_assign("channel[2].rFir.n", DumpEntry{channel[2].rFir.n});
        res.insert_or_assign("channel[2].rFir.s", DumpEntry{channel[2].rFir.s});
        res.insert_or_assign("channel[2].rFir.r", DumpEntry{channel[2].rFir.r});
        res.insert_or_assign("channel[2].rFir.tSc", DumpEntry{channel[2].rFir.tSc});
        res.insert_or_assign("channel[2].rFir.phase", DumpEntry{channel[2].rFir.phase});
        res.insert_or_assign("channel[2].vFir.m", DumpEntry{channel[2].vFir.m});
        res.insert_or_assign("channel[2].vFir.n", DumpEntry{channel[2].vFir.n});
        res.insert_or_assign("channel[2].vFir.s", DumpEntry{channel[2].vFir.s});
        res.insert_or_assign("channel[2].vFir.r", DumpEntry{channel[2].vFir.r});
        res.insert_or_assign("channel[2].vFir.tSc", DumpEntry{channel[2].vFir.tSc});
        res.insert_or_assign("channel[2].vFir.phase", DumpEntry{channel[2].vFir.phase});
        res.insert_or_assign("channel[2].mmFir.m", DumpEntry{channel[2].mmFir.m});
        res.insert_or_assign("channel[2].mmFir.n", DumpEntry{channel[2].mmFir.n});
        res.insert_or_assign("channel[2].mmFir.s", DumpEntry{channel[2].mmFir.s});
        res.insert_or_assign("channel[2].mmFir.r", DumpEntry{channel[2].mmFir.r});
        res.insert_or_assign("channel[2].mmFir.tSc", DumpEntry{channel[2].mmFir.tSc});
        res.insert_or_assign("channel[2].mmFir.phase", DumpEntry{channel[2].mmFir.phase});
        res.insert_or_assign("channel[2].limit.maxLimit", DumpEntry{channel[2].limit.maxLimit});
        res.insert_or_assign("channel[2].limit.minLimit", DumpEntry{channel[2].limit.minLimit});
        res.insert_or_assign("channel[2].limit.filterLength", DumpEntry{channel[2].limit.filterLength});
        res.insert_or_assign("channel[3].rFir.m", DumpEntry{channel[3].rFir.m});
        res.insert_or_assign("channel[3].rFir.n", DumpEntry{channel[3].rFir.n});
        res.insert_or_assign("channel[3].rFir.s", DumpEntry{channel[3].rFir.s});
        res.insert_or_assign("channel[3].rFir.r", DumpEntry{channel[3].rFir.r});
        res.insert_or_assign("channel[3].rFir.tSc", DumpEntry{channel[3].rFir.tSc});
        res.insert_or_assign("channel[3].rFir.phase", DumpEntry{channel[3].rFir.phase});
        res.insert_or_assign("channel[3].vFir.m", DumpEntry{channel[3].vFir.m});
        res.insert_or_assign("channel[3].vFir.n", DumpEntry{channel[3].vFir.n});
        res.insert_or_assign("channel[3].vFir.s", DumpEntry{channel[3].vFir.s});
        res.insert_or_assign("channel[3].vFir.r", DumpEntry{channel[3].vFir.r});
        res.insert_or_assign("channel[3].vFir.tSc", DumpEntry{channel[3].vFir.tSc});
        res.insert_or_assign("channel[3].vFir.phase", DumpEntry{channel[3].vFir.phase});
        res.insert_or_assign("channel[3].mmFir.m", DumpEntry{channel[3].mmFir.m});
        res.insert_or_assign("channel[3].mmFir.n", DumpEntry{channel[3].mmFir.n});
        res.insert_or_assign("channel[3].mmFir.s", DumpEntry{channel[3].mmFir.s});
        res.insert_or_assign("channel[3].mmFir.r", DumpEntry{channel[3].mmFir.r});
        res.insert_or_assign("channel[3].mmFir.tSc", DumpEntry{channel[3].mmFir.tSc});
        res.insert_or_assign("channel[3].mmFir.phase", DumpEntry{channel[3].mmFir.phase});
        res.insert_or_assign("channel[3].limit.maxLimit", DumpEntry{channel[3].limit.maxLimit});
        res.insert_or_assign("channel[3].limit.minLimit", DumpEntry{channel[3].limit.minLimit});
        res.insert_or_assign("channel[3].limit.filterLength", DumpEntry{channel[3].limit.filterLength});
        res.insert_or_assign("channel[4].rFir.m", DumpEntry{channel[4].rFir.m});
        res.insert_or_assign("channel[4].rFir.n", DumpEntry{channel[4].rFir.n});
        res.insert_or_assign("channel[4].rFir.s", DumpEntry{channel[4].rFir.s});
        res.insert_or_assign("channel[4].rFir.r", DumpEntry{channel[4].rFir.r});
        res.insert_or_assign("channel[4].rFir.tSc", DumpEntry{channel[4].rFir.tSc});
        res.insert_or_assign("channel[4].rFir.phase", DumpEntry{channel[4].rFir.phase});
        res.insert_or_assign("channel[4].vFir.m", DumpEntry{channel[4].vFir.m});
        res.insert_or_assign("channel[4].vFir.n", DumpEntry{channel[4].vFir.n});
        res.insert_or_assign("channel[4].vFir.s", DumpEntry{channel[4].vFir.s});
        res.insert_or_assign("channel[4].vFir.r", DumpEntry{channel[4].vFir.r});
        res.insert_or_assign("channel[4].vFir.tSc", DumpEntry{channel[4].vFir.tSc});
        res.insert_or_assign("channel[4].vFir.phase", DumpEntry{channel[4].vFir.phase});
        res.insert_or_assign("channel[4].mmFir.m", DumpEntry{channel[4].mmFir.m});
        res.insert_or_assign("channel[4].mmFir.n", DumpEntry{channel[4].mmFir.n});
        res.insert_or_assign("channel[4].mmFir.s", DumpEntry{channel[4].mmFir.s});
        res.insert_or_assign("channel[4].mmFir.r", DumpEntry{channel[4].mmFir.r});
        res.insert_or_assign("channel[4].mmFir.tSc", DumpEntry{channel[4].mmFir.tSc});
        res.insert_or_assign("channel[4].mmFir.phase", DumpEntry{channel[4].mmFir.phase});
        res.insert_or_assign("channel[4].limit.maxLimit", DumpEntry{channel[4].limit.maxLimit});
        res.insert_or_assign("channel[4].limit.minLimit", DumpEntry{channel[4].limit.minLimit});
        res.insert_or_assign("channel[4].limit.filterLength", DumpEntry{channel[4].limit.filterLength});
        res.insert_or_assign("channel[5].rFir.m", DumpEntry{channel[5].rFir.m});
        res.insert_or_assign("channel[5].rFir.n", DumpEntry{channel[5].rFir.n});
        res.insert_or_assign("channel[5].rFir.s", DumpEntry{channel[5].rFir.s});
        res.insert_or_assign("channel[5].rFir.r", DumpEntry{channel[5].rFir.r});
        res.insert_or_assign("channel[5].rFir.tSc", DumpEntry{channel[5].rFir.tSc});
        res.insert_or_assign("channel[5].rFir.phase", DumpEntry{channel[5].rFir.phase});
        res.insert_or_assign("channel[5].vFir.m", DumpEntry{channel[5].vFir.m});
        res.insert_or_assign("channel[5].vFir.n", DumpEntry{channel[5].vFir.n});
        res.insert_or_assign("channel[5].vFir.s", DumpEntry{channel[5].vFir.s});
        res.insert_or_assign("channel[5].vFir.r", DumpEntry{channel[5].vFir.r});
        res.insert_or_assign("channel[5].vFir.tSc", DumpEntry{channel[5].vFir.tSc});
        res.insert_or_assign("channel[5].vFir.phase", DumpEntry{channel[5].vFir.phase});
        res.insert_or_assign("channel[5].mmFir.m", DumpEntry{channel[5].mmFir.m});
        res.insert_or_assign("channel[5].mmFir.n", DumpEntry{channel[5].mmFir.n});
        res.insert_or_assign("channel[5].mmFir.s", DumpEntry{channel[5].mmFir.s});
        res.insert_or_assign("channel[5].mmFir.r", DumpEntry{channel[5].mmFir.r});
        res.insert_or_assign("channel[5].mmFir.tSc", DumpEntry{channel[5].mmFir.tSc});
        res.insert_or_assign("channel[5].mmFir.phase", DumpEntry{channel[5].mmFir.phase});
        res.insert_or_assign("channel[5].limit.maxLimit", DumpEntry{channel[5].limit.maxLimit});
        res.insert_or_assign("channel[5].limit.minLimit", DumpEntry{channel[5].limit.minLimit});
        res.insert_or_assign("channel[5].limit.filterLength", DumpEntry{channel[5].limit.filterLength});
        res.insert_or_assign("channel[6].rFir.m", DumpEntry{channel[6].rFir.m});
        res.insert_or_assign("channel[6].rFir.n", DumpEntry{channel[6].rFir.n});
        res.insert_or_assign("channel[6].rFir.s", DumpEntry{channel[6].rFir.s});
        res.insert_or_assign("channel[6].rFir.r", DumpEntry{channel[6].rFir.r});
        res.insert_or_assign("channel[6].rFir.tSc", DumpEntry{channel[6].rFir.tSc});
        res.insert_or_assign("channel[6].rFir.phase", DumpEntry{channel[6].rFir.phase});
        res.insert_or_assign("channel[6].vFir.m", DumpEntry{channel[6].vFir.m});
        res.insert_or_assign("channel[6].vFir.n", DumpEntry{channel[6].vFir.n});
        res.insert_or_assign("channel[6].vFir.s", DumpEntry{channel[6].vFir.s});
        res.insert_or_assign("channel[6].vFir.r", DumpEntry{channel[6].vFir.r});
        res.insert_or_assign("channel[6].vFir.tSc", DumpEntry{channel[6].vFir.tSc});
        res.insert_or_assign("channel[6].vFir.phase", DumpEntry{channel[6].vFir.phase});
        res.insert_or_assign("channel[6].mmFir.m", DumpEntry{channel[6].mmFir.m});
        res.insert_or_assign("channel[6].mmFir.n", DumpEntry{channel[6].mmFir.n});
        res.insert_or_assign("channel[6].mmFir.s", DumpEntry{channel[6].mmFir.s});
        res.insert_or_assign("channel[6].mmFir.r", DumpEntry{channel[6].mmFir.r});
        res.insert_or_assign("channel[6].mmFir.tSc", DumpEntry{channel[6].mmFir.tSc});
        res.insert_or_assign("channel[6].mmFir.phase", DumpEntry{channel[6].mmFir.phase});
        res.insert_or_assign("channel[6].limit.maxLimit", DumpEntry{channel[6].limit.maxLimit});
        res.insert_or_assign("channel[6].limit.minLimit", DumpEntry{channel[6].limit.minLimit});
        res.insert_or_assign("channel[6].limit.filterLength", DumpEntry{channel[6].limit.filterLength});
        res.insert_or_assign("channel[7].rFir.m", DumpEntry{channel[7].rFir.m});
        res.insert_or_assign("channel[7].rFir.n", DumpEntry{channel[7].rFir.n});
        res.insert_or_assign("channel[7].rFir.s", DumpEntry{channel[7].rFir.s});
        res.insert_or_assign("channel[7].rFir.r", DumpEntry{channel[7].rFir.r});
        res.insert_or_assign("channel[7].rFir.tSc", DumpEntry{channel[7].rFir.tSc});
        res.insert_or_assign("channel[7].rFir.phase", DumpEntry{channel[7].rFir.phase});
        res.insert_or_assign("channel[7].vFir.m", DumpEntry{channel[7].vFir.m});
        res.insert_or_assign("channel[7].vFir.n", DumpEntry{channel[7].vFir.n});
        res.insert_or_assign("channel[7].vFir.s", DumpEntry{channel[7].vFir.s});
        res.insert_or_assign("channel[7].vFir.r", DumpEntry{channel[7].vFir.r});
        res.insert_or_assign("channel[7].vFir.tSc", DumpEntry{channel[7].vFir.tSc});
        res.insert_or_assign("channel[7].vFir.phase", DumpEntry{channel[7].vFir.phase});
        res.insert_or_assign("channel[7].mmFir.m", DumpEntry{channel[7].mmFir.m});
        res.insert_or_assign("channel[7].mmFir.n", DumpEntry{channel[7].mmFir.n});
        res.insert_or_assign("channel[7].mmFir.s", DumpEntry{channel[7].mmFir.s});
        res.insert_or_assign("channel[7].mmFir.r", DumpEntry{channel[7].mmFir.r});
        res.insert_or_assign("channel[7].mmFir.tSc", DumpEntry{channel[7].mmFir.tSc});
        res.insert_or_assign("channel[7].mmFir.phase", DumpEntry{channel[7].mmFir.phase});
        res.insert_or_assign("channel[7].limit.maxLimit", DumpEntry{channel[7].limit.maxLimit});
        res.insert_or_assign("channel[7].limit.minLimit", DumpEntry{channel[7].limit.minLimit});
        res.insert_or_assign("channel[7].limit.filterLength", DumpEntry{channel[7].limit.filterLength});
        res.insert_or_assign("channel[8].rFir.m", DumpEntry{channel[8].rFir.m});
        res.insert_or_assign("channel[8].rFir.n", DumpEntry{channel[8].rFir.n});
        res.insert_or_assign("channel[8].rFir.s", DumpEntry{channel[8].rFir.s});
        res.insert_or_assign("channel[8].rFir.r", DumpEntry{channel[8].rFir.r});
        res.insert_or_assign("channel[8].rFir.tSc", DumpEntry{channel[8].rFir.tSc});
        res.insert_or_assign("channel[8].rFir.phase", DumpEntry{channel[8].rFir.phase});
        res.insert_or_assign("channel[8].vFir.m", DumpEntry{channel[8].vFir.m});
        res.insert_or_assign("channel[8].vFir.n", DumpEntry{channel[8].vFir.n});
        res.insert_or_assign("channel[8].vFir.s", DumpEntry{channel[8].vFir.s});
        res.insert_or_assign("channel[8].vFir.r", DumpEntry{channel[8].vFir.r});
        res.insert_or_assign("channel[8].vFir.tSc", DumpEntry{channel[8].vFir.tSc});
        res.insert_or_assign("channel[8].vFir.phase", DumpEntry{channel[8].vFir.phase});
        res.insert_or_assign("channel[8].mmFir.m", DumpEntry{channel[8].mmFir.m});
        res.insert_or_assign("channel[8].mmFir.n", DumpEntry{channel[8].mmFir.n});
        res.insert_or_assign("channel[8].mmFir.s", DumpEntry{channel[8].mmFir.s});
        res.insert_or_assign("channel[8].mmFir.r", DumpEntry{channel[8].mmFir.r});
        res.insert_or_assign("channel[8].mmFir.tSc", DumpEntry{channel[8].mmFir.tSc});
        res.insert_or_assign("channel[8].mmFir.phase", DumpEntry{channel[8].mmFir.phase});
        res.insert_or_assign("channel[8].limit.maxLimit", DumpEntry{channel[8].limit.maxLimit});
        res.insert_or_assign("channel[8].limit.minLimit", DumpEntry{channel[8].limit.minLimit});
        res.insert_or_assign("channel[8].limit.filterLength", DumpEntry{channel[8].limit.filterLength});
        res.insert_or_assign("channel[9].rFir.m", DumpEntry{channel[9].rFir.m});
        res.insert_or_assign("channel[9].rFir.n", DumpEntry{channel[9].rFir.n});
        res.insert_or_assign("channel[9].rFir.s", DumpEntry{channel[9].rFir.s});
        res.insert_or_assign("channel[9].rFir.r", DumpEntry{channel[9].rFir.r});
        res.insert_or_assign("channel[9].rFir.tSc", DumpEntry{channel[9].rFir.tSc});
        res.insert_or_assign("channel[9].rFir.phase", DumpEntry{channel[9].rFir.phase});
        res.insert_or_assign("channel[9].vFir.m", DumpEntry{channel[9].vFir.m});
        res.insert_or_assign("channel[9].vFir.n", DumpEntry{channel[9].vFir.n});
        res.insert_or_assign("channel[9].vFir.s", DumpEntry{channel[9].vFir.s});
        res.insert_or_assign("channel[9].vFir.r", DumpEntry{channel[9].vFir.r});
        res.insert_or_assign("channel[9].vFir.tSc", DumpEntry{channel[9].vFir.tSc});
        res.insert_or_assign("channel[9].vFir.phase", DumpEntry{channel[9].vFir.phase});
        res.insert_or_assign("channel[9].mmFir.m", DumpEntry{channel[9].mmFir.m});
        res.insert_or_assign("channel[9].mmFir.n", DumpEntry{channel[9].mmFir.n});
        res.insert_or_assign("channel[9].mmFir.s", DumpEntry{channel[9].mmFir.s});
        res.insert_or_assign("channel[9].mmFir.r", DumpEntry{channel[9].mmFir.r});
        res.insert_or_assign("channel[9].mmFir.tSc", DumpEntry{channel[9].mmFir.tSc});
        res.insert_or_assign("channel[9].mmFir.phase", DumpEntry{channel[9].mmFir.phase});
        res.insert_or_assign("channel[9].limit.maxLimit", DumpEntry{channel[9].limit.maxLimit});
        res.insert_or_assign("channel[9].limit.minLimit", DumpEntry{channel[9].limit.minLimit});
        res.insert_or_assign("channel[9].limit.filterLength", DumpEntry{channel[9].limit.filterLength});
        res.insert_or_assign("channel[10].rFir.m", DumpEntry{channel[10].rFir.m});
        res.insert_or_assign("channel[10].rFir.n", DumpEntry{channel[10].rFir.n});
        res.insert_or_assign("channel[10].rFir.s", DumpEntry{channel[10].rFir.s});
        res.insert_or_assign("channel[10].rFir.r", DumpEntry{channel[10].rFir.r});
        res.insert_or_assign("channel[10].rFir.tSc", DumpEntry{channel[10].rFir.tSc});
        res.insert_or_assign("channel[10].rFir.phase", DumpEntry{channel[10].rFir.phase});
        res.insert_or_assign("channel[10].vFir.m", DumpEntry{channel[10].vFir.m});
        res.insert_or_assign("channel[10].vFir.n", DumpEntry{channel[10].vFir.n});
        res.insert_or_assign("channel[10].vFir.s", DumpEntry{channel[10].vFir.s});
        res.insert_or_assign("channel[10].vFir.r", DumpEntry{channel[10].vFir.r});
        res.insert_or_assign("channel[10].vFir.tSc", DumpEntry{channel[10].vFir.tSc});
        res.insert_or_assign("channel[10].vFir.phase", DumpEntry{channel[10].vFir.phase});
        res.insert_or_assign("channel[10].mmFir.m", DumpEntry{channel[10].mmFir.m});
        res.insert_or_assign("channel[10].mmFir.n", DumpEntry{channel[10].mmFir.n});
        res.insert_or_assign("channel[10].mmFir.s", DumpEntry{channel[10].mmFir.s});
        res.insert_or_assign("channel[10].mmFir.r", DumpEntry{channel[10].mmFir.r});
        res.insert_or_assign("channel[10].mmFir.tSc", DumpEntry{channel[10].mmFir.tSc});
        res.insert_or_assign("channel[10].mmFir.phase", DumpEntry{channel[10].mmFir.phase});
        res.insert_or_assign("channel[10].limit.maxLimit", DumpEntry{channel[10].limit.maxLimit});
        res.insert_or_assign("channel[10].limit.minLimit", DumpEntry{channel[10].limit.minLimit});
        res.insert_or_assign("channel[10].limit.filterLength", DumpEntry{channel[10].limit.filterLength});
        res.insert_or_assign("channel[11].rFir.m", DumpEntry{channel[11].rFir.m});
        res.insert_or_assign("channel[11].rFir.n", DumpEntry{channel[11].rFir.n});
        res.insert_or_assign("channel[11].rFir.s", DumpEntry{channel[11].rFir.s});
        res.insert_or_assign("channel[11].rFir.r", DumpEntry{channel[11].rFir.r});
        res.insert_or_assign("channel[11].rFir.tSc", DumpEntry{channel[11].rFir.tSc});
        res.insert_or_assign("channel[11].rFir.phase", DumpEntry{channel[11].rFir.phase});
        res.insert_or_assign("channel[11].vFir.m", DumpEntry{channel[11].vFir.m});
        res.insert_or_assign("channel[11].vFir.n", DumpEntry{channel[11].vFir.n});
        res.insert_or_assign("channel[11].vFir.s", DumpEntry{channel[11].vFir.s});
        res.insert_or_assign("channel[11].vFir.r", DumpEntry{channel[11].vFir.r});
        res.insert_or_assign("channel[11].vFir.tSc", DumpEntry{channel[11].vFir.tSc});
        res.insert_or_assign("channel[11].vFir.phase", DumpEntry{channel[11].vFir.phase});
        res.insert_or_assign("channel[11].mmFir.m", DumpEntry{channel[11].mmFir.m});
        res.insert_or_assign("channel[11].mmFir.n", DumpEntry{channel[11].mmFir.n});
        res.insert_or_assign("channel[11].mmFir.s", DumpEntry{channel[11].mmFir.s});
        res.insert_or_assign("channel[11].mmFir.r", DumpEntry{channel[11].mmFir.r});
        res.insert_or_assign("channel[11].mmFir.tSc", DumpEntry{channel[11].mmFir.tSc});
        res.insert_or_assign("channel[11].mmFir.phase", DumpEntry{channel[11].mmFir.phase});
        res.insert_or_assign("channel[11].limit.maxLimit", DumpEntry{channel[11].limit.maxLimit});
        res.insert_or_assign("channel[11].limit.minLimit", DumpEntry{channel[11].limit.minLimit});
        res.insert_or_assign("channel[11].limit.filterLength", DumpEntry{channel[11].limit.filterLength});
        res.insert_or_assign("channel[12].rFir.m", DumpEntry{channel[12].rFir.m});
        res.insert_or_assign("channel[12].rFir.n", DumpEntry{channel[12].rFir.n});
        res.insert_or_assign("channel[12].rFir.s", DumpEntry{channel[12].rFir.s});
        res.insert_or_assign("channel[12].rFir.r", DumpEntry{channel[12].rFir.r});
        res.insert_or_assign("channel[12].rFir.tSc", DumpEntry{channel[12].rFir.tSc});
        res.insert_or_assign("channel[12].rFir.phase", DumpEntry{channel[12].rFir.phase});
        res.insert_or_assign("channel[12].vFir.m", DumpEntry{channel[12].vFir.m});
        res.insert_or_assign("channel[12].vFir.n", DumpEntry{channel[12].vFir.n});
        res.insert_or_assign("channel[12].vFir.s", DumpEntry{channel[12].vFir.s});
        res.insert_or_assign("channel[12].vFir.r", DumpEntry{channel[12].vFir.r});
        res.insert_or_assign("channel[12].vFir.tSc", DumpEntry{channel[12].vFir.tSc});
        res.insert_or_assign("channel[12].vFir.phase", DumpEntry{channel[12].vFir.phase});
        res.insert_or_assign("channel[12].mmFir.m", DumpEntry{channel[12].mmFir.m});
        res.insert_or_assign("channel[12].mmFir.n", DumpEntry{channel[12].mmFir.n});
        res.insert_or_assign("channel[12].mmFir.s", DumpEntry{channel[12].mmFir.s});
        res.insert_or_assign("channel[12].mmFir.r", DumpEntry{channel[12].mmFir.r});
        res.insert_or_assign("channel[12].mmFir.tSc", DumpEntry{channel[12].mmFir.tSc});
        res.insert_or_assign("channel[12].mmFir.phase", DumpEntry{channel[12].mmFir.phase});
        res.insert_or_assign("channel[12].limit.maxLimit", DumpEntry{channel[12].limit.maxLimit});
        res.insert_or_assign("channel[12].limit.minLimit", DumpEntry{channel[12].limit.minLimit});
        res.insert_or_assign("channel[12].limit.filterLength", DumpEntry{channel[12].limit.filterLength});
        res.insert_or_assign("channel[13].rFir.m", DumpEntry{channel[13].rFir.m});
        res.insert_or_assign("channel[13].rFir.n", DumpEntry{channel[13].rFir.n});
        res.insert_or_assign("channel[13].rFir.s", DumpEntry{channel[13].rFir.s});
        res.insert_or_assign("channel[13].rFir.r", DumpEntry{channel[13].rFir.r});
        res.insert_or_assign("channel[13].rFir.tSc", DumpEntry{channel[13].rFir.tSc});
        res.insert_or_assign("channel[13].rFir.phase", DumpEntry{channel[13].rFir.phase});
        res.insert_or_assign("channel[13].vFir.m", DumpEntry{channel[13].vFir.m});
        res.insert_or_assign("channel[13].vFir.n", DumpEntry{channel[13].vFir.n});
        res.insert_or_assign("channel[13].vFir.s", DumpEntry{channel[13].vFir.s});
        res.insert_or_assign("channel[13].vFir.r", DumpEntry{channel[13].vFir.r});
        res.insert_or_assign("channel[13].vFir.tSc", DumpEntry{channel[13].vFir.tSc});
        res.insert_or_assign("channel[13].vFir.phase", DumpEntry{channel[13].vFir.phase});
        res.insert_or_assign("channel[13].mmFir.m", DumpEntry{channel[13].mmFir.m});
        res.insert_or_assign("channel[13].mmFir.n", DumpEntry{channel[13].mmFir.n});
        res.insert_or_assign("channel[13].mmFir.s", DumpEntry{channel[13].mmFir.s});
        res.insert_or_assign("channel[13].mmFir.r", DumpEntry{channel[13].mmFir.r});
        res.insert_or_assign("channel[13].mmFir.tSc", DumpEntry{channel[13].mmFir.tSc});
        res.insert_or_assign("channel[13].mmFir.phase", DumpEntry{channel[13].mmFir.phase});
        res.insert_or_assign("channel[13].limit.maxLimit", DumpEntry{channel[13].limit.maxLimit});
        res.insert_or_assign("channel[13].limit.minLimit", DumpEntry{channel[13].limit.minLimit});
        res.insert_or_assign("channel[13].limit.filterLength", DumpEntry{channel[13].limit.filterLength});
        res.insert_or_assign("channel[14].rFir.m", DumpEntry{channel[14].rFir.m});
        res.insert_or_assign("channel[14].rFir.n", DumpEntry{channel[14].rFir.n});
        res.insert_or_assign("channel[14].rFir.s", DumpEntry{channel[14].rFir.s});
        res.insert_or_assign("channel[14].rFir.r", DumpEntry{channel[14].rFir.r});
        res.insert_or_assign("channel[14].rFir.tSc", DumpEntry{channel[14].rFir.tSc});
        res.insert_or_assign("channel[14].rFir.phase", DumpEntry{channel[14].rFir.phase});
        res.insert_or_assign("channel[14].vFir.m", DumpEntry{channel[14].vFir.m});
        res.insert_or_assign("channel[14].vFir.n", DumpEntry{channel[14].vFir.n});
        res.insert_or_assign("channel[14].vFir.s", DumpEntry{channel[14].vFir.s});
        res.insert_or_assign("channel[14].vFir.r", DumpEntry{channel[14].vFir.r});
        res.insert_or_assign("channel[14].vFir.tSc", DumpEntry{channel[14].vFir.tSc});
        res.insert_or_assign("channel[14].vFir.phase", DumpEntry{channel[14].vFir.phase});
        res.insert_or_assign("channel[14].mmFir.m", DumpEntry{channel[14].mmFir.m});
        res.insert_or_assign("channel[14].mmFir.n", DumpEntry{channel[14].mmFir.n});
        res.insert_or_assign("channel[14].mmFir.s", DumpEntry{channel[14].mmFir.s});
        res.insert_or_assign("channel[14].mmFir.r", DumpEntry{channel[14].mmFir.r});
        res.insert_or_assign("channel[14].mmFir.tSc", DumpEntry{channel[14].mmFir.tSc});
        res.insert_or_assign("channel[14].mmFir.phase", DumpEntry{channel[14].mmFir.phase});
        res.insert_or_assign("channel[14].limit.maxLimit", DumpEntry{channel[14].limit.maxLimit});
        res.insert_or_assign("channel[14].limit.minLimit", DumpEntry{channel[14].limit.minLimit});
        res.insert_or_assign("channel[14].limit.filterLength", DumpEntry{channel[14].limit.filterLength});
        res.insert_or_assign("channel[15].rFir.m", DumpEntry{channel[15].rFir.m});
        res.insert_or_assign("channel[15].rFir.n", DumpEntry{channel[15].rFir.n});
        res.insert_or_assign("channel[15].rFir.s", DumpEntry{channel[15].rFir.s});
        res.insert_or_assign("channel[15].rFir.r", DumpEntry{channel[15].rFir.r});
        res.insert_or_assign("channel[15].rFir.tSc", DumpEntry{channel[15].rFir.tSc});
        res.insert_or_assign("channel[15].rFir.phase", DumpEntry{channel[15].rFir.phase});
        res.insert_or_assign("channel[15].vFir.m", DumpEntry{channel[15].vFir.m});
        res.insert_or_assign("channel[15].vFir.n", DumpEntry{channel[15].vFir.n});
        res.insert_or_assign("channel[15].vFir.s", DumpEntry{channel[15].vFir.s});
        res.insert_or_assign("channel[15].vFir.r", DumpEntry{channel[15].vFir.r});
        res.insert_or_assign("channel[15].vFir.tSc", DumpEntry{channel[15].vFir.tSc});
        res.insert_or_assign("channel[15].vFir.phase", DumpEntry{channel[15].vFir.phase});
        res.insert_or_assign("channel[15].mmFir.m", DumpEntry{channel[15].mmFir.m});
        res.insert_or_assign("channel[15].mmFir.n", DumpEntry{channel[15].mmFir.n});
        res.insert_or_assign("channel[15].mmFir.s", DumpEntry{channel[15].mmFir.s});
        res.insert_or_assign("channel[15].mmFir.r", DumpEntry{channel[15].mmFir.r});
        res.insert_or_assign("channel[15].mmFir.tSc", DumpEntry{channel[15].mmFir.tSc});
        res.insert_or_assign("channel[15].mmFir.phase", DumpEntry{channel[15].mmFir.phase});
        res.insert_or_assign("channel[15].limit.maxLimit", DumpEntry{channel[15].limit.maxLimit});
        res.insert_or_assign("channel[15].limit.minLimit", DumpEntry{channel[15].limit.minLimit});
        res.insert_or_assign("channel[15].limit.filterLength", DumpEntry{channel[15].limit.filterLength});
        res.insert_or_assign("channel[16].rFir.m", DumpEntry{channel[16].rFir.m});
        res.insert_or_assign("channel[16].rFir.n", DumpEntry{channel[16].rFir.n});
        res.insert_or_assign("channel[16].rFir.s", DumpEntry{channel[16].rFir.s});
        res.insert_or_assign("channel[16].rFir.r", DumpEntry{channel[16].rFir.r});
        res.insert_or_assign("channel[16].rFir.tSc", DumpEntry{channel[16].rFir.tSc});
        res.insert_or_assign("channel[16].rFir.phase", DumpEntry{channel[16].rFir.phase});
        res.insert_or_assign("channel[16].vFir.m", DumpEntry{channel[16].vFir.m});
        res.insert_or_assign("channel[16].vFir.n", DumpEntry{channel[16].vFir.n});
        res.insert_or_assign("channel[16].vFir.s", DumpEntry{channel[16].vFir.s});
        res.insert_or_assign("channel[16].vFir.r", DumpEntry{channel[16].vFir.r});
        res.insert_or_assign("channel[16].vFir.tSc", DumpEntry{channel[16].vFir.tSc});
        res.insert_or_assign("channel[16].vFir.phase", DumpEntry{channel[16].vFir.phase});
        res.insert_or_assign("channel[16].mmFir.m", DumpEntry{channel[16].mmFir.m});
        res.insert_or_assign("channel[16].mmFir.n", DumpEntry{channel[16].mmFir.n});
        res.insert_or_assign("channel[16].mmFir.s", DumpEntry{channel[16].mmFir.s});
        res.insert_or_assign("channel[16].mmFir.r", DumpEntry{channel[16].mmFir.r});
        res.insert_or_assign("channel[16].mmFir.tSc", DumpEntry{channel[16].mmFir.tSc});
        res.insert_or_assign("channel[16].mmFir.phase", DumpEntry{channel[16].mmFir.phase});
        res.insert_or_assign("channel[16].limit.maxLimit", DumpEntry{channel[16].limit.maxLimit});
        res.insert_or_assign("channel[16].limit.minLimit", DumpEntry{channel[16].limit.minLimit});
        res.insert_or_assign("channel[16].limit.filterLength", DumpEntry{channel[16].limit.filterLength});
        res.insert_or_assign("channel[17].rFir.m", DumpEntry{channel[17].rFir.m});
        res.insert_or_assign("channel[17].rFir.n", DumpEntry{channel[17].rFir.n});
        res.insert_or_assign("channel[17].rFir.s", DumpEntry{channel[17].rFir.s});
        res.insert_or_assign("channel[17].rFir.r", DumpEntry{channel[17].rFir.r});
        res.insert_or_assign("channel[17].rFir.tSc", DumpEntry{channel[17].rFir.tSc});
        res.insert_or_assign("channel[17].rFir.phase", DumpEntry{channel[17].rFir.phase});
        res.insert_or_assign("channel[17].vFir.m", DumpEntry{channel[17].vFir.m});
        res.insert_or_assign("channel[17].vFir.n", DumpEntry{channel[17].vFir.n});
        res.insert_or_assign("channel[17].vFir.s", DumpEntry{channel[17].vFir.s});
        res.insert_or_assign("channel[17].vFir.r", DumpEntry{channel[17].vFir.r});
        res.insert_or_assign("channel[17].vFir.tSc", DumpEntry{channel[17].vFir.tSc});
        res.insert_or_assign("channel[17].vFir.phase", DumpEntry{channel[17].vFir.phase});
        res.insert_or_assign("channel[17].mmFir.m", DumpEntry{channel[17].mmFir.m});
        res.insert_or_assign("channel[17].mmFir.n", DumpEntry{channel[17].mmFir.n});
        res.insert_or_assign("channel[17].mmFir.s", DumpEntry{channel[17].mmFir.s});
        res.insert_or_assign("channel[17].mmFir.r", DumpEntry{channel[17].mmFir.r});
        res.insert_or_assign("channel[17].mmFir.tSc", DumpEntry{channel[17].mmFir.tSc});
        res.insert_or_assign("channel[17].mmFir.phase", DumpEntry{channel[17].mmFir.phase});
        res.insert_or_assign("channel[17].limit.maxLimit", DumpEntry{channel[17].limit.maxLimit});
        res.insert_or_assign("channel[17].limit.minLimit", DumpEntry{channel[17].limit.minLimit});
        res.insert_or_assign("channel[17].limit.filterLength", DumpEntry{channel[17].limit.filterLength});
        res.insert_or_assign("channel[18].rFir.m", DumpEntry{channel[18].rFir.m});
        res.insert_or_assign("channel[18].rFir.n", DumpEntry{channel[18].rFir.n});
        res.insert_or_assign("channel[18].rFir.s", DumpEntry{channel[18].rFir.s});
        res.insert_or_assign("channel[18].rFir.r", DumpEntry{channel[18].rFir.r});
        res.insert_or_assign("channel[18].rFir.tSc", DumpEntry{channel[18].rFir.tSc});
        res.insert_or_assign("channel[18].rFir.phase", DumpEntry{channel[18].rFir.phase});
        res.insert_or_assign("channel[18].vFir.m", DumpEntry{channel[18].vFir.m});
        res.insert_or_assign("channel[18].vFir.n", DumpEntry{channel[18].vFir.n});
        res.insert_or_assign("channel[18].vFir.s", DumpEntry{channel[18].vFir.s});
        res.insert_or_assign("channel[18].vFir.r", DumpEntry{channel[18].vFir.r});
        res.insert_or_assign("channel[18].vFir.tSc", DumpEntry{channel[18].vFir.tSc});
        res.insert_or_assign("channel[18].vFir.phase", DumpEntry{channel[18].vFir.phase});
        res.insert_or_assign("channel[18].mmFir.m", DumpEntry{channel[18].mmFir.m});
        res.insert_or_assign("channel[18].mmFir.n", DumpEntry{channel[18].mmFir.n});
        res.insert_or_assign("channel[18].mmFir.s", DumpEntry{channel[18].mmFir.s});
        res.insert_or_assign("channel[18].mmFir.r", DumpEntry{channel[18].mmFir.r});
        res.insert_or_assign("channel[18].mmFir.tSc", DumpEntry{channel[18].mmFir.tSc});
        res.insert_or_assign("channel[18].mmFir.phase", DumpEntry{channel[18].mmFir.phase});
        res.insert_or_assign("channel[18].limit.maxLimit", DumpEntry{channel[18].limit.maxLimit});
        res.insert_or_assign("channel[18].limit.minLimit", DumpEntry{channel[18].limit.minLimit});
        res.insert_or_assign("channel[18].limit.filterLength", DumpEntry{channel[18].limit.filterLength});
        res.insert_or_assign("channel[19].rFir.m", DumpEntry{channel[19].rFir.m});
        res.insert_or_assign("channel[19].rFir.n", DumpEntry{channel[19].rFir.n});
        res.insert_or_assign("channel[19].rFir.s", DumpEntry{channel[19].rFir.s});
        res.insert_or_assign("channel[19].rFir.r", DumpEntry{channel[19].rFir.r});
        res.insert_or_assign("channel[19].rFir.tSc", DumpEntry{channel[19].rFir.tSc});
        res.insert_or_assign("channel[19].rFir.phase", DumpEntry{channel[19].rFir.phase});
        res.insert_or_assign("channel[19].vFir.m", DumpEntry{channel[19].vFir.m});
        res.insert_or_assign("channel[19].vFir.n", DumpEntry{channel[19].vFir.n});
        res.insert_or_assign("channel[19].vFir.s", DumpEntry{channel[19].vFir.s});
        res.insert_or_assign("channel[19].vFir.r", DumpEntry{channel[19].vFir.r});
        res.insert_or_assign("channel[19].vFir.tSc", DumpEntry{channel[19].vFir.tSc});
        res.insert_or_assign("channel[19].vFir.phase", DumpEntry{channel[19].vFir.phase});
        res.insert_or_assign("channel[19].mmFir.m", DumpEntry{channel[19].mmFir.m});
        res.insert_or_assign("channel[19].mmFir.n", DumpEntry{channel[19].mmFir.n});
        res.insert_or_assign("channel[19].mmFir.s", DumpEntry{channel[19].mmFir.s});
        res.insert_or_assign("channel[19].mmFir.r", DumpEntry{channel[19].mmFir.r});
        res.insert_or_assign("channel[19].mmFir.tSc", DumpEntry{channel[19].mmFir.tSc});
        res.insert_or_assign("channel[19].mmFir.phase", DumpEntry{channel[19].mmFir.phase});
        res.insert_or_assign("channel[19].limit.maxLimit", DumpEntry{channel[19].limit.maxLimit});
        res.insert_or_assign("channel[19].limit.minLimit", DumpEntry{channel[19].limit.minLimit});
        res.insert_or_assign("channel[19].limit.filterLength", DumpEntry{channel[19].limit.filterLength});
        res.insert_or_assign("channel[20].rFir.m", DumpEntry{channel[20].rFir.m});
        res.insert_or_assign("channel[20].rFir.n", DumpEntry{channel[20].rFir.n});
        res.insert_or_assign("channel[20].rFir.s", DumpEntry{channel[20].rFir.s});
        res.insert_or_assign("channel[20].rFir.r", DumpEntry{channel[20].rFir.r});
        res.insert_or_assign("channel[20].rFir.tSc", DumpEntry{channel[20].rFir.tSc});
        res.insert_or_assign("channel[20].rFir.phase", DumpEntry{channel[20].rFir.phase});
        res.insert_or_assign("channel[20].vFir.m", DumpEntry{channel[20].vFir.m});
        res.insert_or_assign("channel[20].vFir.n", DumpEntry{channel[20].vFir.n});
        res.insert_or_assign("channel[20].vFir.s", DumpEntry{channel[20].vFir.s});
        res.insert_or_assign("channel[20].vFir.r", DumpEntry{channel[20].vFir.r});
        res.insert_or_assign("channel[20].vFir.tSc", DumpEntry{channel[20].vFir.tSc});
        res.insert_or_assign("channel[20].vFir.phase", DumpEntry{channel[20].vFir.phase});
        res.insert_or_assign("channel[20].mmFir.m", DumpEntry{channel[20].mmFir.m});
        res.insert_or_assign("channel[20].mmFir.n", DumpEntry{channel[20].mmFir.n});
        res.insert_or_assign("channel[20].mmFir.s", DumpEntry{channel[20].mmFir.s});
        res.insert_or_assign("channel[20].mmFir.r", DumpEntry{channel[20].mmFir.r});
        res.insert_or_assign("channel[20].mmFir.tSc", DumpEntry{channel[20].mmFir.tSc});
        res.insert_or_assign("channel[20].mmFir.phase", DumpEntry{channel[20].mmFir.phase});
        res.insert_or_assign("channel[20].limit.maxLimit", DumpEntry{channel[20].limit.maxLimit});
        res.insert_or_assign("channel[20].limit.minLimit", DumpEntry{channel[20].limit.minLimit});
        res.insert_or_assign("channel[20].limit.filterLength", DumpEntry{channel[20].limit.filterLength});
        res.insert_or_assign("channel[21].rFir.m", DumpEntry{channel[21].rFir.m});
        res.insert_or_assign("channel[21].rFir.n", DumpEntry{channel[21].rFir.n});
        res.insert_or_assign("channel[21].rFir.s", DumpEntry{channel[21].rFir.s});
        res.insert_or_assign("channel[21].rFir.r", DumpEntry{channel[21].rFir.r});
        res.insert_or_assign("channel[21].rFir.tSc", DumpEntry{channel[21].rFir.tSc});
        res.insert_or_assign("channel[21].rFir.phase", DumpEntry{channel[21].rFir.phase});
        res.insert_or_assign("channel[21].vFir.m", DumpEntry{channel[21].vFir.m});
        res.insert_or_assign("channel[21].vFir.n", DumpEntry{channel[21].vFir.n});
        res.insert_or_assign("channel[21].vFir.s", DumpEntry{channel[21].vFir.s});
        res.insert_or_assign("channel[21].vFir.r", DumpEntry{channel[21].vFir.r});
        res.insert_or_assign("channel[21].vFir.tSc", DumpEntry{channel[21].vFir.tSc});
        res.insert_or_assign("channel[21].vFir.phase", DumpEntry{channel[21].vFir.phase});
        res.insert_or_assign("channel[21].mmFir.m", DumpEntry{channel[21].mmFir.m});
        res.insert_or_assign("channel[21].mmFir.n", DumpEntry{channel[21].mmFir.n});
        res.insert_or_assign("channel[21].mmFir.s", DumpEntry{channel[21].mmFir.s});
        res.insert_or_assign("channel[21].mmFir.r", DumpEntry{channel[21].mmFir.r});
        res.insert_or_assign("channel[21].mmFir.tSc", DumpEntry{channel[21].mmFir.tSc});
        res.insert_or_assign("channel[21].mmFir.phase", DumpEntry{channel[21].mmFir.phase});
        res.insert_or_assign("channel[21].limit.maxLimit", DumpEntry{channel[21].limit.maxLimit});
        res.insert_or_assign("channel[21].limit.minLimit", DumpEntry{channel[21].limit.minLimit});
        res.insert_or_assign("channel[21].limit.filterLength", DumpEntry{channel[21].limit.filterLength});
        res.insert_or_assign("channel[22].rFir.m", DumpEntry{channel[22].rFir.m});
        res.insert_or_assign("channel[22].rFir.n", DumpEntry{channel[22].rFir.n});
        res.insert_or_assign("channel[22].rFir.s", DumpEntry{channel[22].rFir.s});
        res.insert_or_assign("channel[22].rFir.r", DumpEntry{channel[22].rFir.r});
        res.insert_or_assign("channel[22].rFir.tSc", DumpEntry{channel[22].rFir.tSc});
        res.insert_or_assign("channel[22].rFir.phase", DumpEntry{channel[22].rFir.phase});
        res.insert_or_assign("channel[22].vFir.m", DumpEntry{channel[22].vFir.m});
        res.insert_or_assign("channel[22].vFir.n", DumpEntry{channel[22].vFir.n});
        res.insert_or_assign("channel[22].vFir.s", DumpEntry{channel[22].vFir.s});
        res.insert_or_assign("channel[22].vFir.r", DumpEntry{channel[22].vFir.r});
        res.insert_or_assign("channel[22].vFir.tSc", DumpEntry{channel[22].vFir.tSc});
        res.insert_or_assign("channel[22].vFir.phase", DumpEntry{channel[22].vFir.phase});
        res.insert_or_assign("channel[22].mmFir.m", DumpEntry{channel[22].mmFir.m});
        res.insert_or_assign("channel[22].mmFir.n", DumpEntry{channel[22].mmFir.n});
        res.insert_or_assign("channel[22].mmFir.s", DumpEntry{channel[22].mmFir.s});
        res.insert_or_assign("channel[22].mmFir.r", DumpEntry{channel[22].mmFir.r});
        res.insert_or_assign("channel[22].mmFir.tSc", DumpEntry{channel[22].mmFir.tSc});
        res.insert_or_assign("channel[22].mmFir.phase", DumpEntry{channel[22].mmFir.phase});
        res.insert_or_assign("channel[22].limit.maxLimit", DumpEntry{channel[22].limit.maxLimit});
        res.insert_or_assign("channel[22].limit.minLimit", DumpEntry{channel[22].limit.minLimit});
        res.insert_or_assign("channel[22].limit.filterLength", DumpEntry{channel[22].limit.filterLength});
        res.insert_or_assign("channel[23].rFir.m", DumpEntry{channel[23].rFir.m});
        res.insert_or_assign("channel[23].rFir.n", DumpEntry{channel[23].rFir.n});
        res.insert_or_assign("channel[23].rFir.s", DumpEntry{channel[23].rFir.s});
        res.insert_or_assign("channel[23].rFir.r", DumpEntry{channel[23].rFir.r});
        res.insert_or_assign("channel[23].rFir.tSc", DumpEntry{channel[23].rFir.tSc});
        res.insert_or_assign("channel[23].rFir.phase", DumpEntry{channel[23].rFir.phase});
        res.insert_or_assign("channel[23].vFir.m", DumpEntry{channel[23].vFir.m});
        res.insert_or_assign("channel[23].vFir.n", DumpEntry{channel[23].vFir.n});
        res.insert_or_assign("channel[23].vFir.s", DumpEntry{channel[23].vFir.s});
        res.insert_or_assign("channel[23].vFir.r", DumpEntry{channel[23].vFir.r});
        res.insert_or_assign("channel[23].vFir.tSc", DumpEntry{channel[23].vFir.tSc});
        res.insert_or_assign("channel[23].vFir.phase", DumpEntry{channel[23].vFir.phase});
        res.insert_or_assign("channel[23].mmFir.m", DumpEntry{channel[23].mmFir.m});
        res.insert_or_assign("channel[23].mmFir.n", DumpEntry{channel[23].mmFir.n});
        res.insert_or_assign("channel[23].mmFir.s", DumpEntry{channel[23].mmFir.s});
        res.insert_or_assign("channel[23].mmFir.r", DumpEntry{channel[23].mmFir.r});
        res.insert_or_assign("channel[23].mmFir.tSc", DumpEntry{channel[23].mmFir.tSc});
        res.insert_or_assign("channel[23].mmFir.phase", DumpEntry{channel[23].mmFir.phase});
        res.insert_or_assign("channel[23].limit.maxLimit", DumpEntry{channel[23].limit.maxLimit});
        res.insert_or_assign("channel[23].limit.minLimit", DumpEntry{channel[23].limit.minLimit});
        res.insert_or_assign("channel[23].limit.filterLength", DumpEntry{channel[23].limit.filterLength});
        res.insert_or_assign("channel[24].rFir.m", DumpEntry{channel[24].rFir.m});
        res.insert_or_assign("channel[24].rFir.n", DumpEntry{channel[24].rFir.n});
        res.insert_or_assign("channel[24].rFir.s", DumpEntry{channel[24].rFir.s});
        res.insert_or_assign("channel[24].rFir.r", DumpEntry{channel[24].rFir.r});
        res.insert_or_assign("channel[24].rFir.tSc", DumpEntry{channel[24].rFir.tSc});
        res.insert_or_assign("channel[24].rFir.phase", DumpEntry{channel[24].rFir.phase});
        res.insert_or_assign("channel[24].vFir.m", DumpEntry{channel[24].vFir.m});
        res.insert_or_assign("channel[24].vFir.n", DumpEntry{channel[24].vFir.n});
        res.insert_or_assign("channel[24].vFir.s", DumpEntry{channel[24].vFir.s});
        res.insert_or_assign("channel[24].vFir.r", DumpEntry{channel[24].vFir.r});
        res.insert_or_assign("channel[24].vFir.tSc", DumpEntry{channel[24].vFir.tSc});
        res.insert_or_assign("channel[24].vFir.phase", DumpEntry{channel[24].vFir.phase});
        res.insert_or_assign("channel[24].mmFir.m", DumpEntry{channel[24].mmFir.m});
        res.insert_or_assign("channel[24].mmFir.n", DumpEntry{channel[24].mmFir.n});
        res.insert_or_assign("channel[24].mmFir.s", DumpEntry{channel[24].mmFir.s});
        res.insert_or_assign("channel[24].mmFir.r", DumpEntry{channel[24].mmFir.r});
        res.insert_or_assign("channel[24].mmFir.tSc", DumpEntry{channel[24].mmFir.tSc});
        res.insert_or_assign("channel[24].mmFir.phase", DumpEntry{channel[24].mmFir.phase});
        res.insert_or_assign("channel[24].limit.maxLimit", DumpEntry{channel[24].limit.maxLimit});
        res.insert_or_assign("channel[24].limit.minLimit", DumpEntry{channel[24].limit.minLimit});
        res.insert_or_assign("channel[24].limit.filterLength", DumpEntry{channel[24].limit.filterLength});
        res.insert_or_assign("channel[25].rFir.m", DumpEntry{channel[25].rFir.m});
        res.insert_or_assign("channel[25].rFir.n", DumpEntry{channel[25].rFir.n});
        res.insert_or_assign("channel[25].rFir.s", DumpEntry{channel[25].rFir.s});
        res.insert_or_assign("channel[25].rFir.r", DumpEntry{channel[25].rFir.r});
        res.insert_or_assign("channel[25].rFir.tSc", DumpEntry{channel[25].rFir.tSc});
        res.insert_or_assign("channel[25].rFir.phase", DumpEntry{channel[25].rFir.phase});
        res.insert_or_assign("channel[25].vFir.m", DumpEntry{channel[25].vFir.m});
        res.insert_or_assign("channel[25].vFir.n", DumpEntry{channel[25].vFir.n});
        res.insert_or_assign("channel[25].vFir.s", DumpEntry{channel[25].vFir.s});
        res.insert_or_assign("channel[25].vFir.r", DumpEntry{channel[25].vFir.r});
        res.insert_or_assign("channel[25].vFir.tSc", DumpEntry{channel[25].vFir.tSc});
        res.insert_or_assign("channel[25].vFir.phase", DumpEntry{channel[25].vFir.phase});
        res.insert_or_assign("channel[25].mmFir.m", DumpEntry{channel[25].mmFir.m});
        res.insert_or_assign("channel[25].mmFir.n", DumpEntry{channel[25].mmFir.n});
        res.insert_or_assign("channel[25].mmFir.s", DumpEntry{channel[25].mmFir.s});
        res.insert_or_assign("channel[25].mmFir.r", DumpEntry{channel[25].mmFir.r});
        res.insert_or_assign("channel[25].mmFir.tSc", DumpEntry{channel[25].mmFir.tSc});
        res.insert_or_assign("channel[25].mmFir.phase", DumpEntry{channel[25].mmFir.phase});
        res.insert_or_assign("channel[25].limit.maxLimit", DumpEntry{channel[25].limit.maxLimit});
        res.insert_or_assign("channel[25].limit.minLimit", DumpEntry{channel[25].limit.minLimit});
        res.insert_or_assign("channel[25].limit.filterLength", DumpEntry{channel[25].limit.filterLength});
        res.insert_or_assign("channel[26].rFir.m", DumpEntry{channel[26].rFir.m});
        res.insert_or_assign("channel[26].rFir.n", DumpEntry{channel[26].rFir.n});
        res.insert_or_assign("channel[26].rFir.s", DumpEntry{channel[26].rFir.s});
        res.insert_or_assign("channel[26].rFir.r", DumpEntry{channel[26].rFir.r});
        res.insert_or_assign("channel[26].rFir.tSc", DumpEntry{channel[26].rFir.tSc});
        res.insert_or_assign("channel[26].rFir.phase", DumpEntry{channel[26].rFir.phase});
        res.insert_or_assign("channel[26].vFir.m", DumpEntry{channel[26].vFir.m});
        res.insert_or_assign("channel[26].vFir.n", DumpEntry{channel[26].vFir.n});
        res.insert_or_assign("channel[26].vFir.s", DumpEntry{channel[26].vFir.s});
        res.insert_or_assign("channel[26].vFir.r", DumpEntry{channel[26].vFir.r});
        res.insert_or_assign("channel[26].vFir.tSc", DumpEntry{channel[26].vFir.tSc});
        res.insert_or_assign("channel[26].vFir.phase", DumpEntry{channel[26].vFir.phase});
        res.insert_or_assign("channel[26].mmFir.m", DumpEntry{channel[26].mmFir.m});
        res.insert_or_assign("channel[26].mmFir.n", DumpEntry{channel[26].mmFir.n});
        res.insert_or_assign("channel[26].mmFir.s", DumpEntry{channel[26].mmFir.s});
        res.insert_or_assign("channel[26].mmFir.r", DumpEntry{channel[26].mmFir.r});
        res.insert_or_assign("channel[26].mmFir.tSc", DumpEntry{channel[26].mmFir.tSc});
        res.insert_or_assign("channel[26].mmFir.phase", DumpEntry{channel[26].mmFir.phase});
        res.insert_or_assign("channel[26].limit.maxLimit", DumpEntry{channel[26].limit.maxLimit});
        res.insert_or_assign("channel[26].limit.minLimit", DumpEntry{channel[26].limit.minLimit});
        res.insert_or_assign("channel[26].limit.filterLength", DumpEntry{channel[26].limit.filterLength});
        res.insert_or_assign("channel[27].rFir.m", DumpEntry{channel[27].rFir.m});
        res.insert_or_assign("channel[27].rFir.n", DumpEntry{channel[27].rFir.n});
        res.insert_or_assign("channel[27].rFir.s", DumpEntry{channel[27].rFir.s});
        res.insert_or_assign("channel[27].rFir.r", DumpEntry{channel[27].rFir.r});
        res.insert_or_assign("channel[27].rFir.tSc", DumpEntry{channel[27].rFir.tSc});
        res.insert_or_assign("channel[27].rFir.phase", DumpEntry{channel[27].rFir.phase});
        res.insert_or_assign("channel[27].vFir.m", DumpEntry{channel[27].vFir.m});
        res.insert_or_assign("channel[27].vFir.n", DumpEntry{channel[27].vFir.n});
        res.insert_or_assign("channel[27].vFir.s", DumpEntry{channel[27].vFir.s});
        res.insert_or_assign("channel[27].vFir.r", DumpEntry{channel[27].vFir.r});
        res.insert_or_assign("channel[27].vFir.tSc", DumpEntry{channel[27].vFir.tSc});
        res.insert_or_assign("channel[27].vFir.phase", DumpEntry{channel[27].vFir.phase});
        res.insert_or_assign("channel[27].mmFir.m", DumpEntry{channel[27].mmFir.m});
        res.insert_or_assign("channel[27].mmFir.n", DumpEntry{channel[27].mmFir.n});
        res.insert_or_assign("channel[27].mmFir.s", DumpEntry{channel[27].mmFir.s});
        res.insert_or_assign("channel[27].mmFir.r", DumpEntry{channel[27].mmFir.r});
        res.insert_or_assign("channel[27].mmFir.tSc", DumpEntry{channel[27].mmFir.tSc});
        res.insert_or_assign("channel[27].mmFir.phase", DumpEntry{channel[27].mmFir.phase});
        res.insert_or_assign("channel[27].limit.maxLimit", DumpEntry{channel[27].limit.maxLimit});
        res.insert_or_assign("channel[27].limit.minLimit", DumpEntry{channel[27].limit.minLimit});
        res.insert_or_assign("channel[27].limit.filterLength", DumpEntry{channel[27].limit.filterLength});
        res.insert_or_assign("channel[28].rFir.m", DumpEntry{channel[28].rFir.m});
        res.insert_or_assign("channel[28].rFir.n", DumpEntry{channel[28].rFir.n});
        res.insert_or_assign("channel[28].rFir.s", DumpEntry{channel[28].rFir.s});
        res.insert_or_assign("channel[28].rFir.r", DumpEntry{channel[28].rFir.r});
        res.insert_or_assign("channel[28].rFir.tSc", DumpEntry{channel[28].rFir.tSc});
        res.insert_or_assign("channel[28].rFir.phase", DumpEntry{channel[28].rFir.phase});
        res.insert_or_assign("channel[28].vFir.m", DumpEntry{channel[28].vFir.m});
        res.insert_or_assign("channel[28].vFir.n", DumpEntry{channel[28].vFir.n});
        res.insert_or_assign("channel[28].vFir.s", DumpEntry{channel[28].vFir.s});
        res.insert_or_assign("channel[28].vFir.r", DumpEntry{channel[28].vFir.r});
        res.insert_or_assign("channel[28].vFir.tSc", DumpEntry{channel[28].vFir.tSc});
        res.insert_or_assign("channel[28].vFir.phase", DumpEntry{channel[28].vFir.phase});
        res.insert_or_assign("channel[28].mmFir.m", DumpEntry{channel[28].mmFir.m});
        res.insert_or_assign("channel[28].mmFir.n", DumpEntry{channel[28].mmFir.n});
        res.insert_or_assign("channel[28].mmFir.s", DumpEntry{channel[28].mmFir.s});
        res.insert_or_assign("channel[28].mmFir.r", DumpEntry{channel[28].mmFir.r});
        res.insert_or_assign("channel[28].mmFir.tSc", DumpEntry{channel[28].mmFir.tSc});
        res.insert_or_assign("channel[28].mmFir.phase", DumpEntry{channel[28].mmFir.phase});
        res.insert_or_assign("channel[28].limit.maxLimit", DumpEntry{channel[28].limit.maxLimit});
        res.insert_or_assign("channel[28].limit.minLimit", DumpEntry{channel[28].limit.minLimit});
        res.insert_or_assign("channel[28].limit.filterLength", DumpEntry{channel[28].limit.filterLength});
        res.insert_or_assign("channel[29].rFir.m", DumpEntry{channel[29].rFir.m});
        res.insert_or_assign("channel[29].rFir.n", DumpEntry{channel[29].rFir.n});
        res.insert_or_assign("channel[29].rFir.s", DumpEntry{channel[29].rFir.s});
        res.insert_or_assign("channel[29].rFir.r", DumpEntry{channel[29].rFir.r});
        res.insert_or_assign("channel[29].rFir.tSc", DumpEntry{channel[29].rFir.tSc});
        res.insert_or_assign("channel[29].rFir.phase", DumpEntry{channel[29].rFir.phase});
        res.insert_or_assign("channel[29].vFir.m", DumpEntry{channel[29].vFir.m});
        res.insert_or_assign("channel[29].vFir.n", DumpEntry{channel[29].vFir.n});
        res.insert_or_assign("channel[29].vFir.s", DumpEntry{channel[29].vFir.s});
        res.insert_or_assign("channel[29].vFir.r", DumpEntry{channel[29].vFir.r});
        res.insert_or_assign("channel[29].vFir.tSc", DumpEntry{channel[29].vFir.tSc});
        res.insert_or_assign("channel[29].vFir.phase", DumpEntry{channel[29].vFir.phase});
        res.insert_or_assign("channel[29].mmFir.m", DumpEntry{channel[29].mmFir.m});
        res.insert_or_assign("channel[29].mmFir.n", DumpEntry{channel[29].mmFir.n});
        res.insert_or_assign("channel[29].mmFir.s", DumpEntry{channel[29].mmFir.s});
        res.insert_or_assign("channel[29].mmFir.r", DumpEntry{channel[29].mmFir.r});
        res.insert_or_assign("channel[29].mmFir.tSc", DumpEntry{channel[29].mmFir.tSc});
        res.insert_or_assign("channel[29].mmFir.phase", DumpEntry{channel[29].mmFir.phase});
        res.insert_or_assign("channel[29].limit.maxLimit", DumpEntry{channel[29].limit.maxLimit});
        res.insert_or_assign("channel[29].limit.minLimit", DumpEntry{channel[29].limit.minLimit});
        res.insert_or_assign("channel[29].limit.filterLength", DumpEntry{channel[29].limit.filterLength});
        res.insert_or_assign("channel[30].rFir.m", DumpEntry{channel[30].rFir.m});
        res.insert_or_assign("channel[30].rFir.n", DumpEntry{channel[30].rFir.n});
        res.insert_or_assign("channel[30].rFir.s", DumpEntry{channel[30].rFir.s});
        res.insert_or_assign("channel[30].rFir.r", DumpEntry{channel[30].rFir.r});
        res.insert_or_assign("channel[30].rFir.tSc", DumpEntry{channel[30].rFir.tSc});
        res.insert_or_assign("channel[30].rFir.phase", DumpEntry{channel[30].rFir.phase});
        res.insert_or_assign("channel[30].vFir.m", DumpEntry{channel[30].vFir.m});
        res.insert_or_assign("channel[30].vFir.n", DumpEntry{channel[30].vFir.n});
        res.insert_or_assign("channel[30].vFir.s", DumpEntry{channel[30].vFir.s});
        res.insert_or_assign("channel[30].vFir.r", DumpEntry{channel[30].vFir.r});
        res.insert_or_assign("channel[30].vFir.tSc", DumpEntry{channel[30].vFir.tSc});
        res.insert_or_assign("channel[30].vFir.phase", DumpEntry{channel[30].vFir.phase});
        res.insert_or_assign("channel[30].mmFir.m", DumpEntry{channel[30].mmFir.m});
        res.insert_or_assign("channel[30].mmFir.n", DumpEntry{channel[30].mmFir.n});
        res.insert_or_assign("channel[30].mmFir.s", DumpEntry{channel[30].mmFir.s});
        res.insert_or_assign("channel[30].mmFir.r", DumpEntry{channel[30].mmFir.r});
        res.insert_or_assign("channel[30].mmFir.tSc", DumpEntry{channel[30].mmFir.tSc});
        res.insert_or_assign("channel[30].mmFir.phase", DumpEntry{channel[30].mmFir.phase});
        res.insert_or_assign("channel[30].limit.maxLimit", DumpEntry{channel[30].limit.maxLimit});
        res.insert_or_assign("channel[30].limit.minLimit", DumpEntry{channel[30].limit.minLimit});
        res.insert_or_assign("channel[30].limit.filterLength", DumpEntry{channel[30].limit.filterLength});
        res.insert_or_assign("channel[31].rFir.m", DumpEntry{channel[31].rFir.m});
        res.insert_or_assign("channel[31].rFir.n", DumpEntry{channel[31].rFir.n});
        res.insert_or_assign("channel[31].rFir.s", DumpEntry{channel[31].rFir.s});
        res.insert_or_assign("channel[31].rFir.r", DumpEntry{channel[31].rFir.r});
        res.insert_or_assign("channel[31].rFir.tSc", DumpEntry{channel[31].rFir.tSc});
        res.insert_or_assign("channel[31].rFir.phase", DumpEntry{channel[31].rFir.phase});
        res.insert_or_assign("channel[31].vFir.m", DumpEntry{channel[31].vFir.m});
        res.insert_or_assign("channel[31].vFir.n", DumpEntry{channel[31].vFir.n});
        res.insert_or_assign("channel[31].vFir.s", DumpEntry{channel[31].vFir.s});
        res.insert_or_assign("channel[31].vFir.r", DumpEntry{channel[31].vFir.r});
        res.insert_or_assign("channel[31].vFir.tSc", DumpEntry{channel[31].vFir.tSc});
        res.insert_or_assign("channel[31].vFir.phase", DumpEntry{channel[31].vFir.phase});
        res.insert_or_assign("channel[31].mmFir.m", DumpEntry{channel[31].mmFir.m});
        res.insert_or_assign("channel[31].mmFir.n", DumpEntry{channel[31].mmFir.n});
        res.insert_or_assign("channel[31].mmFir.s", DumpEntry{channel[31].mmFir.s});
        res.insert_or_assign("channel[31].mmFir.r", DumpEntry{channel[31].mmFir.r});
        res.insert_or_assign("channel[31].mmFir.tSc", DumpEntry{channel[31].mmFir.tSc});
        res.insert_or_assign("channel[31].mmFir.phase", DumpEntry{channel[31].mmFir.phase});
        res.insert_or_assign("channel[31].limit.maxLimit", DumpEntry{channel[31].limit.maxLimit});
        res.insert_or_assign("channel[31].limit.minLimit", DumpEntry{channel[31].limit.minLimit});
        res.insert_or_assign("channel[31].limit.filterLength", DumpEntry{channel[31].limit.filterLength});
        res.insert_or_assign("channel[32].rFir.m", DumpEntry{channel[32].rFir.m});
        res.insert_or_assign("channel[32].rFir.n", DumpEntry{channel[32].rFir.n});
        res.insert_or_assign("channel[32].rFir.s", DumpEntry{channel[32].rFir.s});
        res.insert_or_assign("channel[32].rFir.r", DumpEntry{channel[32].rFir.r});
        res.insert_or_assign("channel[32].rFir.tSc", DumpEntry{channel[32].rFir.tSc});
        res.insert_or_assign("channel[32].rFir.phase", DumpEntry{channel[32].rFir.phase});
        res.insert_or_assign("channel[32].vFir.m", DumpEntry{channel[32].vFir.m});
        res.insert_or_assign("channel[32].vFir.n", DumpEntry{channel[32].vFir.n});
        res.insert_or_assign("channel[32].vFir.s", DumpEntry{channel[32].vFir.s});
        res.insert_or_assign("channel[32].vFir.r", DumpEntry{channel[32].vFir.r});
        res.insert_or_assign("channel[32].vFir.tSc", DumpEntry{channel[32].vFir.tSc});
        res.insert_or_assign("channel[32].vFir.phase", DumpEntry{channel[32].vFir.phase});
        res.insert_or_assign("channel[32].mmFir.m", DumpEntry{channel[32].mmFir.m});
        res.insert_or_assign("channel[32].mmFir.n", DumpEntry{channel[32].mmFir.n});
        res.insert_or_assign("channel[32].mmFir.s", DumpEntry{channel[32].mmFir.s});
        res.insert_or_assign("channel[32].mmFir.r", DumpEntry{channel[32].mmFir.r});
        res.insert_or_assign("channel[32].mmFir.tSc", DumpEntry{channel[32].mmFir.tSc});
        res.insert_or_assign("channel[32].mmFir.phase", DumpEntry{channel[32].mmFir.phase});
        res.insert_or_assign("channel[32].limit.maxLimit", DumpEntry{channel[32].limit.maxLimit});
        res.insert_or_assign("channel[32].limit.minLimit", DumpEntry{channel[32].limit.minLimit});
        res.insert_or_assign("channel[32].limit.filterLength", DumpEntry{channel[32].limit.filterLength});
        res.insert_or_assign("channel[33].rFir.m", DumpEntry{channel[33].rFir.m});
        res.insert_or_assign("channel[33].rFir.n", DumpEntry{channel[33].rFir.n});
        res.insert_or_assign("channel[33].rFir.s", DumpEntry{channel[33].rFir.s});
        res.insert_or_assign("channel[33].rFir.r", DumpEntry{channel[33].rFir.r});
        res.insert_or_assign("channel[33].rFir.tSc", DumpEntry{channel[33].rFir.tSc});
        res.insert_or_assign("channel[33].rFir.phase", DumpEntry{channel[33].rFir.phase});
        res.insert_or_assign("channel[33].vFir.m", DumpEntry{channel[33].vFir.m});
        res.insert_or_assign("channel[33].vFir.n", DumpEntry{channel[33].vFir.n});
        res.insert_or_assign("channel[33].vFir.s", DumpEntry{channel[33].vFir.s});
        res.insert_or_assign("channel[33].vFir.r", DumpEntry{channel[33].vFir.r});
        res.insert_or_assign("channel[33].vFir.tSc", DumpEntry{channel[33].vFir.tSc});
        res.insert_or_assign("channel[33].vFir.phase", DumpEntry{channel[33].vFir.phase});
        res.insert_or_assign("channel[33].mmFir.m", DumpEntry{channel[33].mmFir.m});
        res.insert_or_assign("channel[33].mmFir.n", DumpEntry{channel[33].mmFir.n});
        res.insert_or_assign("channel[33].mmFir.s", DumpEntry{channel[33].mmFir.s});
        res.insert_or_assign("channel[33].mmFir.r", DumpEntry{channel[33].mmFir.r});
        res.insert_or_assign("channel[33].mmFir.tSc", DumpEntry{channel[33].mmFir.tSc});
        res.insert_or_assign("channel[33].mmFir.phase", DumpEntry{channel[33].mmFir.phase});
        res.insert_or_assign("channel[33].limit.maxLimit", DumpEntry{channel[33].limit.maxLimit});
        res.insert_or_assign("channel[33].limit.minLimit", DumpEntry{channel[33].limit.minLimit});
        res.insert_or_assign("channel[33].limit.filterLength", DumpEntry{channel[33].limit.filterLength});
        res.insert_or_assign("channel[34].rFir.m", DumpEntry{channel[34].rFir.m});
        res.insert_or_assign("channel[34].rFir.n", DumpEntry{channel[34].rFir.n});
        res.insert_or_assign("channel[34].rFir.s", DumpEntry{channel[34].rFir.s});
        res.insert_or_assign("channel[34].rFir.r", DumpEntry{channel[34].rFir.r});
        res.insert_or_assign("channel[34].rFir.tSc", DumpEntry{channel[34].rFir.tSc});
        res.insert_or_assign("channel[34].rFir.phase", DumpEntry{channel[34].rFir.phase});
        res.insert_or_assign("channel[34].vFir.m", DumpEntry{channel[34].vFir.m});
        res.insert_or_assign("channel[34].vFir.n", DumpEntry{channel[34].vFir.n});
        res.insert_or_assign("channel[34].vFir.s", DumpEntry{channel[34].vFir.s});
        res.insert_or_assign("channel[34].vFir.r", DumpEntry{channel[34].vFir.r});
        res.insert_or_assign("channel[34].vFir.tSc", DumpEntry{channel[34].vFir.tSc});
        res.insert_or_assign("channel[34].vFir.phase", DumpEntry{channel[34].vFir.phase});
        res.insert_or_assign("channel[34].mmFir.m", DumpEntry{channel[34].mmFir.m});
        res.insert_or_assign("channel[34].mmFir.n", DumpEntry{channel[34].mmFir.n});
        res.insert_or_assign("channel[34].mmFir.s", DumpEntry{channel[34].mmFir.s});
        res.insert_or_assign("channel[34].mmFir.r", DumpEntry{channel[34].mmFir.r});
        res.insert_or_assign("channel[34].mmFir.tSc", DumpEntry{channel[34].mmFir.tSc});
        res.insert_or_assign("channel[34].mmFir.phase", DumpEntry{channel[34].mmFir.phase});
        res.insert_or_assign("channel[34].limit.maxLimit", DumpEntry{channel[34].limit.maxLimit});
        res.insert_or_assign("channel[34].limit.minLimit", DumpEntry{channel[34].limit.minLimit});
        res.insert_or_assign("channel[34].limit.filterLength", DumpEntry{channel[34].limit.filterLength});
        res.insert_or_assign("channel[35].rFir.m", DumpEntry{channel[35].rFir.m});
        res.insert_or_assign("channel[35].rFir.n", DumpEntry{channel[35].rFir.n});
        res.insert_or_assign("channel[35].rFir.s", DumpEntry{channel[35].rFir.s});
        res.insert_or_assign("channel[35].rFir.r", DumpEntry{channel[35].rFir.r});
        res.insert_or_assign("channel[35].rFir.tSc", DumpEntry{channel[35].rFir.tSc});
        res.insert_or_assign("channel[35].rFir.phase", DumpEntry{channel[35].rFir.phase});
        res.insert_or_assign("channel[35].vFir.m", DumpEntry{channel[35].vFir.m});
        res.insert_or_assign("channel[35].vFir.n", DumpEntry{channel[35].vFir.n});
        res.insert_or_assign("channel[35].vFir.s", DumpEntry{channel[35].vFir.s});
        res.insert_or_assign("channel[35].vFir.r", DumpEntry{channel[35].vFir.r});
        res.insert_or_assign("channel[35].vFir.tSc", DumpEntry{channel[35].vFir.tSc});
        res.insert_or_assign("channel[35].vFir.phase", DumpEntry{channel[35].vFir.phase});
        res.insert_or_assign("channel[35].mmFir.m", DumpEntry{channel[35].mmFir.m});
        res.insert_or_assign("channel[35].mmFir.n", DumpEntry{channel[35].mmFir.n});
        res.insert_or_assign("channel[35].mmFir.s", DumpEntry{channel[35].mmFir.s});
        res.insert_or_assign("channel[35].mmFir.r", DumpEntry{channel[35].mmFir.r});
        res.insert_or_assign("channel[35].mmFir.tSc", DumpEntry{channel[35].mmFir.tSc});
        res.insert_or_assign("channel[35].mmFir.phase", DumpEntry{channel[35].mmFir.phase});
        res.insert_or_assign("channel[35].limit.maxLimit", DumpEntry{channel[35].limit.maxLimit});
        res.insert_or_assign("channel[35].limit.minLimit", DumpEntry{channel[35].limit.minLimit});
        res.insert_or_assign("channel[35].limit.filterLength", DumpEntry{channel[35].limit.filterLength});
        res.insert_or_assign("channel[36].rFir.m", DumpEntry{channel[36].rFir.m});
        res.insert_or_assign("channel[36].rFir.n", DumpEntry{channel[36].rFir.n});
        res.insert_or_assign("channel[36].rFir.s", DumpEntry{channel[36].rFir.s});
        res.insert_or_assign("channel[36].rFir.r", DumpEntry{channel[36].rFir.r});
        res.insert_or_assign("channel[36].rFir.tSc", DumpEntry{channel[36].rFir.tSc});
        res.insert_or_assign("channel[36].rFir.phase", DumpEntry{channel[36].rFir.phase});
        res.insert_or_assign("channel[36].vFir.m", DumpEntry{channel[36].vFir.m});
        res.insert_or_assign("channel[36].vFir.n", DumpEntry{channel[36].vFir.n});
        res.insert_or_assign("channel[36].vFir.s", DumpEntry{channel[36].vFir.s});
        res.insert_or_assign("channel[36].vFir.r", DumpEntry{channel[36].vFir.r});
        res.insert_or_assign("channel[36].vFir.tSc", DumpEntry{channel[36].vFir.tSc});
        res.insert_or_assign("channel[36].vFir.phase", DumpEntry{channel[36].vFir.phase});
        res.insert_or_assign("channel[36].mmFir.m", DumpEntry{channel[36].mmFir.m});
        res.insert_or_assign("channel[36].mmFir.n", DumpEntry{channel[36].mmFir.n});
        res.insert_or_assign("channel[36].mmFir.s", DumpEntry{channel[36].mmFir.s});
        res.insert_or_assign("channel[36].mmFir.r", DumpEntry{channel[36].mmFir.r});
        res.insert_or_assign("channel[36].mmFir.tSc", DumpEntry{channel[36].mmFir.tSc});
        res.insert_or_assign("channel[36].mmFir.phase", DumpEntry{channel[36].mmFir.phase});
        res.insert_or_assign("channel[36].limit.maxLimit", DumpEntry{channel[36].limit.maxLimit});
        res.insert_or_assign("channel[36].limit.minLimit", DumpEntry{channel[36].limit.minLimit});
        res.insert_or_assign("channel[36].limit.filterLength", DumpEntry{channel[36].limit.filterLength});
        res.insert_or_assign("channel[37].rFir.m", DumpEntry{channel[37].rFir.m});
        res.insert_or_assign("channel[37].rFir.n", DumpEntry{channel[37].rFir.n});
        res.insert_or_assign("channel[37].rFir.s", DumpEntry{channel[37].rFir.s});
        res.insert_or_assign("channel[37].rFir.r", DumpEntry{channel[37].rFir.r});
        res.insert_or_assign("channel[37].rFir.tSc", DumpEntry{channel[37].rFir.tSc});
        res.insert_or_assign("channel[37].rFir.phase", DumpEntry{channel[37].rFir.phase});
        res.insert_or_assign("channel[37].vFir.m", DumpEntry{channel[37].vFir.m});
        res.insert_or_assign("channel[37].vFir.n", DumpEntry{channel[37].vFir.n});
        res.insert_or_assign("channel[37].vFir.s", DumpEntry{channel[37].vFir.s});
        res.insert_or_assign("channel[37].vFir.r", DumpEntry{channel[37].vFir.r});
        res.insert_or_assign("channel[37].vFir.tSc", DumpEntry{channel[37].vFir.tSc});
        res.insert_or_assign("channel[37].vFir.phase", DumpEntry{channel[37].vFir.phase});
        res.insert_or_assign("channel[37].mmFir.m", DumpEntry{channel[37].mmFir.m});
        res.insert_or_assign("channel[37].mmFir.n", DumpEntry{channel[37].mmFir.n});
        res.insert_or_assign("channel[37].mmFir.s", DumpEntry{channel[37].mmFir.s});
        res.insert_or_assign("channel[37].mmFir.r", DumpEntry{channel[37].mmFir.r});
        res.insert_or_assign("channel[37].mmFir.tSc", DumpEntry{channel[37].mmFir.tSc});
        res.insert_or_assign("channel[37].mmFir.phase", DumpEntry{channel[37].mmFir.phase});
        res.insert_or_assign("channel[37].limit.maxLimit", DumpEntry{channel[37].limit.maxLimit});
        res.insert_or_assign("channel[37].limit.minLimit", DumpEntry{channel[37].limit.minLimit});
        res.insert_or_assign("channel[37].limit.filterLength", DumpEntry{channel[37].limit.filterLength});
        res.insert_or_assign("channel[38].rFir.m", DumpEntry{channel[38].rFir.m});
        res.insert_or_assign("channel[38].rFir.n", DumpEntry{channel[38].rFir.n});
        res.insert_or_assign("channel[38].rFir.s", DumpEntry{channel[38].rFir.s});
        res.insert_or_assign("channel[38].rFir.r", DumpEntry{channel[38].rFir.r});
        res.insert_or_assign("channel[38].rFir.tSc", DumpEntry{channel[38].rFir.tSc});
        res.insert_or_assign("channel[38].rFir.phase", DumpEntry{channel[38].rFir.phase});
        res.insert_or_assign("channel[38].vFir.m", DumpEntry{channel[38].vFir.m});
        res.insert_or_assign("channel[38].vFir.n", DumpEntry{channel[38].vFir.n});
        res.insert_or_assign("channel[38].vFir.s", DumpEntry{channel[38].vFir.s});
        res.insert_or_assign("channel[38].vFir.r", DumpEntry{channel[38].vFir.r});
        res.insert_or_assign("channel[38].vFir.tSc", DumpEntry{channel[38].vFir.tSc});
        res.insert_or_assign("channel[38].vFir.phase", DumpEntry{channel[38].vFir.phase});
        res.insert_or_assign("channel[38].mmFir.m", DumpEntry{channel[38].mmFir.m});
        res.insert_or_assign("channel[38].mmFir.n", DumpEntry{channel[38].mmFir.n});
        res.insert_or_assign("channel[38].mmFir.s", DumpEntry{channel[38].mmFir.s});
        res.insert_or_assign("channel[38].mmFir.r", DumpEntry{channel[38].mmFir.r});
        res.insert_or_assign("channel[38].mmFir.tSc", DumpEntry{channel[38].mmFir.tSc});
        res.insert_or_assign("channel[38].mmFir.phase", DumpEntry{channel[38].mmFir.phase});
        res.insert_or_assign("channel[38].limit.maxLimit", DumpEntry{channel[38].limit.maxLimit});
        res.insert_or_assign("channel[38].limit.minLimit", DumpEntry{channel[38].limit.minLimit});
        res.insert_or_assign("channel[38].limit.filterLength", DumpEntry{channel[38].limit.filterLength});
        res.insert_or_assign("channel[39].rFir.m", DumpEntry{channel[39].rFir.m});
        res.insert_or_assign("channel[39].rFir.n", DumpEntry{channel[39].rFir.n});
        res.insert_or_assign("channel[39].rFir.s", DumpEntry{channel[39].rFir.s});
        res.insert_or_assign("channel[39].rFir.r", DumpEntry{channel[39].rFir.r});
        res.insert_or_assign("channel[39].rFir.tSc", DumpEntry{channel[39].rFir.tSc});
        res.insert_or_assign("channel[39].rFir.phase", DumpEntry{channel[39].rFir.phase});
        res.insert_or_assign("channel[39].vFir.m", DumpEntry{channel[39].vFir.m});
        res.insert_or_assign("channel[39].vFir.n", DumpEntry{channel[39].vFir.n});
        res.insert_or_assign("channel[39].vFir.s", DumpEntry{channel[39].vFir.s});
        res.insert_or_assign("channel[39].vFir.r", DumpEntry{channel[39].vFir.r});
        res.insert_or_assign("channel[39].vFir.tSc", DumpEntry{channel[39].vFir.tSc});
        res.insert_or_assign("channel[39].vFir.phase", DumpEntry{channel[39].vFir.phase});
        res.insert_or_assign("channel[39].mmFir.m", DumpEntry{channel[39].mmFir.m});
        res.insert_or_assign("channel[39].mmFir.n", DumpEntry{channel[39].mmFir.n});
        res.insert_or_assign("channel[39].mmFir.s", DumpEntry{channel[39].mmFir.s});
        res.insert_or_assign("channel[39].mmFir.r", DumpEntry{channel[39].mmFir.r});
        res.insert_or_assign("channel[39].mmFir.tSc", DumpEntry{channel[39].mmFir.tSc});
        res.insert_or_assign("channel[39].mmFir.phase", DumpEntry{channel[39].mmFir.phase});
        res.insert_or_assign("channel[39].limit.maxLimit", DumpEntry{channel[39].limit.maxLimit});
        res.insert_or_assign("channel[39].limit.minLimit", DumpEntry{channel[39].limit.minLimit});
        res.insert_or_assign("channel[39].limit.filterLength", DumpEntry{channel[39].limit.filterLength});
        res.insert_or_assign("channel[40].rFir.m", DumpEntry{channel[40].rFir.m});
        res.insert_or_assign("channel[40].rFir.n", DumpEntry{channel[40].rFir.n});
        res.insert_or_assign("channel[40].rFir.s", DumpEntry{channel[40].rFir.s});
        res.insert_or_assign("channel[40].rFir.r", DumpEntry{channel[40].rFir.r});
        res.insert_or_assign("channel[40].rFir.tSc", DumpEntry{channel[40].rFir.tSc});
        res.insert_or_assign("channel[40].rFir.phase", DumpEntry{channel[40].rFir.phase});
        res.insert_or_assign("channel[40].vFir.m", DumpEntry{channel[40].vFir.m});
        res.insert_or_assign("channel[40].vFir.n", DumpEntry{channel[40].vFir.n});
        res.insert_or_assign("channel[40].vFir.s", DumpEntry{channel[40].vFir.s});
        res.insert_or_assign("channel[40].vFir.r", DumpEntry{channel[40].vFir.r});
        res.insert_or_assign("channel[40].vFir.tSc", DumpEntry{channel[40].vFir.tSc});
        res.insert_or_assign("channel[40].vFir.phase", DumpEntry{channel[40].vFir.phase});
        res.insert_or_assign("channel[40].mmFir.m", DumpEntry{channel[40].mmFir.m});
        res.insert_or_assign("channel[40].mmFir.n", DumpEntry{channel[40].mmFir.n});
        res.insert_or_assign("channel[40].mmFir.s", DumpEntry{channel[40].mmFir.s});
        res.insert_or_assign("channel[40].mmFir.r", DumpEntry{channel[40].mmFir.r});
        res.insert_or_assign("channel[40].mmFir.tSc", DumpEntry{channel[40].mmFir.tSc});
        res.insert_or_assign("channel[40].mmFir.phase", DumpEntry{channel[40].mmFir.phase});
        res.insert_or_assign("channel[40].limit.maxLimit", DumpEntry{channel[40].limit.maxLimit});
        res.insert_or_assign("channel[40].limit.minLimit", DumpEntry{channel[40].limit.minLimit});
        res.insert_or_assign("channel[40].limit.filterLength", DumpEntry{channel[40].limit.filterLength});
        res.insert_or_assign("channel[41].rFir.m", DumpEntry{channel[41].rFir.m});
        res.insert_or_assign("channel[41].rFir.n", DumpEntry{channel[41].rFir.n});
        res.insert_or_assign("channel[41].rFir.s", DumpEntry{channel[41].rFir.s});
        res.insert_or_assign("channel[41].rFir.r", DumpEntry{channel[41].rFir.r});
        res.insert_or_assign("channel[41].rFir.tSc", DumpEntry{channel[41].rFir.tSc});
        res.insert_or_assign("channel[41].rFir.phase", DumpEntry{channel[41].rFir.phase});
        res.insert_or_assign("channel[41].vFir.m", DumpEntry{channel[41].vFir.m});
        res.insert_or_assign("channel[41].vFir.n", DumpEntry{channel[41].vFir.n});
        res.insert_or_assign("channel[41].vFir.s", DumpEntry{channel[41].vFir.s});
        res.insert_or_assign("channel[41].vFir.r", DumpEntry{channel[41].vFir.r});
        res.insert_or_assign("channel[41].vFir.tSc", DumpEntry{channel[41].vFir.tSc});
        res.insert_or_assign("channel[41].vFir.phase", DumpEntry{channel[41].vFir.phase});
        res.insert_or_assign("channel[41].mmFir.m", DumpEntry{channel[41].mmFir.m});
        res.insert_or_assign("channel[41].mmFir.n", DumpEntry{channel[41].mmFir.n});
        res.insert_or_assign("channel[41].mmFir.s", DumpEntry{channel[41].mmFir.s});
        res.insert_or_assign("channel[41].mmFir.r", DumpEntry{channel[41].mmFir.r});
        res.insert_or_assign("channel[41].mmFir.tSc", DumpEntry{channel[41].mmFir.tSc});
        res.insert_or_assign("channel[41].mmFir.phase", DumpEntry{channel[41].mmFir.phase});
        res.insert_or_assign("channel[41].limit.maxLimit", DumpEntry{channel[41].limit.maxLimit});
        res.insert_or_assign("channel[41].limit.minLimit", DumpEntry{channel[41].limit.minLimit});
        res.insert_or_assign("channel[41].limit.filterLength", DumpEntry{channel[41].limit.filterLength});
        res.insert_or_assign("channel[42].rFir.m", DumpEntry{channel[42].rFir.m});
        res.insert_or_assign("channel[42].rFir.n", DumpEntry{channel[42].rFir.n});
        res.insert_or_assign("channel[42].rFir.s", DumpEntry{channel[42].rFir.s});
        res.insert_or_assign("channel[42].rFir.r", DumpEntry{channel[42].rFir.r});
        res.insert_or_assign("channel[42].rFir.tSc", DumpEntry{channel[42].rFir.tSc});
        res.insert_or_assign("channel[42].rFir.phase", DumpEntry{channel[42].rFir.phase});
        res.insert_or_assign("channel[42].vFir.m", DumpEntry{channel[42].vFir.m});
        res.insert_or_assign("channel[42].vFir.n", DumpEntry{channel[42].vFir.n});
        res.insert_or_assign("channel[42].vFir.s", DumpEntry{channel[42].vFir.s});
        res.insert_or_assign("channel[42].vFir.r", DumpEntry{channel[42].vFir.r});
        res.insert_or_assign("channel[42].vFir.tSc", DumpEntry{channel[42].vFir.tSc});
        res.insert_or_assign("channel[42].vFir.phase", DumpEntry{channel[42].vFir.phase});
        res.insert_or_assign("channel[42].mmFir.m", DumpEntry{channel[42].mmFir.m});
        res.insert_or_assign("channel[42].mmFir.n", DumpEntry{channel[42].mmFir.n});
        res.insert_or_assign("channel[42].mmFir.s", DumpEntry{channel[42].mmFir.s});
        res.insert_or_assign("channel[42].mmFir.r", DumpEntry{channel[42].mmFir.r});
        res.insert_or_assign("channel[42].mmFir.tSc", DumpEntry{channel[42].mmFir.tSc});
        res.insert_or_assign("channel[42].mmFir.phase", DumpEntry{channel[42].mmFir.phase});
        res.insert_or_assign("channel[42].limit.maxLimit", DumpEntry{channel[42].limit.maxLimit});
        res.insert_or_assign("channel[42].limit.minLimit", DumpEntry{channel[42].limit.minLimit});
        res.insert_or_assign("channel[42].limit.filterLength", DumpEntry{channel[42].limit.filterLength});
        res.insert_or_assign("channel[43].rFir.m", DumpEntry{channel[43].rFir.m});
        res.insert_or_assign("channel[43].rFir.n", DumpEntry{channel[43].rFir.n});
        res.insert_or_assign("channel[43].rFir.s", DumpEntry{channel[43].rFir.s});
        res.insert_or_assign("channel[43].rFir.r", DumpEntry{channel[43].rFir.r});
        res.insert_or_assign("channel[43].rFir.tSc", DumpEntry{channel[43].rFir.tSc});
        res.insert_or_assign("channel[43].rFir.phase", DumpEntry{channel[43].rFir.phase});
        res.insert_or_assign("channel[43].vFir.m", DumpEntry{channel[43].vFir.m});
        res.insert_or_assign("channel[43].vFir.n", DumpEntry{channel[43].vFir.n});
        res.insert_or_assign("channel[43].vFir.s", DumpEntry{channel[43].vFir.s});
        res.insert_or_assign("channel[43].vFir.r", DumpEntry{channel[43].vFir.r});
        res.insert_or_assign("channel[43].vFir.tSc", DumpEntry{channel[43].vFir.tSc});
        res.insert_or_assign("channel[43].vFir.phase", DumpEntry{channel[43].vFir.phase});
        res.insert_or_assign("channel[43].mmFir.m", DumpEntry{channel[43].mmFir.m});
        res.insert_or_assign("channel[43].mmFir.n", DumpEntry{channel[43].mmFir.n});
        res.insert_or_assign("channel[43].mmFir.s", DumpEntry{channel[43].mmFir.s});
        res.insert_or_assign("channel[43].mmFir.r", DumpEntry{channel[43].mmFir.r});
        res.insert_or_assign("channel[43].mmFir.tSc", DumpEntry{channel[43].mmFir.tSc});
        res.insert_or_assign("channel[43].mmFir.phase", DumpEntry{channel[43].mmFir.phase});
        res.insert_or_assign("channel[43].limit.maxLimit", DumpEntry{channel[43].limit.maxLimit});
        res.insert_or_assign("channel[43].limit.minLimit", DumpEntry{channel[43].limit.minLimit});
        res.insert_or_assign("channel[43].limit.filterLength", DumpEntry{channel[43].limit.filterLength});
        res.insert_or_assign("channel[44].rFir.m", DumpEntry{channel[44].rFir.m});
        res.insert_or_assign("channel[44].rFir.n", DumpEntry{channel[44].rFir.n});
        res.insert_or_assign("channel[44].rFir.s", DumpEntry{channel[44].rFir.s});
        res.insert_or_assign("channel[44].rFir.r", DumpEntry{channel[44].rFir.r});
        res.insert_or_assign("channel[44].rFir.tSc", DumpEntry{channel[44].rFir.tSc});
        res.insert_or_assign("channel[44].rFir.phase", DumpEntry{channel[44].rFir.phase});
        res.insert_or_assign("channel[44].vFir.m", DumpEntry{channel[44].vFir.m});
        res.insert_or_assign("channel[44].vFir.n", DumpEntry{channel[44].vFir.n});
        res.insert_or_assign("channel[44].vFir.s", DumpEntry{channel[44].vFir.s});
        res.insert_or_assign("channel[44].vFir.r", DumpEntry{channel[44].vFir.r});
        res.insert_or_assign("channel[44].vFir.tSc", DumpEntry{channel[44].vFir.tSc});
        res.insert_or_assign("channel[44].vFir.phase", DumpEntry{channel[44].vFir.phase});
        res.insert_or_assign("channel[44].mmFir.m", DumpEntry{channel[44].mmFir.m});
        res.insert_or_assign("channel[44].mmFir.n", DumpEntry{channel[44].mmFir.n});
        res.insert_or_assign("channel[44].mmFir.s", DumpEntry{channel[44].mmFir.s});
        res.insert_or_assign("channel[44].mmFir.r", DumpEntry{channel[44].mmFir.r});
        res.insert_or_assign("channel[44].mmFir.tSc", DumpEntry{channel[44].mmFir.tSc});
        res.insert_or_assign("channel[44].mmFir.phase", DumpEntry{channel[44].mmFir.phase});
        res.insert_or_assign("channel[44].limit.maxLimit", DumpEntry{channel[44].limit.maxLimit});
        res.insert_or_assign("channel[44].limit.minLimit", DumpEntry{channel[44].limit.minLimit});
        res.insert_or_assign("channel[44].limit.filterLength", DumpEntry{channel[44].limit.filterLength});
        res.insert_or_assign("channel[45].rFir.m", DumpEntry{channel[45].rFir.m});
        res.insert_or_assign("channel[45].rFir.n", DumpEntry{channel[45].rFir.n});
        res.insert_or_assign("channel[45].rFir.s", DumpEntry{channel[45].rFir.s});
        res.insert_or_assign("channel[45].rFir.r", DumpEntry{channel[45].rFir.r});
        res.insert_or_assign("channel[45].rFir.tSc", DumpEntry{channel[45].rFir.tSc});
        res.insert_or_assign("channel[45].rFir.phase", DumpEntry{channel[45].rFir.phase});
        res.insert_or_assign("channel[45].vFir.m", DumpEntry{channel[45].vFir.m});
        res.insert_or_assign("channel[45].vFir.n", DumpEntry{channel[45].vFir.n});
        res.insert_or_assign("channel[45].vFir.s", DumpEntry{channel[45].vFir.s});
        res.insert_or_assign("channel[45].vFir.r", DumpEntry{channel[45].vFir.r});
        res.insert_or_assign("channel[45].vFir.tSc", DumpEntry{channel[45].vFir.tSc});
        res.insert_or_assign("channel[45].vFir.phase", DumpEntry{channel[45].vFir.phase});
        res.insert_or_assign("channel[45].mmFir.m", DumpEntry{channel[45].mmFir.m});
        res.insert_or_assign("channel[45].mmFir.n", DumpEntry{channel[45].mmFir.n});
        res.insert_or_assign("channel[45].mmFir.s", DumpEntry{channel[45].mmFir.s});
        res.insert_or_assign("channel[45].mmFir.r", DumpEntry{channel[45].mmFir.r});
        res.insert_or_assign("channel[45].mmFir.tSc", DumpEntry{channel[45].mmFir.tSc});
        res.insert_or_assign("channel[45].mmFir.phase", DumpEntry{channel[45].mmFir.phase});
        res.insert_or_assign("channel[45].limit.maxLimit", DumpEntry{channel[45].limit.maxLimit});
        res.insert_or_assign("channel[45].limit.minLimit", DumpEntry{channel[45].limit.minLimit});
        res.insert_or_assign("channel[45].limit.filterLength", DumpEntry{channel[45].limit.filterLength});
        res.insert_or_assign("channel[46].rFir.m", DumpEntry{channel[46].rFir.m});
        res.insert_or_assign("channel[46].rFir.n", DumpEntry{channel[46].rFir.n});
        res.insert_or_assign("channel[46].rFir.s", DumpEntry{channel[46].rFir.s});
        res.insert_or_assign("channel[46].rFir.r", DumpEntry{channel[46].rFir.r});
        res.insert_or_assign("channel[46].rFir.tSc", DumpEntry{channel[46].rFir.tSc});
        res.insert_or_assign("channel[46].rFir.phase", DumpEntry{channel[46].rFir.phase});
        res.insert_or_assign("channel[46].vFir.m", DumpEntry{channel[46].vFir.m});
        res.insert_or_assign("channel[46].vFir.n", DumpEntry{channel[46].vFir.n});
        res.insert_or_assign("channel[46].vFir.s", DumpEntry{channel[46].vFir.s});
        res.insert_or_assign("channel[46].vFir.r", DumpEntry{channel[46].vFir.r});
        res.insert_or_assign("channel[46].vFir.tSc", DumpEntry{channel[46].vFir.tSc});
        res.insert_or_assign("channel[46].vFir.phase", DumpEntry{channel[46].vFir.phase});
        res.insert_or_assign("channel[46].mmFir.m", DumpEntry{channel[46].mmFir.m});
        res.insert_or_assign("channel[46].mmFir.n", DumpEntry{channel[46].mmFir.n});
        res.insert_or_assign("channel[46].mmFir.s", DumpEntry{channel[46].mmFir.s});
        res.insert_or_assign("channel[46].mmFir.r", DumpEntry{channel[46].mmFir.r});
        res.insert_or_assign("channel[46].mmFir.tSc", DumpEntry{channel[46].mmFir.tSc});
        res.insert_or_assign("channel[46].mmFir.phase", DumpEntry{channel[46].mmFir.phase});
        res.insert_or_assign("channel[46].limit.maxLimit", DumpEntry{channel[46].limit.maxLimit});
        res.insert_or_assign("channel[46].limit.minLimit", DumpEntry{channel[46].limit.minLimit});
        res.insert_or_assign("channel[46].limit.filterLength", DumpEntry{channel[46].limit.filterLength});
        res.insert_or_assign("channel[47].rFir.m", DumpEntry{channel[47].rFir.m});
        res.insert_or_assign("channel[47].rFir.n", DumpEntry{channel[47].rFir.n});
        res.insert_or_assign("channel[47].rFir.s", DumpEntry{channel[47].rFir.s});
        res.insert_or_assign("channel[47].rFir.r", DumpEntry{channel[47].rFir.r});
        res.insert_or_assign("channel[47].rFir.tSc", DumpEntry{channel[47].rFir.tSc});
        res.insert_or_assign("channel[47].rFir.phase", DumpEntry{channel[47].rFir.phase});
        res.insert_or_assign("channel[47].vFir.m", DumpEntry{channel[47].vFir.m});
        res.insert_or_assign("channel[47].vFir.n", DumpEntry{channel[47].vFir.n});
        res.insert_or_assign("channel[47].vFir.s", DumpEntry{channel[47].vFir.s});
        res.insert_or_assign("channel[47].vFir.r", DumpEntry{channel[47].vFir.r});
        res.insert_or_assign("channel[47].vFir.tSc", DumpEntry{channel[47].vFir.tSc});
        res.insert_or_assign("channel[47].vFir.phase", DumpEntry{channel[47].vFir.phase});
        res.insert_or_assign("channel[47].mmFir.m", DumpEntry{channel[47].mmFir.m});
        res.insert_or_assign("channel[47].mmFir.n", DumpEntry{channel[47].mmFir.n});
        res.insert_or_assign("channel[47].mmFir.s", DumpEntry{channel[47].mmFir.s});
        res.insert_or_assign("channel[47].mmFir.r", DumpEntry{channel[47].mmFir.r});
        res.insert_or_assign("channel[47].mmFir.tSc", DumpEntry{channel[47].mmFir.tSc});
        res.insert_or_assign("channel[47].mmFir.phase", DumpEntry{channel[47].mmFir.phase});
        res.insert_or_assign("channel[47].limit.maxLimit", DumpEntry{channel[47].limit.maxLimit});
        res.insert_or_assign("channel[47].limit.minLimit", DumpEntry{channel[47].limit.minLimit});
        res.insert_or_assign("channel[47].limit.filterLength", DumpEntry{channel[47].limit.filterLength});
        res.insert_or_assign("channel[48].rFir.m", DumpEntry{channel[48].rFir.m});
        res.insert_or_assign("channel[48].rFir.n", DumpEntry{channel[48].rFir.n});
        res.insert_or_assign("channel[48].rFir.s", DumpEntry{channel[48].rFir.s});
        res.insert_or_assign("channel[48].rFir.r", DumpEntry{channel[48].rFir.r});
        res.insert_or_assign("channel[48].rFir.tSc", DumpEntry{channel[48].rFir.tSc});
        res.insert_or_assign("channel[48].rFir.phase", DumpEntry{channel[48].rFir.phase});
        res.insert_or_assign("channel[48].vFir.m", DumpEntry{channel[48].vFir.m});
        res.insert_or_assign("channel[48].vFir.n", DumpEntry{channel[48].vFir.n});
        res.insert_or_assign("channel[48].vFir.s", DumpEntry{channel[48].vFir.s});
        res.insert_or_assign("channel[48].vFir.r", DumpEntry{channel[48].vFir.r});
        res.insert_or_assign("channel[48].vFir.tSc", DumpEntry{channel[48].vFir.tSc});
        res.insert_or_assign("channel[48].vFir.phase", DumpEntry{channel[48].vFir.phase});
        res.insert_or_assign("channel[48].mmFir.m", DumpEntry{channel[48].mmFir.m});
        res.insert_or_assign("channel[48].mmFir.n", DumpEntry{channel[48].mmFir.n});
        res.insert_or_assign("channel[48].mmFir.s", DumpEntry{channel[48].mmFir.s});
        res.insert_or_assign("channel[48].mmFir.r", DumpEntry{channel[48].mmFir.r});
        res.insert_or_assign("channel[48].mmFir.tSc", DumpEntry{channel[48].mmFir.tSc});
        res.insert_or_assign("channel[48].mmFir.phase", DumpEntry{channel[48].mmFir.phase});
        res.insert_or_assign("channel[48].limit.maxLimit", DumpEntry{channel[48].limit.maxLimit});
        res.insert_or_assign("channel[48].limit.minLimit", DumpEntry{channel[48].limit.minLimit});
        res.insert_or_assign("channel[48].limit.filterLength", DumpEntry{channel[48].limit.filterLength});
        res.insert_or_assign("channel[49].rFir.m", DumpEntry{channel[49].rFir.m});
        res.insert_or_assign("channel[49].rFir.n", DumpEntry{channel[49].rFir.n});
        res.insert_or_assign("channel[49].rFir.s", DumpEntry{channel[49].rFir.s});
        res.insert_or_assign("channel[49].rFir.r", DumpEntry{channel[49].rFir.r});
        res.insert_or_assign("channel[49].rFir.tSc", DumpEntry{channel[49].rFir.tSc});
        res.insert_or_assign("channel[49].rFir.phase", DumpEntry{channel[49].rFir.phase});
        res.insert_or_assign("channel[49].vFir.m", DumpEntry{channel[49].vFir.m});
        res.insert_or_assign("channel[49].vFir.n", DumpEntry{channel[49].vFir.n});
        res.insert_or_assign("channel[49].vFir.s", DumpEntry{channel[49].vFir.s});
        res.insert_or_assign("channel[49].vFir.r", DumpEntry{channel[49].vFir.r});
        res.insert_or_assign("channel[49].vFir.tSc", DumpEntry{channel[49].vFir.tSc});
        res.insert_or_assign("channel[49].vFir.phase", DumpEntry{channel[49].vFir.phase});
        res.insert_or_assign("channel[49].mmFir.m", DumpEntry{channel[49].mmFir.m});
        res.insert_or_assign("channel[49].mmFir.n", DumpEntry{channel[49].mmFir.n});
        res.insert_or_assign("channel[49].mmFir.s", DumpEntry{channel[49].mmFir.s});
        res.insert_or_assign("channel[49].mmFir.r", DumpEntry{channel[49].mmFir.r});
        res.insert_or_assign("channel[49].mmFir.tSc", DumpEntry{channel[49].mmFir.tSc});
        res.insert_or_assign("channel[49].mmFir.phase", DumpEntry{channel[49].mmFir.phase});
        res.insert_or_assign("channel[49].limit.maxLimit", DumpEntry{channel[49].limit.maxLimit});
        res.insert_or_assign("channel[49].limit.minLimit", DumpEntry{channel[49].limit.minLimit});
        res.insert_or_assign("channel[49].limit.filterLength", DumpEntry{channel[49].limit.filterLength});
        res.insert_or_assign("channel[50].rFir.m", DumpEntry{channel[50].rFir.m});
        res.insert_or_assign("channel[50].rFir.n", DumpEntry{channel[50].rFir.n});
        res.insert_or_assign("channel[50].rFir.s", DumpEntry{channel[50].rFir.s});
        res.insert_or_assign("channel[50].rFir.r", DumpEntry{channel[50].rFir.r});
        res.insert_or_assign("channel[50].rFir.tSc", DumpEntry{channel[50].rFir.tSc});
        res.insert_or_assign("channel[50].rFir.phase", DumpEntry{channel[50].rFir.phase});
        res.insert_or_assign("channel[50].vFir.m", DumpEntry{channel[50].vFir.m});
        res.insert_or_assign("channel[50].vFir.n", DumpEntry{channel[50].vFir.n});
        res.insert_or_assign("channel[50].vFir.s", DumpEntry{channel[50].vFir.s});
        res.insert_or_assign("channel[50].vFir.r", DumpEntry{channel[50].vFir.r});
        res.insert_or_assign("channel[50].vFir.tSc", DumpEntry{channel[50].vFir.tSc});
        res.insert_or_assign("channel[50].vFir.phase", DumpEntry{channel[50].vFir.phase});
        res.insert_or_assign("channel[50].mmFir.m", DumpEntry{channel[50].mmFir.m});
        res.insert_or_assign("channel[50].mmFir.n", DumpEntry{channel[50].mmFir.n});
        res.insert_or_assign("channel[50].mmFir.s", DumpEntry{channel[50].mmFir.s});
        res.insert_or_assign("channel[50].mmFir.r", DumpEntry{channel[50].mmFir.r});
        res.insert_or_assign("channel[50].mmFir.tSc", DumpEntry{channel[50].mmFir.tSc});
        res.insert_or_assign("channel[50].mmFir.phase", DumpEntry{channel[50].mmFir.phase});
        res.insert_or_assign("channel[50].limit.maxLimit", DumpEntry{channel[50].limit.maxLimit});
        res.insert_or_assign("channel[50].limit.minLimit", DumpEntry{channel[50].limit.minLimit});
        res.insert_or_assign("channel[50].limit.filterLength", DumpEntry{channel[50].limit.filterLength});
        res.insert_or_assign("channel[51].rFir.m", DumpEntry{channel[51].rFir.m});
        res.insert_or_assign("channel[51].rFir.n", DumpEntry{channel[51].rFir.n});
        res.insert_or_assign("channel[51].rFir.s", DumpEntry{channel[51].rFir.s});
        res.insert_or_assign("channel[51].rFir.r", DumpEntry{channel[51].rFir.r});
        res.insert_or_assign("channel[51].rFir.tSc", DumpEntry{channel[51].rFir.tSc});
        res.insert_or_assign("channel[51].rFir.phase", DumpEntry{channel[51].rFir.phase});
        res.insert_or_assign("channel[51].vFir.m", DumpEntry{channel[51].vFir.m});
        res.insert_or_assign("channel[51].vFir.n", DumpEntry{channel[51].vFir.n});
        res.insert_or_assign("channel[51].vFir.s", DumpEntry{channel[51].vFir.s});
        res.insert_or_assign("channel[51].vFir.r", DumpEntry{channel[51].vFir.r});
        res.insert_or_assign("channel[51].vFir.tSc", DumpEntry{channel[51].vFir.tSc});
        res.insert_or_assign("channel[51].vFir.phase", DumpEntry{channel[51].vFir.phase});
        res.insert_or_assign("channel[51].mmFir.m", DumpEntry{channel[51].mmFir.m});
        res.insert_or_assign("channel[51].mmFir.n", DumpEntry{channel[51].mmFir.n});
        res.insert_or_assign("channel[51].mmFir.s", DumpEntry{channel[51].mmFir.s});
        res.insert_or_assign("channel[51].mmFir.r", DumpEntry{channel[51].mmFir.r});
        res.insert_or_assign("channel[51].mmFir.tSc", DumpEntry{channel[51].mmFir.tSc});
        res.insert_or_assign("channel[51].mmFir.phase", DumpEntry{channel[51].mmFir.phase});
        res.insert_or_assign("channel[51].limit.maxLimit", DumpEntry{channel[51].limit.maxLimit});
        res.insert_or_assign("channel[51].limit.minLimit", DumpEntry{channel[51].limit.minLimit});
        res.insert_or_assign("channel[51].limit.filterLength", DumpEntry{channel[51].limit.filterLength});
        res.insert_or_assign("channel[52].rFir.m", DumpEntry{channel[52].rFir.m});
        res.insert_or_assign("channel[52].rFir.n", DumpEntry{channel[52].rFir.n});
        res.insert_or_assign("channel[52].rFir.s", DumpEntry{channel[52].rFir.s});
        res.insert_or_assign("channel[52].rFir.r", DumpEntry{channel[52].rFir.r});
        res.insert_or_assign("channel[52].rFir.tSc", DumpEntry{channel[52].rFir.tSc});
        res.insert_or_assign("channel[52].rFir.phase", DumpEntry{channel[52].rFir.phase});
        res.insert_or_assign("channel[52].vFir.m", DumpEntry{channel[52].vFir.m});
        res.insert_or_assign("channel[52].vFir.n", DumpEntry{channel[52].vFir.n});
        res.insert_or_assign("channel[52].vFir.s", DumpEntry{channel[52].vFir.s});
        res.insert_or_assign("channel[52].vFir.r", DumpEntry{channel[52].vFir.r});
        res.insert_or_assign("channel[52].vFir.tSc", DumpEntry{channel[52].vFir.tSc});
        res.insert_or_assign("channel[52].vFir.phase", DumpEntry{channel[52].vFir.phase});
        res.insert_or_assign("channel[52].mmFir.m", DumpEntry{channel[52].mmFir.m});
        res.insert_or_assign("channel[52].mmFir.n", DumpEntry{channel[52].mmFir.n});
        res.insert_or_assign("channel[52].mmFir.s", DumpEntry{channel[52].mmFir.s});
        res.insert_or_assign("channel[52].mmFir.r", DumpEntry{channel[52].mmFir.r});
        res.insert_or_assign("channel[52].mmFir.tSc", DumpEntry{channel[52].mmFir.tSc});
        res.insert_or_assign("channel[52].mmFir.phase", DumpEntry{channel[52].mmFir.phase});
        res.insert_or_assign("channel[52].limit.maxLimit", DumpEntry{channel[52].limit.maxLimit});
        res.insert_or_assign("channel[52].limit.minLimit", DumpEntry{channel[52].limit.minLimit});
        res.insert_or_assign("channel[52].limit.filterLength", DumpEntry{channel[52].limit.filterLength});
        res.insert_or_assign("channel[53].rFir.m", DumpEntry{channel[53].rFir.m});
        res.insert_or_assign("channel[53].rFir.n", DumpEntry{channel[53].rFir.n});
        res.insert_or_assign("channel[53].rFir.s", DumpEntry{channel[53].rFir.s});
        res.insert_or_assign("channel[53].rFir.r", DumpEntry{channel[53].rFir.r});
        res.insert_or_assign("channel[53].rFir.tSc", DumpEntry{channel[53].rFir.tSc});
        res.insert_or_assign("channel[53].rFir.phase", DumpEntry{channel[53].rFir.phase});
        res.insert_or_assign("channel[53].vFir.m", DumpEntry{channel[53].vFir.m});
        res.insert_or_assign("channel[53].vFir.n", DumpEntry{channel[53].vFir.n});
        res.insert_or_assign("channel[53].vFir.s", DumpEntry{channel[53].vFir.s});
        res.insert_or_assign("channel[53].vFir.r", DumpEntry{channel[53].vFir.r});
        res.insert_or_assign("channel[53].vFir.tSc", DumpEntry{channel[53].vFir.tSc});
        res.insert_or_assign("channel[53].vFir.phase", DumpEntry{channel[53].vFir.phase});
        res.insert_or_assign("channel[53].mmFir.m", DumpEntry{channel[53].mmFir.m});
        res.insert_or_assign("channel[53].mmFir.n", DumpEntry{channel[53].mmFir.n});
        res.insert_or_assign("channel[53].mmFir.s", DumpEntry{channel[53].mmFir.s});
        res.insert_or_assign("channel[53].mmFir.r", DumpEntry{channel[53].mmFir.r});
        res.insert_or_assign("channel[53].mmFir.tSc", DumpEntry{channel[53].mmFir.tSc});
        res.insert_or_assign("channel[53].mmFir.phase", DumpEntry{channel[53].mmFir.phase});
        res.insert_or_assign("channel[53].limit.maxLimit", DumpEntry{channel[53].limit.maxLimit});
        res.insert_or_assign("channel[53].limit.minLimit", DumpEntry{channel[53].limit.minLimit});
        res.insert_or_assign("channel[53].limit.filterLength", DumpEntry{channel[53].limit.filterLength});
        res.insert_or_assign("channel[54].rFir.m", DumpEntry{channel[54].rFir.m});
        res.insert_or_assign("channel[54].rFir.n", DumpEntry{channel[54].rFir.n});
        res.insert_or_assign("channel[54].rFir.s", DumpEntry{channel[54].rFir.s});
        res.insert_or_assign("channel[54].rFir.r", DumpEntry{channel[54].rFir.r});
        res.insert_or_assign("channel[54].rFir.tSc", DumpEntry{channel[54].rFir.tSc});
        res.insert_or_assign("channel[54].rFir.phase", DumpEntry{channel[54].rFir.phase});
        res.insert_or_assign("channel[54].vFir.m", DumpEntry{channel[54].vFir.m});
        res.insert_or_assign("channel[54].vFir.n", DumpEntry{channel[54].vFir.n});
        res.insert_or_assign("channel[54].vFir.s", DumpEntry{channel[54].vFir.s});
        res.insert_or_assign("channel[54].vFir.r", DumpEntry{channel[54].vFir.r});
        res.insert_or_assign("channel[54].vFir.tSc", DumpEntry{channel[54].vFir.tSc});
        res.insert_or_assign("channel[54].vFir.phase", DumpEntry{channel[54].vFir.phase});
        res.insert_or_assign("channel[54].mmFir.m", DumpEntry{channel[54].mmFir.m});
        res.insert_or_assign("channel[54].mmFir.n", DumpEntry{channel[54].mmFir.n});
        res.insert_or_assign("channel[54].mmFir.s", DumpEntry{channel[54].mmFir.s});
        res.insert_or_assign("channel[54].mmFir.r", DumpEntry{channel[54].mmFir.r});
        res.insert_or_assign("channel[54].mmFir.tSc", DumpEntry{channel[54].mmFir.tSc});
        res.insert_or_assign("channel[54].mmFir.phase", DumpEntry{channel[54].mmFir.phase});
        res.insert_or_assign("channel[54].limit.maxLimit", DumpEntry{channel[54].limit.maxLimit});
        res.insert_or_assign("channel[54].limit.minLimit", DumpEntry{channel[54].limit.minLimit});
        res.insert_or_assign("channel[54].limit.filterLength", DumpEntry{channel[54].limit.filterLength});
        res.insert_or_assign("channel[55].rFir.m", DumpEntry{channel[55].rFir.m});
        res.insert_or_assign("channel[55].rFir.n", DumpEntry{channel[55].rFir.n});
        res.insert_or_assign("channel[55].rFir.s", DumpEntry{channel[55].rFir.s});
        res.insert_or_assign("channel[55].rFir.r", DumpEntry{channel[55].rFir.r});
        res.insert_or_assign("channel[55].rFir.tSc", DumpEntry{channel[55].rFir.tSc});
        res.insert_or_assign("channel[55].rFir.phase", DumpEntry{channel[55].rFir.phase});
        res.insert_or_assign("channel[55].vFir.m", DumpEntry{channel[55].vFir.m});
        res.insert_or_assign("channel[55].vFir.n", DumpEntry{channel[55].vFir.n});
        res.insert_or_assign("channel[55].vFir.s", DumpEntry{channel[55].vFir.s});
        res.insert_or_assign("channel[55].vFir.r", DumpEntry{channel[55].vFir.r});
        res.insert_or_assign("channel[55].vFir.tSc", DumpEntry{channel[55].vFir.tSc});
        res.insert_or_assign("channel[55].vFir.phase", DumpEntry{channel[55].vFir.phase});
        res.insert_or_assign("channel[55].mmFir.m", DumpEntry{channel[55].mmFir.m});
        res.insert_or_assign("channel[55].mmFir.n", DumpEntry{channel[55].mmFir.n});
        res.insert_or_assign("channel[55].mmFir.s", DumpEntry{channel[55].mmFir.s});
        res.insert_or_assign("channel[55].mmFir.r", DumpEntry{channel[55].mmFir.r});
        res.insert_or_assign("channel[55].mmFir.tSc", DumpEntry{channel[55].mmFir.tSc});
        res.insert_or_assign("channel[55].mmFir.phase", DumpEntry{channel[55].mmFir.phase});
        res.insert_or_assign("channel[55].limit.maxLimit", DumpEntry{channel[55].limit.maxLimit});
        res.insert_or_assign("channel[55].limit.minLimit", DumpEntry{channel[55].limit.minLimit});
        res.insert_or_assign("channel[55].limit.filterLength", DumpEntry{channel[55].limit.filterLength});
        res.insert_or_assign("channel[56].rFir.m", DumpEntry{channel[56].rFir.m});
        res.insert_or_assign("channel[56].rFir.n", DumpEntry{channel[56].rFir.n});
        res.insert_or_assign("channel[56].rFir.s", DumpEntry{channel[56].rFir.s});
        res.insert_or_assign("channel[56].rFir.r", DumpEntry{channel[56].rFir.r});
        res.insert_or_assign("channel[56].rFir.tSc", DumpEntry{channel[56].rFir.tSc});
        res.insert_or_assign("channel[56].rFir.phase", DumpEntry{channel[56].rFir.phase});
        res.insert_or_assign("channel[56].vFir.m", DumpEntry{channel[56].vFir.m});
        res.insert_or_assign("channel[56].vFir.n", DumpEntry{channel[56].vFir.n});
        res.insert_or_assign("channel[56].vFir.s", DumpEntry{channel[56].vFir.s});
        res.insert_or_assign("channel[56].vFir.r", DumpEntry{channel[56].vFir.r});
        res.insert_or_assign("channel[56].vFir.tSc", DumpEntry{channel[56].vFir.tSc});
        res.insert_or_assign("channel[56].vFir.phase", DumpEntry{channel[56].vFir.phase});
        res.insert_or_assign("channel[56].mmFir.m", DumpEntry{channel[56].mmFir.m});
        res.insert_or_assign("channel[56].mmFir.n", DumpEntry{channel[56].mmFir.n});
        res.insert_or_assign("channel[56].mmFir.s", DumpEntry{channel[56].mmFir.s});
        res.insert_or_assign("channel[56].mmFir.r", DumpEntry{channel[56].mmFir.r});
        res.insert_or_assign("channel[56].mmFir.tSc", DumpEntry{channel[56].mmFir.tSc});
        res.insert_or_assign("channel[56].mmFir.phase", DumpEntry{channel[56].mmFir.phase});
        res.insert_or_assign("channel[56].limit.maxLimit", DumpEntry{channel[56].limit.maxLimit});
        res.insert_or_assign("channel[56].limit.minLimit", DumpEntry{channel[56].limit.minLimit});
        res.insert_or_assign("channel[56].limit.filterLength", DumpEntry{channel[56].limit.filterLength});
        res.insert_or_assign("channel[57].rFir.m", DumpEntry{channel[57].rFir.m});
        res.insert_or_assign("channel[57].rFir.n", DumpEntry{channel[57].rFir.n});
        res.insert_or_assign("channel[57].rFir.s", DumpEntry{channel[57].rFir.s});
        res.insert_or_assign("channel[57].rFir.r", DumpEntry{channel[57].rFir.r});
        res.insert_or_assign("channel[57].rFir.tSc", DumpEntry{channel[57].rFir.tSc});
        res.insert_or_assign("channel[57].rFir.phase", DumpEntry{channel[57].rFir.phase});
        res.insert_or_assign("channel[57].vFir.m", DumpEntry{channel[57].vFir.m});
        res.insert_or_assign("channel[57].vFir.n", DumpEntry{channel[57].vFir.n});
        res.insert_or_assign("channel[57].vFir.s", DumpEntry{channel[57].vFir.s});
        res.insert_or_assign("channel[57].vFir.r", DumpEntry{channel[57].vFir.r});
        res.insert_or_assign("channel[57].vFir.tSc", DumpEntry{channel[57].vFir.tSc});
        res.insert_or_assign("channel[57].vFir.phase", DumpEntry{channel[57].vFir.phase});
        res.insert_or_assign("channel[57].mmFir.m", DumpEntry{channel[57].mmFir.m});
        res.insert_or_assign("channel[57].mmFir.n", DumpEntry{channel[57].mmFir.n});
        res.insert_or_assign("channel[57].mmFir.s", DumpEntry{channel[57].mmFir.s});
        res.insert_or_assign("channel[57].mmFir.r", DumpEntry{channel[57].mmFir.r});
        res.insert_or_assign("channel[57].mmFir.tSc", DumpEntry{channel[57].mmFir.tSc});
        res.insert_or_assign("channel[57].mmFir.phase", DumpEntry{channel[57].mmFir.phase});
        res.insert_or_assign("channel[57].limit.maxLimit", DumpEntry{channel[57].limit.maxLimit});
        res.insert_or_assign("channel[57].limit.minLimit", DumpEntry{channel[57].limit.minLimit});
        res.insert_or_assign("channel[57].limit.filterLength", DumpEntry{channel[57].limit.filterLength});
        res.insert_or_assign("channel[58].rFir.m", DumpEntry{channel[58].rFir.m});
        res.insert_or_assign("channel[58].rFir.n", DumpEntry{channel[58].rFir.n});
        res.insert_or_assign("channel[58].rFir.s", DumpEntry{channel[58].rFir.s});
        res.insert_or_assign("channel[58].rFir.r", DumpEntry{channel[58].rFir.r});
        res.insert_or_assign("channel[58].rFir.tSc", DumpEntry{channel[58].rFir.tSc});
        res.insert_or_assign("channel[58].rFir.phase", DumpEntry{channel[58].rFir.phase});
        res.insert_or_assign("channel[58].vFir.m", DumpEntry{channel[58].vFir.m});
        res.insert_or_assign("channel[58].vFir.n", DumpEntry{channel[58].vFir.n});
        res.insert_or_assign("channel[58].vFir.s", DumpEntry{channel[58].vFir.s});
        res.insert_or_assign("channel[58].vFir.r", DumpEntry{channel[58].vFir.r});
        res.insert_or_assign("channel[58].vFir.tSc", DumpEntry{channel[58].vFir.tSc});
        res.insert_or_assign("channel[58].vFir.phase", DumpEntry{channel[58].vFir.phase});
        res.insert_or_assign("channel[58].mmFir.m", DumpEntry{channel[58].mmFir.m});
        res.insert_or_assign("channel[58].mmFir.n", DumpEntry{channel[58].mmFir.n});
        res.insert_or_assign("channel[58].mmFir.s", DumpEntry{channel[58].mmFir.s});
        res.insert_or_assign("channel[58].mmFir.r", DumpEntry{channel[58].mmFir.r});
        res.insert_or_assign("channel[58].mmFir.tSc", DumpEntry{channel[58].mmFir.tSc});
        res.insert_or_assign("channel[58].mmFir.phase", DumpEntry{channel[58].mmFir.phase});
        res.insert_or_assign("channel[58].limit.maxLimit", DumpEntry{channel[58].limit.maxLimit});
        res.insert_or_assign("channel[58].limit.minLimit", DumpEntry{channel[58].limit.minLimit});
        res.insert_or_assign("channel[58].limit.filterLength", DumpEntry{channel[58].limit.filterLength});
        res.insert_or_assign("channel[59].rFir.m", DumpEntry{channel[59].rFir.m});
        res.insert_or_assign("channel[59].rFir.n", DumpEntry{channel[59].rFir.n});
        res.insert_or_assign("channel[59].rFir.s", DumpEntry{channel[59].rFir.s});
        res.insert_or_assign("channel[59].rFir.r", DumpEntry{channel[59].rFir.r});
        res.insert_or_assign("channel[59].rFir.tSc", DumpEntry{channel[59].rFir.tSc});
        res.insert_or_assign("channel[59].rFir.phase", DumpEntry{channel[59].rFir.phase});
        res.insert_or_assign("channel[59].vFir.m", DumpEntry{channel[59].vFir.m});
        res.insert_or_assign("channel[59].vFir.n", DumpEntry{channel[59].vFir.n});
        res.insert_or_assign("channel[59].vFir.s", DumpEntry{channel[59].vFir.s});
        res.insert_or_assign("channel[59].vFir.r", DumpEntry{channel[59].vFir.r});
        res.insert_or_assign("channel[59].vFir.tSc", DumpEntry{channel[59].vFir.tSc});
        res.insert_or_assign("channel[59].vFir.phase", DumpEntry{channel[59].vFir.phase});
        res.insert_or_assign("channel[59].mmFir.m", DumpEntry{channel[59].mmFir.m});
        res.insert_or_assign("channel[59].mmFir.n", DumpEntry{channel[59].mmFir.n});
        res.insert_or_assign("channel[59].mmFir.s", DumpEntry{channel[59].mmFir.s});
        res.insert_or_assign("channel[59].mmFir.r", DumpEntry{channel[59].mmFir.r});
        res.insert_or_assign("channel[59].mmFir.tSc", DumpEntry{channel[59].mmFir.tSc});
        res.insert_or_assign("channel[59].mmFir.phase", DumpEntry{channel[59].mmFir.phase});
        res.insert_or_assign("channel[59].limit.maxLimit", DumpEntry{channel[59].limit.maxLimit});
        res.insert_or_assign("channel[59].limit.minLimit", DumpEntry{channel[59].limit.minLimit});
        res.insert_or_assign("channel[59].limit.filterLength", DumpEntry{channel[59].limit.filterLength});
        res.insert_or_assign("channel[60].rFir.m", DumpEntry{channel[60].rFir.m});
        res.insert_or_assign("channel[60].rFir.n", DumpEntry{channel[60].rFir.n});
        res.insert_or_assign("channel[60].rFir.s", DumpEntry{channel[60].rFir.s});
        res.insert_or_assign("channel[60].rFir.r", DumpEntry{channel[60].rFir.r});
        res.insert_or_assign("channel[60].rFir.tSc", DumpEntry{channel[60].rFir.tSc});
        res.insert_or_assign("channel[60].rFir.phase", DumpEntry{channel[60].rFir.phase});
        res.insert_or_assign("channel[60].vFir.m", DumpEntry{channel[60].vFir.m});
        res.insert_or_assign("channel[60].vFir.n", DumpEntry{channel[60].vFir.n});
        res.insert_or_assign("channel[60].vFir.s", DumpEntry{channel[60].vFir.s});
        res.insert_or_assign("channel[60].vFir.r", DumpEntry{channel[60].vFir.r});
        res.insert_or_assign("channel[60].vFir.tSc", DumpEntry{channel[60].vFir.tSc});
        res.insert_or_assign("channel[60].vFir.phase", DumpEntry{channel[60].vFir.phase});
        res.insert_or_assign("channel[60].mmFir.m", DumpEntry{channel[60].mmFir.m});
        res.insert_or_assign("channel[60].mmFir.n", DumpEntry{channel[60].mmFir.n});
        res.insert_or_assign("channel[60].mmFir.s", DumpEntry{channel[60].mmFir.s});
        res.insert_or_assign("channel[60].mmFir.r", DumpEntry{channel[60].mmFir.r});
        res.insert_or_assign("channel[60].mmFir.tSc", DumpEntry{channel[60].mmFir.tSc});
        res.insert_or_assign("channel[60].mmFir.phase", DumpEntry{channel[60].mmFir.phase});
        res.insert_or_assign("channel[60].limit.maxLimit", DumpEntry{channel[60].limit.maxLimit});
        res.insert_or_assign("channel[60].limit.minLimit", DumpEntry{channel[60].limit.minLimit});
        res.insert_or_assign("channel[60].limit.filterLength", DumpEntry{channel[60].limit.filterLength});
        res.insert_or_assign("channel[61].rFir.m", DumpEntry{channel[61].rFir.m});
        res.insert_or_assign("channel[61].rFir.n", DumpEntry{channel[61].rFir.n});
        res.insert_or_assign("channel[61].rFir.s", DumpEntry{channel[61].rFir.s});
        res.insert_or_assign("channel[61].rFir.r", DumpEntry{channel[61].rFir.r});
        res.insert_or_assign("channel[61].rFir.tSc", DumpEntry{channel[61].rFir.tSc});
        res.insert_or_assign("channel[61].rFir.phase", DumpEntry{channel[61].rFir.phase});
        res.insert_or_assign("channel[61].vFir.m", DumpEntry{channel[61].vFir.m});
        res.insert_or_assign("channel[61].vFir.n", DumpEntry{channel[61].vFir.n});
        res.insert_or_assign("channel[61].vFir.s", DumpEntry{channel[61].vFir.s});
        res.insert_or_assign("channel[61].vFir.r", DumpEntry{channel[61].vFir.r});
        res.insert_or_assign("channel[61].vFir.tSc", DumpEntry{channel[61].vFir.tSc});
        res.insert_or_assign("channel[61].vFir.phase", DumpEntry{channel[61].vFir.phase});
        res.insert_or_assign("channel[61].mmFir.m", DumpEntry{channel[61].mmFir.m});
        res.insert_or_assign("channel[61].mmFir.n", DumpEntry{channel[61].mmFir.n});
        res.insert_or_assign("channel[61].mmFir.s", DumpEntry{channel[61].mmFir.s});
        res.insert_or_assign("channel[61].mmFir.r", DumpEntry{channel[61].mmFir.r});
        res.insert_or_assign("channel[61].mmFir.tSc", DumpEntry{channel[61].mmFir.tSc});
        res.insert_or_assign("channel[61].mmFir.phase", DumpEntry{channel[61].mmFir.phase});
        res.insert_or_assign("channel[61].limit.maxLimit", DumpEntry{channel[61].limit.maxLimit});
        res.insert_or_assign("channel[61].limit.minLimit", DumpEntry{channel[61].limit.minLimit});
        res.insert_or_assign("channel[61].limit.filterLength", DumpEntry{channel[61].limit.filterLength});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogFir`
    //!
    //! @param analogFir A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under analogFir
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogFir& analogFir)
    {
        DumpMap res{analogFir.base()};
        res.insert_or_assign("analogFir.channel[0].rFir.m", DumpEntry{analogFir.channel[0].rFir.m});
        res.insert_or_assign("analogFir.channel[0].rFir.n", DumpEntry{analogFir.channel[0].rFir.n});
        res.insert_or_assign("analogFir.channel[0].rFir.s", DumpEntry{analogFir.channel[0].rFir.s});
        res.insert_or_assign("analogFir.channel[0].rFir.r", DumpEntry{analogFir.channel[0].rFir.r});
        res.insert_or_assign("analogFir.channel[0].rFir.tSc", DumpEntry{analogFir.channel[0].rFir.tSc});
        res.insert_or_assign("analogFir.channel[0].rFir.phase", DumpEntry{analogFir.channel[0].rFir.phase});
        res.insert_or_assign("analogFir.channel[0].vFir.m", DumpEntry{analogFir.channel[0].vFir.m});
        res.insert_or_assign("analogFir.channel[0].vFir.n", DumpEntry{analogFir.channel[0].vFir.n});
        res.insert_or_assign("analogFir.channel[0].vFir.s", DumpEntry{analogFir.channel[0].vFir.s});
        res.insert_or_assign("analogFir.channel[0].vFir.r", DumpEntry{analogFir.channel[0].vFir.r});
        res.insert_or_assign("analogFir.channel[0].vFir.tSc", DumpEntry{analogFir.channel[0].vFir.tSc});
        res.insert_or_assign("analogFir.channel[0].vFir.phase", DumpEntry{analogFir.channel[0].vFir.phase});
        res.insert_or_assign("analogFir.channel[0].mmFir.m", DumpEntry{analogFir.channel[0].mmFir.m});
        res.insert_or_assign("analogFir.channel[0].mmFir.n", DumpEntry{analogFir.channel[0].mmFir.n});
        res.insert_or_assign("analogFir.channel[0].mmFir.s", DumpEntry{analogFir.channel[0].mmFir.s});
        res.insert_or_assign("analogFir.channel[0].mmFir.r", DumpEntry{analogFir.channel[0].mmFir.r});
        res.insert_or_assign("analogFir.channel[0].mmFir.tSc", DumpEntry{analogFir.channel[0].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[0].mmFir.phase", DumpEntry{analogFir.channel[0].mmFir.phase});
        res.insert_or_assign("analogFir.channel[0].limit.maxLimit", DumpEntry{analogFir.channel[0].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[0].limit.minLimit", DumpEntry{analogFir.channel[0].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[0].limit.filterLength", DumpEntry{analogFir.channel[0].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[1].rFir.m", DumpEntry{analogFir.channel[1].rFir.m});
        res.insert_or_assign("analogFir.channel[1].rFir.n", DumpEntry{analogFir.channel[1].rFir.n});
        res.insert_or_assign("analogFir.channel[1].rFir.s", DumpEntry{analogFir.channel[1].rFir.s});
        res.insert_or_assign("analogFir.channel[1].rFir.r", DumpEntry{analogFir.channel[1].rFir.r});
        res.insert_or_assign("analogFir.channel[1].rFir.tSc", DumpEntry{analogFir.channel[1].rFir.tSc});
        res.insert_or_assign("analogFir.channel[1].rFir.phase", DumpEntry{analogFir.channel[1].rFir.phase});
        res.insert_or_assign("analogFir.channel[1].vFir.m", DumpEntry{analogFir.channel[1].vFir.m});
        res.insert_or_assign("analogFir.channel[1].vFir.n", DumpEntry{analogFir.channel[1].vFir.n});
        res.insert_or_assign("analogFir.channel[1].vFir.s", DumpEntry{analogFir.channel[1].vFir.s});
        res.insert_or_assign("analogFir.channel[1].vFir.r", DumpEntry{analogFir.channel[1].vFir.r});
        res.insert_or_assign("analogFir.channel[1].vFir.tSc", DumpEntry{analogFir.channel[1].vFir.tSc});
        res.insert_or_assign("analogFir.channel[1].vFir.phase", DumpEntry{analogFir.channel[1].vFir.phase});
        res.insert_or_assign("analogFir.channel[1].mmFir.m", DumpEntry{analogFir.channel[1].mmFir.m});
        res.insert_or_assign("analogFir.channel[1].mmFir.n", DumpEntry{analogFir.channel[1].mmFir.n});
        res.insert_or_assign("analogFir.channel[1].mmFir.s", DumpEntry{analogFir.channel[1].mmFir.s});
        res.insert_or_assign("analogFir.channel[1].mmFir.r", DumpEntry{analogFir.channel[1].mmFir.r});
        res.insert_or_assign("analogFir.channel[1].mmFir.tSc", DumpEntry{analogFir.channel[1].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[1].mmFir.phase", DumpEntry{analogFir.channel[1].mmFir.phase});
        res.insert_or_assign("analogFir.channel[1].limit.maxLimit", DumpEntry{analogFir.channel[1].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[1].limit.minLimit", DumpEntry{analogFir.channel[1].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[1].limit.filterLength", DumpEntry{analogFir.channel[1].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[2].rFir.m", DumpEntry{analogFir.channel[2].rFir.m});
        res.insert_or_assign("analogFir.channel[2].rFir.n", DumpEntry{analogFir.channel[2].rFir.n});
        res.insert_or_assign("analogFir.channel[2].rFir.s", DumpEntry{analogFir.channel[2].rFir.s});
        res.insert_or_assign("analogFir.channel[2].rFir.r", DumpEntry{analogFir.channel[2].rFir.r});
        res.insert_or_assign("analogFir.channel[2].rFir.tSc", DumpEntry{analogFir.channel[2].rFir.tSc});
        res.insert_or_assign("analogFir.channel[2].rFir.phase", DumpEntry{analogFir.channel[2].rFir.phase});
        res.insert_or_assign("analogFir.channel[2].vFir.m", DumpEntry{analogFir.channel[2].vFir.m});
        res.insert_or_assign("analogFir.channel[2].vFir.n", DumpEntry{analogFir.channel[2].vFir.n});
        res.insert_or_assign("analogFir.channel[2].vFir.s", DumpEntry{analogFir.channel[2].vFir.s});
        res.insert_or_assign("analogFir.channel[2].vFir.r", DumpEntry{analogFir.channel[2].vFir.r});
        res.insert_or_assign("analogFir.channel[2].vFir.tSc", DumpEntry{analogFir.channel[2].vFir.tSc});
        res.insert_or_assign("analogFir.channel[2].vFir.phase", DumpEntry{analogFir.channel[2].vFir.phase});
        res.insert_or_assign("analogFir.channel[2].mmFir.m", DumpEntry{analogFir.channel[2].mmFir.m});
        res.insert_or_assign("analogFir.channel[2].mmFir.n", DumpEntry{analogFir.channel[2].mmFir.n});
        res.insert_or_assign("analogFir.channel[2].mmFir.s", DumpEntry{analogFir.channel[2].mmFir.s});
        res.insert_or_assign("analogFir.channel[2].mmFir.r", DumpEntry{analogFir.channel[2].mmFir.r});
        res.insert_or_assign("analogFir.channel[2].mmFir.tSc", DumpEntry{analogFir.channel[2].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[2].mmFir.phase", DumpEntry{analogFir.channel[2].mmFir.phase});
        res.insert_or_assign("analogFir.channel[2].limit.maxLimit", DumpEntry{analogFir.channel[2].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[2].limit.minLimit", DumpEntry{analogFir.channel[2].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[2].limit.filterLength", DumpEntry{analogFir.channel[2].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[3].rFir.m", DumpEntry{analogFir.channel[3].rFir.m});
        res.insert_or_assign("analogFir.channel[3].rFir.n", DumpEntry{analogFir.channel[3].rFir.n});
        res.insert_or_assign("analogFir.channel[3].rFir.s", DumpEntry{analogFir.channel[3].rFir.s});
        res.insert_or_assign("analogFir.channel[3].rFir.r", DumpEntry{analogFir.channel[3].rFir.r});
        res.insert_or_assign("analogFir.channel[3].rFir.tSc", DumpEntry{analogFir.channel[3].rFir.tSc});
        res.insert_or_assign("analogFir.channel[3].rFir.phase", DumpEntry{analogFir.channel[3].rFir.phase});
        res.insert_or_assign("analogFir.channel[3].vFir.m", DumpEntry{analogFir.channel[3].vFir.m});
        res.insert_or_assign("analogFir.channel[3].vFir.n", DumpEntry{analogFir.channel[3].vFir.n});
        res.insert_or_assign("analogFir.channel[3].vFir.s", DumpEntry{analogFir.channel[3].vFir.s});
        res.insert_or_assign("analogFir.channel[3].vFir.r", DumpEntry{analogFir.channel[3].vFir.r});
        res.insert_or_assign("analogFir.channel[3].vFir.tSc", DumpEntry{analogFir.channel[3].vFir.tSc});
        res.insert_or_assign("analogFir.channel[3].vFir.phase", DumpEntry{analogFir.channel[3].vFir.phase});
        res.insert_or_assign("analogFir.channel[3].mmFir.m", DumpEntry{analogFir.channel[3].mmFir.m});
        res.insert_or_assign("analogFir.channel[3].mmFir.n", DumpEntry{analogFir.channel[3].mmFir.n});
        res.insert_or_assign("analogFir.channel[3].mmFir.s", DumpEntry{analogFir.channel[3].mmFir.s});
        res.insert_or_assign("analogFir.channel[3].mmFir.r", DumpEntry{analogFir.channel[3].mmFir.r});
        res.insert_or_assign("analogFir.channel[3].mmFir.tSc", DumpEntry{analogFir.channel[3].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[3].mmFir.phase", DumpEntry{analogFir.channel[3].mmFir.phase});
        res.insert_or_assign("analogFir.channel[3].limit.maxLimit", DumpEntry{analogFir.channel[3].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[3].limit.minLimit", DumpEntry{analogFir.channel[3].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[3].limit.filterLength", DumpEntry{analogFir.channel[3].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[4].rFir.m", DumpEntry{analogFir.channel[4].rFir.m});
        res.insert_or_assign("analogFir.channel[4].rFir.n", DumpEntry{analogFir.channel[4].rFir.n});
        res.insert_or_assign("analogFir.channel[4].rFir.s", DumpEntry{analogFir.channel[4].rFir.s});
        res.insert_or_assign("analogFir.channel[4].rFir.r", DumpEntry{analogFir.channel[4].rFir.r});
        res.insert_or_assign("analogFir.channel[4].rFir.tSc", DumpEntry{analogFir.channel[4].rFir.tSc});
        res.insert_or_assign("analogFir.channel[4].rFir.phase", DumpEntry{analogFir.channel[4].rFir.phase});
        res.insert_or_assign("analogFir.channel[4].vFir.m", DumpEntry{analogFir.channel[4].vFir.m});
        res.insert_or_assign("analogFir.channel[4].vFir.n", DumpEntry{analogFir.channel[4].vFir.n});
        res.insert_or_assign("analogFir.channel[4].vFir.s", DumpEntry{analogFir.channel[4].vFir.s});
        res.insert_or_assign("analogFir.channel[4].vFir.r", DumpEntry{analogFir.channel[4].vFir.r});
        res.insert_or_assign("analogFir.channel[4].vFir.tSc", DumpEntry{analogFir.channel[4].vFir.tSc});
        res.insert_or_assign("analogFir.channel[4].vFir.phase", DumpEntry{analogFir.channel[4].vFir.phase});
        res.insert_or_assign("analogFir.channel[4].mmFir.m", DumpEntry{analogFir.channel[4].mmFir.m});
        res.insert_or_assign("analogFir.channel[4].mmFir.n", DumpEntry{analogFir.channel[4].mmFir.n});
        res.insert_or_assign("analogFir.channel[4].mmFir.s", DumpEntry{analogFir.channel[4].mmFir.s});
        res.insert_or_assign("analogFir.channel[4].mmFir.r", DumpEntry{analogFir.channel[4].mmFir.r});
        res.insert_or_assign("analogFir.channel[4].mmFir.tSc", DumpEntry{analogFir.channel[4].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[4].mmFir.phase", DumpEntry{analogFir.channel[4].mmFir.phase});
        res.insert_or_assign("analogFir.channel[4].limit.maxLimit", DumpEntry{analogFir.channel[4].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[4].limit.minLimit", DumpEntry{analogFir.channel[4].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[4].limit.filterLength", DumpEntry{analogFir.channel[4].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[5].rFir.m", DumpEntry{analogFir.channel[5].rFir.m});
        res.insert_or_assign("analogFir.channel[5].rFir.n", DumpEntry{analogFir.channel[5].rFir.n});
        res.insert_or_assign("analogFir.channel[5].rFir.s", DumpEntry{analogFir.channel[5].rFir.s});
        res.insert_or_assign("analogFir.channel[5].rFir.r", DumpEntry{analogFir.channel[5].rFir.r});
        res.insert_or_assign("analogFir.channel[5].rFir.tSc", DumpEntry{analogFir.channel[5].rFir.tSc});
        res.insert_or_assign("analogFir.channel[5].rFir.phase", DumpEntry{analogFir.channel[5].rFir.phase});
        res.insert_or_assign("analogFir.channel[5].vFir.m", DumpEntry{analogFir.channel[5].vFir.m});
        res.insert_or_assign("analogFir.channel[5].vFir.n", DumpEntry{analogFir.channel[5].vFir.n});
        res.insert_or_assign("analogFir.channel[5].vFir.s", DumpEntry{analogFir.channel[5].vFir.s});
        res.insert_or_assign("analogFir.channel[5].vFir.r", DumpEntry{analogFir.channel[5].vFir.r});
        res.insert_or_assign("analogFir.channel[5].vFir.tSc", DumpEntry{analogFir.channel[5].vFir.tSc});
        res.insert_or_assign("analogFir.channel[5].vFir.phase", DumpEntry{analogFir.channel[5].vFir.phase});
        res.insert_or_assign("analogFir.channel[5].mmFir.m", DumpEntry{analogFir.channel[5].mmFir.m});
        res.insert_or_assign("analogFir.channel[5].mmFir.n", DumpEntry{analogFir.channel[5].mmFir.n});
        res.insert_or_assign("analogFir.channel[5].mmFir.s", DumpEntry{analogFir.channel[5].mmFir.s});
        res.insert_or_assign("analogFir.channel[5].mmFir.r", DumpEntry{analogFir.channel[5].mmFir.r});
        res.insert_or_assign("analogFir.channel[5].mmFir.tSc", DumpEntry{analogFir.channel[5].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[5].mmFir.phase", DumpEntry{analogFir.channel[5].mmFir.phase});
        res.insert_or_assign("analogFir.channel[5].limit.maxLimit", DumpEntry{analogFir.channel[5].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[5].limit.minLimit", DumpEntry{analogFir.channel[5].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[5].limit.filterLength", DumpEntry{analogFir.channel[5].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[6].rFir.m", DumpEntry{analogFir.channel[6].rFir.m});
        res.insert_or_assign("analogFir.channel[6].rFir.n", DumpEntry{analogFir.channel[6].rFir.n});
        res.insert_or_assign("analogFir.channel[6].rFir.s", DumpEntry{analogFir.channel[6].rFir.s});
        res.insert_or_assign("analogFir.channel[6].rFir.r", DumpEntry{analogFir.channel[6].rFir.r});
        res.insert_or_assign("analogFir.channel[6].rFir.tSc", DumpEntry{analogFir.channel[6].rFir.tSc});
        res.insert_or_assign("analogFir.channel[6].rFir.phase", DumpEntry{analogFir.channel[6].rFir.phase});
        res.insert_or_assign("analogFir.channel[6].vFir.m", DumpEntry{analogFir.channel[6].vFir.m});
        res.insert_or_assign("analogFir.channel[6].vFir.n", DumpEntry{analogFir.channel[6].vFir.n});
        res.insert_or_assign("analogFir.channel[6].vFir.s", DumpEntry{analogFir.channel[6].vFir.s});
        res.insert_or_assign("analogFir.channel[6].vFir.r", DumpEntry{analogFir.channel[6].vFir.r});
        res.insert_or_assign("analogFir.channel[6].vFir.tSc", DumpEntry{analogFir.channel[6].vFir.tSc});
        res.insert_or_assign("analogFir.channel[6].vFir.phase", DumpEntry{analogFir.channel[6].vFir.phase});
        res.insert_or_assign("analogFir.channel[6].mmFir.m", DumpEntry{analogFir.channel[6].mmFir.m});
        res.insert_or_assign("analogFir.channel[6].mmFir.n", DumpEntry{analogFir.channel[6].mmFir.n});
        res.insert_or_assign("analogFir.channel[6].mmFir.s", DumpEntry{analogFir.channel[6].mmFir.s});
        res.insert_or_assign("analogFir.channel[6].mmFir.r", DumpEntry{analogFir.channel[6].mmFir.r});
        res.insert_or_assign("analogFir.channel[6].mmFir.tSc", DumpEntry{analogFir.channel[6].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[6].mmFir.phase", DumpEntry{analogFir.channel[6].mmFir.phase});
        res.insert_or_assign("analogFir.channel[6].limit.maxLimit", DumpEntry{analogFir.channel[6].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[6].limit.minLimit", DumpEntry{analogFir.channel[6].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[6].limit.filterLength", DumpEntry{analogFir.channel[6].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[7].rFir.m", DumpEntry{analogFir.channel[7].rFir.m});
        res.insert_or_assign("analogFir.channel[7].rFir.n", DumpEntry{analogFir.channel[7].rFir.n});
        res.insert_or_assign("analogFir.channel[7].rFir.s", DumpEntry{analogFir.channel[7].rFir.s});
        res.insert_or_assign("analogFir.channel[7].rFir.r", DumpEntry{analogFir.channel[7].rFir.r});
        res.insert_or_assign("analogFir.channel[7].rFir.tSc", DumpEntry{analogFir.channel[7].rFir.tSc});
        res.insert_or_assign("analogFir.channel[7].rFir.phase", DumpEntry{analogFir.channel[7].rFir.phase});
        res.insert_or_assign("analogFir.channel[7].vFir.m", DumpEntry{analogFir.channel[7].vFir.m});
        res.insert_or_assign("analogFir.channel[7].vFir.n", DumpEntry{analogFir.channel[7].vFir.n});
        res.insert_or_assign("analogFir.channel[7].vFir.s", DumpEntry{analogFir.channel[7].vFir.s});
        res.insert_or_assign("analogFir.channel[7].vFir.r", DumpEntry{analogFir.channel[7].vFir.r});
        res.insert_or_assign("analogFir.channel[7].vFir.tSc", DumpEntry{analogFir.channel[7].vFir.tSc});
        res.insert_or_assign("analogFir.channel[7].vFir.phase", DumpEntry{analogFir.channel[7].vFir.phase});
        res.insert_or_assign("analogFir.channel[7].mmFir.m", DumpEntry{analogFir.channel[7].mmFir.m});
        res.insert_or_assign("analogFir.channel[7].mmFir.n", DumpEntry{analogFir.channel[7].mmFir.n});
        res.insert_or_assign("analogFir.channel[7].mmFir.s", DumpEntry{analogFir.channel[7].mmFir.s});
        res.insert_or_assign("analogFir.channel[7].mmFir.r", DumpEntry{analogFir.channel[7].mmFir.r});
        res.insert_or_assign("analogFir.channel[7].mmFir.tSc", DumpEntry{analogFir.channel[7].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[7].mmFir.phase", DumpEntry{analogFir.channel[7].mmFir.phase});
        res.insert_or_assign("analogFir.channel[7].limit.maxLimit", DumpEntry{analogFir.channel[7].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[7].limit.minLimit", DumpEntry{analogFir.channel[7].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[7].limit.filterLength", DumpEntry{analogFir.channel[7].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[8].rFir.m", DumpEntry{analogFir.channel[8].rFir.m});
        res.insert_or_assign("analogFir.channel[8].rFir.n", DumpEntry{analogFir.channel[8].rFir.n});
        res.insert_or_assign("analogFir.channel[8].rFir.s", DumpEntry{analogFir.channel[8].rFir.s});
        res.insert_or_assign("analogFir.channel[8].rFir.r", DumpEntry{analogFir.channel[8].rFir.r});
        res.insert_or_assign("analogFir.channel[8].rFir.tSc", DumpEntry{analogFir.channel[8].rFir.tSc});
        res.insert_or_assign("analogFir.channel[8].rFir.phase", DumpEntry{analogFir.channel[8].rFir.phase});
        res.insert_or_assign("analogFir.channel[8].vFir.m", DumpEntry{analogFir.channel[8].vFir.m});
        res.insert_or_assign("analogFir.channel[8].vFir.n", DumpEntry{analogFir.channel[8].vFir.n});
        res.insert_or_assign("analogFir.channel[8].vFir.s", DumpEntry{analogFir.channel[8].vFir.s});
        res.insert_or_assign("analogFir.channel[8].vFir.r", DumpEntry{analogFir.channel[8].vFir.r});
        res.insert_or_assign("analogFir.channel[8].vFir.tSc", DumpEntry{analogFir.channel[8].vFir.tSc});
        res.insert_or_assign("analogFir.channel[8].vFir.phase", DumpEntry{analogFir.channel[8].vFir.phase});
        res.insert_or_assign("analogFir.channel[8].mmFir.m", DumpEntry{analogFir.channel[8].mmFir.m});
        res.insert_or_assign("analogFir.channel[8].mmFir.n", DumpEntry{analogFir.channel[8].mmFir.n});
        res.insert_or_assign("analogFir.channel[8].mmFir.s", DumpEntry{analogFir.channel[8].mmFir.s});
        res.insert_or_assign("analogFir.channel[8].mmFir.r", DumpEntry{analogFir.channel[8].mmFir.r});
        res.insert_or_assign("analogFir.channel[8].mmFir.tSc", DumpEntry{analogFir.channel[8].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[8].mmFir.phase", DumpEntry{analogFir.channel[8].mmFir.phase});
        res.insert_or_assign("analogFir.channel[8].limit.maxLimit", DumpEntry{analogFir.channel[8].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[8].limit.minLimit", DumpEntry{analogFir.channel[8].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[8].limit.filterLength", DumpEntry{analogFir.channel[8].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[9].rFir.m", DumpEntry{analogFir.channel[9].rFir.m});
        res.insert_or_assign("analogFir.channel[9].rFir.n", DumpEntry{analogFir.channel[9].rFir.n});
        res.insert_or_assign("analogFir.channel[9].rFir.s", DumpEntry{analogFir.channel[9].rFir.s});
        res.insert_or_assign("analogFir.channel[9].rFir.r", DumpEntry{analogFir.channel[9].rFir.r});
        res.insert_or_assign("analogFir.channel[9].rFir.tSc", DumpEntry{analogFir.channel[9].rFir.tSc});
        res.insert_or_assign("analogFir.channel[9].rFir.phase", DumpEntry{analogFir.channel[9].rFir.phase});
        res.insert_or_assign("analogFir.channel[9].vFir.m", DumpEntry{analogFir.channel[9].vFir.m});
        res.insert_or_assign("analogFir.channel[9].vFir.n", DumpEntry{analogFir.channel[9].vFir.n});
        res.insert_or_assign("analogFir.channel[9].vFir.s", DumpEntry{analogFir.channel[9].vFir.s});
        res.insert_or_assign("analogFir.channel[9].vFir.r", DumpEntry{analogFir.channel[9].vFir.r});
        res.insert_or_assign("analogFir.channel[9].vFir.tSc", DumpEntry{analogFir.channel[9].vFir.tSc});
        res.insert_or_assign("analogFir.channel[9].vFir.phase", DumpEntry{analogFir.channel[9].vFir.phase});
        res.insert_or_assign("analogFir.channel[9].mmFir.m", DumpEntry{analogFir.channel[9].mmFir.m});
        res.insert_or_assign("analogFir.channel[9].mmFir.n", DumpEntry{analogFir.channel[9].mmFir.n});
        res.insert_or_assign("analogFir.channel[9].mmFir.s", DumpEntry{analogFir.channel[9].mmFir.s});
        res.insert_or_assign("analogFir.channel[9].mmFir.r", DumpEntry{analogFir.channel[9].mmFir.r});
        res.insert_or_assign("analogFir.channel[9].mmFir.tSc", DumpEntry{analogFir.channel[9].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[9].mmFir.phase", DumpEntry{analogFir.channel[9].mmFir.phase});
        res.insert_or_assign("analogFir.channel[9].limit.maxLimit", DumpEntry{analogFir.channel[9].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[9].limit.minLimit", DumpEntry{analogFir.channel[9].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[9].limit.filterLength", DumpEntry{analogFir.channel[9].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[10].rFir.m", DumpEntry{analogFir.channel[10].rFir.m});
        res.insert_or_assign("analogFir.channel[10].rFir.n", DumpEntry{analogFir.channel[10].rFir.n});
        res.insert_or_assign("analogFir.channel[10].rFir.s", DumpEntry{analogFir.channel[10].rFir.s});
        res.insert_or_assign("analogFir.channel[10].rFir.r", DumpEntry{analogFir.channel[10].rFir.r});
        res.insert_or_assign("analogFir.channel[10].rFir.tSc", DumpEntry{analogFir.channel[10].rFir.tSc});
        res.insert_or_assign("analogFir.channel[10].rFir.phase", DumpEntry{analogFir.channel[10].rFir.phase});
        res.insert_or_assign("analogFir.channel[10].vFir.m", DumpEntry{analogFir.channel[10].vFir.m});
        res.insert_or_assign("analogFir.channel[10].vFir.n", DumpEntry{analogFir.channel[10].vFir.n});
        res.insert_or_assign("analogFir.channel[10].vFir.s", DumpEntry{analogFir.channel[10].vFir.s});
        res.insert_or_assign("analogFir.channel[10].vFir.r", DumpEntry{analogFir.channel[10].vFir.r});
        res.insert_or_assign("analogFir.channel[10].vFir.tSc", DumpEntry{analogFir.channel[10].vFir.tSc});
        res.insert_or_assign("analogFir.channel[10].vFir.phase", DumpEntry{analogFir.channel[10].vFir.phase});
        res.insert_or_assign("analogFir.channel[10].mmFir.m", DumpEntry{analogFir.channel[10].mmFir.m});
        res.insert_or_assign("analogFir.channel[10].mmFir.n", DumpEntry{analogFir.channel[10].mmFir.n});
        res.insert_or_assign("analogFir.channel[10].mmFir.s", DumpEntry{analogFir.channel[10].mmFir.s});
        res.insert_or_assign("analogFir.channel[10].mmFir.r", DumpEntry{analogFir.channel[10].mmFir.r});
        res.insert_or_assign("analogFir.channel[10].mmFir.tSc", DumpEntry{analogFir.channel[10].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[10].mmFir.phase", DumpEntry{analogFir.channel[10].mmFir.phase});
        res.insert_or_assign("analogFir.channel[10].limit.maxLimit", DumpEntry{analogFir.channel[10].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[10].limit.minLimit", DumpEntry{analogFir.channel[10].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[10].limit.filterLength", DumpEntry{analogFir.channel[10].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[11].rFir.m", DumpEntry{analogFir.channel[11].rFir.m});
        res.insert_or_assign("analogFir.channel[11].rFir.n", DumpEntry{analogFir.channel[11].rFir.n});
        res.insert_or_assign("analogFir.channel[11].rFir.s", DumpEntry{analogFir.channel[11].rFir.s});
        res.insert_or_assign("analogFir.channel[11].rFir.r", DumpEntry{analogFir.channel[11].rFir.r});
        res.insert_or_assign("analogFir.channel[11].rFir.tSc", DumpEntry{analogFir.channel[11].rFir.tSc});
        res.insert_or_assign("analogFir.channel[11].rFir.phase", DumpEntry{analogFir.channel[11].rFir.phase});
        res.insert_or_assign("analogFir.channel[11].vFir.m", DumpEntry{analogFir.channel[11].vFir.m});
        res.insert_or_assign("analogFir.channel[11].vFir.n", DumpEntry{analogFir.channel[11].vFir.n});
        res.insert_or_assign("analogFir.channel[11].vFir.s", DumpEntry{analogFir.channel[11].vFir.s});
        res.insert_or_assign("analogFir.channel[11].vFir.r", DumpEntry{analogFir.channel[11].vFir.r});
        res.insert_or_assign("analogFir.channel[11].vFir.tSc", DumpEntry{analogFir.channel[11].vFir.tSc});
        res.insert_or_assign("analogFir.channel[11].vFir.phase", DumpEntry{analogFir.channel[11].vFir.phase});
        res.insert_or_assign("analogFir.channel[11].mmFir.m", DumpEntry{analogFir.channel[11].mmFir.m});
        res.insert_or_assign("analogFir.channel[11].mmFir.n", DumpEntry{analogFir.channel[11].mmFir.n});
        res.insert_or_assign("analogFir.channel[11].mmFir.s", DumpEntry{analogFir.channel[11].mmFir.s});
        res.insert_or_assign("analogFir.channel[11].mmFir.r", DumpEntry{analogFir.channel[11].mmFir.r});
        res.insert_or_assign("analogFir.channel[11].mmFir.tSc", DumpEntry{analogFir.channel[11].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[11].mmFir.phase", DumpEntry{analogFir.channel[11].mmFir.phase});
        res.insert_or_assign("analogFir.channel[11].limit.maxLimit", DumpEntry{analogFir.channel[11].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[11].limit.minLimit", DumpEntry{analogFir.channel[11].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[11].limit.filterLength", DumpEntry{analogFir.channel[11].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[12].rFir.m", DumpEntry{analogFir.channel[12].rFir.m});
        res.insert_or_assign("analogFir.channel[12].rFir.n", DumpEntry{analogFir.channel[12].rFir.n});
        res.insert_or_assign("analogFir.channel[12].rFir.s", DumpEntry{analogFir.channel[12].rFir.s});
        res.insert_or_assign("analogFir.channel[12].rFir.r", DumpEntry{analogFir.channel[12].rFir.r});
        res.insert_or_assign("analogFir.channel[12].rFir.tSc", DumpEntry{analogFir.channel[12].rFir.tSc});
        res.insert_or_assign("analogFir.channel[12].rFir.phase", DumpEntry{analogFir.channel[12].rFir.phase});
        res.insert_or_assign("analogFir.channel[12].vFir.m", DumpEntry{analogFir.channel[12].vFir.m});
        res.insert_or_assign("analogFir.channel[12].vFir.n", DumpEntry{analogFir.channel[12].vFir.n});
        res.insert_or_assign("analogFir.channel[12].vFir.s", DumpEntry{analogFir.channel[12].vFir.s});
        res.insert_or_assign("analogFir.channel[12].vFir.r", DumpEntry{analogFir.channel[12].vFir.r});
        res.insert_or_assign("analogFir.channel[12].vFir.tSc", DumpEntry{analogFir.channel[12].vFir.tSc});
        res.insert_or_assign("analogFir.channel[12].vFir.phase", DumpEntry{analogFir.channel[12].vFir.phase});
        res.insert_or_assign("analogFir.channel[12].mmFir.m", DumpEntry{analogFir.channel[12].mmFir.m});
        res.insert_or_assign("analogFir.channel[12].mmFir.n", DumpEntry{analogFir.channel[12].mmFir.n});
        res.insert_or_assign("analogFir.channel[12].mmFir.s", DumpEntry{analogFir.channel[12].mmFir.s});
        res.insert_or_assign("analogFir.channel[12].mmFir.r", DumpEntry{analogFir.channel[12].mmFir.r});
        res.insert_or_assign("analogFir.channel[12].mmFir.tSc", DumpEntry{analogFir.channel[12].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[12].mmFir.phase", DumpEntry{analogFir.channel[12].mmFir.phase});
        res.insert_or_assign("analogFir.channel[12].limit.maxLimit", DumpEntry{analogFir.channel[12].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[12].limit.minLimit", DumpEntry{analogFir.channel[12].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[12].limit.filterLength", DumpEntry{analogFir.channel[12].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[13].rFir.m", DumpEntry{analogFir.channel[13].rFir.m});
        res.insert_or_assign("analogFir.channel[13].rFir.n", DumpEntry{analogFir.channel[13].rFir.n});
        res.insert_or_assign("analogFir.channel[13].rFir.s", DumpEntry{analogFir.channel[13].rFir.s});
        res.insert_or_assign("analogFir.channel[13].rFir.r", DumpEntry{analogFir.channel[13].rFir.r});
        res.insert_or_assign("analogFir.channel[13].rFir.tSc", DumpEntry{analogFir.channel[13].rFir.tSc});
        res.insert_or_assign("analogFir.channel[13].rFir.phase", DumpEntry{analogFir.channel[13].rFir.phase});
        res.insert_or_assign("analogFir.channel[13].vFir.m", DumpEntry{analogFir.channel[13].vFir.m});
        res.insert_or_assign("analogFir.channel[13].vFir.n", DumpEntry{analogFir.channel[13].vFir.n});
        res.insert_or_assign("analogFir.channel[13].vFir.s", DumpEntry{analogFir.channel[13].vFir.s});
        res.insert_or_assign("analogFir.channel[13].vFir.r", DumpEntry{analogFir.channel[13].vFir.r});
        res.insert_or_assign("analogFir.channel[13].vFir.tSc", DumpEntry{analogFir.channel[13].vFir.tSc});
        res.insert_or_assign("analogFir.channel[13].vFir.phase", DumpEntry{analogFir.channel[13].vFir.phase});
        res.insert_or_assign("analogFir.channel[13].mmFir.m", DumpEntry{analogFir.channel[13].mmFir.m});
        res.insert_or_assign("analogFir.channel[13].mmFir.n", DumpEntry{analogFir.channel[13].mmFir.n});
        res.insert_or_assign("analogFir.channel[13].mmFir.s", DumpEntry{analogFir.channel[13].mmFir.s});
        res.insert_or_assign("analogFir.channel[13].mmFir.r", DumpEntry{analogFir.channel[13].mmFir.r});
        res.insert_or_assign("analogFir.channel[13].mmFir.tSc", DumpEntry{analogFir.channel[13].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[13].mmFir.phase", DumpEntry{analogFir.channel[13].mmFir.phase});
        res.insert_or_assign("analogFir.channel[13].limit.maxLimit", DumpEntry{analogFir.channel[13].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[13].limit.minLimit", DumpEntry{analogFir.channel[13].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[13].limit.filterLength", DumpEntry{analogFir.channel[13].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[14].rFir.m", DumpEntry{analogFir.channel[14].rFir.m});
        res.insert_or_assign("analogFir.channel[14].rFir.n", DumpEntry{analogFir.channel[14].rFir.n});
        res.insert_or_assign("analogFir.channel[14].rFir.s", DumpEntry{analogFir.channel[14].rFir.s});
        res.insert_or_assign("analogFir.channel[14].rFir.r", DumpEntry{analogFir.channel[14].rFir.r});
        res.insert_or_assign("analogFir.channel[14].rFir.tSc", DumpEntry{analogFir.channel[14].rFir.tSc});
        res.insert_or_assign("analogFir.channel[14].rFir.phase", DumpEntry{analogFir.channel[14].rFir.phase});
        res.insert_or_assign("analogFir.channel[14].vFir.m", DumpEntry{analogFir.channel[14].vFir.m});
        res.insert_or_assign("analogFir.channel[14].vFir.n", DumpEntry{analogFir.channel[14].vFir.n});
        res.insert_or_assign("analogFir.channel[14].vFir.s", DumpEntry{analogFir.channel[14].vFir.s});
        res.insert_or_assign("analogFir.channel[14].vFir.r", DumpEntry{analogFir.channel[14].vFir.r});
        res.insert_or_assign("analogFir.channel[14].vFir.tSc", DumpEntry{analogFir.channel[14].vFir.tSc});
        res.insert_or_assign("analogFir.channel[14].vFir.phase", DumpEntry{analogFir.channel[14].vFir.phase});
        res.insert_or_assign("analogFir.channel[14].mmFir.m", DumpEntry{analogFir.channel[14].mmFir.m});
        res.insert_or_assign("analogFir.channel[14].mmFir.n", DumpEntry{analogFir.channel[14].mmFir.n});
        res.insert_or_assign("analogFir.channel[14].mmFir.s", DumpEntry{analogFir.channel[14].mmFir.s});
        res.insert_or_assign("analogFir.channel[14].mmFir.r", DumpEntry{analogFir.channel[14].mmFir.r});
        res.insert_or_assign("analogFir.channel[14].mmFir.tSc", DumpEntry{analogFir.channel[14].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[14].mmFir.phase", DumpEntry{analogFir.channel[14].mmFir.phase});
        res.insert_or_assign("analogFir.channel[14].limit.maxLimit", DumpEntry{analogFir.channel[14].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[14].limit.minLimit", DumpEntry{analogFir.channel[14].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[14].limit.filterLength", DumpEntry{analogFir.channel[14].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[15].rFir.m", DumpEntry{analogFir.channel[15].rFir.m});
        res.insert_or_assign("analogFir.channel[15].rFir.n", DumpEntry{analogFir.channel[15].rFir.n});
        res.insert_or_assign("analogFir.channel[15].rFir.s", DumpEntry{analogFir.channel[15].rFir.s});
        res.insert_or_assign("analogFir.channel[15].rFir.r", DumpEntry{analogFir.channel[15].rFir.r});
        res.insert_or_assign("analogFir.channel[15].rFir.tSc", DumpEntry{analogFir.channel[15].rFir.tSc});
        res.insert_or_assign("analogFir.channel[15].rFir.phase", DumpEntry{analogFir.channel[15].rFir.phase});
        res.insert_or_assign("analogFir.channel[15].vFir.m", DumpEntry{analogFir.channel[15].vFir.m});
        res.insert_or_assign("analogFir.channel[15].vFir.n", DumpEntry{analogFir.channel[15].vFir.n});
        res.insert_or_assign("analogFir.channel[15].vFir.s", DumpEntry{analogFir.channel[15].vFir.s});
        res.insert_or_assign("analogFir.channel[15].vFir.r", DumpEntry{analogFir.channel[15].vFir.r});
        res.insert_or_assign("analogFir.channel[15].vFir.tSc", DumpEntry{analogFir.channel[15].vFir.tSc});
        res.insert_or_assign("analogFir.channel[15].vFir.phase", DumpEntry{analogFir.channel[15].vFir.phase});
        res.insert_or_assign("analogFir.channel[15].mmFir.m", DumpEntry{analogFir.channel[15].mmFir.m});
        res.insert_or_assign("analogFir.channel[15].mmFir.n", DumpEntry{analogFir.channel[15].mmFir.n});
        res.insert_or_assign("analogFir.channel[15].mmFir.s", DumpEntry{analogFir.channel[15].mmFir.s});
        res.insert_or_assign("analogFir.channel[15].mmFir.r", DumpEntry{analogFir.channel[15].mmFir.r});
        res.insert_or_assign("analogFir.channel[15].mmFir.tSc", DumpEntry{analogFir.channel[15].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[15].mmFir.phase", DumpEntry{analogFir.channel[15].mmFir.phase});
        res.insert_or_assign("analogFir.channel[15].limit.maxLimit", DumpEntry{analogFir.channel[15].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[15].limit.minLimit", DumpEntry{analogFir.channel[15].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[15].limit.filterLength", DumpEntry{analogFir.channel[15].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[16].rFir.m", DumpEntry{analogFir.channel[16].rFir.m});
        res.insert_or_assign("analogFir.channel[16].rFir.n", DumpEntry{analogFir.channel[16].rFir.n});
        res.insert_or_assign("analogFir.channel[16].rFir.s", DumpEntry{analogFir.channel[16].rFir.s});
        res.insert_or_assign("analogFir.channel[16].rFir.r", DumpEntry{analogFir.channel[16].rFir.r});
        res.insert_or_assign("analogFir.channel[16].rFir.tSc", DumpEntry{analogFir.channel[16].rFir.tSc});
        res.insert_or_assign("analogFir.channel[16].rFir.phase", DumpEntry{analogFir.channel[16].rFir.phase});
        res.insert_or_assign("analogFir.channel[16].vFir.m", DumpEntry{analogFir.channel[16].vFir.m});
        res.insert_or_assign("analogFir.channel[16].vFir.n", DumpEntry{analogFir.channel[16].vFir.n});
        res.insert_or_assign("analogFir.channel[16].vFir.s", DumpEntry{analogFir.channel[16].vFir.s});
        res.insert_or_assign("analogFir.channel[16].vFir.r", DumpEntry{analogFir.channel[16].vFir.r});
        res.insert_or_assign("analogFir.channel[16].vFir.tSc", DumpEntry{analogFir.channel[16].vFir.tSc});
        res.insert_or_assign("analogFir.channel[16].vFir.phase", DumpEntry{analogFir.channel[16].vFir.phase});
        res.insert_or_assign("analogFir.channel[16].mmFir.m", DumpEntry{analogFir.channel[16].mmFir.m});
        res.insert_or_assign("analogFir.channel[16].mmFir.n", DumpEntry{analogFir.channel[16].mmFir.n});
        res.insert_or_assign("analogFir.channel[16].mmFir.s", DumpEntry{analogFir.channel[16].mmFir.s});
        res.insert_or_assign("analogFir.channel[16].mmFir.r", DumpEntry{analogFir.channel[16].mmFir.r});
        res.insert_or_assign("analogFir.channel[16].mmFir.tSc", DumpEntry{analogFir.channel[16].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[16].mmFir.phase", DumpEntry{analogFir.channel[16].mmFir.phase});
        res.insert_or_assign("analogFir.channel[16].limit.maxLimit", DumpEntry{analogFir.channel[16].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[16].limit.minLimit", DumpEntry{analogFir.channel[16].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[16].limit.filterLength", DumpEntry{analogFir.channel[16].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[17].rFir.m", DumpEntry{analogFir.channel[17].rFir.m});
        res.insert_or_assign("analogFir.channel[17].rFir.n", DumpEntry{analogFir.channel[17].rFir.n});
        res.insert_or_assign("analogFir.channel[17].rFir.s", DumpEntry{analogFir.channel[17].rFir.s});
        res.insert_or_assign("analogFir.channel[17].rFir.r", DumpEntry{analogFir.channel[17].rFir.r});
        res.insert_or_assign("analogFir.channel[17].rFir.tSc", DumpEntry{analogFir.channel[17].rFir.tSc});
        res.insert_or_assign("analogFir.channel[17].rFir.phase", DumpEntry{analogFir.channel[17].rFir.phase});
        res.insert_or_assign("analogFir.channel[17].vFir.m", DumpEntry{analogFir.channel[17].vFir.m});
        res.insert_or_assign("analogFir.channel[17].vFir.n", DumpEntry{analogFir.channel[17].vFir.n});
        res.insert_or_assign("analogFir.channel[17].vFir.s", DumpEntry{analogFir.channel[17].vFir.s});
        res.insert_or_assign("analogFir.channel[17].vFir.r", DumpEntry{analogFir.channel[17].vFir.r});
        res.insert_or_assign("analogFir.channel[17].vFir.tSc", DumpEntry{analogFir.channel[17].vFir.tSc});
        res.insert_or_assign("analogFir.channel[17].vFir.phase", DumpEntry{analogFir.channel[17].vFir.phase});
        res.insert_or_assign("analogFir.channel[17].mmFir.m", DumpEntry{analogFir.channel[17].mmFir.m});
        res.insert_or_assign("analogFir.channel[17].mmFir.n", DumpEntry{analogFir.channel[17].mmFir.n});
        res.insert_or_assign("analogFir.channel[17].mmFir.s", DumpEntry{analogFir.channel[17].mmFir.s});
        res.insert_or_assign("analogFir.channel[17].mmFir.r", DumpEntry{analogFir.channel[17].mmFir.r});
        res.insert_or_assign("analogFir.channel[17].mmFir.tSc", DumpEntry{analogFir.channel[17].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[17].mmFir.phase", DumpEntry{analogFir.channel[17].mmFir.phase});
        res.insert_or_assign("analogFir.channel[17].limit.maxLimit", DumpEntry{analogFir.channel[17].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[17].limit.minLimit", DumpEntry{analogFir.channel[17].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[17].limit.filterLength", DumpEntry{analogFir.channel[17].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[18].rFir.m", DumpEntry{analogFir.channel[18].rFir.m});
        res.insert_or_assign("analogFir.channel[18].rFir.n", DumpEntry{analogFir.channel[18].rFir.n});
        res.insert_or_assign("analogFir.channel[18].rFir.s", DumpEntry{analogFir.channel[18].rFir.s});
        res.insert_or_assign("analogFir.channel[18].rFir.r", DumpEntry{analogFir.channel[18].rFir.r});
        res.insert_or_assign("analogFir.channel[18].rFir.tSc", DumpEntry{analogFir.channel[18].rFir.tSc});
        res.insert_or_assign("analogFir.channel[18].rFir.phase", DumpEntry{analogFir.channel[18].rFir.phase});
        res.insert_or_assign("analogFir.channel[18].vFir.m", DumpEntry{analogFir.channel[18].vFir.m});
        res.insert_or_assign("analogFir.channel[18].vFir.n", DumpEntry{analogFir.channel[18].vFir.n});
        res.insert_or_assign("analogFir.channel[18].vFir.s", DumpEntry{analogFir.channel[18].vFir.s});
        res.insert_or_assign("analogFir.channel[18].vFir.r", DumpEntry{analogFir.channel[18].vFir.r});
        res.insert_or_assign("analogFir.channel[18].vFir.tSc", DumpEntry{analogFir.channel[18].vFir.tSc});
        res.insert_or_assign("analogFir.channel[18].vFir.phase", DumpEntry{analogFir.channel[18].vFir.phase});
        res.insert_or_assign("analogFir.channel[18].mmFir.m", DumpEntry{analogFir.channel[18].mmFir.m});
        res.insert_or_assign("analogFir.channel[18].mmFir.n", DumpEntry{analogFir.channel[18].mmFir.n});
        res.insert_or_assign("analogFir.channel[18].mmFir.s", DumpEntry{analogFir.channel[18].mmFir.s});
        res.insert_or_assign("analogFir.channel[18].mmFir.r", DumpEntry{analogFir.channel[18].mmFir.r});
        res.insert_or_assign("analogFir.channel[18].mmFir.tSc", DumpEntry{analogFir.channel[18].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[18].mmFir.phase", DumpEntry{analogFir.channel[18].mmFir.phase});
        res.insert_or_assign("analogFir.channel[18].limit.maxLimit", DumpEntry{analogFir.channel[18].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[18].limit.minLimit", DumpEntry{analogFir.channel[18].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[18].limit.filterLength", DumpEntry{analogFir.channel[18].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[19].rFir.m", DumpEntry{analogFir.channel[19].rFir.m});
        res.insert_or_assign("analogFir.channel[19].rFir.n", DumpEntry{analogFir.channel[19].rFir.n});
        res.insert_or_assign("analogFir.channel[19].rFir.s", DumpEntry{analogFir.channel[19].rFir.s});
        res.insert_or_assign("analogFir.channel[19].rFir.r", DumpEntry{analogFir.channel[19].rFir.r});
        res.insert_or_assign("analogFir.channel[19].rFir.tSc", DumpEntry{analogFir.channel[19].rFir.tSc});
        res.insert_or_assign("analogFir.channel[19].rFir.phase", DumpEntry{analogFir.channel[19].rFir.phase});
        res.insert_or_assign("analogFir.channel[19].vFir.m", DumpEntry{analogFir.channel[19].vFir.m});
        res.insert_or_assign("analogFir.channel[19].vFir.n", DumpEntry{analogFir.channel[19].vFir.n});
        res.insert_or_assign("analogFir.channel[19].vFir.s", DumpEntry{analogFir.channel[19].vFir.s});
        res.insert_or_assign("analogFir.channel[19].vFir.r", DumpEntry{analogFir.channel[19].vFir.r});
        res.insert_or_assign("analogFir.channel[19].vFir.tSc", DumpEntry{analogFir.channel[19].vFir.tSc});
        res.insert_or_assign("analogFir.channel[19].vFir.phase", DumpEntry{analogFir.channel[19].vFir.phase});
        res.insert_or_assign("analogFir.channel[19].mmFir.m", DumpEntry{analogFir.channel[19].mmFir.m});
        res.insert_or_assign("analogFir.channel[19].mmFir.n", DumpEntry{analogFir.channel[19].mmFir.n});
        res.insert_or_assign("analogFir.channel[19].mmFir.s", DumpEntry{analogFir.channel[19].mmFir.s});
        res.insert_or_assign("analogFir.channel[19].mmFir.r", DumpEntry{analogFir.channel[19].mmFir.r});
        res.insert_or_assign("analogFir.channel[19].mmFir.tSc", DumpEntry{analogFir.channel[19].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[19].mmFir.phase", DumpEntry{analogFir.channel[19].mmFir.phase});
        res.insert_or_assign("analogFir.channel[19].limit.maxLimit", DumpEntry{analogFir.channel[19].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[19].limit.minLimit", DumpEntry{analogFir.channel[19].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[19].limit.filterLength", DumpEntry{analogFir.channel[19].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[20].rFir.m", DumpEntry{analogFir.channel[20].rFir.m});
        res.insert_or_assign("analogFir.channel[20].rFir.n", DumpEntry{analogFir.channel[20].rFir.n});
        res.insert_or_assign("analogFir.channel[20].rFir.s", DumpEntry{analogFir.channel[20].rFir.s});
        res.insert_or_assign("analogFir.channel[20].rFir.r", DumpEntry{analogFir.channel[20].rFir.r});
        res.insert_or_assign("analogFir.channel[20].rFir.tSc", DumpEntry{analogFir.channel[20].rFir.tSc});
        res.insert_or_assign("analogFir.channel[20].rFir.phase", DumpEntry{analogFir.channel[20].rFir.phase});
        res.insert_or_assign("analogFir.channel[20].vFir.m", DumpEntry{analogFir.channel[20].vFir.m});
        res.insert_or_assign("analogFir.channel[20].vFir.n", DumpEntry{analogFir.channel[20].vFir.n});
        res.insert_or_assign("analogFir.channel[20].vFir.s", DumpEntry{analogFir.channel[20].vFir.s});
        res.insert_or_assign("analogFir.channel[20].vFir.r", DumpEntry{analogFir.channel[20].vFir.r});
        res.insert_or_assign("analogFir.channel[20].vFir.tSc", DumpEntry{analogFir.channel[20].vFir.tSc});
        res.insert_or_assign("analogFir.channel[20].vFir.phase", DumpEntry{analogFir.channel[20].vFir.phase});
        res.insert_or_assign("analogFir.channel[20].mmFir.m", DumpEntry{analogFir.channel[20].mmFir.m});
        res.insert_or_assign("analogFir.channel[20].mmFir.n", DumpEntry{analogFir.channel[20].mmFir.n});
        res.insert_or_assign("analogFir.channel[20].mmFir.s", DumpEntry{analogFir.channel[20].mmFir.s});
        res.insert_or_assign("analogFir.channel[20].mmFir.r", DumpEntry{analogFir.channel[20].mmFir.r});
        res.insert_or_assign("analogFir.channel[20].mmFir.tSc", DumpEntry{analogFir.channel[20].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[20].mmFir.phase", DumpEntry{analogFir.channel[20].mmFir.phase});
        res.insert_or_assign("analogFir.channel[20].limit.maxLimit", DumpEntry{analogFir.channel[20].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[20].limit.minLimit", DumpEntry{analogFir.channel[20].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[20].limit.filterLength", DumpEntry{analogFir.channel[20].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[21].rFir.m", DumpEntry{analogFir.channel[21].rFir.m});
        res.insert_or_assign("analogFir.channel[21].rFir.n", DumpEntry{analogFir.channel[21].rFir.n});
        res.insert_or_assign("analogFir.channel[21].rFir.s", DumpEntry{analogFir.channel[21].rFir.s});
        res.insert_or_assign("analogFir.channel[21].rFir.r", DumpEntry{analogFir.channel[21].rFir.r});
        res.insert_or_assign("analogFir.channel[21].rFir.tSc", DumpEntry{analogFir.channel[21].rFir.tSc});
        res.insert_or_assign("analogFir.channel[21].rFir.phase", DumpEntry{analogFir.channel[21].rFir.phase});
        res.insert_or_assign("analogFir.channel[21].vFir.m", DumpEntry{analogFir.channel[21].vFir.m});
        res.insert_or_assign("analogFir.channel[21].vFir.n", DumpEntry{analogFir.channel[21].vFir.n});
        res.insert_or_assign("analogFir.channel[21].vFir.s", DumpEntry{analogFir.channel[21].vFir.s});
        res.insert_or_assign("analogFir.channel[21].vFir.r", DumpEntry{analogFir.channel[21].vFir.r});
        res.insert_or_assign("analogFir.channel[21].vFir.tSc", DumpEntry{analogFir.channel[21].vFir.tSc});
        res.insert_or_assign("analogFir.channel[21].vFir.phase", DumpEntry{analogFir.channel[21].vFir.phase});
        res.insert_or_assign("analogFir.channel[21].mmFir.m", DumpEntry{analogFir.channel[21].mmFir.m});
        res.insert_or_assign("analogFir.channel[21].mmFir.n", DumpEntry{analogFir.channel[21].mmFir.n});
        res.insert_or_assign("analogFir.channel[21].mmFir.s", DumpEntry{analogFir.channel[21].mmFir.s});
        res.insert_or_assign("analogFir.channel[21].mmFir.r", DumpEntry{analogFir.channel[21].mmFir.r});
        res.insert_or_assign("analogFir.channel[21].mmFir.tSc", DumpEntry{analogFir.channel[21].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[21].mmFir.phase", DumpEntry{analogFir.channel[21].mmFir.phase});
        res.insert_or_assign("analogFir.channel[21].limit.maxLimit", DumpEntry{analogFir.channel[21].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[21].limit.minLimit", DumpEntry{analogFir.channel[21].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[21].limit.filterLength", DumpEntry{analogFir.channel[21].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[22].rFir.m", DumpEntry{analogFir.channel[22].rFir.m});
        res.insert_or_assign("analogFir.channel[22].rFir.n", DumpEntry{analogFir.channel[22].rFir.n});
        res.insert_or_assign("analogFir.channel[22].rFir.s", DumpEntry{analogFir.channel[22].rFir.s});
        res.insert_or_assign("analogFir.channel[22].rFir.r", DumpEntry{analogFir.channel[22].rFir.r});
        res.insert_or_assign("analogFir.channel[22].rFir.tSc", DumpEntry{analogFir.channel[22].rFir.tSc});
        res.insert_or_assign("analogFir.channel[22].rFir.phase", DumpEntry{analogFir.channel[22].rFir.phase});
        res.insert_or_assign("analogFir.channel[22].vFir.m", DumpEntry{analogFir.channel[22].vFir.m});
        res.insert_or_assign("analogFir.channel[22].vFir.n", DumpEntry{analogFir.channel[22].vFir.n});
        res.insert_or_assign("analogFir.channel[22].vFir.s", DumpEntry{analogFir.channel[22].vFir.s});
        res.insert_or_assign("analogFir.channel[22].vFir.r", DumpEntry{analogFir.channel[22].vFir.r});
        res.insert_or_assign("analogFir.channel[22].vFir.tSc", DumpEntry{analogFir.channel[22].vFir.tSc});
        res.insert_or_assign("analogFir.channel[22].vFir.phase", DumpEntry{analogFir.channel[22].vFir.phase});
        res.insert_or_assign("analogFir.channel[22].mmFir.m", DumpEntry{analogFir.channel[22].mmFir.m});
        res.insert_or_assign("analogFir.channel[22].mmFir.n", DumpEntry{analogFir.channel[22].mmFir.n});
        res.insert_or_assign("analogFir.channel[22].mmFir.s", DumpEntry{analogFir.channel[22].mmFir.s});
        res.insert_or_assign("analogFir.channel[22].mmFir.r", DumpEntry{analogFir.channel[22].mmFir.r});
        res.insert_or_assign("analogFir.channel[22].mmFir.tSc", DumpEntry{analogFir.channel[22].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[22].mmFir.phase", DumpEntry{analogFir.channel[22].mmFir.phase});
        res.insert_or_assign("analogFir.channel[22].limit.maxLimit", DumpEntry{analogFir.channel[22].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[22].limit.minLimit", DumpEntry{analogFir.channel[22].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[22].limit.filterLength", DumpEntry{analogFir.channel[22].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[23].rFir.m", DumpEntry{analogFir.channel[23].rFir.m});
        res.insert_or_assign("analogFir.channel[23].rFir.n", DumpEntry{analogFir.channel[23].rFir.n});
        res.insert_or_assign("analogFir.channel[23].rFir.s", DumpEntry{analogFir.channel[23].rFir.s});
        res.insert_or_assign("analogFir.channel[23].rFir.r", DumpEntry{analogFir.channel[23].rFir.r});
        res.insert_or_assign("analogFir.channel[23].rFir.tSc", DumpEntry{analogFir.channel[23].rFir.tSc});
        res.insert_or_assign("analogFir.channel[23].rFir.phase", DumpEntry{analogFir.channel[23].rFir.phase});
        res.insert_or_assign("analogFir.channel[23].vFir.m", DumpEntry{analogFir.channel[23].vFir.m});
        res.insert_or_assign("analogFir.channel[23].vFir.n", DumpEntry{analogFir.channel[23].vFir.n});
        res.insert_or_assign("analogFir.channel[23].vFir.s", DumpEntry{analogFir.channel[23].vFir.s});
        res.insert_or_assign("analogFir.channel[23].vFir.r", DumpEntry{analogFir.channel[23].vFir.r});
        res.insert_or_assign("analogFir.channel[23].vFir.tSc", DumpEntry{analogFir.channel[23].vFir.tSc});
        res.insert_or_assign("analogFir.channel[23].vFir.phase", DumpEntry{analogFir.channel[23].vFir.phase});
        res.insert_or_assign("analogFir.channel[23].mmFir.m", DumpEntry{analogFir.channel[23].mmFir.m});
        res.insert_or_assign("analogFir.channel[23].mmFir.n", DumpEntry{analogFir.channel[23].mmFir.n});
        res.insert_or_assign("analogFir.channel[23].mmFir.s", DumpEntry{analogFir.channel[23].mmFir.s});
        res.insert_or_assign("analogFir.channel[23].mmFir.r", DumpEntry{analogFir.channel[23].mmFir.r});
        res.insert_or_assign("analogFir.channel[23].mmFir.tSc", DumpEntry{analogFir.channel[23].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[23].mmFir.phase", DumpEntry{analogFir.channel[23].mmFir.phase});
        res.insert_or_assign("analogFir.channel[23].limit.maxLimit", DumpEntry{analogFir.channel[23].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[23].limit.minLimit", DumpEntry{analogFir.channel[23].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[23].limit.filterLength", DumpEntry{analogFir.channel[23].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[24].rFir.m", DumpEntry{analogFir.channel[24].rFir.m});
        res.insert_or_assign("analogFir.channel[24].rFir.n", DumpEntry{analogFir.channel[24].rFir.n});
        res.insert_or_assign("analogFir.channel[24].rFir.s", DumpEntry{analogFir.channel[24].rFir.s});
        res.insert_or_assign("analogFir.channel[24].rFir.r", DumpEntry{analogFir.channel[24].rFir.r});
        res.insert_or_assign("analogFir.channel[24].rFir.tSc", DumpEntry{analogFir.channel[24].rFir.tSc});
        res.insert_or_assign("analogFir.channel[24].rFir.phase", DumpEntry{analogFir.channel[24].rFir.phase});
        res.insert_or_assign("analogFir.channel[24].vFir.m", DumpEntry{analogFir.channel[24].vFir.m});
        res.insert_or_assign("analogFir.channel[24].vFir.n", DumpEntry{analogFir.channel[24].vFir.n});
        res.insert_or_assign("analogFir.channel[24].vFir.s", DumpEntry{analogFir.channel[24].vFir.s});
        res.insert_or_assign("analogFir.channel[24].vFir.r", DumpEntry{analogFir.channel[24].vFir.r});
        res.insert_or_assign("analogFir.channel[24].vFir.tSc", DumpEntry{analogFir.channel[24].vFir.tSc});
        res.insert_or_assign("analogFir.channel[24].vFir.phase", DumpEntry{analogFir.channel[24].vFir.phase});
        res.insert_or_assign("analogFir.channel[24].mmFir.m", DumpEntry{analogFir.channel[24].mmFir.m});
        res.insert_or_assign("analogFir.channel[24].mmFir.n", DumpEntry{analogFir.channel[24].mmFir.n});
        res.insert_or_assign("analogFir.channel[24].mmFir.s", DumpEntry{analogFir.channel[24].mmFir.s});
        res.insert_or_assign("analogFir.channel[24].mmFir.r", DumpEntry{analogFir.channel[24].mmFir.r});
        res.insert_or_assign("analogFir.channel[24].mmFir.tSc", DumpEntry{analogFir.channel[24].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[24].mmFir.phase", DumpEntry{analogFir.channel[24].mmFir.phase});
        res.insert_or_assign("analogFir.channel[24].limit.maxLimit", DumpEntry{analogFir.channel[24].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[24].limit.minLimit", DumpEntry{analogFir.channel[24].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[24].limit.filterLength", DumpEntry{analogFir.channel[24].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[25].rFir.m", DumpEntry{analogFir.channel[25].rFir.m});
        res.insert_or_assign("analogFir.channel[25].rFir.n", DumpEntry{analogFir.channel[25].rFir.n});
        res.insert_or_assign("analogFir.channel[25].rFir.s", DumpEntry{analogFir.channel[25].rFir.s});
        res.insert_or_assign("analogFir.channel[25].rFir.r", DumpEntry{analogFir.channel[25].rFir.r});
        res.insert_or_assign("analogFir.channel[25].rFir.tSc", DumpEntry{analogFir.channel[25].rFir.tSc});
        res.insert_or_assign("analogFir.channel[25].rFir.phase", DumpEntry{analogFir.channel[25].rFir.phase});
        res.insert_or_assign("analogFir.channel[25].vFir.m", DumpEntry{analogFir.channel[25].vFir.m});
        res.insert_or_assign("analogFir.channel[25].vFir.n", DumpEntry{analogFir.channel[25].vFir.n});
        res.insert_or_assign("analogFir.channel[25].vFir.s", DumpEntry{analogFir.channel[25].vFir.s});
        res.insert_or_assign("analogFir.channel[25].vFir.r", DumpEntry{analogFir.channel[25].vFir.r});
        res.insert_or_assign("analogFir.channel[25].vFir.tSc", DumpEntry{analogFir.channel[25].vFir.tSc});
        res.insert_or_assign("analogFir.channel[25].vFir.phase", DumpEntry{analogFir.channel[25].vFir.phase});
        res.insert_or_assign("analogFir.channel[25].mmFir.m", DumpEntry{analogFir.channel[25].mmFir.m});
        res.insert_or_assign("analogFir.channel[25].mmFir.n", DumpEntry{analogFir.channel[25].mmFir.n});
        res.insert_or_assign("analogFir.channel[25].mmFir.s", DumpEntry{analogFir.channel[25].mmFir.s});
        res.insert_or_assign("analogFir.channel[25].mmFir.r", DumpEntry{analogFir.channel[25].mmFir.r});
        res.insert_or_assign("analogFir.channel[25].mmFir.tSc", DumpEntry{analogFir.channel[25].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[25].mmFir.phase", DumpEntry{analogFir.channel[25].mmFir.phase});
        res.insert_or_assign("analogFir.channel[25].limit.maxLimit", DumpEntry{analogFir.channel[25].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[25].limit.minLimit", DumpEntry{analogFir.channel[25].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[25].limit.filterLength", DumpEntry{analogFir.channel[25].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[26].rFir.m", DumpEntry{analogFir.channel[26].rFir.m});
        res.insert_or_assign("analogFir.channel[26].rFir.n", DumpEntry{analogFir.channel[26].rFir.n});
        res.insert_or_assign("analogFir.channel[26].rFir.s", DumpEntry{analogFir.channel[26].rFir.s});
        res.insert_or_assign("analogFir.channel[26].rFir.r", DumpEntry{analogFir.channel[26].rFir.r});
        res.insert_or_assign("analogFir.channel[26].rFir.tSc", DumpEntry{analogFir.channel[26].rFir.tSc});
        res.insert_or_assign("analogFir.channel[26].rFir.phase", DumpEntry{analogFir.channel[26].rFir.phase});
        res.insert_or_assign("analogFir.channel[26].vFir.m", DumpEntry{analogFir.channel[26].vFir.m});
        res.insert_or_assign("analogFir.channel[26].vFir.n", DumpEntry{analogFir.channel[26].vFir.n});
        res.insert_or_assign("analogFir.channel[26].vFir.s", DumpEntry{analogFir.channel[26].vFir.s});
        res.insert_or_assign("analogFir.channel[26].vFir.r", DumpEntry{analogFir.channel[26].vFir.r});
        res.insert_or_assign("analogFir.channel[26].vFir.tSc", DumpEntry{analogFir.channel[26].vFir.tSc});
        res.insert_or_assign("analogFir.channel[26].vFir.phase", DumpEntry{analogFir.channel[26].vFir.phase});
        res.insert_or_assign("analogFir.channel[26].mmFir.m", DumpEntry{analogFir.channel[26].mmFir.m});
        res.insert_or_assign("analogFir.channel[26].mmFir.n", DumpEntry{analogFir.channel[26].mmFir.n});
        res.insert_or_assign("analogFir.channel[26].mmFir.s", DumpEntry{analogFir.channel[26].mmFir.s});
        res.insert_or_assign("analogFir.channel[26].mmFir.r", DumpEntry{analogFir.channel[26].mmFir.r});
        res.insert_or_assign("analogFir.channel[26].mmFir.tSc", DumpEntry{analogFir.channel[26].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[26].mmFir.phase", DumpEntry{analogFir.channel[26].mmFir.phase});
        res.insert_or_assign("analogFir.channel[26].limit.maxLimit", DumpEntry{analogFir.channel[26].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[26].limit.minLimit", DumpEntry{analogFir.channel[26].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[26].limit.filterLength", DumpEntry{analogFir.channel[26].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[27].rFir.m", DumpEntry{analogFir.channel[27].rFir.m});
        res.insert_or_assign("analogFir.channel[27].rFir.n", DumpEntry{analogFir.channel[27].rFir.n});
        res.insert_or_assign("analogFir.channel[27].rFir.s", DumpEntry{analogFir.channel[27].rFir.s});
        res.insert_or_assign("analogFir.channel[27].rFir.r", DumpEntry{analogFir.channel[27].rFir.r});
        res.insert_or_assign("analogFir.channel[27].rFir.tSc", DumpEntry{analogFir.channel[27].rFir.tSc});
        res.insert_or_assign("analogFir.channel[27].rFir.phase", DumpEntry{analogFir.channel[27].rFir.phase});
        res.insert_or_assign("analogFir.channel[27].vFir.m", DumpEntry{analogFir.channel[27].vFir.m});
        res.insert_or_assign("analogFir.channel[27].vFir.n", DumpEntry{analogFir.channel[27].vFir.n});
        res.insert_or_assign("analogFir.channel[27].vFir.s", DumpEntry{analogFir.channel[27].vFir.s});
        res.insert_or_assign("analogFir.channel[27].vFir.r", DumpEntry{analogFir.channel[27].vFir.r});
        res.insert_or_assign("analogFir.channel[27].vFir.tSc", DumpEntry{analogFir.channel[27].vFir.tSc});
        res.insert_or_assign("analogFir.channel[27].vFir.phase", DumpEntry{analogFir.channel[27].vFir.phase});
        res.insert_or_assign("analogFir.channel[27].mmFir.m", DumpEntry{analogFir.channel[27].mmFir.m});
        res.insert_or_assign("analogFir.channel[27].mmFir.n", DumpEntry{analogFir.channel[27].mmFir.n});
        res.insert_or_assign("analogFir.channel[27].mmFir.s", DumpEntry{analogFir.channel[27].mmFir.s});
        res.insert_or_assign("analogFir.channel[27].mmFir.r", DumpEntry{analogFir.channel[27].mmFir.r});
        res.insert_or_assign("analogFir.channel[27].mmFir.tSc", DumpEntry{analogFir.channel[27].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[27].mmFir.phase", DumpEntry{analogFir.channel[27].mmFir.phase});
        res.insert_or_assign("analogFir.channel[27].limit.maxLimit", DumpEntry{analogFir.channel[27].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[27].limit.minLimit", DumpEntry{analogFir.channel[27].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[27].limit.filterLength", DumpEntry{analogFir.channel[27].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[28].rFir.m", DumpEntry{analogFir.channel[28].rFir.m});
        res.insert_or_assign("analogFir.channel[28].rFir.n", DumpEntry{analogFir.channel[28].rFir.n});
        res.insert_or_assign("analogFir.channel[28].rFir.s", DumpEntry{analogFir.channel[28].rFir.s});
        res.insert_or_assign("analogFir.channel[28].rFir.r", DumpEntry{analogFir.channel[28].rFir.r});
        res.insert_or_assign("analogFir.channel[28].rFir.tSc", DumpEntry{analogFir.channel[28].rFir.tSc});
        res.insert_or_assign("analogFir.channel[28].rFir.phase", DumpEntry{analogFir.channel[28].rFir.phase});
        res.insert_or_assign("analogFir.channel[28].vFir.m", DumpEntry{analogFir.channel[28].vFir.m});
        res.insert_or_assign("analogFir.channel[28].vFir.n", DumpEntry{analogFir.channel[28].vFir.n});
        res.insert_or_assign("analogFir.channel[28].vFir.s", DumpEntry{analogFir.channel[28].vFir.s});
        res.insert_or_assign("analogFir.channel[28].vFir.r", DumpEntry{analogFir.channel[28].vFir.r});
        res.insert_or_assign("analogFir.channel[28].vFir.tSc", DumpEntry{analogFir.channel[28].vFir.tSc});
        res.insert_or_assign("analogFir.channel[28].vFir.phase", DumpEntry{analogFir.channel[28].vFir.phase});
        res.insert_or_assign("analogFir.channel[28].mmFir.m", DumpEntry{analogFir.channel[28].mmFir.m});
        res.insert_or_assign("analogFir.channel[28].mmFir.n", DumpEntry{analogFir.channel[28].mmFir.n});
        res.insert_or_assign("analogFir.channel[28].mmFir.s", DumpEntry{analogFir.channel[28].mmFir.s});
        res.insert_or_assign("analogFir.channel[28].mmFir.r", DumpEntry{analogFir.channel[28].mmFir.r});
        res.insert_or_assign("analogFir.channel[28].mmFir.tSc", DumpEntry{analogFir.channel[28].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[28].mmFir.phase", DumpEntry{analogFir.channel[28].mmFir.phase});
        res.insert_or_assign("analogFir.channel[28].limit.maxLimit", DumpEntry{analogFir.channel[28].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[28].limit.minLimit", DumpEntry{analogFir.channel[28].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[28].limit.filterLength", DumpEntry{analogFir.channel[28].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[29].rFir.m", DumpEntry{analogFir.channel[29].rFir.m});
        res.insert_or_assign("analogFir.channel[29].rFir.n", DumpEntry{analogFir.channel[29].rFir.n});
        res.insert_or_assign("analogFir.channel[29].rFir.s", DumpEntry{analogFir.channel[29].rFir.s});
        res.insert_or_assign("analogFir.channel[29].rFir.r", DumpEntry{analogFir.channel[29].rFir.r});
        res.insert_or_assign("analogFir.channel[29].rFir.tSc", DumpEntry{analogFir.channel[29].rFir.tSc});
        res.insert_or_assign("analogFir.channel[29].rFir.phase", DumpEntry{analogFir.channel[29].rFir.phase});
        res.insert_or_assign("analogFir.channel[29].vFir.m", DumpEntry{analogFir.channel[29].vFir.m});
        res.insert_or_assign("analogFir.channel[29].vFir.n", DumpEntry{analogFir.channel[29].vFir.n});
        res.insert_or_assign("analogFir.channel[29].vFir.s", DumpEntry{analogFir.channel[29].vFir.s});
        res.insert_or_assign("analogFir.channel[29].vFir.r", DumpEntry{analogFir.channel[29].vFir.r});
        res.insert_or_assign("analogFir.channel[29].vFir.tSc", DumpEntry{analogFir.channel[29].vFir.tSc});
        res.insert_or_assign("analogFir.channel[29].vFir.phase", DumpEntry{analogFir.channel[29].vFir.phase});
        res.insert_or_assign("analogFir.channel[29].mmFir.m", DumpEntry{analogFir.channel[29].mmFir.m});
        res.insert_or_assign("analogFir.channel[29].mmFir.n", DumpEntry{analogFir.channel[29].mmFir.n});
        res.insert_or_assign("analogFir.channel[29].mmFir.s", DumpEntry{analogFir.channel[29].mmFir.s});
        res.insert_or_assign("analogFir.channel[29].mmFir.r", DumpEntry{analogFir.channel[29].mmFir.r});
        res.insert_or_assign("analogFir.channel[29].mmFir.tSc", DumpEntry{analogFir.channel[29].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[29].mmFir.phase", DumpEntry{analogFir.channel[29].mmFir.phase});
        res.insert_or_assign("analogFir.channel[29].limit.maxLimit", DumpEntry{analogFir.channel[29].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[29].limit.minLimit", DumpEntry{analogFir.channel[29].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[29].limit.filterLength", DumpEntry{analogFir.channel[29].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[30].rFir.m", DumpEntry{analogFir.channel[30].rFir.m});
        res.insert_or_assign("analogFir.channel[30].rFir.n", DumpEntry{analogFir.channel[30].rFir.n});
        res.insert_or_assign("analogFir.channel[30].rFir.s", DumpEntry{analogFir.channel[30].rFir.s});
        res.insert_or_assign("analogFir.channel[30].rFir.r", DumpEntry{analogFir.channel[30].rFir.r});
        res.insert_or_assign("analogFir.channel[30].rFir.tSc", DumpEntry{analogFir.channel[30].rFir.tSc});
        res.insert_or_assign("analogFir.channel[30].rFir.phase", DumpEntry{analogFir.channel[30].rFir.phase});
        res.insert_or_assign("analogFir.channel[30].vFir.m", DumpEntry{analogFir.channel[30].vFir.m});
        res.insert_or_assign("analogFir.channel[30].vFir.n", DumpEntry{analogFir.channel[30].vFir.n});
        res.insert_or_assign("analogFir.channel[30].vFir.s", DumpEntry{analogFir.channel[30].vFir.s});
        res.insert_or_assign("analogFir.channel[30].vFir.r", DumpEntry{analogFir.channel[30].vFir.r});
        res.insert_or_assign("analogFir.channel[30].vFir.tSc", DumpEntry{analogFir.channel[30].vFir.tSc});
        res.insert_or_assign("analogFir.channel[30].vFir.phase", DumpEntry{analogFir.channel[30].vFir.phase});
        res.insert_or_assign("analogFir.channel[30].mmFir.m", DumpEntry{analogFir.channel[30].mmFir.m});
        res.insert_or_assign("analogFir.channel[30].mmFir.n", DumpEntry{analogFir.channel[30].mmFir.n});
        res.insert_or_assign("analogFir.channel[30].mmFir.s", DumpEntry{analogFir.channel[30].mmFir.s});
        res.insert_or_assign("analogFir.channel[30].mmFir.r", DumpEntry{analogFir.channel[30].mmFir.r});
        res.insert_or_assign("analogFir.channel[30].mmFir.tSc", DumpEntry{analogFir.channel[30].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[30].mmFir.phase", DumpEntry{analogFir.channel[30].mmFir.phase});
        res.insert_or_assign("analogFir.channel[30].limit.maxLimit", DumpEntry{analogFir.channel[30].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[30].limit.minLimit", DumpEntry{analogFir.channel[30].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[30].limit.filterLength", DumpEntry{analogFir.channel[30].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[31].rFir.m", DumpEntry{analogFir.channel[31].rFir.m});
        res.insert_or_assign("analogFir.channel[31].rFir.n", DumpEntry{analogFir.channel[31].rFir.n});
        res.insert_or_assign("analogFir.channel[31].rFir.s", DumpEntry{analogFir.channel[31].rFir.s});
        res.insert_or_assign("analogFir.channel[31].rFir.r", DumpEntry{analogFir.channel[31].rFir.r});
        res.insert_or_assign("analogFir.channel[31].rFir.tSc", DumpEntry{analogFir.channel[31].rFir.tSc});
        res.insert_or_assign("analogFir.channel[31].rFir.phase", DumpEntry{analogFir.channel[31].rFir.phase});
        res.insert_or_assign("analogFir.channel[31].vFir.m", DumpEntry{analogFir.channel[31].vFir.m});
        res.insert_or_assign("analogFir.channel[31].vFir.n", DumpEntry{analogFir.channel[31].vFir.n});
        res.insert_or_assign("analogFir.channel[31].vFir.s", DumpEntry{analogFir.channel[31].vFir.s});
        res.insert_or_assign("analogFir.channel[31].vFir.r", DumpEntry{analogFir.channel[31].vFir.r});
        res.insert_or_assign("analogFir.channel[31].vFir.tSc", DumpEntry{analogFir.channel[31].vFir.tSc});
        res.insert_or_assign("analogFir.channel[31].vFir.phase", DumpEntry{analogFir.channel[31].vFir.phase});
        res.insert_or_assign("analogFir.channel[31].mmFir.m", DumpEntry{analogFir.channel[31].mmFir.m});
        res.insert_or_assign("analogFir.channel[31].mmFir.n", DumpEntry{analogFir.channel[31].mmFir.n});
        res.insert_or_assign("analogFir.channel[31].mmFir.s", DumpEntry{analogFir.channel[31].mmFir.s});
        res.insert_or_assign("analogFir.channel[31].mmFir.r", DumpEntry{analogFir.channel[31].mmFir.r});
        res.insert_or_assign("analogFir.channel[31].mmFir.tSc", DumpEntry{analogFir.channel[31].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[31].mmFir.phase", DumpEntry{analogFir.channel[31].mmFir.phase});
        res.insert_or_assign("analogFir.channel[31].limit.maxLimit", DumpEntry{analogFir.channel[31].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[31].limit.minLimit", DumpEntry{analogFir.channel[31].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[31].limit.filterLength", DumpEntry{analogFir.channel[31].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[32].rFir.m", DumpEntry{analogFir.channel[32].rFir.m});
        res.insert_or_assign("analogFir.channel[32].rFir.n", DumpEntry{analogFir.channel[32].rFir.n});
        res.insert_or_assign("analogFir.channel[32].rFir.s", DumpEntry{analogFir.channel[32].rFir.s});
        res.insert_or_assign("analogFir.channel[32].rFir.r", DumpEntry{analogFir.channel[32].rFir.r});
        res.insert_or_assign("analogFir.channel[32].rFir.tSc", DumpEntry{analogFir.channel[32].rFir.tSc});
        res.insert_or_assign("analogFir.channel[32].rFir.phase", DumpEntry{analogFir.channel[32].rFir.phase});
        res.insert_or_assign("analogFir.channel[32].vFir.m", DumpEntry{analogFir.channel[32].vFir.m});
        res.insert_or_assign("analogFir.channel[32].vFir.n", DumpEntry{analogFir.channel[32].vFir.n});
        res.insert_or_assign("analogFir.channel[32].vFir.s", DumpEntry{analogFir.channel[32].vFir.s});
        res.insert_or_assign("analogFir.channel[32].vFir.r", DumpEntry{analogFir.channel[32].vFir.r});
        res.insert_or_assign("analogFir.channel[32].vFir.tSc", DumpEntry{analogFir.channel[32].vFir.tSc});
        res.insert_or_assign("analogFir.channel[32].vFir.phase", DumpEntry{analogFir.channel[32].vFir.phase});
        res.insert_or_assign("analogFir.channel[32].mmFir.m", DumpEntry{analogFir.channel[32].mmFir.m});
        res.insert_or_assign("analogFir.channel[32].mmFir.n", DumpEntry{analogFir.channel[32].mmFir.n});
        res.insert_or_assign("analogFir.channel[32].mmFir.s", DumpEntry{analogFir.channel[32].mmFir.s});
        res.insert_or_assign("analogFir.channel[32].mmFir.r", DumpEntry{analogFir.channel[32].mmFir.r});
        res.insert_or_assign("analogFir.channel[32].mmFir.tSc", DumpEntry{analogFir.channel[32].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[32].mmFir.phase", DumpEntry{analogFir.channel[32].mmFir.phase});
        res.insert_or_assign("analogFir.channel[32].limit.maxLimit", DumpEntry{analogFir.channel[32].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[32].limit.minLimit", DumpEntry{analogFir.channel[32].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[32].limit.filterLength", DumpEntry{analogFir.channel[32].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[33].rFir.m", DumpEntry{analogFir.channel[33].rFir.m});
        res.insert_or_assign("analogFir.channel[33].rFir.n", DumpEntry{analogFir.channel[33].rFir.n});
        res.insert_or_assign("analogFir.channel[33].rFir.s", DumpEntry{analogFir.channel[33].rFir.s});
        res.insert_or_assign("analogFir.channel[33].rFir.r", DumpEntry{analogFir.channel[33].rFir.r});
        res.insert_or_assign("analogFir.channel[33].rFir.tSc", DumpEntry{analogFir.channel[33].rFir.tSc});
        res.insert_or_assign("analogFir.channel[33].rFir.phase", DumpEntry{analogFir.channel[33].rFir.phase});
        res.insert_or_assign("analogFir.channel[33].vFir.m", DumpEntry{analogFir.channel[33].vFir.m});
        res.insert_or_assign("analogFir.channel[33].vFir.n", DumpEntry{analogFir.channel[33].vFir.n});
        res.insert_or_assign("analogFir.channel[33].vFir.s", DumpEntry{analogFir.channel[33].vFir.s});
        res.insert_or_assign("analogFir.channel[33].vFir.r", DumpEntry{analogFir.channel[33].vFir.r});
        res.insert_or_assign("analogFir.channel[33].vFir.tSc", DumpEntry{analogFir.channel[33].vFir.tSc});
        res.insert_or_assign("analogFir.channel[33].vFir.phase", DumpEntry{analogFir.channel[33].vFir.phase});
        res.insert_or_assign("analogFir.channel[33].mmFir.m", DumpEntry{analogFir.channel[33].mmFir.m});
        res.insert_or_assign("analogFir.channel[33].mmFir.n", DumpEntry{analogFir.channel[33].mmFir.n});
        res.insert_or_assign("analogFir.channel[33].mmFir.s", DumpEntry{analogFir.channel[33].mmFir.s});
        res.insert_or_assign("analogFir.channel[33].mmFir.r", DumpEntry{analogFir.channel[33].mmFir.r});
        res.insert_or_assign("analogFir.channel[33].mmFir.tSc", DumpEntry{analogFir.channel[33].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[33].mmFir.phase", DumpEntry{analogFir.channel[33].mmFir.phase});
        res.insert_or_assign("analogFir.channel[33].limit.maxLimit", DumpEntry{analogFir.channel[33].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[33].limit.minLimit", DumpEntry{analogFir.channel[33].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[33].limit.filterLength", DumpEntry{analogFir.channel[33].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[34].rFir.m", DumpEntry{analogFir.channel[34].rFir.m});
        res.insert_or_assign("analogFir.channel[34].rFir.n", DumpEntry{analogFir.channel[34].rFir.n});
        res.insert_or_assign("analogFir.channel[34].rFir.s", DumpEntry{analogFir.channel[34].rFir.s});
        res.insert_or_assign("analogFir.channel[34].rFir.r", DumpEntry{analogFir.channel[34].rFir.r});
        res.insert_or_assign("analogFir.channel[34].rFir.tSc", DumpEntry{analogFir.channel[34].rFir.tSc});
        res.insert_or_assign("analogFir.channel[34].rFir.phase", DumpEntry{analogFir.channel[34].rFir.phase});
        res.insert_or_assign("analogFir.channel[34].vFir.m", DumpEntry{analogFir.channel[34].vFir.m});
        res.insert_or_assign("analogFir.channel[34].vFir.n", DumpEntry{analogFir.channel[34].vFir.n});
        res.insert_or_assign("analogFir.channel[34].vFir.s", DumpEntry{analogFir.channel[34].vFir.s});
        res.insert_or_assign("analogFir.channel[34].vFir.r", DumpEntry{analogFir.channel[34].vFir.r});
        res.insert_or_assign("analogFir.channel[34].vFir.tSc", DumpEntry{analogFir.channel[34].vFir.tSc});
        res.insert_or_assign("analogFir.channel[34].vFir.phase", DumpEntry{analogFir.channel[34].vFir.phase});
        res.insert_or_assign("analogFir.channel[34].mmFir.m", DumpEntry{analogFir.channel[34].mmFir.m});
        res.insert_or_assign("analogFir.channel[34].mmFir.n", DumpEntry{analogFir.channel[34].mmFir.n});
        res.insert_or_assign("analogFir.channel[34].mmFir.s", DumpEntry{analogFir.channel[34].mmFir.s});
        res.insert_or_assign("analogFir.channel[34].mmFir.r", DumpEntry{analogFir.channel[34].mmFir.r});
        res.insert_or_assign("analogFir.channel[34].mmFir.tSc", DumpEntry{analogFir.channel[34].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[34].mmFir.phase", DumpEntry{analogFir.channel[34].mmFir.phase});
        res.insert_or_assign("analogFir.channel[34].limit.maxLimit", DumpEntry{analogFir.channel[34].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[34].limit.minLimit", DumpEntry{analogFir.channel[34].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[34].limit.filterLength", DumpEntry{analogFir.channel[34].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[35].rFir.m", DumpEntry{analogFir.channel[35].rFir.m});
        res.insert_or_assign("analogFir.channel[35].rFir.n", DumpEntry{analogFir.channel[35].rFir.n});
        res.insert_or_assign("analogFir.channel[35].rFir.s", DumpEntry{analogFir.channel[35].rFir.s});
        res.insert_or_assign("analogFir.channel[35].rFir.r", DumpEntry{analogFir.channel[35].rFir.r});
        res.insert_or_assign("analogFir.channel[35].rFir.tSc", DumpEntry{analogFir.channel[35].rFir.tSc});
        res.insert_or_assign("analogFir.channel[35].rFir.phase", DumpEntry{analogFir.channel[35].rFir.phase});
        res.insert_or_assign("analogFir.channel[35].vFir.m", DumpEntry{analogFir.channel[35].vFir.m});
        res.insert_or_assign("analogFir.channel[35].vFir.n", DumpEntry{analogFir.channel[35].vFir.n});
        res.insert_or_assign("analogFir.channel[35].vFir.s", DumpEntry{analogFir.channel[35].vFir.s});
        res.insert_or_assign("analogFir.channel[35].vFir.r", DumpEntry{analogFir.channel[35].vFir.r});
        res.insert_or_assign("analogFir.channel[35].vFir.tSc", DumpEntry{analogFir.channel[35].vFir.tSc});
        res.insert_or_assign("analogFir.channel[35].vFir.phase", DumpEntry{analogFir.channel[35].vFir.phase});
        res.insert_or_assign("analogFir.channel[35].mmFir.m", DumpEntry{analogFir.channel[35].mmFir.m});
        res.insert_or_assign("analogFir.channel[35].mmFir.n", DumpEntry{analogFir.channel[35].mmFir.n});
        res.insert_or_assign("analogFir.channel[35].mmFir.s", DumpEntry{analogFir.channel[35].mmFir.s});
        res.insert_or_assign("analogFir.channel[35].mmFir.r", DumpEntry{analogFir.channel[35].mmFir.r});
        res.insert_or_assign("analogFir.channel[35].mmFir.tSc", DumpEntry{analogFir.channel[35].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[35].mmFir.phase", DumpEntry{analogFir.channel[35].mmFir.phase});
        res.insert_or_assign("analogFir.channel[35].limit.maxLimit", DumpEntry{analogFir.channel[35].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[35].limit.minLimit", DumpEntry{analogFir.channel[35].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[35].limit.filterLength", DumpEntry{analogFir.channel[35].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[36].rFir.m", DumpEntry{analogFir.channel[36].rFir.m});
        res.insert_or_assign("analogFir.channel[36].rFir.n", DumpEntry{analogFir.channel[36].rFir.n});
        res.insert_or_assign("analogFir.channel[36].rFir.s", DumpEntry{analogFir.channel[36].rFir.s});
        res.insert_or_assign("analogFir.channel[36].rFir.r", DumpEntry{analogFir.channel[36].rFir.r});
        res.insert_or_assign("analogFir.channel[36].rFir.tSc", DumpEntry{analogFir.channel[36].rFir.tSc});
        res.insert_or_assign("analogFir.channel[36].rFir.phase", DumpEntry{analogFir.channel[36].rFir.phase});
        res.insert_or_assign("analogFir.channel[36].vFir.m", DumpEntry{analogFir.channel[36].vFir.m});
        res.insert_or_assign("analogFir.channel[36].vFir.n", DumpEntry{analogFir.channel[36].vFir.n});
        res.insert_or_assign("analogFir.channel[36].vFir.s", DumpEntry{analogFir.channel[36].vFir.s});
        res.insert_or_assign("analogFir.channel[36].vFir.r", DumpEntry{analogFir.channel[36].vFir.r});
        res.insert_or_assign("analogFir.channel[36].vFir.tSc", DumpEntry{analogFir.channel[36].vFir.tSc});
        res.insert_or_assign("analogFir.channel[36].vFir.phase", DumpEntry{analogFir.channel[36].vFir.phase});
        res.insert_or_assign("analogFir.channel[36].mmFir.m", DumpEntry{analogFir.channel[36].mmFir.m});
        res.insert_or_assign("analogFir.channel[36].mmFir.n", DumpEntry{analogFir.channel[36].mmFir.n});
        res.insert_or_assign("analogFir.channel[36].mmFir.s", DumpEntry{analogFir.channel[36].mmFir.s});
        res.insert_or_assign("analogFir.channel[36].mmFir.r", DumpEntry{analogFir.channel[36].mmFir.r});
        res.insert_or_assign("analogFir.channel[36].mmFir.tSc", DumpEntry{analogFir.channel[36].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[36].mmFir.phase", DumpEntry{analogFir.channel[36].mmFir.phase});
        res.insert_or_assign("analogFir.channel[36].limit.maxLimit", DumpEntry{analogFir.channel[36].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[36].limit.minLimit", DumpEntry{analogFir.channel[36].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[36].limit.filterLength", DumpEntry{analogFir.channel[36].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[37].rFir.m", DumpEntry{analogFir.channel[37].rFir.m});
        res.insert_or_assign("analogFir.channel[37].rFir.n", DumpEntry{analogFir.channel[37].rFir.n});
        res.insert_or_assign("analogFir.channel[37].rFir.s", DumpEntry{analogFir.channel[37].rFir.s});
        res.insert_or_assign("analogFir.channel[37].rFir.r", DumpEntry{analogFir.channel[37].rFir.r});
        res.insert_or_assign("analogFir.channel[37].rFir.tSc", DumpEntry{analogFir.channel[37].rFir.tSc});
        res.insert_or_assign("analogFir.channel[37].rFir.phase", DumpEntry{analogFir.channel[37].rFir.phase});
        res.insert_or_assign("analogFir.channel[37].vFir.m", DumpEntry{analogFir.channel[37].vFir.m});
        res.insert_or_assign("analogFir.channel[37].vFir.n", DumpEntry{analogFir.channel[37].vFir.n});
        res.insert_or_assign("analogFir.channel[37].vFir.s", DumpEntry{analogFir.channel[37].vFir.s});
        res.insert_or_assign("analogFir.channel[37].vFir.r", DumpEntry{analogFir.channel[37].vFir.r});
        res.insert_or_assign("analogFir.channel[37].vFir.tSc", DumpEntry{analogFir.channel[37].vFir.tSc});
        res.insert_or_assign("analogFir.channel[37].vFir.phase", DumpEntry{analogFir.channel[37].vFir.phase});
        res.insert_or_assign("analogFir.channel[37].mmFir.m", DumpEntry{analogFir.channel[37].mmFir.m});
        res.insert_or_assign("analogFir.channel[37].mmFir.n", DumpEntry{analogFir.channel[37].mmFir.n});
        res.insert_or_assign("analogFir.channel[37].mmFir.s", DumpEntry{analogFir.channel[37].mmFir.s});
        res.insert_or_assign("analogFir.channel[37].mmFir.r", DumpEntry{analogFir.channel[37].mmFir.r});
        res.insert_or_assign("analogFir.channel[37].mmFir.tSc", DumpEntry{analogFir.channel[37].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[37].mmFir.phase", DumpEntry{analogFir.channel[37].mmFir.phase});
        res.insert_or_assign("analogFir.channel[37].limit.maxLimit", DumpEntry{analogFir.channel[37].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[37].limit.minLimit", DumpEntry{analogFir.channel[37].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[37].limit.filterLength", DumpEntry{analogFir.channel[37].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[38].rFir.m", DumpEntry{analogFir.channel[38].rFir.m});
        res.insert_or_assign("analogFir.channel[38].rFir.n", DumpEntry{analogFir.channel[38].rFir.n});
        res.insert_or_assign("analogFir.channel[38].rFir.s", DumpEntry{analogFir.channel[38].rFir.s});
        res.insert_or_assign("analogFir.channel[38].rFir.r", DumpEntry{analogFir.channel[38].rFir.r});
        res.insert_or_assign("analogFir.channel[38].rFir.tSc", DumpEntry{analogFir.channel[38].rFir.tSc});
        res.insert_or_assign("analogFir.channel[38].rFir.phase", DumpEntry{analogFir.channel[38].rFir.phase});
        res.insert_or_assign("analogFir.channel[38].vFir.m", DumpEntry{analogFir.channel[38].vFir.m});
        res.insert_or_assign("analogFir.channel[38].vFir.n", DumpEntry{analogFir.channel[38].vFir.n});
        res.insert_or_assign("analogFir.channel[38].vFir.s", DumpEntry{analogFir.channel[38].vFir.s});
        res.insert_or_assign("analogFir.channel[38].vFir.r", DumpEntry{analogFir.channel[38].vFir.r});
        res.insert_or_assign("analogFir.channel[38].vFir.tSc", DumpEntry{analogFir.channel[38].vFir.tSc});
        res.insert_or_assign("analogFir.channel[38].vFir.phase", DumpEntry{analogFir.channel[38].vFir.phase});
        res.insert_or_assign("analogFir.channel[38].mmFir.m", DumpEntry{analogFir.channel[38].mmFir.m});
        res.insert_or_assign("analogFir.channel[38].mmFir.n", DumpEntry{analogFir.channel[38].mmFir.n});
        res.insert_or_assign("analogFir.channel[38].mmFir.s", DumpEntry{analogFir.channel[38].mmFir.s});
        res.insert_or_assign("analogFir.channel[38].mmFir.r", DumpEntry{analogFir.channel[38].mmFir.r});
        res.insert_or_assign("analogFir.channel[38].mmFir.tSc", DumpEntry{analogFir.channel[38].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[38].mmFir.phase", DumpEntry{analogFir.channel[38].mmFir.phase});
        res.insert_or_assign("analogFir.channel[38].limit.maxLimit", DumpEntry{analogFir.channel[38].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[38].limit.minLimit", DumpEntry{analogFir.channel[38].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[38].limit.filterLength", DumpEntry{analogFir.channel[38].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[39].rFir.m", DumpEntry{analogFir.channel[39].rFir.m});
        res.insert_or_assign("analogFir.channel[39].rFir.n", DumpEntry{analogFir.channel[39].rFir.n});
        res.insert_or_assign("analogFir.channel[39].rFir.s", DumpEntry{analogFir.channel[39].rFir.s});
        res.insert_or_assign("analogFir.channel[39].rFir.r", DumpEntry{analogFir.channel[39].rFir.r});
        res.insert_or_assign("analogFir.channel[39].rFir.tSc", DumpEntry{analogFir.channel[39].rFir.tSc});
        res.insert_or_assign("analogFir.channel[39].rFir.phase", DumpEntry{analogFir.channel[39].rFir.phase});
        res.insert_or_assign("analogFir.channel[39].vFir.m", DumpEntry{analogFir.channel[39].vFir.m});
        res.insert_or_assign("analogFir.channel[39].vFir.n", DumpEntry{analogFir.channel[39].vFir.n});
        res.insert_or_assign("analogFir.channel[39].vFir.s", DumpEntry{analogFir.channel[39].vFir.s});
        res.insert_or_assign("analogFir.channel[39].vFir.r", DumpEntry{analogFir.channel[39].vFir.r});
        res.insert_or_assign("analogFir.channel[39].vFir.tSc", DumpEntry{analogFir.channel[39].vFir.tSc});
        res.insert_or_assign("analogFir.channel[39].vFir.phase", DumpEntry{analogFir.channel[39].vFir.phase});
        res.insert_or_assign("analogFir.channel[39].mmFir.m", DumpEntry{analogFir.channel[39].mmFir.m});
        res.insert_or_assign("analogFir.channel[39].mmFir.n", DumpEntry{analogFir.channel[39].mmFir.n});
        res.insert_or_assign("analogFir.channel[39].mmFir.s", DumpEntry{analogFir.channel[39].mmFir.s});
        res.insert_or_assign("analogFir.channel[39].mmFir.r", DumpEntry{analogFir.channel[39].mmFir.r});
        res.insert_or_assign("analogFir.channel[39].mmFir.tSc", DumpEntry{analogFir.channel[39].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[39].mmFir.phase", DumpEntry{analogFir.channel[39].mmFir.phase});
        res.insert_or_assign("analogFir.channel[39].limit.maxLimit", DumpEntry{analogFir.channel[39].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[39].limit.minLimit", DumpEntry{analogFir.channel[39].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[39].limit.filterLength", DumpEntry{analogFir.channel[39].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[40].rFir.m", DumpEntry{analogFir.channel[40].rFir.m});
        res.insert_or_assign("analogFir.channel[40].rFir.n", DumpEntry{analogFir.channel[40].rFir.n});
        res.insert_or_assign("analogFir.channel[40].rFir.s", DumpEntry{analogFir.channel[40].rFir.s});
        res.insert_or_assign("analogFir.channel[40].rFir.r", DumpEntry{analogFir.channel[40].rFir.r});
        res.insert_or_assign("analogFir.channel[40].rFir.tSc", DumpEntry{analogFir.channel[40].rFir.tSc});
        res.insert_or_assign("analogFir.channel[40].rFir.phase", DumpEntry{analogFir.channel[40].rFir.phase});
        res.insert_or_assign("analogFir.channel[40].vFir.m", DumpEntry{analogFir.channel[40].vFir.m});
        res.insert_or_assign("analogFir.channel[40].vFir.n", DumpEntry{analogFir.channel[40].vFir.n});
        res.insert_or_assign("analogFir.channel[40].vFir.s", DumpEntry{analogFir.channel[40].vFir.s});
        res.insert_or_assign("analogFir.channel[40].vFir.r", DumpEntry{analogFir.channel[40].vFir.r});
        res.insert_or_assign("analogFir.channel[40].vFir.tSc", DumpEntry{analogFir.channel[40].vFir.tSc});
        res.insert_or_assign("analogFir.channel[40].vFir.phase", DumpEntry{analogFir.channel[40].vFir.phase});
        res.insert_or_assign("analogFir.channel[40].mmFir.m", DumpEntry{analogFir.channel[40].mmFir.m});
        res.insert_or_assign("analogFir.channel[40].mmFir.n", DumpEntry{analogFir.channel[40].mmFir.n});
        res.insert_or_assign("analogFir.channel[40].mmFir.s", DumpEntry{analogFir.channel[40].mmFir.s});
        res.insert_or_assign("analogFir.channel[40].mmFir.r", DumpEntry{analogFir.channel[40].mmFir.r});
        res.insert_or_assign("analogFir.channel[40].mmFir.tSc", DumpEntry{analogFir.channel[40].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[40].mmFir.phase", DumpEntry{analogFir.channel[40].mmFir.phase});
        res.insert_or_assign("analogFir.channel[40].limit.maxLimit", DumpEntry{analogFir.channel[40].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[40].limit.minLimit", DumpEntry{analogFir.channel[40].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[40].limit.filterLength", DumpEntry{analogFir.channel[40].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[41].rFir.m", DumpEntry{analogFir.channel[41].rFir.m});
        res.insert_or_assign("analogFir.channel[41].rFir.n", DumpEntry{analogFir.channel[41].rFir.n});
        res.insert_or_assign("analogFir.channel[41].rFir.s", DumpEntry{analogFir.channel[41].rFir.s});
        res.insert_or_assign("analogFir.channel[41].rFir.r", DumpEntry{analogFir.channel[41].rFir.r});
        res.insert_or_assign("analogFir.channel[41].rFir.tSc", DumpEntry{analogFir.channel[41].rFir.tSc});
        res.insert_or_assign("analogFir.channel[41].rFir.phase", DumpEntry{analogFir.channel[41].rFir.phase});
        res.insert_or_assign("analogFir.channel[41].vFir.m", DumpEntry{analogFir.channel[41].vFir.m});
        res.insert_or_assign("analogFir.channel[41].vFir.n", DumpEntry{analogFir.channel[41].vFir.n});
        res.insert_or_assign("analogFir.channel[41].vFir.s", DumpEntry{analogFir.channel[41].vFir.s});
        res.insert_or_assign("analogFir.channel[41].vFir.r", DumpEntry{analogFir.channel[41].vFir.r});
        res.insert_or_assign("analogFir.channel[41].vFir.tSc", DumpEntry{analogFir.channel[41].vFir.tSc});
        res.insert_or_assign("analogFir.channel[41].vFir.phase", DumpEntry{analogFir.channel[41].vFir.phase});
        res.insert_or_assign("analogFir.channel[41].mmFir.m", DumpEntry{analogFir.channel[41].mmFir.m});
        res.insert_or_assign("analogFir.channel[41].mmFir.n", DumpEntry{analogFir.channel[41].mmFir.n});
        res.insert_or_assign("analogFir.channel[41].mmFir.s", DumpEntry{analogFir.channel[41].mmFir.s});
        res.insert_or_assign("analogFir.channel[41].mmFir.r", DumpEntry{analogFir.channel[41].mmFir.r});
        res.insert_or_assign("analogFir.channel[41].mmFir.tSc", DumpEntry{analogFir.channel[41].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[41].mmFir.phase", DumpEntry{analogFir.channel[41].mmFir.phase});
        res.insert_or_assign("analogFir.channel[41].limit.maxLimit", DumpEntry{analogFir.channel[41].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[41].limit.minLimit", DumpEntry{analogFir.channel[41].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[41].limit.filterLength", DumpEntry{analogFir.channel[41].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[42].rFir.m", DumpEntry{analogFir.channel[42].rFir.m});
        res.insert_or_assign("analogFir.channel[42].rFir.n", DumpEntry{analogFir.channel[42].rFir.n});
        res.insert_or_assign("analogFir.channel[42].rFir.s", DumpEntry{analogFir.channel[42].rFir.s});
        res.insert_or_assign("analogFir.channel[42].rFir.r", DumpEntry{analogFir.channel[42].rFir.r});
        res.insert_or_assign("analogFir.channel[42].rFir.tSc", DumpEntry{analogFir.channel[42].rFir.tSc});
        res.insert_or_assign("analogFir.channel[42].rFir.phase", DumpEntry{analogFir.channel[42].rFir.phase});
        res.insert_or_assign("analogFir.channel[42].vFir.m", DumpEntry{analogFir.channel[42].vFir.m});
        res.insert_or_assign("analogFir.channel[42].vFir.n", DumpEntry{analogFir.channel[42].vFir.n});
        res.insert_or_assign("analogFir.channel[42].vFir.s", DumpEntry{analogFir.channel[42].vFir.s});
        res.insert_or_assign("analogFir.channel[42].vFir.r", DumpEntry{analogFir.channel[42].vFir.r});
        res.insert_or_assign("analogFir.channel[42].vFir.tSc", DumpEntry{analogFir.channel[42].vFir.tSc});
        res.insert_or_assign("analogFir.channel[42].vFir.phase", DumpEntry{analogFir.channel[42].vFir.phase});
        res.insert_or_assign("analogFir.channel[42].mmFir.m", DumpEntry{analogFir.channel[42].mmFir.m});
        res.insert_or_assign("analogFir.channel[42].mmFir.n", DumpEntry{analogFir.channel[42].mmFir.n});
        res.insert_or_assign("analogFir.channel[42].mmFir.s", DumpEntry{analogFir.channel[42].mmFir.s});
        res.insert_or_assign("analogFir.channel[42].mmFir.r", DumpEntry{analogFir.channel[42].mmFir.r});
        res.insert_or_assign("analogFir.channel[42].mmFir.tSc", DumpEntry{analogFir.channel[42].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[42].mmFir.phase", DumpEntry{analogFir.channel[42].mmFir.phase});
        res.insert_or_assign("analogFir.channel[42].limit.maxLimit", DumpEntry{analogFir.channel[42].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[42].limit.minLimit", DumpEntry{analogFir.channel[42].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[42].limit.filterLength", DumpEntry{analogFir.channel[42].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[43].rFir.m", DumpEntry{analogFir.channel[43].rFir.m});
        res.insert_or_assign("analogFir.channel[43].rFir.n", DumpEntry{analogFir.channel[43].rFir.n});
        res.insert_or_assign("analogFir.channel[43].rFir.s", DumpEntry{analogFir.channel[43].rFir.s});
        res.insert_or_assign("analogFir.channel[43].rFir.r", DumpEntry{analogFir.channel[43].rFir.r});
        res.insert_or_assign("analogFir.channel[43].rFir.tSc", DumpEntry{analogFir.channel[43].rFir.tSc});
        res.insert_or_assign("analogFir.channel[43].rFir.phase", DumpEntry{analogFir.channel[43].rFir.phase});
        res.insert_or_assign("analogFir.channel[43].vFir.m", DumpEntry{analogFir.channel[43].vFir.m});
        res.insert_or_assign("analogFir.channel[43].vFir.n", DumpEntry{analogFir.channel[43].vFir.n});
        res.insert_or_assign("analogFir.channel[43].vFir.s", DumpEntry{analogFir.channel[43].vFir.s});
        res.insert_or_assign("analogFir.channel[43].vFir.r", DumpEntry{analogFir.channel[43].vFir.r});
        res.insert_or_assign("analogFir.channel[43].vFir.tSc", DumpEntry{analogFir.channel[43].vFir.tSc});
        res.insert_or_assign("analogFir.channel[43].vFir.phase", DumpEntry{analogFir.channel[43].vFir.phase});
        res.insert_or_assign("analogFir.channel[43].mmFir.m", DumpEntry{analogFir.channel[43].mmFir.m});
        res.insert_or_assign("analogFir.channel[43].mmFir.n", DumpEntry{analogFir.channel[43].mmFir.n});
        res.insert_or_assign("analogFir.channel[43].mmFir.s", DumpEntry{analogFir.channel[43].mmFir.s});
        res.insert_or_assign("analogFir.channel[43].mmFir.r", DumpEntry{analogFir.channel[43].mmFir.r});
        res.insert_or_assign("analogFir.channel[43].mmFir.tSc", DumpEntry{analogFir.channel[43].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[43].mmFir.phase", DumpEntry{analogFir.channel[43].mmFir.phase});
        res.insert_or_assign("analogFir.channel[43].limit.maxLimit", DumpEntry{analogFir.channel[43].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[43].limit.minLimit", DumpEntry{analogFir.channel[43].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[43].limit.filterLength", DumpEntry{analogFir.channel[43].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[44].rFir.m", DumpEntry{analogFir.channel[44].rFir.m});
        res.insert_or_assign("analogFir.channel[44].rFir.n", DumpEntry{analogFir.channel[44].rFir.n});
        res.insert_or_assign("analogFir.channel[44].rFir.s", DumpEntry{analogFir.channel[44].rFir.s});
        res.insert_or_assign("analogFir.channel[44].rFir.r", DumpEntry{analogFir.channel[44].rFir.r});
        res.insert_or_assign("analogFir.channel[44].rFir.tSc", DumpEntry{analogFir.channel[44].rFir.tSc});
        res.insert_or_assign("analogFir.channel[44].rFir.phase", DumpEntry{analogFir.channel[44].rFir.phase});
        res.insert_or_assign("analogFir.channel[44].vFir.m", DumpEntry{analogFir.channel[44].vFir.m});
        res.insert_or_assign("analogFir.channel[44].vFir.n", DumpEntry{analogFir.channel[44].vFir.n});
        res.insert_or_assign("analogFir.channel[44].vFir.s", DumpEntry{analogFir.channel[44].vFir.s});
        res.insert_or_assign("analogFir.channel[44].vFir.r", DumpEntry{analogFir.channel[44].vFir.r});
        res.insert_or_assign("analogFir.channel[44].vFir.tSc", DumpEntry{analogFir.channel[44].vFir.tSc});
        res.insert_or_assign("analogFir.channel[44].vFir.phase", DumpEntry{analogFir.channel[44].vFir.phase});
        res.insert_or_assign("analogFir.channel[44].mmFir.m", DumpEntry{analogFir.channel[44].mmFir.m});
        res.insert_or_assign("analogFir.channel[44].mmFir.n", DumpEntry{analogFir.channel[44].mmFir.n});
        res.insert_or_assign("analogFir.channel[44].mmFir.s", DumpEntry{analogFir.channel[44].mmFir.s});
        res.insert_or_assign("analogFir.channel[44].mmFir.r", DumpEntry{analogFir.channel[44].mmFir.r});
        res.insert_or_assign("analogFir.channel[44].mmFir.tSc", DumpEntry{analogFir.channel[44].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[44].mmFir.phase", DumpEntry{analogFir.channel[44].mmFir.phase});
        res.insert_or_assign("analogFir.channel[44].limit.maxLimit", DumpEntry{analogFir.channel[44].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[44].limit.minLimit", DumpEntry{analogFir.channel[44].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[44].limit.filterLength", DumpEntry{analogFir.channel[44].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[45].rFir.m", DumpEntry{analogFir.channel[45].rFir.m});
        res.insert_or_assign("analogFir.channel[45].rFir.n", DumpEntry{analogFir.channel[45].rFir.n});
        res.insert_or_assign("analogFir.channel[45].rFir.s", DumpEntry{analogFir.channel[45].rFir.s});
        res.insert_or_assign("analogFir.channel[45].rFir.r", DumpEntry{analogFir.channel[45].rFir.r});
        res.insert_or_assign("analogFir.channel[45].rFir.tSc", DumpEntry{analogFir.channel[45].rFir.tSc});
        res.insert_or_assign("analogFir.channel[45].rFir.phase", DumpEntry{analogFir.channel[45].rFir.phase});
        res.insert_or_assign("analogFir.channel[45].vFir.m", DumpEntry{analogFir.channel[45].vFir.m});
        res.insert_or_assign("analogFir.channel[45].vFir.n", DumpEntry{analogFir.channel[45].vFir.n});
        res.insert_or_assign("analogFir.channel[45].vFir.s", DumpEntry{analogFir.channel[45].vFir.s});
        res.insert_or_assign("analogFir.channel[45].vFir.r", DumpEntry{analogFir.channel[45].vFir.r});
        res.insert_or_assign("analogFir.channel[45].vFir.tSc", DumpEntry{analogFir.channel[45].vFir.tSc});
        res.insert_or_assign("analogFir.channel[45].vFir.phase", DumpEntry{analogFir.channel[45].vFir.phase});
        res.insert_or_assign("analogFir.channel[45].mmFir.m", DumpEntry{analogFir.channel[45].mmFir.m});
        res.insert_or_assign("analogFir.channel[45].mmFir.n", DumpEntry{analogFir.channel[45].mmFir.n});
        res.insert_or_assign("analogFir.channel[45].mmFir.s", DumpEntry{analogFir.channel[45].mmFir.s});
        res.insert_or_assign("analogFir.channel[45].mmFir.r", DumpEntry{analogFir.channel[45].mmFir.r});
        res.insert_or_assign("analogFir.channel[45].mmFir.tSc", DumpEntry{analogFir.channel[45].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[45].mmFir.phase", DumpEntry{analogFir.channel[45].mmFir.phase});
        res.insert_or_assign("analogFir.channel[45].limit.maxLimit", DumpEntry{analogFir.channel[45].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[45].limit.minLimit", DumpEntry{analogFir.channel[45].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[45].limit.filterLength", DumpEntry{analogFir.channel[45].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[46].rFir.m", DumpEntry{analogFir.channel[46].rFir.m});
        res.insert_or_assign("analogFir.channel[46].rFir.n", DumpEntry{analogFir.channel[46].rFir.n});
        res.insert_or_assign("analogFir.channel[46].rFir.s", DumpEntry{analogFir.channel[46].rFir.s});
        res.insert_or_assign("analogFir.channel[46].rFir.r", DumpEntry{analogFir.channel[46].rFir.r});
        res.insert_or_assign("analogFir.channel[46].rFir.tSc", DumpEntry{analogFir.channel[46].rFir.tSc});
        res.insert_or_assign("analogFir.channel[46].rFir.phase", DumpEntry{analogFir.channel[46].rFir.phase});
        res.insert_or_assign("analogFir.channel[46].vFir.m", DumpEntry{analogFir.channel[46].vFir.m});
        res.insert_or_assign("analogFir.channel[46].vFir.n", DumpEntry{analogFir.channel[46].vFir.n});
        res.insert_or_assign("analogFir.channel[46].vFir.s", DumpEntry{analogFir.channel[46].vFir.s});
        res.insert_or_assign("analogFir.channel[46].vFir.r", DumpEntry{analogFir.channel[46].vFir.r});
        res.insert_or_assign("analogFir.channel[46].vFir.tSc", DumpEntry{analogFir.channel[46].vFir.tSc});
        res.insert_or_assign("analogFir.channel[46].vFir.phase", DumpEntry{analogFir.channel[46].vFir.phase});
        res.insert_or_assign("analogFir.channel[46].mmFir.m", DumpEntry{analogFir.channel[46].mmFir.m});
        res.insert_or_assign("analogFir.channel[46].mmFir.n", DumpEntry{analogFir.channel[46].mmFir.n});
        res.insert_or_assign("analogFir.channel[46].mmFir.s", DumpEntry{analogFir.channel[46].mmFir.s});
        res.insert_or_assign("analogFir.channel[46].mmFir.r", DumpEntry{analogFir.channel[46].mmFir.r});
        res.insert_or_assign("analogFir.channel[46].mmFir.tSc", DumpEntry{analogFir.channel[46].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[46].mmFir.phase", DumpEntry{analogFir.channel[46].mmFir.phase});
        res.insert_or_assign("analogFir.channel[46].limit.maxLimit", DumpEntry{analogFir.channel[46].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[46].limit.minLimit", DumpEntry{analogFir.channel[46].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[46].limit.filterLength", DumpEntry{analogFir.channel[46].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[47].rFir.m", DumpEntry{analogFir.channel[47].rFir.m});
        res.insert_or_assign("analogFir.channel[47].rFir.n", DumpEntry{analogFir.channel[47].rFir.n});
        res.insert_or_assign("analogFir.channel[47].rFir.s", DumpEntry{analogFir.channel[47].rFir.s});
        res.insert_or_assign("analogFir.channel[47].rFir.r", DumpEntry{analogFir.channel[47].rFir.r});
        res.insert_or_assign("analogFir.channel[47].rFir.tSc", DumpEntry{analogFir.channel[47].rFir.tSc});
        res.insert_or_assign("analogFir.channel[47].rFir.phase", DumpEntry{analogFir.channel[47].rFir.phase});
        res.insert_or_assign("analogFir.channel[47].vFir.m", DumpEntry{analogFir.channel[47].vFir.m});
        res.insert_or_assign("analogFir.channel[47].vFir.n", DumpEntry{analogFir.channel[47].vFir.n});
        res.insert_or_assign("analogFir.channel[47].vFir.s", DumpEntry{analogFir.channel[47].vFir.s});
        res.insert_or_assign("analogFir.channel[47].vFir.r", DumpEntry{analogFir.channel[47].vFir.r});
        res.insert_or_assign("analogFir.channel[47].vFir.tSc", DumpEntry{analogFir.channel[47].vFir.tSc});
        res.insert_or_assign("analogFir.channel[47].vFir.phase", DumpEntry{analogFir.channel[47].vFir.phase});
        res.insert_or_assign("analogFir.channel[47].mmFir.m", DumpEntry{analogFir.channel[47].mmFir.m});
        res.insert_or_assign("analogFir.channel[47].mmFir.n", DumpEntry{analogFir.channel[47].mmFir.n});
        res.insert_or_assign("analogFir.channel[47].mmFir.s", DumpEntry{analogFir.channel[47].mmFir.s});
        res.insert_or_assign("analogFir.channel[47].mmFir.r", DumpEntry{analogFir.channel[47].mmFir.r});
        res.insert_or_assign("analogFir.channel[47].mmFir.tSc", DumpEntry{analogFir.channel[47].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[47].mmFir.phase", DumpEntry{analogFir.channel[47].mmFir.phase});
        res.insert_or_assign("analogFir.channel[47].limit.maxLimit", DumpEntry{analogFir.channel[47].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[47].limit.minLimit", DumpEntry{analogFir.channel[47].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[47].limit.filterLength", DumpEntry{analogFir.channel[47].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[48].rFir.m", DumpEntry{analogFir.channel[48].rFir.m});
        res.insert_or_assign("analogFir.channel[48].rFir.n", DumpEntry{analogFir.channel[48].rFir.n});
        res.insert_or_assign("analogFir.channel[48].rFir.s", DumpEntry{analogFir.channel[48].rFir.s});
        res.insert_or_assign("analogFir.channel[48].rFir.r", DumpEntry{analogFir.channel[48].rFir.r});
        res.insert_or_assign("analogFir.channel[48].rFir.tSc", DumpEntry{analogFir.channel[48].rFir.tSc});
        res.insert_or_assign("analogFir.channel[48].rFir.phase", DumpEntry{analogFir.channel[48].rFir.phase});
        res.insert_or_assign("analogFir.channel[48].vFir.m", DumpEntry{analogFir.channel[48].vFir.m});
        res.insert_or_assign("analogFir.channel[48].vFir.n", DumpEntry{analogFir.channel[48].vFir.n});
        res.insert_or_assign("analogFir.channel[48].vFir.s", DumpEntry{analogFir.channel[48].vFir.s});
        res.insert_or_assign("analogFir.channel[48].vFir.r", DumpEntry{analogFir.channel[48].vFir.r});
        res.insert_or_assign("analogFir.channel[48].vFir.tSc", DumpEntry{analogFir.channel[48].vFir.tSc});
        res.insert_or_assign("analogFir.channel[48].vFir.phase", DumpEntry{analogFir.channel[48].vFir.phase});
        res.insert_or_assign("analogFir.channel[48].mmFir.m", DumpEntry{analogFir.channel[48].mmFir.m});
        res.insert_or_assign("analogFir.channel[48].mmFir.n", DumpEntry{analogFir.channel[48].mmFir.n});
        res.insert_or_assign("analogFir.channel[48].mmFir.s", DumpEntry{analogFir.channel[48].mmFir.s});
        res.insert_or_assign("analogFir.channel[48].mmFir.r", DumpEntry{analogFir.channel[48].mmFir.r});
        res.insert_or_assign("analogFir.channel[48].mmFir.tSc", DumpEntry{analogFir.channel[48].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[48].mmFir.phase", DumpEntry{analogFir.channel[48].mmFir.phase});
        res.insert_or_assign("analogFir.channel[48].limit.maxLimit", DumpEntry{analogFir.channel[48].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[48].limit.minLimit", DumpEntry{analogFir.channel[48].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[48].limit.filterLength", DumpEntry{analogFir.channel[48].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[49].rFir.m", DumpEntry{analogFir.channel[49].rFir.m});
        res.insert_or_assign("analogFir.channel[49].rFir.n", DumpEntry{analogFir.channel[49].rFir.n});
        res.insert_or_assign("analogFir.channel[49].rFir.s", DumpEntry{analogFir.channel[49].rFir.s});
        res.insert_or_assign("analogFir.channel[49].rFir.r", DumpEntry{analogFir.channel[49].rFir.r});
        res.insert_or_assign("analogFir.channel[49].rFir.tSc", DumpEntry{analogFir.channel[49].rFir.tSc});
        res.insert_or_assign("analogFir.channel[49].rFir.phase", DumpEntry{analogFir.channel[49].rFir.phase});
        res.insert_or_assign("analogFir.channel[49].vFir.m", DumpEntry{analogFir.channel[49].vFir.m});
        res.insert_or_assign("analogFir.channel[49].vFir.n", DumpEntry{analogFir.channel[49].vFir.n});
        res.insert_or_assign("analogFir.channel[49].vFir.s", DumpEntry{analogFir.channel[49].vFir.s});
        res.insert_or_assign("analogFir.channel[49].vFir.r", DumpEntry{analogFir.channel[49].vFir.r});
        res.insert_or_assign("analogFir.channel[49].vFir.tSc", DumpEntry{analogFir.channel[49].vFir.tSc});
        res.insert_or_assign("analogFir.channel[49].vFir.phase", DumpEntry{analogFir.channel[49].vFir.phase});
        res.insert_or_assign("analogFir.channel[49].mmFir.m", DumpEntry{analogFir.channel[49].mmFir.m});
        res.insert_or_assign("analogFir.channel[49].mmFir.n", DumpEntry{analogFir.channel[49].mmFir.n});
        res.insert_or_assign("analogFir.channel[49].mmFir.s", DumpEntry{analogFir.channel[49].mmFir.s});
        res.insert_or_assign("analogFir.channel[49].mmFir.r", DumpEntry{analogFir.channel[49].mmFir.r});
        res.insert_or_assign("analogFir.channel[49].mmFir.tSc", DumpEntry{analogFir.channel[49].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[49].mmFir.phase", DumpEntry{analogFir.channel[49].mmFir.phase});
        res.insert_or_assign("analogFir.channel[49].limit.maxLimit", DumpEntry{analogFir.channel[49].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[49].limit.minLimit", DumpEntry{analogFir.channel[49].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[49].limit.filterLength", DumpEntry{analogFir.channel[49].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[50].rFir.m", DumpEntry{analogFir.channel[50].rFir.m});
        res.insert_or_assign("analogFir.channel[50].rFir.n", DumpEntry{analogFir.channel[50].rFir.n});
        res.insert_or_assign("analogFir.channel[50].rFir.s", DumpEntry{analogFir.channel[50].rFir.s});
        res.insert_or_assign("analogFir.channel[50].rFir.r", DumpEntry{analogFir.channel[50].rFir.r});
        res.insert_or_assign("analogFir.channel[50].rFir.tSc", DumpEntry{analogFir.channel[50].rFir.tSc});
        res.insert_or_assign("analogFir.channel[50].rFir.phase", DumpEntry{analogFir.channel[50].rFir.phase});
        res.insert_or_assign("analogFir.channel[50].vFir.m", DumpEntry{analogFir.channel[50].vFir.m});
        res.insert_or_assign("analogFir.channel[50].vFir.n", DumpEntry{analogFir.channel[50].vFir.n});
        res.insert_or_assign("analogFir.channel[50].vFir.s", DumpEntry{analogFir.channel[50].vFir.s});
        res.insert_or_assign("analogFir.channel[50].vFir.r", DumpEntry{analogFir.channel[50].vFir.r});
        res.insert_or_assign("analogFir.channel[50].vFir.tSc", DumpEntry{analogFir.channel[50].vFir.tSc});
        res.insert_or_assign("analogFir.channel[50].vFir.phase", DumpEntry{analogFir.channel[50].vFir.phase});
        res.insert_or_assign("analogFir.channel[50].mmFir.m", DumpEntry{analogFir.channel[50].mmFir.m});
        res.insert_or_assign("analogFir.channel[50].mmFir.n", DumpEntry{analogFir.channel[50].mmFir.n});
        res.insert_or_assign("analogFir.channel[50].mmFir.s", DumpEntry{analogFir.channel[50].mmFir.s});
        res.insert_or_assign("analogFir.channel[50].mmFir.r", DumpEntry{analogFir.channel[50].mmFir.r});
        res.insert_or_assign("analogFir.channel[50].mmFir.tSc", DumpEntry{analogFir.channel[50].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[50].mmFir.phase", DumpEntry{analogFir.channel[50].mmFir.phase});
        res.insert_or_assign("analogFir.channel[50].limit.maxLimit", DumpEntry{analogFir.channel[50].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[50].limit.minLimit", DumpEntry{analogFir.channel[50].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[50].limit.filterLength", DumpEntry{analogFir.channel[50].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[51].rFir.m", DumpEntry{analogFir.channel[51].rFir.m});
        res.insert_or_assign("analogFir.channel[51].rFir.n", DumpEntry{analogFir.channel[51].rFir.n});
        res.insert_or_assign("analogFir.channel[51].rFir.s", DumpEntry{analogFir.channel[51].rFir.s});
        res.insert_or_assign("analogFir.channel[51].rFir.r", DumpEntry{analogFir.channel[51].rFir.r});
        res.insert_or_assign("analogFir.channel[51].rFir.tSc", DumpEntry{analogFir.channel[51].rFir.tSc});
        res.insert_or_assign("analogFir.channel[51].rFir.phase", DumpEntry{analogFir.channel[51].rFir.phase});
        res.insert_or_assign("analogFir.channel[51].vFir.m", DumpEntry{analogFir.channel[51].vFir.m});
        res.insert_or_assign("analogFir.channel[51].vFir.n", DumpEntry{analogFir.channel[51].vFir.n});
        res.insert_or_assign("analogFir.channel[51].vFir.s", DumpEntry{analogFir.channel[51].vFir.s});
        res.insert_or_assign("analogFir.channel[51].vFir.r", DumpEntry{analogFir.channel[51].vFir.r});
        res.insert_or_assign("analogFir.channel[51].vFir.tSc", DumpEntry{analogFir.channel[51].vFir.tSc});
        res.insert_or_assign("analogFir.channel[51].vFir.phase", DumpEntry{analogFir.channel[51].vFir.phase});
        res.insert_or_assign("analogFir.channel[51].mmFir.m", DumpEntry{analogFir.channel[51].mmFir.m});
        res.insert_or_assign("analogFir.channel[51].mmFir.n", DumpEntry{analogFir.channel[51].mmFir.n});
        res.insert_or_assign("analogFir.channel[51].mmFir.s", DumpEntry{analogFir.channel[51].mmFir.s});
        res.insert_or_assign("analogFir.channel[51].mmFir.r", DumpEntry{analogFir.channel[51].mmFir.r});
        res.insert_or_assign("analogFir.channel[51].mmFir.tSc", DumpEntry{analogFir.channel[51].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[51].mmFir.phase", DumpEntry{analogFir.channel[51].mmFir.phase});
        res.insert_or_assign("analogFir.channel[51].limit.maxLimit", DumpEntry{analogFir.channel[51].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[51].limit.minLimit", DumpEntry{analogFir.channel[51].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[51].limit.filterLength", DumpEntry{analogFir.channel[51].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[52].rFir.m", DumpEntry{analogFir.channel[52].rFir.m});
        res.insert_or_assign("analogFir.channel[52].rFir.n", DumpEntry{analogFir.channel[52].rFir.n});
        res.insert_or_assign("analogFir.channel[52].rFir.s", DumpEntry{analogFir.channel[52].rFir.s});
        res.insert_or_assign("analogFir.channel[52].rFir.r", DumpEntry{analogFir.channel[52].rFir.r});
        res.insert_or_assign("analogFir.channel[52].rFir.tSc", DumpEntry{analogFir.channel[52].rFir.tSc});
        res.insert_or_assign("analogFir.channel[52].rFir.phase", DumpEntry{analogFir.channel[52].rFir.phase});
        res.insert_or_assign("analogFir.channel[52].vFir.m", DumpEntry{analogFir.channel[52].vFir.m});
        res.insert_or_assign("analogFir.channel[52].vFir.n", DumpEntry{analogFir.channel[52].vFir.n});
        res.insert_or_assign("analogFir.channel[52].vFir.s", DumpEntry{analogFir.channel[52].vFir.s});
        res.insert_or_assign("analogFir.channel[52].vFir.r", DumpEntry{analogFir.channel[52].vFir.r});
        res.insert_or_assign("analogFir.channel[52].vFir.tSc", DumpEntry{analogFir.channel[52].vFir.tSc});
        res.insert_or_assign("analogFir.channel[52].vFir.phase", DumpEntry{analogFir.channel[52].vFir.phase});
        res.insert_or_assign("analogFir.channel[52].mmFir.m", DumpEntry{analogFir.channel[52].mmFir.m});
        res.insert_or_assign("analogFir.channel[52].mmFir.n", DumpEntry{analogFir.channel[52].mmFir.n});
        res.insert_or_assign("analogFir.channel[52].mmFir.s", DumpEntry{analogFir.channel[52].mmFir.s});
        res.insert_or_assign("analogFir.channel[52].mmFir.r", DumpEntry{analogFir.channel[52].mmFir.r});
        res.insert_or_assign("analogFir.channel[52].mmFir.tSc", DumpEntry{analogFir.channel[52].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[52].mmFir.phase", DumpEntry{analogFir.channel[52].mmFir.phase});
        res.insert_or_assign("analogFir.channel[52].limit.maxLimit", DumpEntry{analogFir.channel[52].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[52].limit.minLimit", DumpEntry{analogFir.channel[52].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[52].limit.filterLength", DumpEntry{analogFir.channel[52].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[53].rFir.m", DumpEntry{analogFir.channel[53].rFir.m});
        res.insert_or_assign("analogFir.channel[53].rFir.n", DumpEntry{analogFir.channel[53].rFir.n});
        res.insert_or_assign("analogFir.channel[53].rFir.s", DumpEntry{analogFir.channel[53].rFir.s});
        res.insert_or_assign("analogFir.channel[53].rFir.r", DumpEntry{analogFir.channel[53].rFir.r});
        res.insert_or_assign("analogFir.channel[53].rFir.tSc", DumpEntry{analogFir.channel[53].rFir.tSc});
        res.insert_or_assign("analogFir.channel[53].rFir.phase", DumpEntry{analogFir.channel[53].rFir.phase});
        res.insert_or_assign("analogFir.channel[53].vFir.m", DumpEntry{analogFir.channel[53].vFir.m});
        res.insert_or_assign("analogFir.channel[53].vFir.n", DumpEntry{analogFir.channel[53].vFir.n});
        res.insert_or_assign("analogFir.channel[53].vFir.s", DumpEntry{analogFir.channel[53].vFir.s});
        res.insert_or_assign("analogFir.channel[53].vFir.r", DumpEntry{analogFir.channel[53].vFir.r});
        res.insert_or_assign("analogFir.channel[53].vFir.tSc", DumpEntry{analogFir.channel[53].vFir.tSc});
        res.insert_or_assign("analogFir.channel[53].vFir.phase", DumpEntry{analogFir.channel[53].vFir.phase});
        res.insert_or_assign("analogFir.channel[53].mmFir.m", DumpEntry{analogFir.channel[53].mmFir.m});
        res.insert_or_assign("analogFir.channel[53].mmFir.n", DumpEntry{analogFir.channel[53].mmFir.n});
        res.insert_or_assign("analogFir.channel[53].mmFir.s", DumpEntry{analogFir.channel[53].mmFir.s});
        res.insert_or_assign("analogFir.channel[53].mmFir.r", DumpEntry{analogFir.channel[53].mmFir.r});
        res.insert_or_assign("analogFir.channel[53].mmFir.tSc", DumpEntry{analogFir.channel[53].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[53].mmFir.phase", DumpEntry{analogFir.channel[53].mmFir.phase});
        res.insert_or_assign("analogFir.channel[53].limit.maxLimit", DumpEntry{analogFir.channel[53].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[53].limit.minLimit", DumpEntry{analogFir.channel[53].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[53].limit.filterLength", DumpEntry{analogFir.channel[53].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[54].rFir.m", DumpEntry{analogFir.channel[54].rFir.m});
        res.insert_or_assign("analogFir.channel[54].rFir.n", DumpEntry{analogFir.channel[54].rFir.n});
        res.insert_or_assign("analogFir.channel[54].rFir.s", DumpEntry{analogFir.channel[54].rFir.s});
        res.insert_or_assign("analogFir.channel[54].rFir.r", DumpEntry{analogFir.channel[54].rFir.r});
        res.insert_or_assign("analogFir.channel[54].rFir.tSc", DumpEntry{analogFir.channel[54].rFir.tSc});
        res.insert_or_assign("analogFir.channel[54].rFir.phase", DumpEntry{analogFir.channel[54].rFir.phase});
        res.insert_or_assign("analogFir.channel[54].vFir.m", DumpEntry{analogFir.channel[54].vFir.m});
        res.insert_or_assign("analogFir.channel[54].vFir.n", DumpEntry{analogFir.channel[54].vFir.n});
        res.insert_or_assign("analogFir.channel[54].vFir.s", DumpEntry{analogFir.channel[54].vFir.s});
        res.insert_or_assign("analogFir.channel[54].vFir.r", DumpEntry{analogFir.channel[54].vFir.r});
        res.insert_or_assign("analogFir.channel[54].vFir.tSc", DumpEntry{analogFir.channel[54].vFir.tSc});
        res.insert_or_assign("analogFir.channel[54].vFir.phase", DumpEntry{analogFir.channel[54].vFir.phase});
        res.insert_or_assign("analogFir.channel[54].mmFir.m", DumpEntry{analogFir.channel[54].mmFir.m});
        res.insert_or_assign("analogFir.channel[54].mmFir.n", DumpEntry{analogFir.channel[54].mmFir.n});
        res.insert_or_assign("analogFir.channel[54].mmFir.s", DumpEntry{analogFir.channel[54].mmFir.s});
        res.insert_or_assign("analogFir.channel[54].mmFir.r", DumpEntry{analogFir.channel[54].mmFir.r});
        res.insert_or_assign("analogFir.channel[54].mmFir.tSc", DumpEntry{analogFir.channel[54].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[54].mmFir.phase", DumpEntry{analogFir.channel[54].mmFir.phase});
        res.insert_or_assign("analogFir.channel[54].limit.maxLimit", DumpEntry{analogFir.channel[54].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[54].limit.minLimit", DumpEntry{analogFir.channel[54].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[54].limit.filterLength", DumpEntry{analogFir.channel[54].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[55].rFir.m", DumpEntry{analogFir.channel[55].rFir.m});
        res.insert_or_assign("analogFir.channel[55].rFir.n", DumpEntry{analogFir.channel[55].rFir.n});
        res.insert_or_assign("analogFir.channel[55].rFir.s", DumpEntry{analogFir.channel[55].rFir.s});
        res.insert_or_assign("analogFir.channel[55].rFir.r", DumpEntry{analogFir.channel[55].rFir.r});
        res.insert_or_assign("analogFir.channel[55].rFir.tSc", DumpEntry{analogFir.channel[55].rFir.tSc});
        res.insert_or_assign("analogFir.channel[55].rFir.phase", DumpEntry{analogFir.channel[55].rFir.phase});
        res.insert_or_assign("analogFir.channel[55].vFir.m", DumpEntry{analogFir.channel[55].vFir.m});
        res.insert_or_assign("analogFir.channel[55].vFir.n", DumpEntry{analogFir.channel[55].vFir.n});
        res.insert_or_assign("analogFir.channel[55].vFir.s", DumpEntry{analogFir.channel[55].vFir.s});
        res.insert_or_assign("analogFir.channel[55].vFir.r", DumpEntry{analogFir.channel[55].vFir.r});
        res.insert_or_assign("analogFir.channel[55].vFir.tSc", DumpEntry{analogFir.channel[55].vFir.tSc});
        res.insert_or_assign("analogFir.channel[55].vFir.phase", DumpEntry{analogFir.channel[55].vFir.phase});
        res.insert_or_assign("analogFir.channel[55].mmFir.m", DumpEntry{analogFir.channel[55].mmFir.m});
        res.insert_or_assign("analogFir.channel[55].mmFir.n", DumpEntry{analogFir.channel[55].mmFir.n});
        res.insert_or_assign("analogFir.channel[55].mmFir.s", DumpEntry{analogFir.channel[55].mmFir.s});
        res.insert_or_assign("analogFir.channel[55].mmFir.r", DumpEntry{analogFir.channel[55].mmFir.r});
        res.insert_or_assign("analogFir.channel[55].mmFir.tSc", DumpEntry{analogFir.channel[55].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[55].mmFir.phase", DumpEntry{analogFir.channel[55].mmFir.phase});
        res.insert_or_assign("analogFir.channel[55].limit.maxLimit", DumpEntry{analogFir.channel[55].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[55].limit.minLimit", DumpEntry{analogFir.channel[55].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[55].limit.filterLength", DumpEntry{analogFir.channel[55].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[56].rFir.m", DumpEntry{analogFir.channel[56].rFir.m});
        res.insert_or_assign("analogFir.channel[56].rFir.n", DumpEntry{analogFir.channel[56].rFir.n});
        res.insert_or_assign("analogFir.channel[56].rFir.s", DumpEntry{analogFir.channel[56].rFir.s});
        res.insert_or_assign("analogFir.channel[56].rFir.r", DumpEntry{analogFir.channel[56].rFir.r});
        res.insert_or_assign("analogFir.channel[56].rFir.tSc", DumpEntry{analogFir.channel[56].rFir.tSc});
        res.insert_or_assign("analogFir.channel[56].rFir.phase", DumpEntry{analogFir.channel[56].rFir.phase});
        res.insert_or_assign("analogFir.channel[56].vFir.m", DumpEntry{analogFir.channel[56].vFir.m});
        res.insert_or_assign("analogFir.channel[56].vFir.n", DumpEntry{analogFir.channel[56].vFir.n});
        res.insert_or_assign("analogFir.channel[56].vFir.s", DumpEntry{analogFir.channel[56].vFir.s});
        res.insert_or_assign("analogFir.channel[56].vFir.r", DumpEntry{analogFir.channel[56].vFir.r});
        res.insert_or_assign("analogFir.channel[56].vFir.tSc", DumpEntry{analogFir.channel[56].vFir.tSc});
        res.insert_or_assign("analogFir.channel[56].vFir.phase", DumpEntry{analogFir.channel[56].vFir.phase});
        res.insert_or_assign("analogFir.channel[56].mmFir.m", DumpEntry{analogFir.channel[56].mmFir.m});
        res.insert_or_assign("analogFir.channel[56].mmFir.n", DumpEntry{analogFir.channel[56].mmFir.n});
        res.insert_or_assign("analogFir.channel[56].mmFir.s", DumpEntry{analogFir.channel[56].mmFir.s});
        res.insert_or_assign("analogFir.channel[56].mmFir.r", DumpEntry{analogFir.channel[56].mmFir.r});
        res.insert_or_assign("analogFir.channel[56].mmFir.tSc", DumpEntry{analogFir.channel[56].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[56].mmFir.phase", DumpEntry{analogFir.channel[56].mmFir.phase});
        res.insert_or_assign("analogFir.channel[56].limit.maxLimit", DumpEntry{analogFir.channel[56].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[56].limit.minLimit", DumpEntry{analogFir.channel[56].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[56].limit.filterLength", DumpEntry{analogFir.channel[56].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[57].rFir.m", DumpEntry{analogFir.channel[57].rFir.m});
        res.insert_or_assign("analogFir.channel[57].rFir.n", DumpEntry{analogFir.channel[57].rFir.n});
        res.insert_or_assign("analogFir.channel[57].rFir.s", DumpEntry{analogFir.channel[57].rFir.s});
        res.insert_or_assign("analogFir.channel[57].rFir.r", DumpEntry{analogFir.channel[57].rFir.r});
        res.insert_or_assign("analogFir.channel[57].rFir.tSc", DumpEntry{analogFir.channel[57].rFir.tSc});
        res.insert_or_assign("analogFir.channel[57].rFir.phase", DumpEntry{analogFir.channel[57].rFir.phase});
        res.insert_or_assign("analogFir.channel[57].vFir.m", DumpEntry{analogFir.channel[57].vFir.m});
        res.insert_or_assign("analogFir.channel[57].vFir.n", DumpEntry{analogFir.channel[57].vFir.n});
        res.insert_or_assign("analogFir.channel[57].vFir.s", DumpEntry{analogFir.channel[57].vFir.s});
        res.insert_or_assign("analogFir.channel[57].vFir.r", DumpEntry{analogFir.channel[57].vFir.r});
        res.insert_or_assign("analogFir.channel[57].vFir.tSc", DumpEntry{analogFir.channel[57].vFir.tSc});
        res.insert_or_assign("analogFir.channel[57].vFir.phase", DumpEntry{analogFir.channel[57].vFir.phase});
        res.insert_or_assign("analogFir.channel[57].mmFir.m", DumpEntry{analogFir.channel[57].mmFir.m});
        res.insert_or_assign("analogFir.channel[57].mmFir.n", DumpEntry{analogFir.channel[57].mmFir.n});
        res.insert_or_assign("analogFir.channel[57].mmFir.s", DumpEntry{analogFir.channel[57].mmFir.s});
        res.insert_or_assign("analogFir.channel[57].mmFir.r", DumpEntry{analogFir.channel[57].mmFir.r});
        res.insert_or_assign("analogFir.channel[57].mmFir.tSc", DumpEntry{analogFir.channel[57].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[57].mmFir.phase", DumpEntry{analogFir.channel[57].mmFir.phase});
        res.insert_or_assign("analogFir.channel[57].limit.maxLimit", DumpEntry{analogFir.channel[57].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[57].limit.minLimit", DumpEntry{analogFir.channel[57].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[57].limit.filterLength", DumpEntry{analogFir.channel[57].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[58].rFir.m", DumpEntry{analogFir.channel[58].rFir.m});
        res.insert_or_assign("analogFir.channel[58].rFir.n", DumpEntry{analogFir.channel[58].rFir.n});
        res.insert_or_assign("analogFir.channel[58].rFir.s", DumpEntry{analogFir.channel[58].rFir.s});
        res.insert_or_assign("analogFir.channel[58].rFir.r", DumpEntry{analogFir.channel[58].rFir.r});
        res.insert_or_assign("analogFir.channel[58].rFir.tSc", DumpEntry{analogFir.channel[58].rFir.tSc});
        res.insert_or_assign("analogFir.channel[58].rFir.phase", DumpEntry{analogFir.channel[58].rFir.phase});
        res.insert_or_assign("analogFir.channel[58].vFir.m", DumpEntry{analogFir.channel[58].vFir.m});
        res.insert_or_assign("analogFir.channel[58].vFir.n", DumpEntry{analogFir.channel[58].vFir.n});
        res.insert_or_assign("analogFir.channel[58].vFir.s", DumpEntry{analogFir.channel[58].vFir.s});
        res.insert_or_assign("analogFir.channel[58].vFir.r", DumpEntry{analogFir.channel[58].vFir.r});
        res.insert_or_assign("analogFir.channel[58].vFir.tSc", DumpEntry{analogFir.channel[58].vFir.tSc});
        res.insert_or_assign("analogFir.channel[58].vFir.phase", DumpEntry{analogFir.channel[58].vFir.phase});
        res.insert_or_assign("analogFir.channel[58].mmFir.m", DumpEntry{analogFir.channel[58].mmFir.m});
        res.insert_or_assign("analogFir.channel[58].mmFir.n", DumpEntry{analogFir.channel[58].mmFir.n});
        res.insert_or_assign("analogFir.channel[58].mmFir.s", DumpEntry{analogFir.channel[58].mmFir.s});
        res.insert_or_assign("analogFir.channel[58].mmFir.r", DumpEntry{analogFir.channel[58].mmFir.r});
        res.insert_or_assign("analogFir.channel[58].mmFir.tSc", DumpEntry{analogFir.channel[58].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[58].mmFir.phase", DumpEntry{analogFir.channel[58].mmFir.phase});
        res.insert_or_assign("analogFir.channel[58].limit.maxLimit", DumpEntry{analogFir.channel[58].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[58].limit.minLimit", DumpEntry{analogFir.channel[58].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[58].limit.filterLength", DumpEntry{analogFir.channel[58].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[59].rFir.m", DumpEntry{analogFir.channel[59].rFir.m});
        res.insert_or_assign("analogFir.channel[59].rFir.n", DumpEntry{analogFir.channel[59].rFir.n});
        res.insert_or_assign("analogFir.channel[59].rFir.s", DumpEntry{analogFir.channel[59].rFir.s});
        res.insert_or_assign("analogFir.channel[59].rFir.r", DumpEntry{analogFir.channel[59].rFir.r});
        res.insert_or_assign("analogFir.channel[59].rFir.tSc", DumpEntry{analogFir.channel[59].rFir.tSc});
        res.insert_or_assign("analogFir.channel[59].rFir.phase", DumpEntry{analogFir.channel[59].rFir.phase});
        res.insert_or_assign("analogFir.channel[59].vFir.m", DumpEntry{analogFir.channel[59].vFir.m});
        res.insert_or_assign("analogFir.channel[59].vFir.n", DumpEntry{analogFir.channel[59].vFir.n});
        res.insert_or_assign("analogFir.channel[59].vFir.s", DumpEntry{analogFir.channel[59].vFir.s});
        res.insert_or_assign("analogFir.channel[59].vFir.r", DumpEntry{analogFir.channel[59].vFir.r});
        res.insert_or_assign("analogFir.channel[59].vFir.tSc", DumpEntry{analogFir.channel[59].vFir.tSc});
        res.insert_or_assign("analogFir.channel[59].vFir.phase", DumpEntry{analogFir.channel[59].vFir.phase});
        res.insert_or_assign("analogFir.channel[59].mmFir.m", DumpEntry{analogFir.channel[59].mmFir.m});
        res.insert_or_assign("analogFir.channel[59].mmFir.n", DumpEntry{analogFir.channel[59].mmFir.n});
        res.insert_or_assign("analogFir.channel[59].mmFir.s", DumpEntry{analogFir.channel[59].mmFir.s});
        res.insert_or_assign("analogFir.channel[59].mmFir.r", DumpEntry{analogFir.channel[59].mmFir.r});
        res.insert_or_assign("analogFir.channel[59].mmFir.tSc", DumpEntry{analogFir.channel[59].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[59].mmFir.phase", DumpEntry{analogFir.channel[59].mmFir.phase});
        res.insert_or_assign("analogFir.channel[59].limit.maxLimit", DumpEntry{analogFir.channel[59].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[59].limit.minLimit", DumpEntry{analogFir.channel[59].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[59].limit.filterLength", DumpEntry{analogFir.channel[59].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[60].rFir.m", DumpEntry{analogFir.channel[60].rFir.m});
        res.insert_or_assign("analogFir.channel[60].rFir.n", DumpEntry{analogFir.channel[60].rFir.n});
        res.insert_or_assign("analogFir.channel[60].rFir.s", DumpEntry{analogFir.channel[60].rFir.s});
        res.insert_or_assign("analogFir.channel[60].rFir.r", DumpEntry{analogFir.channel[60].rFir.r});
        res.insert_or_assign("analogFir.channel[60].rFir.tSc", DumpEntry{analogFir.channel[60].rFir.tSc});
        res.insert_or_assign("analogFir.channel[60].rFir.phase", DumpEntry{analogFir.channel[60].rFir.phase});
        res.insert_or_assign("analogFir.channel[60].vFir.m", DumpEntry{analogFir.channel[60].vFir.m});
        res.insert_or_assign("analogFir.channel[60].vFir.n", DumpEntry{analogFir.channel[60].vFir.n});
        res.insert_or_assign("analogFir.channel[60].vFir.s", DumpEntry{analogFir.channel[60].vFir.s});
        res.insert_or_assign("analogFir.channel[60].vFir.r", DumpEntry{analogFir.channel[60].vFir.r});
        res.insert_or_assign("analogFir.channel[60].vFir.tSc", DumpEntry{analogFir.channel[60].vFir.tSc});
        res.insert_or_assign("analogFir.channel[60].vFir.phase", DumpEntry{analogFir.channel[60].vFir.phase});
        res.insert_or_assign("analogFir.channel[60].mmFir.m", DumpEntry{analogFir.channel[60].mmFir.m});
        res.insert_or_assign("analogFir.channel[60].mmFir.n", DumpEntry{analogFir.channel[60].mmFir.n});
        res.insert_or_assign("analogFir.channel[60].mmFir.s", DumpEntry{analogFir.channel[60].mmFir.s});
        res.insert_or_assign("analogFir.channel[60].mmFir.r", DumpEntry{analogFir.channel[60].mmFir.r});
        res.insert_or_assign("analogFir.channel[60].mmFir.tSc", DumpEntry{analogFir.channel[60].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[60].mmFir.phase", DumpEntry{analogFir.channel[60].mmFir.phase});
        res.insert_or_assign("analogFir.channel[60].limit.maxLimit", DumpEntry{analogFir.channel[60].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[60].limit.minLimit", DumpEntry{analogFir.channel[60].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[60].limit.filterLength", DumpEntry{analogFir.channel[60].limit.filterLength}
        );
        res.insert_or_assign("analogFir.channel[61].rFir.m", DumpEntry{analogFir.channel[61].rFir.m});
        res.insert_or_assign("analogFir.channel[61].rFir.n", DumpEntry{analogFir.channel[61].rFir.n});
        res.insert_or_assign("analogFir.channel[61].rFir.s", DumpEntry{analogFir.channel[61].rFir.s});
        res.insert_or_assign("analogFir.channel[61].rFir.r", DumpEntry{analogFir.channel[61].rFir.r});
        res.insert_or_assign("analogFir.channel[61].rFir.tSc", DumpEntry{analogFir.channel[61].rFir.tSc});
        res.insert_or_assign("analogFir.channel[61].rFir.phase", DumpEntry{analogFir.channel[61].rFir.phase});
        res.insert_or_assign("analogFir.channel[61].vFir.m", DumpEntry{analogFir.channel[61].vFir.m});
        res.insert_or_assign("analogFir.channel[61].vFir.n", DumpEntry{analogFir.channel[61].vFir.n});
        res.insert_or_assign("analogFir.channel[61].vFir.s", DumpEntry{analogFir.channel[61].vFir.s});
        res.insert_or_assign("analogFir.channel[61].vFir.r", DumpEntry{analogFir.channel[61].vFir.r});
        res.insert_or_assign("analogFir.channel[61].vFir.tSc", DumpEntry{analogFir.channel[61].vFir.tSc});
        res.insert_or_assign("analogFir.channel[61].vFir.phase", DumpEntry{analogFir.channel[61].vFir.phase});
        res.insert_or_assign("analogFir.channel[61].mmFir.m", DumpEntry{analogFir.channel[61].mmFir.m});
        res.insert_or_assign("analogFir.channel[61].mmFir.n", DumpEntry{analogFir.channel[61].mmFir.n});
        res.insert_or_assign("analogFir.channel[61].mmFir.s", DumpEntry{analogFir.channel[61].mmFir.s});
        res.insert_or_assign("analogFir.channel[61].mmFir.r", DumpEntry{analogFir.channel[61].mmFir.r});
        res.insert_or_assign("analogFir.channel[61].mmFir.tSc", DumpEntry{analogFir.channel[61].mmFir.tSc});
        res.insert_or_assign("analogFir.channel[61].mmFir.phase", DumpEntry{analogFir.channel[61].mmFir.phase});
        res.insert_or_assign("analogFir.channel[61].limit.maxLimit", DumpEntry{analogFir.channel[61].limit.maxLimit});
        res.insert_or_assign("analogFir.channel[61].limit.minLimit", DumpEntry{analogFir.channel[61].limit.minLimit});
        res.insert_or_assign(
            "analogFir.channel[61].limit.filterLength", DumpEntry{analogFir.channel[61].limit.filterLength}
        );
        res.insert_or_assign("analogFir.mmTrip", DumpEntry{analogFir.mmTrip});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogMs::ChannelArrayItem::Ms`
    //!
    //! @param ms A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ms
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogMs::ChannelArrayItem::Ms& ms)
    {
        DumpMap res{ms.base()};
        res.insert_or_assign("ms.algorithms", DumpEntry{ms.algorithms});
        res.insert_or_assign("ms.algorithms.alg", DumpEntry{ms.algorithms.alg});
        res.insert_or_assign("ms.offset", DumpEntry{ms.offset});
        res.insert_or_assign("ms.iirA", DumpEntry{ms.iirA});
        res.insert_or_assign("ms.iirB", DumpEntry{ms.iirB});
        res.insert_or_assign("ms.maxLimit", DumpEntry{ms.maxLimit});
        res.insert_or_assign("ms.minLimit", DumpEntry{ms.minLimit});
        res.insert_or_assign("ms.accLength", DumpEntry{ms.accLength});
        res.insert_or_assign("ms.firMask", DumpEntry{ms.firMask});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogMs::ChannelArray`
    //!
    //! @param channel A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under channel
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogMs::ChannelArray& channel)
    {
        DumpMap res{channel.base()};
        res.insert_or_assign("channel[0].ms.algorithms", DumpEntry{channel[0].ms.algorithms});
        res.insert_or_assign("channel[0].ms.algorithms.alg", DumpEntry{channel[0].ms.algorithms.alg});
        res.insert_or_assign("channel[0].ms.offset", DumpEntry{channel[0].ms.offset});
        res.insert_or_assign("channel[0].ms.iirA", DumpEntry{channel[0].ms.iirA});
        res.insert_or_assign("channel[0].ms.iirB", DumpEntry{channel[0].ms.iirB});
        res.insert_or_assign("channel[0].ms.maxLimit", DumpEntry{channel[0].ms.maxLimit});
        res.insert_or_assign("channel[0].ms.minLimit", DumpEntry{channel[0].ms.minLimit});
        res.insert_or_assign("channel[0].ms.accLength", DumpEntry{channel[0].ms.accLength});
        res.insert_or_assign("channel[0].ms.firMask", DumpEntry{channel[0].ms.firMask});
        res.insert_or_assign("channel[1].ms.algorithms", DumpEntry{channel[1].ms.algorithms});
        res.insert_or_assign("channel[1].ms.algorithms.alg", DumpEntry{channel[1].ms.algorithms.alg});
        res.insert_or_assign("channel[1].ms.offset", DumpEntry{channel[1].ms.offset});
        res.insert_or_assign("channel[1].ms.iirA", DumpEntry{channel[1].ms.iirA});
        res.insert_or_assign("channel[1].ms.iirB", DumpEntry{channel[1].ms.iirB});
        res.insert_or_assign("channel[1].ms.maxLimit", DumpEntry{channel[1].ms.maxLimit});
        res.insert_or_assign("channel[1].ms.minLimit", DumpEntry{channel[1].ms.minLimit});
        res.insert_or_assign("channel[1].ms.accLength", DumpEntry{channel[1].ms.accLength});
        res.insert_or_assign("channel[1].ms.firMask", DumpEntry{channel[1].ms.firMask});
        res.insert_or_assign("channel[2].ms.algorithms", DumpEntry{channel[2].ms.algorithms});
        res.insert_or_assign("channel[2].ms.algorithms.alg", DumpEntry{channel[2].ms.algorithms.alg});
        res.insert_or_assign("channel[2].ms.offset", DumpEntry{channel[2].ms.offset});
        res.insert_or_assign("channel[2].ms.iirA", DumpEntry{channel[2].ms.iirA});
        res.insert_or_assign("channel[2].ms.iirB", DumpEntry{channel[2].ms.iirB});
        res.insert_or_assign("channel[2].ms.maxLimit", DumpEntry{channel[2].ms.maxLimit});
        res.insert_or_assign("channel[2].ms.minLimit", DumpEntry{channel[2].ms.minLimit});
        res.insert_or_assign("channel[2].ms.accLength", DumpEntry{channel[2].ms.accLength});
        res.insert_or_assign("channel[2].ms.firMask", DumpEntry{channel[2].ms.firMask});
        res.insert_or_assign("channel[3].ms.algorithms", DumpEntry{channel[3].ms.algorithms});
        res.insert_or_assign("channel[3].ms.algorithms.alg", DumpEntry{channel[3].ms.algorithms.alg});
        res.insert_or_assign("channel[3].ms.offset", DumpEntry{channel[3].ms.offset});
        res.insert_or_assign("channel[3].ms.iirA", DumpEntry{channel[3].ms.iirA});
        res.insert_or_assign("channel[3].ms.iirB", DumpEntry{channel[3].ms.iirB});
        res.insert_or_assign("channel[3].ms.maxLimit", DumpEntry{channel[3].ms.maxLimit});
        res.insert_or_assign("channel[3].ms.minLimit", DumpEntry{channel[3].ms.minLimit});
        res.insert_or_assign("channel[3].ms.accLength", DumpEntry{channel[3].ms.accLength});
        res.insert_or_assign("channel[3].ms.firMask", DumpEntry{channel[3].ms.firMask});
        res.insert_or_assign("channel[4].ms.algorithms", DumpEntry{channel[4].ms.algorithms});
        res.insert_or_assign("channel[4].ms.algorithms.alg", DumpEntry{channel[4].ms.algorithms.alg});
        res.insert_or_assign("channel[4].ms.offset", DumpEntry{channel[4].ms.offset});
        res.insert_or_assign("channel[4].ms.iirA", DumpEntry{channel[4].ms.iirA});
        res.insert_or_assign("channel[4].ms.iirB", DumpEntry{channel[4].ms.iirB});
        res.insert_or_assign("channel[4].ms.maxLimit", DumpEntry{channel[4].ms.maxLimit});
        res.insert_or_assign("channel[4].ms.minLimit", DumpEntry{channel[4].ms.minLimit});
        res.insert_or_assign("channel[4].ms.accLength", DumpEntry{channel[4].ms.accLength});
        res.insert_or_assign("channel[4].ms.firMask", DumpEntry{channel[4].ms.firMask});
        res.insert_or_assign("channel[5].ms.algorithms", DumpEntry{channel[5].ms.algorithms});
        res.insert_or_assign("channel[5].ms.algorithms.alg", DumpEntry{channel[5].ms.algorithms.alg});
        res.insert_or_assign("channel[5].ms.offset", DumpEntry{channel[5].ms.offset});
        res.insert_or_assign("channel[5].ms.iirA", DumpEntry{channel[5].ms.iirA});
        res.insert_or_assign("channel[5].ms.iirB", DumpEntry{channel[5].ms.iirB});
        res.insert_or_assign("channel[5].ms.maxLimit", DumpEntry{channel[5].ms.maxLimit});
        res.insert_or_assign("channel[5].ms.minLimit", DumpEntry{channel[5].ms.minLimit});
        res.insert_or_assign("channel[5].ms.accLength", DumpEntry{channel[5].ms.accLength});
        res.insert_or_assign("channel[5].ms.firMask", DumpEntry{channel[5].ms.firMask});
        res.insert_or_assign("channel[6].ms.algorithms", DumpEntry{channel[6].ms.algorithms});
        res.insert_or_assign("channel[6].ms.algorithms.alg", DumpEntry{channel[6].ms.algorithms.alg});
        res.insert_or_assign("channel[6].ms.offset", DumpEntry{channel[6].ms.offset});
        res.insert_or_assign("channel[6].ms.iirA", DumpEntry{channel[6].ms.iirA});
        res.insert_or_assign("channel[6].ms.iirB", DumpEntry{channel[6].ms.iirB});
        res.insert_or_assign("channel[6].ms.maxLimit", DumpEntry{channel[6].ms.maxLimit});
        res.insert_or_assign("channel[6].ms.minLimit", DumpEntry{channel[6].ms.minLimit});
        res.insert_or_assign("channel[6].ms.accLength", DumpEntry{channel[6].ms.accLength});
        res.insert_or_assign("channel[6].ms.firMask", DumpEntry{channel[6].ms.firMask});
        res.insert_or_assign("channel[7].ms.algorithms", DumpEntry{channel[7].ms.algorithms});
        res.insert_or_assign("channel[7].ms.algorithms.alg", DumpEntry{channel[7].ms.algorithms.alg});
        res.insert_or_assign("channel[7].ms.offset", DumpEntry{channel[7].ms.offset});
        res.insert_or_assign("channel[7].ms.iirA", DumpEntry{channel[7].ms.iirA});
        res.insert_or_assign("channel[7].ms.iirB", DumpEntry{channel[7].ms.iirB});
        res.insert_or_assign("channel[7].ms.maxLimit", DumpEntry{channel[7].ms.maxLimit});
        res.insert_or_assign("channel[7].ms.minLimit", DumpEntry{channel[7].ms.minLimit});
        res.insert_or_assign("channel[7].ms.accLength", DumpEntry{channel[7].ms.accLength});
        res.insert_or_assign("channel[7].ms.firMask", DumpEntry{channel[7].ms.firMask});
        res.insert_or_assign("channel[8].ms.algorithms", DumpEntry{channel[8].ms.algorithms});
        res.insert_or_assign("channel[8].ms.algorithms.alg", DumpEntry{channel[8].ms.algorithms.alg});
        res.insert_or_assign("channel[8].ms.offset", DumpEntry{channel[8].ms.offset});
        res.insert_or_assign("channel[8].ms.iirA", DumpEntry{channel[8].ms.iirA});
        res.insert_or_assign("channel[8].ms.iirB", DumpEntry{channel[8].ms.iirB});
        res.insert_or_assign("channel[8].ms.maxLimit", DumpEntry{channel[8].ms.maxLimit});
        res.insert_or_assign("channel[8].ms.minLimit", DumpEntry{channel[8].ms.minLimit});
        res.insert_or_assign("channel[8].ms.accLength", DumpEntry{channel[8].ms.accLength});
        res.insert_or_assign("channel[8].ms.firMask", DumpEntry{channel[8].ms.firMask});
        res.insert_or_assign("channel[9].ms.algorithms", DumpEntry{channel[9].ms.algorithms});
        res.insert_or_assign("channel[9].ms.algorithms.alg", DumpEntry{channel[9].ms.algorithms.alg});
        res.insert_or_assign("channel[9].ms.offset", DumpEntry{channel[9].ms.offset});
        res.insert_or_assign("channel[9].ms.iirA", DumpEntry{channel[9].ms.iirA});
        res.insert_or_assign("channel[9].ms.iirB", DumpEntry{channel[9].ms.iirB});
        res.insert_or_assign("channel[9].ms.maxLimit", DumpEntry{channel[9].ms.maxLimit});
        res.insert_or_assign("channel[9].ms.minLimit", DumpEntry{channel[9].ms.minLimit});
        res.insert_or_assign("channel[9].ms.accLength", DumpEntry{channel[9].ms.accLength});
        res.insert_or_assign("channel[9].ms.firMask", DumpEntry{channel[9].ms.firMask});
        res.insert_or_assign("channel[10].ms.algorithms", DumpEntry{channel[10].ms.algorithms});
        res.insert_or_assign("channel[10].ms.algorithms.alg", DumpEntry{channel[10].ms.algorithms.alg});
        res.insert_or_assign("channel[10].ms.offset", DumpEntry{channel[10].ms.offset});
        res.insert_or_assign("channel[10].ms.iirA", DumpEntry{channel[10].ms.iirA});
        res.insert_or_assign("channel[10].ms.iirB", DumpEntry{channel[10].ms.iirB});
        res.insert_or_assign("channel[10].ms.maxLimit", DumpEntry{channel[10].ms.maxLimit});
        res.insert_or_assign("channel[10].ms.minLimit", DumpEntry{channel[10].ms.minLimit});
        res.insert_or_assign("channel[10].ms.accLength", DumpEntry{channel[10].ms.accLength});
        res.insert_or_assign("channel[10].ms.firMask", DumpEntry{channel[10].ms.firMask});
        res.insert_or_assign("channel[11].ms.algorithms", DumpEntry{channel[11].ms.algorithms});
        res.insert_or_assign("channel[11].ms.algorithms.alg", DumpEntry{channel[11].ms.algorithms.alg});
        res.insert_or_assign("channel[11].ms.offset", DumpEntry{channel[11].ms.offset});
        res.insert_or_assign("channel[11].ms.iirA", DumpEntry{channel[11].ms.iirA});
        res.insert_or_assign("channel[11].ms.iirB", DumpEntry{channel[11].ms.iirB});
        res.insert_or_assign("channel[11].ms.maxLimit", DumpEntry{channel[11].ms.maxLimit});
        res.insert_or_assign("channel[11].ms.minLimit", DumpEntry{channel[11].ms.minLimit});
        res.insert_or_assign("channel[11].ms.accLength", DumpEntry{channel[11].ms.accLength});
        res.insert_or_assign("channel[11].ms.firMask", DumpEntry{channel[11].ms.firMask});
        res.insert_or_assign("channel[12].ms.algorithms", DumpEntry{channel[12].ms.algorithms});
        res.insert_or_assign("channel[12].ms.algorithms.alg", DumpEntry{channel[12].ms.algorithms.alg});
        res.insert_or_assign("channel[12].ms.offset", DumpEntry{channel[12].ms.offset});
        res.insert_or_assign("channel[12].ms.iirA", DumpEntry{channel[12].ms.iirA});
        res.insert_or_assign("channel[12].ms.iirB", DumpEntry{channel[12].ms.iirB});
        res.insert_or_assign("channel[12].ms.maxLimit", DumpEntry{channel[12].ms.maxLimit});
        res.insert_or_assign("channel[12].ms.minLimit", DumpEntry{channel[12].ms.minLimit});
        res.insert_or_assign("channel[12].ms.accLength", DumpEntry{channel[12].ms.accLength});
        res.insert_or_assign("channel[12].ms.firMask", DumpEntry{channel[12].ms.firMask});
        res.insert_or_assign("channel[13].ms.algorithms", DumpEntry{channel[13].ms.algorithms});
        res.insert_or_assign("channel[13].ms.algorithms.alg", DumpEntry{channel[13].ms.algorithms.alg});
        res.insert_or_assign("channel[13].ms.offset", DumpEntry{channel[13].ms.offset});
        res.insert_or_assign("channel[13].ms.iirA", DumpEntry{channel[13].ms.iirA});
        res.insert_or_assign("channel[13].ms.iirB", DumpEntry{channel[13].ms.iirB});
        res.insert_or_assign("channel[13].ms.maxLimit", DumpEntry{channel[13].ms.maxLimit});
        res.insert_or_assign("channel[13].ms.minLimit", DumpEntry{channel[13].ms.minLimit});
        res.insert_or_assign("channel[13].ms.accLength", DumpEntry{channel[13].ms.accLength});
        res.insert_or_assign("channel[13].ms.firMask", DumpEntry{channel[13].ms.firMask});
        res.insert_or_assign("channel[14].ms.algorithms", DumpEntry{channel[14].ms.algorithms});
        res.insert_or_assign("channel[14].ms.algorithms.alg", DumpEntry{channel[14].ms.algorithms.alg});
        res.insert_or_assign("channel[14].ms.offset", DumpEntry{channel[14].ms.offset});
        res.insert_or_assign("channel[14].ms.iirA", DumpEntry{channel[14].ms.iirA});
        res.insert_or_assign("channel[14].ms.iirB", DumpEntry{channel[14].ms.iirB});
        res.insert_or_assign("channel[14].ms.maxLimit", DumpEntry{channel[14].ms.maxLimit});
        res.insert_or_assign("channel[14].ms.minLimit", DumpEntry{channel[14].ms.minLimit});
        res.insert_or_assign("channel[14].ms.accLength", DumpEntry{channel[14].ms.accLength});
        res.insert_or_assign("channel[14].ms.firMask", DumpEntry{channel[14].ms.firMask});
        res.insert_or_assign("channel[15].ms.algorithms", DumpEntry{channel[15].ms.algorithms});
        res.insert_or_assign("channel[15].ms.algorithms.alg", DumpEntry{channel[15].ms.algorithms.alg});
        res.insert_or_assign("channel[15].ms.offset", DumpEntry{channel[15].ms.offset});
        res.insert_or_assign("channel[15].ms.iirA", DumpEntry{channel[15].ms.iirA});
        res.insert_or_assign("channel[15].ms.iirB", DumpEntry{channel[15].ms.iirB});
        res.insert_or_assign("channel[15].ms.maxLimit", DumpEntry{channel[15].ms.maxLimit});
        res.insert_or_assign("channel[15].ms.minLimit", DumpEntry{channel[15].ms.minLimit});
        res.insert_or_assign("channel[15].ms.accLength", DumpEntry{channel[15].ms.accLength});
        res.insert_or_assign("channel[15].ms.firMask", DumpEntry{channel[15].ms.firMask});
        res.insert_or_assign("channel[16].ms.algorithms", DumpEntry{channel[16].ms.algorithms});
        res.insert_or_assign("channel[16].ms.algorithms.alg", DumpEntry{channel[16].ms.algorithms.alg});
        res.insert_or_assign("channel[16].ms.offset", DumpEntry{channel[16].ms.offset});
        res.insert_or_assign("channel[16].ms.iirA", DumpEntry{channel[16].ms.iirA});
        res.insert_or_assign("channel[16].ms.iirB", DumpEntry{channel[16].ms.iirB});
        res.insert_or_assign("channel[16].ms.maxLimit", DumpEntry{channel[16].ms.maxLimit});
        res.insert_or_assign("channel[16].ms.minLimit", DumpEntry{channel[16].ms.minLimit});
        res.insert_or_assign("channel[16].ms.accLength", DumpEntry{channel[16].ms.accLength});
        res.insert_or_assign("channel[16].ms.firMask", DumpEntry{channel[16].ms.firMask});
        res.insert_or_assign("channel[17].ms.algorithms", DumpEntry{channel[17].ms.algorithms});
        res.insert_or_assign("channel[17].ms.algorithms.alg", DumpEntry{channel[17].ms.algorithms.alg});
        res.insert_or_assign("channel[17].ms.offset", DumpEntry{channel[17].ms.offset});
        res.insert_or_assign("channel[17].ms.iirA", DumpEntry{channel[17].ms.iirA});
        res.insert_or_assign("channel[17].ms.iirB", DumpEntry{channel[17].ms.iirB});
        res.insert_or_assign("channel[17].ms.maxLimit", DumpEntry{channel[17].ms.maxLimit});
        res.insert_or_assign("channel[17].ms.minLimit", DumpEntry{channel[17].ms.minLimit});
        res.insert_or_assign("channel[17].ms.accLength", DumpEntry{channel[17].ms.accLength});
        res.insert_or_assign("channel[17].ms.firMask", DumpEntry{channel[17].ms.firMask});
        res.insert_or_assign("channel[18].ms.algorithms", DumpEntry{channel[18].ms.algorithms});
        res.insert_or_assign("channel[18].ms.algorithms.alg", DumpEntry{channel[18].ms.algorithms.alg});
        res.insert_or_assign("channel[18].ms.offset", DumpEntry{channel[18].ms.offset});
        res.insert_or_assign("channel[18].ms.iirA", DumpEntry{channel[18].ms.iirA});
        res.insert_or_assign("channel[18].ms.iirB", DumpEntry{channel[18].ms.iirB});
        res.insert_or_assign("channel[18].ms.maxLimit", DumpEntry{channel[18].ms.maxLimit});
        res.insert_or_assign("channel[18].ms.minLimit", DumpEntry{channel[18].ms.minLimit});
        res.insert_or_assign("channel[18].ms.accLength", DumpEntry{channel[18].ms.accLength});
        res.insert_or_assign("channel[18].ms.firMask", DumpEntry{channel[18].ms.firMask});
        res.insert_or_assign("channel[19].ms.algorithms", DumpEntry{channel[19].ms.algorithms});
        res.insert_or_assign("channel[19].ms.algorithms.alg", DumpEntry{channel[19].ms.algorithms.alg});
        res.insert_or_assign("channel[19].ms.offset", DumpEntry{channel[19].ms.offset});
        res.insert_or_assign("channel[19].ms.iirA", DumpEntry{channel[19].ms.iirA});
        res.insert_or_assign("channel[19].ms.iirB", DumpEntry{channel[19].ms.iirB});
        res.insert_or_assign("channel[19].ms.maxLimit", DumpEntry{channel[19].ms.maxLimit});
        res.insert_or_assign("channel[19].ms.minLimit", DumpEntry{channel[19].ms.minLimit});
        res.insert_or_assign("channel[19].ms.accLength", DumpEntry{channel[19].ms.accLength});
        res.insert_or_assign("channel[19].ms.firMask", DumpEntry{channel[19].ms.firMask});
        res.insert_or_assign("channel[20].ms.algorithms", DumpEntry{channel[20].ms.algorithms});
        res.insert_or_assign("channel[20].ms.algorithms.alg", DumpEntry{channel[20].ms.algorithms.alg});
        res.insert_or_assign("channel[20].ms.offset", DumpEntry{channel[20].ms.offset});
        res.insert_or_assign("channel[20].ms.iirA", DumpEntry{channel[20].ms.iirA});
        res.insert_or_assign("channel[20].ms.iirB", DumpEntry{channel[20].ms.iirB});
        res.insert_or_assign("channel[20].ms.maxLimit", DumpEntry{channel[20].ms.maxLimit});
        res.insert_or_assign("channel[20].ms.minLimit", DumpEntry{channel[20].ms.minLimit});
        res.insert_or_assign("channel[20].ms.accLength", DumpEntry{channel[20].ms.accLength});
        res.insert_or_assign("channel[20].ms.firMask", DumpEntry{channel[20].ms.firMask});
        res.insert_or_assign("channel[21].ms.algorithms", DumpEntry{channel[21].ms.algorithms});
        res.insert_or_assign("channel[21].ms.algorithms.alg", DumpEntry{channel[21].ms.algorithms.alg});
        res.insert_or_assign("channel[21].ms.offset", DumpEntry{channel[21].ms.offset});
        res.insert_or_assign("channel[21].ms.iirA", DumpEntry{channel[21].ms.iirA});
        res.insert_or_assign("channel[21].ms.iirB", DumpEntry{channel[21].ms.iirB});
        res.insert_or_assign("channel[21].ms.maxLimit", DumpEntry{channel[21].ms.maxLimit});
        res.insert_or_assign("channel[21].ms.minLimit", DumpEntry{channel[21].ms.minLimit});
        res.insert_or_assign("channel[21].ms.accLength", DumpEntry{channel[21].ms.accLength});
        res.insert_or_assign("channel[21].ms.firMask", DumpEntry{channel[21].ms.firMask});
        res.insert_or_assign("channel[22].ms.algorithms", DumpEntry{channel[22].ms.algorithms});
        res.insert_or_assign("channel[22].ms.algorithms.alg", DumpEntry{channel[22].ms.algorithms.alg});
        res.insert_or_assign("channel[22].ms.offset", DumpEntry{channel[22].ms.offset});
        res.insert_or_assign("channel[22].ms.iirA", DumpEntry{channel[22].ms.iirA});
        res.insert_or_assign("channel[22].ms.iirB", DumpEntry{channel[22].ms.iirB});
        res.insert_or_assign("channel[22].ms.maxLimit", DumpEntry{channel[22].ms.maxLimit});
        res.insert_or_assign("channel[22].ms.minLimit", DumpEntry{channel[22].ms.minLimit});
        res.insert_or_assign("channel[22].ms.accLength", DumpEntry{channel[22].ms.accLength});
        res.insert_or_assign("channel[22].ms.firMask", DumpEntry{channel[22].ms.firMask});
        res.insert_or_assign("channel[23].ms.algorithms", DumpEntry{channel[23].ms.algorithms});
        res.insert_or_assign("channel[23].ms.algorithms.alg", DumpEntry{channel[23].ms.algorithms.alg});
        res.insert_or_assign("channel[23].ms.offset", DumpEntry{channel[23].ms.offset});
        res.insert_or_assign("channel[23].ms.iirA", DumpEntry{channel[23].ms.iirA});
        res.insert_or_assign("channel[23].ms.iirB", DumpEntry{channel[23].ms.iirB});
        res.insert_or_assign("channel[23].ms.maxLimit", DumpEntry{channel[23].ms.maxLimit});
        res.insert_or_assign("channel[23].ms.minLimit", DumpEntry{channel[23].ms.minLimit});
        res.insert_or_assign("channel[23].ms.accLength", DumpEntry{channel[23].ms.accLength});
        res.insert_or_assign("channel[23].ms.firMask", DumpEntry{channel[23].ms.firMask});
        res.insert_or_assign("channel[24].ms.algorithms", DumpEntry{channel[24].ms.algorithms});
        res.insert_or_assign("channel[24].ms.algorithms.alg", DumpEntry{channel[24].ms.algorithms.alg});
        res.insert_or_assign("channel[24].ms.offset", DumpEntry{channel[24].ms.offset});
        res.insert_or_assign("channel[24].ms.iirA", DumpEntry{channel[24].ms.iirA});
        res.insert_or_assign("channel[24].ms.iirB", DumpEntry{channel[24].ms.iirB});
        res.insert_or_assign("channel[24].ms.maxLimit", DumpEntry{channel[24].ms.maxLimit});
        res.insert_or_assign("channel[24].ms.minLimit", DumpEntry{channel[24].ms.minLimit});
        res.insert_or_assign("channel[24].ms.accLength", DumpEntry{channel[24].ms.accLength});
        res.insert_or_assign("channel[24].ms.firMask", DumpEntry{channel[24].ms.firMask});
        res.insert_or_assign("channel[25].ms.algorithms", DumpEntry{channel[25].ms.algorithms});
        res.insert_or_assign("channel[25].ms.algorithms.alg", DumpEntry{channel[25].ms.algorithms.alg});
        res.insert_or_assign("channel[25].ms.offset", DumpEntry{channel[25].ms.offset});
        res.insert_or_assign("channel[25].ms.iirA", DumpEntry{channel[25].ms.iirA});
        res.insert_or_assign("channel[25].ms.iirB", DumpEntry{channel[25].ms.iirB});
        res.insert_or_assign("channel[25].ms.maxLimit", DumpEntry{channel[25].ms.maxLimit});
        res.insert_or_assign("channel[25].ms.minLimit", DumpEntry{channel[25].ms.minLimit});
        res.insert_or_assign("channel[25].ms.accLength", DumpEntry{channel[25].ms.accLength});
        res.insert_or_assign("channel[25].ms.firMask", DumpEntry{channel[25].ms.firMask});
        res.insert_or_assign("channel[26].ms.algorithms", DumpEntry{channel[26].ms.algorithms});
        res.insert_or_assign("channel[26].ms.algorithms.alg", DumpEntry{channel[26].ms.algorithms.alg});
        res.insert_or_assign("channel[26].ms.offset", DumpEntry{channel[26].ms.offset});
        res.insert_or_assign("channel[26].ms.iirA", DumpEntry{channel[26].ms.iirA});
        res.insert_or_assign("channel[26].ms.iirB", DumpEntry{channel[26].ms.iirB});
        res.insert_or_assign("channel[26].ms.maxLimit", DumpEntry{channel[26].ms.maxLimit});
        res.insert_or_assign("channel[26].ms.minLimit", DumpEntry{channel[26].ms.minLimit});
        res.insert_or_assign("channel[26].ms.accLength", DumpEntry{channel[26].ms.accLength});
        res.insert_or_assign("channel[26].ms.firMask", DumpEntry{channel[26].ms.firMask});
        res.insert_or_assign("channel[27].ms.algorithms", DumpEntry{channel[27].ms.algorithms});
        res.insert_or_assign("channel[27].ms.algorithms.alg", DumpEntry{channel[27].ms.algorithms.alg});
        res.insert_or_assign("channel[27].ms.offset", DumpEntry{channel[27].ms.offset});
        res.insert_or_assign("channel[27].ms.iirA", DumpEntry{channel[27].ms.iirA});
        res.insert_or_assign("channel[27].ms.iirB", DumpEntry{channel[27].ms.iirB});
        res.insert_or_assign("channel[27].ms.maxLimit", DumpEntry{channel[27].ms.maxLimit});
        res.insert_or_assign("channel[27].ms.minLimit", DumpEntry{channel[27].ms.minLimit});
        res.insert_or_assign("channel[27].ms.accLength", DumpEntry{channel[27].ms.accLength});
        res.insert_or_assign("channel[27].ms.firMask", DumpEntry{channel[27].ms.firMask});
        res.insert_or_assign("channel[28].ms.algorithms", DumpEntry{channel[28].ms.algorithms});
        res.insert_or_assign("channel[28].ms.algorithms.alg", DumpEntry{channel[28].ms.algorithms.alg});
        res.insert_or_assign("channel[28].ms.offset", DumpEntry{channel[28].ms.offset});
        res.insert_or_assign("channel[28].ms.iirA", DumpEntry{channel[28].ms.iirA});
        res.insert_or_assign("channel[28].ms.iirB", DumpEntry{channel[28].ms.iirB});
        res.insert_or_assign("channel[28].ms.maxLimit", DumpEntry{channel[28].ms.maxLimit});
        res.insert_or_assign("channel[28].ms.minLimit", DumpEntry{channel[28].ms.minLimit});
        res.insert_or_assign("channel[28].ms.accLength", DumpEntry{channel[28].ms.accLength});
        res.insert_or_assign("channel[28].ms.firMask", DumpEntry{channel[28].ms.firMask});
        res.insert_or_assign("channel[29].ms.algorithms", DumpEntry{channel[29].ms.algorithms});
        res.insert_or_assign("channel[29].ms.algorithms.alg", DumpEntry{channel[29].ms.algorithms.alg});
        res.insert_or_assign("channel[29].ms.offset", DumpEntry{channel[29].ms.offset});
        res.insert_or_assign("channel[29].ms.iirA", DumpEntry{channel[29].ms.iirA});
        res.insert_or_assign("channel[29].ms.iirB", DumpEntry{channel[29].ms.iirB});
        res.insert_or_assign("channel[29].ms.maxLimit", DumpEntry{channel[29].ms.maxLimit});
        res.insert_or_assign("channel[29].ms.minLimit", DumpEntry{channel[29].ms.minLimit});
        res.insert_or_assign("channel[29].ms.accLength", DumpEntry{channel[29].ms.accLength});
        res.insert_or_assign("channel[29].ms.firMask", DumpEntry{channel[29].ms.firMask});
        res.insert_or_assign("channel[30].ms.algorithms", DumpEntry{channel[30].ms.algorithms});
        res.insert_or_assign("channel[30].ms.algorithms.alg", DumpEntry{channel[30].ms.algorithms.alg});
        res.insert_or_assign("channel[30].ms.offset", DumpEntry{channel[30].ms.offset});
        res.insert_or_assign("channel[30].ms.iirA", DumpEntry{channel[30].ms.iirA});
        res.insert_or_assign("channel[30].ms.iirB", DumpEntry{channel[30].ms.iirB});
        res.insert_or_assign("channel[30].ms.maxLimit", DumpEntry{channel[30].ms.maxLimit});
        res.insert_or_assign("channel[30].ms.minLimit", DumpEntry{channel[30].ms.minLimit});
        res.insert_or_assign("channel[30].ms.accLength", DumpEntry{channel[30].ms.accLength});
        res.insert_or_assign("channel[30].ms.firMask", DumpEntry{channel[30].ms.firMask});
        res.insert_or_assign("channel[31].ms.algorithms", DumpEntry{channel[31].ms.algorithms});
        res.insert_or_assign("channel[31].ms.algorithms.alg", DumpEntry{channel[31].ms.algorithms.alg});
        res.insert_or_assign("channel[31].ms.offset", DumpEntry{channel[31].ms.offset});
        res.insert_or_assign("channel[31].ms.iirA", DumpEntry{channel[31].ms.iirA});
        res.insert_or_assign("channel[31].ms.iirB", DumpEntry{channel[31].ms.iirB});
        res.insert_or_assign("channel[31].ms.maxLimit", DumpEntry{channel[31].ms.maxLimit});
        res.insert_or_assign("channel[31].ms.minLimit", DumpEntry{channel[31].ms.minLimit});
        res.insert_or_assign("channel[31].ms.accLength", DumpEntry{channel[31].ms.accLength});
        res.insert_or_assign("channel[31].ms.firMask", DumpEntry{channel[31].ms.firMask});
        res.insert_or_assign("channel[32].ms.algorithms", DumpEntry{channel[32].ms.algorithms});
        res.insert_or_assign("channel[32].ms.algorithms.alg", DumpEntry{channel[32].ms.algorithms.alg});
        res.insert_or_assign("channel[32].ms.offset", DumpEntry{channel[32].ms.offset});
        res.insert_or_assign("channel[32].ms.iirA", DumpEntry{channel[32].ms.iirA});
        res.insert_or_assign("channel[32].ms.iirB", DumpEntry{channel[32].ms.iirB});
        res.insert_or_assign("channel[32].ms.maxLimit", DumpEntry{channel[32].ms.maxLimit});
        res.insert_or_assign("channel[32].ms.minLimit", DumpEntry{channel[32].ms.minLimit});
        res.insert_or_assign("channel[32].ms.accLength", DumpEntry{channel[32].ms.accLength});
        res.insert_or_assign("channel[32].ms.firMask", DumpEntry{channel[32].ms.firMask});
        res.insert_or_assign("channel[33].ms.algorithms", DumpEntry{channel[33].ms.algorithms});
        res.insert_or_assign("channel[33].ms.algorithms.alg", DumpEntry{channel[33].ms.algorithms.alg});
        res.insert_or_assign("channel[33].ms.offset", DumpEntry{channel[33].ms.offset});
        res.insert_or_assign("channel[33].ms.iirA", DumpEntry{channel[33].ms.iirA});
        res.insert_or_assign("channel[33].ms.iirB", DumpEntry{channel[33].ms.iirB});
        res.insert_or_assign("channel[33].ms.maxLimit", DumpEntry{channel[33].ms.maxLimit});
        res.insert_or_assign("channel[33].ms.minLimit", DumpEntry{channel[33].ms.minLimit});
        res.insert_or_assign("channel[33].ms.accLength", DumpEntry{channel[33].ms.accLength});
        res.insert_or_assign("channel[33].ms.firMask", DumpEntry{channel[33].ms.firMask});
        res.insert_or_assign("channel[34].ms.algorithms", DumpEntry{channel[34].ms.algorithms});
        res.insert_or_assign("channel[34].ms.algorithms.alg", DumpEntry{channel[34].ms.algorithms.alg});
        res.insert_or_assign("channel[34].ms.offset", DumpEntry{channel[34].ms.offset});
        res.insert_or_assign("channel[34].ms.iirA", DumpEntry{channel[34].ms.iirA});
        res.insert_or_assign("channel[34].ms.iirB", DumpEntry{channel[34].ms.iirB});
        res.insert_or_assign("channel[34].ms.maxLimit", DumpEntry{channel[34].ms.maxLimit});
        res.insert_or_assign("channel[34].ms.minLimit", DumpEntry{channel[34].ms.minLimit});
        res.insert_or_assign("channel[34].ms.accLength", DumpEntry{channel[34].ms.accLength});
        res.insert_or_assign("channel[34].ms.firMask", DumpEntry{channel[34].ms.firMask});
        res.insert_or_assign("channel[35].ms.algorithms", DumpEntry{channel[35].ms.algorithms});
        res.insert_or_assign("channel[35].ms.algorithms.alg", DumpEntry{channel[35].ms.algorithms.alg});
        res.insert_or_assign("channel[35].ms.offset", DumpEntry{channel[35].ms.offset});
        res.insert_or_assign("channel[35].ms.iirA", DumpEntry{channel[35].ms.iirA});
        res.insert_or_assign("channel[35].ms.iirB", DumpEntry{channel[35].ms.iirB});
        res.insert_or_assign("channel[35].ms.maxLimit", DumpEntry{channel[35].ms.maxLimit});
        res.insert_or_assign("channel[35].ms.minLimit", DumpEntry{channel[35].ms.minLimit});
        res.insert_or_assign("channel[35].ms.accLength", DumpEntry{channel[35].ms.accLength});
        res.insert_or_assign("channel[35].ms.firMask", DumpEntry{channel[35].ms.firMask});
        res.insert_or_assign("channel[36].ms.algorithms", DumpEntry{channel[36].ms.algorithms});
        res.insert_or_assign("channel[36].ms.algorithms.alg", DumpEntry{channel[36].ms.algorithms.alg});
        res.insert_or_assign("channel[36].ms.offset", DumpEntry{channel[36].ms.offset});
        res.insert_or_assign("channel[36].ms.iirA", DumpEntry{channel[36].ms.iirA});
        res.insert_or_assign("channel[36].ms.iirB", DumpEntry{channel[36].ms.iirB});
        res.insert_or_assign("channel[36].ms.maxLimit", DumpEntry{channel[36].ms.maxLimit});
        res.insert_or_assign("channel[36].ms.minLimit", DumpEntry{channel[36].ms.minLimit});
        res.insert_or_assign("channel[36].ms.accLength", DumpEntry{channel[36].ms.accLength});
        res.insert_or_assign("channel[36].ms.firMask", DumpEntry{channel[36].ms.firMask});
        res.insert_or_assign("channel[37].ms.algorithms", DumpEntry{channel[37].ms.algorithms});
        res.insert_or_assign("channel[37].ms.algorithms.alg", DumpEntry{channel[37].ms.algorithms.alg});
        res.insert_or_assign("channel[37].ms.offset", DumpEntry{channel[37].ms.offset});
        res.insert_or_assign("channel[37].ms.iirA", DumpEntry{channel[37].ms.iirA});
        res.insert_or_assign("channel[37].ms.iirB", DumpEntry{channel[37].ms.iirB});
        res.insert_or_assign("channel[37].ms.maxLimit", DumpEntry{channel[37].ms.maxLimit});
        res.insert_or_assign("channel[37].ms.minLimit", DumpEntry{channel[37].ms.minLimit});
        res.insert_or_assign("channel[37].ms.accLength", DumpEntry{channel[37].ms.accLength});
        res.insert_or_assign("channel[37].ms.firMask", DumpEntry{channel[37].ms.firMask});
        res.insert_or_assign("channel[38].ms.algorithms", DumpEntry{channel[38].ms.algorithms});
        res.insert_or_assign("channel[38].ms.algorithms.alg", DumpEntry{channel[38].ms.algorithms.alg});
        res.insert_or_assign("channel[38].ms.offset", DumpEntry{channel[38].ms.offset});
        res.insert_or_assign("channel[38].ms.iirA", DumpEntry{channel[38].ms.iirA});
        res.insert_or_assign("channel[38].ms.iirB", DumpEntry{channel[38].ms.iirB});
        res.insert_or_assign("channel[38].ms.maxLimit", DumpEntry{channel[38].ms.maxLimit});
        res.insert_or_assign("channel[38].ms.minLimit", DumpEntry{channel[38].ms.minLimit});
        res.insert_or_assign("channel[38].ms.accLength", DumpEntry{channel[38].ms.accLength});
        res.insert_or_assign("channel[38].ms.firMask", DumpEntry{channel[38].ms.firMask});
        res.insert_or_assign("channel[39].ms.algorithms", DumpEntry{channel[39].ms.algorithms});
        res.insert_or_assign("channel[39].ms.algorithms.alg", DumpEntry{channel[39].ms.algorithms.alg});
        res.insert_or_assign("channel[39].ms.offset", DumpEntry{channel[39].ms.offset});
        res.insert_or_assign("channel[39].ms.iirA", DumpEntry{channel[39].ms.iirA});
        res.insert_or_assign("channel[39].ms.iirB", DumpEntry{channel[39].ms.iirB});
        res.insert_or_assign("channel[39].ms.maxLimit", DumpEntry{channel[39].ms.maxLimit});
        res.insert_or_assign("channel[39].ms.minLimit", DumpEntry{channel[39].ms.minLimit});
        res.insert_or_assign("channel[39].ms.accLength", DumpEntry{channel[39].ms.accLength});
        res.insert_or_assign("channel[39].ms.firMask", DumpEntry{channel[39].ms.firMask});
        res.insert_or_assign("channel[40].ms.algorithms", DumpEntry{channel[40].ms.algorithms});
        res.insert_or_assign("channel[40].ms.algorithms.alg", DumpEntry{channel[40].ms.algorithms.alg});
        res.insert_or_assign("channel[40].ms.offset", DumpEntry{channel[40].ms.offset});
        res.insert_or_assign("channel[40].ms.iirA", DumpEntry{channel[40].ms.iirA});
        res.insert_or_assign("channel[40].ms.iirB", DumpEntry{channel[40].ms.iirB});
        res.insert_or_assign("channel[40].ms.maxLimit", DumpEntry{channel[40].ms.maxLimit});
        res.insert_or_assign("channel[40].ms.minLimit", DumpEntry{channel[40].ms.minLimit});
        res.insert_or_assign("channel[40].ms.accLength", DumpEntry{channel[40].ms.accLength});
        res.insert_or_assign("channel[40].ms.firMask", DumpEntry{channel[40].ms.firMask});
        res.insert_or_assign("channel[41].ms.algorithms", DumpEntry{channel[41].ms.algorithms});
        res.insert_or_assign("channel[41].ms.algorithms.alg", DumpEntry{channel[41].ms.algorithms.alg});
        res.insert_or_assign("channel[41].ms.offset", DumpEntry{channel[41].ms.offset});
        res.insert_or_assign("channel[41].ms.iirA", DumpEntry{channel[41].ms.iirA});
        res.insert_or_assign("channel[41].ms.iirB", DumpEntry{channel[41].ms.iirB});
        res.insert_or_assign("channel[41].ms.maxLimit", DumpEntry{channel[41].ms.maxLimit});
        res.insert_or_assign("channel[41].ms.minLimit", DumpEntry{channel[41].ms.minLimit});
        res.insert_or_assign("channel[41].ms.accLength", DumpEntry{channel[41].ms.accLength});
        res.insert_or_assign("channel[41].ms.firMask", DumpEntry{channel[41].ms.firMask});
        res.insert_or_assign("channel[42].ms.algorithms", DumpEntry{channel[42].ms.algorithms});
        res.insert_or_assign("channel[42].ms.algorithms.alg", DumpEntry{channel[42].ms.algorithms.alg});
        res.insert_or_assign("channel[42].ms.offset", DumpEntry{channel[42].ms.offset});
        res.insert_or_assign("channel[42].ms.iirA", DumpEntry{channel[42].ms.iirA});
        res.insert_or_assign("channel[42].ms.iirB", DumpEntry{channel[42].ms.iirB});
        res.insert_or_assign("channel[42].ms.maxLimit", DumpEntry{channel[42].ms.maxLimit});
        res.insert_or_assign("channel[42].ms.minLimit", DumpEntry{channel[42].ms.minLimit});
        res.insert_or_assign("channel[42].ms.accLength", DumpEntry{channel[42].ms.accLength});
        res.insert_or_assign("channel[42].ms.firMask", DumpEntry{channel[42].ms.firMask});
        res.insert_or_assign("channel[43].ms.algorithms", DumpEntry{channel[43].ms.algorithms});
        res.insert_or_assign("channel[43].ms.algorithms.alg", DumpEntry{channel[43].ms.algorithms.alg});
        res.insert_or_assign("channel[43].ms.offset", DumpEntry{channel[43].ms.offset});
        res.insert_or_assign("channel[43].ms.iirA", DumpEntry{channel[43].ms.iirA});
        res.insert_or_assign("channel[43].ms.iirB", DumpEntry{channel[43].ms.iirB});
        res.insert_or_assign("channel[43].ms.maxLimit", DumpEntry{channel[43].ms.maxLimit});
        res.insert_or_assign("channel[43].ms.minLimit", DumpEntry{channel[43].ms.minLimit});
        res.insert_or_assign("channel[43].ms.accLength", DumpEntry{channel[43].ms.accLength});
        res.insert_or_assign("channel[43].ms.firMask", DumpEntry{channel[43].ms.firMask});
        res.insert_or_assign("channel[44].ms.algorithms", DumpEntry{channel[44].ms.algorithms});
        res.insert_or_assign("channel[44].ms.algorithms.alg", DumpEntry{channel[44].ms.algorithms.alg});
        res.insert_or_assign("channel[44].ms.offset", DumpEntry{channel[44].ms.offset});
        res.insert_or_assign("channel[44].ms.iirA", DumpEntry{channel[44].ms.iirA});
        res.insert_or_assign("channel[44].ms.iirB", DumpEntry{channel[44].ms.iirB});
        res.insert_or_assign("channel[44].ms.maxLimit", DumpEntry{channel[44].ms.maxLimit});
        res.insert_or_assign("channel[44].ms.minLimit", DumpEntry{channel[44].ms.minLimit});
        res.insert_or_assign("channel[44].ms.accLength", DumpEntry{channel[44].ms.accLength});
        res.insert_or_assign("channel[44].ms.firMask", DumpEntry{channel[44].ms.firMask});
        res.insert_or_assign("channel[45].ms.algorithms", DumpEntry{channel[45].ms.algorithms});
        res.insert_or_assign("channel[45].ms.algorithms.alg", DumpEntry{channel[45].ms.algorithms.alg});
        res.insert_or_assign("channel[45].ms.offset", DumpEntry{channel[45].ms.offset});
        res.insert_or_assign("channel[45].ms.iirA", DumpEntry{channel[45].ms.iirA});
        res.insert_or_assign("channel[45].ms.iirB", DumpEntry{channel[45].ms.iirB});
        res.insert_or_assign("channel[45].ms.maxLimit", DumpEntry{channel[45].ms.maxLimit});
        res.insert_or_assign("channel[45].ms.minLimit", DumpEntry{channel[45].ms.minLimit});
        res.insert_or_assign("channel[45].ms.accLength", DumpEntry{channel[45].ms.accLength});
        res.insert_or_assign("channel[45].ms.firMask", DumpEntry{channel[45].ms.firMask});
        res.insert_or_assign("channel[46].ms.algorithms", DumpEntry{channel[46].ms.algorithms});
        res.insert_or_assign("channel[46].ms.algorithms.alg", DumpEntry{channel[46].ms.algorithms.alg});
        res.insert_or_assign("channel[46].ms.offset", DumpEntry{channel[46].ms.offset});
        res.insert_or_assign("channel[46].ms.iirA", DumpEntry{channel[46].ms.iirA});
        res.insert_or_assign("channel[46].ms.iirB", DumpEntry{channel[46].ms.iirB});
        res.insert_or_assign("channel[46].ms.maxLimit", DumpEntry{channel[46].ms.maxLimit});
        res.insert_or_assign("channel[46].ms.minLimit", DumpEntry{channel[46].ms.minLimit});
        res.insert_or_assign("channel[46].ms.accLength", DumpEntry{channel[46].ms.accLength});
        res.insert_or_assign("channel[46].ms.firMask", DumpEntry{channel[46].ms.firMask});
        res.insert_or_assign("channel[47].ms.algorithms", DumpEntry{channel[47].ms.algorithms});
        res.insert_or_assign("channel[47].ms.algorithms.alg", DumpEntry{channel[47].ms.algorithms.alg});
        res.insert_or_assign("channel[47].ms.offset", DumpEntry{channel[47].ms.offset});
        res.insert_or_assign("channel[47].ms.iirA", DumpEntry{channel[47].ms.iirA});
        res.insert_or_assign("channel[47].ms.iirB", DumpEntry{channel[47].ms.iirB});
        res.insert_or_assign("channel[47].ms.maxLimit", DumpEntry{channel[47].ms.maxLimit});
        res.insert_or_assign("channel[47].ms.minLimit", DumpEntry{channel[47].ms.minLimit});
        res.insert_or_assign("channel[47].ms.accLength", DumpEntry{channel[47].ms.accLength});
        res.insert_or_assign("channel[47].ms.firMask", DumpEntry{channel[47].ms.firMask});
        res.insert_or_assign("channel[48].ms.algorithms", DumpEntry{channel[48].ms.algorithms});
        res.insert_or_assign("channel[48].ms.algorithms.alg", DumpEntry{channel[48].ms.algorithms.alg});
        res.insert_or_assign("channel[48].ms.offset", DumpEntry{channel[48].ms.offset});
        res.insert_or_assign("channel[48].ms.iirA", DumpEntry{channel[48].ms.iirA});
        res.insert_or_assign("channel[48].ms.iirB", DumpEntry{channel[48].ms.iirB});
        res.insert_or_assign("channel[48].ms.maxLimit", DumpEntry{channel[48].ms.maxLimit});
        res.insert_or_assign("channel[48].ms.minLimit", DumpEntry{channel[48].ms.minLimit});
        res.insert_or_assign("channel[48].ms.accLength", DumpEntry{channel[48].ms.accLength});
        res.insert_or_assign("channel[48].ms.firMask", DumpEntry{channel[48].ms.firMask});
        res.insert_or_assign("channel[49].ms.algorithms", DumpEntry{channel[49].ms.algorithms});
        res.insert_or_assign("channel[49].ms.algorithms.alg", DumpEntry{channel[49].ms.algorithms.alg});
        res.insert_or_assign("channel[49].ms.offset", DumpEntry{channel[49].ms.offset});
        res.insert_or_assign("channel[49].ms.iirA", DumpEntry{channel[49].ms.iirA});
        res.insert_or_assign("channel[49].ms.iirB", DumpEntry{channel[49].ms.iirB});
        res.insert_or_assign("channel[49].ms.maxLimit", DumpEntry{channel[49].ms.maxLimit});
        res.insert_or_assign("channel[49].ms.minLimit", DumpEntry{channel[49].ms.minLimit});
        res.insert_or_assign("channel[49].ms.accLength", DumpEntry{channel[49].ms.accLength});
        res.insert_or_assign("channel[49].ms.firMask", DumpEntry{channel[49].ms.firMask});
        res.insert_or_assign("channel[50].ms.algorithms", DumpEntry{channel[50].ms.algorithms});
        res.insert_or_assign("channel[50].ms.algorithms.alg", DumpEntry{channel[50].ms.algorithms.alg});
        res.insert_or_assign("channel[50].ms.offset", DumpEntry{channel[50].ms.offset});
        res.insert_or_assign("channel[50].ms.iirA", DumpEntry{channel[50].ms.iirA});
        res.insert_or_assign("channel[50].ms.iirB", DumpEntry{channel[50].ms.iirB});
        res.insert_or_assign("channel[50].ms.maxLimit", DumpEntry{channel[50].ms.maxLimit});
        res.insert_or_assign("channel[50].ms.minLimit", DumpEntry{channel[50].ms.minLimit});
        res.insert_or_assign("channel[50].ms.accLength", DumpEntry{channel[50].ms.accLength});
        res.insert_or_assign("channel[50].ms.firMask", DumpEntry{channel[50].ms.firMask});
        res.insert_or_assign("channel[51].ms.algorithms", DumpEntry{channel[51].ms.algorithms});
        res.insert_or_assign("channel[51].ms.algorithms.alg", DumpEntry{channel[51].ms.algorithms.alg});
        res.insert_or_assign("channel[51].ms.offset", DumpEntry{channel[51].ms.offset});
        res.insert_or_assign("channel[51].ms.iirA", DumpEntry{channel[51].ms.iirA});
        res.insert_or_assign("channel[51].ms.iirB", DumpEntry{channel[51].ms.iirB});
        res.insert_or_assign("channel[51].ms.maxLimit", DumpEntry{channel[51].ms.maxLimit});
        res.insert_or_assign("channel[51].ms.minLimit", DumpEntry{channel[51].ms.minLimit});
        res.insert_or_assign("channel[51].ms.accLength", DumpEntry{channel[51].ms.accLength});
        res.insert_or_assign("channel[51].ms.firMask", DumpEntry{channel[51].ms.firMask});
        res.insert_or_assign("channel[52].ms.algorithms", DumpEntry{channel[52].ms.algorithms});
        res.insert_or_assign("channel[52].ms.algorithms.alg", DumpEntry{channel[52].ms.algorithms.alg});
        res.insert_or_assign("channel[52].ms.offset", DumpEntry{channel[52].ms.offset});
        res.insert_or_assign("channel[52].ms.iirA", DumpEntry{channel[52].ms.iirA});
        res.insert_or_assign("channel[52].ms.iirB", DumpEntry{channel[52].ms.iirB});
        res.insert_or_assign("channel[52].ms.maxLimit", DumpEntry{channel[52].ms.maxLimit});
        res.insert_or_assign("channel[52].ms.minLimit", DumpEntry{channel[52].ms.minLimit});
        res.insert_or_assign("channel[52].ms.accLength", DumpEntry{channel[52].ms.accLength});
        res.insert_or_assign("channel[52].ms.firMask", DumpEntry{channel[52].ms.firMask});
        res.insert_or_assign("channel[53].ms.algorithms", DumpEntry{channel[53].ms.algorithms});
        res.insert_or_assign("channel[53].ms.algorithms.alg", DumpEntry{channel[53].ms.algorithms.alg});
        res.insert_or_assign("channel[53].ms.offset", DumpEntry{channel[53].ms.offset});
        res.insert_or_assign("channel[53].ms.iirA", DumpEntry{channel[53].ms.iirA});
        res.insert_or_assign("channel[53].ms.iirB", DumpEntry{channel[53].ms.iirB});
        res.insert_or_assign("channel[53].ms.maxLimit", DumpEntry{channel[53].ms.maxLimit});
        res.insert_or_assign("channel[53].ms.minLimit", DumpEntry{channel[53].ms.minLimit});
        res.insert_or_assign("channel[53].ms.accLength", DumpEntry{channel[53].ms.accLength});
        res.insert_or_assign("channel[53].ms.firMask", DumpEntry{channel[53].ms.firMask});
        res.insert_or_assign("channel[54].ms.algorithms", DumpEntry{channel[54].ms.algorithms});
        res.insert_or_assign("channel[54].ms.algorithms.alg", DumpEntry{channel[54].ms.algorithms.alg});
        res.insert_or_assign("channel[54].ms.offset", DumpEntry{channel[54].ms.offset});
        res.insert_or_assign("channel[54].ms.iirA", DumpEntry{channel[54].ms.iirA});
        res.insert_or_assign("channel[54].ms.iirB", DumpEntry{channel[54].ms.iirB});
        res.insert_or_assign("channel[54].ms.maxLimit", DumpEntry{channel[54].ms.maxLimit});
        res.insert_or_assign("channel[54].ms.minLimit", DumpEntry{channel[54].ms.minLimit});
        res.insert_or_assign("channel[54].ms.accLength", DumpEntry{channel[54].ms.accLength});
        res.insert_or_assign("channel[54].ms.firMask", DumpEntry{channel[54].ms.firMask});
        res.insert_or_assign("channel[55].ms.algorithms", DumpEntry{channel[55].ms.algorithms});
        res.insert_or_assign("channel[55].ms.algorithms.alg", DumpEntry{channel[55].ms.algorithms.alg});
        res.insert_or_assign("channel[55].ms.offset", DumpEntry{channel[55].ms.offset});
        res.insert_or_assign("channel[55].ms.iirA", DumpEntry{channel[55].ms.iirA});
        res.insert_or_assign("channel[55].ms.iirB", DumpEntry{channel[55].ms.iirB});
        res.insert_or_assign("channel[55].ms.maxLimit", DumpEntry{channel[55].ms.maxLimit});
        res.insert_or_assign("channel[55].ms.minLimit", DumpEntry{channel[55].ms.minLimit});
        res.insert_or_assign("channel[55].ms.accLength", DumpEntry{channel[55].ms.accLength});
        res.insert_or_assign("channel[55].ms.firMask", DumpEntry{channel[55].ms.firMask});
        res.insert_or_assign("channel[56].ms.algorithms", DumpEntry{channel[56].ms.algorithms});
        res.insert_or_assign("channel[56].ms.algorithms.alg", DumpEntry{channel[56].ms.algorithms.alg});
        res.insert_or_assign("channel[56].ms.offset", DumpEntry{channel[56].ms.offset});
        res.insert_or_assign("channel[56].ms.iirA", DumpEntry{channel[56].ms.iirA});
        res.insert_or_assign("channel[56].ms.iirB", DumpEntry{channel[56].ms.iirB});
        res.insert_or_assign("channel[56].ms.maxLimit", DumpEntry{channel[56].ms.maxLimit});
        res.insert_or_assign("channel[56].ms.minLimit", DumpEntry{channel[56].ms.minLimit});
        res.insert_or_assign("channel[56].ms.accLength", DumpEntry{channel[56].ms.accLength});
        res.insert_or_assign("channel[56].ms.firMask", DumpEntry{channel[56].ms.firMask});
        res.insert_or_assign("channel[57].ms.algorithms", DumpEntry{channel[57].ms.algorithms});
        res.insert_or_assign("channel[57].ms.algorithms.alg", DumpEntry{channel[57].ms.algorithms.alg});
        res.insert_or_assign("channel[57].ms.offset", DumpEntry{channel[57].ms.offset});
        res.insert_or_assign("channel[57].ms.iirA", DumpEntry{channel[57].ms.iirA});
        res.insert_or_assign("channel[57].ms.iirB", DumpEntry{channel[57].ms.iirB});
        res.insert_or_assign("channel[57].ms.maxLimit", DumpEntry{channel[57].ms.maxLimit});
        res.insert_or_assign("channel[57].ms.minLimit", DumpEntry{channel[57].ms.minLimit});
        res.insert_or_assign("channel[57].ms.accLength", DumpEntry{channel[57].ms.accLength});
        res.insert_or_assign("channel[57].ms.firMask", DumpEntry{channel[57].ms.firMask});
        res.insert_or_assign("channel[58].ms.algorithms", DumpEntry{channel[58].ms.algorithms});
        res.insert_or_assign("channel[58].ms.algorithms.alg", DumpEntry{channel[58].ms.algorithms.alg});
        res.insert_or_assign("channel[58].ms.offset", DumpEntry{channel[58].ms.offset});
        res.insert_or_assign("channel[58].ms.iirA", DumpEntry{channel[58].ms.iirA});
        res.insert_or_assign("channel[58].ms.iirB", DumpEntry{channel[58].ms.iirB});
        res.insert_or_assign("channel[58].ms.maxLimit", DumpEntry{channel[58].ms.maxLimit});
        res.insert_or_assign("channel[58].ms.minLimit", DumpEntry{channel[58].ms.minLimit});
        res.insert_or_assign("channel[58].ms.accLength", DumpEntry{channel[58].ms.accLength});
        res.insert_or_assign("channel[58].ms.firMask", DumpEntry{channel[58].ms.firMask});
        res.insert_or_assign("channel[59].ms.algorithms", DumpEntry{channel[59].ms.algorithms});
        res.insert_or_assign("channel[59].ms.algorithms.alg", DumpEntry{channel[59].ms.algorithms.alg});
        res.insert_or_assign("channel[59].ms.offset", DumpEntry{channel[59].ms.offset});
        res.insert_or_assign("channel[59].ms.iirA", DumpEntry{channel[59].ms.iirA});
        res.insert_or_assign("channel[59].ms.iirB", DumpEntry{channel[59].ms.iirB});
        res.insert_or_assign("channel[59].ms.maxLimit", DumpEntry{channel[59].ms.maxLimit});
        res.insert_or_assign("channel[59].ms.minLimit", DumpEntry{channel[59].ms.minLimit});
        res.insert_or_assign("channel[59].ms.accLength", DumpEntry{channel[59].ms.accLength});
        res.insert_or_assign("channel[59].ms.firMask", DumpEntry{channel[59].ms.firMask});
        res.insert_or_assign("channel[60].ms.algorithms", DumpEntry{channel[60].ms.algorithms});
        res.insert_or_assign("channel[60].ms.algorithms.alg", DumpEntry{channel[60].ms.algorithms.alg});
        res.insert_or_assign("channel[60].ms.offset", DumpEntry{channel[60].ms.offset});
        res.insert_or_assign("channel[60].ms.iirA", DumpEntry{channel[60].ms.iirA});
        res.insert_or_assign("channel[60].ms.iirB", DumpEntry{channel[60].ms.iirB});
        res.insert_or_assign("channel[60].ms.maxLimit", DumpEntry{channel[60].ms.maxLimit});
        res.insert_or_assign("channel[60].ms.minLimit", DumpEntry{channel[60].ms.minLimit});
        res.insert_or_assign("channel[60].ms.accLength", DumpEntry{channel[60].ms.accLength});
        res.insert_or_assign("channel[60].ms.firMask", DumpEntry{channel[60].ms.firMask});
        res.insert_or_assign("channel[61].ms.algorithms", DumpEntry{channel[61].ms.algorithms});
        res.insert_or_assign("channel[61].ms.algorithms.alg", DumpEntry{channel[61].ms.algorithms.alg});
        res.insert_or_assign("channel[61].ms.offset", DumpEntry{channel[61].ms.offset});
        res.insert_or_assign("channel[61].ms.iirA", DumpEntry{channel[61].ms.iirA});
        res.insert_or_assign("channel[61].ms.iirB", DumpEntry{channel[61].ms.iirB});
        res.insert_or_assign("channel[61].ms.maxLimit", DumpEntry{channel[61].ms.maxLimit});
        res.insert_or_assign("channel[61].ms.minLimit", DumpEntry{channel[61].ms.minLimit});
        res.insert_or_assign("channel[61].ms.accLength", DumpEntry{channel[61].ms.accLength});
        res.insert_or_assign("channel[61].ms.firMask", DumpEntry{channel[61].ms.firMask});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::AnalogMs`
    //!
    //! @param analogMs A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under analogMs
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::AnalogMs& analogMs)
    {
        DumpMap res{analogMs.base()};
        res.insert_or_assign("analogMs.channel[0].ms.algorithms", DumpEntry{analogMs.channel[0].ms.algorithms});
        res.insert_or_assign("analogMs.channel[0].ms.algorithms.alg", DumpEntry{analogMs.channel[0].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[0].ms.offset", DumpEntry{analogMs.channel[0].ms.offset});
        res.insert_or_assign("analogMs.channel[0].ms.iirA", DumpEntry{analogMs.channel[0].ms.iirA});
        res.insert_or_assign("analogMs.channel[0].ms.iirB", DumpEntry{analogMs.channel[0].ms.iirB});
        res.insert_or_assign("analogMs.channel[0].ms.maxLimit", DumpEntry{analogMs.channel[0].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[0].ms.minLimit", DumpEntry{analogMs.channel[0].ms.minLimit});
        res.insert_or_assign("analogMs.channel[0].ms.accLength", DumpEntry{analogMs.channel[0].ms.accLength});
        res.insert_or_assign("analogMs.channel[0].ms.firMask", DumpEntry{analogMs.channel[0].ms.firMask});
        res.insert_or_assign("analogMs.channel[1].ms.algorithms", DumpEntry{analogMs.channel[1].ms.algorithms});
        res.insert_or_assign("analogMs.channel[1].ms.algorithms.alg", DumpEntry{analogMs.channel[1].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[1].ms.offset", DumpEntry{analogMs.channel[1].ms.offset});
        res.insert_or_assign("analogMs.channel[1].ms.iirA", DumpEntry{analogMs.channel[1].ms.iirA});
        res.insert_or_assign("analogMs.channel[1].ms.iirB", DumpEntry{analogMs.channel[1].ms.iirB});
        res.insert_or_assign("analogMs.channel[1].ms.maxLimit", DumpEntry{analogMs.channel[1].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[1].ms.minLimit", DumpEntry{analogMs.channel[1].ms.minLimit});
        res.insert_or_assign("analogMs.channel[1].ms.accLength", DumpEntry{analogMs.channel[1].ms.accLength});
        res.insert_or_assign("analogMs.channel[1].ms.firMask", DumpEntry{analogMs.channel[1].ms.firMask});
        res.insert_or_assign("analogMs.channel[2].ms.algorithms", DumpEntry{analogMs.channel[2].ms.algorithms});
        res.insert_or_assign("analogMs.channel[2].ms.algorithms.alg", DumpEntry{analogMs.channel[2].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[2].ms.offset", DumpEntry{analogMs.channel[2].ms.offset});
        res.insert_or_assign("analogMs.channel[2].ms.iirA", DumpEntry{analogMs.channel[2].ms.iirA});
        res.insert_or_assign("analogMs.channel[2].ms.iirB", DumpEntry{analogMs.channel[2].ms.iirB});
        res.insert_or_assign("analogMs.channel[2].ms.maxLimit", DumpEntry{analogMs.channel[2].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[2].ms.minLimit", DumpEntry{analogMs.channel[2].ms.minLimit});
        res.insert_or_assign("analogMs.channel[2].ms.accLength", DumpEntry{analogMs.channel[2].ms.accLength});
        res.insert_or_assign("analogMs.channel[2].ms.firMask", DumpEntry{analogMs.channel[2].ms.firMask});
        res.insert_or_assign("analogMs.channel[3].ms.algorithms", DumpEntry{analogMs.channel[3].ms.algorithms});
        res.insert_or_assign("analogMs.channel[3].ms.algorithms.alg", DumpEntry{analogMs.channel[3].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[3].ms.offset", DumpEntry{analogMs.channel[3].ms.offset});
        res.insert_or_assign("analogMs.channel[3].ms.iirA", DumpEntry{analogMs.channel[3].ms.iirA});
        res.insert_or_assign("analogMs.channel[3].ms.iirB", DumpEntry{analogMs.channel[3].ms.iirB});
        res.insert_or_assign("analogMs.channel[3].ms.maxLimit", DumpEntry{analogMs.channel[3].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[3].ms.minLimit", DumpEntry{analogMs.channel[3].ms.minLimit});
        res.insert_or_assign("analogMs.channel[3].ms.accLength", DumpEntry{analogMs.channel[3].ms.accLength});
        res.insert_or_assign("analogMs.channel[3].ms.firMask", DumpEntry{analogMs.channel[3].ms.firMask});
        res.insert_or_assign("analogMs.channel[4].ms.algorithms", DumpEntry{analogMs.channel[4].ms.algorithms});
        res.insert_or_assign("analogMs.channel[4].ms.algorithms.alg", DumpEntry{analogMs.channel[4].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[4].ms.offset", DumpEntry{analogMs.channel[4].ms.offset});
        res.insert_or_assign("analogMs.channel[4].ms.iirA", DumpEntry{analogMs.channel[4].ms.iirA});
        res.insert_or_assign("analogMs.channel[4].ms.iirB", DumpEntry{analogMs.channel[4].ms.iirB});
        res.insert_or_assign("analogMs.channel[4].ms.maxLimit", DumpEntry{analogMs.channel[4].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[4].ms.minLimit", DumpEntry{analogMs.channel[4].ms.minLimit});
        res.insert_or_assign("analogMs.channel[4].ms.accLength", DumpEntry{analogMs.channel[4].ms.accLength});
        res.insert_or_assign("analogMs.channel[4].ms.firMask", DumpEntry{analogMs.channel[4].ms.firMask});
        res.insert_or_assign("analogMs.channel[5].ms.algorithms", DumpEntry{analogMs.channel[5].ms.algorithms});
        res.insert_or_assign("analogMs.channel[5].ms.algorithms.alg", DumpEntry{analogMs.channel[5].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[5].ms.offset", DumpEntry{analogMs.channel[5].ms.offset});
        res.insert_or_assign("analogMs.channel[5].ms.iirA", DumpEntry{analogMs.channel[5].ms.iirA});
        res.insert_or_assign("analogMs.channel[5].ms.iirB", DumpEntry{analogMs.channel[5].ms.iirB});
        res.insert_or_assign("analogMs.channel[5].ms.maxLimit", DumpEntry{analogMs.channel[5].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[5].ms.minLimit", DumpEntry{analogMs.channel[5].ms.minLimit});
        res.insert_or_assign("analogMs.channel[5].ms.accLength", DumpEntry{analogMs.channel[5].ms.accLength});
        res.insert_or_assign("analogMs.channel[5].ms.firMask", DumpEntry{analogMs.channel[5].ms.firMask});
        res.insert_or_assign("analogMs.channel[6].ms.algorithms", DumpEntry{analogMs.channel[6].ms.algorithms});
        res.insert_or_assign("analogMs.channel[6].ms.algorithms.alg", DumpEntry{analogMs.channel[6].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[6].ms.offset", DumpEntry{analogMs.channel[6].ms.offset});
        res.insert_or_assign("analogMs.channel[6].ms.iirA", DumpEntry{analogMs.channel[6].ms.iirA});
        res.insert_or_assign("analogMs.channel[6].ms.iirB", DumpEntry{analogMs.channel[6].ms.iirB});
        res.insert_or_assign("analogMs.channel[6].ms.maxLimit", DumpEntry{analogMs.channel[6].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[6].ms.minLimit", DumpEntry{analogMs.channel[6].ms.minLimit});
        res.insert_or_assign("analogMs.channel[6].ms.accLength", DumpEntry{analogMs.channel[6].ms.accLength});
        res.insert_or_assign("analogMs.channel[6].ms.firMask", DumpEntry{analogMs.channel[6].ms.firMask});
        res.insert_or_assign("analogMs.channel[7].ms.algorithms", DumpEntry{analogMs.channel[7].ms.algorithms});
        res.insert_or_assign("analogMs.channel[7].ms.algorithms.alg", DumpEntry{analogMs.channel[7].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[7].ms.offset", DumpEntry{analogMs.channel[7].ms.offset});
        res.insert_or_assign("analogMs.channel[7].ms.iirA", DumpEntry{analogMs.channel[7].ms.iirA});
        res.insert_or_assign("analogMs.channel[7].ms.iirB", DumpEntry{analogMs.channel[7].ms.iirB});
        res.insert_or_assign("analogMs.channel[7].ms.maxLimit", DumpEntry{analogMs.channel[7].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[7].ms.minLimit", DumpEntry{analogMs.channel[7].ms.minLimit});
        res.insert_or_assign("analogMs.channel[7].ms.accLength", DumpEntry{analogMs.channel[7].ms.accLength});
        res.insert_or_assign("analogMs.channel[7].ms.firMask", DumpEntry{analogMs.channel[7].ms.firMask});
        res.insert_or_assign("analogMs.channel[8].ms.algorithms", DumpEntry{analogMs.channel[8].ms.algorithms});
        res.insert_or_assign("analogMs.channel[8].ms.algorithms.alg", DumpEntry{analogMs.channel[8].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[8].ms.offset", DumpEntry{analogMs.channel[8].ms.offset});
        res.insert_or_assign("analogMs.channel[8].ms.iirA", DumpEntry{analogMs.channel[8].ms.iirA});
        res.insert_or_assign("analogMs.channel[8].ms.iirB", DumpEntry{analogMs.channel[8].ms.iirB});
        res.insert_or_assign("analogMs.channel[8].ms.maxLimit", DumpEntry{analogMs.channel[8].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[8].ms.minLimit", DumpEntry{analogMs.channel[8].ms.minLimit});
        res.insert_or_assign("analogMs.channel[8].ms.accLength", DumpEntry{analogMs.channel[8].ms.accLength});
        res.insert_or_assign("analogMs.channel[8].ms.firMask", DumpEntry{analogMs.channel[8].ms.firMask});
        res.insert_or_assign("analogMs.channel[9].ms.algorithms", DumpEntry{analogMs.channel[9].ms.algorithms});
        res.insert_or_assign("analogMs.channel[9].ms.algorithms.alg", DumpEntry{analogMs.channel[9].ms.algorithms.alg});
        res.insert_or_assign("analogMs.channel[9].ms.offset", DumpEntry{analogMs.channel[9].ms.offset});
        res.insert_or_assign("analogMs.channel[9].ms.iirA", DumpEntry{analogMs.channel[9].ms.iirA});
        res.insert_or_assign("analogMs.channel[9].ms.iirB", DumpEntry{analogMs.channel[9].ms.iirB});
        res.insert_or_assign("analogMs.channel[9].ms.maxLimit", DumpEntry{analogMs.channel[9].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[9].ms.minLimit", DumpEntry{analogMs.channel[9].ms.minLimit});
        res.insert_or_assign("analogMs.channel[9].ms.accLength", DumpEntry{analogMs.channel[9].ms.accLength});
        res.insert_or_assign("analogMs.channel[9].ms.firMask", DumpEntry{analogMs.channel[9].ms.firMask});
        res.insert_or_assign("analogMs.channel[10].ms.algorithms", DumpEntry{analogMs.channel[10].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[10].ms.algorithms.alg", DumpEntry{analogMs.channel[10].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[10].ms.offset", DumpEntry{analogMs.channel[10].ms.offset});
        res.insert_or_assign("analogMs.channel[10].ms.iirA", DumpEntry{analogMs.channel[10].ms.iirA});
        res.insert_or_assign("analogMs.channel[10].ms.iirB", DumpEntry{analogMs.channel[10].ms.iirB});
        res.insert_or_assign("analogMs.channel[10].ms.maxLimit", DumpEntry{analogMs.channel[10].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[10].ms.minLimit", DumpEntry{analogMs.channel[10].ms.minLimit});
        res.insert_or_assign("analogMs.channel[10].ms.accLength", DumpEntry{analogMs.channel[10].ms.accLength});
        res.insert_or_assign("analogMs.channel[10].ms.firMask", DumpEntry{analogMs.channel[10].ms.firMask});
        res.insert_or_assign("analogMs.channel[11].ms.algorithms", DumpEntry{analogMs.channel[11].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[11].ms.algorithms.alg", DumpEntry{analogMs.channel[11].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[11].ms.offset", DumpEntry{analogMs.channel[11].ms.offset});
        res.insert_or_assign("analogMs.channel[11].ms.iirA", DumpEntry{analogMs.channel[11].ms.iirA});
        res.insert_or_assign("analogMs.channel[11].ms.iirB", DumpEntry{analogMs.channel[11].ms.iirB});
        res.insert_or_assign("analogMs.channel[11].ms.maxLimit", DumpEntry{analogMs.channel[11].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[11].ms.minLimit", DumpEntry{analogMs.channel[11].ms.minLimit});
        res.insert_or_assign("analogMs.channel[11].ms.accLength", DumpEntry{analogMs.channel[11].ms.accLength});
        res.insert_or_assign("analogMs.channel[11].ms.firMask", DumpEntry{analogMs.channel[11].ms.firMask});
        res.insert_or_assign("analogMs.channel[12].ms.algorithms", DumpEntry{analogMs.channel[12].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[12].ms.algorithms.alg", DumpEntry{analogMs.channel[12].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[12].ms.offset", DumpEntry{analogMs.channel[12].ms.offset});
        res.insert_or_assign("analogMs.channel[12].ms.iirA", DumpEntry{analogMs.channel[12].ms.iirA});
        res.insert_or_assign("analogMs.channel[12].ms.iirB", DumpEntry{analogMs.channel[12].ms.iirB});
        res.insert_or_assign("analogMs.channel[12].ms.maxLimit", DumpEntry{analogMs.channel[12].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[12].ms.minLimit", DumpEntry{analogMs.channel[12].ms.minLimit});
        res.insert_or_assign("analogMs.channel[12].ms.accLength", DumpEntry{analogMs.channel[12].ms.accLength});
        res.insert_or_assign("analogMs.channel[12].ms.firMask", DumpEntry{analogMs.channel[12].ms.firMask});
        res.insert_or_assign("analogMs.channel[13].ms.algorithms", DumpEntry{analogMs.channel[13].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[13].ms.algorithms.alg", DumpEntry{analogMs.channel[13].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[13].ms.offset", DumpEntry{analogMs.channel[13].ms.offset});
        res.insert_or_assign("analogMs.channel[13].ms.iirA", DumpEntry{analogMs.channel[13].ms.iirA});
        res.insert_or_assign("analogMs.channel[13].ms.iirB", DumpEntry{analogMs.channel[13].ms.iirB});
        res.insert_or_assign("analogMs.channel[13].ms.maxLimit", DumpEntry{analogMs.channel[13].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[13].ms.minLimit", DumpEntry{analogMs.channel[13].ms.minLimit});
        res.insert_or_assign("analogMs.channel[13].ms.accLength", DumpEntry{analogMs.channel[13].ms.accLength});
        res.insert_or_assign("analogMs.channel[13].ms.firMask", DumpEntry{analogMs.channel[13].ms.firMask});
        res.insert_or_assign("analogMs.channel[14].ms.algorithms", DumpEntry{analogMs.channel[14].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[14].ms.algorithms.alg", DumpEntry{analogMs.channel[14].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[14].ms.offset", DumpEntry{analogMs.channel[14].ms.offset});
        res.insert_or_assign("analogMs.channel[14].ms.iirA", DumpEntry{analogMs.channel[14].ms.iirA});
        res.insert_or_assign("analogMs.channel[14].ms.iirB", DumpEntry{analogMs.channel[14].ms.iirB});
        res.insert_or_assign("analogMs.channel[14].ms.maxLimit", DumpEntry{analogMs.channel[14].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[14].ms.minLimit", DumpEntry{analogMs.channel[14].ms.minLimit});
        res.insert_or_assign("analogMs.channel[14].ms.accLength", DumpEntry{analogMs.channel[14].ms.accLength});
        res.insert_or_assign("analogMs.channel[14].ms.firMask", DumpEntry{analogMs.channel[14].ms.firMask});
        res.insert_or_assign("analogMs.channel[15].ms.algorithms", DumpEntry{analogMs.channel[15].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[15].ms.algorithms.alg", DumpEntry{analogMs.channel[15].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[15].ms.offset", DumpEntry{analogMs.channel[15].ms.offset});
        res.insert_or_assign("analogMs.channel[15].ms.iirA", DumpEntry{analogMs.channel[15].ms.iirA});
        res.insert_or_assign("analogMs.channel[15].ms.iirB", DumpEntry{analogMs.channel[15].ms.iirB});
        res.insert_or_assign("analogMs.channel[15].ms.maxLimit", DumpEntry{analogMs.channel[15].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[15].ms.minLimit", DumpEntry{analogMs.channel[15].ms.minLimit});
        res.insert_or_assign("analogMs.channel[15].ms.accLength", DumpEntry{analogMs.channel[15].ms.accLength});
        res.insert_or_assign("analogMs.channel[15].ms.firMask", DumpEntry{analogMs.channel[15].ms.firMask});
        res.insert_or_assign("analogMs.channel[16].ms.algorithms", DumpEntry{analogMs.channel[16].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[16].ms.algorithms.alg", DumpEntry{analogMs.channel[16].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[16].ms.offset", DumpEntry{analogMs.channel[16].ms.offset});
        res.insert_or_assign("analogMs.channel[16].ms.iirA", DumpEntry{analogMs.channel[16].ms.iirA});
        res.insert_or_assign("analogMs.channel[16].ms.iirB", DumpEntry{analogMs.channel[16].ms.iirB});
        res.insert_or_assign("analogMs.channel[16].ms.maxLimit", DumpEntry{analogMs.channel[16].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[16].ms.minLimit", DumpEntry{analogMs.channel[16].ms.minLimit});
        res.insert_or_assign("analogMs.channel[16].ms.accLength", DumpEntry{analogMs.channel[16].ms.accLength});
        res.insert_or_assign("analogMs.channel[16].ms.firMask", DumpEntry{analogMs.channel[16].ms.firMask});
        res.insert_or_assign("analogMs.channel[17].ms.algorithms", DumpEntry{analogMs.channel[17].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[17].ms.algorithms.alg", DumpEntry{analogMs.channel[17].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[17].ms.offset", DumpEntry{analogMs.channel[17].ms.offset});
        res.insert_or_assign("analogMs.channel[17].ms.iirA", DumpEntry{analogMs.channel[17].ms.iirA});
        res.insert_or_assign("analogMs.channel[17].ms.iirB", DumpEntry{analogMs.channel[17].ms.iirB});
        res.insert_or_assign("analogMs.channel[17].ms.maxLimit", DumpEntry{analogMs.channel[17].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[17].ms.minLimit", DumpEntry{analogMs.channel[17].ms.minLimit});
        res.insert_or_assign("analogMs.channel[17].ms.accLength", DumpEntry{analogMs.channel[17].ms.accLength});
        res.insert_or_assign("analogMs.channel[17].ms.firMask", DumpEntry{analogMs.channel[17].ms.firMask});
        res.insert_or_assign("analogMs.channel[18].ms.algorithms", DumpEntry{analogMs.channel[18].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[18].ms.algorithms.alg", DumpEntry{analogMs.channel[18].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[18].ms.offset", DumpEntry{analogMs.channel[18].ms.offset});
        res.insert_or_assign("analogMs.channel[18].ms.iirA", DumpEntry{analogMs.channel[18].ms.iirA});
        res.insert_or_assign("analogMs.channel[18].ms.iirB", DumpEntry{analogMs.channel[18].ms.iirB});
        res.insert_or_assign("analogMs.channel[18].ms.maxLimit", DumpEntry{analogMs.channel[18].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[18].ms.minLimit", DumpEntry{analogMs.channel[18].ms.minLimit});
        res.insert_or_assign("analogMs.channel[18].ms.accLength", DumpEntry{analogMs.channel[18].ms.accLength});
        res.insert_or_assign("analogMs.channel[18].ms.firMask", DumpEntry{analogMs.channel[18].ms.firMask});
        res.insert_or_assign("analogMs.channel[19].ms.algorithms", DumpEntry{analogMs.channel[19].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[19].ms.algorithms.alg", DumpEntry{analogMs.channel[19].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[19].ms.offset", DumpEntry{analogMs.channel[19].ms.offset});
        res.insert_or_assign("analogMs.channel[19].ms.iirA", DumpEntry{analogMs.channel[19].ms.iirA});
        res.insert_or_assign("analogMs.channel[19].ms.iirB", DumpEntry{analogMs.channel[19].ms.iirB});
        res.insert_or_assign("analogMs.channel[19].ms.maxLimit", DumpEntry{analogMs.channel[19].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[19].ms.minLimit", DumpEntry{analogMs.channel[19].ms.minLimit});
        res.insert_or_assign("analogMs.channel[19].ms.accLength", DumpEntry{analogMs.channel[19].ms.accLength});
        res.insert_or_assign("analogMs.channel[19].ms.firMask", DumpEntry{analogMs.channel[19].ms.firMask});
        res.insert_or_assign("analogMs.channel[20].ms.algorithms", DumpEntry{analogMs.channel[20].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[20].ms.algorithms.alg", DumpEntry{analogMs.channel[20].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[20].ms.offset", DumpEntry{analogMs.channel[20].ms.offset});
        res.insert_or_assign("analogMs.channel[20].ms.iirA", DumpEntry{analogMs.channel[20].ms.iirA});
        res.insert_or_assign("analogMs.channel[20].ms.iirB", DumpEntry{analogMs.channel[20].ms.iirB});
        res.insert_or_assign("analogMs.channel[20].ms.maxLimit", DumpEntry{analogMs.channel[20].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[20].ms.minLimit", DumpEntry{analogMs.channel[20].ms.minLimit});
        res.insert_or_assign("analogMs.channel[20].ms.accLength", DumpEntry{analogMs.channel[20].ms.accLength});
        res.insert_or_assign("analogMs.channel[20].ms.firMask", DumpEntry{analogMs.channel[20].ms.firMask});
        res.insert_or_assign("analogMs.channel[21].ms.algorithms", DumpEntry{analogMs.channel[21].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[21].ms.algorithms.alg", DumpEntry{analogMs.channel[21].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[21].ms.offset", DumpEntry{analogMs.channel[21].ms.offset});
        res.insert_or_assign("analogMs.channel[21].ms.iirA", DumpEntry{analogMs.channel[21].ms.iirA});
        res.insert_or_assign("analogMs.channel[21].ms.iirB", DumpEntry{analogMs.channel[21].ms.iirB});
        res.insert_or_assign("analogMs.channel[21].ms.maxLimit", DumpEntry{analogMs.channel[21].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[21].ms.minLimit", DumpEntry{analogMs.channel[21].ms.minLimit});
        res.insert_or_assign("analogMs.channel[21].ms.accLength", DumpEntry{analogMs.channel[21].ms.accLength});
        res.insert_or_assign("analogMs.channel[21].ms.firMask", DumpEntry{analogMs.channel[21].ms.firMask});
        res.insert_or_assign("analogMs.channel[22].ms.algorithms", DumpEntry{analogMs.channel[22].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[22].ms.algorithms.alg", DumpEntry{analogMs.channel[22].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[22].ms.offset", DumpEntry{analogMs.channel[22].ms.offset});
        res.insert_or_assign("analogMs.channel[22].ms.iirA", DumpEntry{analogMs.channel[22].ms.iirA});
        res.insert_or_assign("analogMs.channel[22].ms.iirB", DumpEntry{analogMs.channel[22].ms.iirB});
        res.insert_or_assign("analogMs.channel[22].ms.maxLimit", DumpEntry{analogMs.channel[22].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[22].ms.minLimit", DumpEntry{analogMs.channel[22].ms.minLimit});
        res.insert_or_assign("analogMs.channel[22].ms.accLength", DumpEntry{analogMs.channel[22].ms.accLength});
        res.insert_or_assign("analogMs.channel[22].ms.firMask", DumpEntry{analogMs.channel[22].ms.firMask});
        res.insert_or_assign("analogMs.channel[23].ms.algorithms", DumpEntry{analogMs.channel[23].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[23].ms.algorithms.alg", DumpEntry{analogMs.channel[23].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[23].ms.offset", DumpEntry{analogMs.channel[23].ms.offset});
        res.insert_or_assign("analogMs.channel[23].ms.iirA", DumpEntry{analogMs.channel[23].ms.iirA});
        res.insert_or_assign("analogMs.channel[23].ms.iirB", DumpEntry{analogMs.channel[23].ms.iirB});
        res.insert_or_assign("analogMs.channel[23].ms.maxLimit", DumpEntry{analogMs.channel[23].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[23].ms.minLimit", DumpEntry{analogMs.channel[23].ms.minLimit});
        res.insert_or_assign("analogMs.channel[23].ms.accLength", DumpEntry{analogMs.channel[23].ms.accLength});
        res.insert_or_assign("analogMs.channel[23].ms.firMask", DumpEntry{analogMs.channel[23].ms.firMask});
        res.insert_or_assign("analogMs.channel[24].ms.algorithms", DumpEntry{analogMs.channel[24].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[24].ms.algorithms.alg", DumpEntry{analogMs.channel[24].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[24].ms.offset", DumpEntry{analogMs.channel[24].ms.offset});
        res.insert_or_assign("analogMs.channel[24].ms.iirA", DumpEntry{analogMs.channel[24].ms.iirA});
        res.insert_or_assign("analogMs.channel[24].ms.iirB", DumpEntry{analogMs.channel[24].ms.iirB});
        res.insert_or_assign("analogMs.channel[24].ms.maxLimit", DumpEntry{analogMs.channel[24].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[24].ms.minLimit", DumpEntry{analogMs.channel[24].ms.minLimit});
        res.insert_or_assign("analogMs.channel[24].ms.accLength", DumpEntry{analogMs.channel[24].ms.accLength});
        res.insert_or_assign("analogMs.channel[24].ms.firMask", DumpEntry{analogMs.channel[24].ms.firMask});
        res.insert_or_assign("analogMs.channel[25].ms.algorithms", DumpEntry{analogMs.channel[25].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[25].ms.algorithms.alg", DumpEntry{analogMs.channel[25].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[25].ms.offset", DumpEntry{analogMs.channel[25].ms.offset});
        res.insert_or_assign("analogMs.channel[25].ms.iirA", DumpEntry{analogMs.channel[25].ms.iirA});
        res.insert_or_assign("analogMs.channel[25].ms.iirB", DumpEntry{analogMs.channel[25].ms.iirB});
        res.insert_or_assign("analogMs.channel[25].ms.maxLimit", DumpEntry{analogMs.channel[25].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[25].ms.minLimit", DumpEntry{analogMs.channel[25].ms.minLimit});
        res.insert_or_assign("analogMs.channel[25].ms.accLength", DumpEntry{analogMs.channel[25].ms.accLength});
        res.insert_or_assign("analogMs.channel[25].ms.firMask", DumpEntry{analogMs.channel[25].ms.firMask});
        res.insert_or_assign("analogMs.channel[26].ms.algorithms", DumpEntry{analogMs.channel[26].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[26].ms.algorithms.alg", DumpEntry{analogMs.channel[26].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[26].ms.offset", DumpEntry{analogMs.channel[26].ms.offset});
        res.insert_or_assign("analogMs.channel[26].ms.iirA", DumpEntry{analogMs.channel[26].ms.iirA});
        res.insert_or_assign("analogMs.channel[26].ms.iirB", DumpEntry{analogMs.channel[26].ms.iirB});
        res.insert_or_assign("analogMs.channel[26].ms.maxLimit", DumpEntry{analogMs.channel[26].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[26].ms.minLimit", DumpEntry{analogMs.channel[26].ms.minLimit});
        res.insert_or_assign("analogMs.channel[26].ms.accLength", DumpEntry{analogMs.channel[26].ms.accLength});
        res.insert_or_assign("analogMs.channel[26].ms.firMask", DumpEntry{analogMs.channel[26].ms.firMask});
        res.insert_or_assign("analogMs.channel[27].ms.algorithms", DumpEntry{analogMs.channel[27].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[27].ms.algorithms.alg", DumpEntry{analogMs.channel[27].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[27].ms.offset", DumpEntry{analogMs.channel[27].ms.offset});
        res.insert_or_assign("analogMs.channel[27].ms.iirA", DumpEntry{analogMs.channel[27].ms.iirA});
        res.insert_or_assign("analogMs.channel[27].ms.iirB", DumpEntry{analogMs.channel[27].ms.iirB});
        res.insert_or_assign("analogMs.channel[27].ms.maxLimit", DumpEntry{analogMs.channel[27].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[27].ms.minLimit", DumpEntry{analogMs.channel[27].ms.minLimit});
        res.insert_or_assign("analogMs.channel[27].ms.accLength", DumpEntry{analogMs.channel[27].ms.accLength});
        res.insert_or_assign("analogMs.channel[27].ms.firMask", DumpEntry{analogMs.channel[27].ms.firMask});
        res.insert_or_assign("analogMs.channel[28].ms.algorithms", DumpEntry{analogMs.channel[28].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[28].ms.algorithms.alg", DumpEntry{analogMs.channel[28].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[28].ms.offset", DumpEntry{analogMs.channel[28].ms.offset});
        res.insert_or_assign("analogMs.channel[28].ms.iirA", DumpEntry{analogMs.channel[28].ms.iirA});
        res.insert_or_assign("analogMs.channel[28].ms.iirB", DumpEntry{analogMs.channel[28].ms.iirB});
        res.insert_or_assign("analogMs.channel[28].ms.maxLimit", DumpEntry{analogMs.channel[28].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[28].ms.minLimit", DumpEntry{analogMs.channel[28].ms.minLimit});
        res.insert_or_assign("analogMs.channel[28].ms.accLength", DumpEntry{analogMs.channel[28].ms.accLength});
        res.insert_or_assign("analogMs.channel[28].ms.firMask", DumpEntry{analogMs.channel[28].ms.firMask});
        res.insert_or_assign("analogMs.channel[29].ms.algorithms", DumpEntry{analogMs.channel[29].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[29].ms.algorithms.alg", DumpEntry{analogMs.channel[29].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[29].ms.offset", DumpEntry{analogMs.channel[29].ms.offset});
        res.insert_or_assign("analogMs.channel[29].ms.iirA", DumpEntry{analogMs.channel[29].ms.iirA});
        res.insert_or_assign("analogMs.channel[29].ms.iirB", DumpEntry{analogMs.channel[29].ms.iirB});
        res.insert_or_assign("analogMs.channel[29].ms.maxLimit", DumpEntry{analogMs.channel[29].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[29].ms.minLimit", DumpEntry{analogMs.channel[29].ms.minLimit});
        res.insert_or_assign("analogMs.channel[29].ms.accLength", DumpEntry{analogMs.channel[29].ms.accLength});
        res.insert_or_assign("analogMs.channel[29].ms.firMask", DumpEntry{analogMs.channel[29].ms.firMask});
        res.insert_or_assign("analogMs.channel[30].ms.algorithms", DumpEntry{analogMs.channel[30].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[30].ms.algorithms.alg", DumpEntry{analogMs.channel[30].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[30].ms.offset", DumpEntry{analogMs.channel[30].ms.offset});
        res.insert_or_assign("analogMs.channel[30].ms.iirA", DumpEntry{analogMs.channel[30].ms.iirA});
        res.insert_or_assign("analogMs.channel[30].ms.iirB", DumpEntry{analogMs.channel[30].ms.iirB});
        res.insert_or_assign("analogMs.channel[30].ms.maxLimit", DumpEntry{analogMs.channel[30].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[30].ms.minLimit", DumpEntry{analogMs.channel[30].ms.minLimit});
        res.insert_or_assign("analogMs.channel[30].ms.accLength", DumpEntry{analogMs.channel[30].ms.accLength});
        res.insert_or_assign("analogMs.channel[30].ms.firMask", DumpEntry{analogMs.channel[30].ms.firMask});
        res.insert_or_assign("analogMs.channel[31].ms.algorithms", DumpEntry{analogMs.channel[31].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[31].ms.algorithms.alg", DumpEntry{analogMs.channel[31].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[31].ms.offset", DumpEntry{analogMs.channel[31].ms.offset});
        res.insert_or_assign("analogMs.channel[31].ms.iirA", DumpEntry{analogMs.channel[31].ms.iirA});
        res.insert_or_assign("analogMs.channel[31].ms.iirB", DumpEntry{analogMs.channel[31].ms.iirB});
        res.insert_or_assign("analogMs.channel[31].ms.maxLimit", DumpEntry{analogMs.channel[31].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[31].ms.minLimit", DumpEntry{analogMs.channel[31].ms.minLimit});
        res.insert_or_assign("analogMs.channel[31].ms.accLength", DumpEntry{analogMs.channel[31].ms.accLength});
        res.insert_or_assign("analogMs.channel[31].ms.firMask", DumpEntry{analogMs.channel[31].ms.firMask});
        res.insert_or_assign("analogMs.channel[32].ms.algorithms", DumpEntry{analogMs.channel[32].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[32].ms.algorithms.alg", DumpEntry{analogMs.channel[32].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[32].ms.offset", DumpEntry{analogMs.channel[32].ms.offset});
        res.insert_or_assign("analogMs.channel[32].ms.iirA", DumpEntry{analogMs.channel[32].ms.iirA});
        res.insert_or_assign("analogMs.channel[32].ms.iirB", DumpEntry{analogMs.channel[32].ms.iirB});
        res.insert_or_assign("analogMs.channel[32].ms.maxLimit", DumpEntry{analogMs.channel[32].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[32].ms.minLimit", DumpEntry{analogMs.channel[32].ms.minLimit});
        res.insert_or_assign("analogMs.channel[32].ms.accLength", DumpEntry{analogMs.channel[32].ms.accLength});
        res.insert_or_assign("analogMs.channel[32].ms.firMask", DumpEntry{analogMs.channel[32].ms.firMask});
        res.insert_or_assign("analogMs.channel[33].ms.algorithms", DumpEntry{analogMs.channel[33].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[33].ms.algorithms.alg", DumpEntry{analogMs.channel[33].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[33].ms.offset", DumpEntry{analogMs.channel[33].ms.offset});
        res.insert_or_assign("analogMs.channel[33].ms.iirA", DumpEntry{analogMs.channel[33].ms.iirA});
        res.insert_or_assign("analogMs.channel[33].ms.iirB", DumpEntry{analogMs.channel[33].ms.iirB});
        res.insert_or_assign("analogMs.channel[33].ms.maxLimit", DumpEntry{analogMs.channel[33].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[33].ms.minLimit", DumpEntry{analogMs.channel[33].ms.minLimit});
        res.insert_or_assign("analogMs.channel[33].ms.accLength", DumpEntry{analogMs.channel[33].ms.accLength});
        res.insert_or_assign("analogMs.channel[33].ms.firMask", DumpEntry{analogMs.channel[33].ms.firMask});
        res.insert_or_assign("analogMs.channel[34].ms.algorithms", DumpEntry{analogMs.channel[34].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[34].ms.algorithms.alg", DumpEntry{analogMs.channel[34].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[34].ms.offset", DumpEntry{analogMs.channel[34].ms.offset});
        res.insert_or_assign("analogMs.channel[34].ms.iirA", DumpEntry{analogMs.channel[34].ms.iirA});
        res.insert_or_assign("analogMs.channel[34].ms.iirB", DumpEntry{analogMs.channel[34].ms.iirB});
        res.insert_or_assign("analogMs.channel[34].ms.maxLimit", DumpEntry{analogMs.channel[34].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[34].ms.minLimit", DumpEntry{analogMs.channel[34].ms.minLimit});
        res.insert_or_assign("analogMs.channel[34].ms.accLength", DumpEntry{analogMs.channel[34].ms.accLength});
        res.insert_or_assign("analogMs.channel[34].ms.firMask", DumpEntry{analogMs.channel[34].ms.firMask});
        res.insert_or_assign("analogMs.channel[35].ms.algorithms", DumpEntry{analogMs.channel[35].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[35].ms.algorithms.alg", DumpEntry{analogMs.channel[35].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[35].ms.offset", DumpEntry{analogMs.channel[35].ms.offset});
        res.insert_or_assign("analogMs.channel[35].ms.iirA", DumpEntry{analogMs.channel[35].ms.iirA});
        res.insert_or_assign("analogMs.channel[35].ms.iirB", DumpEntry{analogMs.channel[35].ms.iirB});
        res.insert_or_assign("analogMs.channel[35].ms.maxLimit", DumpEntry{analogMs.channel[35].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[35].ms.minLimit", DumpEntry{analogMs.channel[35].ms.minLimit});
        res.insert_or_assign("analogMs.channel[35].ms.accLength", DumpEntry{analogMs.channel[35].ms.accLength});
        res.insert_or_assign("analogMs.channel[35].ms.firMask", DumpEntry{analogMs.channel[35].ms.firMask});
        res.insert_or_assign("analogMs.channel[36].ms.algorithms", DumpEntry{analogMs.channel[36].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[36].ms.algorithms.alg", DumpEntry{analogMs.channel[36].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[36].ms.offset", DumpEntry{analogMs.channel[36].ms.offset});
        res.insert_or_assign("analogMs.channel[36].ms.iirA", DumpEntry{analogMs.channel[36].ms.iirA});
        res.insert_or_assign("analogMs.channel[36].ms.iirB", DumpEntry{analogMs.channel[36].ms.iirB});
        res.insert_or_assign("analogMs.channel[36].ms.maxLimit", DumpEntry{analogMs.channel[36].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[36].ms.minLimit", DumpEntry{analogMs.channel[36].ms.minLimit});
        res.insert_or_assign("analogMs.channel[36].ms.accLength", DumpEntry{analogMs.channel[36].ms.accLength});
        res.insert_or_assign("analogMs.channel[36].ms.firMask", DumpEntry{analogMs.channel[36].ms.firMask});
        res.insert_or_assign("analogMs.channel[37].ms.algorithms", DumpEntry{analogMs.channel[37].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[37].ms.algorithms.alg", DumpEntry{analogMs.channel[37].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[37].ms.offset", DumpEntry{analogMs.channel[37].ms.offset});
        res.insert_or_assign("analogMs.channel[37].ms.iirA", DumpEntry{analogMs.channel[37].ms.iirA});
        res.insert_or_assign("analogMs.channel[37].ms.iirB", DumpEntry{analogMs.channel[37].ms.iirB});
        res.insert_or_assign("analogMs.channel[37].ms.maxLimit", DumpEntry{analogMs.channel[37].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[37].ms.minLimit", DumpEntry{analogMs.channel[37].ms.minLimit});
        res.insert_or_assign("analogMs.channel[37].ms.accLength", DumpEntry{analogMs.channel[37].ms.accLength});
        res.insert_or_assign("analogMs.channel[37].ms.firMask", DumpEntry{analogMs.channel[37].ms.firMask});
        res.insert_or_assign("analogMs.channel[38].ms.algorithms", DumpEntry{analogMs.channel[38].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[38].ms.algorithms.alg", DumpEntry{analogMs.channel[38].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[38].ms.offset", DumpEntry{analogMs.channel[38].ms.offset});
        res.insert_or_assign("analogMs.channel[38].ms.iirA", DumpEntry{analogMs.channel[38].ms.iirA});
        res.insert_or_assign("analogMs.channel[38].ms.iirB", DumpEntry{analogMs.channel[38].ms.iirB});
        res.insert_or_assign("analogMs.channel[38].ms.maxLimit", DumpEntry{analogMs.channel[38].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[38].ms.minLimit", DumpEntry{analogMs.channel[38].ms.minLimit});
        res.insert_or_assign("analogMs.channel[38].ms.accLength", DumpEntry{analogMs.channel[38].ms.accLength});
        res.insert_or_assign("analogMs.channel[38].ms.firMask", DumpEntry{analogMs.channel[38].ms.firMask});
        res.insert_or_assign("analogMs.channel[39].ms.algorithms", DumpEntry{analogMs.channel[39].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[39].ms.algorithms.alg", DumpEntry{analogMs.channel[39].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[39].ms.offset", DumpEntry{analogMs.channel[39].ms.offset});
        res.insert_or_assign("analogMs.channel[39].ms.iirA", DumpEntry{analogMs.channel[39].ms.iirA});
        res.insert_or_assign("analogMs.channel[39].ms.iirB", DumpEntry{analogMs.channel[39].ms.iirB});
        res.insert_or_assign("analogMs.channel[39].ms.maxLimit", DumpEntry{analogMs.channel[39].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[39].ms.minLimit", DumpEntry{analogMs.channel[39].ms.minLimit});
        res.insert_or_assign("analogMs.channel[39].ms.accLength", DumpEntry{analogMs.channel[39].ms.accLength});
        res.insert_or_assign("analogMs.channel[39].ms.firMask", DumpEntry{analogMs.channel[39].ms.firMask});
        res.insert_or_assign("analogMs.channel[40].ms.algorithms", DumpEntry{analogMs.channel[40].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[40].ms.algorithms.alg", DumpEntry{analogMs.channel[40].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[40].ms.offset", DumpEntry{analogMs.channel[40].ms.offset});
        res.insert_or_assign("analogMs.channel[40].ms.iirA", DumpEntry{analogMs.channel[40].ms.iirA});
        res.insert_or_assign("analogMs.channel[40].ms.iirB", DumpEntry{analogMs.channel[40].ms.iirB});
        res.insert_or_assign("analogMs.channel[40].ms.maxLimit", DumpEntry{analogMs.channel[40].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[40].ms.minLimit", DumpEntry{analogMs.channel[40].ms.minLimit});
        res.insert_or_assign("analogMs.channel[40].ms.accLength", DumpEntry{analogMs.channel[40].ms.accLength});
        res.insert_or_assign("analogMs.channel[40].ms.firMask", DumpEntry{analogMs.channel[40].ms.firMask});
        res.insert_or_assign("analogMs.channel[41].ms.algorithms", DumpEntry{analogMs.channel[41].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[41].ms.algorithms.alg", DumpEntry{analogMs.channel[41].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[41].ms.offset", DumpEntry{analogMs.channel[41].ms.offset});
        res.insert_or_assign("analogMs.channel[41].ms.iirA", DumpEntry{analogMs.channel[41].ms.iirA});
        res.insert_or_assign("analogMs.channel[41].ms.iirB", DumpEntry{analogMs.channel[41].ms.iirB});
        res.insert_or_assign("analogMs.channel[41].ms.maxLimit", DumpEntry{analogMs.channel[41].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[41].ms.minLimit", DumpEntry{analogMs.channel[41].ms.minLimit});
        res.insert_or_assign("analogMs.channel[41].ms.accLength", DumpEntry{analogMs.channel[41].ms.accLength});
        res.insert_or_assign("analogMs.channel[41].ms.firMask", DumpEntry{analogMs.channel[41].ms.firMask});
        res.insert_or_assign("analogMs.channel[42].ms.algorithms", DumpEntry{analogMs.channel[42].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[42].ms.algorithms.alg", DumpEntry{analogMs.channel[42].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[42].ms.offset", DumpEntry{analogMs.channel[42].ms.offset});
        res.insert_or_assign("analogMs.channel[42].ms.iirA", DumpEntry{analogMs.channel[42].ms.iirA});
        res.insert_or_assign("analogMs.channel[42].ms.iirB", DumpEntry{analogMs.channel[42].ms.iirB});
        res.insert_or_assign("analogMs.channel[42].ms.maxLimit", DumpEntry{analogMs.channel[42].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[42].ms.minLimit", DumpEntry{analogMs.channel[42].ms.minLimit});
        res.insert_or_assign("analogMs.channel[42].ms.accLength", DumpEntry{analogMs.channel[42].ms.accLength});
        res.insert_or_assign("analogMs.channel[42].ms.firMask", DumpEntry{analogMs.channel[42].ms.firMask});
        res.insert_or_assign("analogMs.channel[43].ms.algorithms", DumpEntry{analogMs.channel[43].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[43].ms.algorithms.alg", DumpEntry{analogMs.channel[43].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[43].ms.offset", DumpEntry{analogMs.channel[43].ms.offset});
        res.insert_or_assign("analogMs.channel[43].ms.iirA", DumpEntry{analogMs.channel[43].ms.iirA});
        res.insert_or_assign("analogMs.channel[43].ms.iirB", DumpEntry{analogMs.channel[43].ms.iirB});
        res.insert_or_assign("analogMs.channel[43].ms.maxLimit", DumpEntry{analogMs.channel[43].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[43].ms.minLimit", DumpEntry{analogMs.channel[43].ms.minLimit});
        res.insert_or_assign("analogMs.channel[43].ms.accLength", DumpEntry{analogMs.channel[43].ms.accLength});
        res.insert_or_assign("analogMs.channel[43].ms.firMask", DumpEntry{analogMs.channel[43].ms.firMask});
        res.insert_or_assign("analogMs.channel[44].ms.algorithms", DumpEntry{analogMs.channel[44].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[44].ms.algorithms.alg", DumpEntry{analogMs.channel[44].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[44].ms.offset", DumpEntry{analogMs.channel[44].ms.offset});
        res.insert_or_assign("analogMs.channel[44].ms.iirA", DumpEntry{analogMs.channel[44].ms.iirA});
        res.insert_or_assign("analogMs.channel[44].ms.iirB", DumpEntry{analogMs.channel[44].ms.iirB});
        res.insert_or_assign("analogMs.channel[44].ms.maxLimit", DumpEntry{analogMs.channel[44].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[44].ms.minLimit", DumpEntry{analogMs.channel[44].ms.minLimit});
        res.insert_or_assign("analogMs.channel[44].ms.accLength", DumpEntry{analogMs.channel[44].ms.accLength});
        res.insert_or_assign("analogMs.channel[44].ms.firMask", DumpEntry{analogMs.channel[44].ms.firMask});
        res.insert_or_assign("analogMs.channel[45].ms.algorithms", DumpEntry{analogMs.channel[45].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[45].ms.algorithms.alg", DumpEntry{analogMs.channel[45].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[45].ms.offset", DumpEntry{analogMs.channel[45].ms.offset});
        res.insert_or_assign("analogMs.channel[45].ms.iirA", DumpEntry{analogMs.channel[45].ms.iirA});
        res.insert_or_assign("analogMs.channel[45].ms.iirB", DumpEntry{analogMs.channel[45].ms.iirB});
        res.insert_or_assign("analogMs.channel[45].ms.maxLimit", DumpEntry{analogMs.channel[45].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[45].ms.minLimit", DumpEntry{analogMs.channel[45].ms.minLimit});
        res.insert_or_assign("analogMs.channel[45].ms.accLength", DumpEntry{analogMs.channel[45].ms.accLength});
        res.insert_or_assign("analogMs.channel[45].ms.firMask", DumpEntry{analogMs.channel[45].ms.firMask});
        res.insert_or_assign("analogMs.channel[46].ms.algorithms", DumpEntry{analogMs.channel[46].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[46].ms.algorithms.alg", DumpEntry{analogMs.channel[46].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[46].ms.offset", DumpEntry{analogMs.channel[46].ms.offset});
        res.insert_or_assign("analogMs.channel[46].ms.iirA", DumpEntry{analogMs.channel[46].ms.iirA});
        res.insert_or_assign("analogMs.channel[46].ms.iirB", DumpEntry{analogMs.channel[46].ms.iirB});
        res.insert_or_assign("analogMs.channel[46].ms.maxLimit", DumpEntry{analogMs.channel[46].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[46].ms.minLimit", DumpEntry{analogMs.channel[46].ms.minLimit});
        res.insert_or_assign("analogMs.channel[46].ms.accLength", DumpEntry{analogMs.channel[46].ms.accLength});
        res.insert_or_assign("analogMs.channel[46].ms.firMask", DumpEntry{analogMs.channel[46].ms.firMask});
        res.insert_or_assign("analogMs.channel[47].ms.algorithms", DumpEntry{analogMs.channel[47].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[47].ms.algorithms.alg", DumpEntry{analogMs.channel[47].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[47].ms.offset", DumpEntry{analogMs.channel[47].ms.offset});
        res.insert_or_assign("analogMs.channel[47].ms.iirA", DumpEntry{analogMs.channel[47].ms.iirA});
        res.insert_or_assign("analogMs.channel[47].ms.iirB", DumpEntry{analogMs.channel[47].ms.iirB});
        res.insert_or_assign("analogMs.channel[47].ms.maxLimit", DumpEntry{analogMs.channel[47].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[47].ms.minLimit", DumpEntry{analogMs.channel[47].ms.minLimit});
        res.insert_or_assign("analogMs.channel[47].ms.accLength", DumpEntry{analogMs.channel[47].ms.accLength});
        res.insert_or_assign("analogMs.channel[47].ms.firMask", DumpEntry{analogMs.channel[47].ms.firMask});
        res.insert_or_assign("analogMs.channel[48].ms.algorithms", DumpEntry{analogMs.channel[48].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[48].ms.algorithms.alg", DumpEntry{analogMs.channel[48].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[48].ms.offset", DumpEntry{analogMs.channel[48].ms.offset});
        res.insert_or_assign("analogMs.channel[48].ms.iirA", DumpEntry{analogMs.channel[48].ms.iirA});
        res.insert_or_assign("analogMs.channel[48].ms.iirB", DumpEntry{analogMs.channel[48].ms.iirB});
        res.insert_or_assign("analogMs.channel[48].ms.maxLimit", DumpEntry{analogMs.channel[48].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[48].ms.minLimit", DumpEntry{analogMs.channel[48].ms.minLimit});
        res.insert_or_assign("analogMs.channel[48].ms.accLength", DumpEntry{analogMs.channel[48].ms.accLength});
        res.insert_or_assign("analogMs.channel[48].ms.firMask", DumpEntry{analogMs.channel[48].ms.firMask});
        res.insert_or_assign("analogMs.channel[49].ms.algorithms", DumpEntry{analogMs.channel[49].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[49].ms.algorithms.alg", DumpEntry{analogMs.channel[49].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[49].ms.offset", DumpEntry{analogMs.channel[49].ms.offset});
        res.insert_or_assign("analogMs.channel[49].ms.iirA", DumpEntry{analogMs.channel[49].ms.iirA});
        res.insert_or_assign("analogMs.channel[49].ms.iirB", DumpEntry{analogMs.channel[49].ms.iirB});
        res.insert_or_assign("analogMs.channel[49].ms.maxLimit", DumpEntry{analogMs.channel[49].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[49].ms.minLimit", DumpEntry{analogMs.channel[49].ms.minLimit});
        res.insert_or_assign("analogMs.channel[49].ms.accLength", DumpEntry{analogMs.channel[49].ms.accLength});
        res.insert_or_assign("analogMs.channel[49].ms.firMask", DumpEntry{analogMs.channel[49].ms.firMask});
        res.insert_or_assign("analogMs.channel[50].ms.algorithms", DumpEntry{analogMs.channel[50].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[50].ms.algorithms.alg", DumpEntry{analogMs.channel[50].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[50].ms.offset", DumpEntry{analogMs.channel[50].ms.offset});
        res.insert_or_assign("analogMs.channel[50].ms.iirA", DumpEntry{analogMs.channel[50].ms.iirA});
        res.insert_or_assign("analogMs.channel[50].ms.iirB", DumpEntry{analogMs.channel[50].ms.iirB});
        res.insert_or_assign("analogMs.channel[50].ms.maxLimit", DumpEntry{analogMs.channel[50].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[50].ms.minLimit", DumpEntry{analogMs.channel[50].ms.minLimit});
        res.insert_or_assign("analogMs.channel[50].ms.accLength", DumpEntry{analogMs.channel[50].ms.accLength});
        res.insert_or_assign("analogMs.channel[50].ms.firMask", DumpEntry{analogMs.channel[50].ms.firMask});
        res.insert_or_assign("analogMs.channel[51].ms.algorithms", DumpEntry{analogMs.channel[51].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[51].ms.algorithms.alg", DumpEntry{analogMs.channel[51].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[51].ms.offset", DumpEntry{analogMs.channel[51].ms.offset});
        res.insert_or_assign("analogMs.channel[51].ms.iirA", DumpEntry{analogMs.channel[51].ms.iirA});
        res.insert_or_assign("analogMs.channel[51].ms.iirB", DumpEntry{analogMs.channel[51].ms.iirB});
        res.insert_or_assign("analogMs.channel[51].ms.maxLimit", DumpEntry{analogMs.channel[51].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[51].ms.minLimit", DumpEntry{analogMs.channel[51].ms.minLimit});
        res.insert_or_assign("analogMs.channel[51].ms.accLength", DumpEntry{analogMs.channel[51].ms.accLength});
        res.insert_or_assign("analogMs.channel[51].ms.firMask", DumpEntry{analogMs.channel[51].ms.firMask});
        res.insert_or_assign("analogMs.channel[52].ms.algorithms", DumpEntry{analogMs.channel[52].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[52].ms.algorithms.alg", DumpEntry{analogMs.channel[52].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[52].ms.offset", DumpEntry{analogMs.channel[52].ms.offset});
        res.insert_or_assign("analogMs.channel[52].ms.iirA", DumpEntry{analogMs.channel[52].ms.iirA});
        res.insert_or_assign("analogMs.channel[52].ms.iirB", DumpEntry{analogMs.channel[52].ms.iirB});
        res.insert_or_assign("analogMs.channel[52].ms.maxLimit", DumpEntry{analogMs.channel[52].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[52].ms.minLimit", DumpEntry{analogMs.channel[52].ms.minLimit});
        res.insert_or_assign("analogMs.channel[52].ms.accLength", DumpEntry{analogMs.channel[52].ms.accLength});
        res.insert_or_assign("analogMs.channel[52].ms.firMask", DumpEntry{analogMs.channel[52].ms.firMask});
        res.insert_or_assign("analogMs.channel[53].ms.algorithms", DumpEntry{analogMs.channel[53].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[53].ms.algorithms.alg", DumpEntry{analogMs.channel[53].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[53].ms.offset", DumpEntry{analogMs.channel[53].ms.offset});
        res.insert_or_assign("analogMs.channel[53].ms.iirA", DumpEntry{analogMs.channel[53].ms.iirA});
        res.insert_or_assign("analogMs.channel[53].ms.iirB", DumpEntry{analogMs.channel[53].ms.iirB});
        res.insert_or_assign("analogMs.channel[53].ms.maxLimit", DumpEntry{analogMs.channel[53].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[53].ms.minLimit", DumpEntry{analogMs.channel[53].ms.minLimit});
        res.insert_or_assign("analogMs.channel[53].ms.accLength", DumpEntry{analogMs.channel[53].ms.accLength});
        res.insert_or_assign("analogMs.channel[53].ms.firMask", DumpEntry{analogMs.channel[53].ms.firMask});
        res.insert_or_assign("analogMs.channel[54].ms.algorithms", DumpEntry{analogMs.channel[54].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[54].ms.algorithms.alg", DumpEntry{analogMs.channel[54].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[54].ms.offset", DumpEntry{analogMs.channel[54].ms.offset});
        res.insert_or_assign("analogMs.channel[54].ms.iirA", DumpEntry{analogMs.channel[54].ms.iirA});
        res.insert_or_assign("analogMs.channel[54].ms.iirB", DumpEntry{analogMs.channel[54].ms.iirB});
        res.insert_or_assign("analogMs.channel[54].ms.maxLimit", DumpEntry{analogMs.channel[54].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[54].ms.minLimit", DumpEntry{analogMs.channel[54].ms.minLimit});
        res.insert_or_assign("analogMs.channel[54].ms.accLength", DumpEntry{analogMs.channel[54].ms.accLength});
        res.insert_or_assign("analogMs.channel[54].ms.firMask", DumpEntry{analogMs.channel[54].ms.firMask});
        res.insert_or_assign("analogMs.channel[55].ms.algorithms", DumpEntry{analogMs.channel[55].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[55].ms.algorithms.alg", DumpEntry{analogMs.channel[55].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[55].ms.offset", DumpEntry{analogMs.channel[55].ms.offset});
        res.insert_or_assign("analogMs.channel[55].ms.iirA", DumpEntry{analogMs.channel[55].ms.iirA});
        res.insert_or_assign("analogMs.channel[55].ms.iirB", DumpEntry{analogMs.channel[55].ms.iirB});
        res.insert_or_assign("analogMs.channel[55].ms.maxLimit", DumpEntry{analogMs.channel[55].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[55].ms.minLimit", DumpEntry{analogMs.channel[55].ms.minLimit});
        res.insert_or_assign("analogMs.channel[55].ms.accLength", DumpEntry{analogMs.channel[55].ms.accLength});
        res.insert_or_assign("analogMs.channel[55].ms.firMask", DumpEntry{analogMs.channel[55].ms.firMask});
        res.insert_or_assign("analogMs.channel[56].ms.algorithms", DumpEntry{analogMs.channel[56].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[56].ms.algorithms.alg", DumpEntry{analogMs.channel[56].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[56].ms.offset", DumpEntry{analogMs.channel[56].ms.offset});
        res.insert_or_assign("analogMs.channel[56].ms.iirA", DumpEntry{analogMs.channel[56].ms.iirA});
        res.insert_or_assign("analogMs.channel[56].ms.iirB", DumpEntry{analogMs.channel[56].ms.iirB});
        res.insert_or_assign("analogMs.channel[56].ms.maxLimit", DumpEntry{analogMs.channel[56].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[56].ms.minLimit", DumpEntry{analogMs.channel[56].ms.minLimit});
        res.insert_or_assign("analogMs.channel[56].ms.accLength", DumpEntry{analogMs.channel[56].ms.accLength});
        res.insert_or_assign("analogMs.channel[56].ms.firMask", DumpEntry{analogMs.channel[56].ms.firMask});
        res.insert_or_assign("analogMs.channel[57].ms.algorithms", DumpEntry{analogMs.channel[57].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[57].ms.algorithms.alg", DumpEntry{analogMs.channel[57].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[57].ms.offset", DumpEntry{analogMs.channel[57].ms.offset});
        res.insert_or_assign("analogMs.channel[57].ms.iirA", DumpEntry{analogMs.channel[57].ms.iirA});
        res.insert_or_assign("analogMs.channel[57].ms.iirB", DumpEntry{analogMs.channel[57].ms.iirB});
        res.insert_or_assign("analogMs.channel[57].ms.maxLimit", DumpEntry{analogMs.channel[57].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[57].ms.minLimit", DumpEntry{analogMs.channel[57].ms.minLimit});
        res.insert_or_assign("analogMs.channel[57].ms.accLength", DumpEntry{analogMs.channel[57].ms.accLength});
        res.insert_or_assign("analogMs.channel[57].ms.firMask", DumpEntry{analogMs.channel[57].ms.firMask});
        res.insert_or_assign("analogMs.channel[58].ms.algorithms", DumpEntry{analogMs.channel[58].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[58].ms.algorithms.alg", DumpEntry{analogMs.channel[58].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[58].ms.offset", DumpEntry{analogMs.channel[58].ms.offset});
        res.insert_or_assign("analogMs.channel[58].ms.iirA", DumpEntry{analogMs.channel[58].ms.iirA});
        res.insert_or_assign("analogMs.channel[58].ms.iirB", DumpEntry{analogMs.channel[58].ms.iirB});
        res.insert_or_assign("analogMs.channel[58].ms.maxLimit", DumpEntry{analogMs.channel[58].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[58].ms.minLimit", DumpEntry{analogMs.channel[58].ms.minLimit});
        res.insert_or_assign("analogMs.channel[58].ms.accLength", DumpEntry{analogMs.channel[58].ms.accLength});
        res.insert_or_assign("analogMs.channel[58].ms.firMask", DumpEntry{analogMs.channel[58].ms.firMask});
        res.insert_or_assign("analogMs.channel[59].ms.algorithms", DumpEntry{analogMs.channel[59].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[59].ms.algorithms.alg", DumpEntry{analogMs.channel[59].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[59].ms.offset", DumpEntry{analogMs.channel[59].ms.offset});
        res.insert_or_assign("analogMs.channel[59].ms.iirA", DumpEntry{analogMs.channel[59].ms.iirA});
        res.insert_or_assign("analogMs.channel[59].ms.iirB", DumpEntry{analogMs.channel[59].ms.iirB});
        res.insert_or_assign("analogMs.channel[59].ms.maxLimit", DumpEntry{analogMs.channel[59].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[59].ms.minLimit", DumpEntry{analogMs.channel[59].ms.minLimit});
        res.insert_or_assign("analogMs.channel[59].ms.accLength", DumpEntry{analogMs.channel[59].ms.accLength});
        res.insert_or_assign("analogMs.channel[59].ms.firMask", DumpEntry{analogMs.channel[59].ms.firMask});
        res.insert_or_assign("analogMs.channel[60].ms.algorithms", DumpEntry{analogMs.channel[60].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[60].ms.algorithms.alg", DumpEntry{analogMs.channel[60].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[60].ms.offset", DumpEntry{analogMs.channel[60].ms.offset});
        res.insert_or_assign("analogMs.channel[60].ms.iirA", DumpEntry{analogMs.channel[60].ms.iirA});
        res.insert_or_assign("analogMs.channel[60].ms.iirB", DumpEntry{analogMs.channel[60].ms.iirB});
        res.insert_or_assign("analogMs.channel[60].ms.maxLimit", DumpEntry{analogMs.channel[60].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[60].ms.minLimit", DumpEntry{analogMs.channel[60].ms.minLimit});
        res.insert_or_assign("analogMs.channel[60].ms.accLength", DumpEntry{analogMs.channel[60].ms.accLength});
        res.insert_or_assign("analogMs.channel[60].ms.firMask", DumpEntry{analogMs.channel[60].ms.firMask});
        res.insert_or_assign("analogMs.channel[61].ms.algorithms", DumpEntry{analogMs.channel[61].ms.algorithms});
        res.insert_or_assign(
            "analogMs.channel[61].ms.algorithms.alg", DumpEntry{analogMs.channel[61].ms.algorithms.alg}
        );
        res.insert_or_assign("analogMs.channel[61].ms.offset", DumpEntry{analogMs.channel[61].ms.offset});
        res.insert_or_assign("analogMs.channel[61].ms.iirA", DumpEntry{analogMs.channel[61].ms.iirA});
        res.insert_or_assign("analogMs.channel[61].ms.iirB", DumpEntry{analogMs.channel[61].ms.iirB});
        res.insert_or_assign("analogMs.channel[61].ms.maxLimit", DumpEntry{analogMs.channel[61].ms.maxLimit});
        res.insert_or_assign("analogMs.channel[61].ms.minLimit", DumpEntry{analogMs.channel[61].ms.minLimit});
        res.insert_or_assign("analogMs.channel[61].ms.accLength", DumpEntry{analogMs.channel[61].ms.accLength});
        res.insert_or_assign("analogMs.channel[61].ms.firMask", DumpEntry{analogMs.channel[61].ms.firMask});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI0::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI0::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI0`
    //!
    //! @param digI0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digI0
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI0& digI0)
    {
        DumpMap res{digI0.base()};
        res.insert_or_assign("digI0.staticParams", DumpEntry{digI0.staticParams});
        res.insert_or_assign("digI0.staticParams.invertIsEn", DumpEntry{digI0.staticParams.invertIsEn});
        res.insert_or_assign("digI0.staticParams.enableIsEn", DumpEntry{digI0.staticParams.enableIsEn});
        res.insert_or_assign("digI0.staticParams.latchIsEn", DumpEntry{digI0.staticParams.latchIsEn});
        res.insert_or_assign("digI0.staticParams.deglitchIsEn", DumpEntry{digI0.staticParams.deglitchIsEn});
        res.insert_or_assign("digI0.staticParams.reTimeIsEn", DumpEntry{digI0.staticParams.reTimeIsEn});
        res.insert_or_assign("digI0.staticParams.numChannels", DumpEntry{digI0.staticParams.numChannels});
        res.insert_or_assign("digI0.data", DumpEntry{digI0.data});
        res.insert_or_assign("digI0.dataChanged", DumpEntry{digI0.dataChanged});
        res.insert_or_assign("digI0.invert", DumpEntry{digI0.invert});
        res.insert_or_assign("digI0.enable", DumpEntry{digI0.enable});
        res.insert_or_assign("digI0.latch", DumpEntry{digI0.latch});
        res.insert_or_assign("digI0.rstLatch", DumpEntry{digI0.rstLatch});
        res.insert_or_assign("digI0.risingInterrupt", DumpEntry{digI0.risingInterrupt});
        res.insert_or_assign("digI0.fallingInterrupt", DumpEntry{digI0.fallingInterrupt});
        res.insert_or_assign("digI0.filterLengthSc[0].val", DumpEntry{digI0.filterLengthSc[0].val});
        res.insert_or_assign("digI0.filterLengthSc[1].val", DumpEntry{digI0.filterLengthSc[1].val});
        res.insert_or_assign("digI0.filterLengthSc[2].val", DumpEntry{digI0.filterLengthSc[2].val});
        res.insert_or_assign("digI0.filterLengthSc[3].val", DumpEntry{digI0.filterLengthSc[3].val});
        res.insert_or_assign("digI0.filterLengthSc[4].val", DumpEntry{digI0.filterLengthSc[4].val});
        res.insert_or_assign("digI0.filterLengthSc[5].val", DumpEntry{digI0.filterLengthSc[5].val});
        res.insert_or_assign("digI0.filterLengthSc[6].val", DumpEntry{digI0.filterLengthSc[6].val});
        res.insert_or_assign("digI0.filterLengthSc[7].val", DumpEntry{digI0.filterLengthSc[7].val});
        res.insert_or_assign("digI0.filterLengthSc[8].val", DumpEntry{digI0.filterLengthSc[8].val});
        res.insert_or_assign("digI0.filterLengthSc[9].val", DumpEntry{digI0.filterLengthSc[9].val});
        res.insert_or_assign("digI0.filterLengthSc[10].val", DumpEntry{digI0.filterLengthSc[10].val});
        res.insert_or_assign("digI0.filterLengthSc[11].val", DumpEntry{digI0.filterLengthSc[11].val});
        res.insert_or_assign("digI0.filterLengthSc[12].val", DumpEntry{digI0.filterLengthSc[12].val});
        res.insert_or_assign("digI0.filterLengthSc[13].val", DumpEntry{digI0.filterLengthSc[13].val});
        res.insert_or_assign("digI0.filterLengthSc[14].val", DumpEntry{digI0.filterLengthSc[14].val});
        res.insert_or_assign("digI0.filterLengthSc[15].val", DumpEntry{digI0.filterLengthSc[15].val});
        res.insert_or_assign("digI0.filterLengthSc[16].val", DumpEntry{digI0.filterLengthSc[16].val});
        res.insert_or_assign("digI0.filterLengthSc[17].val", DumpEntry{digI0.filterLengthSc[17].val});
        res.insert_or_assign("digI0.filterLengthSc[18].val", DumpEntry{digI0.filterLengthSc[18].val});
        res.insert_or_assign("digI0.filterLengthSc[19].val", DumpEntry{digI0.filterLengthSc[19].val});
        res.insert_or_assign("digI0.filterLengthSc[20].val", DumpEntry{digI0.filterLengthSc[20].val});
        res.insert_or_assign("digI0.filterLengthSc[21].val", DumpEntry{digI0.filterLengthSc[21].val});
        res.insert_or_assign("digI0.filterLengthSc[22].val", DumpEntry{digI0.filterLengthSc[22].val});
        res.insert_or_assign("digI0.filterLengthSc[23].val", DumpEntry{digI0.filterLengthSc[23].val});
        res.insert_or_assign("digI0.filterLengthSc[24].val", DumpEntry{digI0.filterLengthSc[24].val});
        res.insert_or_assign("digI0.filterLengthSc[25].val", DumpEntry{digI0.filterLengthSc[25].val});
        res.insert_or_assign("digI0.filterLengthSc[26].val", DumpEntry{digI0.filterLengthSc[26].val});
        res.insert_or_assign("digI0.filterLengthSc[27].val", DumpEntry{digI0.filterLengthSc[27].val});
        res.insert_or_assign("digI0.filterLengthSc[28].val", DumpEntry{digI0.filterLengthSc[28].val});
        res.insert_or_assign("digI0.filterLengthSc[29].val", DumpEntry{digI0.filterLengthSc[29].val});
        res.insert_or_assign("digI0.filterLengthSc[30].val", DumpEntry{digI0.filterLengthSc[30].val});
        res.insert_or_assign("digI0.filterLengthSc[31].val", DumpEntry{digI0.filterLengthSc[31].val});
        res.insert_or_assign("digI0.reTime[0].s", DumpEntry{digI0.reTime[0].s});
        res.insert_or_assign("digI0.reTime[0].ns", DumpEntry{digI0.reTime[0].ns});
        res.insert_or_assign("digI0.reTime[1].s", DumpEntry{digI0.reTime[1].s});
        res.insert_or_assign("digI0.reTime[1].ns", DumpEntry{digI0.reTime[1].ns});
        res.insert_or_assign("digI0.reTime[2].s", DumpEntry{digI0.reTime[2].s});
        res.insert_or_assign("digI0.reTime[2].ns", DumpEntry{digI0.reTime[2].ns});
        res.insert_or_assign("digI0.reTime[3].s", DumpEntry{digI0.reTime[3].s});
        res.insert_or_assign("digI0.reTime[3].ns", DumpEntry{digI0.reTime[3].ns});
        res.insert_or_assign("digI0.reTime[4].s", DumpEntry{digI0.reTime[4].s});
        res.insert_or_assign("digI0.reTime[4].ns", DumpEntry{digI0.reTime[4].ns});
        res.insert_or_assign("digI0.reTime[5].s", DumpEntry{digI0.reTime[5].s});
        res.insert_or_assign("digI0.reTime[5].ns", DumpEntry{digI0.reTime[5].ns});
        res.insert_or_assign("digI0.reTime[6].s", DumpEntry{digI0.reTime[6].s});
        res.insert_or_assign("digI0.reTime[6].ns", DumpEntry{digI0.reTime[6].ns});
        res.insert_or_assign("digI0.reTime[7].s", DumpEntry{digI0.reTime[7].s});
        res.insert_or_assign("digI0.reTime[7].ns", DumpEntry{digI0.reTime[7].ns});
        res.insert_or_assign("digI0.reTime[8].s", DumpEntry{digI0.reTime[8].s});
        res.insert_or_assign("digI0.reTime[8].ns", DumpEntry{digI0.reTime[8].ns});
        res.insert_or_assign("digI0.reTime[9].s", DumpEntry{digI0.reTime[9].s});
        res.insert_or_assign("digI0.reTime[9].ns", DumpEntry{digI0.reTime[9].ns});
        res.insert_or_assign("digI0.reTime[10].s", DumpEntry{digI0.reTime[10].s});
        res.insert_or_assign("digI0.reTime[10].ns", DumpEntry{digI0.reTime[10].ns});
        res.insert_or_assign("digI0.reTime[11].s", DumpEntry{digI0.reTime[11].s});
        res.insert_or_assign("digI0.reTime[11].ns", DumpEntry{digI0.reTime[11].ns});
        res.insert_or_assign("digI0.reTime[12].s", DumpEntry{digI0.reTime[12].s});
        res.insert_or_assign("digI0.reTime[12].ns", DumpEntry{digI0.reTime[12].ns});
        res.insert_or_assign("digI0.reTime[13].s", DumpEntry{digI0.reTime[13].s});
        res.insert_or_assign("digI0.reTime[13].ns", DumpEntry{digI0.reTime[13].ns});
        res.insert_or_assign("digI0.reTime[14].s", DumpEntry{digI0.reTime[14].s});
        res.insert_or_assign("digI0.reTime[14].ns", DumpEntry{digI0.reTime[14].ns});
        res.insert_or_assign("digI0.reTime[15].s", DumpEntry{digI0.reTime[15].s});
        res.insert_or_assign("digI0.reTime[15].ns", DumpEntry{digI0.reTime[15].ns});
        res.insert_or_assign("digI0.reTime[16].s", DumpEntry{digI0.reTime[16].s});
        res.insert_or_assign("digI0.reTime[16].ns", DumpEntry{digI0.reTime[16].ns});
        res.insert_or_assign("digI0.reTime[17].s", DumpEntry{digI0.reTime[17].s});
        res.insert_or_assign("digI0.reTime[17].ns", DumpEntry{digI0.reTime[17].ns});
        res.insert_or_assign("digI0.reTime[18].s", DumpEntry{digI0.reTime[18].s});
        res.insert_or_assign("digI0.reTime[18].ns", DumpEntry{digI0.reTime[18].ns});
        res.insert_or_assign("digI0.reTime[19].s", DumpEntry{digI0.reTime[19].s});
        res.insert_or_assign("digI0.reTime[19].ns", DumpEntry{digI0.reTime[19].ns});
        res.insert_or_assign("digI0.reTime[20].s", DumpEntry{digI0.reTime[20].s});
        res.insert_or_assign("digI0.reTime[20].ns", DumpEntry{digI0.reTime[20].ns});
        res.insert_or_assign("digI0.reTime[21].s", DumpEntry{digI0.reTime[21].s});
        res.insert_or_assign("digI0.reTime[21].ns", DumpEntry{digI0.reTime[21].ns});
        res.insert_or_assign("digI0.reTime[22].s", DumpEntry{digI0.reTime[22].s});
        res.insert_or_assign("digI0.reTime[22].ns", DumpEntry{digI0.reTime[22].ns});
        res.insert_or_assign("digI0.reTime[23].s", DumpEntry{digI0.reTime[23].s});
        res.insert_or_assign("digI0.reTime[23].ns", DumpEntry{digI0.reTime[23].ns});
        res.insert_or_assign("digI0.reTime[24].s", DumpEntry{digI0.reTime[24].s});
        res.insert_or_assign("digI0.reTime[24].ns", DumpEntry{digI0.reTime[24].ns});
        res.insert_or_assign("digI0.reTime[25].s", DumpEntry{digI0.reTime[25].s});
        res.insert_or_assign("digI0.reTime[25].ns", DumpEntry{digI0.reTime[25].ns});
        res.insert_or_assign("digI0.reTime[26].s", DumpEntry{digI0.reTime[26].s});
        res.insert_or_assign("digI0.reTime[26].ns", DumpEntry{digI0.reTime[26].ns});
        res.insert_or_assign("digI0.reTime[27].s", DumpEntry{digI0.reTime[27].s});
        res.insert_or_assign("digI0.reTime[27].ns", DumpEntry{digI0.reTime[27].ns});
        res.insert_or_assign("digI0.reTime[28].s", DumpEntry{digI0.reTime[28].s});
        res.insert_or_assign("digI0.reTime[28].ns", DumpEntry{digI0.reTime[28].ns});
        res.insert_or_assign("digI0.reTime[29].s", DumpEntry{digI0.reTime[29].s});
        res.insert_or_assign("digI0.reTime[29].ns", DumpEntry{digI0.reTime[29].ns});
        res.insert_or_assign("digI0.reTime[30].s", DumpEntry{digI0.reTime[30].s});
        res.insert_or_assign("digI0.reTime[30].ns", DumpEntry{digI0.reTime[30].ns});
        res.insert_or_assign("digI0.reTime[31].s", DumpEntry{digI0.reTime[31].s});
        res.insert_or_assign("digI0.reTime[31].ns", DumpEntry{digI0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI1::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI1::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigI1`
    //!
    //! @param digI1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digI1
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigI1& digI1)
    {
        DumpMap res{digI1.base()};
        res.insert_or_assign("digI1.staticParams", DumpEntry{digI1.staticParams});
        res.insert_or_assign("digI1.staticParams.invertIsEn", DumpEntry{digI1.staticParams.invertIsEn});
        res.insert_or_assign("digI1.staticParams.enableIsEn", DumpEntry{digI1.staticParams.enableIsEn});
        res.insert_or_assign("digI1.staticParams.latchIsEn", DumpEntry{digI1.staticParams.latchIsEn});
        res.insert_or_assign("digI1.staticParams.deglitchIsEn", DumpEntry{digI1.staticParams.deglitchIsEn});
        res.insert_or_assign("digI1.staticParams.reTimeIsEn", DumpEntry{digI1.staticParams.reTimeIsEn});
        res.insert_or_assign("digI1.staticParams.numChannels", DumpEntry{digI1.staticParams.numChannels});
        res.insert_or_assign("digI1.data", DumpEntry{digI1.data});
        res.insert_or_assign("digI1.dataChanged", DumpEntry{digI1.dataChanged});
        res.insert_or_assign("digI1.invert", DumpEntry{digI1.invert});
        res.insert_or_assign("digI1.enable", DumpEntry{digI1.enable});
        res.insert_or_assign("digI1.latch", DumpEntry{digI1.latch});
        res.insert_or_assign("digI1.rstLatch", DumpEntry{digI1.rstLatch});
        res.insert_or_assign("digI1.risingInterrupt", DumpEntry{digI1.risingInterrupt});
        res.insert_or_assign("digI1.fallingInterrupt", DumpEntry{digI1.fallingInterrupt});
        res.insert_or_assign("digI1.filterLengthSc[0].val", DumpEntry{digI1.filterLengthSc[0].val});
        res.insert_or_assign("digI1.filterLengthSc[1].val", DumpEntry{digI1.filterLengthSc[1].val});
        res.insert_or_assign("digI1.filterLengthSc[2].val", DumpEntry{digI1.filterLengthSc[2].val});
        res.insert_or_assign("digI1.filterLengthSc[3].val", DumpEntry{digI1.filterLengthSc[3].val});
        res.insert_or_assign("digI1.filterLengthSc[4].val", DumpEntry{digI1.filterLengthSc[4].val});
        res.insert_or_assign("digI1.filterLengthSc[5].val", DumpEntry{digI1.filterLengthSc[5].val});
        res.insert_or_assign("digI1.filterLengthSc[6].val", DumpEntry{digI1.filterLengthSc[6].val});
        res.insert_or_assign("digI1.filterLengthSc[7].val", DumpEntry{digI1.filterLengthSc[7].val});
        res.insert_or_assign("digI1.filterLengthSc[8].val", DumpEntry{digI1.filterLengthSc[8].val});
        res.insert_or_assign("digI1.filterLengthSc[9].val", DumpEntry{digI1.filterLengthSc[9].val});
        res.insert_or_assign("digI1.filterLengthSc[10].val", DumpEntry{digI1.filterLengthSc[10].val});
        res.insert_or_assign("digI1.filterLengthSc[11].val", DumpEntry{digI1.filterLengthSc[11].val});
        res.insert_or_assign("digI1.filterLengthSc[12].val", DumpEntry{digI1.filterLengthSc[12].val});
        res.insert_or_assign("digI1.filterLengthSc[13].val", DumpEntry{digI1.filterLengthSc[13].val});
        res.insert_or_assign("digI1.filterLengthSc[14].val", DumpEntry{digI1.filterLengthSc[14].val});
        res.insert_or_assign("digI1.filterLengthSc[15].val", DumpEntry{digI1.filterLengthSc[15].val});
        res.insert_or_assign("digI1.filterLengthSc[16].val", DumpEntry{digI1.filterLengthSc[16].val});
        res.insert_or_assign("digI1.filterLengthSc[17].val", DumpEntry{digI1.filterLengthSc[17].val});
        res.insert_or_assign("digI1.filterLengthSc[18].val", DumpEntry{digI1.filterLengthSc[18].val});
        res.insert_or_assign("digI1.filterLengthSc[19].val", DumpEntry{digI1.filterLengthSc[19].val});
        res.insert_or_assign("digI1.filterLengthSc[20].val", DumpEntry{digI1.filterLengthSc[20].val});
        res.insert_or_assign("digI1.filterLengthSc[21].val", DumpEntry{digI1.filterLengthSc[21].val});
        res.insert_or_assign("digI1.filterLengthSc[22].val", DumpEntry{digI1.filterLengthSc[22].val});
        res.insert_or_assign("digI1.filterLengthSc[23].val", DumpEntry{digI1.filterLengthSc[23].val});
        res.insert_or_assign("digI1.filterLengthSc[24].val", DumpEntry{digI1.filterLengthSc[24].val});
        res.insert_or_assign("digI1.filterLengthSc[25].val", DumpEntry{digI1.filterLengthSc[25].val});
        res.insert_or_assign("digI1.filterLengthSc[26].val", DumpEntry{digI1.filterLengthSc[26].val});
        res.insert_or_assign("digI1.filterLengthSc[27].val", DumpEntry{digI1.filterLengthSc[27].val});
        res.insert_or_assign("digI1.filterLengthSc[28].val", DumpEntry{digI1.filterLengthSc[28].val});
        res.insert_or_assign("digI1.filterLengthSc[29].val", DumpEntry{digI1.filterLengthSc[29].val});
        res.insert_or_assign("digI1.filterLengthSc[30].val", DumpEntry{digI1.filterLengthSc[30].val});
        res.insert_or_assign("digI1.filterLengthSc[31].val", DumpEntry{digI1.filterLengthSc[31].val});
        res.insert_or_assign("digI1.reTime[0].s", DumpEntry{digI1.reTime[0].s});
        res.insert_or_assign("digI1.reTime[0].ns", DumpEntry{digI1.reTime[0].ns});
        res.insert_or_assign("digI1.reTime[1].s", DumpEntry{digI1.reTime[1].s});
        res.insert_or_assign("digI1.reTime[1].ns", DumpEntry{digI1.reTime[1].ns});
        res.insert_or_assign("digI1.reTime[2].s", DumpEntry{digI1.reTime[2].s});
        res.insert_or_assign("digI1.reTime[2].ns", DumpEntry{digI1.reTime[2].ns});
        res.insert_or_assign("digI1.reTime[3].s", DumpEntry{digI1.reTime[3].s});
        res.insert_or_assign("digI1.reTime[3].ns", DumpEntry{digI1.reTime[3].ns});
        res.insert_or_assign("digI1.reTime[4].s", DumpEntry{digI1.reTime[4].s});
        res.insert_or_assign("digI1.reTime[4].ns", DumpEntry{digI1.reTime[4].ns});
        res.insert_or_assign("digI1.reTime[5].s", DumpEntry{digI1.reTime[5].s});
        res.insert_or_assign("digI1.reTime[5].ns", DumpEntry{digI1.reTime[5].ns});
        res.insert_or_assign("digI1.reTime[6].s", DumpEntry{digI1.reTime[6].s});
        res.insert_or_assign("digI1.reTime[6].ns", DumpEntry{digI1.reTime[6].ns});
        res.insert_or_assign("digI1.reTime[7].s", DumpEntry{digI1.reTime[7].s});
        res.insert_or_assign("digI1.reTime[7].ns", DumpEntry{digI1.reTime[7].ns});
        res.insert_or_assign("digI1.reTime[8].s", DumpEntry{digI1.reTime[8].s});
        res.insert_or_assign("digI1.reTime[8].ns", DumpEntry{digI1.reTime[8].ns});
        res.insert_or_assign("digI1.reTime[9].s", DumpEntry{digI1.reTime[9].s});
        res.insert_or_assign("digI1.reTime[9].ns", DumpEntry{digI1.reTime[9].ns});
        res.insert_or_assign("digI1.reTime[10].s", DumpEntry{digI1.reTime[10].s});
        res.insert_or_assign("digI1.reTime[10].ns", DumpEntry{digI1.reTime[10].ns});
        res.insert_or_assign("digI1.reTime[11].s", DumpEntry{digI1.reTime[11].s});
        res.insert_or_assign("digI1.reTime[11].ns", DumpEntry{digI1.reTime[11].ns});
        res.insert_or_assign("digI1.reTime[12].s", DumpEntry{digI1.reTime[12].s});
        res.insert_or_assign("digI1.reTime[12].ns", DumpEntry{digI1.reTime[12].ns});
        res.insert_or_assign("digI1.reTime[13].s", DumpEntry{digI1.reTime[13].s});
        res.insert_or_assign("digI1.reTime[13].ns", DumpEntry{digI1.reTime[13].ns});
        res.insert_or_assign("digI1.reTime[14].s", DumpEntry{digI1.reTime[14].s});
        res.insert_or_assign("digI1.reTime[14].ns", DumpEntry{digI1.reTime[14].ns});
        res.insert_or_assign("digI1.reTime[15].s", DumpEntry{digI1.reTime[15].s});
        res.insert_or_assign("digI1.reTime[15].ns", DumpEntry{digI1.reTime[15].ns});
        res.insert_or_assign("digI1.reTime[16].s", DumpEntry{digI1.reTime[16].s});
        res.insert_or_assign("digI1.reTime[16].ns", DumpEntry{digI1.reTime[16].ns});
        res.insert_or_assign("digI1.reTime[17].s", DumpEntry{digI1.reTime[17].s});
        res.insert_or_assign("digI1.reTime[17].ns", DumpEntry{digI1.reTime[17].ns});
        res.insert_or_assign("digI1.reTime[18].s", DumpEntry{digI1.reTime[18].s});
        res.insert_or_assign("digI1.reTime[18].ns", DumpEntry{digI1.reTime[18].ns});
        res.insert_or_assign("digI1.reTime[19].s", DumpEntry{digI1.reTime[19].s});
        res.insert_or_assign("digI1.reTime[19].ns", DumpEntry{digI1.reTime[19].ns});
        res.insert_or_assign("digI1.reTime[20].s", DumpEntry{digI1.reTime[20].s});
        res.insert_or_assign("digI1.reTime[20].ns", DumpEntry{digI1.reTime[20].ns});
        res.insert_or_assign("digI1.reTime[21].s", DumpEntry{digI1.reTime[21].s});
        res.insert_or_assign("digI1.reTime[21].ns", DumpEntry{digI1.reTime[21].ns});
        res.insert_or_assign("digI1.reTime[22].s", DumpEntry{digI1.reTime[22].s});
        res.insert_or_assign("digI1.reTime[22].ns", DumpEntry{digI1.reTime[22].ns});
        res.insert_or_assign("digI1.reTime[23].s", DumpEntry{digI1.reTime[23].s});
        res.insert_or_assign("digI1.reTime[23].ns", DumpEntry{digI1.reTime[23].ns});
        res.insert_or_assign("digI1.reTime[24].s", DumpEntry{digI1.reTime[24].s});
        res.insert_or_assign("digI1.reTime[24].ns", DumpEntry{digI1.reTime[24].ns});
        res.insert_or_assign("digI1.reTime[25].s", DumpEntry{digI1.reTime[25].s});
        res.insert_or_assign("digI1.reTime[25].ns", DumpEntry{digI1.reTime[25].ns});
        res.insert_or_assign("digI1.reTime[26].s", DumpEntry{digI1.reTime[26].s});
        res.insert_or_assign("digI1.reTime[26].ns", DumpEntry{digI1.reTime[26].ns});
        res.insert_or_assign("digI1.reTime[27].s", DumpEntry{digI1.reTime[27].s});
        res.insert_or_assign("digI1.reTime[27].ns", DumpEntry{digI1.reTime[27].ns});
        res.insert_or_assign("digI1.reTime[28].s", DumpEntry{digI1.reTime[28].s});
        res.insert_or_assign("digI1.reTime[28].ns", DumpEntry{digI1.reTime[28].ns});
        res.insert_or_assign("digI1.reTime[29].s", DumpEntry{digI1.reTime[29].s});
        res.insert_or_assign("digI1.reTime[29].ns", DumpEntry{digI1.reTime[29].ns});
        res.insert_or_assign("digI1.reTime[30].s", DumpEntry{digI1.reTime[30].s});
        res.insert_or_assign("digI1.reTime[30].ns", DumpEntry{digI1.reTime[30].ns});
        res.insert_or_assign("digI1.reTime[31].s", DumpEntry{digI1.reTime[31].s});
        res.insert_or_assign("digI1.reTime[31].ns", DumpEntry{digI1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigIndI::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigIndI::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigIndI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigIndI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::DigIndI`
    //!
    //! @param digIndI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under digIndI
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::DigIndI& digIndI)
    {
        DumpMap res{digIndI.base()};
        res.insert_or_assign("digIndI.staticParams", DumpEntry{digIndI.staticParams});
        res.insert_or_assign("digIndI.staticParams.invertIsEn", DumpEntry{digIndI.staticParams.invertIsEn});
        res.insert_or_assign("digIndI.staticParams.enableIsEn", DumpEntry{digIndI.staticParams.enableIsEn});
        res.insert_or_assign("digIndI.staticParams.latchIsEn", DumpEntry{digIndI.staticParams.latchIsEn});
        res.insert_or_assign("digIndI.staticParams.deglitchIsEn", DumpEntry{digIndI.staticParams.deglitchIsEn});
        res.insert_or_assign("digIndI.staticParams.reTimeIsEn", DumpEntry{digIndI.staticParams.reTimeIsEn});
        res.insert_or_assign("digIndI.staticParams.numChannels", DumpEntry{digIndI.staticParams.numChannels});
        res.insert_or_assign("digIndI.data", DumpEntry{digIndI.data});
        res.insert_or_assign("digIndI.dataChanged", DumpEntry{digIndI.dataChanged});
        res.insert_or_assign("digIndI.invert", DumpEntry{digIndI.invert});
        res.insert_or_assign("digIndI.enable", DumpEntry{digIndI.enable});
        res.insert_or_assign("digIndI.latch", DumpEntry{digIndI.latch});
        res.insert_or_assign("digIndI.rstLatch", DumpEntry{digIndI.rstLatch});
        res.insert_or_assign("digIndI.risingInterrupt", DumpEntry{digIndI.risingInterrupt});
        res.insert_or_assign("digIndI.fallingInterrupt", DumpEntry{digIndI.fallingInterrupt});
        res.insert_or_assign("digIndI.filterLengthSc[0].val", DumpEntry{digIndI.filterLengthSc[0].val});
        res.insert_or_assign("digIndI.filterLengthSc[1].val", DumpEntry{digIndI.filterLengthSc[1].val});
        res.insert_or_assign("digIndI.filterLengthSc[2].val", DumpEntry{digIndI.filterLengthSc[2].val});
        res.insert_or_assign("digIndI.filterLengthSc[3].val", DumpEntry{digIndI.filterLengthSc[3].val});
        res.insert_or_assign("digIndI.filterLengthSc[4].val", DumpEntry{digIndI.filterLengthSc[4].val});
        res.insert_or_assign("digIndI.filterLengthSc[5].val", DumpEntry{digIndI.filterLengthSc[5].val});
        res.insert_or_assign("digIndI.filterLengthSc[6].val", DumpEntry{digIndI.filterLengthSc[6].val});
        res.insert_or_assign("digIndI.filterLengthSc[7].val", DumpEntry{digIndI.filterLengthSc[7].val});
        res.insert_or_assign("digIndI.filterLengthSc[8].val", DumpEntry{digIndI.filterLengthSc[8].val});
        res.insert_or_assign("digIndI.filterLengthSc[9].val", DumpEntry{digIndI.filterLengthSc[9].val});
        res.insert_or_assign("digIndI.filterLengthSc[10].val", DumpEntry{digIndI.filterLengthSc[10].val});
        res.insert_or_assign("digIndI.filterLengthSc[11].val", DumpEntry{digIndI.filterLengthSc[11].val});
        res.insert_or_assign("digIndI.filterLengthSc[12].val", DumpEntry{digIndI.filterLengthSc[12].val});
        res.insert_or_assign("digIndI.filterLengthSc[13].val", DumpEntry{digIndI.filterLengthSc[13].val});
        res.insert_or_assign("digIndI.filterLengthSc[14].val", DumpEntry{digIndI.filterLengthSc[14].val});
        res.insert_or_assign("digIndI.filterLengthSc[15].val", DumpEntry{digIndI.filterLengthSc[15].val});
        res.insert_or_assign("digIndI.filterLengthSc[16].val", DumpEntry{digIndI.filterLengthSc[16].val});
        res.insert_or_assign("digIndI.filterLengthSc[17].val", DumpEntry{digIndI.filterLengthSc[17].val});
        res.insert_or_assign("digIndI.filterLengthSc[18].val", DumpEntry{digIndI.filterLengthSc[18].val});
        res.insert_or_assign("digIndI.filterLengthSc[19].val", DumpEntry{digIndI.filterLengthSc[19].val});
        res.insert_or_assign("digIndI.filterLengthSc[20].val", DumpEntry{digIndI.filterLengthSc[20].val});
        res.insert_or_assign("digIndI.filterLengthSc[21].val", DumpEntry{digIndI.filterLengthSc[21].val});
        res.insert_or_assign("digIndI.filterLengthSc[22].val", DumpEntry{digIndI.filterLengthSc[22].val});
        res.insert_or_assign("digIndI.filterLengthSc[23].val", DumpEntry{digIndI.filterLengthSc[23].val});
        res.insert_or_assign("digIndI.filterLengthSc[24].val", DumpEntry{digIndI.filterLengthSc[24].val});
        res.insert_or_assign("digIndI.filterLengthSc[25].val", DumpEntry{digIndI.filterLengthSc[25].val});
        res.insert_or_assign("digIndI.filterLengthSc[26].val", DumpEntry{digIndI.filterLengthSc[26].val});
        res.insert_or_assign("digIndI.filterLengthSc[27].val", DumpEntry{digIndI.filterLengthSc[27].val});
        res.insert_or_assign("digIndI.filterLengthSc[28].val", DumpEntry{digIndI.filterLengthSc[28].val});
        res.insert_or_assign("digIndI.filterLengthSc[29].val", DumpEntry{digIndI.filterLengthSc[29].val});
        res.insert_or_assign("digIndI.filterLengthSc[30].val", DumpEntry{digIndI.filterLengthSc[30].val});
        res.insert_or_assign("digIndI.filterLengthSc[31].val", DumpEntry{digIndI.filterLengthSc[31].val});
        res.insert_or_assign("digIndI.reTime[0].s", DumpEntry{digIndI.reTime[0].s});
        res.insert_or_assign("digIndI.reTime[0].ns", DumpEntry{digIndI.reTime[0].ns});
        res.insert_or_assign("digIndI.reTime[1].s", DumpEntry{digIndI.reTime[1].s});
        res.insert_or_assign("digIndI.reTime[1].ns", DumpEntry{digIndI.reTime[1].ns});
        res.insert_or_assign("digIndI.reTime[2].s", DumpEntry{digIndI.reTime[2].s});
        res.insert_or_assign("digIndI.reTime[2].ns", DumpEntry{digIndI.reTime[2].ns});
        res.insert_or_assign("digIndI.reTime[3].s", DumpEntry{digIndI.reTime[3].s});
        res.insert_or_assign("digIndI.reTime[3].ns", DumpEntry{digIndI.reTime[3].ns});
        res.insert_or_assign("digIndI.reTime[4].s", DumpEntry{digIndI.reTime[4].s});
        res.insert_or_assign("digIndI.reTime[4].ns", DumpEntry{digIndI.reTime[4].ns});
        res.insert_or_assign("digIndI.reTime[5].s", DumpEntry{digIndI.reTime[5].s});
        res.insert_or_assign("digIndI.reTime[5].ns", DumpEntry{digIndI.reTime[5].ns});
        res.insert_or_assign("digIndI.reTime[6].s", DumpEntry{digIndI.reTime[6].s});
        res.insert_or_assign("digIndI.reTime[6].ns", DumpEntry{digIndI.reTime[6].ns});
        res.insert_or_assign("digIndI.reTime[7].s", DumpEntry{digIndI.reTime[7].s});
        res.insert_or_assign("digIndI.reTime[7].ns", DumpEntry{digIndI.reTime[7].ns});
        res.insert_or_assign("digIndI.reTime[8].s", DumpEntry{digIndI.reTime[8].s});
        res.insert_or_assign("digIndI.reTime[8].ns", DumpEntry{digIndI.reTime[8].ns});
        res.insert_or_assign("digIndI.reTime[9].s", DumpEntry{digIndI.reTime[9].s});
        res.insert_or_assign("digIndI.reTime[9].ns", DumpEntry{digIndI.reTime[9].ns});
        res.insert_or_assign("digIndI.reTime[10].s", DumpEntry{digIndI.reTime[10].s});
        res.insert_or_assign("digIndI.reTime[10].ns", DumpEntry{digIndI.reTime[10].ns});
        res.insert_or_assign("digIndI.reTime[11].s", DumpEntry{digIndI.reTime[11].s});
        res.insert_or_assign("digIndI.reTime[11].ns", DumpEntry{digIndI.reTime[11].ns});
        res.insert_or_assign("digIndI.reTime[12].s", DumpEntry{digIndI.reTime[12].s});
        res.insert_or_assign("digIndI.reTime[12].ns", DumpEntry{digIndI.reTime[12].ns});
        res.insert_or_assign("digIndI.reTime[13].s", DumpEntry{digIndI.reTime[13].s});
        res.insert_or_assign("digIndI.reTime[13].ns", DumpEntry{digIndI.reTime[13].ns});
        res.insert_or_assign("digIndI.reTime[14].s", DumpEntry{digIndI.reTime[14].s});
        res.insert_or_assign("digIndI.reTime[14].ns", DumpEntry{digIndI.reTime[14].ns});
        res.insert_or_assign("digIndI.reTime[15].s", DumpEntry{digIndI.reTime[15].s});
        res.insert_or_assign("digIndI.reTime[15].ns", DumpEntry{digIndI.reTime[15].ns});
        res.insert_or_assign("digIndI.reTime[16].s", DumpEntry{digIndI.reTime[16].s});
        res.insert_or_assign("digIndI.reTime[16].ns", DumpEntry{digIndI.reTime[16].ns});
        res.insert_or_assign("digIndI.reTime[17].s", DumpEntry{digIndI.reTime[17].s});
        res.insert_or_assign("digIndI.reTime[17].ns", DumpEntry{digIndI.reTime[17].ns});
        res.insert_or_assign("digIndI.reTime[18].s", DumpEntry{digIndI.reTime[18].s});
        res.insert_or_assign("digIndI.reTime[18].ns", DumpEntry{digIndI.reTime[18].ns});
        res.insert_or_assign("digIndI.reTime[19].s", DumpEntry{digIndI.reTime[19].s});
        res.insert_or_assign("digIndI.reTime[19].ns", DumpEntry{digIndI.reTime[19].ns});
        res.insert_or_assign("digIndI.reTime[20].s", DumpEntry{digIndI.reTime[20].s});
        res.insert_or_assign("digIndI.reTime[20].ns", DumpEntry{digIndI.reTime[20].ns});
        res.insert_or_assign("digIndI.reTime[21].s", DumpEntry{digIndI.reTime[21].s});
        res.insert_or_assign("digIndI.reTime[21].ns", DumpEntry{digIndI.reTime[21].ns});
        res.insert_or_assign("digIndI.reTime[22].s", DumpEntry{digIndI.reTime[22].s});
        res.insert_or_assign("digIndI.reTime[22].ns", DumpEntry{digIndI.reTime[22].ns});
        res.insert_or_assign("digIndI.reTime[23].s", DumpEntry{digIndI.reTime[23].s});
        res.insert_or_assign("digIndI.reTime[23].ns", DumpEntry{digIndI.reTime[23].ns});
        res.insert_or_assign("digIndI.reTime[24].s", DumpEntry{digIndI.reTime[24].s});
        res.insert_or_assign("digIndI.reTime[24].ns", DumpEntry{digIndI.reTime[24].ns});
        res.insert_or_assign("digIndI.reTime[25].s", DumpEntry{digIndI.reTime[25].s});
        res.insert_or_assign("digIndI.reTime[25].ns", DumpEntry{digIndI.reTime[25].ns});
        res.insert_or_assign("digIndI.reTime[26].s", DumpEntry{digIndI.reTime[26].s});
        res.insert_or_assign("digIndI.reTime[26].ns", DumpEntry{digIndI.reTime[26].ns});
        res.insert_or_assign("digIndI.reTime[27].s", DumpEntry{digIndI.reTime[27].s});
        res.insert_or_assign("digIndI.reTime[27].ns", DumpEntry{digIndI.reTime[27].ns});
        res.insert_or_assign("digIndI.reTime[28].s", DumpEntry{digIndI.reTime[28].s});
        res.insert_or_assign("digIndI.reTime[28].ns", DumpEntry{digIndI.reTime[28].ns});
        res.insert_or_assign("digIndI.reTime[29].s", DumpEntry{digIndI.reTime[29].s});
        res.insert_or_assign("digIndI.reTime[29].ns", DumpEntry{digIndI.reTime[29].ns});
        res.insert_or_assign("digIndI.reTime[30].s", DumpEntry{digIndI.reTime[30].s});
        res.insert_or_assign("digIndI.reTime[30].ns", DumpEntry{digIndI.reTime[30].ns});
        res.insert_or_assign("digIndI.reTime[31].s", DumpEntry{digIndI.reTime[31].s});
        res.insert_or_assign("digIndI.reTime[31].ns", DumpEntry{digIndI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::ContactI::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::ContactI::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::ContactI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::ContactI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::ContactI`
    //!
    //! @param contactI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under contactI
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::ContactI& contactI)
    {
        DumpMap res{contactI.base()};
        res.insert_or_assign("contactI.staticParams", DumpEntry{contactI.staticParams});
        res.insert_or_assign("contactI.staticParams.invertIsEn", DumpEntry{contactI.staticParams.invertIsEn});
        res.insert_or_assign("contactI.staticParams.enableIsEn", DumpEntry{contactI.staticParams.enableIsEn});
        res.insert_or_assign("contactI.staticParams.latchIsEn", DumpEntry{contactI.staticParams.latchIsEn});
        res.insert_or_assign("contactI.staticParams.deglitchIsEn", DumpEntry{contactI.staticParams.deglitchIsEn});
        res.insert_or_assign("contactI.staticParams.reTimeIsEn", DumpEntry{contactI.staticParams.reTimeIsEn});
        res.insert_or_assign("contactI.staticParams.numChannels", DumpEntry{contactI.staticParams.numChannels});
        res.insert_or_assign("contactI.data", DumpEntry{contactI.data});
        res.insert_or_assign("contactI.dataChanged", DumpEntry{contactI.dataChanged});
        res.insert_or_assign("contactI.invert", DumpEntry{contactI.invert});
        res.insert_or_assign("contactI.enable", DumpEntry{contactI.enable});
        res.insert_or_assign("contactI.latch", DumpEntry{contactI.latch});
        res.insert_or_assign("contactI.rstLatch", DumpEntry{contactI.rstLatch});
        res.insert_or_assign("contactI.risingInterrupt", DumpEntry{contactI.risingInterrupt});
        res.insert_or_assign("contactI.fallingInterrupt", DumpEntry{contactI.fallingInterrupt});
        res.insert_or_assign("contactI.filterLengthSc[0].val", DumpEntry{contactI.filterLengthSc[0].val});
        res.insert_or_assign("contactI.filterLengthSc[1].val", DumpEntry{contactI.filterLengthSc[1].val});
        res.insert_or_assign("contactI.filterLengthSc[2].val", DumpEntry{contactI.filterLengthSc[2].val});
        res.insert_or_assign("contactI.filterLengthSc[3].val", DumpEntry{contactI.filterLengthSc[3].val});
        res.insert_or_assign("contactI.filterLengthSc[4].val", DumpEntry{contactI.filterLengthSc[4].val});
        res.insert_or_assign("contactI.filterLengthSc[5].val", DumpEntry{contactI.filterLengthSc[5].val});
        res.insert_or_assign("contactI.filterLengthSc[6].val", DumpEntry{contactI.filterLengthSc[6].val});
        res.insert_or_assign("contactI.filterLengthSc[7].val", DumpEntry{contactI.filterLengthSc[7].val});
        res.insert_or_assign("contactI.filterLengthSc[8].val", DumpEntry{contactI.filterLengthSc[8].val});
        res.insert_or_assign("contactI.filterLengthSc[9].val", DumpEntry{contactI.filterLengthSc[9].val});
        res.insert_or_assign("contactI.filterLengthSc[10].val", DumpEntry{contactI.filterLengthSc[10].val});
        res.insert_or_assign("contactI.filterLengthSc[11].val", DumpEntry{contactI.filterLengthSc[11].val});
        res.insert_or_assign("contactI.filterLengthSc[12].val", DumpEntry{contactI.filterLengthSc[12].val});
        res.insert_or_assign("contactI.filterLengthSc[13].val", DumpEntry{contactI.filterLengthSc[13].val});
        res.insert_or_assign("contactI.filterLengthSc[14].val", DumpEntry{contactI.filterLengthSc[14].val});
        res.insert_or_assign("contactI.filterLengthSc[15].val", DumpEntry{contactI.filterLengthSc[15].val});
        res.insert_or_assign("contactI.filterLengthSc[16].val", DumpEntry{contactI.filterLengthSc[16].val});
        res.insert_or_assign("contactI.filterLengthSc[17].val", DumpEntry{contactI.filterLengthSc[17].val});
        res.insert_or_assign("contactI.filterLengthSc[18].val", DumpEntry{contactI.filterLengthSc[18].val});
        res.insert_or_assign("contactI.filterLengthSc[19].val", DumpEntry{contactI.filterLengthSc[19].val});
        res.insert_or_assign("contactI.filterLengthSc[20].val", DumpEntry{contactI.filterLengthSc[20].val});
        res.insert_or_assign("contactI.filterLengthSc[21].val", DumpEntry{contactI.filterLengthSc[21].val});
        res.insert_or_assign("contactI.filterLengthSc[22].val", DumpEntry{contactI.filterLengthSc[22].val});
        res.insert_or_assign("contactI.filterLengthSc[23].val", DumpEntry{contactI.filterLengthSc[23].val});
        res.insert_or_assign("contactI.filterLengthSc[24].val", DumpEntry{contactI.filterLengthSc[24].val});
        res.insert_or_assign("contactI.filterLengthSc[25].val", DumpEntry{contactI.filterLengthSc[25].val});
        res.insert_or_assign("contactI.filterLengthSc[26].val", DumpEntry{contactI.filterLengthSc[26].val});
        res.insert_or_assign("contactI.filterLengthSc[27].val", DumpEntry{contactI.filterLengthSc[27].val});
        res.insert_or_assign("contactI.filterLengthSc[28].val", DumpEntry{contactI.filterLengthSc[28].val});
        res.insert_or_assign("contactI.filterLengthSc[29].val", DumpEntry{contactI.filterLengthSc[29].val});
        res.insert_or_assign("contactI.filterLengthSc[30].val", DumpEntry{contactI.filterLengthSc[30].val});
        res.insert_or_assign("contactI.filterLengthSc[31].val", DumpEntry{contactI.filterLengthSc[31].val});
        res.insert_or_assign("contactI.reTime[0].s", DumpEntry{contactI.reTime[0].s});
        res.insert_or_assign("contactI.reTime[0].ns", DumpEntry{contactI.reTime[0].ns});
        res.insert_or_assign("contactI.reTime[1].s", DumpEntry{contactI.reTime[1].s});
        res.insert_or_assign("contactI.reTime[1].ns", DumpEntry{contactI.reTime[1].ns});
        res.insert_or_assign("contactI.reTime[2].s", DumpEntry{contactI.reTime[2].s});
        res.insert_or_assign("contactI.reTime[2].ns", DumpEntry{contactI.reTime[2].ns});
        res.insert_or_assign("contactI.reTime[3].s", DumpEntry{contactI.reTime[3].s});
        res.insert_or_assign("contactI.reTime[3].ns", DumpEntry{contactI.reTime[3].ns});
        res.insert_or_assign("contactI.reTime[4].s", DumpEntry{contactI.reTime[4].s});
        res.insert_or_assign("contactI.reTime[4].ns", DumpEntry{contactI.reTime[4].ns});
        res.insert_or_assign("contactI.reTime[5].s", DumpEntry{contactI.reTime[5].s});
        res.insert_or_assign("contactI.reTime[5].ns", DumpEntry{contactI.reTime[5].ns});
        res.insert_or_assign("contactI.reTime[6].s", DumpEntry{contactI.reTime[6].s});
        res.insert_or_assign("contactI.reTime[6].ns", DumpEntry{contactI.reTime[6].ns});
        res.insert_or_assign("contactI.reTime[7].s", DumpEntry{contactI.reTime[7].s});
        res.insert_or_assign("contactI.reTime[7].ns", DumpEntry{contactI.reTime[7].ns});
        res.insert_or_assign("contactI.reTime[8].s", DumpEntry{contactI.reTime[8].s});
        res.insert_or_assign("contactI.reTime[8].ns", DumpEntry{contactI.reTime[8].ns});
        res.insert_or_assign("contactI.reTime[9].s", DumpEntry{contactI.reTime[9].s});
        res.insert_or_assign("contactI.reTime[9].ns", DumpEntry{contactI.reTime[9].ns});
        res.insert_or_assign("contactI.reTime[10].s", DumpEntry{contactI.reTime[10].s});
        res.insert_or_assign("contactI.reTime[10].ns", DumpEntry{contactI.reTime[10].ns});
        res.insert_or_assign("contactI.reTime[11].s", DumpEntry{contactI.reTime[11].s});
        res.insert_or_assign("contactI.reTime[11].ns", DumpEntry{contactI.reTime[11].ns});
        res.insert_or_assign("contactI.reTime[12].s", DumpEntry{contactI.reTime[12].s});
        res.insert_or_assign("contactI.reTime[12].ns", DumpEntry{contactI.reTime[12].ns});
        res.insert_or_assign("contactI.reTime[13].s", DumpEntry{contactI.reTime[13].s});
        res.insert_or_assign("contactI.reTime[13].ns", DumpEntry{contactI.reTime[13].ns});
        res.insert_or_assign("contactI.reTime[14].s", DumpEntry{contactI.reTime[14].s});
        res.insert_or_assign("contactI.reTime[14].ns", DumpEntry{contactI.reTime[14].ns});
        res.insert_or_assign("contactI.reTime[15].s", DumpEntry{contactI.reTime[15].s});
        res.insert_or_assign("contactI.reTime[15].ns", DumpEntry{contactI.reTime[15].ns});
        res.insert_or_assign("contactI.reTime[16].s", DumpEntry{contactI.reTime[16].s});
        res.insert_or_assign("contactI.reTime[16].ns", DumpEntry{contactI.reTime[16].ns});
        res.insert_or_assign("contactI.reTime[17].s", DumpEntry{contactI.reTime[17].s});
        res.insert_or_assign("contactI.reTime[17].ns", DumpEntry{contactI.reTime[17].ns});
        res.insert_or_assign("contactI.reTime[18].s", DumpEntry{contactI.reTime[18].s});
        res.insert_or_assign("contactI.reTime[18].ns", DumpEntry{contactI.reTime[18].ns});
        res.insert_or_assign("contactI.reTime[19].s", DumpEntry{contactI.reTime[19].s});
        res.insert_or_assign("contactI.reTime[19].ns", DumpEntry{contactI.reTime[19].ns});
        res.insert_or_assign("contactI.reTime[20].s", DumpEntry{contactI.reTime[20].s});
        res.insert_or_assign("contactI.reTime[20].ns", DumpEntry{contactI.reTime[20].ns});
        res.insert_or_assign("contactI.reTime[21].s", DumpEntry{contactI.reTime[21].s});
        res.insert_or_assign("contactI.reTime[21].ns", DumpEntry{contactI.reTime[21].ns});
        res.insert_or_assign("contactI.reTime[22].s", DumpEntry{contactI.reTime[22].s});
        res.insert_or_assign("contactI.reTime[22].ns", DumpEntry{contactI.reTime[22].ns});
        res.insert_or_assign("contactI.reTime[23].s", DumpEntry{contactI.reTime[23].s});
        res.insert_or_assign("contactI.reTime[23].ns", DumpEntry{contactI.reTime[23].ns});
        res.insert_or_assign("contactI.reTime[24].s", DumpEntry{contactI.reTime[24].s});
        res.insert_or_assign("contactI.reTime[24].ns", DumpEntry{contactI.reTime[24].ns});
        res.insert_or_assign("contactI.reTime[25].s", DumpEntry{contactI.reTime[25].s});
        res.insert_or_assign("contactI.reTime[25].ns", DumpEntry{contactI.reTime[25].ns});
        res.insert_or_assign("contactI.reTime[26].s", DumpEntry{contactI.reTime[26].s});
        res.insert_or_assign("contactI.reTime[26].ns", DumpEntry{contactI.reTime[26].ns});
        res.insert_or_assign("contactI.reTime[27].s", DumpEntry{contactI.reTime[27].s});
        res.insert_or_assign("contactI.reTime[27].ns", DumpEntry{contactI.reTime[27].ns});
        res.insert_or_assign("contactI.reTime[28].s", DumpEntry{contactI.reTime[28].s});
        res.insert_or_assign("contactI.reTime[28].ns", DumpEntry{contactI.reTime[28].ns});
        res.insert_or_assign("contactI.reTime[29].s", DumpEntry{contactI.reTime[29].s});
        res.insert_or_assign("contactI.reTime[29].ns", DumpEntry{contactI.reTime[29].ns});
        res.insert_or_assign("contactI.reTime[30].s", DumpEntry{contactI.reTime[30].s});
        res.insert_or_assign("contactI.reTime[30].ns", DumpEntry{contactI.reTime[30].ns});
        res.insert_or_assign("contactI.reTime[31].s", DumpEntry{contactI.reTime[31].s});
        res.insert_or_assign("contactI.reTime[31].ns", DumpEntry{contactI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::OpticalI::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::OpticalI::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::OpticalI::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::OpticalI::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::OpticalI`
    //!
    //! @param opticalI A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under opticalI
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::OpticalI& opticalI)
    {
        DumpMap res{opticalI.base()};
        res.insert_or_assign("opticalI.staticParams", DumpEntry{opticalI.staticParams});
        res.insert_or_assign("opticalI.staticParams.invertIsEn", DumpEntry{opticalI.staticParams.invertIsEn});
        res.insert_or_assign("opticalI.staticParams.enableIsEn", DumpEntry{opticalI.staticParams.enableIsEn});
        res.insert_or_assign("opticalI.staticParams.latchIsEn", DumpEntry{opticalI.staticParams.latchIsEn});
        res.insert_or_assign("opticalI.staticParams.deglitchIsEn", DumpEntry{opticalI.staticParams.deglitchIsEn});
        res.insert_or_assign("opticalI.staticParams.reTimeIsEn", DumpEntry{opticalI.staticParams.reTimeIsEn});
        res.insert_or_assign("opticalI.staticParams.numChannels", DumpEntry{opticalI.staticParams.numChannels});
        res.insert_or_assign("opticalI.data", DumpEntry{opticalI.data});
        res.insert_or_assign("opticalI.dataChanged", DumpEntry{opticalI.dataChanged});
        res.insert_or_assign("opticalI.invert", DumpEntry{opticalI.invert});
        res.insert_or_assign("opticalI.enable", DumpEntry{opticalI.enable});
        res.insert_or_assign("opticalI.latch", DumpEntry{opticalI.latch});
        res.insert_or_assign("opticalI.rstLatch", DumpEntry{opticalI.rstLatch});
        res.insert_or_assign("opticalI.risingInterrupt", DumpEntry{opticalI.risingInterrupt});
        res.insert_or_assign("opticalI.fallingInterrupt", DumpEntry{opticalI.fallingInterrupt});
        res.insert_or_assign("opticalI.filterLengthSc[0].val", DumpEntry{opticalI.filterLengthSc[0].val});
        res.insert_or_assign("opticalI.filterLengthSc[1].val", DumpEntry{opticalI.filterLengthSc[1].val});
        res.insert_or_assign("opticalI.filterLengthSc[2].val", DumpEntry{opticalI.filterLengthSc[2].val});
        res.insert_or_assign("opticalI.filterLengthSc[3].val", DumpEntry{opticalI.filterLengthSc[3].val});
        res.insert_or_assign("opticalI.filterLengthSc[4].val", DumpEntry{opticalI.filterLengthSc[4].val});
        res.insert_or_assign("opticalI.filterLengthSc[5].val", DumpEntry{opticalI.filterLengthSc[5].val});
        res.insert_or_assign("opticalI.filterLengthSc[6].val", DumpEntry{opticalI.filterLengthSc[6].val});
        res.insert_or_assign("opticalI.filterLengthSc[7].val", DumpEntry{opticalI.filterLengthSc[7].val});
        res.insert_or_assign("opticalI.filterLengthSc[8].val", DumpEntry{opticalI.filterLengthSc[8].val});
        res.insert_or_assign("opticalI.filterLengthSc[9].val", DumpEntry{opticalI.filterLengthSc[9].val});
        res.insert_or_assign("opticalI.filterLengthSc[10].val", DumpEntry{opticalI.filterLengthSc[10].val});
        res.insert_or_assign("opticalI.filterLengthSc[11].val", DumpEntry{opticalI.filterLengthSc[11].val});
        res.insert_or_assign("opticalI.filterLengthSc[12].val", DumpEntry{opticalI.filterLengthSc[12].val});
        res.insert_or_assign("opticalI.filterLengthSc[13].val", DumpEntry{opticalI.filterLengthSc[13].val});
        res.insert_or_assign("opticalI.filterLengthSc[14].val", DumpEntry{opticalI.filterLengthSc[14].val});
        res.insert_or_assign("opticalI.filterLengthSc[15].val", DumpEntry{opticalI.filterLengthSc[15].val});
        res.insert_or_assign("opticalI.filterLengthSc[16].val", DumpEntry{opticalI.filterLengthSc[16].val});
        res.insert_or_assign("opticalI.filterLengthSc[17].val", DumpEntry{opticalI.filterLengthSc[17].val});
        res.insert_or_assign("opticalI.filterLengthSc[18].val", DumpEntry{opticalI.filterLengthSc[18].val});
        res.insert_or_assign("opticalI.filterLengthSc[19].val", DumpEntry{opticalI.filterLengthSc[19].val});
        res.insert_or_assign("opticalI.filterLengthSc[20].val", DumpEntry{opticalI.filterLengthSc[20].val});
        res.insert_or_assign("opticalI.filterLengthSc[21].val", DumpEntry{opticalI.filterLengthSc[21].val});
        res.insert_or_assign("opticalI.filterLengthSc[22].val", DumpEntry{opticalI.filterLengthSc[22].val});
        res.insert_or_assign("opticalI.filterLengthSc[23].val", DumpEntry{opticalI.filterLengthSc[23].val});
        res.insert_or_assign("opticalI.filterLengthSc[24].val", DumpEntry{opticalI.filterLengthSc[24].val});
        res.insert_or_assign("opticalI.filterLengthSc[25].val", DumpEntry{opticalI.filterLengthSc[25].val});
        res.insert_or_assign("opticalI.filterLengthSc[26].val", DumpEntry{opticalI.filterLengthSc[26].val});
        res.insert_or_assign("opticalI.filterLengthSc[27].val", DumpEntry{opticalI.filterLengthSc[27].val});
        res.insert_or_assign("opticalI.filterLengthSc[28].val", DumpEntry{opticalI.filterLengthSc[28].val});
        res.insert_or_assign("opticalI.filterLengthSc[29].val", DumpEntry{opticalI.filterLengthSc[29].val});
        res.insert_or_assign("opticalI.filterLengthSc[30].val", DumpEntry{opticalI.filterLengthSc[30].val});
        res.insert_or_assign("opticalI.filterLengthSc[31].val", DumpEntry{opticalI.filterLengthSc[31].val});
        res.insert_or_assign("opticalI.reTime[0].s", DumpEntry{opticalI.reTime[0].s});
        res.insert_or_assign("opticalI.reTime[0].ns", DumpEntry{opticalI.reTime[0].ns});
        res.insert_or_assign("opticalI.reTime[1].s", DumpEntry{opticalI.reTime[1].s});
        res.insert_or_assign("opticalI.reTime[1].ns", DumpEntry{opticalI.reTime[1].ns});
        res.insert_or_assign("opticalI.reTime[2].s", DumpEntry{opticalI.reTime[2].s});
        res.insert_or_assign("opticalI.reTime[2].ns", DumpEntry{opticalI.reTime[2].ns});
        res.insert_or_assign("opticalI.reTime[3].s", DumpEntry{opticalI.reTime[3].s});
        res.insert_or_assign("opticalI.reTime[3].ns", DumpEntry{opticalI.reTime[3].ns});
        res.insert_or_assign("opticalI.reTime[4].s", DumpEntry{opticalI.reTime[4].s});
        res.insert_or_assign("opticalI.reTime[4].ns", DumpEntry{opticalI.reTime[4].ns});
        res.insert_or_assign("opticalI.reTime[5].s", DumpEntry{opticalI.reTime[5].s});
        res.insert_or_assign("opticalI.reTime[5].ns", DumpEntry{opticalI.reTime[5].ns});
        res.insert_or_assign("opticalI.reTime[6].s", DumpEntry{opticalI.reTime[6].s});
        res.insert_or_assign("opticalI.reTime[6].ns", DumpEntry{opticalI.reTime[6].ns});
        res.insert_or_assign("opticalI.reTime[7].s", DumpEntry{opticalI.reTime[7].s});
        res.insert_or_assign("opticalI.reTime[7].ns", DumpEntry{opticalI.reTime[7].ns});
        res.insert_or_assign("opticalI.reTime[8].s", DumpEntry{opticalI.reTime[8].s});
        res.insert_or_assign("opticalI.reTime[8].ns", DumpEntry{opticalI.reTime[8].ns});
        res.insert_or_assign("opticalI.reTime[9].s", DumpEntry{opticalI.reTime[9].s});
        res.insert_or_assign("opticalI.reTime[9].ns", DumpEntry{opticalI.reTime[9].ns});
        res.insert_or_assign("opticalI.reTime[10].s", DumpEntry{opticalI.reTime[10].s});
        res.insert_or_assign("opticalI.reTime[10].ns", DumpEntry{opticalI.reTime[10].ns});
        res.insert_or_assign("opticalI.reTime[11].s", DumpEntry{opticalI.reTime[11].s});
        res.insert_or_assign("opticalI.reTime[11].ns", DumpEntry{opticalI.reTime[11].ns});
        res.insert_or_assign("opticalI.reTime[12].s", DumpEntry{opticalI.reTime[12].s});
        res.insert_or_assign("opticalI.reTime[12].ns", DumpEntry{opticalI.reTime[12].ns});
        res.insert_or_assign("opticalI.reTime[13].s", DumpEntry{opticalI.reTime[13].s});
        res.insert_or_assign("opticalI.reTime[13].ns", DumpEntry{opticalI.reTime[13].ns});
        res.insert_or_assign("opticalI.reTime[14].s", DumpEntry{opticalI.reTime[14].s});
        res.insert_or_assign("opticalI.reTime[14].ns", DumpEntry{opticalI.reTime[14].ns});
        res.insert_or_assign("opticalI.reTime[15].s", DumpEntry{opticalI.reTime[15].s});
        res.insert_or_assign("opticalI.reTime[15].ns", DumpEntry{opticalI.reTime[15].ns});
        res.insert_or_assign("opticalI.reTime[16].s", DumpEntry{opticalI.reTime[16].s});
        res.insert_or_assign("opticalI.reTime[16].ns", DumpEntry{opticalI.reTime[16].ns});
        res.insert_or_assign("opticalI.reTime[17].s", DumpEntry{opticalI.reTime[17].s});
        res.insert_or_assign("opticalI.reTime[17].ns", DumpEntry{opticalI.reTime[17].ns});
        res.insert_or_assign("opticalI.reTime[18].s", DumpEntry{opticalI.reTime[18].s});
        res.insert_or_assign("opticalI.reTime[18].ns", DumpEntry{opticalI.reTime[18].ns});
        res.insert_or_assign("opticalI.reTime[19].s", DumpEntry{opticalI.reTime[19].s});
        res.insert_or_assign("opticalI.reTime[19].ns", DumpEntry{opticalI.reTime[19].ns});
        res.insert_or_assign("opticalI.reTime[20].s", DumpEntry{opticalI.reTime[20].s});
        res.insert_or_assign("opticalI.reTime[20].ns", DumpEntry{opticalI.reTime[20].ns});
        res.insert_or_assign("opticalI.reTime[21].s", DumpEntry{opticalI.reTime[21].s});
        res.insert_or_assign("opticalI.reTime[21].ns", DumpEntry{opticalI.reTime[21].ns});
        res.insert_or_assign("opticalI.reTime[22].s", DumpEntry{opticalI.reTime[22].s});
        res.insert_or_assign("opticalI.reTime[22].ns", DumpEntry{opticalI.reTime[22].ns});
        res.insert_or_assign("opticalI.reTime[23].s", DumpEntry{opticalI.reTime[23].s});
        res.insert_or_assign("opticalI.reTime[23].ns", DumpEntry{opticalI.reTime[23].ns});
        res.insert_or_assign("opticalI.reTime[24].s", DumpEntry{opticalI.reTime[24].s});
        res.insert_or_assign("opticalI.reTime[24].ns", DumpEntry{opticalI.reTime[24].ns});
        res.insert_or_assign("opticalI.reTime[25].s", DumpEntry{opticalI.reTime[25].s});
        res.insert_or_assign("opticalI.reTime[25].ns", DumpEntry{opticalI.reTime[25].ns});
        res.insert_or_assign("opticalI.reTime[26].s", DumpEntry{opticalI.reTime[26].s});
        res.insert_or_assign("opticalI.reTime[26].ns", DumpEntry{opticalI.reTime[26].ns});
        res.insert_or_assign("opticalI.reTime[27].s", DumpEntry{opticalI.reTime[27].s});
        res.insert_or_assign("opticalI.reTime[27].ns", DumpEntry{opticalI.reTime[27].ns});
        res.insert_or_assign("opticalI.reTime[28].s", DumpEntry{opticalI.reTime[28].s});
        res.insert_or_assign("opticalI.reTime[28].ns", DumpEntry{opticalI.reTime[28].ns});
        res.insert_or_assign("opticalI.reTime[29].s", DumpEntry{opticalI.reTime[29].s});
        res.insert_or_assign("opticalI.reTime[29].ns", DumpEntry{opticalI.reTime[29].ns});
        res.insert_or_assign("opticalI.reTime[30].s", DumpEntry{opticalI.reTime[30].s});
        res.insert_or_assign("opticalI.reTime[30].ns", DumpEntry{opticalI.reTime[30].ns});
        res.insert_or_assign("opticalI.reTime[31].s", DumpEntry{opticalI.reTime[31].s});
        res.insert_or_assign("opticalI.reTime[31].ns", DumpEntry{opticalI.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim0::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim0::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim0`
    //!
    //! @param minMaxLim0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under minMaxLim0
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim0& minMaxLim0)
    {
        DumpMap res{minMaxLim0.base()};
        res.insert_or_assign("minMaxLim0.staticParams", DumpEntry{minMaxLim0.staticParams});
        res.insert_or_assign("minMaxLim0.staticParams.invertIsEn", DumpEntry{minMaxLim0.staticParams.invertIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.enableIsEn", DumpEntry{minMaxLim0.staticParams.enableIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.latchIsEn", DumpEntry{minMaxLim0.staticParams.latchIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.deglitchIsEn", DumpEntry{minMaxLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.reTimeIsEn", DumpEntry{minMaxLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("minMaxLim0.staticParams.numChannels", DumpEntry{minMaxLim0.staticParams.numChannels});
        res.insert_or_assign("minMaxLim0.data", DumpEntry{minMaxLim0.data});
        res.insert_or_assign("minMaxLim0.dataChanged", DumpEntry{minMaxLim0.dataChanged});
        res.insert_or_assign("minMaxLim0.invert", DumpEntry{minMaxLim0.invert});
        res.insert_or_assign("minMaxLim0.enable", DumpEntry{minMaxLim0.enable});
        res.insert_or_assign("minMaxLim0.latch", DumpEntry{minMaxLim0.latch});
        res.insert_or_assign("minMaxLim0.rstLatch", DumpEntry{minMaxLim0.rstLatch});
        res.insert_or_assign("minMaxLim0.risingInterrupt", DumpEntry{minMaxLim0.risingInterrupt});
        res.insert_or_assign("minMaxLim0.fallingInterrupt", DumpEntry{minMaxLim0.fallingInterrupt});
        res.insert_or_assign("minMaxLim0.filterLengthSc[0].val", DumpEntry{minMaxLim0.filterLengthSc[0].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[1].val", DumpEntry{minMaxLim0.filterLengthSc[1].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[2].val", DumpEntry{minMaxLim0.filterLengthSc[2].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[3].val", DumpEntry{minMaxLim0.filterLengthSc[3].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[4].val", DumpEntry{minMaxLim0.filterLengthSc[4].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[5].val", DumpEntry{minMaxLim0.filterLengthSc[5].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[6].val", DumpEntry{minMaxLim0.filterLengthSc[6].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[7].val", DumpEntry{minMaxLim0.filterLengthSc[7].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[8].val", DumpEntry{minMaxLim0.filterLengthSc[8].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[9].val", DumpEntry{minMaxLim0.filterLengthSc[9].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[10].val", DumpEntry{minMaxLim0.filterLengthSc[10].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[11].val", DumpEntry{minMaxLim0.filterLengthSc[11].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[12].val", DumpEntry{minMaxLim0.filterLengthSc[12].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[13].val", DumpEntry{minMaxLim0.filterLengthSc[13].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[14].val", DumpEntry{minMaxLim0.filterLengthSc[14].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[15].val", DumpEntry{minMaxLim0.filterLengthSc[15].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[16].val", DumpEntry{minMaxLim0.filterLengthSc[16].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[17].val", DumpEntry{minMaxLim0.filterLengthSc[17].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[18].val", DumpEntry{minMaxLim0.filterLengthSc[18].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[19].val", DumpEntry{minMaxLim0.filterLengthSc[19].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[20].val", DumpEntry{minMaxLim0.filterLengthSc[20].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[21].val", DumpEntry{minMaxLim0.filterLengthSc[21].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[22].val", DumpEntry{minMaxLim0.filterLengthSc[22].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[23].val", DumpEntry{minMaxLim0.filterLengthSc[23].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[24].val", DumpEntry{minMaxLim0.filterLengthSc[24].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[25].val", DumpEntry{minMaxLim0.filterLengthSc[25].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[26].val", DumpEntry{minMaxLim0.filterLengthSc[26].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[27].val", DumpEntry{minMaxLim0.filterLengthSc[27].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[28].val", DumpEntry{minMaxLim0.filterLengthSc[28].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[29].val", DumpEntry{minMaxLim0.filterLengthSc[29].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[30].val", DumpEntry{minMaxLim0.filterLengthSc[30].val});
        res.insert_or_assign("minMaxLim0.filterLengthSc[31].val", DumpEntry{minMaxLim0.filterLengthSc[31].val});
        res.insert_or_assign("minMaxLim0.reTime[0].s", DumpEntry{minMaxLim0.reTime[0].s});
        res.insert_or_assign("minMaxLim0.reTime[0].ns", DumpEntry{minMaxLim0.reTime[0].ns});
        res.insert_or_assign("minMaxLim0.reTime[1].s", DumpEntry{minMaxLim0.reTime[1].s});
        res.insert_or_assign("minMaxLim0.reTime[1].ns", DumpEntry{minMaxLim0.reTime[1].ns});
        res.insert_or_assign("minMaxLim0.reTime[2].s", DumpEntry{minMaxLim0.reTime[2].s});
        res.insert_or_assign("minMaxLim0.reTime[2].ns", DumpEntry{minMaxLim0.reTime[2].ns});
        res.insert_or_assign("minMaxLim0.reTime[3].s", DumpEntry{minMaxLim0.reTime[3].s});
        res.insert_or_assign("minMaxLim0.reTime[3].ns", DumpEntry{minMaxLim0.reTime[3].ns});
        res.insert_or_assign("minMaxLim0.reTime[4].s", DumpEntry{minMaxLim0.reTime[4].s});
        res.insert_or_assign("minMaxLim0.reTime[4].ns", DumpEntry{minMaxLim0.reTime[4].ns});
        res.insert_or_assign("minMaxLim0.reTime[5].s", DumpEntry{minMaxLim0.reTime[5].s});
        res.insert_or_assign("minMaxLim0.reTime[5].ns", DumpEntry{minMaxLim0.reTime[5].ns});
        res.insert_or_assign("minMaxLim0.reTime[6].s", DumpEntry{minMaxLim0.reTime[6].s});
        res.insert_or_assign("minMaxLim0.reTime[6].ns", DumpEntry{minMaxLim0.reTime[6].ns});
        res.insert_or_assign("minMaxLim0.reTime[7].s", DumpEntry{minMaxLim0.reTime[7].s});
        res.insert_or_assign("minMaxLim0.reTime[7].ns", DumpEntry{minMaxLim0.reTime[7].ns});
        res.insert_or_assign("minMaxLim0.reTime[8].s", DumpEntry{minMaxLim0.reTime[8].s});
        res.insert_or_assign("minMaxLim0.reTime[8].ns", DumpEntry{minMaxLim0.reTime[8].ns});
        res.insert_or_assign("minMaxLim0.reTime[9].s", DumpEntry{minMaxLim0.reTime[9].s});
        res.insert_or_assign("minMaxLim0.reTime[9].ns", DumpEntry{minMaxLim0.reTime[9].ns});
        res.insert_or_assign("minMaxLim0.reTime[10].s", DumpEntry{minMaxLim0.reTime[10].s});
        res.insert_or_assign("minMaxLim0.reTime[10].ns", DumpEntry{minMaxLim0.reTime[10].ns});
        res.insert_or_assign("minMaxLim0.reTime[11].s", DumpEntry{minMaxLim0.reTime[11].s});
        res.insert_or_assign("minMaxLim0.reTime[11].ns", DumpEntry{minMaxLim0.reTime[11].ns});
        res.insert_or_assign("minMaxLim0.reTime[12].s", DumpEntry{minMaxLim0.reTime[12].s});
        res.insert_or_assign("minMaxLim0.reTime[12].ns", DumpEntry{minMaxLim0.reTime[12].ns});
        res.insert_or_assign("minMaxLim0.reTime[13].s", DumpEntry{minMaxLim0.reTime[13].s});
        res.insert_or_assign("minMaxLim0.reTime[13].ns", DumpEntry{minMaxLim0.reTime[13].ns});
        res.insert_or_assign("minMaxLim0.reTime[14].s", DumpEntry{minMaxLim0.reTime[14].s});
        res.insert_or_assign("minMaxLim0.reTime[14].ns", DumpEntry{minMaxLim0.reTime[14].ns});
        res.insert_or_assign("minMaxLim0.reTime[15].s", DumpEntry{minMaxLim0.reTime[15].s});
        res.insert_or_assign("minMaxLim0.reTime[15].ns", DumpEntry{minMaxLim0.reTime[15].ns});
        res.insert_or_assign("minMaxLim0.reTime[16].s", DumpEntry{minMaxLim0.reTime[16].s});
        res.insert_or_assign("minMaxLim0.reTime[16].ns", DumpEntry{minMaxLim0.reTime[16].ns});
        res.insert_or_assign("minMaxLim0.reTime[17].s", DumpEntry{minMaxLim0.reTime[17].s});
        res.insert_or_assign("minMaxLim0.reTime[17].ns", DumpEntry{minMaxLim0.reTime[17].ns});
        res.insert_or_assign("minMaxLim0.reTime[18].s", DumpEntry{minMaxLim0.reTime[18].s});
        res.insert_or_assign("minMaxLim0.reTime[18].ns", DumpEntry{minMaxLim0.reTime[18].ns});
        res.insert_or_assign("minMaxLim0.reTime[19].s", DumpEntry{minMaxLim0.reTime[19].s});
        res.insert_or_assign("minMaxLim0.reTime[19].ns", DumpEntry{minMaxLim0.reTime[19].ns});
        res.insert_or_assign("minMaxLim0.reTime[20].s", DumpEntry{minMaxLim0.reTime[20].s});
        res.insert_or_assign("minMaxLim0.reTime[20].ns", DumpEntry{minMaxLim0.reTime[20].ns});
        res.insert_or_assign("minMaxLim0.reTime[21].s", DumpEntry{minMaxLim0.reTime[21].s});
        res.insert_or_assign("minMaxLim0.reTime[21].ns", DumpEntry{minMaxLim0.reTime[21].ns});
        res.insert_or_assign("minMaxLim0.reTime[22].s", DumpEntry{minMaxLim0.reTime[22].s});
        res.insert_or_assign("minMaxLim0.reTime[22].ns", DumpEntry{minMaxLim0.reTime[22].ns});
        res.insert_or_assign("minMaxLim0.reTime[23].s", DumpEntry{minMaxLim0.reTime[23].s});
        res.insert_or_assign("minMaxLim0.reTime[23].ns", DumpEntry{minMaxLim0.reTime[23].ns});
        res.insert_or_assign("minMaxLim0.reTime[24].s", DumpEntry{minMaxLim0.reTime[24].s});
        res.insert_or_assign("minMaxLim0.reTime[24].ns", DumpEntry{minMaxLim0.reTime[24].ns});
        res.insert_or_assign("minMaxLim0.reTime[25].s", DumpEntry{minMaxLim0.reTime[25].s});
        res.insert_or_assign("minMaxLim0.reTime[25].ns", DumpEntry{minMaxLim0.reTime[25].ns});
        res.insert_or_assign("minMaxLim0.reTime[26].s", DumpEntry{minMaxLim0.reTime[26].s});
        res.insert_or_assign("minMaxLim0.reTime[26].ns", DumpEntry{minMaxLim0.reTime[26].ns});
        res.insert_or_assign("minMaxLim0.reTime[27].s", DumpEntry{minMaxLim0.reTime[27].s});
        res.insert_or_assign("minMaxLim0.reTime[27].ns", DumpEntry{minMaxLim0.reTime[27].ns});
        res.insert_or_assign("minMaxLim0.reTime[28].s", DumpEntry{minMaxLim0.reTime[28].s});
        res.insert_or_assign("minMaxLim0.reTime[28].ns", DumpEntry{minMaxLim0.reTime[28].ns});
        res.insert_or_assign("minMaxLim0.reTime[29].s", DumpEntry{minMaxLim0.reTime[29].s});
        res.insert_or_assign("minMaxLim0.reTime[29].ns", DumpEntry{minMaxLim0.reTime[29].ns});
        res.insert_or_assign("minMaxLim0.reTime[30].s", DumpEntry{minMaxLim0.reTime[30].s});
        res.insert_or_assign("minMaxLim0.reTime[30].ns", DumpEntry{minMaxLim0.reTime[30].ns});
        res.insert_or_assign("minMaxLim0.reTime[31].s", DumpEntry{minMaxLim0.reTime[31].s});
        res.insert_or_assign("minMaxLim0.reTime[31].ns", DumpEntry{minMaxLim0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim1::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim1::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::MinMaxLim1`
    //!
    //! @param minMaxLim1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under minMaxLim1
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::MinMaxLim1& minMaxLim1)
    {
        DumpMap res{minMaxLim1.base()};
        res.insert_or_assign("minMaxLim1.staticParams", DumpEntry{minMaxLim1.staticParams});
        res.insert_or_assign("minMaxLim1.staticParams.invertIsEn", DumpEntry{minMaxLim1.staticParams.invertIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.enableIsEn", DumpEntry{minMaxLim1.staticParams.enableIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.latchIsEn", DumpEntry{minMaxLim1.staticParams.latchIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.deglitchIsEn", DumpEntry{minMaxLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.reTimeIsEn", DumpEntry{minMaxLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("minMaxLim1.staticParams.numChannels", DumpEntry{minMaxLim1.staticParams.numChannels});
        res.insert_or_assign("minMaxLim1.data", DumpEntry{minMaxLim1.data});
        res.insert_or_assign("minMaxLim1.dataChanged", DumpEntry{minMaxLim1.dataChanged});
        res.insert_or_assign("minMaxLim1.invert", DumpEntry{minMaxLim1.invert});
        res.insert_or_assign("minMaxLim1.enable", DumpEntry{minMaxLim1.enable});
        res.insert_or_assign("minMaxLim1.latch", DumpEntry{minMaxLim1.latch});
        res.insert_or_assign("minMaxLim1.rstLatch", DumpEntry{minMaxLim1.rstLatch});
        res.insert_or_assign("minMaxLim1.risingInterrupt", DumpEntry{minMaxLim1.risingInterrupt});
        res.insert_or_assign("minMaxLim1.fallingInterrupt", DumpEntry{minMaxLim1.fallingInterrupt});
        res.insert_or_assign("minMaxLim1.filterLengthSc[0].val", DumpEntry{minMaxLim1.filterLengthSc[0].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[1].val", DumpEntry{minMaxLim1.filterLengthSc[1].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[2].val", DumpEntry{minMaxLim1.filterLengthSc[2].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[3].val", DumpEntry{minMaxLim1.filterLengthSc[3].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[4].val", DumpEntry{minMaxLim1.filterLengthSc[4].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[5].val", DumpEntry{minMaxLim1.filterLengthSc[5].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[6].val", DumpEntry{minMaxLim1.filterLengthSc[6].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[7].val", DumpEntry{minMaxLim1.filterLengthSc[7].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[8].val", DumpEntry{minMaxLim1.filterLengthSc[8].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[9].val", DumpEntry{minMaxLim1.filterLengthSc[9].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[10].val", DumpEntry{minMaxLim1.filterLengthSc[10].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[11].val", DumpEntry{minMaxLim1.filterLengthSc[11].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[12].val", DumpEntry{minMaxLim1.filterLengthSc[12].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[13].val", DumpEntry{minMaxLim1.filterLengthSc[13].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[14].val", DumpEntry{minMaxLim1.filterLengthSc[14].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[15].val", DumpEntry{minMaxLim1.filterLengthSc[15].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[16].val", DumpEntry{minMaxLim1.filterLengthSc[16].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[17].val", DumpEntry{minMaxLim1.filterLengthSc[17].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[18].val", DumpEntry{minMaxLim1.filterLengthSc[18].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[19].val", DumpEntry{minMaxLim1.filterLengthSc[19].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[20].val", DumpEntry{minMaxLim1.filterLengthSc[20].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[21].val", DumpEntry{minMaxLim1.filterLengthSc[21].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[22].val", DumpEntry{minMaxLim1.filterLengthSc[22].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[23].val", DumpEntry{minMaxLim1.filterLengthSc[23].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[24].val", DumpEntry{minMaxLim1.filterLengthSc[24].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[25].val", DumpEntry{minMaxLim1.filterLengthSc[25].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[26].val", DumpEntry{minMaxLim1.filterLengthSc[26].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[27].val", DumpEntry{minMaxLim1.filterLengthSc[27].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[28].val", DumpEntry{minMaxLim1.filterLengthSc[28].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[29].val", DumpEntry{minMaxLim1.filterLengthSc[29].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[30].val", DumpEntry{minMaxLim1.filterLengthSc[30].val});
        res.insert_or_assign("minMaxLim1.filterLengthSc[31].val", DumpEntry{minMaxLim1.filterLengthSc[31].val});
        res.insert_or_assign("minMaxLim1.reTime[0].s", DumpEntry{minMaxLim1.reTime[0].s});
        res.insert_or_assign("minMaxLim1.reTime[0].ns", DumpEntry{minMaxLim1.reTime[0].ns});
        res.insert_or_assign("minMaxLim1.reTime[1].s", DumpEntry{minMaxLim1.reTime[1].s});
        res.insert_or_assign("minMaxLim1.reTime[1].ns", DumpEntry{minMaxLim1.reTime[1].ns});
        res.insert_or_assign("minMaxLim1.reTime[2].s", DumpEntry{minMaxLim1.reTime[2].s});
        res.insert_or_assign("minMaxLim1.reTime[2].ns", DumpEntry{minMaxLim1.reTime[2].ns});
        res.insert_or_assign("minMaxLim1.reTime[3].s", DumpEntry{minMaxLim1.reTime[3].s});
        res.insert_or_assign("minMaxLim1.reTime[3].ns", DumpEntry{minMaxLim1.reTime[3].ns});
        res.insert_or_assign("minMaxLim1.reTime[4].s", DumpEntry{minMaxLim1.reTime[4].s});
        res.insert_or_assign("minMaxLim1.reTime[4].ns", DumpEntry{minMaxLim1.reTime[4].ns});
        res.insert_or_assign("minMaxLim1.reTime[5].s", DumpEntry{minMaxLim1.reTime[5].s});
        res.insert_or_assign("minMaxLim1.reTime[5].ns", DumpEntry{minMaxLim1.reTime[5].ns});
        res.insert_or_assign("minMaxLim1.reTime[6].s", DumpEntry{minMaxLim1.reTime[6].s});
        res.insert_or_assign("minMaxLim1.reTime[6].ns", DumpEntry{minMaxLim1.reTime[6].ns});
        res.insert_or_assign("minMaxLim1.reTime[7].s", DumpEntry{minMaxLim1.reTime[7].s});
        res.insert_or_assign("minMaxLim1.reTime[7].ns", DumpEntry{minMaxLim1.reTime[7].ns});
        res.insert_or_assign("minMaxLim1.reTime[8].s", DumpEntry{minMaxLim1.reTime[8].s});
        res.insert_or_assign("minMaxLim1.reTime[8].ns", DumpEntry{minMaxLim1.reTime[8].ns});
        res.insert_or_assign("minMaxLim1.reTime[9].s", DumpEntry{minMaxLim1.reTime[9].s});
        res.insert_or_assign("minMaxLim1.reTime[9].ns", DumpEntry{minMaxLim1.reTime[9].ns});
        res.insert_or_assign("minMaxLim1.reTime[10].s", DumpEntry{minMaxLim1.reTime[10].s});
        res.insert_or_assign("minMaxLim1.reTime[10].ns", DumpEntry{minMaxLim1.reTime[10].ns});
        res.insert_or_assign("minMaxLim1.reTime[11].s", DumpEntry{minMaxLim1.reTime[11].s});
        res.insert_or_assign("minMaxLim1.reTime[11].ns", DumpEntry{minMaxLim1.reTime[11].ns});
        res.insert_or_assign("minMaxLim1.reTime[12].s", DumpEntry{minMaxLim1.reTime[12].s});
        res.insert_or_assign("minMaxLim1.reTime[12].ns", DumpEntry{minMaxLim1.reTime[12].ns});
        res.insert_or_assign("minMaxLim1.reTime[13].s", DumpEntry{minMaxLim1.reTime[13].s});
        res.insert_or_assign("minMaxLim1.reTime[13].ns", DumpEntry{minMaxLim1.reTime[13].ns});
        res.insert_or_assign("minMaxLim1.reTime[14].s", DumpEntry{minMaxLim1.reTime[14].s});
        res.insert_or_assign("minMaxLim1.reTime[14].ns", DumpEntry{minMaxLim1.reTime[14].ns});
        res.insert_or_assign("minMaxLim1.reTime[15].s", DumpEntry{minMaxLim1.reTime[15].s});
        res.insert_or_assign("minMaxLim1.reTime[15].ns", DumpEntry{minMaxLim1.reTime[15].ns});
        res.insert_or_assign("minMaxLim1.reTime[16].s", DumpEntry{minMaxLim1.reTime[16].s});
        res.insert_or_assign("minMaxLim1.reTime[16].ns", DumpEntry{minMaxLim1.reTime[16].ns});
        res.insert_or_assign("minMaxLim1.reTime[17].s", DumpEntry{minMaxLim1.reTime[17].s});
        res.insert_or_assign("minMaxLim1.reTime[17].ns", DumpEntry{minMaxLim1.reTime[17].ns});
        res.insert_or_assign("minMaxLim1.reTime[18].s", DumpEntry{minMaxLim1.reTime[18].s});
        res.insert_or_assign("minMaxLim1.reTime[18].ns", DumpEntry{minMaxLim1.reTime[18].ns});
        res.insert_or_assign("minMaxLim1.reTime[19].s", DumpEntry{minMaxLim1.reTime[19].s});
        res.insert_or_assign("minMaxLim1.reTime[19].ns", DumpEntry{minMaxLim1.reTime[19].ns});
        res.insert_or_assign("minMaxLim1.reTime[20].s", DumpEntry{minMaxLim1.reTime[20].s});
        res.insert_or_assign("minMaxLim1.reTime[20].ns", DumpEntry{minMaxLim1.reTime[20].ns});
        res.insert_or_assign("minMaxLim1.reTime[21].s", DumpEntry{minMaxLim1.reTime[21].s});
        res.insert_or_assign("minMaxLim1.reTime[21].ns", DumpEntry{minMaxLim1.reTime[21].ns});
        res.insert_or_assign("minMaxLim1.reTime[22].s", DumpEntry{minMaxLim1.reTime[22].s});
        res.insert_or_assign("minMaxLim1.reTime[22].ns", DumpEntry{minMaxLim1.reTime[22].ns});
        res.insert_or_assign("minMaxLim1.reTime[23].s", DumpEntry{minMaxLim1.reTime[23].s});
        res.insert_or_assign("minMaxLim1.reTime[23].ns", DumpEntry{minMaxLim1.reTime[23].ns});
        res.insert_or_assign("minMaxLim1.reTime[24].s", DumpEntry{minMaxLim1.reTime[24].s});
        res.insert_or_assign("minMaxLim1.reTime[24].ns", DumpEntry{minMaxLim1.reTime[24].ns});
        res.insert_or_assign("minMaxLim1.reTime[25].s", DumpEntry{minMaxLim1.reTime[25].s});
        res.insert_or_assign("minMaxLim1.reTime[25].ns", DumpEntry{minMaxLim1.reTime[25].ns});
        res.insert_or_assign("minMaxLim1.reTime[26].s", DumpEntry{minMaxLim1.reTime[26].s});
        res.insert_or_assign("minMaxLim1.reTime[26].ns", DumpEntry{minMaxLim1.reTime[26].ns});
        res.insert_or_assign("minMaxLim1.reTime[27].s", DumpEntry{minMaxLim1.reTime[27].s});
        res.insert_or_assign("minMaxLim1.reTime[27].ns", DumpEntry{minMaxLim1.reTime[27].ns});
        res.insert_or_assign("minMaxLim1.reTime[28].s", DumpEntry{minMaxLim1.reTime[28].s});
        res.insert_or_assign("minMaxLim1.reTime[28].ns", DumpEntry{minMaxLim1.reTime[28].ns});
        res.insert_or_assign("minMaxLim1.reTime[29].s", DumpEntry{minMaxLim1.reTime[29].s});
        res.insert_or_assign("minMaxLim1.reTime[29].ns", DumpEntry{minMaxLim1.reTime[29].ns});
        res.insert_or_assign("minMaxLim1.reTime[30].s", DumpEntry{minMaxLim1.reTime[30].s});
        res.insert_or_assign("minMaxLim1.reTime[30].ns", DumpEntry{minMaxLim1.reTime[30].ns});
        res.insert_or_assign("minMaxLim1.reTime[31].s", DumpEntry{minMaxLim1.reTime[31].s});
        res.insert_or_assign("minMaxLim1.reTime[31].ns", DumpEntry{minMaxLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim0::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim0::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim0::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim0::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim0`
    //!
    //! @param rmsLim0 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rmsLim0
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim0& rmsLim0)
    {
        DumpMap res{rmsLim0.base()};
        res.insert_or_assign("rmsLim0.staticParams", DumpEntry{rmsLim0.staticParams});
        res.insert_or_assign("rmsLim0.staticParams.invertIsEn", DumpEntry{rmsLim0.staticParams.invertIsEn});
        res.insert_or_assign("rmsLim0.staticParams.enableIsEn", DumpEntry{rmsLim0.staticParams.enableIsEn});
        res.insert_or_assign("rmsLim0.staticParams.latchIsEn", DumpEntry{rmsLim0.staticParams.latchIsEn});
        res.insert_or_assign("rmsLim0.staticParams.deglitchIsEn", DumpEntry{rmsLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("rmsLim0.staticParams.reTimeIsEn", DumpEntry{rmsLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("rmsLim0.staticParams.numChannels", DumpEntry{rmsLim0.staticParams.numChannels});
        res.insert_or_assign("rmsLim0.data", DumpEntry{rmsLim0.data});
        res.insert_or_assign("rmsLim0.dataChanged", DumpEntry{rmsLim0.dataChanged});
        res.insert_or_assign("rmsLim0.invert", DumpEntry{rmsLim0.invert});
        res.insert_or_assign("rmsLim0.enable", DumpEntry{rmsLim0.enable});
        res.insert_or_assign("rmsLim0.latch", DumpEntry{rmsLim0.latch});
        res.insert_or_assign("rmsLim0.rstLatch", DumpEntry{rmsLim0.rstLatch});
        res.insert_or_assign("rmsLim0.risingInterrupt", DumpEntry{rmsLim0.risingInterrupt});
        res.insert_or_assign("rmsLim0.fallingInterrupt", DumpEntry{rmsLim0.fallingInterrupt});
        res.insert_or_assign("rmsLim0.filterLengthSc[0].val", DumpEntry{rmsLim0.filterLengthSc[0].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[1].val", DumpEntry{rmsLim0.filterLengthSc[1].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[2].val", DumpEntry{rmsLim0.filterLengthSc[2].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[3].val", DumpEntry{rmsLim0.filterLengthSc[3].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[4].val", DumpEntry{rmsLim0.filterLengthSc[4].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[5].val", DumpEntry{rmsLim0.filterLengthSc[5].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[6].val", DumpEntry{rmsLim0.filterLengthSc[6].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[7].val", DumpEntry{rmsLim0.filterLengthSc[7].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[8].val", DumpEntry{rmsLim0.filterLengthSc[8].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[9].val", DumpEntry{rmsLim0.filterLengthSc[9].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[10].val", DumpEntry{rmsLim0.filterLengthSc[10].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[11].val", DumpEntry{rmsLim0.filterLengthSc[11].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[12].val", DumpEntry{rmsLim0.filterLengthSc[12].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[13].val", DumpEntry{rmsLim0.filterLengthSc[13].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[14].val", DumpEntry{rmsLim0.filterLengthSc[14].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[15].val", DumpEntry{rmsLim0.filterLengthSc[15].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[16].val", DumpEntry{rmsLim0.filterLengthSc[16].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[17].val", DumpEntry{rmsLim0.filterLengthSc[17].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[18].val", DumpEntry{rmsLim0.filterLengthSc[18].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[19].val", DumpEntry{rmsLim0.filterLengthSc[19].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[20].val", DumpEntry{rmsLim0.filterLengthSc[20].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[21].val", DumpEntry{rmsLim0.filterLengthSc[21].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[22].val", DumpEntry{rmsLim0.filterLengthSc[22].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[23].val", DumpEntry{rmsLim0.filterLengthSc[23].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[24].val", DumpEntry{rmsLim0.filterLengthSc[24].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[25].val", DumpEntry{rmsLim0.filterLengthSc[25].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[26].val", DumpEntry{rmsLim0.filterLengthSc[26].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[27].val", DumpEntry{rmsLim0.filterLengthSc[27].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[28].val", DumpEntry{rmsLim0.filterLengthSc[28].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[29].val", DumpEntry{rmsLim0.filterLengthSc[29].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[30].val", DumpEntry{rmsLim0.filterLengthSc[30].val});
        res.insert_or_assign("rmsLim0.filterLengthSc[31].val", DumpEntry{rmsLim0.filterLengthSc[31].val});
        res.insert_or_assign("rmsLim0.reTime[0].s", DumpEntry{rmsLim0.reTime[0].s});
        res.insert_or_assign("rmsLim0.reTime[0].ns", DumpEntry{rmsLim0.reTime[0].ns});
        res.insert_or_assign("rmsLim0.reTime[1].s", DumpEntry{rmsLim0.reTime[1].s});
        res.insert_or_assign("rmsLim0.reTime[1].ns", DumpEntry{rmsLim0.reTime[1].ns});
        res.insert_or_assign("rmsLim0.reTime[2].s", DumpEntry{rmsLim0.reTime[2].s});
        res.insert_or_assign("rmsLim0.reTime[2].ns", DumpEntry{rmsLim0.reTime[2].ns});
        res.insert_or_assign("rmsLim0.reTime[3].s", DumpEntry{rmsLim0.reTime[3].s});
        res.insert_or_assign("rmsLim0.reTime[3].ns", DumpEntry{rmsLim0.reTime[3].ns});
        res.insert_or_assign("rmsLim0.reTime[4].s", DumpEntry{rmsLim0.reTime[4].s});
        res.insert_or_assign("rmsLim0.reTime[4].ns", DumpEntry{rmsLim0.reTime[4].ns});
        res.insert_or_assign("rmsLim0.reTime[5].s", DumpEntry{rmsLim0.reTime[5].s});
        res.insert_or_assign("rmsLim0.reTime[5].ns", DumpEntry{rmsLim0.reTime[5].ns});
        res.insert_or_assign("rmsLim0.reTime[6].s", DumpEntry{rmsLim0.reTime[6].s});
        res.insert_or_assign("rmsLim0.reTime[6].ns", DumpEntry{rmsLim0.reTime[6].ns});
        res.insert_or_assign("rmsLim0.reTime[7].s", DumpEntry{rmsLim0.reTime[7].s});
        res.insert_or_assign("rmsLim0.reTime[7].ns", DumpEntry{rmsLim0.reTime[7].ns});
        res.insert_or_assign("rmsLim0.reTime[8].s", DumpEntry{rmsLim0.reTime[8].s});
        res.insert_or_assign("rmsLim0.reTime[8].ns", DumpEntry{rmsLim0.reTime[8].ns});
        res.insert_or_assign("rmsLim0.reTime[9].s", DumpEntry{rmsLim0.reTime[9].s});
        res.insert_or_assign("rmsLim0.reTime[9].ns", DumpEntry{rmsLim0.reTime[9].ns});
        res.insert_or_assign("rmsLim0.reTime[10].s", DumpEntry{rmsLim0.reTime[10].s});
        res.insert_or_assign("rmsLim0.reTime[10].ns", DumpEntry{rmsLim0.reTime[10].ns});
        res.insert_or_assign("rmsLim0.reTime[11].s", DumpEntry{rmsLim0.reTime[11].s});
        res.insert_or_assign("rmsLim0.reTime[11].ns", DumpEntry{rmsLim0.reTime[11].ns});
        res.insert_or_assign("rmsLim0.reTime[12].s", DumpEntry{rmsLim0.reTime[12].s});
        res.insert_or_assign("rmsLim0.reTime[12].ns", DumpEntry{rmsLim0.reTime[12].ns});
        res.insert_or_assign("rmsLim0.reTime[13].s", DumpEntry{rmsLim0.reTime[13].s});
        res.insert_or_assign("rmsLim0.reTime[13].ns", DumpEntry{rmsLim0.reTime[13].ns});
        res.insert_or_assign("rmsLim0.reTime[14].s", DumpEntry{rmsLim0.reTime[14].s});
        res.insert_or_assign("rmsLim0.reTime[14].ns", DumpEntry{rmsLim0.reTime[14].ns});
        res.insert_or_assign("rmsLim0.reTime[15].s", DumpEntry{rmsLim0.reTime[15].s});
        res.insert_or_assign("rmsLim0.reTime[15].ns", DumpEntry{rmsLim0.reTime[15].ns});
        res.insert_or_assign("rmsLim0.reTime[16].s", DumpEntry{rmsLim0.reTime[16].s});
        res.insert_or_assign("rmsLim0.reTime[16].ns", DumpEntry{rmsLim0.reTime[16].ns});
        res.insert_or_assign("rmsLim0.reTime[17].s", DumpEntry{rmsLim0.reTime[17].s});
        res.insert_or_assign("rmsLim0.reTime[17].ns", DumpEntry{rmsLim0.reTime[17].ns});
        res.insert_or_assign("rmsLim0.reTime[18].s", DumpEntry{rmsLim0.reTime[18].s});
        res.insert_or_assign("rmsLim0.reTime[18].ns", DumpEntry{rmsLim0.reTime[18].ns});
        res.insert_or_assign("rmsLim0.reTime[19].s", DumpEntry{rmsLim0.reTime[19].s});
        res.insert_or_assign("rmsLim0.reTime[19].ns", DumpEntry{rmsLim0.reTime[19].ns});
        res.insert_or_assign("rmsLim0.reTime[20].s", DumpEntry{rmsLim0.reTime[20].s});
        res.insert_or_assign("rmsLim0.reTime[20].ns", DumpEntry{rmsLim0.reTime[20].ns});
        res.insert_or_assign("rmsLim0.reTime[21].s", DumpEntry{rmsLim0.reTime[21].s});
        res.insert_or_assign("rmsLim0.reTime[21].ns", DumpEntry{rmsLim0.reTime[21].ns});
        res.insert_or_assign("rmsLim0.reTime[22].s", DumpEntry{rmsLim0.reTime[22].s});
        res.insert_or_assign("rmsLim0.reTime[22].ns", DumpEntry{rmsLim0.reTime[22].ns});
        res.insert_or_assign("rmsLim0.reTime[23].s", DumpEntry{rmsLim0.reTime[23].s});
        res.insert_or_assign("rmsLim0.reTime[23].ns", DumpEntry{rmsLim0.reTime[23].ns});
        res.insert_or_assign("rmsLim0.reTime[24].s", DumpEntry{rmsLim0.reTime[24].s});
        res.insert_or_assign("rmsLim0.reTime[24].ns", DumpEntry{rmsLim0.reTime[24].ns});
        res.insert_or_assign("rmsLim0.reTime[25].s", DumpEntry{rmsLim0.reTime[25].s});
        res.insert_or_assign("rmsLim0.reTime[25].ns", DumpEntry{rmsLim0.reTime[25].ns});
        res.insert_or_assign("rmsLim0.reTime[26].s", DumpEntry{rmsLim0.reTime[26].s});
        res.insert_or_assign("rmsLim0.reTime[26].ns", DumpEntry{rmsLim0.reTime[26].ns});
        res.insert_or_assign("rmsLim0.reTime[27].s", DumpEntry{rmsLim0.reTime[27].s});
        res.insert_or_assign("rmsLim0.reTime[27].ns", DumpEntry{rmsLim0.reTime[27].ns});
        res.insert_or_assign("rmsLim0.reTime[28].s", DumpEntry{rmsLim0.reTime[28].s});
        res.insert_or_assign("rmsLim0.reTime[28].ns", DumpEntry{rmsLim0.reTime[28].ns});
        res.insert_or_assign("rmsLim0.reTime[29].s", DumpEntry{rmsLim0.reTime[29].s});
        res.insert_or_assign("rmsLim0.reTime[29].ns", DumpEntry{rmsLim0.reTime[29].ns});
        res.insert_or_assign("rmsLim0.reTime[30].s", DumpEntry{rmsLim0.reTime[30].s});
        res.insert_or_assign("rmsLim0.reTime[30].ns", DumpEntry{rmsLim0.reTime[30].ns});
        res.insert_or_assign("rmsLim0.reTime[31].s", DumpEntry{rmsLim0.reTime[31].s});
        res.insert_or_assign("rmsLim0.reTime[31].ns", DumpEntry{rmsLim0.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim1::FilterLengthScArray`
    //!
    //! @param filterLengthSc A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under filterLengthSc
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim1::FilterLengthScArray& filterLengthSc)
    {
        DumpMap res{filterLengthSc.base()};
        res.insert_or_assign("filterLengthSc[0].val", DumpEntry{filterLengthSc[0].val});
        res.insert_or_assign("filterLengthSc[1].val", DumpEntry{filterLengthSc[1].val});
        res.insert_or_assign("filterLengthSc[2].val", DumpEntry{filterLengthSc[2].val});
        res.insert_or_assign("filterLengthSc[3].val", DumpEntry{filterLengthSc[3].val});
        res.insert_or_assign("filterLengthSc[4].val", DumpEntry{filterLengthSc[4].val});
        res.insert_or_assign("filterLengthSc[5].val", DumpEntry{filterLengthSc[5].val});
        res.insert_or_assign("filterLengthSc[6].val", DumpEntry{filterLengthSc[6].val});
        res.insert_or_assign("filterLengthSc[7].val", DumpEntry{filterLengthSc[7].val});
        res.insert_or_assign("filterLengthSc[8].val", DumpEntry{filterLengthSc[8].val});
        res.insert_or_assign("filterLengthSc[9].val", DumpEntry{filterLengthSc[9].val});
        res.insert_or_assign("filterLengthSc[10].val", DumpEntry{filterLengthSc[10].val});
        res.insert_or_assign("filterLengthSc[11].val", DumpEntry{filterLengthSc[11].val});
        res.insert_or_assign("filterLengthSc[12].val", DumpEntry{filterLengthSc[12].val});
        res.insert_or_assign("filterLengthSc[13].val", DumpEntry{filterLengthSc[13].val});
        res.insert_or_assign("filterLengthSc[14].val", DumpEntry{filterLengthSc[14].val});
        res.insert_or_assign("filterLengthSc[15].val", DumpEntry{filterLengthSc[15].val});
        res.insert_or_assign("filterLengthSc[16].val", DumpEntry{filterLengthSc[16].val});
        res.insert_or_assign("filterLengthSc[17].val", DumpEntry{filterLengthSc[17].val});
        res.insert_or_assign("filterLengthSc[18].val", DumpEntry{filterLengthSc[18].val});
        res.insert_or_assign("filterLengthSc[19].val", DumpEntry{filterLengthSc[19].val});
        res.insert_or_assign("filterLengthSc[20].val", DumpEntry{filterLengthSc[20].val});
        res.insert_or_assign("filterLengthSc[21].val", DumpEntry{filterLengthSc[21].val});
        res.insert_or_assign("filterLengthSc[22].val", DumpEntry{filterLengthSc[22].val});
        res.insert_or_assign("filterLengthSc[23].val", DumpEntry{filterLengthSc[23].val});
        res.insert_or_assign("filterLengthSc[24].val", DumpEntry{filterLengthSc[24].val});
        res.insert_or_assign("filterLengthSc[25].val", DumpEntry{filterLengthSc[25].val});
        res.insert_or_assign("filterLengthSc[26].val", DumpEntry{filterLengthSc[26].val});
        res.insert_or_assign("filterLengthSc[27].val", DumpEntry{filterLengthSc[27].val});
        res.insert_or_assign("filterLengthSc[28].val", DumpEntry{filterLengthSc[28].val});
        res.insert_or_assign("filterLengthSc[29].val", DumpEntry{filterLengthSc[29].val});
        res.insert_or_assign("filterLengthSc[30].val", DumpEntry{filterLengthSc[30].val});
        res.insert_or_assign("filterLengthSc[31].val", DumpEntry{filterLengthSc[31].val});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim1::ReTimeArray`
    //!
    //! @param reTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under reTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim1::ReTimeArray& reTime)
    {
        DumpMap res{reTime.base()};
        res.insert_or_assign("reTime[0].s", DumpEntry{reTime[0].s});
        res.insert_or_assign("reTime[0].ns", DumpEntry{reTime[0].ns});
        res.insert_or_assign("reTime[1].s", DumpEntry{reTime[1].s});
        res.insert_or_assign("reTime[1].ns", DumpEntry{reTime[1].ns});
        res.insert_or_assign("reTime[2].s", DumpEntry{reTime[2].s});
        res.insert_or_assign("reTime[2].ns", DumpEntry{reTime[2].ns});
        res.insert_or_assign("reTime[3].s", DumpEntry{reTime[3].s});
        res.insert_or_assign("reTime[3].ns", DumpEntry{reTime[3].ns});
        res.insert_or_assign("reTime[4].s", DumpEntry{reTime[4].s});
        res.insert_or_assign("reTime[4].ns", DumpEntry{reTime[4].ns});
        res.insert_or_assign("reTime[5].s", DumpEntry{reTime[5].s});
        res.insert_or_assign("reTime[5].ns", DumpEntry{reTime[5].ns});
        res.insert_or_assign("reTime[6].s", DumpEntry{reTime[6].s});
        res.insert_or_assign("reTime[6].ns", DumpEntry{reTime[6].ns});
        res.insert_or_assign("reTime[7].s", DumpEntry{reTime[7].s});
        res.insert_or_assign("reTime[7].ns", DumpEntry{reTime[7].ns});
        res.insert_or_assign("reTime[8].s", DumpEntry{reTime[8].s});
        res.insert_or_assign("reTime[8].ns", DumpEntry{reTime[8].ns});
        res.insert_or_assign("reTime[9].s", DumpEntry{reTime[9].s});
        res.insert_or_assign("reTime[9].ns", DumpEntry{reTime[9].ns});
        res.insert_or_assign("reTime[10].s", DumpEntry{reTime[10].s});
        res.insert_or_assign("reTime[10].ns", DumpEntry{reTime[10].ns});
        res.insert_or_assign("reTime[11].s", DumpEntry{reTime[11].s});
        res.insert_or_assign("reTime[11].ns", DumpEntry{reTime[11].ns});
        res.insert_or_assign("reTime[12].s", DumpEntry{reTime[12].s});
        res.insert_or_assign("reTime[12].ns", DumpEntry{reTime[12].ns});
        res.insert_or_assign("reTime[13].s", DumpEntry{reTime[13].s});
        res.insert_or_assign("reTime[13].ns", DumpEntry{reTime[13].ns});
        res.insert_or_assign("reTime[14].s", DumpEntry{reTime[14].s});
        res.insert_or_assign("reTime[14].ns", DumpEntry{reTime[14].ns});
        res.insert_or_assign("reTime[15].s", DumpEntry{reTime[15].s});
        res.insert_or_assign("reTime[15].ns", DumpEntry{reTime[15].ns});
        res.insert_or_assign("reTime[16].s", DumpEntry{reTime[16].s});
        res.insert_or_assign("reTime[16].ns", DumpEntry{reTime[16].ns});
        res.insert_or_assign("reTime[17].s", DumpEntry{reTime[17].s});
        res.insert_or_assign("reTime[17].ns", DumpEntry{reTime[17].ns});
        res.insert_or_assign("reTime[18].s", DumpEntry{reTime[18].s});
        res.insert_or_assign("reTime[18].ns", DumpEntry{reTime[18].ns});
        res.insert_or_assign("reTime[19].s", DumpEntry{reTime[19].s});
        res.insert_or_assign("reTime[19].ns", DumpEntry{reTime[19].ns});
        res.insert_or_assign("reTime[20].s", DumpEntry{reTime[20].s});
        res.insert_or_assign("reTime[20].ns", DumpEntry{reTime[20].ns});
        res.insert_or_assign("reTime[21].s", DumpEntry{reTime[21].s});
        res.insert_or_assign("reTime[21].ns", DumpEntry{reTime[21].ns});
        res.insert_or_assign("reTime[22].s", DumpEntry{reTime[22].s});
        res.insert_or_assign("reTime[22].ns", DumpEntry{reTime[22].ns});
        res.insert_or_assign("reTime[23].s", DumpEntry{reTime[23].s});
        res.insert_or_assign("reTime[23].ns", DumpEntry{reTime[23].ns});
        res.insert_or_assign("reTime[24].s", DumpEntry{reTime[24].s});
        res.insert_or_assign("reTime[24].ns", DumpEntry{reTime[24].ns});
        res.insert_or_assign("reTime[25].s", DumpEntry{reTime[25].s});
        res.insert_or_assign("reTime[25].ns", DumpEntry{reTime[25].ns});
        res.insert_or_assign("reTime[26].s", DumpEntry{reTime[26].s});
        res.insert_or_assign("reTime[26].ns", DumpEntry{reTime[26].ns});
        res.insert_or_assign("reTime[27].s", DumpEntry{reTime[27].s});
        res.insert_or_assign("reTime[27].ns", DumpEntry{reTime[27].ns});
        res.insert_or_assign("reTime[28].s", DumpEntry{reTime[28].s});
        res.insert_or_assign("reTime[28].ns", DumpEntry{reTime[28].ns});
        res.insert_or_assign("reTime[29].s", DumpEntry{reTime[29].s});
        res.insert_or_assign("reTime[29].ns", DumpEntry{reTime[29].ns});
        res.insert_or_assign("reTime[30].s", DumpEntry{reTime[30].s});
        res.insert_or_assign("reTime[30].ns", DumpEntry{reTime[30].ns});
        res.insert_or_assign("reTime[31].s", DumpEntry{reTime[31].s});
        res.insert_or_assign("reTime[31].ns", DumpEntry{reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig::RmsLim1`
    //!
    //! @param rmsLim1 A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under rmsLim1
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig::RmsLim1& rmsLim1)
    {
        DumpMap res{rmsLim1.base()};
        res.insert_or_assign("rmsLim1.staticParams", DumpEntry{rmsLim1.staticParams});
        res.insert_or_assign("rmsLim1.staticParams.invertIsEn", DumpEntry{rmsLim1.staticParams.invertIsEn});
        res.insert_or_assign("rmsLim1.staticParams.enableIsEn", DumpEntry{rmsLim1.staticParams.enableIsEn});
        res.insert_or_assign("rmsLim1.staticParams.latchIsEn", DumpEntry{rmsLim1.staticParams.latchIsEn});
        res.insert_or_assign("rmsLim1.staticParams.deglitchIsEn", DumpEntry{rmsLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("rmsLim1.staticParams.reTimeIsEn", DumpEntry{rmsLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("rmsLim1.staticParams.numChannels", DumpEntry{rmsLim1.staticParams.numChannels});
        res.insert_or_assign("rmsLim1.data", DumpEntry{rmsLim1.data});
        res.insert_or_assign("rmsLim1.dataChanged", DumpEntry{rmsLim1.dataChanged});
        res.insert_or_assign("rmsLim1.invert", DumpEntry{rmsLim1.invert});
        res.insert_or_assign("rmsLim1.enable", DumpEntry{rmsLim1.enable});
        res.insert_or_assign("rmsLim1.latch", DumpEntry{rmsLim1.latch});
        res.insert_or_assign("rmsLim1.rstLatch", DumpEntry{rmsLim1.rstLatch});
        res.insert_or_assign("rmsLim1.risingInterrupt", DumpEntry{rmsLim1.risingInterrupt});
        res.insert_or_assign("rmsLim1.fallingInterrupt", DumpEntry{rmsLim1.fallingInterrupt});
        res.insert_or_assign("rmsLim1.filterLengthSc[0].val", DumpEntry{rmsLim1.filterLengthSc[0].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[1].val", DumpEntry{rmsLim1.filterLengthSc[1].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[2].val", DumpEntry{rmsLim1.filterLengthSc[2].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[3].val", DumpEntry{rmsLim1.filterLengthSc[3].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[4].val", DumpEntry{rmsLim1.filterLengthSc[4].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[5].val", DumpEntry{rmsLim1.filterLengthSc[5].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[6].val", DumpEntry{rmsLim1.filterLengthSc[6].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[7].val", DumpEntry{rmsLim1.filterLengthSc[7].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[8].val", DumpEntry{rmsLim1.filterLengthSc[8].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[9].val", DumpEntry{rmsLim1.filterLengthSc[9].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[10].val", DumpEntry{rmsLim1.filterLengthSc[10].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[11].val", DumpEntry{rmsLim1.filterLengthSc[11].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[12].val", DumpEntry{rmsLim1.filterLengthSc[12].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[13].val", DumpEntry{rmsLim1.filterLengthSc[13].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[14].val", DumpEntry{rmsLim1.filterLengthSc[14].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[15].val", DumpEntry{rmsLim1.filterLengthSc[15].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[16].val", DumpEntry{rmsLim1.filterLengthSc[16].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[17].val", DumpEntry{rmsLim1.filterLengthSc[17].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[18].val", DumpEntry{rmsLim1.filterLengthSc[18].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[19].val", DumpEntry{rmsLim1.filterLengthSc[19].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[20].val", DumpEntry{rmsLim1.filterLengthSc[20].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[21].val", DumpEntry{rmsLim1.filterLengthSc[21].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[22].val", DumpEntry{rmsLim1.filterLengthSc[22].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[23].val", DumpEntry{rmsLim1.filterLengthSc[23].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[24].val", DumpEntry{rmsLim1.filterLengthSc[24].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[25].val", DumpEntry{rmsLim1.filterLengthSc[25].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[26].val", DumpEntry{rmsLim1.filterLengthSc[26].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[27].val", DumpEntry{rmsLim1.filterLengthSc[27].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[28].val", DumpEntry{rmsLim1.filterLengthSc[28].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[29].val", DumpEntry{rmsLim1.filterLengthSc[29].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[30].val", DumpEntry{rmsLim1.filterLengthSc[30].val});
        res.insert_or_assign("rmsLim1.filterLengthSc[31].val", DumpEntry{rmsLim1.filterLengthSc[31].val});
        res.insert_or_assign("rmsLim1.reTime[0].s", DumpEntry{rmsLim1.reTime[0].s});
        res.insert_or_assign("rmsLim1.reTime[0].ns", DumpEntry{rmsLim1.reTime[0].ns});
        res.insert_or_assign("rmsLim1.reTime[1].s", DumpEntry{rmsLim1.reTime[1].s});
        res.insert_or_assign("rmsLim1.reTime[1].ns", DumpEntry{rmsLim1.reTime[1].ns});
        res.insert_or_assign("rmsLim1.reTime[2].s", DumpEntry{rmsLim1.reTime[2].s});
        res.insert_or_assign("rmsLim1.reTime[2].ns", DumpEntry{rmsLim1.reTime[2].ns});
        res.insert_or_assign("rmsLim1.reTime[3].s", DumpEntry{rmsLim1.reTime[3].s});
        res.insert_or_assign("rmsLim1.reTime[3].ns", DumpEntry{rmsLim1.reTime[3].ns});
        res.insert_or_assign("rmsLim1.reTime[4].s", DumpEntry{rmsLim1.reTime[4].s});
        res.insert_or_assign("rmsLim1.reTime[4].ns", DumpEntry{rmsLim1.reTime[4].ns});
        res.insert_or_assign("rmsLim1.reTime[5].s", DumpEntry{rmsLim1.reTime[5].s});
        res.insert_or_assign("rmsLim1.reTime[5].ns", DumpEntry{rmsLim1.reTime[5].ns});
        res.insert_or_assign("rmsLim1.reTime[6].s", DumpEntry{rmsLim1.reTime[6].s});
        res.insert_or_assign("rmsLim1.reTime[6].ns", DumpEntry{rmsLim1.reTime[6].ns});
        res.insert_or_assign("rmsLim1.reTime[7].s", DumpEntry{rmsLim1.reTime[7].s});
        res.insert_or_assign("rmsLim1.reTime[7].ns", DumpEntry{rmsLim1.reTime[7].ns});
        res.insert_or_assign("rmsLim1.reTime[8].s", DumpEntry{rmsLim1.reTime[8].s});
        res.insert_or_assign("rmsLim1.reTime[8].ns", DumpEntry{rmsLim1.reTime[8].ns});
        res.insert_or_assign("rmsLim1.reTime[9].s", DumpEntry{rmsLim1.reTime[9].s});
        res.insert_or_assign("rmsLim1.reTime[9].ns", DumpEntry{rmsLim1.reTime[9].ns});
        res.insert_or_assign("rmsLim1.reTime[10].s", DumpEntry{rmsLim1.reTime[10].s});
        res.insert_or_assign("rmsLim1.reTime[10].ns", DumpEntry{rmsLim1.reTime[10].ns});
        res.insert_or_assign("rmsLim1.reTime[11].s", DumpEntry{rmsLim1.reTime[11].s});
        res.insert_or_assign("rmsLim1.reTime[11].ns", DumpEntry{rmsLim1.reTime[11].ns});
        res.insert_or_assign("rmsLim1.reTime[12].s", DumpEntry{rmsLim1.reTime[12].s});
        res.insert_or_assign("rmsLim1.reTime[12].ns", DumpEntry{rmsLim1.reTime[12].ns});
        res.insert_or_assign("rmsLim1.reTime[13].s", DumpEntry{rmsLim1.reTime[13].s});
        res.insert_or_assign("rmsLim1.reTime[13].ns", DumpEntry{rmsLim1.reTime[13].ns});
        res.insert_or_assign("rmsLim1.reTime[14].s", DumpEntry{rmsLim1.reTime[14].s});
        res.insert_or_assign("rmsLim1.reTime[14].ns", DumpEntry{rmsLim1.reTime[14].ns});
        res.insert_or_assign("rmsLim1.reTime[15].s", DumpEntry{rmsLim1.reTime[15].s});
        res.insert_or_assign("rmsLim1.reTime[15].ns", DumpEntry{rmsLim1.reTime[15].ns});
        res.insert_or_assign("rmsLim1.reTime[16].s", DumpEntry{rmsLim1.reTime[16].s});
        res.insert_or_assign("rmsLim1.reTime[16].ns", DumpEntry{rmsLim1.reTime[16].ns});
        res.insert_or_assign("rmsLim1.reTime[17].s", DumpEntry{rmsLim1.reTime[17].s});
        res.insert_or_assign("rmsLim1.reTime[17].ns", DumpEntry{rmsLim1.reTime[17].ns});
        res.insert_or_assign("rmsLim1.reTime[18].s", DumpEntry{rmsLim1.reTime[18].s});
        res.insert_or_assign("rmsLim1.reTime[18].ns", DumpEntry{rmsLim1.reTime[18].ns});
        res.insert_or_assign("rmsLim1.reTime[19].s", DumpEntry{rmsLim1.reTime[19].s});
        res.insert_or_assign("rmsLim1.reTime[19].ns", DumpEntry{rmsLim1.reTime[19].ns});
        res.insert_or_assign("rmsLim1.reTime[20].s", DumpEntry{rmsLim1.reTime[20].s});
        res.insert_or_assign("rmsLim1.reTime[20].ns", DumpEntry{rmsLim1.reTime[20].ns});
        res.insert_or_assign("rmsLim1.reTime[21].s", DumpEntry{rmsLim1.reTime[21].s});
        res.insert_or_assign("rmsLim1.reTime[21].ns", DumpEntry{rmsLim1.reTime[21].ns});
        res.insert_or_assign("rmsLim1.reTime[22].s", DumpEntry{rmsLim1.reTime[22].s});
        res.insert_or_assign("rmsLim1.reTime[22].ns", DumpEntry{rmsLim1.reTime[22].ns});
        res.insert_or_assign("rmsLim1.reTime[23].s", DumpEntry{rmsLim1.reTime[23].s});
        res.insert_or_assign("rmsLim1.reTime[23].ns", DumpEntry{rmsLim1.reTime[23].ns});
        res.insert_or_assign("rmsLim1.reTime[24].s", DumpEntry{rmsLim1.reTime[24].s});
        res.insert_or_assign("rmsLim1.reTime[24].ns", DumpEntry{rmsLim1.reTime[24].ns});
        res.insert_or_assign("rmsLim1.reTime[25].s", DumpEntry{rmsLim1.reTime[25].s});
        res.insert_or_assign("rmsLim1.reTime[25].ns", DumpEntry{rmsLim1.reTime[25].ns});
        res.insert_or_assign("rmsLim1.reTime[26].s", DumpEntry{rmsLim1.reTime[26].s});
        res.insert_or_assign("rmsLim1.reTime[26].ns", DumpEntry{rmsLim1.reTime[26].ns});
        res.insert_or_assign("rmsLim1.reTime[27].s", DumpEntry{rmsLim1.reTime[27].s});
        res.insert_or_assign("rmsLim1.reTime[27].ns", DumpEntry{rmsLim1.reTime[27].ns});
        res.insert_or_assign("rmsLim1.reTime[28].s", DumpEntry{rmsLim1.reTime[28].s});
        res.insert_or_assign("rmsLim1.reTime[28].ns", DumpEntry{rmsLim1.reTime[28].ns});
        res.insert_or_assign("rmsLim1.reTime[29].s", DumpEntry{rmsLim1.reTime[29].s});
        res.insert_or_assign("rmsLim1.reTime[29].ns", DumpEntry{rmsLim1.reTime[29].ns});
        res.insert_or_assign("rmsLim1.reTime[30].s", DumpEntry{rmsLim1.reTime[30].s});
        res.insert_or_assign("rmsLim1.reTime[30].ns", DumpEntry{rmsLim1.reTime[30].ns});
        res.insert_or_assign("rmsLim1.reTime[31].s", DumpEntry{rmsLim1.reTime[31].s});
        res.insert_or_assign("rmsLim1.reTime[31].ns", DumpEntry{rmsLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Dig`
    //!
    //! @param dig A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under dig
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Dig& dig)
    {
        DumpMap res{dig.base()};
        res.insert_or_assign("dig.digI0.staticParams", DumpEntry{dig.digI0.staticParams});
        res.insert_or_assign("dig.digI0.staticParams.invertIsEn", DumpEntry{dig.digI0.staticParams.invertIsEn});
        res.insert_or_assign("dig.digI0.staticParams.enableIsEn", DumpEntry{dig.digI0.staticParams.enableIsEn});
        res.insert_or_assign("dig.digI0.staticParams.latchIsEn", DumpEntry{dig.digI0.staticParams.latchIsEn});
        res.insert_or_assign("dig.digI0.staticParams.deglitchIsEn", DumpEntry{dig.digI0.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digI0.staticParams.reTimeIsEn", DumpEntry{dig.digI0.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digI0.staticParams.numChannels", DumpEntry{dig.digI0.staticParams.numChannels});
        res.insert_or_assign("dig.digI0.data", DumpEntry{dig.digI0.data});
        res.insert_or_assign("dig.digI0.dataChanged", DumpEntry{dig.digI0.dataChanged});
        res.insert_or_assign("dig.digI0.invert", DumpEntry{dig.digI0.invert});
        res.insert_or_assign("dig.digI0.enable", DumpEntry{dig.digI0.enable});
        res.insert_or_assign("dig.digI0.latch", DumpEntry{dig.digI0.latch});
        res.insert_or_assign("dig.digI0.rstLatch", DumpEntry{dig.digI0.rstLatch});
        res.insert_or_assign("dig.digI0.risingInterrupt", DumpEntry{dig.digI0.risingInterrupt});
        res.insert_or_assign("dig.digI0.fallingInterrupt", DumpEntry{dig.digI0.fallingInterrupt});
        res.insert_or_assign("dig.digI0.filterLengthSc[0].val", DumpEntry{dig.digI0.filterLengthSc[0].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[1].val", DumpEntry{dig.digI0.filterLengthSc[1].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[2].val", DumpEntry{dig.digI0.filterLengthSc[2].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[3].val", DumpEntry{dig.digI0.filterLengthSc[3].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[4].val", DumpEntry{dig.digI0.filterLengthSc[4].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[5].val", DumpEntry{dig.digI0.filterLengthSc[5].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[6].val", DumpEntry{dig.digI0.filterLengthSc[6].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[7].val", DumpEntry{dig.digI0.filterLengthSc[7].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[8].val", DumpEntry{dig.digI0.filterLengthSc[8].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[9].val", DumpEntry{dig.digI0.filterLengthSc[9].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[10].val", DumpEntry{dig.digI0.filterLengthSc[10].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[11].val", DumpEntry{dig.digI0.filterLengthSc[11].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[12].val", DumpEntry{dig.digI0.filterLengthSc[12].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[13].val", DumpEntry{dig.digI0.filterLengthSc[13].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[14].val", DumpEntry{dig.digI0.filterLengthSc[14].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[15].val", DumpEntry{dig.digI0.filterLengthSc[15].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[16].val", DumpEntry{dig.digI0.filterLengthSc[16].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[17].val", DumpEntry{dig.digI0.filterLengthSc[17].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[18].val", DumpEntry{dig.digI0.filterLengthSc[18].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[19].val", DumpEntry{dig.digI0.filterLengthSc[19].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[20].val", DumpEntry{dig.digI0.filterLengthSc[20].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[21].val", DumpEntry{dig.digI0.filterLengthSc[21].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[22].val", DumpEntry{dig.digI0.filterLengthSc[22].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[23].val", DumpEntry{dig.digI0.filterLengthSc[23].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[24].val", DumpEntry{dig.digI0.filterLengthSc[24].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[25].val", DumpEntry{dig.digI0.filterLengthSc[25].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[26].val", DumpEntry{dig.digI0.filterLengthSc[26].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[27].val", DumpEntry{dig.digI0.filterLengthSc[27].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[28].val", DumpEntry{dig.digI0.filterLengthSc[28].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[29].val", DumpEntry{dig.digI0.filterLengthSc[29].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[30].val", DumpEntry{dig.digI0.filterLengthSc[30].val});
        res.insert_or_assign("dig.digI0.filterLengthSc[31].val", DumpEntry{dig.digI0.filterLengthSc[31].val});
        res.insert_or_assign("dig.digI0.reTime[0].s", DumpEntry{dig.digI0.reTime[0].s});
        res.insert_or_assign("dig.digI0.reTime[0].ns", DumpEntry{dig.digI0.reTime[0].ns});
        res.insert_or_assign("dig.digI0.reTime[1].s", DumpEntry{dig.digI0.reTime[1].s});
        res.insert_or_assign("dig.digI0.reTime[1].ns", DumpEntry{dig.digI0.reTime[1].ns});
        res.insert_or_assign("dig.digI0.reTime[2].s", DumpEntry{dig.digI0.reTime[2].s});
        res.insert_or_assign("dig.digI0.reTime[2].ns", DumpEntry{dig.digI0.reTime[2].ns});
        res.insert_or_assign("dig.digI0.reTime[3].s", DumpEntry{dig.digI0.reTime[3].s});
        res.insert_or_assign("dig.digI0.reTime[3].ns", DumpEntry{dig.digI0.reTime[3].ns});
        res.insert_or_assign("dig.digI0.reTime[4].s", DumpEntry{dig.digI0.reTime[4].s});
        res.insert_or_assign("dig.digI0.reTime[4].ns", DumpEntry{dig.digI0.reTime[4].ns});
        res.insert_or_assign("dig.digI0.reTime[5].s", DumpEntry{dig.digI0.reTime[5].s});
        res.insert_or_assign("dig.digI0.reTime[5].ns", DumpEntry{dig.digI0.reTime[5].ns});
        res.insert_or_assign("dig.digI0.reTime[6].s", DumpEntry{dig.digI0.reTime[6].s});
        res.insert_or_assign("dig.digI0.reTime[6].ns", DumpEntry{dig.digI0.reTime[6].ns});
        res.insert_or_assign("dig.digI0.reTime[7].s", DumpEntry{dig.digI0.reTime[7].s});
        res.insert_or_assign("dig.digI0.reTime[7].ns", DumpEntry{dig.digI0.reTime[7].ns});
        res.insert_or_assign("dig.digI0.reTime[8].s", DumpEntry{dig.digI0.reTime[8].s});
        res.insert_or_assign("dig.digI0.reTime[8].ns", DumpEntry{dig.digI0.reTime[8].ns});
        res.insert_or_assign("dig.digI0.reTime[9].s", DumpEntry{dig.digI0.reTime[9].s});
        res.insert_or_assign("dig.digI0.reTime[9].ns", DumpEntry{dig.digI0.reTime[9].ns});
        res.insert_or_assign("dig.digI0.reTime[10].s", DumpEntry{dig.digI0.reTime[10].s});
        res.insert_or_assign("dig.digI0.reTime[10].ns", DumpEntry{dig.digI0.reTime[10].ns});
        res.insert_or_assign("dig.digI0.reTime[11].s", DumpEntry{dig.digI0.reTime[11].s});
        res.insert_or_assign("dig.digI0.reTime[11].ns", DumpEntry{dig.digI0.reTime[11].ns});
        res.insert_or_assign("dig.digI0.reTime[12].s", DumpEntry{dig.digI0.reTime[12].s});
        res.insert_or_assign("dig.digI0.reTime[12].ns", DumpEntry{dig.digI0.reTime[12].ns});
        res.insert_or_assign("dig.digI0.reTime[13].s", DumpEntry{dig.digI0.reTime[13].s});
        res.insert_or_assign("dig.digI0.reTime[13].ns", DumpEntry{dig.digI0.reTime[13].ns});
        res.insert_or_assign("dig.digI0.reTime[14].s", DumpEntry{dig.digI0.reTime[14].s});
        res.insert_or_assign("dig.digI0.reTime[14].ns", DumpEntry{dig.digI0.reTime[14].ns});
        res.insert_or_assign("dig.digI0.reTime[15].s", DumpEntry{dig.digI0.reTime[15].s});
        res.insert_or_assign("dig.digI0.reTime[15].ns", DumpEntry{dig.digI0.reTime[15].ns});
        res.insert_or_assign("dig.digI0.reTime[16].s", DumpEntry{dig.digI0.reTime[16].s});
        res.insert_or_assign("dig.digI0.reTime[16].ns", DumpEntry{dig.digI0.reTime[16].ns});
        res.insert_or_assign("dig.digI0.reTime[17].s", DumpEntry{dig.digI0.reTime[17].s});
        res.insert_or_assign("dig.digI0.reTime[17].ns", DumpEntry{dig.digI0.reTime[17].ns});
        res.insert_or_assign("dig.digI0.reTime[18].s", DumpEntry{dig.digI0.reTime[18].s});
        res.insert_or_assign("dig.digI0.reTime[18].ns", DumpEntry{dig.digI0.reTime[18].ns});
        res.insert_or_assign("dig.digI0.reTime[19].s", DumpEntry{dig.digI0.reTime[19].s});
        res.insert_or_assign("dig.digI0.reTime[19].ns", DumpEntry{dig.digI0.reTime[19].ns});
        res.insert_or_assign("dig.digI0.reTime[20].s", DumpEntry{dig.digI0.reTime[20].s});
        res.insert_or_assign("dig.digI0.reTime[20].ns", DumpEntry{dig.digI0.reTime[20].ns});
        res.insert_or_assign("dig.digI0.reTime[21].s", DumpEntry{dig.digI0.reTime[21].s});
        res.insert_or_assign("dig.digI0.reTime[21].ns", DumpEntry{dig.digI0.reTime[21].ns});
        res.insert_or_assign("dig.digI0.reTime[22].s", DumpEntry{dig.digI0.reTime[22].s});
        res.insert_or_assign("dig.digI0.reTime[22].ns", DumpEntry{dig.digI0.reTime[22].ns});
        res.insert_or_assign("dig.digI0.reTime[23].s", DumpEntry{dig.digI0.reTime[23].s});
        res.insert_or_assign("dig.digI0.reTime[23].ns", DumpEntry{dig.digI0.reTime[23].ns});
        res.insert_or_assign("dig.digI0.reTime[24].s", DumpEntry{dig.digI0.reTime[24].s});
        res.insert_or_assign("dig.digI0.reTime[24].ns", DumpEntry{dig.digI0.reTime[24].ns});
        res.insert_or_assign("dig.digI0.reTime[25].s", DumpEntry{dig.digI0.reTime[25].s});
        res.insert_or_assign("dig.digI0.reTime[25].ns", DumpEntry{dig.digI0.reTime[25].ns});
        res.insert_or_assign("dig.digI0.reTime[26].s", DumpEntry{dig.digI0.reTime[26].s});
        res.insert_or_assign("dig.digI0.reTime[26].ns", DumpEntry{dig.digI0.reTime[26].ns});
        res.insert_or_assign("dig.digI0.reTime[27].s", DumpEntry{dig.digI0.reTime[27].s});
        res.insert_or_assign("dig.digI0.reTime[27].ns", DumpEntry{dig.digI0.reTime[27].ns});
        res.insert_or_assign("dig.digI0.reTime[28].s", DumpEntry{dig.digI0.reTime[28].s});
        res.insert_or_assign("dig.digI0.reTime[28].ns", DumpEntry{dig.digI0.reTime[28].ns});
        res.insert_or_assign("dig.digI0.reTime[29].s", DumpEntry{dig.digI0.reTime[29].s});
        res.insert_or_assign("dig.digI0.reTime[29].ns", DumpEntry{dig.digI0.reTime[29].ns});
        res.insert_or_assign("dig.digI0.reTime[30].s", DumpEntry{dig.digI0.reTime[30].s});
        res.insert_or_assign("dig.digI0.reTime[30].ns", DumpEntry{dig.digI0.reTime[30].ns});
        res.insert_or_assign("dig.digI0.reTime[31].s", DumpEntry{dig.digI0.reTime[31].s});
        res.insert_or_assign("dig.digI0.reTime[31].ns", DumpEntry{dig.digI0.reTime[31].ns});
        res.insert_or_assign("dig.digI1.staticParams", DumpEntry{dig.digI1.staticParams});
        res.insert_or_assign("dig.digI1.staticParams.invertIsEn", DumpEntry{dig.digI1.staticParams.invertIsEn});
        res.insert_or_assign("dig.digI1.staticParams.enableIsEn", DumpEntry{dig.digI1.staticParams.enableIsEn});
        res.insert_or_assign("dig.digI1.staticParams.latchIsEn", DumpEntry{dig.digI1.staticParams.latchIsEn});
        res.insert_or_assign("dig.digI1.staticParams.deglitchIsEn", DumpEntry{dig.digI1.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digI1.staticParams.reTimeIsEn", DumpEntry{dig.digI1.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digI1.staticParams.numChannels", DumpEntry{dig.digI1.staticParams.numChannels});
        res.insert_or_assign("dig.digI1.data", DumpEntry{dig.digI1.data});
        res.insert_or_assign("dig.digI1.dataChanged", DumpEntry{dig.digI1.dataChanged});
        res.insert_or_assign("dig.digI1.invert", DumpEntry{dig.digI1.invert});
        res.insert_or_assign("dig.digI1.enable", DumpEntry{dig.digI1.enable});
        res.insert_or_assign("dig.digI1.latch", DumpEntry{dig.digI1.latch});
        res.insert_or_assign("dig.digI1.rstLatch", DumpEntry{dig.digI1.rstLatch});
        res.insert_or_assign("dig.digI1.risingInterrupt", DumpEntry{dig.digI1.risingInterrupt});
        res.insert_or_assign("dig.digI1.fallingInterrupt", DumpEntry{dig.digI1.fallingInterrupt});
        res.insert_or_assign("dig.digI1.filterLengthSc[0].val", DumpEntry{dig.digI1.filterLengthSc[0].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[1].val", DumpEntry{dig.digI1.filterLengthSc[1].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[2].val", DumpEntry{dig.digI1.filterLengthSc[2].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[3].val", DumpEntry{dig.digI1.filterLengthSc[3].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[4].val", DumpEntry{dig.digI1.filterLengthSc[4].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[5].val", DumpEntry{dig.digI1.filterLengthSc[5].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[6].val", DumpEntry{dig.digI1.filterLengthSc[6].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[7].val", DumpEntry{dig.digI1.filterLengthSc[7].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[8].val", DumpEntry{dig.digI1.filterLengthSc[8].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[9].val", DumpEntry{dig.digI1.filterLengthSc[9].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[10].val", DumpEntry{dig.digI1.filterLengthSc[10].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[11].val", DumpEntry{dig.digI1.filterLengthSc[11].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[12].val", DumpEntry{dig.digI1.filterLengthSc[12].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[13].val", DumpEntry{dig.digI1.filterLengthSc[13].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[14].val", DumpEntry{dig.digI1.filterLengthSc[14].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[15].val", DumpEntry{dig.digI1.filterLengthSc[15].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[16].val", DumpEntry{dig.digI1.filterLengthSc[16].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[17].val", DumpEntry{dig.digI1.filterLengthSc[17].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[18].val", DumpEntry{dig.digI1.filterLengthSc[18].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[19].val", DumpEntry{dig.digI1.filterLengthSc[19].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[20].val", DumpEntry{dig.digI1.filterLengthSc[20].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[21].val", DumpEntry{dig.digI1.filterLengthSc[21].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[22].val", DumpEntry{dig.digI1.filterLengthSc[22].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[23].val", DumpEntry{dig.digI1.filterLengthSc[23].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[24].val", DumpEntry{dig.digI1.filterLengthSc[24].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[25].val", DumpEntry{dig.digI1.filterLengthSc[25].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[26].val", DumpEntry{dig.digI1.filterLengthSc[26].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[27].val", DumpEntry{dig.digI1.filterLengthSc[27].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[28].val", DumpEntry{dig.digI1.filterLengthSc[28].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[29].val", DumpEntry{dig.digI1.filterLengthSc[29].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[30].val", DumpEntry{dig.digI1.filterLengthSc[30].val});
        res.insert_or_assign("dig.digI1.filterLengthSc[31].val", DumpEntry{dig.digI1.filterLengthSc[31].val});
        res.insert_or_assign("dig.digI1.reTime[0].s", DumpEntry{dig.digI1.reTime[0].s});
        res.insert_or_assign("dig.digI1.reTime[0].ns", DumpEntry{dig.digI1.reTime[0].ns});
        res.insert_or_assign("dig.digI1.reTime[1].s", DumpEntry{dig.digI1.reTime[1].s});
        res.insert_or_assign("dig.digI1.reTime[1].ns", DumpEntry{dig.digI1.reTime[1].ns});
        res.insert_or_assign("dig.digI1.reTime[2].s", DumpEntry{dig.digI1.reTime[2].s});
        res.insert_or_assign("dig.digI1.reTime[2].ns", DumpEntry{dig.digI1.reTime[2].ns});
        res.insert_or_assign("dig.digI1.reTime[3].s", DumpEntry{dig.digI1.reTime[3].s});
        res.insert_or_assign("dig.digI1.reTime[3].ns", DumpEntry{dig.digI1.reTime[3].ns});
        res.insert_or_assign("dig.digI1.reTime[4].s", DumpEntry{dig.digI1.reTime[4].s});
        res.insert_or_assign("dig.digI1.reTime[4].ns", DumpEntry{dig.digI1.reTime[4].ns});
        res.insert_or_assign("dig.digI1.reTime[5].s", DumpEntry{dig.digI1.reTime[5].s});
        res.insert_or_assign("dig.digI1.reTime[5].ns", DumpEntry{dig.digI1.reTime[5].ns});
        res.insert_or_assign("dig.digI1.reTime[6].s", DumpEntry{dig.digI1.reTime[6].s});
        res.insert_or_assign("dig.digI1.reTime[6].ns", DumpEntry{dig.digI1.reTime[6].ns});
        res.insert_or_assign("dig.digI1.reTime[7].s", DumpEntry{dig.digI1.reTime[7].s});
        res.insert_or_assign("dig.digI1.reTime[7].ns", DumpEntry{dig.digI1.reTime[7].ns});
        res.insert_or_assign("dig.digI1.reTime[8].s", DumpEntry{dig.digI1.reTime[8].s});
        res.insert_or_assign("dig.digI1.reTime[8].ns", DumpEntry{dig.digI1.reTime[8].ns});
        res.insert_or_assign("dig.digI1.reTime[9].s", DumpEntry{dig.digI1.reTime[9].s});
        res.insert_or_assign("dig.digI1.reTime[9].ns", DumpEntry{dig.digI1.reTime[9].ns});
        res.insert_or_assign("dig.digI1.reTime[10].s", DumpEntry{dig.digI1.reTime[10].s});
        res.insert_or_assign("dig.digI1.reTime[10].ns", DumpEntry{dig.digI1.reTime[10].ns});
        res.insert_or_assign("dig.digI1.reTime[11].s", DumpEntry{dig.digI1.reTime[11].s});
        res.insert_or_assign("dig.digI1.reTime[11].ns", DumpEntry{dig.digI1.reTime[11].ns});
        res.insert_or_assign("dig.digI1.reTime[12].s", DumpEntry{dig.digI1.reTime[12].s});
        res.insert_or_assign("dig.digI1.reTime[12].ns", DumpEntry{dig.digI1.reTime[12].ns});
        res.insert_or_assign("dig.digI1.reTime[13].s", DumpEntry{dig.digI1.reTime[13].s});
        res.insert_or_assign("dig.digI1.reTime[13].ns", DumpEntry{dig.digI1.reTime[13].ns});
        res.insert_or_assign("dig.digI1.reTime[14].s", DumpEntry{dig.digI1.reTime[14].s});
        res.insert_or_assign("dig.digI1.reTime[14].ns", DumpEntry{dig.digI1.reTime[14].ns});
        res.insert_or_assign("dig.digI1.reTime[15].s", DumpEntry{dig.digI1.reTime[15].s});
        res.insert_or_assign("dig.digI1.reTime[15].ns", DumpEntry{dig.digI1.reTime[15].ns});
        res.insert_or_assign("dig.digI1.reTime[16].s", DumpEntry{dig.digI1.reTime[16].s});
        res.insert_or_assign("dig.digI1.reTime[16].ns", DumpEntry{dig.digI1.reTime[16].ns});
        res.insert_or_assign("dig.digI1.reTime[17].s", DumpEntry{dig.digI1.reTime[17].s});
        res.insert_or_assign("dig.digI1.reTime[17].ns", DumpEntry{dig.digI1.reTime[17].ns});
        res.insert_or_assign("dig.digI1.reTime[18].s", DumpEntry{dig.digI1.reTime[18].s});
        res.insert_or_assign("dig.digI1.reTime[18].ns", DumpEntry{dig.digI1.reTime[18].ns});
        res.insert_or_assign("dig.digI1.reTime[19].s", DumpEntry{dig.digI1.reTime[19].s});
        res.insert_or_assign("dig.digI1.reTime[19].ns", DumpEntry{dig.digI1.reTime[19].ns});
        res.insert_or_assign("dig.digI1.reTime[20].s", DumpEntry{dig.digI1.reTime[20].s});
        res.insert_or_assign("dig.digI1.reTime[20].ns", DumpEntry{dig.digI1.reTime[20].ns});
        res.insert_or_assign("dig.digI1.reTime[21].s", DumpEntry{dig.digI1.reTime[21].s});
        res.insert_or_assign("dig.digI1.reTime[21].ns", DumpEntry{dig.digI1.reTime[21].ns});
        res.insert_or_assign("dig.digI1.reTime[22].s", DumpEntry{dig.digI1.reTime[22].s});
        res.insert_or_assign("dig.digI1.reTime[22].ns", DumpEntry{dig.digI1.reTime[22].ns});
        res.insert_or_assign("dig.digI1.reTime[23].s", DumpEntry{dig.digI1.reTime[23].s});
        res.insert_or_assign("dig.digI1.reTime[23].ns", DumpEntry{dig.digI1.reTime[23].ns});
        res.insert_or_assign("dig.digI1.reTime[24].s", DumpEntry{dig.digI1.reTime[24].s});
        res.insert_or_assign("dig.digI1.reTime[24].ns", DumpEntry{dig.digI1.reTime[24].ns});
        res.insert_or_assign("dig.digI1.reTime[25].s", DumpEntry{dig.digI1.reTime[25].s});
        res.insert_or_assign("dig.digI1.reTime[25].ns", DumpEntry{dig.digI1.reTime[25].ns});
        res.insert_or_assign("dig.digI1.reTime[26].s", DumpEntry{dig.digI1.reTime[26].s});
        res.insert_or_assign("dig.digI1.reTime[26].ns", DumpEntry{dig.digI1.reTime[26].ns});
        res.insert_or_assign("dig.digI1.reTime[27].s", DumpEntry{dig.digI1.reTime[27].s});
        res.insert_or_assign("dig.digI1.reTime[27].ns", DumpEntry{dig.digI1.reTime[27].ns});
        res.insert_or_assign("dig.digI1.reTime[28].s", DumpEntry{dig.digI1.reTime[28].s});
        res.insert_or_assign("dig.digI1.reTime[28].ns", DumpEntry{dig.digI1.reTime[28].ns});
        res.insert_or_assign("dig.digI1.reTime[29].s", DumpEntry{dig.digI1.reTime[29].s});
        res.insert_or_assign("dig.digI1.reTime[29].ns", DumpEntry{dig.digI1.reTime[29].ns});
        res.insert_or_assign("dig.digI1.reTime[30].s", DumpEntry{dig.digI1.reTime[30].s});
        res.insert_or_assign("dig.digI1.reTime[30].ns", DumpEntry{dig.digI1.reTime[30].ns});
        res.insert_or_assign("dig.digI1.reTime[31].s", DumpEntry{dig.digI1.reTime[31].s});
        res.insert_or_assign("dig.digI1.reTime[31].ns", DumpEntry{dig.digI1.reTime[31].ns});
        res.insert_or_assign("dig.digIndI.staticParams", DumpEntry{dig.digIndI.staticParams});
        res.insert_or_assign("dig.digIndI.staticParams.invertIsEn", DumpEntry{dig.digIndI.staticParams.invertIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.enableIsEn", DumpEntry{dig.digIndI.staticParams.enableIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.latchIsEn", DumpEntry{dig.digIndI.staticParams.latchIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.deglitchIsEn", DumpEntry{dig.digIndI.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.reTimeIsEn", DumpEntry{dig.digIndI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.digIndI.staticParams.numChannels", DumpEntry{dig.digIndI.staticParams.numChannels});
        res.insert_or_assign("dig.digIndI.data", DumpEntry{dig.digIndI.data});
        res.insert_or_assign("dig.digIndI.dataChanged", DumpEntry{dig.digIndI.dataChanged});
        res.insert_or_assign("dig.digIndI.invert", DumpEntry{dig.digIndI.invert});
        res.insert_or_assign("dig.digIndI.enable", DumpEntry{dig.digIndI.enable});
        res.insert_or_assign("dig.digIndI.latch", DumpEntry{dig.digIndI.latch});
        res.insert_or_assign("dig.digIndI.rstLatch", DumpEntry{dig.digIndI.rstLatch});
        res.insert_or_assign("dig.digIndI.risingInterrupt", DumpEntry{dig.digIndI.risingInterrupt});
        res.insert_or_assign("dig.digIndI.fallingInterrupt", DumpEntry{dig.digIndI.fallingInterrupt});
        res.insert_or_assign("dig.digIndI.filterLengthSc[0].val", DumpEntry{dig.digIndI.filterLengthSc[0].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[1].val", DumpEntry{dig.digIndI.filterLengthSc[1].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[2].val", DumpEntry{dig.digIndI.filterLengthSc[2].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[3].val", DumpEntry{dig.digIndI.filterLengthSc[3].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[4].val", DumpEntry{dig.digIndI.filterLengthSc[4].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[5].val", DumpEntry{dig.digIndI.filterLengthSc[5].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[6].val", DumpEntry{dig.digIndI.filterLengthSc[6].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[7].val", DumpEntry{dig.digIndI.filterLengthSc[7].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[8].val", DumpEntry{dig.digIndI.filterLengthSc[8].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[9].val", DumpEntry{dig.digIndI.filterLengthSc[9].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[10].val", DumpEntry{dig.digIndI.filterLengthSc[10].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[11].val", DumpEntry{dig.digIndI.filterLengthSc[11].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[12].val", DumpEntry{dig.digIndI.filterLengthSc[12].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[13].val", DumpEntry{dig.digIndI.filterLengthSc[13].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[14].val", DumpEntry{dig.digIndI.filterLengthSc[14].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[15].val", DumpEntry{dig.digIndI.filterLengthSc[15].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[16].val", DumpEntry{dig.digIndI.filterLengthSc[16].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[17].val", DumpEntry{dig.digIndI.filterLengthSc[17].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[18].val", DumpEntry{dig.digIndI.filterLengthSc[18].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[19].val", DumpEntry{dig.digIndI.filterLengthSc[19].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[20].val", DumpEntry{dig.digIndI.filterLengthSc[20].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[21].val", DumpEntry{dig.digIndI.filterLengthSc[21].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[22].val", DumpEntry{dig.digIndI.filterLengthSc[22].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[23].val", DumpEntry{dig.digIndI.filterLengthSc[23].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[24].val", DumpEntry{dig.digIndI.filterLengthSc[24].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[25].val", DumpEntry{dig.digIndI.filterLengthSc[25].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[26].val", DumpEntry{dig.digIndI.filterLengthSc[26].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[27].val", DumpEntry{dig.digIndI.filterLengthSc[27].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[28].val", DumpEntry{dig.digIndI.filterLengthSc[28].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[29].val", DumpEntry{dig.digIndI.filterLengthSc[29].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[30].val", DumpEntry{dig.digIndI.filterLengthSc[30].val});
        res.insert_or_assign("dig.digIndI.filterLengthSc[31].val", DumpEntry{dig.digIndI.filterLengthSc[31].val});
        res.insert_or_assign("dig.digIndI.reTime[0].s", DumpEntry{dig.digIndI.reTime[0].s});
        res.insert_or_assign("dig.digIndI.reTime[0].ns", DumpEntry{dig.digIndI.reTime[0].ns});
        res.insert_or_assign("dig.digIndI.reTime[1].s", DumpEntry{dig.digIndI.reTime[1].s});
        res.insert_or_assign("dig.digIndI.reTime[1].ns", DumpEntry{dig.digIndI.reTime[1].ns});
        res.insert_or_assign("dig.digIndI.reTime[2].s", DumpEntry{dig.digIndI.reTime[2].s});
        res.insert_or_assign("dig.digIndI.reTime[2].ns", DumpEntry{dig.digIndI.reTime[2].ns});
        res.insert_or_assign("dig.digIndI.reTime[3].s", DumpEntry{dig.digIndI.reTime[3].s});
        res.insert_or_assign("dig.digIndI.reTime[3].ns", DumpEntry{dig.digIndI.reTime[3].ns});
        res.insert_or_assign("dig.digIndI.reTime[4].s", DumpEntry{dig.digIndI.reTime[4].s});
        res.insert_or_assign("dig.digIndI.reTime[4].ns", DumpEntry{dig.digIndI.reTime[4].ns});
        res.insert_or_assign("dig.digIndI.reTime[5].s", DumpEntry{dig.digIndI.reTime[5].s});
        res.insert_or_assign("dig.digIndI.reTime[5].ns", DumpEntry{dig.digIndI.reTime[5].ns});
        res.insert_or_assign("dig.digIndI.reTime[6].s", DumpEntry{dig.digIndI.reTime[6].s});
        res.insert_or_assign("dig.digIndI.reTime[6].ns", DumpEntry{dig.digIndI.reTime[6].ns});
        res.insert_or_assign("dig.digIndI.reTime[7].s", DumpEntry{dig.digIndI.reTime[7].s});
        res.insert_or_assign("dig.digIndI.reTime[7].ns", DumpEntry{dig.digIndI.reTime[7].ns});
        res.insert_or_assign("dig.digIndI.reTime[8].s", DumpEntry{dig.digIndI.reTime[8].s});
        res.insert_or_assign("dig.digIndI.reTime[8].ns", DumpEntry{dig.digIndI.reTime[8].ns});
        res.insert_or_assign("dig.digIndI.reTime[9].s", DumpEntry{dig.digIndI.reTime[9].s});
        res.insert_or_assign("dig.digIndI.reTime[9].ns", DumpEntry{dig.digIndI.reTime[9].ns});
        res.insert_or_assign("dig.digIndI.reTime[10].s", DumpEntry{dig.digIndI.reTime[10].s});
        res.insert_or_assign("dig.digIndI.reTime[10].ns", DumpEntry{dig.digIndI.reTime[10].ns});
        res.insert_or_assign("dig.digIndI.reTime[11].s", DumpEntry{dig.digIndI.reTime[11].s});
        res.insert_or_assign("dig.digIndI.reTime[11].ns", DumpEntry{dig.digIndI.reTime[11].ns});
        res.insert_or_assign("dig.digIndI.reTime[12].s", DumpEntry{dig.digIndI.reTime[12].s});
        res.insert_or_assign("dig.digIndI.reTime[12].ns", DumpEntry{dig.digIndI.reTime[12].ns});
        res.insert_or_assign("dig.digIndI.reTime[13].s", DumpEntry{dig.digIndI.reTime[13].s});
        res.insert_or_assign("dig.digIndI.reTime[13].ns", DumpEntry{dig.digIndI.reTime[13].ns});
        res.insert_or_assign("dig.digIndI.reTime[14].s", DumpEntry{dig.digIndI.reTime[14].s});
        res.insert_or_assign("dig.digIndI.reTime[14].ns", DumpEntry{dig.digIndI.reTime[14].ns});
        res.insert_or_assign("dig.digIndI.reTime[15].s", DumpEntry{dig.digIndI.reTime[15].s});
        res.insert_or_assign("dig.digIndI.reTime[15].ns", DumpEntry{dig.digIndI.reTime[15].ns});
        res.insert_or_assign("dig.digIndI.reTime[16].s", DumpEntry{dig.digIndI.reTime[16].s});
        res.insert_or_assign("dig.digIndI.reTime[16].ns", DumpEntry{dig.digIndI.reTime[16].ns});
        res.insert_or_assign("dig.digIndI.reTime[17].s", DumpEntry{dig.digIndI.reTime[17].s});
        res.insert_or_assign("dig.digIndI.reTime[17].ns", DumpEntry{dig.digIndI.reTime[17].ns});
        res.insert_or_assign("dig.digIndI.reTime[18].s", DumpEntry{dig.digIndI.reTime[18].s});
        res.insert_or_assign("dig.digIndI.reTime[18].ns", DumpEntry{dig.digIndI.reTime[18].ns});
        res.insert_or_assign("dig.digIndI.reTime[19].s", DumpEntry{dig.digIndI.reTime[19].s});
        res.insert_or_assign("dig.digIndI.reTime[19].ns", DumpEntry{dig.digIndI.reTime[19].ns});
        res.insert_or_assign("dig.digIndI.reTime[20].s", DumpEntry{dig.digIndI.reTime[20].s});
        res.insert_or_assign("dig.digIndI.reTime[20].ns", DumpEntry{dig.digIndI.reTime[20].ns});
        res.insert_or_assign("dig.digIndI.reTime[21].s", DumpEntry{dig.digIndI.reTime[21].s});
        res.insert_or_assign("dig.digIndI.reTime[21].ns", DumpEntry{dig.digIndI.reTime[21].ns});
        res.insert_or_assign("dig.digIndI.reTime[22].s", DumpEntry{dig.digIndI.reTime[22].s});
        res.insert_or_assign("dig.digIndI.reTime[22].ns", DumpEntry{dig.digIndI.reTime[22].ns});
        res.insert_or_assign("dig.digIndI.reTime[23].s", DumpEntry{dig.digIndI.reTime[23].s});
        res.insert_or_assign("dig.digIndI.reTime[23].ns", DumpEntry{dig.digIndI.reTime[23].ns});
        res.insert_or_assign("dig.digIndI.reTime[24].s", DumpEntry{dig.digIndI.reTime[24].s});
        res.insert_or_assign("dig.digIndI.reTime[24].ns", DumpEntry{dig.digIndI.reTime[24].ns});
        res.insert_or_assign("dig.digIndI.reTime[25].s", DumpEntry{dig.digIndI.reTime[25].s});
        res.insert_or_assign("dig.digIndI.reTime[25].ns", DumpEntry{dig.digIndI.reTime[25].ns});
        res.insert_or_assign("dig.digIndI.reTime[26].s", DumpEntry{dig.digIndI.reTime[26].s});
        res.insert_or_assign("dig.digIndI.reTime[26].ns", DumpEntry{dig.digIndI.reTime[26].ns});
        res.insert_or_assign("dig.digIndI.reTime[27].s", DumpEntry{dig.digIndI.reTime[27].s});
        res.insert_or_assign("dig.digIndI.reTime[27].ns", DumpEntry{dig.digIndI.reTime[27].ns});
        res.insert_or_assign("dig.digIndI.reTime[28].s", DumpEntry{dig.digIndI.reTime[28].s});
        res.insert_or_assign("dig.digIndI.reTime[28].ns", DumpEntry{dig.digIndI.reTime[28].ns});
        res.insert_or_assign("dig.digIndI.reTime[29].s", DumpEntry{dig.digIndI.reTime[29].s});
        res.insert_or_assign("dig.digIndI.reTime[29].ns", DumpEntry{dig.digIndI.reTime[29].ns});
        res.insert_or_assign("dig.digIndI.reTime[30].s", DumpEntry{dig.digIndI.reTime[30].s});
        res.insert_or_assign("dig.digIndI.reTime[30].ns", DumpEntry{dig.digIndI.reTime[30].ns});
        res.insert_or_assign("dig.digIndI.reTime[31].s", DumpEntry{dig.digIndI.reTime[31].s});
        res.insert_or_assign("dig.digIndI.reTime[31].ns", DumpEntry{dig.digIndI.reTime[31].ns});
        res.insert_or_assign("dig.contactI.staticParams", DumpEntry{dig.contactI.staticParams});
        res.insert_or_assign("dig.contactI.staticParams.invertIsEn", DumpEntry{dig.contactI.staticParams.invertIsEn});
        res.insert_or_assign("dig.contactI.staticParams.enableIsEn", DumpEntry{dig.contactI.staticParams.enableIsEn});
        res.insert_or_assign("dig.contactI.staticParams.latchIsEn", DumpEntry{dig.contactI.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.contactI.staticParams.deglitchIsEn", DumpEntry{dig.contactI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("dig.contactI.staticParams.reTimeIsEn", DumpEntry{dig.contactI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.contactI.staticParams.numChannels", DumpEntry{dig.contactI.staticParams.numChannels});
        res.insert_or_assign("dig.contactI.data", DumpEntry{dig.contactI.data});
        res.insert_or_assign("dig.contactI.dataChanged", DumpEntry{dig.contactI.dataChanged});
        res.insert_or_assign("dig.contactI.invert", DumpEntry{dig.contactI.invert});
        res.insert_or_assign("dig.contactI.enable", DumpEntry{dig.contactI.enable});
        res.insert_or_assign("dig.contactI.latch", DumpEntry{dig.contactI.latch});
        res.insert_or_assign("dig.contactI.rstLatch", DumpEntry{dig.contactI.rstLatch});
        res.insert_or_assign("dig.contactI.risingInterrupt", DumpEntry{dig.contactI.risingInterrupt});
        res.insert_or_assign("dig.contactI.fallingInterrupt", DumpEntry{dig.contactI.fallingInterrupt});
        res.insert_or_assign("dig.contactI.filterLengthSc[0].val", DumpEntry{dig.contactI.filterLengthSc[0].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[1].val", DumpEntry{dig.contactI.filterLengthSc[1].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[2].val", DumpEntry{dig.contactI.filterLengthSc[2].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[3].val", DumpEntry{dig.contactI.filterLengthSc[3].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[4].val", DumpEntry{dig.contactI.filterLengthSc[4].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[5].val", DumpEntry{dig.contactI.filterLengthSc[5].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[6].val", DumpEntry{dig.contactI.filterLengthSc[6].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[7].val", DumpEntry{dig.contactI.filterLengthSc[7].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[8].val", DumpEntry{dig.contactI.filterLengthSc[8].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[9].val", DumpEntry{dig.contactI.filterLengthSc[9].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[10].val", DumpEntry{dig.contactI.filterLengthSc[10].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[11].val", DumpEntry{dig.contactI.filterLengthSc[11].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[12].val", DumpEntry{dig.contactI.filterLengthSc[12].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[13].val", DumpEntry{dig.contactI.filterLengthSc[13].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[14].val", DumpEntry{dig.contactI.filterLengthSc[14].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[15].val", DumpEntry{dig.contactI.filterLengthSc[15].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[16].val", DumpEntry{dig.contactI.filterLengthSc[16].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[17].val", DumpEntry{dig.contactI.filterLengthSc[17].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[18].val", DumpEntry{dig.contactI.filterLengthSc[18].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[19].val", DumpEntry{dig.contactI.filterLengthSc[19].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[20].val", DumpEntry{dig.contactI.filterLengthSc[20].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[21].val", DumpEntry{dig.contactI.filterLengthSc[21].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[22].val", DumpEntry{dig.contactI.filterLengthSc[22].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[23].val", DumpEntry{dig.contactI.filterLengthSc[23].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[24].val", DumpEntry{dig.contactI.filterLengthSc[24].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[25].val", DumpEntry{dig.contactI.filterLengthSc[25].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[26].val", DumpEntry{dig.contactI.filterLengthSc[26].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[27].val", DumpEntry{dig.contactI.filterLengthSc[27].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[28].val", DumpEntry{dig.contactI.filterLengthSc[28].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[29].val", DumpEntry{dig.contactI.filterLengthSc[29].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[30].val", DumpEntry{dig.contactI.filterLengthSc[30].val});
        res.insert_or_assign("dig.contactI.filterLengthSc[31].val", DumpEntry{dig.contactI.filterLengthSc[31].val});
        res.insert_or_assign("dig.contactI.reTime[0].s", DumpEntry{dig.contactI.reTime[0].s});
        res.insert_or_assign("dig.contactI.reTime[0].ns", DumpEntry{dig.contactI.reTime[0].ns});
        res.insert_or_assign("dig.contactI.reTime[1].s", DumpEntry{dig.contactI.reTime[1].s});
        res.insert_or_assign("dig.contactI.reTime[1].ns", DumpEntry{dig.contactI.reTime[1].ns});
        res.insert_or_assign("dig.contactI.reTime[2].s", DumpEntry{dig.contactI.reTime[2].s});
        res.insert_or_assign("dig.contactI.reTime[2].ns", DumpEntry{dig.contactI.reTime[2].ns});
        res.insert_or_assign("dig.contactI.reTime[3].s", DumpEntry{dig.contactI.reTime[3].s});
        res.insert_or_assign("dig.contactI.reTime[3].ns", DumpEntry{dig.contactI.reTime[3].ns});
        res.insert_or_assign("dig.contactI.reTime[4].s", DumpEntry{dig.contactI.reTime[4].s});
        res.insert_or_assign("dig.contactI.reTime[4].ns", DumpEntry{dig.contactI.reTime[4].ns});
        res.insert_or_assign("dig.contactI.reTime[5].s", DumpEntry{dig.contactI.reTime[5].s});
        res.insert_or_assign("dig.contactI.reTime[5].ns", DumpEntry{dig.contactI.reTime[5].ns});
        res.insert_or_assign("dig.contactI.reTime[6].s", DumpEntry{dig.contactI.reTime[6].s});
        res.insert_or_assign("dig.contactI.reTime[6].ns", DumpEntry{dig.contactI.reTime[6].ns});
        res.insert_or_assign("dig.contactI.reTime[7].s", DumpEntry{dig.contactI.reTime[7].s});
        res.insert_or_assign("dig.contactI.reTime[7].ns", DumpEntry{dig.contactI.reTime[7].ns});
        res.insert_or_assign("dig.contactI.reTime[8].s", DumpEntry{dig.contactI.reTime[8].s});
        res.insert_or_assign("dig.contactI.reTime[8].ns", DumpEntry{dig.contactI.reTime[8].ns});
        res.insert_or_assign("dig.contactI.reTime[9].s", DumpEntry{dig.contactI.reTime[9].s});
        res.insert_or_assign("dig.contactI.reTime[9].ns", DumpEntry{dig.contactI.reTime[9].ns});
        res.insert_or_assign("dig.contactI.reTime[10].s", DumpEntry{dig.contactI.reTime[10].s});
        res.insert_or_assign("dig.contactI.reTime[10].ns", DumpEntry{dig.contactI.reTime[10].ns});
        res.insert_or_assign("dig.contactI.reTime[11].s", DumpEntry{dig.contactI.reTime[11].s});
        res.insert_or_assign("dig.contactI.reTime[11].ns", DumpEntry{dig.contactI.reTime[11].ns});
        res.insert_or_assign("dig.contactI.reTime[12].s", DumpEntry{dig.contactI.reTime[12].s});
        res.insert_or_assign("dig.contactI.reTime[12].ns", DumpEntry{dig.contactI.reTime[12].ns});
        res.insert_or_assign("dig.contactI.reTime[13].s", DumpEntry{dig.contactI.reTime[13].s});
        res.insert_or_assign("dig.contactI.reTime[13].ns", DumpEntry{dig.contactI.reTime[13].ns});
        res.insert_or_assign("dig.contactI.reTime[14].s", DumpEntry{dig.contactI.reTime[14].s});
        res.insert_or_assign("dig.contactI.reTime[14].ns", DumpEntry{dig.contactI.reTime[14].ns});
        res.insert_or_assign("dig.contactI.reTime[15].s", DumpEntry{dig.contactI.reTime[15].s});
        res.insert_or_assign("dig.contactI.reTime[15].ns", DumpEntry{dig.contactI.reTime[15].ns});
        res.insert_or_assign("dig.contactI.reTime[16].s", DumpEntry{dig.contactI.reTime[16].s});
        res.insert_or_assign("dig.contactI.reTime[16].ns", DumpEntry{dig.contactI.reTime[16].ns});
        res.insert_or_assign("dig.contactI.reTime[17].s", DumpEntry{dig.contactI.reTime[17].s});
        res.insert_or_assign("dig.contactI.reTime[17].ns", DumpEntry{dig.contactI.reTime[17].ns});
        res.insert_or_assign("dig.contactI.reTime[18].s", DumpEntry{dig.contactI.reTime[18].s});
        res.insert_or_assign("dig.contactI.reTime[18].ns", DumpEntry{dig.contactI.reTime[18].ns});
        res.insert_or_assign("dig.contactI.reTime[19].s", DumpEntry{dig.contactI.reTime[19].s});
        res.insert_or_assign("dig.contactI.reTime[19].ns", DumpEntry{dig.contactI.reTime[19].ns});
        res.insert_or_assign("dig.contactI.reTime[20].s", DumpEntry{dig.contactI.reTime[20].s});
        res.insert_or_assign("dig.contactI.reTime[20].ns", DumpEntry{dig.contactI.reTime[20].ns});
        res.insert_or_assign("dig.contactI.reTime[21].s", DumpEntry{dig.contactI.reTime[21].s});
        res.insert_or_assign("dig.contactI.reTime[21].ns", DumpEntry{dig.contactI.reTime[21].ns});
        res.insert_or_assign("dig.contactI.reTime[22].s", DumpEntry{dig.contactI.reTime[22].s});
        res.insert_or_assign("dig.contactI.reTime[22].ns", DumpEntry{dig.contactI.reTime[22].ns});
        res.insert_or_assign("dig.contactI.reTime[23].s", DumpEntry{dig.contactI.reTime[23].s});
        res.insert_or_assign("dig.contactI.reTime[23].ns", DumpEntry{dig.contactI.reTime[23].ns});
        res.insert_or_assign("dig.contactI.reTime[24].s", DumpEntry{dig.contactI.reTime[24].s});
        res.insert_or_assign("dig.contactI.reTime[24].ns", DumpEntry{dig.contactI.reTime[24].ns});
        res.insert_or_assign("dig.contactI.reTime[25].s", DumpEntry{dig.contactI.reTime[25].s});
        res.insert_or_assign("dig.contactI.reTime[25].ns", DumpEntry{dig.contactI.reTime[25].ns});
        res.insert_or_assign("dig.contactI.reTime[26].s", DumpEntry{dig.contactI.reTime[26].s});
        res.insert_or_assign("dig.contactI.reTime[26].ns", DumpEntry{dig.contactI.reTime[26].ns});
        res.insert_or_assign("dig.contactI.reTime[27].s", DumpEntry{dig.contactI.reTime[27].s});
        res.insert_or_assign("dig.contactI.reTime[27].ns", DumpEntry{dig.contactI.reTime[27].ns});
        res.insert_or_assign("dig.contactI.reTime[28].s", DumpEntry{dig.contactI.reTime[28].s});
        res.insert_or_assign("dig.contactI.reTime[28].ns", DumpEntry{dig.contactI.reTime[28].ns});
        res.insert_or_assign("dig.contactI.reTime[29].s", DumpEntry{dig.contactI.reTime[29].s});
        res.insert_or_assign("dig.contactI.reTime[29].ns", DumpEntry{dig.contactI.reTime[29].ns});
        res.insert_or_assign("dig.contactI.reTime[30].s", DumpEntry{dig.contactI.reTime[30].s});
        res.insert_or_assign("dig.contactI.reTime[30].ns", DumpEntry{dig.contactI.reTime[30].ns});
        res.insert_or_assign("dig.contactI.reTime[31].s", DumpEntry{dig.contactI.reTime[31].s});
        res.insert_or_assign("dig.contactI.reTime[31].ns", DumpEntry{dig.contactI.reTime[31].ns});
        res.insert_or_assign("dig.opticalI.staticParams", DumpEntry{dig.opticalI.staticParams});
        res.insert_or_assign("dig.opticalI.staticParams.invertIsEn", DumpEntry{dig.opticalI.staticParams.invertIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.enableIsEn", DumpEntry{dig.opticalI.staticParams.enableIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.latchIsEn", DumpEntry{dig.opticalI.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.opticalI.staticParams.deglitchIsEn", DumpEntry{dig.opticalI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("dig.opticalI.staticParams.reTimeIsEn", DumpEntry{dig.opticalI.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.opticalI.staticParams.numChannels", DumpEntry{dig.opticalI.staticParams.numChannels});
        res.insert_or_assign("dig.opticalI.data", DumpEntry{dig.opticalI.data});
        res.insert_or_assign("dig.opticalI.dataChanged", DumpEntry{dig.opticalI.dataChanged});
        res.insert_or_assign("dig.opticalI.invert", DumpEntry{dig.opticalI.invert});
        res.insert_or_assign("dig.opticalI.enable", DumpEntry{dig.opticalI.enable});
        res.insert_or_assign("dig.opticalI.latch", DumpEntry{dig.opticalI.latch});
        res.insert_or_assign("dig.opticalI.rstLatch", DumpEntry{dig.opticalI.rstLatch});
        res.insert_or_assign("dig.opticalI.risingInterrupt", DumpEntry{dig.opticalI.risingInterrupt});
        res.insert_or_assign("dig.opticalI.fallingInterrupt", DumpEntry{dig.opticalI.fallingInterrupt});
        res.insert_or_assign("dig.opticalI.filterLengthSc[0].val", DumpEntry{dig.opticalI.filterLengthSc[0].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[1].val", DumpEntry{dig.opticalI.filterLengthSc[1].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[2].val", DumpEntry{dig.opticalI.filterLengthSc[2].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[3].val", DumpEntry{dig.opticalI.filterLengthSc[3].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[4].val", DumpEntry{dig.opticalI.filterLengthSc[4].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[5].val", DumpEntry{dig.opticalI.filterLengthSc[5].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[6].val", DumpEntry{dig.opticalI.filterLengthSc[6].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[7].val", DumpEntry{dig.opticalI.filterLengthSc[7].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[8].val", DumpEntry{dig.opticalI.filterLengthSc[8].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[9].val", DumpEntry{dig.opticalI.filterLengthSc[9].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[10].val", DumpEntry{dig.opticalI.filterLengthSc[10].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[11].val", DumpEntry{dig.opticalI.filterLengthSc[11].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[12].val", DumpEntry{dig.opticalI.filterLengthSc[12].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[13].val", DumpEntry{dig.opticalI.filterLengthSc[13].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[14].val", DumpEntry{dig.opticalI.filterLengthSc[14].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[15].val", DumpEntry{dig.opticalI.filterLengthSc[15].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[16].val", DumpEntry{dig.opticalI.filterLengthSc[16].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[17].val", DumpEntry{dig.opticalI.filterLengthSc[17].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[18].val", DumpEntry{dig.opticalI.filterLengthSc[18].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[19].val", DumpEntry{dig.opticalI.filterLengthSc[19].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[20].val", DumpEntry{dig.opticalI.filterLengthSc[20].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[21].val", DumpEntry{dig.opticalI.filterLengthSc[21].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[22].val", DumpEntry{dig.opticalI.filterLengthSc[22].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[23].val", DumpEntry{dig.opticalI.filterLengthSc[23].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[24].val", DumpEntry{dig.opticalI.filterLengthSc[24].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[25].val", DumpEntry{dig.opticalI.filterLengthSc[25].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[26].val", DumpEntry{dig.opticalI.filterLengthSc[26].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[27].val", DumpEntry{dig.opticalI.filterLengthSc[27].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[28].val", DumpEntry{dig.opticalI.filterLengthSc[28].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[29].val", DumpEntry{dig.opticalI.filterLengthSc[29].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[30].val", DumpEntry{dig.opticalI.filterLengthSc[30].val});
        res.insert_or_assign("dig.opticalI.filterLengthSc[31].val", DumpEntry{dig.opticalI.filterLengthSc[31].val});
        res.insert_or_assign("dig.opticalI.reTime[0].s", DumpEntry{dig.opticalI.reTime[0].s});
        res.insert_or_assign("dig.opticalI.reTime[0].ns", DumpEntry{dig.opticalI.reTime[0].ns});
        res.insert_or_assign("dig.opticalI.reTime[1].s", DumpEntry{dig.opticalI.reTime[1].s});
        res.insert_or_assign("dig.opticalI.reTime[1].ns", DumpEntry{dig.opticalI.reTime[1].ns});
        res.insert_or_assign("dig.opticalI.reTime[2].s", DumpEntry{dig.opticalI.reTime[2].s});
        res.insert_or_assign("dig.opticalI.reTime[2].ns", DumpEntry{dig.opticalI.reTime[2].ns});
        res.insert_or_assign("dig.opticalI.reTime[3].s", DumpEntry{dig.opticalI.reTime[3].s});
        res.insert_or_assign("dig.opticalI.reTime[3].ns", DumpEntry{dig.opticalI.reTime[3].ns});
        res.insert_or_assign("dig.opticalI.reTime[4].s", DumpEntry{dig.opticalI.reTime[4].s});
        res.insert_or_assign("dig.opticalI.reTime[4].ns", DumpEntry{dig.opticalI.reTime[4].ns});
        res.insert_or_assign("dig.opticalI.reTime[5].s", DumpEntry{dig.opticalI.reTime[5].s});
        res.insert_or_assign("dig.opticalI.reTime[5].ns", DumpEntry{dig.opticalI.reTime[5].ns});
        res.insert_or_assign("dig.opticalI.reTime[6].s", DumpEntry{dig.opticalI.reTime[6].s});
        res.insert_or_assign("dig.opticalI.reTime[6].ns", DumpEntry{dig.opticalI.reTime[6].ns});
        res.insert_or_assign("dig.opticalI.reTime[7].s", DumpEntry{dig.opticalI.reTime[7].s});
        res.insert_or_assign("dig.opticalI.reTime[7].ns", DumpEntry{dig.opticalI.reTime[7].ns});
        res.insert_or_assign("dig.opticalI.reTime[8].s", DumpEntry{dig.opticalI.reTime[8].s});
        res.insert_or_assign("dig.opticalI.reTime[8].ns", DumpEntry{dig.opticalI.reTime[8].ns});
        res.insert_or_assign("dig.opticalI.reTime[9].s", DumpEntry{dig.opticalI.reTime[9].s});
        res.insert_or_assign("dig.opticalI.reTime[9].ns", DumpEntry{dig.opticalI.reTime[9].ns});
        res.insert_or_assign("dig.opticalI.reTime[10].s", DumpEntry{dig.opticalI.reTime[10].s});
        res.insert_or_assign("dig.opticalI.reTime[10].ns", DumpEntry{dig.opticalI.reTime[10].ns});
        res.insert_or_assign("dig.opticalI.reTime[11].s", DumpEntry{dig.opticalI.reTime[11].s});
        res.insert_or_assign("dig.opticalI.reTime[11].ns", DumpEntry{dig.opticalI.reTime[11].ns});
        res.insert_or_assign("dig.opticalI.reTime[12].s", DumpEntry{dig.opticalI.reTime[12].s});
        res.insert_or_assign("dig.opticalI.reTime[12].ns", DumpEntry{dig.opticalI.reTime[12].ns});
        res.insert_or_assign("dig.opticalI.reTime[13].s", DumpEntry{dig.opticalI.reTime[13].s});
        res.insert_or_assign("dig.opticalI.reTime[13].ns", DumpEntry{dig.opticalI.reTime[13].ns});
        res.insert_or_assign("dig.opticalI.reTime[14].s", DumpEntry{dig.opticalI.reTime[14].s});
        res.insert_or_assign("dig.opticalI.reTime[14].ns", DumpEntry{dig.opticalI.reTime[14].ns});
        res.insert_or_assign("dig.opticalI.reTime[15].s", DumpEntry{dig.opticalI.reTime[15].s});
        res.insert_or_assign("dig.opticalI.reTime[15].ns", DumpEntry{dig.opticalI.reTime[15].ns});
        res.insert_or_assign("dig.opticalI.reTime[16].s", DumpEntry{dig.opticalI.reTime[16].s});
        res.insert_or_assign("dig.opticalI.reTime[16].ns", DumpEntry{dig.opticalI.reTime[16].ns});
        res.insert_or_assign("dig.opticalI.reTime[17].s", DumpEntry{dig.opticalI.reTime[17].s});
        res.insert_or_assign("dig.opticalI.reTime[17].ns", DumpEntry{dig.opticalI.reTime[17].ns});
        res.insert_or_assign("dig.opticalI.reTime[18].s", DumpEntry{dig.opticalI.reTime[18].s});
        res.insert_or_assign("dig.opticalI.reTime[18].ns", DumpEntry{dig.opticalI.reTime[18].ns});
        res.insert_or_assign("dig.opticalI.reTime[19].s", DumpEntry{dig.opticalI.reTime[19].s});
        res.insert_or_assign("dig.opticalI.reTime[19].ns", DumpEntry{dig.opticalI.reTime[19].ns});
        res.insert_or_assign("dig.opticalI.reTime[20].s", DumpEntry{dig.opticalI.reTime[20].s});
        res.insert_or_assign("dig.opticalI.reTime[20].ns", DumpEntry{dig.opticalI.reTime[20].ns});
        res.insert_or_assign("dig.opticalI.reTime[21].s", DumpEntry{dig.opticalI.reTime[21].s});
        res.insert_or_assign("dig.opticalI.reTime[21].ns", DumpEntry{dig.opticalI.reTime[21].ns});
        res.insert_or_assign("dig.opticalI.reTime[22].s", DumpEntry{dig.opticalI.reTime[22].s});
        res.insert_or_assign("dig.opticalI.reTime[22].ns", DumpEntry{dig.opticalI.reTime[22].ns});
        res.insert_or_assign("dig.opticalI.reTime[23].s", DumpEntry{dig.opticalI.reTime[23].s});
        res.insert_or_assign("dig.opticalI.reTime[23].ns", DumpEntry{dig.opticalI.reTime[23].ns});
        res.insert_or_assign("dig.opticalI.reTime[24].s", DumpEntry{dig.opticalI.reTime[24].s});
        res.insert_or_assign("dig.opticalI.reTime[24].ns", DumpEntry{dig.opticalI.reTime[24].ns});
        res.insert_or_assign("dig.opticalI.reTime[25].s", DumpEntry{dig.opticalI.reTime[25].s});
        res.insert_or_assign("dig.opticalI.reTime[25].ns", DumpEntry{dig.opticalI.reTime[25].ns});
        res.insert_or_assign("dig.opticalI.reTime[26].s", DumpEntry{dig.opticalI.reTime[26].s});
        res.insert_or_assign("dig.opticalI.reTime[26].ns", DumpEntry{dig.opticalI.reTime[26].ns});
        res.insert_or_assign("dig.opticalI.reTime[27].s", DumpEntry{dig.opticalI.reTime[27].s});
        res.insert_or_assign("dig.opticalI.reTime[27].ns", DumpEntry{dig.opticalI.reTime[27].ns});
        res.insert_or_assign("dig.opticalI.reTime[28].s", DumpEntry{dig.opticalI.reTime[28].s});
        res.insert_or_assign("dig.opticalI.reTime[28].ns", DumpEntry{dig.opticalI.reTime[28].ns});
        res.insert_or_assign("dig.opticalI.reTime[29].s", DumpEntry{dig.opticalI.reTime[29].s});
        res.insert_or_assign("dig.opticalI.reTime[29].ns", DumpEntry{dig.opticalI.reTime[29].ns});
        res.insert_or_assign("dig.opticalI.reTime[30].s", DumpEntry{dig.opticalI.reTime[30].s});
        res.insert_or_assign("dig.opticalI.reTime[30].ns", DumpEntry{dig.opticalI.reTime[30].ns});
        res.insert_or_assign("dig.opticalI.reTime[31].s", DumpEntry{dig.opticalI.reTime[31].s});
        res.insert_or_assign("dig.opticalI.reTime[31].ns", DumpEntry{dig.opticalI.reTime[31].ns});
        res.insert_or_assign("dig.minMaxLim0.staticParams", DumpEntry{dig.minMaxLim0.staticParams});
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.invertIsEn", DumpEntry{dig.minMaxLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.enableIsEn", DumpEntry{dig.minMaxLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign("dig.minMaxLim0.staticParams.latchIsEn", DumpEntry{dig.minMaxLim0.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.deglitchIsEn", DumpEntry{dig.minMaxLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.reTimeIsEn", DumpEntry{dig.minMaxLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim0.staticParams.numChannels", DumpEntry{dig.minMaxLim0.staticParams.numChannels}
        );
        res.insert_or_assign("dig.minMaxLim0.data", DumpEntry{dig.minMaxLim0.data});
        res.insert_or_assign("dig.minMaxLim0.dataChanged", DumpEntry{dig.minMaxLim0.dataChanged});
        res.insert_or_assign("dig.minMaxLim0.invert", DumpEntry{dig.minMaxLim0.invert});
        res.insert_or_assign("dig.minMaxLim0.enable", DumpEntry{dig.minMaxLim0.enable});
        res.insert_or_assign("dig.minMaxLim0.latch", DumpEntry{dig.minMaxLim0.latch});
        res.insert_or_assign("dig.minMaxLim0.rstLatch", DumpEntry{dig.minMaxLim0.rstLatch});
        res.insert_or_assign("dig.minMaxLim0.risingInterrupt", DumpEntry{dig.minMaxLim0.risingInterrupt});
        res.insert_or_assign("dig.minMaxLim0.fallingInterrupt", DumpEntry{dig.minMaxLim0.fallingInterrupt});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[0].val", DumpEntry{dig.minMaxLim0.filterLengthSc[0].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[1].val", DumpEntry{dig.minMaxLim0.filterLengthSc[1].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[2].val", DumpEntry{dig.minMaxLim0.filterLengthSc[2].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[3].val", DumpEntry{dig.minMaxLim0.filterLengthSc[3].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[4].val", DumpEntry{dig.minMaxLim0.filterLengthSc[4].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[5].val", DumpEntry{dig.minMaxLim0.filterLengthSc[5].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[6].val", DumpEntry{dig.minMaxLim0.filterLengthSc[6].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[7].val", DumpEntry{dig.minMaxLim0.filterLengthSc[7].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[8].val", DumpEntry{dig.minMaxLim0.filterLengthSc[8].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[9].val", DumpEntry{dig.minMaxLim0.filterLengthSc[9].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[10].val", DumpEntry{dig.minMaxLim0.filterLengthSc[10].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[11].val", DumpEntry{dig.minMaxLim0.filterLengthSc[11].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[12].val", DumpEntry{dig.minMaxLim0.filterLengthSc[12].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[13].val", DumpEntry{dig.minMaxLim0.filterLengthSc[13].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[14].val", DumpEntry{dig.minMaxLim0.filterLengthSc[14].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[15].val", DumpEntry{dig.minMaxLim0.filterLengthSc[15].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[16].val", DumpEntry{dig.minMaxLim0.filterLengthSc[16].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[17].val", DumpEntry{dig.minMaxLim0.filterLengthSc[17].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[18].val", DumpEntry{dig.minMaxLim0.filterLengthSc[18].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[19].val", DumpEntry{dig.minMaxLim0.filterLengthSc[19].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[20].val", DumpEntry{dig.minMaxLim0.filterLengthSc[20].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[21].val", DumpEntry{dig.minMaxLim0.filterLengthSc[21].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[22].val", DumpEntry{dig.minMaxLim0.filterLengthSc[22].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[23].val", DumpEntry{dig.minMaxLim0.filterLengthSc[23].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[24].val", DumpEntry{dig.minMaxLim0.filterLengthSc[24].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[25].val", DumpEntry{dig.minMaxLim0.filterLengthSc[25].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[26].val", DumpEntry{dig.minMaxLim0.filterLengthSc[26].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[27].val", DumpEntry{dig.minMaxLim0.filterLengthSc[27].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[28].val", DumpEntry{dig.minMaxLim0.filterLengthSc[28].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[29].val", DumpEntry{dig.minMaxLim0.filterLengthSc[29].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[30].val", DumpEntry{dig.minMaxLim0.filterLengthSc[30].val});
        res.insert_or_assign("dig.minMaxLim0.filterLengthSc[31].val", DumpEntry{dig.minMaxLim0.filterLengthSc[31].val});
        res.insert_or_assign("dig.minMaxLim0.reTime[0].s", DumpEntry{dig.minMaxLim0.reTime[0].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[0].ns", DumpEntry{dig.minMaxLim0.reTime[0].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[1].s", DumpEntry{dig.minMaxLim0.reTime[1].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[1].ns", DumpEntry{dig.minMaxLim0.reTime[1].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[2].s", DumpEntry{dig.minMaxLim0.reTime[2].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[2].ns", DumpEntry{dig.minMaxLim0.reTime[2].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[3].s", DumpEntry{dig.minMaxLim0.reTime[3].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[3].ns", DumpEntry{dig.minMaxLim0.reTime[3].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[4].s", DumpEntry{dig.minMaxLim0.reTime[4].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[4].ns", DumpEntry{dig.minMaxLim0.reTime[4].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[5].s", DumpEntry{dig.minMaxLim0.reTime[5].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[5].ns", DumpEntry{dig.minMaxLim0.reTime[5].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[6].s", DumpEntry{dig.minMaxLim0.reTime[6].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[6].ns", DumpEntry{dig.minMaxLim0.reTime[6].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[7].s", DumpEntry{dig.minMaxLim0.reTime[7].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[7].ns", DumpEntry{dig.minMaxLim0.reTime[7].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[8].s", DumpEntry{dig.minMaxLim0.reTime[8].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[8].ns", DumpEntry{dig.minMaxLim0.reTime[8].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[9].s", DumpEntry{dig.minMaxLim0.reTime[9].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[9].ns", DumpEntry{dig.minMaxLim0.reTime[9].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[10].s", DumpEntry{dig.minMaxLim0.reTime[10].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[10].ns", DumpEntry{dig.minMaxLim0.reTime[10].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[11].s", DumpEntry{dig.minMaxLim0.reTime[11].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[11].ns", DumpEntry{dig.minMaxLim0.reTime[11].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[12].s", DumpEntry{dig.minMaxLim0.reTime[12].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[12].ns", DumpEntry{dig.minMaxLim0.reTime[12].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[13].s", DumpEntry{dig.minMaxLim0.reTime[13].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[13].ns", DumpEntry{dig.minMaxLim0.reTime[13].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[14].s", DumpEntry{dig.minMaxLim0.reTime[14].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[14].ns", DumpEntry{dig.minMaxLim0.reTime[14].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[15].s", DumpEntry{dig.minMaxLim0.reTime[15].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[15].ns", DumpEntry{dig.minMaxLim0.reTime[15].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[16].s", DumpEntry{dig.minMaxLim0.reTime[16].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[16].ns", DumpEntry{dig.minMaxLim0.reTime[16].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[17].s", DumpEntry{dig.minMaxLim0.reTime[17].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[17].ns", DumpEntry{dig.minMaxLim0.reTime[17].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[18].s", DumpEntry{dig.minMaxLim0.reTime[18].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[18].ns", DumpEntry{dig.minMaxLim0.reTime[18].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[19].s", DumpEntry{dig.minMaxLim0.reTime[19].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[19].ns", DumpEntry{dig.minMaxLim0.reTime[19].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[20].s", DumpEntry{dig.minMaxLim0.reTime[20].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[20].ns", DumpEntry{dig.minMaxLim0.reTime[20].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[21].s", DumpEntry{dig.minMaxLim0.reTime[21].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[21].ns", DumpEntry{dig.minMaxLim0.reTime[21].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[22].s", DumpEntry{dig.minMaxLim0.reTime[22].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[22].ns", DumpEntry{dig.minMaxLim0.reTime[22].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[23].s", DumpEntry{dig.minMaxLim0.reTime[23].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[23].ns", DumpEntry{dig.minMaxLim0.reTime[23].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[24].s", DumpEntry{dig.minMaxLim0.reTime[24].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[24].ns", DumpEntry{dig.minMaxLim0.reTime[24].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[25].s", DumpEntry{dig.minMaxLim0.reTime[25].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[25].ns", DumpEntry{dig.minMaxLim0.reTime[25].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[26].s", DumpEntry{dig.minMaxLim0.reTime[26].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[26].ns", DumpEntry{dig.minMaxLim0.reTime[26].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[27].s", DumpEntry{dig.minMaxLim0.reTime[27].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[27].ns", DumpEntry{dig.minMaxLim0.reTime[27].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[28].s", DumpEntry{dig.minMaxLim0.reTime[28].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[28].ns", DumpEntry{dig.minMaxLim0.reTime[28].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[29].s", DumpEntry{dig.minMaxLim0.reTime[29].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[29].ns", DumpEntry{dig.minMaxLim0.reTime[29].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[30].s", DumpEntry{dig.minMaxLim0.reTime[30].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[30].ns", DumpEntry{dig.minMaxLim0.reTime[30].ns});
        res.insert_or_assign("dig.minMaxLim0.reTime[31].s", DumpEntry{dig.minMaxLim0.reTime[31].s});
        res.insert_or_assign("dig.minMaxLim0.reTime[31].ns", DumpEntry{dig.minMaxLim0.reTime[31].ns});
        res.insert_or_assign("dig.minMaxLim1.staticParams", DumpEntry{dig.minMaxLim1.staticParams});
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.invertIsEn", DumpEntry{dig.minMaxLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.enableIsEn", DumpEntry{dig.minMaxLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign("dig.minMaxLim1.staticParams.latchIsEn", DumpEntry{dig.minMaxLim1.staticParams.latchIsEn});
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.deglitchIsEn", DumpEntry{dig.minMaxLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.reTimeIsEn", DumpEntry{dig.minMaxLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "dig.minMaxLim1.staticParams.numChannels", DumpEntry{dig.minMaxLim1.staticParams.numChannels}
        );
        res.insert_or_assign("dig.minMaxLim1.data", DumpEntry{dig.minMaxLim1.data});
        res.insert_or_assign("dig.minMaxLim1.dataChanged", DumpEntry{dig.minMaxLim1.dataChanged});
        res.insert_or_assign("dig.minMaxLim1.invert", DumpEntry{dig.minMaxLim1.invert});
        res.insert_or_assign("dig.minMaxLim1.enable", DumpEntry{dig.minMaxLim1.enable});
        res.insert_or_assign("dig.minMaxLim1.latch", DumpEntry{dig.minMaxLim1.latch});
        res.insert_or_assign("dig.minMaxLim1.rstLatch", DumpEntry{dig.minMaxLim1.rstLatch});
        res.insert_or_assign("dig.minMaxLim1.risingInterrupt", DumpEntry{dig.minMaxLim1.risingInterrupt});
        res.insert_or_assign("dig.minMaxLim1.fallingInterrupt", DumpEntry{dig.minMaxLim1.fallingInterrupt});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[0].val", DumpEntry{dig.minMaxLim1.filterLengthSc[0].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[1].val", DumpEntry{dig.minMaxLim1.filterLengthSc[1].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[2].val", DumpEntry{dig.minMaxLim1.filterLengthSc[2].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[3].val", DumpEntry{dig.minMaxLim1.filterLengthSc[3].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[4].val", DumpEntry{dig.minMaxLim1.filterLengthSc[4].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[5].val", DumpEntry{dig.minMaxLim1.filterLengthSc[5].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[6].val", DumpEntry{dig.minMaxLim1.filterLengthSc[6].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[7].val", DumpEntry{dig.minMaxLim1.filterLengthSc[7].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[8].val", DumpEntry{dig.minMaxLim1.filterLengthSc[8].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[9].val", DumpEntry{dig.minMaxLim1.filterLengthSc[9].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[10].val", DumpEntry{dig.minMaxLim1.filterLengthSc[10].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[11].val", DumpEntry{dig.minMaxLim1.filterLengthSc[11].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[12].val", DumpEntry{dig.minMaxLim1.filterLengthSc[12].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[13].val", DumpEntry{dig.minMaxLim1.filterLengthSc[13].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[14].val", DumpEntry{dig.minMaxLim1.filterLengthSc[14].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[15].val", DumpEntry{dig.minMaxLim1.filterLengthSc[15].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[16].val", DumpEntry{dig.minMaxLim1.filterLengthSc[16].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[17].val", DumpEntry{dig.minMaxLim1.filterLengthSc[17].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[18].val", DumpEntry{dig.minMaxLim1.filterLengthSc[18].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[19].val", DumpEntry{dig.minMaxLim1.filterLengthSc[19].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[20].val", DumpEntry{dig.minMaxLim1.filterLengthSc[20].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[21].val", DumpEntry{dig.minMaxLim1.filterLengthSc[21].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[22].val", DumpEntry{dig.minMaxLim1.filterLengthSc[22].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[23].val", DumpEntry{dig.minMaxLim1.filterLengthSc[23].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[24].val", DumpEntry{dig.minMaxLim1.filterLengthSc[24].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[25].val", DumpEntry{dig.minMaxLim1.filterLengthSc[25].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[26].val", DumpEntry{dig.minMaxLim1.filterLengthSc[26].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[27].val", DumpEntry{dig.minMaxLim1.filterLengthSc[27].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[28].val", DumpEntry{dig.minMaxLim1.filterLengthSc[28].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[29].val", DumpEntry{dig.minMaxLim1.filterLengthSc[29].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[30].val", DumpEntry{dig.minMaxLim1.filterLengthSc[30].val});
        res.insert_or_assign("dig.minMaxLim1.filterLengthSc[31].val", DumpEntry{dig.minMaxLim1.filterLengthSc[31].val});
        res.insert_or_assign("dig.minMaxLim1.reTime[0].s", DumpEntry{dig.minMaxLim1.reTime[0].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[0].ns", DumpEntry{dig.minMaxLim1.reTime[0].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[1].s", DumpEntry{dig.minMaxLim1.reTime[1].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[1].ns", DumpEntry{dig.minMaxLim1.reTime[1].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[2].s", DumpEntry{dig.minMaxLim1.reTime[2].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[2].ns", DumpEntry{dig.minMaxLim1.reTime[2].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[3].s", DumpEntry{dig.minMaxLim1.reTime[3].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[3].ns", DumpEntry{dig.minMaxLim1.reTime[3].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[4].s", DumpEntry{dig.minMaxLim1.reTime[4].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[4].ns", DumpEntry{dig.minMaxLim1.reTime[4].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[5].s", DumpEntry{dig.minMaxLim1.reTime[5].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[5].ns", DumpEntry{dig.minMaxLim1.reTime[5].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[6].s", DumpEntry{dig.minMaxLim1.reTime[6].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[6].ns", DumpEntry{dig.minMaxLim1.reTime[6].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[7].s", DumpEntry{dig.minMaxLim1.reTime[7].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[7].ns", DumpEntry{dig.minMaxLim1.reTime[7].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[8].s", DumpEntry{dig.minMaxLim1.reTime[8].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[8].ns", DumpEntry{dig.minMaxLim1.reTime[8].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[9].s", DumpEntry{dig.minMaxLim1.reTime[9].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[9].ns", DumpEntry{dig.minMaxLim1.reTime[9].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[10].s", DumpEntry{dig.minMaxLim1.reTime[10].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[10].ns", DumpEntry{dig.minMaxLim1.reTime[10].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[11].s", DumpEntry{dig.minMaxLim1.reTime[11].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[11].ns", DumpEntry{dig.minMaxLim1.reTime[11].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[12].s", DumpEntry{dig.minMaxLim1.reTime[12].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[12].ns", DumpEntry{dig.minMaxLim1.reTime[12].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[13].s", DumpEntry{dig.minMaxLim1.reTime[13].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[13].ns", DumpEntry{dig.minMaxLim1.reTime[13].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[14].s", DumpEntry{dig.minMaxLim1.reTime[14].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[14].ns", DumpEntry{dig.minMaxLim1.reTime[14].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[15].s", DumpEntry{dig.minMaxLim1.reTime[15].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[15].ns", DumpEntry{dig.minMaxLim1.reTime[15].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[16].s", DumpEntry{dig.minMaxLim1.reTime[16].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[16].ns", DumpEntry{dig.minMaxLim1.reTime[16].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[17].s", DumpEntry{dig.minMaxLim1.reTime[17].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[17].ns", DumpEntry{dig.minMaxLim1.reTime[17].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[18].s", DumpEntry{dig.minMaxLim1.reTime[18].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[18].ns", DumpEntry{dig.minMaxLim1.reTime[18].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[19].s", DumpEntry{dig.minMaxLim1.reTime[19].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[19].ns", DumpEntry{dig.minMaxLim1.reTime[19].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[20].s", DumpEntry{dig.minMaxLim1.reTime[20].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[20].ns", DumpEntry{dig.minMaxLim1.reTime[20].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[21].s", DumpEntry{dig.minMaxLim1.reTime[21].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[21].ns", DumpEntry{dig.minMaxLim1.reTime[21].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[22].s", DumpEntry{dig.minMaxLim1.reTime[22].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[22].ns", DumpEntry{dig.minMaxLim1.reTime[22].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[23].s", DumpEntry{dig.minMaxLim1.reTime[23].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[23].ns", DumpEntry{dig.minMaxLim1.reTime[23].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[24].s", DumpEntry{dig.minMaxLim1.reTime[24].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[24].ns", DumpEntry{dig.minMaxLim1.reTime[24].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[25].s", DumpEntry{dig.minMaxLim1.reTime[25].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[25].ns", DumpEntry{dig.minMaxLim1.reTime[25].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[26].s", DumpEntry{dig.minMaxLim1.reTime[26].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[26].ns", DumpEntry{dig.minMaxLim1.reTime[26].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[27].s", DumpEntry{dig.minMaxLim1.reTime[27].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[27].ns", DumpEntry{dig.minMaxLim1.reTime[27].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[28].s", DumpEntry{dig.minMaxLim1.reTime[28].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[28].ns", DumpEntry{dig.minMaxLim1.reTime[28].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[29].s", DumpEntry{dig.minMaxLim1.reTime[29].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[29].ns", DumpEntry{dig.minMaxLim1.reTime[29].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[30].s", DumpEntry{dig.minMaxLim1.reTime[30].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[30].ns", DumpEntry{dig.minMaxLim1.reTime[30].ns});
        res.insert_or_assign("dig.minMaxLim1.reTime[31].s", DumpEntry{dig.minMaxLim1.reTime[31].s});
        res.insert_or_assign("dig.minMaxLim1.reTime[31].ns", DumpEntry{dig.minMaxLim1.reTime[31].ns});
        res.insert_or_assign("dig.rmsLim0.staticParams", DumpEntry{dig.rmsLim0.staticParams});
        res.insert_or_assign("dig.rmsLim0.staticParams.invertIsEn", DumpEntry{dig.rmsLim0.staticParams.invertIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.enableIsEn", DumpEntry{dig.rmsLim0.staticParams.enableIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.latchIsEn", DumpEntry{dig.rmsLim0.staticParams.latchIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.deglitchIsEn", DumpEntry{dig.rmsLim0.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.reTimeIsEn", DumpEntry{dig.rmsLim0.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.rmsLim0.staticParams.numChannels", DumpEntry{dig.rmsLim0.staticParams.numChannels});
        res.insert_or_assign("dig.rmsLim0.data", DumpEntry{dig.rmsLim0.data});
        res.insert_or_assign("dig.rmsLim0.dataChanged", DumpEntry{dig.rmsLim0.dataChanged});
        res.insert_or_assign("dig.rmsLim0.invert", DumpEntry{dig.rmsLim0.invert});
        res.insert_or_assign("dig.rmsLim0.enable", DumpEntry{dig.rmsLim0.enable});
        res.insert_or_assign("dig.rmsLim0.latch", DumpEntry{dig.rmsLim0.latch});
        res.insert_or_assign("dig.rmsLim0.rstLatch", DumpEntry{dig.rmsLim0.rstLatch});
        res.insert_or_assign("dig.rmsLim0.risingInterrupt", DumpEntry{dig.rmsLim0.risingInterrupt});
        res.insert_or_assign("dig.rmsLim0.fallingInterrupt", DumpEntry{dig.rmsLim0.fallingInterrupt});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[0].val", DumpEntry{dig.rmsLim0.filterLengthSc[0].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[1].val", DumpEntry{dig.rmsLim0.filterLengthSc[1].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[2].val", DumpEntry{dig.rmsLim0.filterLengthSc[2].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[3].val", DumpEntry{dig.rmsLim0.filterLengthSc[3].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[4].val", DumpEntry{dig.rmsLim0.filterLengthSc[4].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[5].val", DumpEntry{dig.rmsLim0.filterLengthSc[5].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[6].val", DumpEntry{dig.rmsLim0.filterLengthSc[6].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[7].val", DumpEntry{dig.rmsLim0.filterLengthSc[7].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[8].val", DumpEntry{dig.rmsLim0.filterLengthSc[8].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[9].val", DumpEntry{dig.rmsLim0.filterLengthSc[9].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[10].val", DumpEntry{dig.rmsLim0.filterLengthSc[10].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[11].val", DumpEntry{dig.rmsLim0.filterLengthSc[11].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[12].val", DumpEntry{dig.rmsLim0.filterLengthSc[12].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[13].val", DumpEntry{dig.rmsLim0.filterLengthSc[13].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[14].val", DumpEntry{dig.rmsLim0.filterLengthSc[14].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[15].val", DumpEntry{dig.rmsLim0.filterLengthSc[15].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[16].val", DumpEntry{dig.rmsLim0.filterLengthSc[16].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[17].val", DumpEntry{dig.rmsLim0.filterLengthSc[17].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[18].val", DumpEntry{dig.rmsLim0.filterLengthSc[18].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[19].val", DumpEntry{dig.rmsLim0.filterLengthSc[19].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[20].val", DumpEntry{dig.rmsLim0.filterLengthSc[20].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[21].val", DumpEntry{dig.rmsLim0.filterLengthSc[21].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[22].val", DumpEntry{dig.rmsLim0.filterLengthSc[22].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[23].val", DumpEntry{dig.rmsLim0.filterLengthSc[23].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[24].val", DumpEntry{dig.rmsLim0.filterLengthSc[24].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[25].val", DumpEntry{dig.rmsLim0.filterLengthSc[25].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[26].val", DumpEntry{dig.rmsLim0.filterLengthSc[26].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[27].val", DumpEntry{dig.rmsLim0.filterLengthSc[27].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[28].val", DumpEntry{dig.rmsLim0.filterLengthSc[28].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[29].val", DumpEntry{dig.rmsLim0.filterLengthSc[29].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[30].val", DumpEntry{dig.rmsLim0.filterLengthSc[30].val});
        res.insert_or_assign("dig.rmsLim0.filterLengthSc[31].val", DumpEntry{dig.rmsLim0.filterLengthSc[31].val});
        res.insert_or_assign("dig.rmsLim0.reTime[0].s", DumpEntry{dig.rmsLim0.reTime[0].s});
        res.insert_or_assign("dig.rmsLim0.reTime[0].ns", DumpEntry{dig.rmsLim0.reTime[0].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[1].s", DumpEntry{dig.rmsLim0.reTime[1].s});
        res.insert_or_assign("dig.rmsLim0.reTime[1].ns", DumpEntry{dig.rmsLim0.reTime[1].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[2].s", DumpEntry{dig.rmsLim0.reTime[2].s});
        res.insert_or_assign("dig.rmsLim0.reTime[2].ns", DumpEntry{dig.rmsLim0.reTime[2].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[3].s", DumpEntry{dig.rmsLim0.reTime[3].s});
        res.insert_or_assign("dig.rmsLim0.reTime[3].ns", DumpEntry{dig.rmsLim0.reTime[3].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[4].s", DumpEntry{dig.rmsLim0.reTime[4].s});
        res.insert_or_assign("dig.rmsLim0.reTime[4].ns", DumpEntry{dig.rmsLim0.reTime[4].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[5].s", DumpEntry{dig.rmsLim0.reTime[5].s});
        res.insert_or_assign("dig.rmsLim0.reTime[5].ns", DumpEntry{dig.rmsLim0.reTime[5].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[6].s", DumpEntry{dig.rmsLim0.reTime[6].s});
        res.insert_or_assign("dig.rmsLim0.reTime[6].ns", DumpEntry{dig.rmsLim0.reTime[6].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[7].s", DumpEntry{dig.rmsLim0.reTime[7].s});
        res.insert_or_assign("dig.rmsLim0.reTime[7].ns", DumpEntry{dig.rmsLim0.reTime[7].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[8].s", DumpEntry{dig.rmsLim0.reTime[8].s});
        res.insert_or_assign("dig.rmsLim0.reTime[8].ns", DumpEntry{dig.rmsLim0.reTime[8].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[9].s", DumpEntry{dig.rmsLim0.reTime[9].s});
        res.insert_or_assign("dig.rmsLim0.reTime[9].ns", DumpEntry{dig.rmsLim0.reTime[9].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[10].s", DumpEntry{dig.rmsLim0.reTime[10].s});
        res.insert_or_assign("dig.rmsLim0.reTime[10].ns", DumpEntry{dig.rmsLim0.reTime[10].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[11].s", DumpEntry{dig.rmsLim0.reTime[11].s});
        res.insert_or_assign("dig.rmsLim0.reTime[11].ns", DumpEntry{dig.rmsLim0.reTime[11].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[12].s", DumpEntry{dig.rmsLim0.reTime[12].s});
        res.insert_or_assign("dig.rmsLim0.reTime[12].ns", DumpEntry{dig.rmsLim0.reTime[12].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[13].s", DumpEntry{dig.rmsLim0.reTime[13].s});
        res.insert_or_assign("dig.rmsLim0.reTime[13].ns", DumpEntry{dig.rmsLim0.reTime[13].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[14].s", DumpEntry{dig.rmsLim0.reTime[14].s});
        res.insert_or_assign("dig.rmsLim0.reTime[14].ns", DumpEntry{dig.rmsLim0.reTime[14].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[15].s", DumpEntry{dig.rmsLim0.reTime[15].s});
        res.insert_or_assign("dig.rmsLim0.reTime[15].ns", DumpEntry{dig.rmsLim0.reTime[15].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[16].s", DumpEntry{dig.rmsLim0.reTime[16].s});
        res.insert_or_assign("dig.rmsLim0.reTime[16].ns", DumpEntry{dig.rmsLim0.reTime[16].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[17].s", DumpEntry{dig.rmsLim0.reTime[17].s});
        res.insert_or_assign("dig.rmsLim0.reTime[17].ns", DumpEntry{dig.rmsLim0.reTime[17].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[18].s", DumpEntry{dig.rmsLim0.reTime[18].s});
        res.insert_or_assign("dig.rmsLim0.reTime[18].ns", DumpEntry{dig.rmsLim0.reTime[18].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[19].s", DumpEntry{dig.rmsLim0.reTime[19].s});
        res.insert_or_assign("dig.rmsLim0.reTime[19].ns", DumpEntry{dig.rmsLim0.reTime[19].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[20].s", DumpEntry{dig.rmsLim0.reTime[20].s});
        res.insert_or_assign("dig.rmsLim0.reTime[20].ns", DumpEntry{dig.rmsLim0.reTime[20].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[21].s", DumpEntry{dig.rmsLim0.reTime[21].s});
        res.insert_or_assign("dig.rmsLim0.reTime[21].ns", DumpEntry{dig.rmsLim0.reTime[21].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[22].s", DumpEntry{dig.rmsLim0.reTime[22].s});
        res.insert_or_assign("dig.rmsLim0.reTime[22].ns", DumpEntry{dig.rmsLim0.reTime[22].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[23].s", DumpEntry{dig.rmsLim0.reTime[23].s});
        res.insert_or_assign("dig.rmsLim0.reTime[23].ns", DumpEntry{dig.rmsLim0.reTime[23].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[24].s", DumpEntry{dig.rmsLim0.reTime[24].s});
        res.insert_or_assign("dig.rmsLim0.reTime[24].ns", DumpEntry{dig.rmsLim0.reTime[24].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[25].s", DumpEntry{dig.rmsLim0.reTime[25].s});
        res.insert_or_assign("dig.rmsLim0.reTime[25].ns", DumpEntry{dig.rmsLim0.reTime[25].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[26].s", DumpEntry{dig.rmsLim0.reTime[26].s});
        res.insert_or_assign("dig.rmsLim0.reTime[26].ns", DumpEntry{dig.rmsLim0.reTime[26].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[27].s", DumpEntry{dig.rmsLim0.reTime[27].s});
        res.insert_or_assign("dig.rmsLim0.reTime[27].ns", DumpEntry{dig.rmsLim0.reTime[27].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[28].s", DumpEntry{dig.rmsLim0.reTime[28].s});
        res.insert_or_assign("dig.rmsLim0.reTime[28].ns", DumpEntry{dig.rmsLim0.reTime[28].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[29].s", DumpEntry{dig.rmsLim0.reTime[29].s});
        res.insert_or_assign("dig.rmsLim0.reTime[29].ns", DumpEntry{dig.rmsLim0.reTime[29].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[30].s", DumpEntry{dig.rmsLim0.reTime[30].s});
        res.insert_or_assign("dig.rmsLim0.reTime[30].ns", DumpEntry{dig.rmsLim0.reTime[30].ns});
        res.insert_or_assign("dig.rmsLim0.reTime[31].s", DumpEntry{dig.rmsLim0.reTime[31].s});
        res.insert_or_assign("dig.rmsLim0.reTime[31].ns", DumpEntry{dig.rmsLim0.reTime[31].ns});
        res.insert_or_assign("dig.rmsLim1.staticParams", DumpEntry{dig.rmsLim1.staticParams});
        res.insert_or_assign("dig.rmsLim1.staticParams.invertIsEn", DumpEntry{dig.rmsLim1.staticParams.invertIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.enableIsEn", DumpEntry{dig.rmsLim1.staticParams.enableIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.latchIsEn", DumpEntry{dig.rmsLim1.staticParams.latchIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.deglitchIsEn", DumpEntry{dig.rmsLim1.staticParams.deglitchIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.reTimeIsEn", DumpEntry{dig.rmsLim1.staticParams.reTimeIsEn});
        res.insert_or_assign("dig.rmsLim1.staticParams.numChannels", DumpEntry{dig.rmsLim1.staticParams.numChannels});
        res.insert_or_assign("dig.rmsLim1.data", DumpEntry{dig.rmsLim1.data});
        res.insert_or_assign("dig.rmsLim1.dataChanged", DumpEntry{dig.rmsLim1.dataChanged});
        res.insert_or_assign("dig.rmsLim1.invert", DumpEntry{dig.rmsLim1.invert});
        res.insert_or_assign("dig.rmsLim1.enable", DumpEntry{dig.rmsLim1.enable});
        res.insert_or_assign("dig.rmsLim1.latch", DumpEntry{dig.rmsLim1.latch});
        res.insert_or_assign("dig.rmsLim1.rstLatch", DumpEntry{dig.rmsLim1.rstLatch});
        res.insert_or_assign("dig.rmsLim1.risingInterrupt", DumpEntry{dig.rmsLim1.risingInterrupt});
        res.insert_or_assign("dig.rmsLim1.fallingInterrupt", DumpEntry{dig.rmsLim1.fallingInterrupt});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[0].val", DumpEntry{dig.rmsLim1.filterLengthSc[0].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[1].val", DumpEntry{dig.rmsLim1.filterLengthSc[1].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[2].val", DumpEntry{dig.rmsLim1.filterLengthSc[2].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[3].val", DumpEntry{dig.rmsLim1.filterLengthSc[3].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[4].val", DumpEntry{dig.rmsLim1.filterLengthSc[4].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[5].val", DumpEntry{dig.rmsLim1.filterLengthSc[5].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[6].val", DumpEntry{dig.rmsLim1.filterLengthSc[6].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[7].val", DumpEntry{dig.rmsLim1.filterLengthSc[7].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[8].val", DumpEntry{dig.rmsLim1.filterLengthSc[8].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[9].val", DumpEntry{dig.rmsLim1.filterLengthSc[9].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[10].val", DumpEntry{dig.rmsLim1.filterLengthSc[10].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[11].val", DumpEntry{dig.rmsLim1.filterLengthSc[11].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[12].val", DumpEntry{dig.rmsLim1.filterLengthSc[12].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[13].val", DumpEntry{dig.rmsLim1.filterLengthSc[13].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[14].val", DumpEntry{dig.rmsLim1.filterLengthSc[14].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[15].val", DumpEntry{dig.rmsLim1.filterLengthSc[15].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[16].val", DumpEntry{dig.rmsLim1.filterLengthSc[16].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[17].val", DumpEntry{dig.rmsLim1.filterLengthSc[17].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[18].val", DumpEntry{dig.rmsLim1.filterLengthSc[18].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[19].val", DumpEntry{dig.rmsLim1.filterLengthSc[19].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[20].val", DumpEntry{dig.rmsLim1.filterLengthSc[20].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[21].val", DumpEntry{dig.rmsLim1.filterLengthSc[21].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[22].val", DumpEntry{dig.rmsLim1.filterLengthSc[22].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[23].val", DumpEntry{dig.rmsLim1.filterLengthSc[23].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[24].val", DumpEntry{dig.rmsLim1.filterLengthSc[24].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[25].val", DumpEntry{dig.rmsLim1.filterLengthSc[25].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[26].val", DumpEntry{dig.rmsLim1.filterLengthSc[26].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[27].val", DumpEntry{dig.rmsLim1.filterLengthSc[27].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[28].val", DumpEntry{dig.rmsLim1.filterLengthSc[28].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[29].val", DumpEntry{dig.rmsLim1.filterLengthSc[29].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[30].val", DumpEntry{dig.rmsLim1.filterLengthSc[30].val});
        res.insert_or_assign("dig.rmsLim1.filterLengthSc[31].val", DumpEntry{dig.rmsLim1.filterLengthSc[31].val});
        res.insert_or_assign("dig.rmsLim1.reTime[0].s", DumpEntry{dig.rmsLim1.reTime[0].s});
        res.insert_or_assign("dig.rmsLim1.reTime[0].ns", DumpEntry{dig.rmsLim1.reTime[0].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[1].s", DumpEntry{dig.rmsLim1.reTime[1].s});
        res.insert_or_assign("dig.rmsLim1.reTime[1].ns", DumpEntry{dig.rmsLim1.reTime[1].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[2].s", DumpEntry{dig.rmsLim1.reTime[2].s});
        res.insert_or_assign("dig.rmsLim1.reTime[2].ns", DumpEntry{dig.rmsLim1.reTime[2].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[3].s", DumpEntry{dig.rmsLim1.reTime[3].s});
        res.insert_or_assign("dig.rmsLim1.reTime[3].ns", DumpEntry{dig.rmsLim1.reTime[3].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[4].s", DumpEntry{dig.rmsLim1.reTime[4].s});
        res.insert_or_assign("dig.rmsLim1.reTime[4].ns", DumpEntry{dig.rmsLim1.reTime[4].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[5].s", DumpEntry{dig.rmsLim1.reTime[5].s});
        res.insert_or_assign("dig.rmsLim1.reTime[5].ns", DumpEntry{dig.rmsLim1.reTime[5].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[6].s", DumpEntry{dig.rmsLim1.reTime[6].s});
        res.insert_or_assign("dig.rmsLim1.reTime[6].ns", DumpEntry{dig.rmsLim1.reTime[6].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[7].s", DumpEntry{dig.rmsLim1.reTime[7].s});
        res.insert_or_assign("dig.rmsLim1.reTime[7].ns", DumpEntry{dig.rmsLim1.reTime[7].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[8].s", DumpEntry{dig.rmsLim1.reTime[8].s});
        res.insert_or_assign("dig.rmsLim1.reTime[8].ns", DumpEntry{dig.rmsLim1.reTime[8].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[9].s", DumpEntry{dig.rmsLim1.reTime[9].s});
        res.insert_or_assign("dig.rmsLim1.reTime[9].ns", DumpEntry{dig.rmsLim1.reTime[9].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[10].s", DumpEntry{dig.rmsLim1.reTime[10].s});
        res.insert_or_assign("dig.rmsLim1.reTime[10].ns", DumpEntry{dig.rmsLim1.reTime[10].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[11].s", DumpEntry{dig.rmsLim1.reTime[11].s});
        res.insert_or_assign("dig.rmsLim1.reTime[11].ns", DumpEntry{dig.rmsLim1.reTime[11].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[12].s", DumpEntry{dig.rmsLim1.reTime[12].s});
        res.insert_or_assign("dig.rmsLim1.reTime[12].ns", DumpEntry{dig.rmsLim1.reTime[12].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[13].s", DumpEntry{dig.rmsLim1.reTime[13].s});
        res.insert_or_assign("dig.rmsLim1.reTime[13].ns", DumpEntry{dig.rmsLim1.reTime[13].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[14].s", DumpEntry{dig.rmsLim1.reTime[14].s});
        res.insert_or_assign("dig.rmsLim1.reTime[14].ns", DumpEntry{dig.rmsLim1.reTime[14].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[15].s", DumpEntry{dig.rmsLim1.reTime[15].s});
        res.insert_or_assign("dig.rmsLim1.reTime[15].ns", DumpEntry{dig.rmsLim1.reTime[15].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[16].s", DumpEntry{dig.rmsLim1.reTime[16].s});
        res.insert_or_assign("dig.rmsLim1.reTime[16].ns", DumpEntry{dig.rmsLim1.reTime[16].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[17].s", DumpEntry{dig.rmsLim1.reTime[17].s});
        res.insert_or_assign("dig.rmsLim1.reTime[17].ns", DumpEntry{dig.rmsLim1.reTime[17].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[18].s", DumpEntry{dig.rmsLim1.reTime[18].s});
        res.insert_or_assign("dig.rmsLim1.reTime[18].ns", DumpEntry{dig.rmsLim1.reTime[18].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[19].s", DumpEntry{dig.rmsLim1.reTime[19].s});
        res.insert_or_assign("dig.rmsLim1.reTime[19].ns", DumpEntry{dig.rmsLim1.reTime[19].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[20].s", DumpEntry{dig.rmsLim1.reTime[20].s});
        res.insert_or_assign("dig.rmsLim1.reTime[20].ns", DumpEntry{dig.rmsLim1.reTime[20].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[21].s", DumpEntry{dig.rmsLim1.reTime[21].s});
        res.insert_or_assign("dig.rmsLim1.reTime[21].ns", DumpEntry{dig.rmsLim1.reTime[21].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[22].s", DumpEntry{dig.rmsLim1.reTime[22].s});
        res.insert_or_assign("dig.rmsLim1.reTime[22].ns", DumpEntry{dig.rmsLim1.reTime[22].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[23].s", DumpEntry{dig.rmsLim1.reTime[23].s});
        res.insert_or_assign("dig.rmsLim1.reTime[23].ns", DumpEntry{dig.rmsLim1.reTime[23].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[24].s", DumpEntry{dig.rmsLim1.reTime[24].s});
        res.insert_or_assign("dig.rmsLim1.reTime[24].ns", DumpEntry{dig.rmsLim1.reTime[24].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[25].s", DumpEntry{dig.rmsLim1.reTime[25].s});
        res.insert_or_assign("dig.rmsLim1.reTime[25].ns", DumpEntry{dig.rmsLim1.reTime[25].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[26].s", DumpEntry{dig.rmsLim1.reTime[26].s});
        res.insert_or_assign("dig.rmsLim1.reTime[26].ns", DumpEntry{dig.rmsLim1.reTime[26].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[27].s", DumpEntry{dig.rmsLim1.reTime[27].s});
        res.insert_or_assign("dig.rmsLim1.reTime[27].ns", DumpEntry{dig.rmsLim1.reTime[27].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[28].s", DumpEntry{dig.rmsLim1.reTime[28].s});
        res.insert_or_assign("dig.rmsLim1.reTime[28].ns", DumpEntry{dig.rmsLim1.reTime[28].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[29].s", DumpEntry{dig.rmsLim1.reTime[29].s});
        res.insert_or_assign("dig.rmsLim1.reTime[29].ns", DumpEntry{dig.rmsLim1.reTime[29].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[30].s", DumpEntry{dig.rmsLim1.reTime[30].s});
        res.insert_or_assign("dig.rmsLim1.reTime[30].ns", DumpEntry{dig.rmsLim1.reTime[30].ns});
        res.insert_or_assign("dig.rmsLim1.reTime[31].s", DumpEntry{dig.rmsLim1.reTime[31].s});
        res.insert_or_assign("dig.rmsLim1.reTime[31].ns", DumpEntry{dig.rmsLim1.reTime[31].ns});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::PwmArrayItem::Pwm`
    //!
    //! @param pwm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwm
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::PwmArrayItem::Pwm& pwm)
    {
        DumpMap res{pwm.base()};
        res.insert_or_assign("pwm.ctrl", DumpEntry{pwm.ctrl});
        res.insert_or_assign("pwm.ctrl.enable", DumpEntry{pwm.ctrl.enable});
        res.insert_or_assign("pwm.ctrl.reset", DumpEntry{pwm.ctrl.reset});
        res.insert_or_assign("pwm.carrierBits", DumpEntry{pwm.carrierBits});
        res.insert_or_assign("pwm.deadtimeBits", DumpEntry{pwm.deadtimeBits});
        res.insert_or_assign("pwm.config", DumpEntry{pwm.config});
        res.insert_or_assign("pwm.config.updateType", DumpEntry{pwm.config.updateType});
        res.insert_or_assign("pwm.config.enablePwmCheck", DumpEntry{pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm.config.enableStCheck", DumpEntry{pwm.config.enableStCheck});
        res.insert_or_assign("pwm.config.enableValueCheck", DumpEntry{pwm.config.enableValueCheck});
        res.insert_or_assign("pwm.config.bypassDeadtime", DumpEntry{pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm.config.disableA", DumpEntry{pwm.config.disableA});
        res.insert_or_assign("pwm.config.disableB", DumpEntry{pwm.config.disableB});
        res.insert_or_assign("pwm.config.invert", DumpEntry{pwm.config.invert});
        res.insert_or_assign("pwm.config.decoupleCc1", DumpEntry{pwm.config.decoupleCc1});
        res.insert_or_assign("pwm.cc0Sc", DumpEntry{pwm.cc0Sc});
        res.insert_or_assign("pwm.cc1Sc", DumpEntry{pwm.cc1Sc});
        res.insert_or_assign("pwm.ctrhSc", DumpEntry{pwm.ctrhSc});
        res.insert_or_assign("pwm.deadtimeSc", DumpEntry{pwm.deadtimeSc});
        res.insert_or_assign("pwm.extendedDeadtimeSc", DumpEntry{pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm.minSwitchTimeSc", DumpEntry{pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm.minModIdxSc", DumpEntry{pwm.minModIdxSc});
        res.insert_or_assign("pwm.maxModIdxSc", DumpEntry{pwm.maxModIdxSc});
        res.insert_or_assign("pwm.numberCcErrors", DumpEntry{pwm.numberCcErrors});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::PwmArray`
    //!
    //! @param pwm A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under pwm
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::PwmArray& pwm)
    {
        DumpMap res{pwm.base()};
        res.insert_or_assign("pwm[0].pwm.ctrl", DumpEntry{pwm[0].pwm.ctrl});
        res.insert_or_assign("pwm[0].pwm.ctrl.enable", DumpEntry{pwm[0].pwm.ctrl.enable});
        res.insert_or_assign("pwm[0].pwm.ctrl.reset", DumpEntry{pwm[0].pwm.ctrl.reset});
        res.insert_or_assign("pwm[0].pwm.carrierBits", DumpEntry{pwm[0].pwm.carrierBits});
        res.insert_or_assign("pwm[0].pwm.deadtimeBits", DumpEntry{pwm[0].pwm.deadtimeBits});
        res.insert_or_assign("pwm[0].pwm.config", DumpEntry{pwm[0].pwm.config});
        res.insert_or_assign("pwm[0].pwm.config.updateType", DumpEntry{pwm[0].pwm.config.updateType});
        res.insert_or_assign("pwm[0].pwm.config.enablePwmCheck", DumpEntry{pwm[0].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[0].pwm.config.enableStCheck", DumpEntry{pwm[0].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[0].pwm.config.enableValueCheck", DumpEntry{pwm[0].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[0].pwm.config.bypassDeadtime", DumpEntry{pwm[0].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[0].pwm.config.disableA", DumpEntry{pwm[0].pwm.config.disableA});
        res.insert_or_assign("pwm[0].pwm.config.disableB", DumpEntry{pwm[0].pwm.config.disableB});
        res.insert_or_assign("pwm[0].pwm.config.invert", DumpEntry{pwm[0].pwm.config.invert});
        res.insert_or_assign("pwm[0].pwm.config.decoupleCc1", DumpEntry{pwm[0].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[0].pwm.cc0Sc", DumpEntry{pwm[0].pwm.cc0Sc});
        res.insert_or_assign("pwm[0].pwm.cc1Sc", DumpEntry{pwm[0].pwm.cc1Sc});
        res.insert_or_assign("pwm[0].pwm.ctrhSc", DumpEntry{pwm[0].pwm.ctrhSc});
        res.insert_or_assign("pwm[0].pwm.deadtimeSc", DumpEntry{pwm[0].pwm.deadtimeSc});
        res.insert_or_assign("pwm[0].pwm.extendedDeadtimeSc", DumpEntry{pwm[0].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[0].pwm.minSwitchTimeSc", DumpEntry{pwm[0].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[0].pwm.minModIdxSc", DumpEntry{pwm[0].pwm.minModIdxSc});
        res.insert_or_assign("pwm[0].pwm.maxModIdxSc", DumpEntry{pwm[0].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[0].pwm.numberCcErrors", DumpEntry{pwm[0].pwm.numberCcErrors});
        res.insert_or_assign("pwm[1].pwm.ctrl", DumpEntry{pwm[1].pwm.ctrl});
        res.insert_or_assign("pwm[1].pwm.ctrl.enable", DumpEntry{pwm[1].pwm.ctrl.enable});
        res.insert_or_assign("pwm[1].pwm.ctrl.reset", DumpEntry{pwm[1].pwm.ctrl.reset});
        res.insert_or_assign("pwm[1].pwm.carrierBits", DumpEntry{pwm[1].pwm.carrierBits});
        res.insert_or_assign("pwm[1].pwm.deadtimeBits", DumpEntry{pwm[1].pwm.deadtimeBits});
        res.insert_or_assign("pwm[1].pwm.config", DumpEntry{pwm[1].pwm.config});
        res.insert_or_assign("pwm[1].pwm.config.updateType", DumpEntry{pwm[1].pwm.config.updateType});
        res.insert_or_assign("pwm[1].pwm.config.enablePwmCheck", DumpEntry{pwm[1].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[1].pwm.config.enableStCheck", DumpEntry{pwm[1].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[1].pwm.config.enableValueCheck", DumpEntry{pwm[1].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[1].pwm.config.bypassDeadtime", DumpEntry{pwm[1].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[1].pwm.config.disableA", DumpEntry{pwm[1].pwm.config.disableA});
        res.insert_or_assign("pwm[1].pwm.config.disableB", DumpEntry{pwm[1].pwm.config.disableB});
        res.insert_or_assign("pwm[1].pwm.config.invert", DumpEntry{pwm[1].pwm.config.invert});
        res.insert_or_assign("pwm[1].pwm.config.decoupleCc1", DumpEntry{pwm[1].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[1].pwm.cc0Sc", DumpEntry{pwm[1].pwm.cc0Sc});
        res.insert_or_assign("pwm[1].pwm.cc1Sc", DumpEntry{pwm[1].pwm.cc1Sc});
        res.insert_or_assign("pwm[1].pwm.ctrhSc", DumpEntry{pwm[1].pwm.ctrhSc});
        res.insert_or_assign("pwm[1].pwm.deadtimeSc", DumpEntry{pwm[1].pwm.deadtimeSc});
        res.insert_or_assign("pwm[1].pwm.extendedDeadtimeSc", DumpEntry{pwm[1].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[1].pwm.minSwitchTimeSc", DumpEntry{pwm[1].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[1].pwm.minModIdxSc", DumpEntry{pwm[1].pwm.minModIdxSc});
        res.insert_or_assign("pwm[1].pwm.maxModIdxSc", DumpEntry{pwm[1].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[1].pwm.numberCcErrors", DumpEntry{pwm[1].pwm.numberCcErrors});
        res.insert_or_assign("pwm[2].pwm.ctrl", DumpEntry{pwm[2].pwm.ctrl});
        res.insert_or_assign("pwm[2].pwm.ctrl.enable", DumpEntry{pwm[2].pwm.ctrl.enable});
        res.insert_or_assign("pwm[2].pwm.ctrl.reset", DumpEntry{pwm[2].pwm.ctrl.reset});
        res.insert_or_assign("pwm[2].pwm.carrierBits", DumpEntry{pwm[2].pwm.carrierBits});
        res.insert_or_assign("pwm[2].pwm.deadtimeBits", DumpEntry{pwm[2].pwm.deadtimeBits});
        res.insert_or_assign("pwm[2].pwm.config", DumpEntry{pwm[2].pwm.config});
        res.insert_or_assign("pwm[2].pwm.config.updateType", DumpEntry{pwm[2].pwm.config.updateType});
        res.insert_or_assign("pwm[2].pwm.config.enablePwmCheck", DumpEntry{pwm[2].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[2].pwm.config.enableStCheck", DumpEntry{pwm[2].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[2].pwm.config.enableValueCheck", DumpEntry{pwm[2].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[2].pwm.config.bypassDeadtime", DumpEntry{pwm[2].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[2].pwm.config.disableA", DumpEntry{pwm[2].pwm.config.disableA});
        res.insert_or_assign("pwm[2].pwm.config.disableB", DumpEntry{pwm[2].pwm.config.disableB});
        res.insert_or_assign("pwm[2].pwm.config.invert", DumpEntry{pwm[2].pwm.config.invert});
        res.insert_or_assign("pwm[2].pwm.config.decoupleCc1", DumpEntry{pwm[2].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[2].pwm.cc0Sc", DumpEntry{pwm[2].pwm.cc0Sc});
        res.insert_or_assign("pwm[2].pwm.cc1Sc", DumpEntry{pwm[2].pwm.cc1Sc});
        res.insert_or_assign("pwm[2].pwm.ctrhSc", DumpEntry{pwm[2].pwm.ctrhSc});
        res.insert_or_assign("pwm[2].pwm.deadtimeSc", DumpEntry{pwm[2].pwm.deadtimeSc});
        res.insert_or_assign("pwm[2].pwm.extendedDeadtimeSc", DumpEntry{pwm[2].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[2].pwm.minSwitchTimeSc", DumpEntry{pwm[2].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[2].pwm.minModIdxSc", DumpEntry{pwm[2].pwm.minModIdxSc});
        res.insert_or_assign("pwm[2].pwm.maxModIdxSc", DumpEntry{pwm[2].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[2].pwm.numberCcErrors", DumpEntry{pwm[2].pwm.numberCcErrors});
        res.insert_or_assign("pwm[3].pwm.ctrl", DumpEntry{pwm[3].pwm.ctrl});
        res.insert_or_assign("pwm[3].pwm.ctrl.enable", DumpEntry{pwm[3].pwm.ctrl.enable});
        res.insert_or_assign("pwm[3].pwm.ctrl.reset", DumpEntry{pwm[3].pwm.ctrl.reset});
        res.insert_or_assign("pwm[3].pwm.carrierBits", DumpEntry{pwm[3].pwm.carrierBits});
        res.insert_or_assign("pwm[3].pwm.deadtimeBits", DumpEntry{pwm[3].pwm.deadtimeBits});
        res.insert_or_assign("pwm[3].pwm.config", DumpEntry{pwm[3].pwm.config});
        res.insert_or_assign("pwm[3].pwm.config.updateType", DumpEntry{pwm[3].pwm.config.updateType});
        res.insert_or_assign("pwm[3].pwm.config.enablePwmCheck", DumpEntry{pwm[3].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[3].pwm.config.enableStCheck", DumpEntry{pwm[3].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[3].pwm.config.enableValueCheck", DumpEntry{pwm[3].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[3].pwm.config.bypassDeadtime", DumpEntry{pwm[3].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[3].pwm.config.disableA", DumpEntry{pwm[3].pwm.config.disableA});
        res.insert_or_assign("pwm[3].pwm.config.disableB", DumpEntry{pwm[3].pwm.config.disableB});
        res.insert_or_assign("pwm[3].pwm.config.invert", DumpEntry{pwm[3].pwm.config.invert});
        res.insert_or_assign("pwm[3].pwm.config.decoupleCc1", DumpEntry{pwm[3].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[3].pwm.cc0Sc", DumpEntry{pwm[3].pwm.cc0Sc});
        res.insert_or_assign("pwm[3].pwm.cc1Sc", DumpEntry{pwm[3].pwm.cc1Sc});
        res.insert_or_assign("pwm[3].pwm.ctrhSc", DumpEntry{pwm[3].pwm.ctrhSc});
        res.insert_or_assign("pwm[3].pwm.deadtimeSc", DumpEntry{pwm[3].pwm.deadtimeSc});
        res.insert_or_assign("pwm[3].pwm.extendedDeadtimeSc", DumpEntry{pwm[3].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[3].pwm.minSwitchTimeSc", DumpEntry{pwm[3].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[3].pwm.minModIdxSc", DumpEntry{pwm[3].pwm.minModIdxSc});
        res.insert_or_assign("pwm[3].pwm.maxModIdxSc", DumpEntry{pwm[3].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[3].pwm.numberCcErrors", DumpEntry{pwm[3].pwm.numberCcErrors});
        res.insert_or_assign("pwm[4].pwm.ctrl", DumpEntry{pwm[4].pwm.ctrl});
        res.insert_or_assign("pwm[4].pwm.ctrl.enable", DumpEntry{pwm[4].pwm.ctrl.enable});
        res.insert_or_assign("pwm[4].pwm.ctrl.reset", DumpEntry{pwm[4].pwm.ctrl.reset});
        res.insert_or_assign("pwm[4].pwm.carrierBits", DumpEntry{pwm[4].pwm.carrierBits});
        res.insert_or_assign("pwm[4].pwm.deadtimeBits", DumpEntry{pwm[4].pwm.deadtimeBits});
        res.insert_or_assign("pwm[4].pwm.config", DumpEntry{pwm[4].pwm.config});
        res.insert_or_assign("pwm[4].pwm.config.updateType", DumpEntry{pwm[4].pwm.config.updateType});
        res.insert_or_assign("pwm[4].pwm.config.enablePwmCheck", DumpEntry{pwm[4].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[4].pwm.config.enableStCheck", DumpEntry{pwm[4].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[4].pwm.config.enableValueCheck", DumpEntry{pwm[4].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[4].pwm.config.bypassDeadtime", DumpEntry{pwm[4].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[4].pwm.config.disableA", DumpEntry{pwm[4].pwm.config.disableA});
        res.insert_or_assign("pwm[4].pwm.config.disableB", DumpEntry{pwm[4].pwm.config.disableB});
        res.insert_or_assign("pwm[4].pwm.config.invert", DumpEntry{pwm[4].pwm.config.invert});
        res.insert_or_assign("pwm[4].pwm.config.decoupleCc1", DumpEntry{pwm[4].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[4].pwm.cc0Sc", DumpEntry{pwm[4].pwm.cc0Sc});
        res.insert_or_assign("pwm[4].pwm.cc1Sc", DumpEntry{pwm[4].pwm.cc1Sc});
        res.insert_or_assign("pwm[4].pwm.ctrhSc", DumpEntry{pwm[4].pwm.ctrhSc});
        res.insert_or_assign("pwm[4].pwm.deadtimeSc", DumpEntry{pwm[4].pwm.deadtimeSc});
        res.insert_or_assign("pwm[4].pwm.extendedDeadtimeSc", DumpEntry{pwm[4].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[4].pwm.minSwitchTimeSc", DumpEntry{pwm[4].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[4].pwm.minModIdxSc", DumpEntry{pwm[4].pwm.minModIdxSc});
        res.insert_or_assign("pwm[4].pwm.maxModIdxSc", DumpEntry{pwm[4].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[4].pwm.numberCcErrors", DumpEntry{pwm[4].pwm.numberCcErrors});
        res.insert_or_assign("pwm[5].pwm.ctrl", DumpEntry{pwm[5].pwm.ctrl});
        res.insert_or_assign("pwm[5].pwm.ctrl.enable", DumpEntry{pwm[5].pwm.ctrl.enable});
        res.insert_or_assign("pwm[5].pwm.ctrl.reset", DumpEntry{pwm[5].pwm.ctrl.reset});
        res.insert_or_assign("pwm[5].pwm.carrierBits", DumpEntry{pwm[5].pwm.carrierBits});
        res.insert_or_assign("pwm[5].pwm.deadtimeBits", DumpEntry{pwm[5].pwm.deadtimeBits});
        res.insert_or_assign("pwm[5].pwm.config", DumpEntry{pwm[5].pwm.config});
        res.insert_or_assign("pwm[5].pwm.config.updateType", DumpEntry{pwm[5].pwm.config.updateType});
        res.insert_or_assign("pwm[5].pwm.config.enablePwmCheck", DumpEntry{pwm[5].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[5].pwm.config.enableStCheck", DumpEntry{pwm[5].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[5].pwm.config.enableValueCheck", DumpEntry{pwm[5].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[5].pwm.config.bypassDeadtime", DumpEntry{pwm[5].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[5].pwm.config.disableA", DumpEntry{pwm[5].pwm.config.disableA});
        res.insert_or_assign("pwm[5].pwm.config.disableB", DumpEntry{pwm[5].pwm.config.disableB});
        res.insert_or_assign("pwm[5].pwm.config.invert", DumpEntry{pwm[5].pwm.config.invert});
        res.insert_or_assign("pwm[5].pwm.config.decoupleCc1", DumpEntry{pwm[5].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[5].pwm.cc0Sc", DumpEntry{pwm[5].pwm.cc0Sc});
        res.insert_or_assign("pwm[5].pwm.cc1Sc", DumpEntry{pwm[5].pwm.cc1Sc});
        res.insert_or_assign("pwm[5].pwm.ctrhSc", DumpEntry{pwm[5].pwm.ctrhSc});
        res.insert_or_assign("pwm[5].pwm.deadtimeSc", DumpEntry{pwm[5].pwm.deadtimeSc});
        res.insert_or_assign("pwm[5].pwm.extendedDeadtimeSc", DumpEntry{pwm[5].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[5].pwm.minSwitchTimeSc", DumpEntry{pwm[5].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[5].pwm.minModIdxSc", DumpEntry{pwm[5].pwm.minModIdxSc});
        res.insert_or_assign("pwm[5].pwm.maxModIdxSc", DumpEntry{pwm[5].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[5].pwm.numberCcErrors", DumpEntry{pwm[5].pwm.numberCcErrors});
        res.insert_or_assign("pwm[6].pwm.ctrl", DumpEntry{pwm[6].pwm.ctrl});
        res.insert_or_assign("pwm[6].pwm.ctrl.enable", DumpEntry{pwm[6].pwm.ctrl.enable});
        res.insert_or_assign("pwm[6].pwm.ctrl.reset", DumpEntry{pwm[6].pwm.ctrl.reset});
        res.insert_or_assign("pwm[6].pwm.carrierBits", DumpEntry{pwm[6].pwm.carrierBits});
        res.insert_or_assign("pwm[6].pwm.deadtimeBits", DumpEntry{pwm[6].pwm.deadtimeBits});
        res.insert_or_assign("pwm[6].pwm.config", DumpEntry{pwm[6].pwm.config});
        res.insert_or_assign("pwm[6].pwm.config.updateType", DumpEntry{pwm[6].pwm.config.updateType});
        res.insert_or_assign("pwm[6].pwm.config.enablePwmCheck", DumpEntry{pwm[6].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[6].pwm.config.enableStCheck", DumpEntry{pwm[6].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[6].pwm.config.enableValueCheck", DumpEntry{pwm[6].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[6].pwm.config.bypassDeadtime", DumpEntry{pwm[6].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[6].pwm.config.disableA", DumpEntry{pwm[6].pwm.config.disableA});
        res.insert_or_assign("pwm[6].pwm.config.disableB", DumpEntry{pwm[6].pwm.config.disableB});
        res.insert_or_assign("pwm[6].pwm.config.invert", DumpEntry{pwm[6].pwm.config.invert});
        res.insert_or_assign("pwm[6].pwm.config.decoupleCc1", DumpEntry{pwm[6].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[6].pwm.cc0Sc", DumpEntry{pwm[6].pwm.cc0Sc});
        res.insert_or_assign("pwm[6].pwm.cc1Sc", DumpEntry{pwm[6].pwm.cc1Sc});
        res.insert_or_assign("pwm[6].pwm.ctrhSc", DumpEntry{pwm[6].pwm.ctrhSc});
        res.insert_or_assign("pwm[6].pwm.deadtimeSc", DumpEntry{pwm[6].pwm.deadtimeSc});
        res.insert_or_assign("pwm[6].pwm.extendedDeadtimeSc", DumpEntry{pwm[6].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[6].pwm.minSwitchTimeSc", DumpEntry{pwm[6].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[6].pwm.minModIdxSc", DumpEntry{pwm[6].pwm.minModIdxSc});
        res.insert_or_assign("pwm[6].pwm.maxModIdxSc", DumpEntry{pwm[6].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[6].pwm.numberCcErrors", DumpEntry{pwm[6].pwm.numberCcErrors});
        res.insert_or_assign("pwm[7].pwm.ctrl", DumpEntry{pwm[7].pwm.ctrl});
        res.insert_or_assign("pwm[7].pwm.ctrl.enable", DumpEntry{pwm[7].pwm.ctrl.enable});
        res.insert_or_assign("pwm[7].pwm.ctrl.reset", DumpEntry{pwm[7].pwm.ctrl.reset});
        res.insert_or_assign("pwm[7].pwm.carrierBits", DumpEntry{pwm[7].pwm.carrierBits});
        res.insert_or_assign("pwm[7].pwm.deadtimeBits", DumpEntry{pwm[7].pwm.deadtimeBits});
        res.insert_or_assign("pwm[7].pwm.config", DumpEntry{pwm[7].pwm.config});
        res.insert_or_assign("pwm[7].pwm.config.updateType", DumpEntry{pwm[7].pwm.config.updateType});
        res.insert_or_assign("pwm[7].pwm.config.enablePwmCheck", DumpEntry{pwm[7].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[7].pwm.config.enableStCheck", DumpEntry{pwm[7].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[7].pwm.config.enableValueCheck", DumpEntry{pwm[7].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[7].pwm.config.bypassDeadtime", DumpEntry{pwm[7].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[7].pwm.config.disableA", DumpEntry{pwm[7].pwm.config.disableA});
        res.insert_or_assign("pwm[7].pwm.config.disableB", DumpEntry{pwm[7].pwm.config.disableB});
        res.insert_or_assign("pwm[7].pwm.config.invert", DumpEntry{pwm[7].pwm.config.invert});
        res.insert_or_assign("pwm[7].pwm.config.decoupleCc1", DumpEntry{pwm[7].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[7].pwm.cc0Sc", DumpEntry{pwm[7].pwm.cc0Sc});
        res.insert_or_assign("pwm[7].pwm.cc1Sc", DumpEntry{pwm[7].pwm.cc1Sc});
        res.insert_or_assign("pwm[7].pwm.ctrhSc", DumpEntry{pwm[7].pwm.ctrhSc});
        res.insert_or_assign("pwm[7].pwm.deadtimeSc", DumpEntry{pwm[7].pwm.deadtimeSc});
        res.insert_or_assign("pwm[7].pwm.extendedDeadtimeSc", DumpEntry{pwm[7].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[7].pwm.minSwitchTimeSc", DumpEntry{pwm[7].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[7].pwm.minModIdxSc", DumpEntry{pwm[7].pwm.minModIdxSc});
        res.insert_or_assign("pwm[7].pwm.maxModIdxSc", DumpEntry{pwm[7].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[7].pwm.numberCcErrors", DumpEntry{pwm[7].pwm.numberCcErrors});
        res.insert_or_assign("pwm[8].pwm.ctrl", DumpEntry{pwm[8].pwm.ctrl});
        res.insert_or_assign("pwm[8].pwm.ctrl.enable", DumpEntry{pwm[8].pwm.ctrl.enable});
        res.insert_or_assign("pwm[8].pwm.ctrl.reset", DumpEntry{pwm[8].pwm.ctrl.reset});
        res.insert_or_assign("pwm[8].pwm.carrierBits", DumpEntry{pwm[8].pwm.carrierBits});
        res.insert_or_assign("pwm[8].pwm.deadtimeBits", DumpEntry{pwm[8].pwm.deadtimeBits});
        res.insert_or_assign("pwm[8].pwm.config", DumpEntry{pwm[8].pwm.config});
        res.insert_or_assign("pwm[8].pwm.config.updateType", DumpEntry{pwm[8].pwm.config.updateType});
        res.insert_or_assign("pwm[8].pwm.config.enablePwmCheck", DumpEntry{pwm[8].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[8].pwm.config.enableStCheck", DumpEntry{pwm[8].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[8].pwm.config.enableValueCheck", DumpEntry{pwm[8].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[8].pwm.config.bypassDeadtime", DumpEntry{pwm[8].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[8].pwm.config.disableA", DumpEntry{pwm[8].pwm.config.disableA});
        res.insert_or_assign("pwm[8].pwm.config.disableB", DumpEntry{pwm[8].pwm.config.disableB});
        res.insert_or_assign("pwm[8].pwm.config.invert", DumpEntry{pwm[8].pwm.config.invert});
        res.insert_or_assign("pwm[8].pwm.config.decoupleCc1", DumpEntry{pwm[8].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[8].pwm.cc0Sc", DumpEntry{pwm[8].pwm.cc0Sc});
        res.insert_or_assign("pwm[8].pwm.cc1Sc", DumpEntry{pwm[8].pwm.cc1Sc});
        res.insert_or_assign("pwm[8].pwm.ctrhSc", DumpEntry{pwm[8].pwm.ctrhSc});
        res.insert_or_assign("pwm[8].pwm.deadtimeSc", DumpEntry{pwm[8].pwm.deadtimeSc});
        res.insert_or_assign("pwm[8].pwm.extendedDeadtimeSc", DumpEntry{pwm[8].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[8].pwm.minSwitchTimeSc", DumpEntry{pwm[8].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[8].pwm.minModIdxSc", DumpEntry{pwm[8].pwm.minModIdxSc});
        res.insert_or_assign("pwm[8].pwm.maxModIdxSc", DumpEntry{pwm[8].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[8].pwm.numberCcErrors", DumpEntry{pwm[8].pwm.numberCcErrors});
        res.insert_or_assign("pwm[9].pwm.ctrl", DumpEntry{pwm[9].pwm.ctrl});
        res.insert_or_assign("pwm[9].pwm.ctrl.enable", DumpEntry{pwm[9].pwm.ctrl.enable});
        res.insert_or_assign("pwm[9].pwm.ctrl.reset", DumpEntry{pwm[9].pwm.ctrl.reset});
        res.insert_or_assign("pwm[9].pwm.carrierBits", DumpEntry{pwm[9].pwm.carrierBits});
        res.insert_or_assign("pwm[9].pwm.deadtimeBits", DumpEntry{pwm[9].pwm.deadtimeBits});
        res.insert_or_assign("pwm[9].pwm.config", DumpEntry{pwm[9].pwm.config});
        res.insert_or_assign("pwm[9].pwm.config.updateType", DumpEntry{pwm[9].pwm.config.updateType});
        res.insert_or_assign("pwm[9].pwm.config.enablePwmCheck", DumpEntry{pwm[9].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[9].pwm.config.enableStCheck", DumpEntry{pwm[9].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[9].pwm.config.enableValueCheck", DumpEntry{pwm[9].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[9].pwm.config.bypassDeadtime", DumpEntry{pwm[9].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[9].pwm.config.disableA", DumpEntry{pwm[9].pwm.config.disableA});
        res.insert_or_assign("pwm[9].pwm.config.disableB", DumpEntry{pwm[9].pwm.config.disableB});
        res.insert_or_assign("pwm[9].pwm.config.invert", DumpEntry{pwm[9].pwm.config.invert});
        res.insert_or_assign("pwm[9].pwm.config.decoupleCc1", DumpEntry{pwm[9].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[9].pwm.cc0Sc", DumpEntry{pwm[9].pwm.cc0Sc});
        res.insert_or_assign("pwm[9].pwm.cc1Sc", DumpEntry{pwm[9].pwm.cc1Sc});
        res.insert_or_assign("pwm[9].pwm.ctrhSc", DumpEntry{pwm[9].pwm.ctrhSc});
        res.insert_or_assign("pwm[9].pwm.deadtimeSc", DumpEntry{pwm[9].pwm.deadtimeSc});
        res.insert_or_assign("pwm[9].pwm.extendedDeadtimeSc", DumpEntry{pwm[9].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[9].pwm.minSwitchTimeSc", DumpEntry{pwm[9].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[9].pwm.minModIdxSc", DumpEntry{pwm[9].pwm.minModIdxSc});
        res.insert_or_assign("pwm[9].pwm.maxModIdxSc", DumpEntry{pwm[9].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[9].pwm.numberCcErrors", DumpEntry{pwm[9].pwm.numberCcErrors});
        res.insert_or_assign("pwm[10].pwm.ctrl", DumpEntry{pwm[10].pwm.ctrl});
        res.insert_or_assign("pwm[10].pwm.ctrl.enable", DumpEntry{pwm[10].pwm.ctrl.enable});
        res.insert_or_assign("pwm[10].pwm.ctrl.reset", DumpEntry{pwm[10].pwm.ctrl.reset});
        res.insert_or_assign("pwm[10].pwm.carrierBits", DumpEntry{pwm[10].pwm.carrierBits});
        res.insert_or_assign("pwm[10].pwm.deadtimeBits", DumpEntry{pwm[10].pwm.deadtimeBits});
        res.insert_or_assign("pwm[10].pwm.config", DumpEntry{pwm[10].pwm.config});
        res.insert_or_assign("pwm[10].pwm.config.updateType", DumpEntry{pwm[10].pwm.config.updateType});
        res.insert_or_assign("pwm[10].pwm.config.enablePwmCheck", DumpEntry{pwm[10].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[10].pwm.config.enableStCheck", DumpEntry{pwm[10].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[10].pwm.config.enableValueCheck", DumpEntry{pwm[10].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[10].pwm.config.bypassDeadtime", DumpEntry{pwm[10].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[10].pwm.config.disableA", DumpEntry{pwm[10].pwm.config.disableA});
        res.insert_or_assign("pwm[10].pwm.config.disableB", DumpEntry{pwm[10].pwm.config.disableB});
        res.insert_or_assign("pwm[10].pwm.config.invert", DumpEntry{pwm[10].pwm.config.invert});
        res.insert_or_assign("pwm[10].pwm.config.decoupleCc1", DumpEntry{pwm[10].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[10].pwm.cc0Sc", DumpEntry{pwm[10].pwm.cc0Sc});
        res.insert_or_assign("pwm[10].pwm.cc1Sc", DumpEntry{pwm[10].pwm.cc1Sc});
        res.insert_or_assign("pwm[10].pwm.ctrhSc", DumpEntry{pwm[10].pwm.ctrhSc});
        res.insert_or_assign("pwm[10].pwm.deadtimeSc", DumpEntry{pwm[10].pwm.deadtimeSc});
        res.insert_or_assign("pwm[10].pwm.extendedDeadtimeSc", DumpEntry{pwm[10].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[10].pwm.minSwitchTimeSc", DumpEntry{pwm[10].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[10].pwm.minModIdxSc", DumpEntry{pwm[10].pwm.minModIdxSc});
        res.insert_or_assign("pwm[10].pwm.maxModIdxSc", DumpEntry{pwm[10].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[10].pwm.numberCcErrors", DumpEntry{pwm[10].pwm.numberCcErrors});
        res.insert_or_assign("pwm[11].pwm.ctrl", DumpEntry{pwm[11].pwm.ctrl});
        res.insert_or_assign("pwm[11].pwm.ctrl.enable", DumpEntry{pwm[11].pwm.ctrl.enable});
        res.insert_or_assign("pwm[11].pwm.ctrl.reset", DumpEntry{pwm[11].pwm.ctrl.reset});
        res.insert_or_assign("pwm[11].pwm.carrierBits", DumpEntry{pwm[11].pwm.carrierBits});
        res.insert_or_assign("pwm[11].pwm.deadtimeBits", DumpEntry{pwm[11].pwm.deadtimeBits});
        res.insert_or_assign("pwm[11].pwm.config", DumpEntry{pwm[11].pwm.config});
        res.insert_or_assign("pwm[11].pwm.config.updateType", DumpEntry{pwm[11].pwm.config.updateType});
        res.insert_or_assign("pwm[11].pwm.config.enablePwmCheck", DumpEntry{pwm[11].pwm.config.enablePwmCheck});
        res.insert_or_assign("pwm[11].pwm.config.enableStCheck", DumpEntry{pwm[11].pwm.config.enableStCheck});
        res.insert_or_assign("pwm[11].pwm.config.enableValueCheck", DumpEntry{pwm[11].pwm.config.enableValueCheck});
        res.insert_or_assign("pwm[11].pwm.config.bypassDeadtime", DumpEntry{pwm[11].pwm.config.bypassDeadtime});
        res.insert_or_assign("pwm[11].pwm.config.disableA", DumpEntry{pwm[11].pwm.config.disableA});
        res.insert_or_assign("pwm[11].pwm.config.disableB", DumpEntry{pwm[11].pwm.config.disableB});
        res.insert_or_assign("pwm[11].pwm.config.invert", DumpEntry{pwm[11].pwm.config.invert});
        res.insert_or_assign("pwm[11].pwm.config.decoupleCc1", DumpEntry{pwm[11].pwm.config.decoupleCc1});
        res.insert_or_assign("pwm[11].pwm.cc0Sc", DumpEntry{pwm[11].pwm.cc0Sc});
        res.insert_or_assign("pwm[11].pwm.cc1Sc", DumpEntry{pwm[11].pwm.cc1Sc});
        res.insert_or_assign("pwm[11].pwm.ctrhSc", DumpEntry{pwm[11].pwm.ctrhSc});
        res.insert_or_assign("pwm[11].pwm.deadtimeSc", DumpEntry{pwm[11].pwm.deadtimeSc});
        res.insert_or_assign("pwm[11].pwm.extendedDeadtimeSc", DumpEntry{pwm[11].pwm.extendedDeadtimeSc});
        res.insert_or_assign("pwm[11].pwm.minSwitchTimeSc", DumpEntry{pwm[11].pwm.minSwitchTimeSc});
        res.insert_or_assign("pwm[11].pwm.minModIdxSc", DumpEntry{pwm[11].pwm.minModIdxSc});
        res.insert_or_assign("pwm[11].pwm.maxModIdxSc", DumpEntry{pwm[11].pwm.maxModIdxSc});
        res.insert_or_assign("pwm[11].pwm.numberCcErrors", DumpEntry{pwm[11].pwm.numberCcErrors});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Ddma::Trig`
    //!
    //! @param trig A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under trig
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Ddma::Trig& trig)
    {
        DumpMap res{trig.base()};
        // trig.trig skipped (Register is not readable).
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Ddma::TdArray`
    //!
    //! @param td A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under td
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Ddma::TdArray& td)
    {
        DumpMap res{td.base()};
        res.insert_or_assign("td[0].srcAddr", DumpEntry{td[0].srcAddr});
        res.insert_or_assign("td[0].destAddr", DumpEntry{td[0].destAddr});
        res.insert_or_assign("td[0].btt", DumpEntry{td[0].btt});
        res.insert_or_assign("td[0].btt.value", DumpEntry{td[0].btt.value});
        res.insert_or_assign("td[0].errors", DumpEntry{td[0].errors});
        res.insert_or_assign("td[0].errors.internalError", DumpEntry{td[0].errors.internalError});
        res.insert_or_assign("td[0].errors.slaveError", DumpEntry{td[0].errors.slaveError});
        res.insert_or_assign("td[0].errors.decodeError", DumpEntry{td[0].errors.decodeError});
        res.insert_or_assign("td[1].srcAddr", DumpEntry{td[1].srcAddr});
        res.insert_or_assign("td[1].destAddr", DumpEntry{td[1].destAddr});
        res.insert_or_assign("td[1].btt", DumpEntry{td[1].btt});
        res.insert_or_assign("td[1].btt.value", DumpEntry{td[1].btt.value});
        res.insert_or_assign("td[1].errors", DumpEntry{td[1].errors});
        res.insert_or_assign("td[1].errors.internalError", DumpEntry{td[1].errors.internalError});
        res.insert_or_assign("td[1].errors.slaveError", DumpEntry{td[1].errors.slaveError});
        res.insert_or_assign("td[1].errors.decodeError", DumpEntry{td[1].errors.decodeError});
        res.insert_or_assign("td[2].srcAddr", DumpEntry{td[2].srcAddr});
        res.insert_or_assign("td[2].destAddr", DumpEntry{td[2].destAddr});
        res.insert_or_assign("td[2].btt", DumpEntry{td[2].btt});
        res.insert_or_assign("td[2].btt.value", DumpEntry{td[2].btt.value});
        res.insert_or_assign("td[2].errors", DumpEntry{td[2].errors});
        res.insert_or_assign("td[2].errors.internalError", DumpEntry{td[2].errors.internalError});
        res.insert_or_assign("td[2].errors.slaveError", DumpEntry{td[2].errors.slaveError});
        res.insert_or_assign("td[2].errors.decodeError", DumpEntry{td[2].errors.decodeError});
        res.insert_or_assign("td[3].srcAddr", DumpEntry{td[3].srcAddr});
        res.insert_or_assign("td[3].destAddr", DumpEntry{td[3].destAddr});
        res.insert_or_assign("td[3].btt", DumpEntry{td[3].btt});
        res.insert_or_assign("td[3].btt.value", DumpEntry{td[3].btt.value});
        res.insert_or_assign("td[3].errors", DumpEntry{td[3].errors});
        res.insert_or_assign("td[3].errors.internalError", DumpEntry{td[3].errors.internalError});
        res.insert_or_assign("td[3].errors.slaveError", DumpEntry{td[3].errors.slaveError});
        res.insert_or_assign("td[3].errors.decodeError", DumpEntry{td[3].errors.decodeError});
        res.insert_or_assign("td[4].srcAddr", DumpEntry{td[4].srcAddr});
        res.insert_or_assign("td[4].destAddr", DumpEntry{td[4].destAddr});
        res.insert_or_assign("td[4].btt", DumpEntry{td[4].btt});
        res.insert_or_assign("td[4].btt.value", DumpEntry{td[4].btt.value});
        res.insert_or_assign("td[4].errors", DumpEntry{td[4].errors});
        res.insert_or_assign("td[4].errors.internalError", DumpEntry{td[4].errors.internalError});
        res.insert_or_assign("td[4].errors.slaveError", DumpEntry{td[4].errors.slaveError});
        res.insert_or_assign("td[4].errors.decodeError", DumpEntry{td[4].errors.decodeError});
        res.insert_or_assign("td[5].srcAddr", DumpEntry{td[5].srcAddr});
        res.insert_or_assign("td[5].destAddr", DumpEntry{td[5].destAddr});
        res.insert_or_assign("td[5].btt", DumpEntry{td[5].btt});
        res.insert_or_assign("td[5].btt.value", DumpEntry{td[5].btt.value});
        res.insert_or_assign("td[5].errors", DumpEntry{td[5].errors});
        res.insert_or_assign("td[5].errors.internalError", DumpEntry{td[5].errors.internalError});
        res.insert_or_assign("td[5].errors.slaveError", DumpEntry{td[5].errors.slaveError});
        res.insert_or_assign("td[5].errors.decodeError", DumpEntry{td[5].errors.decodeError});
        res.insert_or_assign("td[6].srcAddr", DumpEntry{td[6].srcAddr});
        res.insert_or_assign("td[6].destAddr", DumpEntry{td[6].destAddr});
        res.insert_or_assign("td[6].btt", DumpEntry{td[6].btt});
        res.insert_or_assign("td[6].btt.value", DumpEntry{td[6].btt.value});
        res.insert_or_assign("td[6].errors", DumpEntry{td[6].errors});
        res.insert_or_assign("td[6].errors.internalError", DumpEntry{td[6].errors.internalError});
        res.insert_or_assign("td[6].errors.slaveError", DumpEntry{td[6].errors.slaveError});
        res.insert_or_assign("td[6].errors.decodeError", DumpEntry{td[6].errors.decodeError});
        res.insert_or_assign("td[7].srcAddr", DumpEntry{td[7].srcAddr});
        res.insert_or_assign("td[7].destAddr", DumpEntry{td[7].destAddr});
        res.insert_or_assign("td[7].btt", DumpEntry{td[7].btt});
        res.insert_or_assign("td[7].btt.value", DumpEntry{td[7].btt.value});
        res.insert_or_assign("td[7].errors", DumpEntry{td[7].errors});
        res.insert_or_assign("td[7].errors.internalError", DumpEntry{td[7].errors.internalError});
        res.insert_or_assign("td[7].errors.slaveError", DumpEntry{td[7].errors.slaveError});
        res.insert_or_assign("td[7].errors.decodeError", DumpEntry{td[7].errors.decodeError});
        res.insert_or_assign("td[8].srcAddr", DumpEntry{td[8].srcAddr});
        res.insert_or_assign("td[8].destAddr", DumpEntry{td[8].destAddr});
        res.insert_or_assign("td[8].btt", DumpEntry{td[8].btt});
        res.insert_or_assign("td[8].btt.value", DumpEntry{td[8].btt.value});
        res.insert_or_assign("td[8].errors", DumpEntry{td[8].errors});
        res.insert_or_assign("td[8].errors.internalError", DumpEntry{td[8].errors.internalError});
        res.insert_or_assign("td[8].errors.slaveError", DumpEntry{td[8].errors.slaveError});
        res.insert_or_assign("td[8].errors.decodeError", DumpEntry{td[8].errors.decodeError});
        res.insert_or_assign("td[9].srcAddr", DumpEntry{td[9].srcAddr});
        res.insert_or_assign("td[9].destAddr", DumpEntry{td[9].destAddr});
        res.insert_or_assign("td[9].btt", DumpEntry{td[9].btt});
        res.insert_or_assign("td[9].btt.value", DumpEntry{td[9].btt.value});
        res.insert_or_assign("td[9].errors", DumpEntry{td[9].errors});
        res.insert_or_assign("td[9].errors.internalError", DumpEntry{td[9].errors.internalError});
        res.insert_or_assign("td[9].errors.slaveError", DumpEntry{td[9].errors.slaveError});
        res.insert_or_assign("td[9].errors.decodeError", DumpEntry{td[9].errors.decodeError});
        res.insert_or_assign("td[10].srcAddr", DumpEntry{td[10].srcAddr});
        res.insert_or_assign("td[10].destAddr", DumpEntry{td[10].destAddr});
        res.insert_or_assign("td[10].btt", DumpEntry{td[10].btt});
        res.insert_or_assign("td[10].btt.value", DumpEntry{td[10].btt.value});
        res.insert_or_assign("td[10].errors", DumpEntry{td[10].errors});
        res.insert_or_assign("td[10].errors.internalError", DumpEntry{td[10].errors.internalError});
        res.insert_or_assign("td[10].errors.slaveError", DumpEntry{td[10].errors.slaveError});
        res.insert_or_assign("td[10].errors.decodeError", DumpEntry{td[10].errors.decodeError});
        res.insert_or_assign("td[11].srcAddr", DumpEntry{td[11].srcAddr});
        res.insert_or_assign("td[11].destAddr", DumpEntry{td[11].destAddr});
        res.insert_or_assign("td[11].btt", DumpEntry{td[11].btt});
        res.insert_or_assign("td[11].btt.value", DumpEntry{td[11].btt.value});
        res.insert_or_assign("td[11].errors", DumpEntry{td[11].errors});
        res.insert_or_assign("td[11].errors.internalError", DumpEntry{td[11].errors.internalError});
        res.insert_or_assign("td[11].errors.slaveError", DumpEntry{td[11].errors.slaveError});
        res.insert_or_assign("td[11].errors.decodeError", DumpEntry{td[11].errors.decodeError});
        res.insert_or_assign("td[12].srcAddr", DumpEntry{td[12].srcAddr});
        res.insert_or_assign("td[12].destAddr", DumpEntry{td[12].destAddr});
        res.insert_or_assign("td[12].btt", DumpEntry{td[12].btt});
        res.insert_or_assign("td[12].btt.value", DumpEntry{td[12].btt.value});
        res.insert_or_assign("td[12].errors", DumpEntry{td[12].errors});
        res.insert_or_assign("td[12].errors.internalError", DumpEntry{td[12].errors.internalError});
        res.insert_or_assign("td[12].errors.slaveError", DumpEntry{td[12].errors.slaveError});
        res.insert_or_assign("td[12].errors.decodeError", DumpEntry{td[12].errors.decodeError});
        res.insert_or_assign("td[13].srcAddr", DumpEntry{td[13].srcAddr});
        res.insert_or_assign("td[13].destAddr", DumpEntry{td[13].destAddr});
        res.insert_or_assign("td[13].btt", DumpEntry{td[13].btt});
        res.insert_or_assign("td[13].btt.value", DumpEntry{td[13].btt.value});
        res.insert_or_assign("td[13].errors", DumpEntry{td[13].errors});
        res.insert_or_assign("td[13].errors.internalError", DumpEntry{td[13].errors.internalError});
        res.insert_or_assign("td[13].errors.slaveError", DumpEntry{td[13].errors.slaveError});
        res.insert_or_assign("td[13].errors.decodeError", DumpEntry{td[13].errors.decodeError});
        res.insert_or_assign("td[14].srcAddr", DumpEntry{td[14].srcAddr});
        res.insert_or_assign("td[14].destAddr", DumpEntry{td[14].destAddr});
        res.insert_or_assign("td[14].btt", DumpEntry{td[14].btt});
        res.insert_or_assign("td[14].btt.value", DumpEntry{td[14].btt.value});
        res.insert_or_assign("td[14].errors", DumpEntry{td[14].errors});
        res.insert_or_assign("td[14].errors.internalError", DumpEntry{td[14].errors.internalError});
        res.insert_or_assign("td[14].errors.slaveError", DumpEntry{td[14].errors.slaveError});
        res.insert_or_assign("td[14].errors.decodeError", DumpEntry{td[14].errors.decodeError});
        res.insert_or_assign("td[15].srcAddr", DumpEntry{td[15].srcAddr});
        res.insert_or_assign("td[15].destAddr", DumpEntry{td[15].destAddr});
        res.insert_or_assign("td[15].btt", DumpEntry{td[15].btt});
        res.insert_or_assign("td[15].btt.value", DumpEntry{td[15].btt.value});
        res.insert_or_assign("td[15].errors", DumpEntry{td[15].errors});
        res.insert_or_assign("td[15].errors.internalError", DumpEntry{td[15].errors.internalError});
        res.insert_or_assign("td[15].errors.slaveError", DumpEntry{td[15].errors.slaveError});
        res.insert_or_assign("td[15].errors.decodeError", DumpEntry{td[15].errors.decodeError});
        res.insert_or_assign("td[16].srcAddr", DumpEntry{td[16].srcAddr});
        res.insert_or_assign("td[16].destAddr", DumpEntry{td[16].destAddr});
        res.insert_or_assign("td[16].btt", DumpEntry{td[16].btt});
        res.insert_or_assign("td[16].btt.value", DumpEntry{td[16].btt.value});
        res.insert_or_assign("td[16].errors", DumpEntry{td[16].errors});
        res.insert_or_assign("td[16].errors.internalError", DumpEntry{td[16].errors.internalError});
        res.insert_or_assign("td[16].errors.slaveError", DumpEntry{td[16].errors.slaveError});
        res.insert_or_assign("td[16].errors.decodeError", DumpEntry{td[16].errors.decodeError});
        res.insert_or_assign("td[17].srcAddr", DumpEntry{td[17].srcAddr});
        res.insert_or_assign("td[17].destAddr", DumpEntry{td[17].destAddr});
        res.insert_or_assign("td[17].btt", DumpEntry{td[17].btt});
        res.insert_or_assign("td[17].btt.value", DumpEntry{td[17].btt.value});
        res.insert_or_assign("td[17].errors", DumpEntry{td[17].errors});
        res.insert_or_assign("td[17].errors.internalError", DumpEntry{td[17].errors.internalError});
        res.insert_or_assign("td[17].errors.slaveError", DumpEntry{td[17].errors.slaveError});
        res.insert_or_assign("td[17].errors.decodeError", DumpEntry{td[17].errors.decodeError});
        res.insert_or_assign("td[18].srcAddr", DumpEntry{td[18].srcAddr});
        res.insert_or_assign("td[18].destAddr", DumpEntry{td[18].destAddr});
        res.insert_or_assign("td[18].btt", DumpEntry{td[18].btt});
        res.insert_or_assign("td[18].btt.value", DumpEntry{td[18].btt.value});
        res.insert_or_assign("td[18].errors", DumpEntry{td[18].errors});
        res.insert_or_assign("td[18].errors.internalError", DumpEntry{td[18].errors.internalError});
        res.insert_or_assign("td[18].errors.slaveError", DumpEntry{td[18].errors.slaveError});
        res.insert_or_assign("td[18].errors.decodeError", DumpEntry{td[18].errors.decodeError});
        res.insert_or_assign("td[19].srcAddr", DumpEntry{td[19].srcAddr});
        res.insert_or_assign("td[19].destAddr", DumpEntry{td[19].destAddr});
        res.insert_or_assign("td[19].btt", DumpEntry{td[19].btt});
        res.insert_or_assign("td[19].btt.value", DumpEntry{td[19].btt.value});
        res.insert_or_assign("td[19].errors", DumpEntry{td[19].errors});
        res.insert_or_assign("td[19].errors.internalError", DumpEntry{td[19].errors.internalError});
        res.insert_or_assign("td[19].errors.slaveError", DumpEntry{td[19].errors.slaveError});
        res.insert_or_assign("td[19].errors.decodeError", DumpEntry{td[19].errors.decodeError});
        res.insert_or_assign("td[20].srcAddr", DumpEntry{td[20].srcAddr});
        res.insert_or_assign("td[20].destAddr", DumpEntry{td[20].destAddr});
        res.insert_or_assign("td[20].btt", DumpEntry{td[20].btt});
        res.insert_or_assign("td[20].btt.value", DumpEntry{td[20].btt.value});
        res.insert_or_assign("td[20].errors", DumpEntry{td[20].errors});
        res.insert_or_assign("td[20].errors.internalError", DumpEntry{td[20].errors.internalError});
        res.insert_or_assign("td[20].errors.slaveError", DumpEntry{td[20].errors.slaveError});
        res.insert_or_assign("td[20].errors.decodeError", DumpEntry{td[20].errors.decodeError});
        res.insert_or_assign("td[21].srcAddr", DumpEntry{td[21].srcAddr});
        res.insert_or_assign("td[21].destAddr", DumpEntry{td[21].destAddr});
        res.insert_or_assign("td[21].btt", DumpEntry{td[21].btt});
        res.insert_or_assign("td[21].btt.value", DumpEntry{td[21].btt.value});
        res.insert_or_assign("td[21].errors", DumpEntry{td[21].errors});
        res.insert_or_assign("td[21].errors.internalError", DumpEntry{td[21].errors.internalError});
        res.insert_or_assign("td[21].errors.slaveError", DumpEntry{td[21].errors.slaveError});
        res.insert_or_assign("td[21].errors.decodeError", DumpEntry{td[21].errors.decodeError});
        res.insert_or_assign("td[22].srcAddr", DumpEntry{td[22].srcAddr});
        res.insert_or_assign("td[22].destAddr", DumpEntry{td[22].destAddr});
        res.insert_or_assign("td[22].btt", DumpEntry{td[22].btt});
        res.insert_or_assign("td[22].btt.value", DumpEntry{td[22].btt.value});
        res.insert_or_assign("td[22].errors", DumpEntry{td[22].errors});
        res.insert_or_assign("td[22].errors.internalError", DumpEntry{td[22].errors.internalError});
        res.insert_or_assign("td[22].errors.slaveError", DumpEntry{td[22].errors.slaveError});
        res.insert_or_assign("td[22].errors.decodeError", DumpEntry{td[22].errors.decodeError});
        res.insert_or_assign("td[23].srcAddr", DumpEntry{td[23].srcAddr});
        res.insert_or_assign("td[23].destAddr", DumpEntry{td[23].destAddr});
        res.insert_or_assign("td[23].btt", DumpEntry{td[23].btt});
        res.insert_or_assign("td[23].btt.value", DumpEntry{td[23].btt.value});
        res.insert_or_assign("td[23].errors", DumpEntry{td[23].errors});
        res.insert_or_assign("td[23].errors.internalError", DumpEntry{td[23].errors.internalError});
        res.insert_or_assign("td[23].errors.slaveError", DumpEntry{td[23].errors.slaveError});
        res.insert_or_assign("td[23].errors.decodeError", DumpEntry{td[23].errors.decodeError});
        res.insert_or_assign("td[24].srcAddr", DumpEntry{td[24].srcAddr});
        res.insert_or_assign("td[24].destAddr", DumpEntry{td[24].destAddr});
        res.insert_or_assign("td[24].btt", DumpEntry{td[24].btt});
        res.insert_or_assign("td[24].btt.value", DumpEntry{td[24].btt.value});
        res.insert_or_assign("td[24].errors", DumpEntry{td[24].errors});
        res.insert_or_assign("td[24].errors.internalError", DumpEntry{td[24].errors.internalError});
        res.insert_or_assign("td[24].errors.slaveError", DumpEntry{td[24].errors.slaveError});
        res.insert_or_assign("td[24].errors.decodeError", DumpEntry{td[24].errors.decodeError});
        res.insert_or_assign("td[25].srcAddr", DumpEntry{td[25].srcAddr});
        res.insert_or_assign("td[25].destAddr", DumpEntry{td[25].destAddr});
        res.insert_or_assign("td[25].btt", DumpEntry{td[25].btt});
        res.insert_or_assign("td[25].btt.value", DumpEntry{td[25].btt.value});
        res.insert_or_assign("td[25].errors", DumpEntry{td[25].errors});
        res.insert_or_assign("td[25].errors.internalError", DumpEntry{td[25].errors.internalError});
        res.insert_or_assign("td[25].errors.slaveError", DumpEntry{td[25].errors.slaveError});
        res.insert_or_assign("td[25].errors.decodeError", DumpEntry{td[25].errors.decodeError});
        res.insert_or_assign("td[26].srcAddr", DumpEntry{td[26].srcAddr});
        res.insert_or_assign("td[26].destAddr", DumpEntry{td[26].destAddr});
        res.insert_or_assign("td[26].btt", DumpEntry{td[26].btt});
        res.insert_or_assign("td[26].btt.value", DumpEntry{td[26].btt.value});
        res.insert_or_assign("td[26].errors", DumpEntry{td[26].errors});
        res.insert_or_assign("td[26].errors.internalError", DumpEntry{td[26].errors.internalError});
        res.insert_or_assign("td[26].errors.slaveError", DumpEntry{td[26].errors.slaveError});
        res.insert_or_assign("td[26].errors.decodeError", DumpEntry{td[26].errors.decodeError});
        res.insert_or_assign("td[27].srcAddr", DumpEntry{td[27].srcAddr});
        res.insert_or_assign("td[27].destAddr", DumpEntry{td[27].destAddr});
        res.insert_or_assign("td[27].btt", DumpEntry{td[27].btt});
        res.insert_or_assign("td[27].btt.value", DumpEntry{td[27].btt.value});
        res.insert_or_assign("td[27].errors", DumpEntry{td[27].errors});
        res.insert_or_assign("td[27].errors.internalError", DumpEntry{td[27].errors.internalError});
        res.insert_or_assign("td[27].errors.slaveError", DumpEntry{td[27].errors.slaveError});
        res.insert_or_assign("td[27].errors.decodeError", DumpEntry{td[27].errors.decodeError});
        res.insert_or_assign("td[28].srcAddr", DumpEntry{td[28].srcAddr});
        res.insert_or_assign("td[28].destAddr", DumpEntry{td[28].destAddr});
        res.insert_or_assign("td[28].btt", DumpEntry{td[28].btt});
        res.insert_or_assign("td[28].btt.value", DumpEntry{td[28].btt.value});
        res.insert_or_assign("td[28].errors", DumpEntry{td[28].errors});
        res.insert_or_assign("td[28].errors.internalError", DumpEntry{td[28].errors.internalError});
        res.insert_or_assign("td[28].errors.slaveError", DumpEntry{td[28].errors.slaveError});
        res.insert_or_assign("td[28].errors.decodeError", DumpEntry{td[28].errors.decodeError});
        res.insert_or_assign("td[29].srcAddr", DumpEntry{td[29].srcAddr});
        res.insert_or_assign("td[29].destAddr", DumpEntry{td[29].destAddr});
        res.insert_or_assign("td[29].btt", DumpEntry{td[29].btt});
        res.insert_or_assign("td[29].btt.value", DumpEntry{td[29].btt.value});
        res.insert_or_assign("td[29].errors", DumpEntry{td[29].errors});
        res.insert_or_assign("td[29].errors.internalError", DumpEntry{td[29].errors.internalError});
        res.insert_or_assign("td[29].errors.slaveError", DumpEntry{td[29].errors.slaveError});
        res.insert_or_assign("td[29].errors.decodeError", DumpEntry{td[29].errors.decodeError});
        res.insert_or_assign("td[30].srcAddr", DumpEntry{td[30].srcAddr});
        res.insert_or_assign("td[30].destAddr", DumpEntry{td[30].destAddr});
        res.insert_or_assign("td[30].btt", DumpEntry{td[30].btt});
        res.insert_or_assign("td[30].btt.value", DumpEntry{td[30].btt.value});
        res.insert_or_assign("td[30].errors", DumpEntry{td[30].errors});
        res.insert_or_assign("td[30].errors.internalError", DumpEntry{td[30].errors.internalError});
        res.insert_or_assign("td[30].errors.slaveError", DumpEntry{td[30].errors.slaveError});
        res.insert_or_assign("td[30].errors.decodeError", DumpEntry{td[30].errors.decodeError});
        res.insert_or_assign("td[31].srcAddr", DumpEntry{td[31].srcAddr});
        res.insert_or_assign("td[31].destAddr", DumpEntry{td[31].destAddr});
        res.insert_or_assign("td[31].btt", DumpEntry{td[31].btt});
        res.insert_or_assign("td[31].btt.value", DumpEntry{td[31].btt.value});
        res.insert_or_assign("td[31].errors", DumpEntry{td[31].errors});
        res.insert_or_assign("td[31].errors.internalError", DumpEntry{td[31].errors.internalError});
        res.insert_or_assign("td[31].errors.slaveError", DumpEntry{td[31].errors.slaveError});
        res.insert_or_assign("td[31].errors.decodeError", DumpEntry{td[31].errors.decodeError});
        res.insert_or_assign("td[32].srcAddr", DumpEntry{td[32].srcAddr});
        res.insert_or_assign("td[32].destAddr", DumpEntry{td[32].destAddr});
        res.insert_or_assign("td[32].btt", DumpEntry{td[32].btt});
        res.insert_or_assign("td[32].btt.value", DumpEntry{td[32].btt.value});
        res.insert_or_assign("td[32].errors", DumpEntry{td[32].errors});
        res.insert_or_assign("td[32].errors.internalError", DumpEntry{td[32].errors.internalError});
        res.insert_or_assign("td[32].errors.slaveError", DumpEntry{td[32].errors.slaveError});
        res.insert_or_assign("td[32].errors.decodeError", DumpEntry{td[32].errors.decodeError});
        res.insert_or_assign("td[33].srcAddr", DumpEntry{td[33].srcAddr});
        res.insert_or_assign("td[33].destAddr", DumpEntry{td[33].destAddr});
        res.insert_or_assign("td[33].btt", DumpEntry{td[33].btt});
        res.insert_or_assign("td[33].btt.value", DumpEntry{td[33].btt.value});
        res.insert_or_assign("td[33].errors", DumpEntry{td[33].errors});
        res.insert_or_assign("td[33].errors.internalError", DumpEntry{td[33].errors.internalError});
        res.insert_or_assign("td[33].errors.slaveError", DumpEntry{td[33].errors.slaveError});
        res.insert_or_assign("td[33].errors.decodeError", DumpEntry{td[33].errors.decodeError});
        res.insert_or_assign("td[34].srcAddr", DumpEntry{td[34].srcAddr});
        res.insert_or_assign("td[34].destAddr", DumpEntry{td[34].destAddr});
        res.insert_or_assign("td[34].btt", DumpEntry{td[34].btt});
        res.insert_or_assign("td[34].btt.value", DumpEntry{td[34].btt.value});
        res.insert_or_assign("td[34].errors", DumpEntry{td[34].errors});
        res.insert_or_assign("td[34].errors.internalError", DumpEntry{td[34].errors.internalError});
        res.insert_or_assign("td[34].errors.slaveError", DumpEntry{td[34].errors.slaveError});
        res.insert_or_assign("td[34].errors.decodeError", DumpEntry{td[34].errors.decodeError});
        res.insert_or_assign("td[35].srcAddr", DumpEntry{td[35].srcAddr});
        res.insert_or_assign("td[35].destAddr", DumpEntry{td[35].destAddr});
        res.insert_or_assign("td[35].btt", DumpEntry{td[35].btt});
        res.insert_or_assign("td[35].btt.value", DumpEntry{td[35].btt.value});
        res.insert_or_assign("td[35].errors", DumpEntry{td[35].errors});
        res.insert_or_assign("td[35].errors.internalError", DumpEntry{td[35].errors.internalError});
        res.insert_or_assign("td[35].errors.slaveError", DumpEntry{td[35].errors.slaveError});
        res.insert_or_assign("td[35].errors.decodeError", DumpEntry{td[35].errors.decodeError});
        res.insert_or_assign("td[36].srcAddr", DumpEntry{td[36].srcAddr});
        res.insert_or_assign("td[36].destAddr", DumpEntry{td[36].destAddr});
        res.insert_or_assign("td[36].btt", DumpEntry{td[36].btt});
        res.insert_or_assign("td[36].btt.value", DumpEntry{td[36].btt.value});
        res.insert_or_assign("td[36].errors", DumpEntry{td[36].errors});
        res.insert_or_assign("td[36].errors.internalError", DumpEntry{td[36].errors.internalError});
        res.insert_or_assign("td[36].errors.slaveError", DumpEntry{td[36].errors.slaveError});
        res.insert_or_assign("td[36].errors.decodeError", DumpEntry{td[36].errors.decodeError});
        res.insert_or_assign("td[37].srcAddr", DumpEntry{td[37].srcAddr});
        res.insert_or_assign("td[37].destAddr", DumpEntry{td[37].destAddr});
        res.insert_or_assign("td[37].btt", DumpEntry{td[37].btt});
        res.insert_or_assign("td[37].btt.value", DumpEntry{td[37].btt.value});
        res.insert_or_assign("td[37].errors", DumpEntry{td[37].errors});
        res.insert_or_assign("td[37].errors.internalError", DumpEntry{td[37].errors.internalError});
        res.insert_or_assign("td[37].errors.slaveError", DumpEntry{td[37].errors.slaveError});
        res.insert_or_assign("td[37].errors.decodeError", DumpEntry{td[37].errors.decodeError});
        res.insert_or_assign("td[38].srcAddr", DumpEntry{td[38].srcAddr});
        res.insert_or_assign("td[38].destAddr", DumpEntry{td[38].destAddr});
        res.insert_or_assign("td[38].btt", DumpEntry{td[38].btt});
        res.insert_or_assign("td[38].btt.value", DumpEntry{td[38].btt.value});
        res.insert_or_assign("td[38].errors", DumpEntry{td[38].errors});
        res.insert_or_assign("td[38].errors.internalError", DumpEntry{td[38].errors.internalError});
        res.insert_or_assign("td[38].errors.slaveError", DumpEntry{td[38].errors.slaveError});
        res.insert_or_assign("td[38].errors.decodeError", DumpEntry{td[38].errors.decodeError});
        res.insert_or_assign("td[39].srcAddr", DumpEntry{td[39].srcAddr});
        res.insert_or_assign("td[39].destAddr", DumpEntry{td[39].destAddr});
        res.insert_or_assign("td[39].btt", DumpEntry{td[39].btt});
        res.insert_or_assign("td[39].btt.value", DumpEntry{td[39].btt.value});
        res.insert_or_assign("td[39].errors", DumpEntry{td[39].errors});
        res.insert_or_assign("td[39].errors.internalError", DumpEntry{td[39].errors.internalError});
        res.insert_or_assign("td[39].errors.slaveError", DumpEntry{td[39].errors.slaveError});
        res.insert_or_assign("td[39].errors.decodeError", DumpEntry{td[39].errors.decodeError});
        res.insert_or_assign("td[40].srcAddr", DumpEntry{td[40].srcAddr});
        res.insert_or_assign("td[40].destAddr", DumpEntry{td[40].destAddr});
        res.insert_or_assign("td[40].btt", DumpEntry{td[40].btt});
        res.insert_or_assign("td[40].btt.value", DumpEntry{td[40].btt.value});
        res.insert_or_assign("td[40].errors", DumpEntry{td[40].errors});
        res.insert_or_assign("td[40].errors.internalError", DumpEntry{td[40].errors.internalError});
        res.insert_or_assign("td[40].errors.slaveError", DumpEntry{td[40].errors.slaveError});
        res.insert_or_assign("td[40].errors.decodeError", DumpEntry{td[40].errors.decodeError});
        res.insert_or_assign("td[41].srcAddr", DumpEntry{td[41].srcAddr});
        res.insert_or_assign("td[41].destAddr", DumpEntry{td[41].destAddr});
        res.insert_or_assign("td[41].btt", DumpEntry{td[41].btt});
        res.insert_or_assign("td[41].btt.value", DumpEntry{td[41].btt.value});
        res.insert_or_assign("td[41].errors", DumpEntry{td[41].errors});
        res.insert_or_assign("td[41].errors.internalError", DumpEntry{td[41].errors.internalError});
        res.insert_or_assign("td[41].errors.slaveError", DumpEntry{td[41].errors.slaveError});
        res.insert_or_assign("td[41].errors.decodeError", DumpEntry{td[41].errors.decodeError});
        res.insert_or_assign("td[42].srcAddr", DumpEntry{td[42].srcAddr});
        res.insert_or_assign("td[42].destAddr", DumpEntry{td[42].destAddr});
        res.insert_or_assign("td[42].btt", DumpEntry{td[42].btt});
        res.insert_or_assign("td[42].btt.value", DumpEntry{td[42].btt.value});
        res.insert_or_assign("td[42].errors", DumpEntry{td[42].errors});
        res.insert_or_assign("td[42].errors.internalError", DumpEntry{td[42].errors.internalError});
        res.insert_or_assign("td[42].errors.slaveError", DumpEntry{td[42].errors.slaveError});
        res.insert_or_assign("td[42].errors.decodeError", DumpEntry{td[42].errors.decodeError});
        res.insert_or_assign("td[43].srcAddr", DumpEntry{td[43].srcAddr});
        res.insert_or_assign("td[43].destAddr", DumpEntry{td[43].destAddr});
        res.insert_or_assign("td[43].btt", DumpEntry{td[43].btt});
        res.insert_or_assign("td[43].btt.value", DumpEntry{td[43].btt.value});
        res.insert_or_assign("td[43].errors", DumpEntry{td[43].errors});
        res.insert_or_assign("td[43].errors.internalError", DumpEntry{td[43].errors.internalError});
        res.insert_or_assign("td[43].errors.slaveError", DumpEntry{td[43].errors.slaveError});
        res.insert_or_assign("td[43].errors.decodeError", DumpEntry{td[43].errors.decodeError});
        res.insert_or_assign("td[44].srcAddr", DumpEntry{td[44].srcAddr});
        res.insert_or_assign("td[44].destAddr", DumpEntry{td[44].destAddr});
        res.insert_or_assign("td[44].btt", DumpEntry{td[44].btt});
        res.insert_or_assign("td[44].btt.value", DumpEntry{td[44].btt.value});
        res.insert_or_assign("td[44].errors", DumpEntry{td[44].errors});
        res.insert_or_assign("td[44].errors.internalError", DumpEntry{td[44].errors.internalError});
        res.insert_or_assign("td[44].errors.slaveError", DumpEntry{td[44].errors.slaveError});
        res.insert_or_assign("td[44].errors.decodeError", DumpEntry{td[44].errors.decodeError});
        res.insert_or_assign("td[45].srcAddr", DumpEntry{td[45].srcAddr});
        res.insert_or_assign("td[45].destAddr", DumpEntry{td[45].destAddr});
        res.insert_or_assign("td[45].btt", DumpEntry{td[45].btt});
        res.insert_or_assign("td[45].btt.value", DumpEntry{td[45].btt.value});
        res.insert_or_assign("td[45].errors", DumpEntry{td[45].errors});
        res.insert_or_assign("td[45].errors.internalError", DumpEntry{td[45].errors.internalError});
        res.insert_or_assign("td[45].errors.slaveError", DumpEntry{td[45].errors.slaveError});
        res.insert_or_assign("td[45].errors.decodeError", DumpEntry{td[45].errors.decodeError});
        res.insert_or_assign("td[46].srcAddr", DumpEntry{td[46].srcAddr});
        res.insert_or_assign("td[46].destAddr", DumpEntry{td[46].destAddr});
        res.insert_or_assign("td[46].btt", DumpEntry{td[46].btt});
        res.insert_or_assign("td[46].btt.value", DumpEntry{td[46].btt.value});
        res.insert_or_assign("td[46].errors", DumpEntry{td[46].errors});
        res.insert_or_assign("td[46].errors.internalError", DumpEntry{td[46].errors.internalError});
        res.insert_or_assign("td[46].errors.slaveError", DumpEntry{td[46].errors.slaveError});
        res.insert_or_assign("td[46].errors.decodeError", DumpEntry{td[46].errors.decodeError});
        res.insert_or_assign("td[47].srcAddr", DumpEntry{td[47].srcAddr});
        res.insert_or_assign("td[47].destAddr", DumpEntry{td[47].destAddr});
        res.insert_or_assign("td[47].btt", DumpEntry{td[47].btt});
        res.insert_or_assign("td[47].btt.value", DumpEntry{td[47].btt.value});
        res.insert_or_assign("td[47].errors", DumpEntry{td[47].errors});
        res.insert_or_assign("td[47].errors.internalError", DumpEntry{td[47].errors.internalError});
        res.insert_or_assign("td[47].errors.slaveError", DumpEntry{td[47].errors.slaveError});
        res.insert_or_assign("td[47].errors.decodeError", DumpEntry{td[47].errors.decodeError});
        res.insert_or_assign("td[48].srcAddr", DumpEntry{td[48].srcAddr});
        res.insert_or_assign("td[48].destAddr", DumpEntry{td[48].destAddr});
        res.insert_or_assign("td[48].btt", DumpEntry{td[48].btt});
        res.insert_or_assign("td[48].btt.value", DumpEntry{td[48].btt.value});
        res.insert_or_assign("td[48].errors", DumpEntry{td[48].errors});
        res.insert_or_assign("td[48].errors.internalError", DumpEntry{td[48].errors.internalError});
        res.insert_or_assign("td[48].errors.slaveError", DumpEntry{td[48].errors.slaveError});
        res.insert_or_assign("td[48].errors.decodeError", DumpEntry{td[48].errors.decodeError});
        res.insert_or_assign("td[49].srcAddr", DumpEntry{td[49].srcAddr});
        res.insert_or_assign("td[49].destAddr", DumpEntry{td[49].destAddr});
        res.insert_or_assign("td[49].btt", DumpEntry{td[49].btt});
        res.insert_or_assign("td[49].btt.value", DumpEntry{td[49].btt.value});
        res.insert_or_assign("td[49].errors", DumpEntry{td[49].errors});
        res.insert_or_assign("td[49].errors.internalError", DumpEntry{td[49].errors.internalError});
        res.insert_or_assign("td[49].errors.slaveError", DumpEntry{td[49].errors.slaveError});
        res.insert_or_assign("td[49].errors.decodeError", DumpEntry{td[49].errors.decodeError});
        res.insert_or_assign("td[50].srcAddr", DumpEntry{td[50].srcAddr});
        res.insert_or_assign("td[50].destAddr", DumpEntry{td[50].destAddr});
        res.insert_or_assign("td[50].btt", DumpEntry{td[50].btt});
        res.insert_or_assign("td[50].btt.value", DumpEntry{td[50].btt.value});
        res.insert_or_assign("td[50].errors", DumpEntry{td[50].errors});
        res.insert_or_assign("td[50].errors.internalError", DumpEntry{td[50].errors.internalError});
        res.insert_or_assign("td[50].errors.slaveError", DumpEntry{td[50].errors.slaveError});
        res.insert_or_assign("td[50].errors.decodeError", DumpEntry{td[50].errors.decodeError});
        res.insert_or_assign("td[51].srcAddr", DumpEntry{td[51].srcAddr});
        res.insert_or_assign("td[51].destAddr", DumpEntry{td[51].destAddr});
        res.insert_or_assign("td[51].btt", DumpEntry{td[51].btt});
        res.insert_or_assign("td[51].btt.value", DumpEntry{td[51].btt.value});
        res.insert_or_assign("td[51].errors", DumpEntry{td[51].errors});
        res.insert_or_assign("td[51].errors.internalError", DumpEntry{td[51].errors.internalError});
        res.insert_or_assign("td[51].errors.slaveError", DumpEntry{td[51].errors.slaveError});
        res.insert_or_assign("td[51].errors.decodeError", DumpEntry{td[51].errors.decodeError});
        res.insert_or_assign("td[52].srcAddr", DumpEntry{td[52].srcAddr});
        res.insert_or_assign("td[52].destAddr", DumpEntry{td[52].destAddr});
        res.insert_or_assign("td[52].btt", DumpEntry{td[52].btt});
        res.insert_or_assign("td[52].btt.value", DumpEntry{td[52].btt.value});
        res.insert_or_assign("td[52].errors", DumpEntry{td[52].errors});
        res.insert_or_assign("td[52].errors.internalError", DumpEntry{td[52].errors.internalError});
        res.insert_or_assign("td[52].errors.slaveError", DumpEntry{td[52].errors.slaveError});
        res.insert_or_assign("td[52].errors.decodeError", DumpEntry{td[52].errors.decodeError});
        res.insert_or_assign("td[53].srcAddr", DumpEntry{td[53].srcAddr});
        res.insert_or_assign("td[53].destAddr", DumpEntry{td[53].destAddr});
        res.insert_or_assign("td[53].btt", DumpEntry{td[53].btt});
        res.insert_or_assign("td[53].btt.value", DumpEntry{td[53].btt.value});
        res.insert_or_assign("td[53].errors", DumpEntry{td[53].errors});
        res.insert_or_assign("td[53].errors.internalError", DumpEntry{td[53].errors.internalError});
        res.insert_or_assign("td[53].errors.slaveError", DumpEntry{td[53].errors.slaveError});
        res.insert_or_assign("td[53].errors.decodeError", DumpEntry{td[53].errors.decodeError});
        res.insert_or_assign("td[54].srcAddr", DumpEntry{td[54].srcAddr});
        res.insert_or_assign("td[54].destAddr", DumpEntry{td[54].destAddr});
        res.insert_or_assign("td[54].btt", DumpEntry{td[54].btt});
        res.insert_or_assign("td[54].btt.value", DumpEntry{td[54].btt.value});
        res.insert_or_assign("td[54].errors", DumpEntry{td[54].errors});
        res.insert_or_assign("td[54].errors.internalError", DumpEntry{td[54].errors.internalError});
        res.insert_or_assign("td[54].errors.slaveError", DumpEntry{td[54].errors.slaveError});
        res.insert_or_assign("td[54].errors.decodeError", DumpEntry{td[54].errors.decodeError});
        res.insert_or_assign("td[55].srcAddr", DumpEntry{td[55].srcAddr});
        res.insert_or_assign("td[55].destAddr", DumpEntry{td[55].destAddr});
        res.insert_or_assign("td[55].btt", DumpEntry{td[55].btt});
        res.insert_or_assign("td[55].btt.value", DumpEntry{td[55].btt.value});
        res.insert_or_assign("td[55].errors", DumpEntry{td[55].errors});
        res.insert_or_assign("td[55].errors.internalError", DumpEntry{td[55].errors.internalError});
        res.insert_or_assign("td[55].errors.slaveError", DumpEntry{td[55].errors.slaveError});
        res.insert_or_assign("td[55].errors.decodeError", DumpEntry{td[55].errors.decodeError});
        res.insert_or_assign("td[56].srcAddr", DumpEntry{td[56].srcAddr});
        res.insert_or_assign("td[56].destAddr", DumpEntry{td[56].destAddr});
        res.insert_or_assign("td[56].btt", DumpEntry{td[56].btt});
        res.insert_or_assign("td[56].btt.value", DumpEntry{td[56].btt.value});
        res.insert_or_assign("td[56].errors", DumpEntry{td[56].errors});
        res.insert_or_assign("td[56].errors.internalError", DumpEntry{td[56].errors.internalError});
        res.insert_or_assign("td[56].errors.slaveError", DumpEntry{td[56].errors.slaveError});
        res.insert_or_assign("td[56].errors.decodeError", DumpEntry{td[56].errors.decodeError});
        res.insert_or_assign("td[57].srcAddr", DumpEntry{td[57].srcAddr});
        res.insert_or_assign("td[57].destAddr", DumpEntry{td[57].destAddr});
        res.insert_or_assign("td[57].btt", DumpEntry{td[57].btt});
        res.insert_or_assign("td[57].btt.value", DumpEntry{td[57].btt.value});
        res.insert_or_assign("td[57].errors", DumpEntry{td[57].errors});
        res.insert_or_assign("td[57].errors.internalError", DumpEntry{td[57].errors.internalError});
        res.insert_or_assign("td[57].errors.slaveError", DumpEntry{td[57].errors.slaveError});
        res.insert_or_assign("td[57].errors.decodeError", DumpEntry{td[57].errors.decodeError});
        res.insert_or_assign("td[58].srcAddr", DumpEntry{td[58].srcAddr});
        res.insert_or_assign("td[58].destAddr", DumpEntry{td[58].destAddr});
        res.insert_or_assign("td[58].btt", DumpEntry{td[58].btt});
        res.insert_or_assign("td[58].btt.value", DumpEntry{td[58].btt.value});
        res.insert_or_assign("td[58].errors", DumpEntry{td[58].errors});
        res.insert_or_assign("td[58].errors.internalError", DumpEntry{td[58].errors.internalError});
        res.insert_or_assign("td[58].errors.slaveError", DumpEntry{td[58].errors.slaveError});
        res.insert_or_assign("td[58].errors.decodeError", DumpEntry{td[58].errors.decodeError});
        res.insert_or_assign("td[59].srcAddr", DumpEntry{td[59].srcAddr});
        res.insert_or_assign("td[59].destAddr", DumpEntry{td[59].destAddr});
        res.insert_or_assign("td[59].btt", DumpEntry{td[59].btt});
        res.insert_or_assign("td[59].btt.value", DumpEntry{td[59].btt.value});
        res.insert_or_assign("td[59].errors", DumpEntry{td[59].errors});
        res.insert_or_assign("td[59].errors.internalError", DumpEntry{td[59].errors.internalError});
        res.insert_or_assign("td[59].errors.slaveError", DumpEntry{td[59].errors.slaveError});
        res.insert_or_assign("td[59].errors.decodeError", DumpEntry{td[59].errors.decodeError});
        res.insert_or_assign("td[60].srcAddr", DumpEntry{td[60].srcAddr});
        res.insert_or_assign("td[60].destAddr", DumpEntry{td[60].destAddr});
        res.insert_or_assign("td[60].btt", DumpEntry{td[60].btt});
        res.insert_or_assign("td[60].btt.value", DumpEntry{td[60].btt.value});
        res.insert_or_assign("td[60].errors", DumpEntry{td[60].errors});
        res.insert_or_assign("td[60].errors.internalError", DumpEntry{td[60].errors.internalError});
        res.insert_or_assign("td[60].errors.slaveError", DumpEntry{td[60].errors.slaveError});
        res.insert_or_assign("td[60].errors.decodeError", DumpEntry{td[60].errors.decodeError});
        res.insert_or_assign("td[61].srcAddr", DumpEntry{td[61].srcAddr});
        res.insert_or_assign("td[61].destAddr", DumpEntry{td[61].destAddr});
        res.insert_or_assign("td[61].btt", DumpEntry{td[61].btt});
        res.insert_or_assign("td[61].btt.value", DumpEntry{td[61].btt.value});
        res.insert_or_assign("td[61].errors", DumpEntry{td[61].errors});
        res.insert_or_assign("td[61].errors.internalError", DumpEntry{td[61].errors.internalError});
        res.insert_or_assign("td[61].errors.slaveError", DumpEntry{td[61].errors.slaveError});
        res.insert_or_assign("td[61].errors.decodeError", DumpEntry{td[61].errors.decodeError});
        res.insert_or_assign("td[62].srcAddr", DumpEntry{td[62].srcAddr});
        res.insert_or_assign("td[62].destAddr", DumpEntry{td[62].destAddr});
        res.insert_or_assign("td[62].btt", DumpEntry{td[62].btt});
        res.insert_or_assign("td[62].btt.value", DumpEntry{td[62].btt.value});
        res.insert_or_assign("td[62].errors", DumpEntry{td[62].errors});
        res.insert_or_assign("td[62].errors.internalError", DumpEntry{td[62].errors.internalError});
        res.insert_or_assign("td[62].errors.slaveError", DumpEntry{td[62].errors.slaveError});
        res.insert_or_assign("td[62].errors.decodeError", DumpEntry{td[62].errors.decodeError});
        res.insert_or_assign("td[63].srcAddr", DumpEntry{td[63].srcAddr});
        res.insert_or_assign("td[63].destAddr", DumpEntry{td[63].destAddr});
        res.insert_or_assign("td[63].btt", DumpEntry{td[63].btt});
        res.insert_or_assign("td[63].btt.value", DumpEntry{td[63].btt.value});
        res.insert_or_assign("td[63].errors", DumpEntry{td[63].errors});
        res.insert_or_assign("td[63].errors.internalError", DumpEntry{td[63].errors.internalError});
        res.insert_or_assign("td[63].errors.slaveError", DumpEntry{td[63].errors.slaveError});
        res.insert_or_assign("td[63].errors.decodeError", DumpEntry{td[63].errors.decodeError});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::Ddma`
    //!
    //! @param ddma A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under ddma
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::Ddma& ddma)
    {
        DumpMap res{ddma.base()};
        // ddma.trig.trig skipped (Register is not readable).
        res.insert_or_assign("ddma.td[0].srcAddr", DumpEntry{ddma.td[0].srcAddr});
        res.insert_or_assign("ddma.td[0].destAddr", DumpEntry{ddma.td[0].destAddr});
        res.insert_or_assign("ddma.td[0].btt", DumpEntry{ddma.td[0].btt});
        res.insert_or_assign("ddma.td[0].btt.value", DumpEntry{ddma.td[0].btt.value});
        res.insert_or_assign("ddma.td[0].errors", DumpEntry{ddma.td[0].errors});
        res.insert_or_assign("ddma.td[0].errors.internalError", DumpEntry{ddma.td[0].errors.internalError});
        res.insert_or_assign("ddma.td[0].errors.slaveError", DumpEntry{ddma.td[0].errors.slaveError});
        res.insert_or_assign("ddma.td[0].errors.decodeError", DumpEntry{ddma.td[0].errors.decodeError});
        res.insert_or_assign("ddma.td[1].srcAddr", DumpEntry{ddma.td[1].srcAddr});
        res.insert_or_assign("ddma.td[1].destAddr", DumpEntry{ddma.td[1].destAddr});
        res.insert_or_assign("ddma.td[1].btt", DumpEntry{ddma.td[1].btt});
        res.insert_or_assign("ddma.td[1].btt.value", DumpEntry{ddma.td[1].btt.value});
        res.insert_or_assign("ddma.td[1].errors", DumpEntry{ddma.td[1].errors});
        res.insert_or_assign("ddma.td[1].errors.internalError", DumpEntry{ddma.td[1].errors.internalError});
        res.insert_or_assign("ddma.td[1].errors.slaveError", DumpEntry{ddma.td[1].errors.slaveError});
        res.insert_or_assign("ddma.td[1].errors.decodeError", DumpEntry{ddma.td[1].errors.decodeError});
        res.insert_or_assign("ddma.td[2].srcAddr", DumpEntry{ddma.td[2].srcAddr});
        res.insert_or_assign("ddma.td[2].destAddr", DumpEntry{ddma.td[2].destAddr});
        res.insert_or_assign("ddma.td[2].btt", DumpEntry{ddma.td[2].btt});
        res.insert_or_assign("ddma.td[2].btt.value", DumpEntry{ddma.td[2].btt.value});
        res.insert_or_assign("ddma.td[2].errors", DumpEntry{ddma.td[2].errors});
        res.insert_or_assign("ddma.td[2].errors.internalError", DumpEntry{ddma.td[2].errors.internalError});
        res.insert_or_assign("ddma.td[2].errors.slaveError", DumpEntry{ddma.td[2].errors.slaveError});
        res.insert_or_assign("ddma.td[2].errors.decodeError", DumpEntry{ddma.td[2].errors.decodeError});
        res.insert_or_assign("ddma.td[3].srcAddr", DumpEntry{ddma.td[3].srcAddr});
        res.insert_or_assign("ddma.td[3].destAddr", DumpEntry{ddma.td[3].destAddr});
        res.insert_or_assign("ddma.td[3].btt", DumpEntry{ddma.td[3].btt});
        res.insert_or_assign("ddma.td[3].btt.value", DumpEntry{ddma.td[3].btt.value});
        res.insert_or_assign("ddma.td[3].errors", DumpEntry{ddma.td[3].errors});
        res.insert_or_assign("ddma.td[3].errors.internalError", DumpEntry{ddma.td[3].errors.internalError});
        res.insert_or_assign("ddma.td[3].errors.slaveError", DumpEntry{ddma.td[3].errors.slaveError});
        res.insert_or_assign("ddma.td[3].errors.decodeError", DumpEntry{ddma.td[3].errors.decodeError});
        res.insert_or_assign("ddma.td[4].srcAddr", DumpEntry{ddma.td[4].srcAddr});
        res.insert_or_assign("ddma.td[4].destAddr", DumpEntry{ddma.td[4].destAddr});
        res.insert_or_assign("ddma.td[4].btt", DumpEntry{ddma.td[4].btt});
        res.insert_or_assign("ddma.td[4].btt.value", DumpEntry{ddma.td[4].btt.value});
        res.insert_or_assign("ddma.td[4].errors", DumpEntry{ddma.td[4].errors});
        res.insert_or_assign("ddma.td[4].errors.internalError", DumpEntry{ddma.td[4].errors.internalError});
        res.insert_or_assign("ddma.td[4].errors.slaveError", DumpEntry{ddma.td[4].errors.slaveError});
        res.insert_or_assign("ddma.td[4].errors.decodeError", DumpEntry{ddma.td[4].errors.decodeError});
        res.insert_or_assign("ddma.td[5].srcAddr", DumpEntry{ddma.td[5].srcAddr});
        res.insert_or_assign("ddma.td[5].destAddr", DumpEntry{ddma.td[5].destAddr});
        res.insert_or_assign("ddma.td[5].btt", DumpEntry{ddma.td[5].btt});
        res.insert_or_assign("ddma.td[5].btt.value", DumpEntry{ddma.td[5].btt.value});
        res.insert_or_assign("ddma.td[5].errors", DumpEntry{ddma.td[5].errors});
        res.insert_or_assign("ddma.td[5].errors.internalError", DumpEntry{ddma.td[5].errors.internalError});
        res.insert_or_assign("ddma.td[5].errors.slaveError", DumpEntry{ddma.td[5].errors.slaveError});
        res.insert_or_assign("ddma.td[5].errors.decodeError", DumpEntry{ddma.td[5].errors.decodeError});
        res.insert_or_assign("ddma.td[6].srcAddr", DumpEntry{ddma.td[6].srcAddr});
        res.insert_or_assign("ddma.td[6].destAddr", DumpEntry{ddma.td[6].destAddr});
        res.insert_or_assign("ddma.td[6].btt", DumpEntry{ddma.td[6].btt});
        res.insert_or_assign("ddma.td[6].btt.value", DumpEntry{ddma.td[6].btt.value});
        res.insert_or_assign("ddma.td[6].errors", DumpEntry{ddma.td[6].errors});
        res.insert_or_assign("ddma.td[6].errors.internalError", DumpEntry{ddma.td[6].errors.internalError});
        res.insert_or_assign("ddma.td[6].errors.slaveError", DumpEntry{ddma.td[6].errors.slaveError});
        res.insert_or_assign("ddma.td[6].errors.decodeError", DumpEntry{ddma.td[6].errors.decodeError});
        res.insert_or_assign("ddma.td[7].srcAddr", DumpEntry{ddma.td[7].srcAddr});
        res.insert_or_assign("ddma.td[7].destAddr", DumpEntry{ddma.td[7].destAddr});
        res.insert_or_assign("ddma.td[7].btt", DumpEntry{ddma.td[7].btt});
        res.insert_or_assign("ddma.td[7].btt.value", DumpEntry{ddma.td[7].btt.value});
        res.insert_or_assign("ddma.td[7].errors", DumpEntry{ddma.td[7].errors});
        res.insert_or_assign("ddma.td[7].errors.internalError", DumpEntry{ddma.td[7].errors.internalError});
        res.insert_or_assign("ddma.td[7].errors.slaveError", DumpEntry{ddma.td[7].errors.slaveError});
        res.insert_or_assign("ddma.td[7].errors.decodeError", DumpEntry{ddma.td[7].errors.decodeError});
        res.insert_or_assign("ddma.td[8].srcAddr", DumpEntry{ddma.td[8].srcAddr});
        res.insert_or_assign("ddma.td[8].destAddr", DumpEntry{ddma.td[8].destAddr});
        res.insert_or_assign("ddma.td[8].btt", DumpEntry{ddma.td[8].btt});
        res.insert_or_assign("ddma.td[8].btt.value", DumpEntry{ddma.td[8].btt.value});
        res.insert_or_assign("ddma.td[8].errors", DumpEntry{ddma.td[8].errors});
        res.insert_or_assign("ddma.td[8].errors.internalError", DumpEntry{ddma.td[8].errors.internalError});
        res.insert_or_assign("ddma.td[8].errors.slaveError", DumpEntry{ddma.td[8].errors.slaveError});
        res.insert_or_assign("ddma.td[8].errors.decodeError", DumpEntry{ddma.td[8].errors.decodeError});
        res.insert_or_assign("ddma.td[9].srcAddr", DumpEntry{ddma.td[9].srcAddr});
        res.insert_or_assign("ddma.td[9].destAddr", DumpEntry{ddma.td[9].destAddr});
        res.insert_or_assign("ddma.td[9].btt", DumpEntry{ddma.td[9].btt});
        res.insert_or_assign("ddma.td[9].btt.value", DumpEntry{ddma.td[9].btt.value});
        res.insert_or_assign("ddma.td[9].errors", DumpEntry{ddma.td[9].errors});
        res.insert_or_assign("ddma.td[9].errors.internalError", DumpEntry{ddma.td[9].errors.internalError});
        res.insert_or_assign("ddma.td[9].errors.slaveError", DumpEntry{ddma.td[9].errors.slaveError});
        res.insert_or_assign("ddma.td[9].errors.decodeError", DumpEntry{ddma.td[9].errors.decodeError});
        res.insert_or_assign("ddma.td[10].srcAddr", DumpEntry{ddma.td[10].srcAddr});
        res.insert_or_assign("ddma.td[10].destAddr", DumpEntry{ddma.td[10].destAddr});
        res.insert_or_assign("ddma.td[10].btt", DumpEntry{ddma.td[10].btt});
        res.insert_or_assign("ddma.td[10].btt.value", DumpEntry{ddma.td[10].btt.value});
        res.insert_or_assign("ddma.td[10].errors", DumpEntry{ddma.td[10].errors});
        res.insert_or_assign("ddma.td[10].errors.internalError", DumpEntry{ddma.td[10].errors.internalError});
        res.insert_or_assign("ddma.td[10].errors.slaveError", DumpEntry{ddma.td[10].errors.slaveError});
        res.insert_or_assign("ddma.td[10].errors.decodeError", DumpEntry{ddma.td[10].errors.decodeError});
        res.insert_or_assign("ddma.td[11].srcAddr", DumpEntry{ddma.td[11].srcAddr});
        res.insert_or_assign("ddma.td[11].destAddr", DumpEntry{ddma.td[11].destAddr});
        res.insert_or_assign("ddma.td[11].btt", DumpEntry{ddma.td[11].btt});
        res.insert_or_assign("ddma.td[11].btt.value", DumpEntry{ddma.td[11].btt.value});
        res.insert_or_assign("ddma.td[11].errors", DumpEntry{ddma.td[11].errors});
        res.insert_or_assign("ddma.td[11].errors.internalError", DumpEntry{ddma.td[11].errors.internalError});
        res.insert_or_assign("ddma.td[11].errors.slaveError", DumpEntry{ddma.td[11].errors.slaveError});
        res.insert_or_assign("ddma.td[11].errors.decodeError", DumpEntry{ddma.td[11].errors.decodeError});
        res.insert_or_assign("ddma.td[12].srcAddr", DumpEntry{ddma.td[12].srcAddr});
        res.insert_or_assign("ddma.td[12].destAddr", DumpEntry{ddma.td[12].destAddr});
        res.insert_or_assign("ddma.td[12].btt", DumpEntry{ddma.td[12].btt});
        res.insert_or_assign("ddma.td[12].btt.value", DumpEntry{ddma.td[12].btt.value});
        res.insert_or_assign("ddma.td[12].errors", DumpEntry{ddma.td[12].errors});
        res.insert_or_assign("ddma.td[12].errors.internalError", DumpEntry{ddma.td[12].errors.internalError});
        res.insert_or_assign("ddma.td[12].errors.slaveError", DumpEntry{ddma.td[12].errors.slaveError});
        res.insert_or_assign("ddma.td[12].errors.decodeError", DumpEntry{ddma.td[12].errors.decodeError});
        res.insert_or_assign("ddma.td[13].srcAddr", DumpEntry{ddma.td[13].srcAddr});
        res.insert_or_assign("ddma.td[13].destAddr", DumpEntry{ddma.td[13].destAddr});
        res.insert_or_assign("ddma.td[13].btt", DumpEntry{ddma.td[13].btt});
        res.insert_or_assign("ddma.td[13].btt.value", DumpEntry{ddma.td[13].btt.value});
        res.insert_or_assign("ddma.td[13].errors", DumpEntry{ddma.td[13].errors});
        res.insert_or_assign("ddma.td[13].errors.internalError", DumpEntry{ddma.td[13].errors.internalError});
        res.insert_or_assign("ddma.td[13].errors.slaveError", DumpEntry{ddma.td[13].errors.slaveError});
        res.insert_or_assign("ddma.td[13].errors.decodeError", DumpEntry{ddma.td[13].errors.decodeError});
        res.insert_or_assign("ddma.td[14].srcAddr", DumpEntry{ddma.td[14].srcAddr});
        res.insert_or_assign("ddma.td[14].destAddr", DumpEntry{ddma.td[14].destAddr});
        res.insert_or_assign("ddma.td[14].btt", DumpEntry{ddma.td[14].btt});
        res.insert_or_assign("ddma.td[14].btt.value", DumpEntry{ddma.td[14].btt.value});
        res.insert_or_assign("ddma.td[14].errors", DumpEntry{ddma.td[14].errors});
        res.insert_or_assign("ddma.td[14].errors.internalError", DumpEntry{ddma.td[14].errors.internalError});
        res.insert_or_assign("ddma.td[14].errors.slaveError", DumpEntry{ddma.td[14].errors.slaveError});
        res.insert_or_assign("ddma.td[14].errors.decodeError", DumpEntry{ddma.td[14].errors.decodeError});
        res.insert_or_assign("ddma.td[15].srcAddr", DumpEntry{ddma.td[15].srcAddr});
        res.insert_or_assign("ddma.td[15].destAddr", DumpEntry{ddma.td[15].destAddr});
        res.insert_or_assign("ddma.td[15].btt", DumpEntry{ddma.td[15].btt});
        res.insert_or_assign("ddma.td[15].btt.value", DumpEntry{ddma.td[15].btt.value});
        res.insert_or_assign("ddma.td[15].errors", DumpEntry{ddma.td[15].errors});
        res.insert_or_assign("ddma.td[15].errors.internalError", DumpEntry{ddma.td[15].errors.internalError});
        res.insert_or_assign("ddma.td[15].errors.slaveError", DumpEntry{ddma.td[15].errors.slaveError});
        res.insert_or_assign("ddma.td[15].errors.decodeError", DumpEntry{ddma.td[15].errors.decodeError});
        res.insert_or_assign("ddma.td[16].srcAddr", DumpEntry{ddma.td[16].srcAddr});
        res.insert_or_assign("ddma.td[16].destAddr", DumpEntry{ddma.td[16].destAddr});
        res.insert_or_assign("ddma.td[16].btt", DumpEntry{ddma.td[16].btt});
        res.insert_or_assign("ddma.td[16].btt.value", DumpEntry{ddma.td[16].btt.value});
        res.insert_or_assign("ddma.td[16].errors", DumpEntry{ddma.td[16].errors});
        res.insert_or_assign("ddma.td[16].errors.internalError", DumpEntry{ddma.td[16].errors.internalError});
        res.insert_or_assign("ddma.td[16].errors.slaveError", DumpEntry{ddma.td[16].errors.slaveError});
        res.insert_or_assign("ddma.td[16].errors.decodeError", DumpEntry{ddma.td[16].errors.decodeError});
        res.insert_or_assign("ddma.td[17].srcAddr", DumpEntry{ddma.td[17].srcAddr});
        res.insert_or_assign("ddma.td[17].destAddr", DumpEntry{ddma.td[17].destAddr});
        res.insert_or_assign("ddma.td[17].btt", DumpEntry{ddma.td[17].btt});
        res.insert_or_assign("ddma.td[17].btt.value", DumpEntry{ddma.td[17].btt.value});
        res.insert_or_assign("ddma.td[17].errors", DumpEntry{ddma.td[17].errors});
        res.insert_or_assign("ddma.td[17].errors.internalError", DumpEntry{ddma.td[17].errors.internalError});
        res.insert_or_assign("ddma.td[17].errors.slaveError", DumpEntry{ddma.td[17].errors.slaveError});
        res.insert_or_assign("ddma.td[17].errors.decodeError", DumpEntry{ddma.td[17].errors.decodeError});
        res.insert_or_assign("ddma.td[18].srcAddr", DumpEntry{ddma.td[18].srcAddr});
        res.insert_or_assign("ddma.td[18].destAddr", DumpEntry{ddma.td[18].destAddr});
        res.insert_or_assign("ddma.td[18].btt", DumpEntry{ddma.td[18].btt});
        res.insert_or_assign("ddma.td[18].btt.value", DumpEntry{ddma.td[18].btt.value});
        res.insert_or_assign("ddma.td[18].errors", DumpEntry{ddma.td[18].errors});
        res.insert_or_assign("ddma.td[18].errors.internalError", DumpEntry{ddma.td[18].errors.internalError});
        res.insert_or_assign("ddma.td[18].errors.slaveError", DumpEntry{ddma.td[18].errors.slaveError});
        res.insert_or_assign("ddma.td[18].errors.decodeError", DumpEntry{ddma.td[18].errors.decodeError});
        res.insert_or_assign("ddma.td[19].srcAddr", DumpEntry{ddma.td[19].srcAddr});
        res.insert_or_assign("ddma.td[19].destAddr", DumpEntry{ddma.td[19].destAddr});
        res.insert_or_assign("ddma.td[19].btt", DumpEntry{ddma.td[19].btt});
        res.insert_or_assign("ddma.td[19].btt.value", DumpEntry{ddma.td[19].btt.value});
        res.insert_or_assign("ddma.td[19].errors", DumpEntry{ddma.td[19].errors});
        res.insert_or_assign("ddma.td[19].errors.internalError", DumpEntry{ddma.td[19].errors.internalError});
        res.insert_or_assign("ddma.td[19].errors.slaveError", DumpEntry{ddma.td[19].errors.slaveError});
        res.insert_or_assign("ddma.td[19].errors.decodeError", DumpEntry{ddma.td[19].errors.decodeError});
        res.insert_or_assign("ddma.td[20].srcAddr", DumpEntry{ddma.td[20].srcAddr});
        res.insert_or_assign("ddma.td[20].destAddr", DumpEntry{ddma.td[20].destAddr});
        res.insert_or_assign("ddma.td[20].btt", DumpEntry{ddma.td[20].btt});
        res.insert_or_assign("ddma.td[20].btt.value", DumpEntry{ddma.td[20].btt.value});
        res.insert_or_assign("ddma.td[20].errors", DumpEntry{ddma.td[20].errors});
        res.insert_or_assign("ddma.td[20].errors.internalError", DumpEntry{ddma.td[20].errors.internalError});
        res.insert_or_assign("ddma.td[20].errors.slaveError", DumpEntry{ddma.td[20].errors.slaveError});
        res.insert_or_assign("ddma.td[20].errors.decodeError", DumpEntry{ddma.td[20].errors.decodeError});
        res.insert_or_assign("ddma.td[21].srcAddr", DumpEntry{ddma.td[21].srcAddr});
        res.insert_or_assign("ddma.td[21].destAddr", DumpEntry{ddma.td[21].destAddr});
        res.insert_or_assign("ddma.td[21].btt", DumpEntry{ddma.td[21].btt});
        res.insert_or_assign("ddma.td[21].btt.value", DumpEntry{ddma.td[21].btt.value});
        res.insert_or_assign("ddma.td[21].errors", DumpEntry{ddma.td[21].errors});
        res.insert_or_assign("ddma.td[21].errors.internalError", DumpEntry{ddma.td[21].errors.internalError});
        res.insert_or_assign("ddma.td[21].errors.slaveError", DumpEntry{ddma.td[21].errors.slaveError});
        res.insert_or_assign("ddma.td[21].errors.decodeError", DumpEntry{ddma.td[21].errors.decodeError});
        res.insert_or_assign("ddma.td[22].srcAddr", DumpEntry{ddma.td[22].srcAddr});
        res.insert_or_assign("ddma.td[22].destAddr", DumpEntry{ddma.td[22].destAddr});
        res.insert_or_assign("ddma.td[22].btt", DumpEntry{ddma.td[22].btt});
        res.insert_or_assign("ddma.td[22].btt.value", DumpEntry{ddma.td[22].btt.value});
        res.insert_or_assign("ddma.td[22].errors", DumpEntry{ddma.td[22].errors});
        res.insert_or_assign("ddma.td[22].errors.internalError", DumpEntry{ddma.td[22].errors.internalError});
        res.insert_or_assign("ddma.td[22].errors.slaveError", DumpEntry{ddma.td[22].errors.slaveError});
        res.insert_or_assign("ddma.td[22].errors.decodeError", DumpEntry{ddma.td[22].errors.decodeError});
        res.insert_or_assign("ddma.td[23].srcAddr", DumpEntry{ddma.td[23].srcAddr});
        res.insert_or_assign("ddma.td[23].destAddr", DumpEntry{ddma.td[23].destAddr});
        res.insert_or_assign("ddma.td[23].btt", DumpEntry{ddma.td[23].btt});
        res.insert_or_assign("ddma.td[23].btt.value", DumpEntry{ddma.td[23].btt.value});
        res.insert_or_assign("ddma.td[23].errors", DumpEntry{ddma.td[23].errors});
        res.insert_or_assign("ddma.td[23].errors.internalError", DumpEntry{ddma.td[23].errors.internalError});
        res.insert_or_assign("ddma.td[23].errors.slaveError", DumpEntry{ddma.td[23].errors.slaveError});
        res.insert_or_assign("ddma.td[23].errors.decodeError", DumpEntry{ddma.td[23].errors.decodeError});
        res.insert_or_assign("ddma.td[24].srcAddr", DumpEntry{ddma.td[24].srcAddr});
        res.insert_or_assign("ddma.td[24].destAddr", DumpEntry{ddma.td[24].destAddr});
        res.insert_or_assign("ddma.td[24].btt", DumpEntry{ddma.td[24].btt});
        res.insert_or_assign("ddma.td[24].btt.value", DumpEntry{ddma.td[24].btt.value});
        res.insert_or_assign("ddma.td[24].errors", DumpEntry{ddma.td[24].errors});
        res.insert_or_assign("ddma.td[24].errors.internalError", DumpEntry{ddma.td[24].errors.internalError});
        res.insert_or_assign("ddma.td[24].errors.slaveError", DumpEntry{ddma.td[24].errors.slaveError});
        res.insert_or_assign("ddma.td[24].errors.decodeError", DumpEntry{ddma.td[24].errors.decodeError});
        res.insert_or_assign("ddma.td[25].srcAddr", DumpEntry{ddma.td[25].srcAddr});
        res.insert_or_assign("ddma.td[25].destAddr", DumpEntry{ddma.td[25].destAddr});
        res.insert_or_assign("ddma.td[25].btt", DumpEntry{ddma.td[25].btt});
        res.insert_or_assign("ddma.td[25].btt.value", DumpEntry{ddma.td[25].btt.value});
        res.insert_or_assign("ddma.td[25].errors", DumpEntry{ddma.td[25].errors});
        res.insert_or_assign("ddma.td[25].errors.internalError", DumpEntry{ddma.td[25].errors.internalError});
        res.insert_or_assign("ddma.td[25].errors.slaveError", DumpEntry{ddma.td[25].errors.slaveError});
        res.insert_or_assign("ddma.td[25].errors.decodeError", DumpEntry{ddma.td[25].errors.decodeError});
        res.insert_or_assign("ddma.td[26].srcAddr", DumpEntry{ddma.td[26].srcAddr});
        res.insert_or_assign("ddma.td[26].destAddr", DumpEntry{ddma.td[26].destAddr});
        res.insert_or_assign("ddma.td[26].btt", DumpEntry{ddma.td[26].btt});
        res.insert_or_assign("ddma.td[26].btt.value", DumpEntry{ddma.td[26].btt.value});
        res.insert_or_assign("ddma.td[26].errors", DumpEntry{ddma.td[26].errors});
        res.insert_or_assign("ddma.td[26].errors.internalError", DumpEntry{ddma.td[26].errors.internalError});
        res.insert_or_assign("ddma.td[26].errors.slaveError", DumpEntry{ddma.td[26].errors.slaveError});
        res.insert_or_assign("ddma.td[26].errors.decodeError", DumpEntry{ddma.td[26].errors.decodeError});
        res.insert_or_assign("ddma.td[27].srcAddr", DumpEntry{ddma.td[27].srcAddr});
        res.insert_or_assign("ddma.td[27].destAddr", DumpEntry{ddma.td[27].destAddr});
        res.insert_or_assign("ddma.td[27].btt", DumpEntry{ddma.td[27].btt});
        res.insert_or_assign("ddma.td[27].btt.value", DumpEntry{ddma.td[27].btt.value});
        res.insert_or_assign("ddma.td[27].errors", DumpEntry{ddma.td[27].errors});
        res.insert_or_assign("ddma.td[27].errors.internalError", DumpEntry{ddma.td[27].errors.internalError});
        res.insert_or_assign("ddma.td[27].errors.slaveError", DumpEntry{ddma.td[27].errors.slaveError});
        res.insert_or_assign("ddma.td[27].errors.decodeError", DumpEntry{ddma.td[27].errors.decodeError});
        res.insert_or_assign("ddma.td[28].srcAddr", DumpEntry{ddma.td[28].srcAddr});
        res.insert_or_assign("ddma.td[28].destAddr", DumpEntry{ddma.td[28].destAddr});
        res.insert_or_assign("ddma.td[28].btt", DumpEntry{ddma.td[28].btt});
        res.insert_or_assign("ddma.td[28].btt.value", DumpEntry{ddma.td[28].btt.value});
        res.insert_or_assign("ddma.td[28].errors", DumpEntry{ddma.td[28].errors});
        res.insert_or_assign("ddma.td[28].errors.internalError", DumpEntry{ddma.td[28].errors.internalError});
        res.insert_or_assign("ddma.td[28].errors.slaveError", DumpEntry{ddma.td[28].errors.slaveError});
        res.insert_or_assign("ddma.td[28].errors.decodeError", DumpEntry{ddma.td[28].errors.decodeError});
        res.insert_or_assign("ddma.td[29].srcAddr", DumpEntry{ddma.td[29].srcAddr});
        res.insert_or_assign("ddma.td[29].destAddr", DumpEntry{ddma.td[29].destAddr});
        res.insert_or_assign("ddma.td[29].btt", DumpEntry{ddma.td[29].btt});
        res.insert_or_assign("ddma.td[29].btt.value", DumpEntry{ddma.td[29].btt.value});
        res.insert_or_assign("ddma.td[29].errors", DumpEntry{ddma.td[29].errors});
        res.insert_or_assign("ddma.td[29].errors.internalError", DumpEntry{ddma.td[29].errors.internalError});
        res.insert_or_assign("ddma.td[29].errors.slaveError", DumpEntry{ddma.td[29].errors.slaveError});
        res.insert_or_assign("ddma.td[29].errors.decodeError", DumpEntry{ddma.td[29].errors.decodeError});
        res.insert_or_assign("ddma.td[30].srcAddr", DumpEntry{ddma.td[30].srcAddr});
        res.insert_or_assign("ddma.td[30].destAddr", DumpEntry{ddma.td[30].destAddr});
        res.insert_or_assign("ddma.td[30].btt", DumpEntry{ddma.td[30].btt});
        res.insert_or_assign("ddma.td[30].btt.value", DumpEntry{ddma.td[30].btt.value});
        res.insert_or_assign("ddma.td[30].errors", DumpEntry{ddma.td[30].errors});
        res.insert_or_assign("ddma.td[30].errors.internalError", DumpEntry{ddma.td[30].errors.internalError});
        res.insert_or_assign("ddma.td[30].errors.slaveError", DumpEntry{ddma.td[30].errors.slaveError});
        res.insert_or_assign("ddma.td[30].errors.decodeError", DumpEntry{ddma.td[30].errors.decodeError});
        res.insert_or_assign("ddma.td[31].srcAddr", DumpEntry{ddma.td[31].srcAddr});
        res.insert_or_assign("ddma.td[31].destAddr", DumpEntry{ddma.td[31].destAddr});
        res.insert_or_assign("ddma.td[31].btt", DumpEntry{ddma.td[31].btt});
        res.insert_or_assign("ddma.td[31].btt.value", DumpEntry{ddma.td[31].btt.value});
        res.insert_or_assign("ddma.td[31].errors", DumpEntry{ddma.td[31].errors});
        res.insert_or_assign("ddma.td[31].errors.internalError", DumpEntry{ddma.td[31].errors.internalError});
        res.insert_or_assign("ddma.td[31].errors.slaveError", DumpEntry{ddma.td[31].errors.slaveError});
        res.insert_or_assign("ddma.td[31].errors.decodeError", DumpEntry{ddma.td[31].errors.decodeError});
        res.insert_or_assign("ddma.td[32].srcAddr", DumpEntry{ddma.td[32].srcAddr});
        res.insert_or_assign("ddma.td[32].destAddr", DumpEntry{ddma.td[32].destAddr});
        res.insert_or_assign("ddma.td[32].btt", DumpEntry{ddma.td[32].btt});
        res.insert_or_assign("ddma.td[32].btt.value", DumpEntry{ddma.td[32].btt.value});
        res.insert_or_assign("ddma.td[32].errors", DumpEntry{ddma.td[32].errors});
        res.insert_or_assign("ddma.td[32].errors.internalError", DumpEntry{ddma.td[32].errors.internalError});
        res.insert_or_assign("ddma.td[32].errors.slaveError", DumpEntry{ddma.td[32].errors.slaveError});
        res.insert_or_assign("ddma.td[32].errors.decodeError", DumpEntry{ddma.td[32].errors.decodeError});
        res.insert_or_assign("ddma.td[33].srcAddr", DumpEntry{ddma.td[33].srcAddr});
        res.insert_or_assign("ddma.td[33].destAddr", DumpEntry{ddma.td[33].destAddr});
        res.insert_or_assign("ddma.td[33].btt", DumpEntry{ddma.td[33].btt});
        res.insert_or_assign("ddma.td[33].btt.value", DumpEntry{ddma.td[33].btt.value});
        res.insert_or_assign("ddma.td[33].errors", DumpEntry{ddma.td[33].errors});
        res.insert_or_assign("ddma.td[33].errors.internalError", DumpEntry{ddma.td[33].errors.internalError});
        res.insert_or_assign("ddma.td[33].errors.slaveError", DumpEntry{ddma.td[33].errors.slaveError});
        res.insert_or_assign("ddma.td[33].errors.decodeError", DumpEntry{ddma.td[33].errors.decodeError});
        res.insert_or_assign("ddma.td[34].srcAddr", DumpEntry{ddma.td[34].srcAddr});
        res.insert_or_assign("ddma.td[34].destAddr", DumpEntry{ddma.td[34].destAddr});
        res.insert_or_assign("ddma.td[34].btt", DumpEntry{ddma.td[34].btt});
        res.insert_or_assign("ddma.td[34].btt.value", DumpEntry{ddma.td[34].btt.value});
        res.insert_or_assign("ddma.td[34].errors", DumpEntry{ddma.td[34].errors});
        res.insert_or_assign("ddma.td[34].errors.internalError", DumpEntry{ddma.td[34].errors.internalError});
        res.insert_or_assign("ddma.td[34].errors.slaveError", DumpEntry{ddma.td[34].errors.slaveError});
        res.insert_or_assign("ddma.td[34].errors.decodeError", DumpEntry{ddma.td[34].errors.decodeError});
        res.insert_or_assign("ddma.td[35].srcAddr", DumpEntry{ddma.td[35].srcAddr});
        res.insert_or_assign("ddma.td[35].destAddr", DumpEntry{ddma.td[35].destAddr});
        res.insert_or_assign("ddma.td[35].btt", DumpEntry{ddma.td[35].btt});
        res.insert_or_assign("ddma.td[35].btt.value", DumpEntry{ddma.td[35].btt.value});
        res.insert_or_assign("ddma.td[35].errors", DumpEntry{ddma.td[35].errors});
        res.insert_or_assign("ddma.td[35].errors.internalError", DumpEntry{ddma.td[35].errors.internalError});
        res.insert_or_assign("ddma.td[35].errors.slaveError", DumpEntry{ddma.td[35].errors.slaveError});
        res.insert_or_assign("ddma.td[35].errors.decodeError", DumpEntry{ddma.td[35].errors.decodeError});
        res.insert_or_assign("ddma.td[36].srcAddr", DumpEntry{ddma.td[36].srcAddr});
        res.insert_or_assign("ddma.td[36].destAddr", DumpEntry{ddma.td[36].destAddr});
        res.insert_or_assign("ddma.td[36].btt", DumpEntry{ddma.td[36].btt});
        res.insert_or_assign("ddma.td[36].btt.value", DumpEntry{ddma.td[36].btt.value});
        res.insert_or_assign("ddma.td[36].errors", DumpEntry{ddma.td[36].errors});
        res.insert_or_assign("ddma.td[36].errors.internalError", DumpEntry{ddma.td[36].errors.internalError});
        res.insert_or_assign("ddma.td[36].errors.slaveError", DumpEntry{ddma.td[36].errors.slaveError});
        res.insert_or_assign("ddma.td[36].errors.decodeError", DumpEntry{ddma.td[36].errors.decodeError});
        res.insert_or_assign("ddma.td[37].srcAddr", DumpEntry{ddma.td[37].srcAddr});
        res.insert_or_assign("ddma.td[37].destAddr", DumpEntry{ddma.td[37].destAddr});
        res.insert_or_assign("ddma.td[37].btt", DumpEntry{ddma.td[37].btt});
        res.insert_or_assign("ddma.td[37].btt.value", DumpEntry{ddma.td[37].btt.value});
        res.insert_or_assign("ddma.td[37].errors", DumpEntry{ddma.td[37].errors});
        res.insert_or_assign("ddma.td[37].errors.internalError", DumpEntry{ddma.td[37].errors.internalError});
        res.insert_or_assign("ddma.td[37].errors.slaveError", DumpEntry{ddma.td[37].errors.slaveError});
        res.insert_or_assign("ddma.td[37].errors.decodeError", DumpEntry{ddma.td[37].errors.decodeError});
        res.insert_or_assign("ddma.td[38].srcAddr", DumpEntry{ddma.td[38].srcAddr});
        res.insert_or_assign("ddma.td[38].destAddr", DumpEntry{ddma.td[38].destAddr});
        res.insert_or_assign("ddma.td[38].btt", DumpEntry{ddma.td[38].btt});
        res.insert_or_assign("ddma.td[38].btt.value", DumpEntry{ddma.td[38].btt.value});
        res.insert_or_assign("ddma.td[38].errors", DumpEntry{ddma.td[38].errors});
        res.insert_or_assign("ddma.td[38].errors.internalError", DumpEntry{ddma.td[38].errors.internalError});
        res.insert_or_assign("ddma.td[38].errors.slaveError", DumpEntry{ddma.td[38].errors.slaveError});
        res.insert_or_assign("ddma.td[38].errors.decodeError", DumpEntry{ddma.td[38].errors.decodeError});
        res.insert_or_assign("ddma.td[39].srcAddr", DumpEntry{ddma.td[39].srcAddr});
        res.insert_or_assign("ddma.td[39].destAddr", DumpEntry{ddma.td[39].destAddr});
        res.insert_or_assign("ddma.td[39].btt", DumpEntry{ddma.td[39].btt});
        res.insert_or_assign("ddma.td[39].btt.value", DumpEntry{ddma.td[39].btt.value});
        res.insert_or_assign("ddma.td[39].errors", DumpEntry{ddma.td[39].errors});
        res.insert_or_assign("ddma.td[39].errors.internalError", DumpEntry{ddma.td[39].errors.internalError});
        res.insert_or_assign("ddma.td[39].errors.slaveError", DumpEntry{ddma.td[39].errors.slaveError});
        res.insert_or_assign("ddma.td[39].errors.decodeError", DumpEntry{ddma.td[39].errors.decodeError});
        res.insert_or_assign("ddma.td[40].srcAddr", DumpEntry{ddma.td[40].srcAddr});
        res.insert_or_assign("ddma.td[40].destAddr", DumpEntry{ddma.td[40].destAddr});
        res.insert_or_assign("ddma.td[40].btt", DumpEntry{ddma.td[40].btt});
        res.insert_or_assign("ddma.td[40].btt.value", DumpEntry{ddma.td[40].btt.value});
        res.insert_or_assign("ddma.td[40].errors", DumpEntry{ddma.td[40].errors});
        res.insert_or_assign("ddma.td[40].errors.internalError", DumpEntry{ddma.td[40].errors.internalError});
        res.insert_or_assign("ddma.td[40].errors.slaveError", DumpEntry{ddma.td[40].errors.slaveError});
        res.insert_or_assign("ddma.td[40].errors.decodeError", DumpEntry{ddma.td[40].errors.decodeError});
        res.insert_or_assign("ddma.td[41].srcAddr", DumpEntry{ddma.td[41].srcAddr});
        res.insert_or_assign("ddma.td[41].destAddr", DumpEntry{ddma.td[41].destAddr});
        res.insert_or_assign("ddma.td[41].btt", DumpEntry{ddma.td[41].btt});
        res.insert_or_assign("ddma.td[41].btt.value", DumpEntry{ddma.td[41].btt.value});
        res.insert_or_assign("ddma.td[41].errors", DumpEntry{ddma.td[41].errors});
        res.insert_or_assign("ddma.td[41].errors.internalError", DumpEntry{ddma.td[41].errors.internalError});
        res.insert_or_assign("ddma.td[41].errors.slaveError", DumpEntry{ddma.td[41].errors.slaveError});
        res.insert_or_assign("ddma.td[41].errors.decodeError", DumpEntry{ddma.td[41].errors.decodeError});
        res.insert_or_assign("ddma.td[42].srcAddr", DumpEntry{ddma.td[42].srcAddr});
        res.insert_or_assign("ddma.td[42].destAddr", DumpEntry{ddma.td[42].destAddr});
        res.insert_or_assign("ddma.td[42].btt", DumpEntry{ddma.td[42].btt});
        res.insert_or_assign("ddma.td[42].btt.value", DumpEntry{ddma.td[42].btt.value});
        res.insert_or_assign("ddma.td[42].errors", DumpEntry{ddma.td[42].errors});
        res.insert_or_assign("ddma.td[42].errors.internalError", DumpEntry{ddma.td[42].errors.internalError});
        res.insert_or_assign("ddma.td[42].errors.slaveError", DumpEntry{ddma.td[42].errors.slaveError});
        res.insert_or_assign("ddma.td[42].errors.decodeError", DumpEntry{ddma.td[42].errors.decodeError});
        res.insert_or_assign("ddma.td[43].srcAddr", DumpEntry{ddma.td[43].srcAddr});
        res.insert_or_assign("ddma.td[43].destAddr", DumpEntry{ddma.td[43].destAddr});
        res.insert_or_assign("ddma.td[43].btt", DumpEntry{ddma.td[43].btt});
        res.insert_or_assign("ddma.td[43].btt.value", DumpEntry{ddma.td[43].btt.value});
        res.insert_or_assign("ddma.td[43].errors", DumpEntry{ddma.td[43].errors});
        res.insert_or_assign("ddma.td[43].errors.internalError", DumpEntry{ddma.td[43].errors.internalError});
        res.insert_or_assign("ddma.td[43].errors.slaveError", DumpEntry{ddma.td[43].errors.slaveError});
        res.insert_or_assign("ddma.td[43].errors.decodeError", DumpEntry{ddma.td[43].errors.decodeError});
        res.insert_or_assign("ddma.td[44].srcAddr", DumpEntry{ddma.td[44].srcAddr});
        res.insert_or_assign("ddma.td[44].destAddr", DumpEntry{ddma.td[44].destAddr});
        res.insert_or_assign("ddma.td[44].btt", DumpEntry{ddma.td[44].btt});
        res.insert_or_assign("ddma.td[44].btt.value", DumpEntry{ddma.td[44].btt.value});
        res.insert_or_assign("ddma.td[44].errors", DumpEntry{ddma.td[44].errors});
        res.insert_or_assign("ddma.td[44].errors.internalError", DumpEntry{ddma.td[44].errors.internalError});
        res.insert_or_assign("ddma.td[44].errors.slaveError", DumpEntry{ddma.td[44].errors.slaveError});
        res.insert_or_assign("ddma.td[44].errors.decodeError", DumpEntry{ddma.td[44].errors.decodeError});
        res.insert_or_assign("ddma.td[45].srcAddr", DumpEntry{ddma.td[45].srcAddr});
        res.insert_or_assign("ddma.td[45].destAddr", DumpEntry{ddma.td[45].destAddr});
        res.insert_or_assign("ddma.td[45].btt", DumpEntry{ddma.td[45].btt});
        res.insert_or_assign("ddma.td[45].btt.value", DumpEntry{ddma.td[45].btt.value});
        res.insert_or_assign("ddma.td[45].errors", DumpEntry{ddma.td[45].errors});
        res.insert_or_assign("ddma.td[45].errors.internalError", DumpEntry{ddma.td[45].errors.internalError});
        res.insert_or_assign("ddma.td[45].errors.slaveError", DumpEntry{ddma.td[45].errors.slaveError});
        res.insert_or_assign("ddma.td[45].errors.decodeError", DumpEntry{ddma.td[45].errors.decodeError});
        res.insert_or_assign("ddma.td[46].srcAddr", DumpEntry{ddma.td[46].srcAddr});
        res.insert_or_assign("ddma.td[46].destAddr", DumpEntry{ddma.td[46].destAddr});
        res.insert_or_assign("ddma.td[46].btt", DumpEntry{ddma.td[46].btt});
        res.insert_or_assign("ddma.td[46].btt.value", DumpEntry{ddma.td[46].btt.value});
        res.insert_or_assign("ddma.td[46].errors", DumpEntry{ddma.td[46].errors});
        res.insert_or_assign("ddma.td[46].errors.internalError", DumpEntry{ddma.td[46].errors.internalError});
        res.insert_or_assign("ddma.td[46].errors.slaveError", DumpEntry{ddma.td[46].errors.slaveError});
        res.insert_or_assign("ddma.td[46].errors.decodeError", DumpEntry{ddma.td[46].errors.decodeError});
        res.insert_or_assign("ddma.td[47].srcAddr", DumpEntry{ddma.td[47].srcAddr});
        res.insert_or_assign("ddma.td[47].destAddr", DumpEntry{ddma.td[47].destAddr});
        res.insert_or_assign("ddma.td[47].btt", DumpEntry{ddma.td[47].btt});
        res.insert_or_assign("ddma.td[47].btt.value", DumpEntry{ddma.td[47].btt.value});
        res.insert_or_assign("ddma.td[47].errors", DumpEntry{ddma.td[47].errors});
        res.insert_or_assign("ddma.td[47].errors.internalError", DumpEntry{ddma.td[47].errors.internalError});
        res.insert_or_assign("ddma.td[47].errors.slaveError", DumpEntry{ddma.td[47].errors.slaveError});
        res.insert_or_assign("ddma.td[47].errors.decodeError", DumpEntry{ddma.td[47].errors.decodeError});
        res.insert_or_assign("ddma.td[48].srcAddr", DumpEntry{ddma.td[48].srcAddr});
        res.insert_or_assign("ddma.td[48].destAddr", DumpEntry{ddma.td[48].destAddr});
        res.insert_or_assign("ddma.td[48].btt", DumpEntry{ddma.td[48].btt});
        res.insert_or_assign("ddma.td[48].btt.value", DumpEntry{ddma.td[48].btt.value});
        res.insert_or_assign("ddma.td[48].errors", DumpEntry{ddma.td[48].errors});
        res.insert_or_assign("ddma.td[48].errors.internalError", DumpEntry{ddma.td[48].errors.internalError});
        res.insert_or_assign("ddma.td[48].errors.slaveError", DumpEntry{ddma.td[48].errors.slaveError});
        res.insert_or_assign("ddma.td[48].errors.decodeError", DumpEntry{ddma.td[48].errors.decodeError});
        res.insert_or_assign("ddma.td[49].srcAddr", DumpEntry{ddma.td[49].srcAddr});
        res.insert_or_assign("ddma.td[49].destAddr", DumpEntry{ddma.td[49].destAddr});
        res.insert_or_assign("ddma.td[49].btt", DumpEntry{ddma.td[49].btt});
        res.insert_or_assign("ddma.td[49].btt.value", DumpEntry{ddma.td[49].btt.value});
        res.insert_or_assign("ddma.td[49].errors", DumpEntry{ddma.td[49].errors});
        res.insert_or_assign("ddma.td[49].errors.internalError", DumpEntry{ddma.td[49].errors.internalError});
        res.insert_or_assign("ddma.td[49].errors.slaveError", DumpEntry{ddma.td[49].errors.slaveError});
        res.insert_or_assign("ddma.td[49].errors.decodeError", DumpEntry{ddma.td[49].errors.decodeError});
        res.insert_or_assign("ddma.td[50].srcAddr", DumpEntry{ddma.td[50].srcAddr});
        res.insert_or_assign("ddma.td[50].destAddr", DumpEntry{ddma.td[50].destAddr});
        res.insert_or_assign("ddma.td[50].btt", DumpEntry{ddma.td[50].btt});
        res.insert_or_assign("ddma.td[50].btt.value", DumpEntry{ddma.td[50].btt.value});
        res.insert_or_assign("ddma.td[50].errors", DumpEntry{ddma.td[50].errors});
        res.insert_or_assign("ddma.td[50].errors.internalError", DumpEntry{ddma.td[50].errors.internalError});
        res.insert_or_assign("ddma.td[50].errors.slaveError", DumpEntry{ddma.td[50].errors.slaveError});
        res.insert_or_assign("ddma.td[50].errors.decodeError", DumpEntry{ddma.td[50].errors.decodeError});
        res.insert_or_assign("ddma.td[51].srcAddr", DumpEntry{ddma.td[51].srcAddr});
        res.insert_or_assign("ddma.td[51].destAddr", DumpEntry{ddma.td[51].destAddr});
        res.insert_or_assign("ddma.td[51].btt", DumpEntry{ddma.td[51].btt});
        res.insert_or_assign("ddma.td[51].btt.value", DumpEntry{ddma.td[51].btt.value});
        res.insert_or_assign("ddma.td[51].errors", DumpEntry{ddma.td[51].errors});
        res.insert_or_assign("ddma.td[51].errors.internalError", DumpEntry{ddma.td[51].errors.internalError});
        res.insert_or_assign("ddma.td[51].errors.slaveError", DumpEntry{ddma.td[51].errors.slaveError});
        res.insert_or_assign("ddma.td[51].errors.decodeError", DumpEntry{ddma.td[51].errors.decodeError});
        res.insert_or_assign("ddma.td[52].srcAddr", DumpEntry{ddma.td[52].srcAddr});
        res.insert_or_assign("ddma.td[52].destAddr", DumpEntry{ddma.td[52].destAddr});
        res.insert_or_assign("ddma.td[52].btt", DumpEntry{ddma.td[52].btt});
        res.insert_or_assign("ddma.td[52].btt.value", DumpEntry{ddma.td[52].btt.value});
        res.insert_or_assign("ddma.td[52].errors", DumpEntry{ddma.td[52].errors});
        res.insert_or_assign("ddma.td[52].errors.internalError", DumpEntry{ddma.td[52].errors.internalError});
        res.insert_or_assign("ddma.td[52].errors.slaveError", DumpEntry{ddma.td[52].errors.slaveError});
        res.insert_or_assign("ddma.td[52].errors.decodeError", DumpEntry{ddma.td[52].errors.decodeError});
        res.insert_or_assign("ddma.td[53].srcAddr", DumpEntry{ddma.td[53].srcAddr});
        res.insert_or_assign("ddma.td[53].destAddr", DumpEntry{ddma.td[53].destAddr});
        res.insert_or_assign("ddma.td[53].btt", DumpEntry{ddma.td[53].btt});
        res.insert_or_assign("ddma.td[53].btt.value", DumpEntry{ddma.td[53].btt.value});
        res.insert_or_assign("ddma.td[53].errors", DumpEntry{ddma.td[53].errors});
        res.insert_or_assign("ddma.td[53].errors.internalError", DumpEntry{ddma.td[53].errors.internalError});
        res.insert_or_assign("ddma.td[53].errors.slaveError", DumpEntry{ddma.td[53].errors.slaveError});
        res.insert_or_assign("ddma.td[53].errors.decodeError", DumpEntry{ddma.td[53].errors.decodeError});
        res.insert_or_assign("ddma.td[54].srcAddr", DumpEntry{ddma.td[54].srcAddr});
        res.insert_or_assign("ddma.td[54].destAddr", DumpEntry{ddma.td[54].destAddr});
        res.insert_or_assign("ddma.td[54].btt", DumpEntry{ddma.td[54].btt});
        res.insert_or_assign("ddma.td[54].btt.value", DumpEntry{ddma.td[54].btt.value});
        res.insert_or_assign("ddma.td[54].errors", DumpEntry{ddma.td[54].errors});
        res.insert_or_assign("ddma.td[54].errors.internalError", DumpEntry{ddma.td[54].errors.internalError});
        res.insert_or_assign("ddma.td[54].errors.slaveError", DumpEntry{ddma.td[54].errors.slaveError});
        res.insert_or_assign("ddma.td[54].errors.decodeError", DumpEntry{ddma.td[54].errors.decodeError});
        res.insert_or_assign("ddma.td[55].srcAddr", DumpEntry{ddma.td[55].srcAddr});
        res.insert_or_assign("ddma.td[55].destAddr", DumpEntry{ddma.td[55].destAddr});
        res.insert_or_assign("ddma.td[55].btt", DumpEntry{ddma.td[55].btt});
        res.insert_or_assign("ddma.td[55].btt.value", DumpEntry{ddma.td[55].btt.value});
        res.insert_or_assign("ddma.td[55].errors", DumpEntry{ddma.td[55].errors});
        res.insert_or_assign("ddma.td[55].errors.internalError", DumpEntry{ddma.td[55].errors.internalError});
        res.insert_or_assign("ddma.td[55].errors.slaveError", DumpEntry{ddma.td[55].errors.slaveError});
        res.insert_or_assign("ddma.td[55].errors.decodeError", DumpEntry{ddma.td[55].errors.decodeError});
        res.insert_or_assign("ddma.td[56].srcAddr", DumpEntry{ddma.td[56].srcAddr});
        res.insert_or_assign("ddma.td[56].destAddr", DumpEntry{ddma.td[56].destAddr});
        res.insert_or_assign("ddma.td[56].btt", DumpEntry{ddma.td[56].btt});
        res.insert_or_assign("ddma.td[56].btt.value", DumpEntry{ddma.td[56].btt.value});
        res.insert_or_assign("ddma.td[56].errors", DumpEntry{ddma.td[56].errors});
        res.insert_or_assign("ddma.td[56].errors.internalError", DumpEntry{ddma.td[56].errors.internalError});
        res.insert_or_assign("ddma.td[56].errors.slaveError", DumpEntry{ddma.td[56].errors.slaveError});
        res.insert_or_assign("ddma.td[56].errors.decodeError", DumpEntry{ddma.td[56].errors.decodeError});
        res.insert_or_assign("ddma.td[57].srcAddr", DumpEntry{ddma.td[57].srcAddr});
        res.insert_or_assign("ddma.td[57].destAddr", DumpEntry{ddma.td[57].destAddr});
        res.insert_or_assign("ddma.td[57].btt", DumpEntry{ddma.td[57].btt});
        res.insert_or_assign("ddma.td[57].btt.value", DumpEntry{ddma.td[57].btt.value});
        res.insert_or_assign("ddma.td[57].errors", DumpEntry{ddma.td[57].errors});
        res.insert_or_assign("ddma.td[57].errors.internalError", DumpEntry{ddma.td[57].errors.internalError});
        res.insert_or_assign("ddma.td[57].errors.slaveError", DumpEntry{ddma.td[57].errors.slaveError});
        res.insert_or_assign("ddma.td[57].errors.decodeError", DumpEntry{ddma.td[57].errors.decodeError});
        res.insert_or_assign("ddma.td[58].srcAddr", DumpEntry{ddma.td[58].srcAddr});
        res.insert_or_assign("ddma.td[58].destAddr", DumpEntry{ddma.td[58].destAddr});
        res.insert_or_assign("ddma.td[58].btt", DumpEntry{ddma.td[58].btt});
        res.insert_or_assign("ddma.td[58].btt.value", DumpEntry{ddma.td[58].btt.value});
        res.insert_or_assign("ddma.td[58].errors", DumpEntry{ddma.td[58].errors});
        res.insert_or_assign("ddma.td[58].errors.internalError", DumpEntry{ddma.td[58].errors.internalError});
        res.insert_or_assign("ddma.td[58].errors.slaveError", DumpEntry{ddma.td[58].errors.slaveError});
        res.insert_or_assign("ddma.td[58].errors.decodeError", DumpEntry{ddma.td[58].errors.decodeError});
        res.insert_or_assign("ddma.td[59].srcAddr", DumpEntry{ddma.td[59].srcAddr});
        res.insert_or_assign("ddma.td[59].destAddr", DumpEntry{ddma.td[59].destAddr});
        res.insert_or_assign("ddma.td[59].btt", DumpEntry{ddma.td[59].btt});
        res.insert_or_assign("ddma.td[59].btt.value", DumpEntry{ddma.td[59].btt.value});
        res.insert_or_assign("ddma.td[59].errors", DumpEntry{ddma.td[59].errors});
        res.insert_or_assign("ddma.td[59].errors.internalError", DumpEntry{ddma.td[59].errors.internalError});
        res.insert_or_assign("ddma.td[59].errors.slaveError", DumpEntry{ddma.td[59].errors.slaveError});
        res.insert_or_assign("ddma.td[59].errors.decodeError", DumpEntry{ddma.td[59].errors.decodeError});
        res.insert_or_assign("ddma.td[60].srcAddr", DumpEntry{ddma.td[60].srcAddr});
        res.insert_or_assign("ddma.td[60].destAddr", DumpEntry{ddma.td[60].destAddr});
        res.insert_or_assign("ddma.td[60].btt", DumpEntry{ddma.td[60].btt});
        res.insert_or_assign("ddma.td[60].btt.value", DumpEntry{ddma.td[60].btt.value});
        res.insert_or_assign("ddma.td[60].errors", DumpEntry{ddma.td[60].errors});
        res.insert_or_assign("ddma.td[60].errors.internalError", DumpEntry{ddma.td[60].errors.internalError});
        res.insert_or_assign("ddma.td[60].errors.slaveError", DumpEntry{ddma.td[60].errors.slaveError});
        res.insert_or_assign("ddma.td[60].errors.decodeError", DumpEntry{ddma.td[60].errors.decodeError});
        res.insert_or_assign("ddma.td[61].srcAddr", DumpEntry{ddma.td[61].srcAddr});
        res.insert_or_assign("ddma.td[61].destAddr", DumpEntry{ddma.td[61].destAddr});
        res.insert_or_assign("ddma.td[61].btt", DumpEntry{ddma.td[61].btt});
        res.insert_or_assign("ddma.td[61].btt.value", DumpEntry{ddma.td[61].btt.value});
        res.insert_or_assign("ddma.td[61].errors", DumpEntry{ddma.td[61].errors});
        res.insert_or_assign("ddma.td[61].errors.internalError", DumpEntry{ddma.td[61].errors.internalError});
        res.insert_or_assign("ddma.td[61].errors.slaveError", DumpEntry{ddma.td[61].errors.slaveError});
        res.insert_or_assign("ddma.td[61].errors.decodeError", DumpEntry{ddma.td[61].errors.decodeError});
        res.insert_or_assign("ddma.td[62].srcAddr", DumpEntry{ddma.td[62].srcAddr});
        res.insert_or_assign("ddma.td[62].destAddr", DumpEntry{ddma.td[62].destAddr});
        res.insert_or_assign("ddma.td[62].btt", DumpEntry{ddma.td[62].btt});
        res.insert_or_assign("ddma.td[62].btt.value", DumpEntry{ddma.td[62].btt.value});
        res.insert_or_assign("ddma.td[62].errors", DumpEntry{ddma.td[62].errors});
        res.insert_or_assign("ddma.td[62].errors.internalError", DumpEntry{ddma.td[62].errors.internalError});
        res.insert_or_assign("ddma.td[62].errors.slaveError", DumpEntry{ddma.td[62].errors.slaveError});
        res.insert_or_assign("ddma.td[62].errors.decodeError", DumpEntry{ddma.td[62].errors.decodeError});
        res.insert_or_assign("ddma.td[63].srcAddr", DumpEntry{ddma.td[63].srcAddr});
        res.insert_or_assign("ddma.td[63].destAddr", DumpEntry{ddma.td[63].destAddr});
        res.insert_or_assign("ddma.td[63].btt", DumpEntry{ddma.td[63].btt});
        res.insert_or_assign("ddma.td[63].btt.value", DumpEntry{ddma.td[63].btt.value});
        res.insert_or_assign("ddma.td[63].errors", DumpEntry{ddma.td[63].errors});
        res.insert_or_assign("ddma.td[63].errors.internalError", DumpEntry{ddma.td[63].errors.internalError});
        res.insert_or_assign("ddma.td[63].errors.slaveError", DumpEntry{ddma.td[63].errors.slaveError});
        res.insert_or_assign("ddma.td[63].errors.decodeError", DumpEntry{ddma.td[63].errors.decodeError});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SyncTime`
    //!
    //! @param syncTime A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under syncTime
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SyncTime& syncTime)
    {
        DumpMap res{syncTime.base()};
        res.insert_or_assign("syncTime.s", DumpEntry{syncTime.s});
        res.insert_or_assign("syncTime.sc", DumpEntry{syncTime.sc});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SyncTrigArrayItem::Stg`
    //!
    //! @param stg A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under stg
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SyncTrigArrayItem::Stg& stg)
    {
        DumpMap res{stg.base()};
        res.insert_or_assign("stg.ctrl", DumpEntry{stg.ctrl});
        res.insert_or_assign("stg.ctrl.periodic", DumpEntry{stg.ctrl.periodic});
        res.insert_or_assign("stg.ctrl.resync", DumpEntry{stg.ctrl.resync});
        res.insert_or_assign("stg.delaySc", DumpEntry{stg.delaySc});
        res.insert_or_assign("stg.periodSc", DumpEntry{stg.periodSc});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::SyncTrigArray`
    //!
    //! @param syncTrig A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under syncTrig
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::SyncTrigArray& syncTrig)
    {
        DumpMap res{syncTrig.base()};
        res.insert_or_assign("syncTrig[0].stg.ctrl", DumpEntry{syncTrig[0].stg.ctrl});
        res.insert_or_assign("syncTrig[0].stg.ctrl.periodic", DumpEntry{syncTrig[0].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[0].stg.ctrl.resync", DumpEntry{syncTrig[0].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[0].stg.delaySc", DumpEntry{syncTrig[0].stg.delaySc});
        res.insert_or_assign("syncTrig[0].stg.periodSc", DumpEntry{syncTrig[0].stg.periodSc});
        res.insert_or_assign("syncTrig[1].stg.ctrl", DumpEntry{syncTrig[1].stg.ctrl});
        res.insert_or_assign("syncTrig[1].stg.ctrl.periodic", DumpEntry{syncTrig[1].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[1].stg.ctrl.resync", DumpEntry{syncTrig[1].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[1].stg.delaySc", DumpEntry{syncTrig[1].stg.delaySc});
        res.insert_or_assign("syncTrig[1].stg.periodSc", DumpEntry{syncTrig[1].stg.periodSc});
        res.insert_or_assign("syncTrig[2].stg.ctrl", DumpEntry{syncTrig[2].stg.ctrl});
        res.insert_or_assign("syncTrig[2].stg.ctrl.periodic", DumpEntry{syncTrig[2].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[2].stg.ctrl.resync", DumpEntry{syncTrig[2].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[2].stg.delaySc", DumpEntry{syncTrig[2].stg.delaySc});
        res.insert_or_assign("syncTrig[2].stg.periodSc", DumpEntry{syncTrig[2].stg.periodSc});
        res.insert_or_assign("syncTrig[3].stg.ctrl", DumpEntry{syncTrig[3].stg.ctrl});
        res.insert_or_assign("syncTrig[3].stg.ctrl.periodic", DumpEntry{syncTrig[3].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[3].stg.ctrl.resync", DumpEntry{syncTrig[3].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[3].stg.delaySc", DumpEntry{syncTrig[3].stg.delaySc});
        res.insert_or_assign("syncTrig[3].stg.periodSc", DumpEntry{syncTrig[3].stg.periodSc});
        res.insert_or_assign("syncTrig[4].stg.ctrl", DumpEntry{syncTrig[4].stg.ctrl});
        res.insert_or_assign("syncTrig[4].stg.ctrl.periodic", DumpEntry{syncTrig[4].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[4].stg.ctrl.resync", DumpEntry{syncTrig[4].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[4].stg.delaySc", DumpEntry{syncTrig[4].stg.delaySc});
        res.insert_or_assign("syncTrig[4].stg.periodSc", DumpEntry{syncTrig[4].stg.periodSc});
        res.insert_or_assign("syncTrig[5].stg.ctrl", DumpEntry{syncTrig[5].stg.ctrl});
        res.insert_or_assign("syncTrig[5].stg.ctrl.periodic", DumpEntry{syncTrig[5].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[5].stg.ctrl.resync", DumpEntry{syncTrig[5].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[5].stg.delaySc", DumpEntry{syncTrig[5].stg.delaySc});
        res.insert_or_assign("syncTrig[5].stg.periodSc", DumpEntry{syncTrig[5].stg.periodSc});
        res.insert_or_assign("syncTrig[6].stg.ctrl", DumpEntry{syncTrig[6].stg.ctrl});
        res.insert_or_assign("syncTrig[6].stg.ctrl.periodic", DumpEntry{syncTrig[6].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[6].stg.ctrl.resync", DumpEntry{syncTrig[6].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[6].stg.delaySc", DumpEntry{syncTrig[6].stg.delaySc});
        res.insert_or_assign("syncTrig[6].stg.periodSc", DumpEntry{syncTrig[6].stg.periodSc});
        res.insert_or_assign("syncTrig[7].stg.ctrl", DumpEntry{syncTrig[7].stg.ctrl});
        res.insert_or_assign("syncTrig[7].stg.ctrl.periodic", DumpEntry{syncTrig[7].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[7].stg.ctrl.resync", DumpEntry{syncTrig[7].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[7].stg.delaySc", DumpEntry{syncTrig[7].stg.delaySc});
        res.insert_or_assign("syncTrig[7].stg.periodSc", DumpEntry{syncTrig[7].stg.periodSc});
        res.insert_or_assign("syncTrig[8].stg.ctrl", DumpEntry{syncTrig[8].stg.ctrl});
        res.insert_or_assign("syncTrig[8].stg.ctrl.periodic", DumpEntry{syncTrig[8].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[8].stg.ctrl.resync", DumpEntry{syncTrig[8].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[8].stg.delaySc", DumpEntry{syncTrig[8].stg.delaySc});
        res.insert_or_assign("syncTrig[8].stg.periodSc", DumpEntry{syncTrig[8].stg.periodSc});
        res.insert_or_assign("syncTrig[9].stg.ctrl", DumpEntry{syncTrig[9].stg.ctrl});
        res.insert_or_assign("syncTrig[9].stg.ctrl.periodic", DumpEntry{syncTrig[9].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[9].stg.ctrl.resync", DumpEntry{syncTrig[9].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[9].stg.delaySc", DumpEntry{syncTrig[9].stg.delaySc});
        res.insert_or_assign("syncTrig[9].stg.periodSc", DumpEntry{syncTrig[9].stg.periodSc});
        res.insert_or_assign("syncTrig[10].stg.ctrl", DumpEntry{syncTrig[10].stg.ctrl});
        res.insert_or_assign("syncTrig[10].stg.ctrl.periodic", DumpEntry{syncTrig[10].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[10].stg.ctrl.resync", DumpEntry{syncTrig[10].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[10].stg.delaySc", DumpEntry{syncTrig[10].stg.delaySc});
        res.insert_or_assign("syncTrig[10].stg.periodSc", DumpEntry{syncTrig[10].stg.periodSc});
        res.insert_or_assign("syncTrig[11].stg.ctrl", DumpEntry{syncTrig[11].stg.ctrl});
        res.insert_or_assign("syncTrig[11].stg.ctrl.periodic", DumpEntry{syncTrig[11].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[11].stg.ctrl.resync", DumpEntry{syncTrig[11].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[11].stg.delaySc", DumpEntry{syncTrig[11].stg.delaySc});
        res.insert_or_assign("syncTrig[11].stg.periodSc", DumpEntry{syncTrig[11].stg.periodSc});
        res.insert_or_assign("syncTrig[12].stg.ctrl", DumpEntry{syncTrig[12].stg.ctrl});
        res.insert_or_assign("syncTrig[12].stg.ctrl.periodic", DumpEntry{syncTrig[12].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[12].stg.ctrl.resync", DumpEntry{syncTrig[12].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[12].stg.delaySc", DumpEntry{syncTrig[12].stg.delaySc});
        res.insert_or_assign("syncTrig[12].stg.periodSc", DumpEntry{syncTrig[12].stg.periodSc});
        res.insert_or_assign("syncTrig[13].stg.ctrl", DumpEntry{syncTrig[13].stg.ctrl});
        res.insert_or_assign("syncTrig[13].stg.ctrl.periodic", DumpEntry{syncTrig[13].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[13].stg.ctrl.resync", DumpEntry{syncTrig[13].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[13].stg.delaySc", DumpEntry{syncTrig[13].stg.delaySc});
        res.insert_or_assign("syncTrig[13].stg.periodSc", DumpEntry{syncTrig[13].stg.periodSc});
        res.insert_or_assign("syncTrig[14].stg.ctrl", DumpEntry{syncTrig[14].stg.ctrl});
        res.insert_or_assign("syncTrig[14].stg.ctrl.periodic", DumpEntry{syncTrig[14].stg.ctrl.periodic});
        res.insert_or_assign("syncTrig[14].stg.ctrl.resync", DumpEntry{syncTrig[14].stg.ctrl.resync});
        res.insert_or_assign("syncTrig[14].stg.delaySc", DumpEntry{syncTrig[14].stg.delaySc});
        res.insert_or_assign("syncTrig[14].stg.periodSc", DumpEntry{syncTrig[14].stg.periodSc});
        return res;
    }

    //! Dump the register and fields of `unnamed::Top::XilSpi`
    //!
    //! @param xilSpi A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under xilSpi
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::XilSpi& xilSpi)
    {
        DumpMap res{xilSpi.base()};

        return res;
    }

    //! Dump the register and fields of `unnamed::Top::XilI2c`
    //!
    //! @param xilI2c A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under xilI2c
    inline DumpMap dump([[maybe_unused]] const unnamed::Top::XilI2c& xilI2c)
    {
        DumpMap res{xilI2c.base()};

        return res;
    }
    //! Dump the register and fields of `unnamed::Top`
    //!
    //! @param top A reference to the module
    //! @returns A `dump_utils::DumpMap` with all the register and fields under top
    inline DumpMap dump([[maybe_unused]] const unnamed::Top& top)
    {
        DumpMap res{top.base()};
        res.insert_or_assign("top.adcCalint.ctrl", DumpEntry{top.adcCalint.ctrl});
        res.insert_or_assign("top.adcCalint.ctrl.reset", DumpEntry{top.adcCalint.ctrl.reset});
        res.insert_or_assign("top.adcCalint.ctrl.start", DumpEntry{top.adcCalint.ctrl.start});
        res.insert_or_assign("top.adcCalint.ctrl.hwReset", DumpEntry{top.adcCalint.ctrl.hwReset});
        res.insert_or_assign("top.adcCalint.config", DumpEntry{top.adcCalint.config});
        res.insert_or_assign("top.adcCalint.config.cpol", DumpEntry{top.adcCalint.config.cpol});
        res.insert_or_assign("top.adcCalint.config.cpha", DumpEntry{top.adcCalint.config.cpha});
        res.insert_or_assign("top.adcCalint.config.cnvPol", DumpEntry{top.adcCalint.config.cnvPol});
        res.insert_or_assign("top.adcCalint.config.cnvWithCs", DumpEntry{top.adcCalint.config.cnvWithCs});
        res.insert_or_assign("top.adcCalint.config.busyPol", DumpEntry{top.adcCalint.config.busyPol});
        res.insert_or_assign("top.adcCalint.config.busySrc", DumpEntry{top.adcCalint.config.busySrc});
        res.insert_or_assign("top.adcCalint.config.busyTime", DumpEntry{top.adcCalint.config.busyTime});
        res.insert_or_assign("top.adcCalint.config.clkActInConv", DumpEntry{top.adcCalint.config.clkActInConv});
        res.insert_or_assign("top.adcCalint.config.dataWidth", DumpEntry{top.adcCalint.config.dataWidth});
        res.insert_or_assign("top.adcCalint.config.gwCtrl", DumpEntry{top.adcCalint.config.gwCtrl});
        res.insert_or_assign("top.adcCalint.status", DumpEntry{top.adcCalint.status});
        res.insert_or_assign("top.adcCalint.status.apiVer", DumpEntry{top.adcCalint.status.apiVer});
        res.insert_or_assign("top.adcCalint.status.dinPorts", DumpEntry{top.adcCalint.status.dinPorts});
        res.insert_or_assign("top.adcCalint.status.busy", DumpEntry{top.adcCalint.status.busy});
        res.insert_or_assign("top.adcCalint.status.clkPrescaler", DumpEntry{top.adcCalint.status.clkPrescaler});
        res.insert_or_assign("top.adcCalint.data[0].value", DumpEntry{top.adcCalint.data[0].value});
        res.insert_or_assign("top.adcCalint.data[1].value", DumpEntry{top.adcCalint.data[1].value});
        res.insert_or_assign("top.adcCalint.data[2].value", DumpEntry{top.adcCalint.data[2].value});
        res.insert_or_assign("top.adcCalint.data[3].value", DumpEntry{top.adcCalint.data[3].value});
        res.insert_or_assign("top.adcCalint.data[4].value", DumpEntry{top.adcCalint.data[4].value});
        res.insert_or_assign("top.adcCalint.data[5].value", DumpEntry{top.adcCalint.data[5].value});
        res.insert_or_assign("top.adcCalint.data[6].value", DumpEntry{top.adcCalint.data[6].value});
        res.insert_or_assign("top.adcCalint.data[7].value", DumpEntry{top.adcCalint.data[7].value});
        res.insert_or_assign("top.adcCalint.data[8].value", DumpEntry{top.adcCalint.data[8].value});
        res.insert_or_assign("top.adcCalint.data[9].value", DumpEntry{top.adcCalint.data[9].value});
        res.insert_or_assign("top.adcCalint.data[10].value", DumpEntry{top.adcCalint.data[10].value});
        res.insert_or_assign("top.adcCalint.data[11].value", DumpEntry{top.adcCalint.data[11].value});
        res.insert_or_assign("top.adcCalint.data[12].value", DumpEntry{top.adcCalint.data[12].value});
        res.insert_or_assign("top.adcCalint.data[13].value", DumpEntry{top.adcCalint.data[13].value});
        res.insert_or_assign("top.adcCalint.data[14].value", DumpEntry{top.adcCalint.data[14].value});
        res.insert_or_assign("top.adcCalint.data[15].value", DumpEntry{top.adcCalint.data[15].value});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl", DumpEntry{top.adcUncalint[0].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.reset", DumpEntry{top.adcUncalint[0].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.start", DumpEntry{top.adcUncalint[0].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[0].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[0].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[0].adc.config", DumpEntry{top.adcUncalint[0].adc.config});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cpol", DumpEntry{top.adcUncalint[0].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cpha", DumpEntry{top.adcUncalint[0].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[0].adc.config.cnvPol", DumpEntry{top.adcUncalint[0].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[0].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.config.busyPol", DumpEntry{top.adcUncalint[0].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[0].adc.config.busySrc", DumpEntry{top.adcUncalint[0].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.busyTime", DumpEntry{top.adcUncalint[0].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.clkActInConv", DumpEntry{top.adcUncalint[0].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[0].adc.config.dataWidth", DumpEntry{top.adcUncalint[0].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.config.gwCtrl", DumpEntry{top.adcUncalint[0].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[0].adc.status", DumpEntry{top.adcUncalint[0].adc.status});
        res.insert_or_assign("top.adcUncalint[0].adc.status.apiVer", DumpEntry{top.adcUncalint[0].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.status.dinPorts", DumpEntry{top.adcUncalint[0].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.status.busy", DumpEntry{top.adcUncalint[0].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[0].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[0].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[0].adc.data[0].value", DumpEntry{top.adcUncalint[0].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[1].value", DumpEntry{top.adcUncalint[0].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[2].value", DumpEntry{top.adcUncalint[0].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[3].value", DumpEntry{top.adcUncalint[0].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[4].value", DumpEntry{top.adcUncalint[0].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[5].value", DumpEntry{top.adcUncalint[0].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[6].value", DumpEntry{top.adcUncalint[0].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[7].value", DumpEntry{top.adcUncalint[0].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[8].value", DumpEntry{top.adcUncalint[0].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[9].value", DumpEntry{top.adcUncalint[0].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[10].value", DumpEntry{top.adcUncalint[0].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[11].value", DumpEntry{top.adcUncalint[0].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[12].value", DumpEntry{top.adcUncalint[0].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[13].value", DumpEntry{top.adcUncalint[0].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[14].value", DumpEntry{top.adcUncalint[0].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[0].adc.data[15].value", DumpEntry{top.adcUncalint[0].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl", DumpEntry{top.adcUncalint[1].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.reset", DumpEntry{top.adcUncalint[1].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.start", DumpEntry{top.adcUncalint[1].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[1].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[1].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[1].adc.config", DumpEntry{top.adcUncalint[1].adc.config});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cpol", DumpEntry{top.adcUncalint[1].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cpha", DumpEntry{top.adcUncalint[1].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[1].adc.config.cnvPol", DumpEntry{top.adcUncalint[1].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[1].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.config.busyPol", DumpEntry{top.adcUncalint[1].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[1].adc.config.busySrc", DumpEntry{top.adcUncalint[1].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.busyTime", DumpEntry{top.adcUncalint[1].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.clkActInConv", DumpEntry{top.adcUncalint[1].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[1].adc.config.dataWidth", DumpEntry{top.adcUncalint[1].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.config.gwCtrl", DumpEntry{top.adcUncalint[1].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[1].adc.status", DumpEntry{top.adcUncalint[1].adc.status});
        res.insert_or_assign("top.adcUncalint[1].adc.status.apiVer", DumpEntry{top.adcUncalint[1].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.status.dinPorts", DumpEntry{top.adcUncalint[1].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.status.busy", DumpEntry{top.adcUncalint[1].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[1].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[1].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[1].adc.data[0].value", DumpEntry{top.adcUncalint[1].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[1].value", DumpEntry{top.adcUncalint[1].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[2].value", DumpEntry{top.adcUncalint[1].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[3].value", DumpEntry{top.adcUncalint[1].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[4].value", DumpEntry{top.adcUncalint[1].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[5].value", DumpEntry{top.adcUncalint[1].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[6].value", DumpEntry{top.adcUncalint[1].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[7].value", DumpEntry{top.adcUncalint[1].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[8].value", DumpEntry{top.adcUncalint[1].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[9].value", DumpEntry{top.adcUncalint[1].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[10].value", DumpEntry{top.adcUncalint[1].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[11].value", DumpEntry{top.adcUncalint[1].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[12].value", DumpEntry{top.adcUncalint[1].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[13].value", DumpEntry{top.adcUncalint[1].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[14].value", DumpEntry{top.adcUncalint[1].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[1].adc.data[15].value", DumpEntry{top.adcUncalint[1].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl", DumpEntry{top.adcUncalint[2].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.reset", DumpEntry{top.adcUncalint[2].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.start", DumpEntry{top.adcUncalint[2].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[2].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[2].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[2].adc.config", DumpEntry{top.adcUncalint[2].adc.config});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cpol", DumpEntry{top.adcUncalint[2].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cpha", DumpEntry{top.adcUncalint[2].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[2].adc.config.cnvPol", DumpEntry{top.adcUncalint[2].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[2].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.config.busyPol", DumpEntry{top.adcUncalint[2].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[2].adc.config.busySrc", DumpEntry{top.adcUncalint[2].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.busyTime", DumpEntry{top.adcUncalint[2].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.clkActInConv", DumpEntry{top.adcUncalint[2].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[2].adc.config.dataWidth", DumpEntry{top.adcUncalint[2].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.config.gwCtrl", DumpEntry{top.adcUncalint[2].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[2].adc.status", DumpEntry{top.adcUncalint[2].adc.status});
        res.insert_or_assign("top.adcUncalint[2].adc.status.apiVer", DumpEntry{top.adcUncalint[2].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.status.dinPorts", DumpEntry{top.adcUncalint[2].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.status.busy", DumpEntry{top.adcUncalint[2].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[2].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[2].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[2].adc.data[0].value", DumpEntry{top.adcUncalint[2].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[1].value", DumpEntry{top.adcUncalint[2].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[2].value", DumpEntry{top.adcUncalint[2].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[3].value", DumpEntry{top.adcUncalint[2].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[4].value", DumpEntry{top.adcUncalint[2].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[5].value", DumpEntry{top.adcUncalint[2].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[6].value", DumpEntry{top.adcUncalint[2].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[7].value", DumpEntry{top.adcUncalint[2].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[8].value", DumpEntry{top.adcUncalint[2].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[9].value", DumpEntry{top.adcUncalint[2].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[10].value", DumpEntry{top.adcUncalint[2].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[11].value", DumpEntry{top.adcUncalint[2].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[12].value", DumpEntry{top.adcUncalint[2].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[13].value", DumpEntry{top.adcUncalint[2].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[14].value", DumpEntry{top.adcUncalint[2].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[2].adc.data[15].value", DumpEntry{top.adcUncalint[2].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl", DumpEntry{top.adcUncalint[3].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.reset", DumpEntry{top.adcUncalint[3].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.start", DumpEntry{top.adcUncalint[3].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[3].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[3].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[3].adc.config", DumpEntry{top.adcUncalint[3].adc.config});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cpol", DumpEntry{top.adcUncalint[3].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cpha", DumpEntry{top.adcUncalint[3].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[3].adc.config.cnvPol", DumpEntry{top.adcUncalint[3].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[3].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.config.busyPol", DumpEntry{top.adcUncalint[3].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[3].adc.config.busySrc", DumpEntry{top.adcUncalint[3].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.busyTime", DumpEntry{top.adcUncalint[3].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.clkActInConv", DumpEntry{top.adcUncalint[3].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[3].adc.config.dataWidth", DumpEntry{top.adcUncalint[3].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.config.gwCtrl", DumpEntry{top.adcUncalint[3].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[3].adc.status", DumpEntry{top.adcUncalint[3].adc.status});
        res.insert_or_assign("top.adcUncalint[3].adc.status.apiVer", DumpEntry{top.adcUncalint[3].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.status.dinPorts", DumpEntry{top.adcUncalint[3].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.status.busy", DumpEntry{top.adcUncalint[3].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[3].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[3].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[3].adc.data[0].value", DumpEntry{top.adcUncalint[3].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[1].value", DumpEntry{top.adcUncalint[3].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[2].value", DumpEntry{top.adcUncalint[3].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[3].value", DumpEntry{top.adcUncalint[3].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[4].value", DumpEntry{top.adcUncalint[3].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[5].value", DumpEntry{top.adcUncalint[3].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[6].value", DumpEntry{top.adcUncalint[3].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[7].value", DumpEntry{top.adcUncalint[3].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[8].value", DumpEntry{top.adcUncalint[3].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[9].value", DumpEntry{top.adcUncalint[3].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[10].value", DumpEntry{top.adcUncalint[3].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[11].value", DumpEntry{top.adcUncalint[3].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[12].value", DumpEntry{top.adcUncalint[3].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[13].value", DumpEntry{top.adcUncalint[3].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[14].value", DumpEntry{top.adcUncalint[3].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[3].adc.data[15].value", DumpEntry{top.adcUncalint[3].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl", DumpEntry{top.adcUncalint[4].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.reset", DumpEntry{top.adcUncalint[4].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.start", DumpEntry{top.adcUncalint[4].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[4].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[4].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[4].adc.config", DumpEntry{top.adcUncalint[4].adc.config});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cpol", DumpEntry{top.adcUncalint[4].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cpha", DumpEntry{top.adcUncalint[4].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[4].adc.config.cnvPol", DumpEntry{top.adcUncalint[4].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[4].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.config.busyPol", DumpEntry{top.adcUncalint[4].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[4].adc.config.busySrc", DumpEntry{top.adcUncalint[4].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.busyTime", DumpEntry{top.adcUncalint[4].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.clkActInConv", DumpEntry{top.adcUncalint[4].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[4].adc.config.dataWidth", DumpEntry{top.adcUncalint[4].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.config.gwCtrl", DumpEntry{top.adcUncalint[4].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[4].adc.status", DumpEntry{top.adcUncalint[4].adc.status});
        res.insert_or_assign("top.adcUncalint[4].adc.status.apiVer", DumpEntry{top.adcUncalint[4].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.status.dinPorts", DumpEntry{top.adcUncalint[4].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.status.busy", DumpEntry{top.adcUncalint[4].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[4].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[4].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[4].adc.data[0].value", DumpEntry{top.adcUncalint[4].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[1].value", DumpEntry{top.adcUncalint[4].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[2].value", DumpEntry{top.adcUncalint[4].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[3].value", DumpEntry{top.adcUncalint[4].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[4].value", DumpEntry{top.adcUncalint[4].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[5].value", DumpEntry{top.adcUncalint[4].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[6].value", DumpEntry{top.adcUncalint[4].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[7].value", DumpEntry{top.adcUncalint[4].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[8].value", DumpEntry{top.adcUncalint[4].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[9].value", DumpEntry{top.adcUncalint[4].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[10].value", DumpEntry{top.adcUncalint[4].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[11].value", DumpEntry{top.adcUncalint[4].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[12].value", DumpEntry{top.adcUncalint[4].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[13].value", DumpEntry{top.adcUncalint[4].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[14].value", DumpEntry{top.adcUncalint[4].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[4].adc.data[15].value", DumpEntry{top.adcUncalint[4].adc.data[15].value});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl", DumpEntry{top.adcUncalint[5].adc.ctrl});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.reset", DumpEntry{top.adcUncalint[5].adc.ctrl.reset});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.start", DumpEntry{top.adcUncalint[5].adc.ctrl.start});
        res.insert_or_assign("top.adcUncalint[5].adc.ctrl.hwReset", DumpEntry{top.adcUncalint[5].adc.ctrl.hwReset});
        res.insert_or_assign("top.adcUncalint[5].adc.config", DumpEntry{top.adcUncalint[5].adc.config});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cpol", DumpEntry{top.adcUncalint[5].adc.config.cpol});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cpha", DumpEntry{top.adcUncalint[5].adc.config.cpha});
        res.insert_or_assign("top.adcUncalint[5].adc.config.cnvPol", DumpEntry{top.adcUncalint[5].adc.config.cnvPol});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.cnvWithCs", DumpEntry{top.adcUncalint[5].adc.config.cnvWithCs}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.config.busyPol", DumpEntry{top.adcUncalint[5].adc.config.busyPol});
        res.insert_or_assign("top.adcUncalint[5].adc.config.busySrc", DumpEntry{top.adcUncalint[5].adc.config.busySrc});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.busyTime", DumpEntry{top.adcUncalint[5].adc.config.busyTime}
        );
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.clkActInConv", DumpEntry{top.adcUncalint[5].adc.config.clkActInConv}
        );
        res.insert_or_assign(
            "top.adcUncalint[5].adc.config.dataWidth", DumpEntry{top.adcUncalint[5].adc.config.dataWidth}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.config.gwCtrl", DumpEntry{top.adcUncalint[5].adc.config.gwCtrl});
        res.insert_or_assign("top.adcUncalint[5].adc.status", DumpEntry{top.adcUncalint[5].adc.status});
        res.insert_or_assign("top.adcUncalint[5].adc.status.apiVer", DumpEntry{top.adcUncalint[5].adc.status.apiVer});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.status.dinPorts", DumpEntry{top.adcUncalint[5].adc.status.dinPorts}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.status.busy", DumpEntry{top.adcUncalint[5].adc.status.busy});
        res.insert_or_assign(
            "top.adcUncalint[5].adc.status.clkPrescaler", DumpEntry{top.adcUncalint[5].adc.status.clkPrescaler}
        );
        res.insert_or_assign("top.adcUncalint[5].adc.data[0].value", DumpEntry{top.adcUncalint[5].adc.data[0].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[1].value", DumpEntry{top.adcUncalint[5].adc.data[1].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[2].value", DumpEntry{top.adcUncalint[5].adc.data[2].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[3].value", DumpEntry{top.adcUncalint[5].adc.data[3].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[4].value", DumpEntry{top.adcUncalint[5].adc.data[4].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[5].value", DumpEntry{top.adcUncalint[5].adc.data[5].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[6].value", DumpEntry{top.adcUncalint[5].adc.data[6].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[7].value", DumpEntry{top.adcUncalint[5].adc.data[7].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[8].value", DumpEntry{top.adcUncalint[5].adc.data[8].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[9].value", DumpEntry{top.adcUncalint[5].adc.data[9].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[10].value", DumpEntry{top.adcUncalint[5].adc.data[10].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[11].value", DumpEntry{top.adcUncalint[5].adc.data[11].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[12].value", DumpEntry{top.adcUncalint[5].adc.data[12].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[13].value", DumpEntry{top.adcUncalint[5].adc.data[13].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[14].value", DumpEntry{top.adcUncalint[5].adc.data[14].value});
        res.insert_or_assign("top.adcUncalint[5].adc.data[15].value", DumpEntry{top.adcUncalint[5].adc.data[15].value});
        res.insert_or_assign("top.dacInt[0].dac.ctrl", DumpEntry{top.dacInt[0].dac.ctrl});
        res.insert_or_assign("top.dacInt[0].dac.ctrl.reset", DumpEntry{top.dacInt[0].dac.ctrl.reset});
        res.insert_or_assign("top.dacInt[0].dac.ctrl.start", DumpEntry{top.dacInt[0].dac.ctrl.start});
        res.insert_or_assign("top.dacInt[0].dac.config", DumpEntry{top.dacInt[0].dac.config});
        res.insert_or_assign("top.dacInt[0].dac.config.cpol", DumpEntry{top.dacInt[0].dac.config.cpol});
        res.insert_or_assign("top.dacInt[0].dac.config.cpha", DumpEntry{top.dacInt[0].dac.config.cpha});
        res.insert_or_assign("top.dacInt[0].dac.config.msbFirst", DumpEntry{top.dacInt[0].dac.config.msbFirst});
        res.insert_or_assign("top.dacInt[0].dac.config.prePad", DumpEntry{top.dacInt[0].dac.config.prePad});
        res.insert_or_assign("top.dacInt[0].dac.config.postPad", DumpEntry{top.dacInt[0].dac.config.postPad});
        res.insert_or_assign("top.dacInt[0].dac.config.dataWidth", DumpEntry{top.dacInt[0].dac.config.dataWidth});
        res.insert_or_assign("top.dacInt[0].dac.config.deadTime", DumpEntry{top.dacInt[0].dac.config.deadTime});
        res.insert_or_assign("top.dacInt[0].dac.config.clkPres", DumpEntry{top.dacInt[0].dac.config.clkPres});
        res.insert_or_assign("top.dacInt[0].dac.config.fixAddClkCyc", DumpEntry{top.dacInt[0].dac.config.fixAddClkCyc});
        res.insert_or_assign("top.dacInt[0].dac.config.gwCtrl", DumpEntry{top.dacInt[0].dac.config.gwCtrl});
        res.insert_or_assign("top.dacInt[0].dac.status", DumpEntry{top.dacInt[0].dac.status});
        res.insert_or_assign("top.dacInt[0].dac.status.apiVer", DumpEntry{top.dacInt[0].dac.status.apiVer});
        res.insert_or_assign("top.dacInt[0].dac.status.doutPorts", DumpEntry{top.dacInt[0].dac.status.doutPorts});
        res.insert_or_assign("top.dacInt[0].dac.status.busy", DumpEntry{top.dacInt[0].dac.status.busy});
        // top.dacInt[0].dac.data[0].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[1].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[2].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[3].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[4].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[5].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[6].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[7].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[8].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[9].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[10].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[11].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[12].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[13].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[14].value skipped (Register is not readable).
        // top.dacInt[0].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("top.dacInt[1].dac.ctrl", DumpEntry{top.dacInt[1].dac.ctrl});
        res.insert_or_assign("top.dacInt[1].dac.ctrl.reset", DumpEntry{top.dacInt[1].dac.ctrl.reset});
        res.insert_or_assign("top.dacInt[1].dac.ctrl.start", DumpEntry{top.dacInt[1].dac.ctrl.start});
        res.insert_or_assign("top.dacInt[1].dac.config", DumpEntry{top.dacInt[1].dac.config});
        res.insert_or_assign("top.dacInt[1].dac.config.cpol", DumpEntry{top.dacInt[1].dac.config.cpol});
        res.insert_or_assign("top.dacInt[1].dac.config.cpha", DumpEntry{top.dacInt[1].dac.config.cpha});
        res.insert_or_assign("top.dacInt[1].dac.config.msbFirst", DumpEntry{top.dacInt[1].dac.config.msbFirst});
        res.insert_or_assign("top.dacInt[1].dac.config.prePad", DumpEntry{top.dacInt[1].dac.config.prePad});
        res.insert_or_assign("top.dacInt[1].dac.config.postPad", DumpEntry{top.dacInt[1].dac.config.postPad});
        res.insert_or_assign("top.dacInt[1].dac.config.dataWidth", DumpEntry{top.dacInt[1].dac.config.dataWidth});
        res.insert_or_assign("top.dacInt[1].dac.config.deadTime", DumpEntry{top.dacInt[1].dac.config.deadTime});
        res.insert_or_assign("top.dacInt[1].dac.config.clkPres", DumpEntry{top.dacInt[1].dac.config.clkPres});
        res.insert_or_assign("top.dacInt[1].dac.config.fixAddClkCyc", DumpEntry{top.dacInt[1].dac.config.fixAddClkCyc});
        res.insert_or_assign("top.dacInt[1].dac.config.gwCtrl", DumpEntry{top.dacInt[1].dac.config.gwCtrl});
        res.insert_or_assign("top.dacInt[1].dac.status", DumpEntry{top.dacInt[1].dac.status});
        res.insert_or_assign("top.dacInt[1].dac.status.apiVer", DumpEntry{top.dacInt[1].dac.status.apiVer});
        res.insert_or_assign("top.dacInt[1].dac.status.doutPorts", DumpEntry{top.dacInt[1].dac.status.doutPorts});
        res.insert_or_assign("top.dacInt[1].dac.status.busy", DumpEntry{top.dacInt[1].dac.status.busy});
        // top.dacInt[1].dac.data[0].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[1].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[2].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[3].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[4].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[5].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[6].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[7].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[8].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[9].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[10].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[11].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[12].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[13].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[14].value skipped (Register is not readable).
        // top.dacInt[1].dac.data[15].value skipped (Register is not readable).
        res.insert_or_assign("top.signalBank.digI0", DumpEntry{top.signalBank.digI0});
        res.insert_or_assign("top.signalBank.digI1", DumpEntry{top.signalBank.digI1});
        res.insert_or_assign("top.signalBank.digIndI", DumpEntry{top.signalBank.digIndI});
        res.insert_or_assign("top.signalBank.contactI", DumpEntry{top.signalBank.contactI});
        res.insert_or_assign("top.signalBank.opticalI", DumpEntry{top.signalBank.opticalI});
        res.insert_or_assign("top.signalBank.protI", DumpEntry{top.signalBank.protI});
        res.insert_or_assign("top.signalBank.digO", DumpEntry{top.signalBank.digO});
        res.insert_or_assign("top.signalBank.digOcO", DumpEntry{top.signalBank.digOcO});
        res.insert_or_assign("top.signalBank.contactO", DumpEntry{top.signalBank.contactO});
        res.insert_or_assign("top.signalBank.opticalO", DumpEntry{top.signalBank.opticalO});
        res.insert_or_assign("top.signalBank.minMaxLim0", DumpEntry{top.signalBank.minMaxLim0});
        res.insert_or_assign("top.signalBank.minMaxLim1", DumpEntry{top.signalBank.minMaxLim1});
        res.insert_or_assign("top.signalBank.rmsLim0", DumpEntry{top.signalBank.rmsLim0});
        res.insert_or_assign("top.signalBank.rmsLim1", DumpEntry{top.signalBank.rmsLim1});
        res.insert_or_assign("top.signalBank.reg[0].fir", DumpEntry{top.signalBank.reg[0].fir});
        res.insert_or_assign("top.signalBank.reg[1].fir", DumpEntry{top.signalBank.reg[1].fir});
        res.insert_or_assign("top.signalBank.reg[2].fir", DumpEntry{top.signalBank.reg[2].fir});
        res.insert_or_assign("top.signalBank.reg[3].fir", DumpEntry{top.signalBank.reg[3].fir});
        res.insert_or_assign("top.signalBank.reg[4].fir", DumpEntry{top.signalBank.reg[4].fir});
        res.insert_or_assign("top.signalBank.reg[5].fir", DumpEntry{top.signalBank.reg[5].fir});
        res.insert_or_assign("top.signalBank.reg[6].fir", DumpEntry{top.signalBank.reg[6].fir});
        res.insert_or_assign("top.signalBank.reg[7].fir", DumpEntry{top.signalBank.reg[7].fir});
        res.insert_or_assign("top.signalBank.reg[8].fir", DumpEntry{top.signalBank.reg[8].fir});
        res.insert_or_assign("top.signalBank.reg[9].fir", DumpEntry{top.signalBank.reg[9].fir});
        res.insert_or_assign("top.signalBank.reg[10].fir", DumpEntry{top.signalBank.reg[10].fir});
        res.insert_or_assign("top.signalBank.reg[11].fir", DumpEntry{top.signalBank.reg[11].fir});
        res.insert_or_assign("top.signalBank.reg[12].fir", DumpEntry{top.signalBank.reg[12].fir});
        res.insert_or_assign("top.signalBank.reg[13].fir", DumpEntry{top.signalBank.reg[13].fir});
        res.insert_or_assign("top.signalBank.reg[14].fir", DumpEntry{top.signalBank.reg[14].fir});
        res.insert_or_assign("top.signalBank.reg[15].fir", DumpEntry{top.signalBank.reg[15].fir});
        res.insert_or_assign("top.signalBank.reg[16].fir", DumpEntry{top.signalBank.reg[16].fir});
        res.insert_or_assign("top.signalBank.reg[17].fir", DumpEntry{top.signalBank.reg[17].fir});
        res.insert_or_assign("top.signalBank.reg[18].fir", DumpEntry{top.signalBank.reg[18].fir});
        res.insert_or_assign("top.signalBank.reg[19].fir", DumpEntry{top.signalBank.reg[19].fir});
        res.insert_or_assign("top.signalBank.reg[20].fir", DumpEntry{top.signalBank.reg[20].fir});
        res.insert_or_assign("top.signalBank.reg[21].fir", DumpEntry{top.signalBank.reg[21].fir});
        res.insert_or_assign("top.signalBank.reg[22].fir", DumpEntry{top.signalBank.reg[22].fir});
        res.insert_or_assign("top.signalBank.reg[23].fir", DumpEntry{top.signalBank.reg[23].fir});
        res.insert_or_assign("top.signalBank.reg[24].fir", DumpEntry{top.signalBank.reg[24].fir});
        res.insert_or_assign("top.signalBank.reg[25].fir", DumpEntry{top.signalBank.reg[25].fir});
        res.insert_or_assign("top.signalBank.reg[26].fir", DumpEntry{top.signalBank.reg[26].fir});
        res.insert_or_assign("top.signalBank.reg[27].fir", DumpEntry{top.signalBank.reg[27].fir});
        res.insert_or_assign("top.signalBank.reg[28].fir", DumpEntry{top.signalBank.reg[28].fir});
        res.insert_or_assign("top.signalBank.reg[29].fir", DumpEntry{top.signalBank.reg[29].fir});
        res.insert_or_assign("top.signalBank.reg[30].fir", DumpEntry{top.signalBank.reg[30].fir});
        res.insert_or_assign("top.signalBank.reg[31].fir", DumpEntry{top.signalBank.reg[31].fir});
        res.insert_or_assign("top.signalBank.reg[32].fir", DumpEntry{top.signalBank.reg[32].fir});
        res.insert_or_assign("top.signalBank.reg[33].fir", DumpEntry{top.signalBank.reg[33].fir});
        res.insert_or_assign("top.signalBank.reg[34].fir", DumpEntry{top.signalBank.reg[34].fir});
        res.insert_or_assign("top.signalBank.reg[35].fir", DumpEntry{top.signalBank.reg[35].fir});
        res.insert_or_assign("top.signalBank.reg[36].fir", DumpEntry{top.signalBank.reg[36].fir});
        res.insert_or_assign("top.signalBank.reg[37].fir", DumpEntry{top.signalBank.reg[37].fir});
        res.insert_or_assign("top.signalBank.reg[38].fir", DumpEntry{top.signalBank.reg[38].fir});
        res.insert_or_assign("top.signalBank.reg[39].fir", DumpEntry{top.signalBank.reg[39].fir});
        res.insert_or_assign("top.signalBank.reg[40].fir", DumpEntry{top.signalBank.reg[40].fir});
        res.insert_or_assign("top.signalBank.reg[41].fir", DumpEntry{top.signalBank.reg[41].fir});
        res.insert_or_assign("top.signalBank.reg[42].fir", DumpEntry{top.signalBank.reg[42].fir});
        res.insert_or_assign("top.signalBank.reg[43].fir", DumpEntry{top.signalBank.reg[43].fir});
        res.insert_or_assign("top.signalBank.reg[44].fir", DumpEntry{top.signalBank.reg[44].fir});
        res.insert_or_assign("top.signalBank.reg[45].fir", DumpEntry{top.signalBank.reg[45].fir});
        res.insert_or_assign("top.signalBank.reg[46].fir", DumpEntry{top.signalBank.reg[46].fir});
        res.insert_or_assign("top.signalBank.reg[47].fir", DumpEntry{top.signalBank.reg[47].fir});
        res.insert_or_assign("top.signalBank.reg[48].fir", DumpEntry{top.signalBank.reg[48].fir});
        res.insert_or_assign("top.signalBank.reg[49].fir", DumpEntry{top.signalBank.reg[49].fir});
        res.insert_or_assign("top.signalBank.reg[50].fir", DumpEntry{top.signalBank.reg[50].fir});
        res.insert_or_assign("top.signalBank.reg[51].fir", DumpEntry{top.signalBank.reg[51].fir});
        res.insert_or_assign("top.signalBank.reg[52].fir", DumpEntry{top.signalBank.reg[52].fir});
        res.insert_or_assign("top.signalBank.reg[53].fir", DumpEntry{top.signalBank.reg[53].fir});
        res.insert_or_assign("top.signalBank.reg[54].fir", DumpEntry{top.signalBank.reg[54].fir});
        res.insert_or_assign("top.signalBank.reg[55].fir", DumpEntry{top.signalBank.reg[55].fir});
        res.insert_or_assign("top.signalBank.reg[56].fir", DumpEntry{top.signalBank.reg[56].fir});
        res.insert_or_assign("top.signalBank.reg[57].fir", DumpEntry{top.signalBank.reg[57].fir});
        res.insert_or_assign("top.signalBank.reg[58].fir", DumpEntry{top.signalBank.reg[58].fir});
        res.insert_or_assign("top.signalBank.reg[59].fir", DumpEntry{top.signalBank.reg[59].fir});
        res.insert_or_assign("top.signalBank.reg[60].fir", DumpEntry{top.signalBank.reg[60].fir});
        res.insert_or_assign("top.signalBank.reg[61].fir", DumpEntry{top.signalBank.reg[61].fir});
        res.insert_or_assign("top.signalBank.vloop[0].fir", DumpEntry{top.signalBank.vloop[0].fir});
        res.insert_or_assign("top.signalBank.vloop[1].fir", DumpEntry{top.signalBank.vloop[1].fir});
        res.insert_or_assign("top.signalBank.vloop[2].fir", DumpEntry{top.signalBank.vloop[2].fir});
        res.insert_or_assign("top.signalBank.vloop[3].fir", DumpEntry{top.signalBank.vloop[3].fir});
        res.insert_or_assign("top.signalBank.vloop[4].fir", DumpEntry{top.signalBank.vloop[4].fir});
        res.insert_or_assign("top.signalBank.vloop[5].fir", DumpEntry{top.signalBank.vloop[5].fir});
        res.insert_or_assign("top.signalBank.vloop[6].fir", DumpEntry{top.signalBank.vloop[6].fir});
        res.insert_or_assign("top.signalBank.vloop[7].fir", DumpEntry{top.signalBank.vloop[7].fir});
        res.insert_or_assign("top.signalBank.vloop[8].fir", DumpEntry{top.signalBank.vloop[8].fir});
        res.insert_or_assign("top.signalBank.vloop[9].fir", DumpEntry{top.signalBank.vloop[9].fir});
        res.insert_or_assign("top.signalBank.vloop[10].fir", DumpEntry{top.signalBank.vloop[10].fir});
        res.insert_or_assign("top.signalBank.vloop[11].fir", DumpEntry{top.signalBank.vloop[11].fir});
        res.insert_or_assign("top.signalBank.vloop[12].fir", DumpEntry{top.signalBank.vloop[12].fir});
        res.insert_or_assign("top.signalBank.vloop[13].fir", DumpEntry{top.signalBank.vloop[13].fir});
        res.insert_or_assign("top.signalBank.vloop[14].fir", DumpEntry{top.signalBank.vloop[14].fir});
        res.insert_or_assign("top.signalBank.vloop[15].fir", DumpEntry{top.signalBank.vloop[15].fir});
        res.insert_or_assign("top.signalBank.vloop[16].fir", DumpEntry{top.signalBank.vloop[16].fir});
        res.insert_or_assign("top.signalBank.vloop[17].fir", DumpEntry{top.signalBank.vloop[17].fir});
        res.insert_or_assign("top.signalBank.vloop[18].fir", DumpEntry{top.signalBank.vloop[18].fir});
        res.insert_or_assign("top.signalBank.vloop[19].fir", DumpEntry{top.signalBank.vloop[19].fir});
        res.insert_or_assign("top.signalBank.vloop[20].fir", DumpEntry{top.signalBank.vloop[20].fir});
        res.insert_or_assign("top.signalBank.vloop[21].fir", DumpEntry{top.signalBank.vloop[21].fir});
        res.insert_or_assign("top.signalBank.vloop[22].fir", DumpEntry{top.signalBank.vloop[22].fir});
        res.insert_or_assign("top.signalBank.vloop[23].fir", DumpEntry{top.signalBank.vloop[23].fir});
        res.insert_or_assign("top.signalBank.vloop[24].fir", DumpEntry{top.signalBank.vloop[24].fir});
        res.insert_or_assign("top.signalBank.vloop[25].fir", DumpEntry{top.signalBank.vloop[25].fir});
        res.insert_or_assign("top.signalBank.vloop[26].fir", DumpEntry{top.signalBank.vloop[26].fir});
        res.insert_or_assign("top.signalBank.vloop[27].fir", DumpEntry{top.signalBank.vloop[27].fir});
        res.insert_or_assign("top.signalBank.vloop[28].fir", DumpEntry{top.signalBank.vloop[28].fir});
        res.insert_or_assign("top.signalBank.vloop[29].fir", DumpEntry{top.signalBank.vloop[29].fir});
        res.insert_or_assign("top.signalBank.vloop[30].fir", DumpEntry{top.signalBank.vloop[30].fir});
        res.insert_or_assign("top.signalBank.vloop[31].fir", DumpEntry{top.signalBank.vloop[31].fir});
        res.insert_or_assign("top.signalBank.vloop[32].fir", DumpEntry{top.signalBank.vloop[32].fir});
        res.insert_or_assign("top.signalBank.vloop[33].fir", DumpEntry{top.signalBank.vloop[33].fir});
        res.insert_or_assign("top.signalBank.vloop[34].fir", DumpEntry{top.signalBank.vloop[34].fir});
        res.insert_or_assign("top.signalBank.vloop[35].fir", DumpEntry{top.signalBank.vloop[35].fir});
        res.insert_or_assign("top.signalBank.vloop[36].fir", DumpEntry{top.signalBank.vloop[36].fir});
        res.insert_or_assign("top.signalBank.vloop[37].fir", DumpEntry{top.signalBank.vloop[37].fir});
        res.insert_or_assign("top.signalBank.vloop[38].fir", DumpEntry{top.signalBank.vloop[38].fir});
        res.insert_or_assign("top.signalBank.vloop[39].fir", DumpEntry{top.signalBank.vloop[39].fir});
        res.insert_or_assign("top.signalBank.vloop[40].fir", DumpEntry{top.signalBank.vloop[40].fir});
        res.insert_or_assign("top.signalBank.vloop[41].fir", DumpEntry{top.signalBank.vloop[41].fir});
        res.insert_or_assign("top.signalBank.vloop[42].fir", DumpEntry{top.signalBank.vloop[42].fir});
        res.insert_or_assign("top.signalBank.vloop[43].fir", DumpEntry{top.signalBank.vloop[43].fir});
        res.insert_or_assign("top.signalBank.vloop[44].fir", DumpEntry{top.signalBank.vloop[44].fir});
        res.insert_or_assign("top.signalBank.vloop[45].fir", DumpEntry{top.signalBank.vloop[45].fir});
        res.insert_or_assign("top.signalBank.vloop[46].fir", DumpEntry{top.signalBank.vloop[46].fir});
        res.insert_or_assign("top.signalBank.vloop[47].fir", DumpEntry{top.signalBank.vloop[47].fir});
        res.insert_or_assign("top.signalBank.vloop[48].fir", DumpEntry{top.signalBank.vloop[48].fir});
        res.insert_or_assign("top.signalBank.vloop[49].fir", DumpEntry{top.signalBank.vloop[49].fir});
        res.insert_or_assign("top.signalBank.vloop[50].fir", DumpEntry{top.signalBank.vloop[50].fir});
        res.insert_or_assign("top.signalBank.vloop[51].fir", DumpEntry{top.signalBank.vloop[51].fir});
        res.insert_or_assign("top.signalBank.vloop[52].fir", DumpEntry{top.signalBank.vloop[52].fir});
        res.insert_or_assign("top.signalBank.vloop[53].fir", DumpEntry{top.signalBank.vloop[53].fir});
        res.insert_or_assign("top.signalBank.vloop[54].fir", DumpEntry{top.signalBank.vloop[54].fir});
        res.insert_or_assign("top.signalBank.vloop[55].fir", DumpEntry{top.signalBank.vloop[55].fir});
        res.insert_or_assign("top.signalBank.vloop[56].fir", DumpEntry{top.signalBank.vloop[56].fir});
        res.insert_or_assign("top.signalBank.vloop[57].fir", DumpEntry{top.signalBank.vloop[57].fir});
        res.insert_or_assign("top.signalBank.vloop[58].fir", DumpEntry{top.signalBank.vloop[58].fir});
        res.insert_or_assign("top.signalBank.vloop[59].fir", DumpEntry{top.signalBank.vloop[59].fir});
        res.insert_or_assign("top.signalBank.vloop[60].fir", DumpEntry{top.signalBank.vloop[60].fir});
        res.insert_or_assign("top.signalBank.vloop[61].fir", DumpEntry{top.signalBank.vloop[61].fir});
        res.insert_or_assign("top.signalBank.raw[0].raw", DumpEntry{top.signalBank.raw[0].raw});
        res.insert_or_assign("top.signalBank.raw[1].raw", DumpEntry{top.signalBank.raw[1].raw});
        res.insert_or_assign("top.signalBank.raw[2].raw", DumpEntry{top.signalBank.raw[2].raw});
        res.insert_or_assign("top.signalBank.raw[3].raw", DumpEntry{top.signalBank.raw[3].raw});
        res.insert_or_assign("top.signalBank.raw[4].raw", DumpEntry{top.signalBank.raw[4].raw});
        res.insert_or_assign("top.signalBank.raw[5].raw", DumpEntry{top.signalBank.raw[5].raw});
        res.insert_or_assign("top.signalBank.raw[6].raw", DumpEntry{top.signalBank.raw[6].raw});
        res.insert_or_assign("top.signalBank.raw[7].raw", DumpEntry{top.signalBank.raw[7].raw});
        res.insert_or_assign("top.signalBank.raw[8].raw", DumpEntry{top.signalBank.raw[8].raw});
        res.insert_or_assign("top.signalBank.raw[9].raw", DumpEntry{top.signalBank.raw[9].raw});
        res.insert_or_assign("top.signalBank.raw[10].raw", DumpEntry{top.signalBank.raw[10].raw});
        res.insert_or_assign("top.signalBank.raw[11].raw", DumpEntry{top.signalBank.raw[11].raw});
        res.insert_or_assign("top.signalBank.raw[12].raw", DumpEntry{top.signalBank.raw[12].raw});
        res.insert_or_assign("top.signalBank.raw[13].raw", DumpEntry{top.signalBank.raw[13].raw});
        res.insert_or_assign("top.signalBank.raw[14].raw", DumpEntry{top.signalBank.raw[14].raw});
        res.insert_or_assign("top.signalBank.raw[15].raw", DumpEntry{top.signalBank.raw[15].raw});
        res.insert_or_assign("top.signalBank.raw[16].raw", DumpEntry{top.signalBank.raw[16].raw});
        res.insert_or_assign("top.signalBank.raw[17].raw", DumpEntry{top.signalBank.raw[17].raw});
        res.insert_or_assign("top.signalBank.raw[18].raw", DumpEntry{top.signalBank.raw[18].raw});
        res.insert_or_assign("top.signalBank.raw[19].raw", DumpEntry{top.signalBank.raw[19].raw});
        res.insert_or_assign("top.signalBank.raw[20].raw", DumpEntry{top.signalBank.raw[20].raw});
        res.insert_or_assign("top.signalBank.raw[21].raw", DumpEntry{top.signalBank.raw[21].raw});
        res.insert_or_assign("top.signalBank.raw[22].raw", DumpEntry{top.signalBank.raw[22].raw});
        res.insert_or_assign("top.signalBank.raw[23].raw", DumpEntry{top.signalBank.raw[23].raw});
        res.insert_or_assign("top.signalBank.raw[24].raw", DumpEntry{top.signalBank.raw[24].raw});
        res.insert_or_assign("top.signalBank.raw[25].raw", DumpEntry{top.signalBank.raw[25].raw});
        res.insert_or_assign("top.signalBank.raw[26].raw", DumpEntry{top.signalBank.raw[26].raw});
        res.insert_or_assign("top.signalBank.raw[27].raw", DumpEntry{top.signalBank.raw[27].raw});
        res.insert_or_assign("top.signalBank.raw[28].raw", DumpEntry{top.signalBank.raw[28].raw});
        res.insert_or_assign("top.signalBank.raw[29].raw", DumpEntry{top.signalBank.raw[29].raw});
        res.insert_or_assign("top.signalBank.raw[30].raw", DumpEntry{top.signalBank.raw[30].raw});
        res.insert_or_assign("top.signalBank.raw[31].raw", DumpEntry{top.signalBank.raw[31].raw});
        res.insert_or_assign("top.signalBank.raw[32].raw", DumpEntry{top.signalBank.raw[32].raw});
        res.insert_or_assign("top.signalBank.raw[33].raw", DumpEntry{top.signalBank.raw[33].raw});
        res.insert_or_assign("top.signalBank.raw[34].raw", DumpEntry{top.signalBank.raw[34].raw});
        res.insert_or_assign("top.signalBank.raw[35].raw", DumpEntry{top.signalBank.raw[35].raw});
        res.insert_or_assign("top.signalBank.raw[36].raw", DumpEntry{top.signalBank.raw[36].raw});
        res.insert_or_assign("top.signalBank.raw[37].raw", DumpEntry{top.signalBank.raw[37].raw});
        res.insert_or_assign("top.signalBank.raw[38].raw", DumpEntry{top.signalBank.raw[38].raw});
        res.insert_or_assign("top.signalBank.raw[39].raw", DumpEntry{top.signalBank.raw[39].raw});
        res.insert_or_assign("top.signalBank.raw[40].raw", DumpEntry{top.signalBank.raw[40].raw});
        res.insert_or_assign("top.signalBank.raw[41].raw", DumpEntry{top.signalBank.raw[41].raw});
        res.insert_or_assign("top.signalBank.raw[42].raw", DumpEntry{top.signalBank.raw[42].raw});
        res.insert_or_assign("top.signalBank.raw[43].raw", DumpEntry{top.signalBank.raw[43].raw});
        res.insert_or_assign("top.signalBank.raw[44].raw", DumpEntry{top.signalBank.raw[44].raw});
        res.insert_or_assign("top.signalBank.raw[45].raw", DumpEntry{top.signalBank.raw[45].raw});
        res.insert_or_assign("top.signalBank.raw[46].raw", DumpEntry{top.signalBank.raw[46].raw});
        res.insert_or_assign("top.signalBank.raw[47].raw", DumpEntry{top.signalBank.raw[47].raw});
        res.insert_or_assign("top.signalBank.raw[48].raw", DumpEntry{top.signalBank.raw[48].raw});
        res.insert_or_assign("top.signalBank.raw[49].raw", DumpEntry{top.signalBank.raw[49].raw});
        res.insert_or_assign("top.signalBank.raw[50].raw", DumpEntry{top.signalBank.raw[50].raw});
        res.insert_or_assign("top.signalBank.raw[51].raw", DumpEntry{top.signalBank.raw[51].raw});
        res.insert_or_assign("top.signalBank.raw[52].raw", DumpEntry{top.signalBank.raw[52].raw});
        res.insert_or_assign("top.signalBank.raw[53].raw", DumpEntry{top.signalBank.raw[53].raw});
        res.insert_or_assign("top.signalBank.raw[54].raw", DumpEntry{top.signalBank.raw[54].raw});
        res.insert_or_assign("top.signalBank.raw[55].raw", DumpEntry{top.signalBank.raw[55].raw});
        res.insert_or_assign("top.signalBank.raw[56].raw", DumpEntry{top.signalBank.raw[56].raw});
        res.insert_or_assign("top.signalBank.raw[57].raw", DumpEntry{top.signalBank.raw[57].raw});
        res.insert_or_assign("top.signalBank.raw[58].raw", DumpEntry{top.signalBank.raw[58].raw});
        res.insert_or_assign("top.signalBank.raw[59].raw", DumpEntry{top.signalBank.raw[59].raw});
        res.insert_or_assign("top.signalBank.raw[60].raw", DumpEntry{top.signalBank.raw[60].raw});
        res.insert_or_assign("top.signalBank.raw[61].raw", DumpEntry{top.signalBank.raw[61].raw});
        res.insert_or_assign("top.signalBank.mm[0].fir", DumpEntry{top.signalBank.mm[0].fir});
        res.insert_or_assign("top.signalBank.mm[1].fir", DumpEntry{top.signalBank.mm[1].fir});
        res.insert_or_assign("top.signalBank.mm[2].fir", DumpEntry{top.signalBank.mm[2].fir});
        res.insert_or_assign("top.signalBank.mm[3].fir", DumpEntry{top.signalBank.mm[3].fir});
        res.insert_or_assign("top.signalBank.mm[4].fir", DumpEntry{top.signalBank.mm[4].fir});
        res.insert_or_assign("top.signalBank.mm[5].fir", DumpEntry{top.signalBank.mm[5].fir});
        res.insert_or_assign("top.signalBank.mm[6].fir", DumpEntry{top.signalBank.mm[6].fir});
        res.insert_or_assign("top.signalBank.mm[7].fir", DumpEntry{top.signalBank.mm[7].fir});
        res.insert_or_assign("top.signalBank.mm[8].fir", DumpEntry{top.signalBank.mm[8].fir});
        res.insert_or_assign("top.signalBank.mm[9].fir", DumpEntry{top.signalBank.mm[9].fir});
        res.insert_or_assign("top.signalBank.mm[10].fir", DumpEntry{top.signalBank.mm[10].fir});
        res.insert_or_assign("top.signalBank.mm[11].fir", DumpEntry{top.signalBank.mm[11].fir});
        res.insert_or_assign("top.signalBank.mm[12].fir", DumpEntry{top.signalBank.mm[12].fir});
        res.insert_or_assign("top.signalBank.mm[13].fir", DumpEntry{top.signalBank.mm[13].fir});
        res.insert_or_assign("top.signalBank.mm[14].fir", DumpEntry{top.signalBank.mm[14].fir});
        res.insert_or_assign("top.signalBank.mm[15].fir", DumpEntry{top.signalBank.mm[15].fir});
        res.insert_or_assign("top.signalBank.mm[16].fir", DumpEntry{top.signalBank.mm[16].fir});
        res.insert_or_assign("top.signalBank.mm[17].fir", DumpEntry{top.signalBank.mm[17].fir});
        res.insert_or_assign("top.signalBank.mm[18].fir", DumpEntry{top.signalBank.mm[18].fir});
        res.insert_or_assign("top.signalBank.mm[19].fir", DumpEntry{top.signalBank.mm[19].fir});
        res.insert_or_assign("top.signalBank.mm[20].fir", DumpEntry{top.signalBank.mm[20].fir});
        res.insert_or_assign("top.signalBank.mm[21].fir", DumpEntry{top.signalBank.mm[21].fir});
        res.insert_or_assign("top.signalBank.mm[22].fir", DumpEntry{top.signalBank.mm[22].fir});
        res.insert_or_assign("top.signalBank.mm[23].fir", DumpEntry{top.signalBank.mm[23].fir});
        res.insert_or_assign("top.signalBank.mm[24].fir", DumpEntry{top.signalBank.mm[24].fir});
        res.insert_or_assign("top.signalBank.mm[25].fir", DumpEntry{top.signalBank.mm[25].fir});
        res.insert_or_assign("top.signalBank.mm[26].fir", DumpEntry{top.signalBank.mm[26].fir});
        res.insert_or_assign("top.signalBank.mm[27].fir", DumpEntry{top.signalBank.mm[27].fir});
        res.insert_or_assign("top.signalBank.mm[28].fir", DumpEntry{top.signalBank.mm[28].fir});
        res.insert_or_assign("top.signalBank.mm[29].fir", DumpEntry{top.signalBank.mm[29].fir});
        res.insert_or_assign("top.signalBank.mm[30].fir", DumpEntry{top.signalBank.mm[30].fir});
        res.insert_or_assign("top.signalBank.mm[31].fir", DumpEntry{top.signalBank.mm[31].fir});
        res.insert_or_assign("top.signalBank.mm[32].fir", DumpEntry{top.signalBank.mm[32].fir});
        res.insert_or_assign("top.signalBank.mm[33].fir", DumpEntry{top.signalBank.mm[33].fir});
        res.insert_or_assign("top.signalBank.mm[34].fir", DumpEntry{top.signalBank.mm[34].fir});
        res.insert_or_assign("top.signalBank.mm[35].fir", DumpEntry{top.signalBank.mm[35].fir});
        res.insert_or_assign("top.signalBank.mm[36].fir", DumpEntry{top.signalBank.mm[36].fir});
        res.insert_or_assign("top.signalBank.mm[37].fir", DumpEntry{top.signalBank.mm[37].fir});
        res.insert_or_assign("top.signalBank.mm[38].fir", DumpEntry{top.signalBank.mm[38].fir});
        res.insert_or_assign("top.signalBank.mm[39].fir", DumpEntry{top.signalBank.mm[39].fir});
        res.insert_or_assign("top.signalBank.mm[40].fir", DumpEntry{top.signalBank.mm[40].fir});
        res.insert_or_assign("top.signalBank.mm[41].fir", DumpEntry{top.signalBank.mm[41].fir});
        res.insert_or_assign("top.signalBank.mm[42].fir", DumpEntry{top.signalBank.mm[42].fir});
        res.insert_or_assign("top.signalBank.mm[43].fir", DumpEntry{top.signalBank.mm[43].fir});
        res.insert_or_assign("top.signalBank.mm[44].fir", DumpEntry{top.signalBank.mm[44].fir});
        res.insert_or_assign("top.signalBank.mm[45].fir", DumpEntry{top.signalBank.mm[45].fir});
        res.insert_or_assign("top.signalBank.mm[46].fir", DumpEntry{top.signalBank.mm[46].fir});
        res.insert_or_assign("top.signalBank.mm[47].fir", DumpEntry{top.signalBank.mm[47].fir});
        res.insert_or_assign("top.signalBank.mm[48].fir", DumpEntry{top.signalBank.mm[48].fir});
        res.insert_or_assign("top.signalBank.mm[49].fir", DumpEntry{top.signalBank.mm[49].fir});
        res.insert_or_assign("top.signalBank.mm[50].fir", DumpEntry{top.signalBank.mm[50].fir});
        res.insert_or_assign("top.signalBank.mm[51].fir", DumpEntry{top.signalBank.mm[51].fir});
        res.insert_or_assign("top.signalBank.mm[52].fir", DumpEntry{top.signalBank.mm[52].fir});
        res.insert_or_assign("top.signalBank.mm[53].fir", DumpEntry{top.signalBank.mm[53].fir});
        res.insert_or_assign("top.signalBank.mm[54].fir", DumpEntry{top.signalBank.mm[54].fir});
        res.insert_or_assign("top.signalBank.mm[55].fir", DumpEntry{top.signalBank.mm[55].fir});
        res.insert_or_assign("top.signalBank.mm[56].fir", DumpEntry{top.signalBank.mm[56].fir});
        res.insert_or_assign("top.signalBank.mm[57].fir", DumpEntry{top.signalBank.mm[57].fir});
        res.insert_or_assign("top.signalBank.mm[58].fir", DumpEntry{top.signalBank.mm[58].fir});
        res.insert_or_assign("top.signalBank.mm[59].fir", DumpEntry{top.signalBank.mm[59].fir});
        res.insert_or_assign("top.signalBank.mm[60].fir", DumpEntry{top.signalBank.mm[60].fir});
        res.insert_or_assign("top.signalBank.mm[61].fir", DumpEntry{top.signalBank.mm[61].fir});
        res.insert_or_assign("top.signalBank.ms[0].fir", DumpEntry{top.signalBank.ms[0].fir});
        res.insert_or_assign("top.signalBank.ms[1].fir", DumpEntry{top.signalBank.ms[1].fir});
        res.insert_or_assign("top.signalBank.ms[2].fir", DumpEntry{top.signalBank.ms[2].fir});
        res.insert_or_assign("top.signalBank.ms[3].fir", DumpEntry{top.signalBank.ms[3].fir});
        res.insert_or_assign("top.signalBank.ms[4].fir", DumpEntry{top.signalBank.ms[4].fir});
        res.insert_or_assign("top.signalBank.ms[5].fir", DumpEntry{top.signalBank.ms[5].fir});
        res.insert_or_assign("top.signalBank.ms[6].fir", DumpEntry{top.signalBank.ms[6].fir});
        res.insert_or_assign("top.signalBank.ms[7].fir", DumpEntry{top.signalBank.ms[7].fir});
        res.insert_or_assign("top.signalBank.ms[8].fir", DumpEntry{top.signalBank.ms[8].fir});
        res.insert_or_assign("top.signalBank.ms[9].fir", DumpEntry{top.signalBank.ms[9].fir});
        res.insert_or_assign("top.signalBank.ms[10].fir", DumpEntry{top.signalBank.ms[10].fir});
        res.insert_or_assign("top.signalBank.ms[11].fir", DumpEntry{top.signalBank.ms[11].fir});
        res.insert_or_assign("top.signalBank.ms[12].fir", DumpEntry{top.signalBank.ms[12].fir});
        res.insert_or_assign("top.signalBank.ms[13].fir", DumpEntry{top.signalBank.ms[13].fir});
        res.insert_or_assign("top.signalBank.ms[14].fir", DumpEntry{top.signalBank.ms[14].fir});
        res.insert_or_assign("top.signalBank.ms[15].fir", DumpEntry{top.signalBank.ms[15].fir});
        res.insert_or_assign("top.signalBank.ms[16].fir", DumpEntry{top.signalBank.ms[16].fir});
        res.insert_or_assign("top.signalBank.ms[17].fir", DumpEntry{top.signalBank.ms[17].fir});
        res.insert_or_assign("top.signalBank.ms[18].fir", DumpEntry{top.signalBank.ms[18].fir});
        res.insert_or_assign("top.signalBank.ms[19].fir", DumpEntry{top.signalBank.ms[19].fir});
        res.insert_or_assign("top.signalBank.ms[20].fir", DumpEntry{top.signalBank.ms[20].fir});
        res.insert_or_assign("top.signalBank.ms[21].fir", DumpEntry{top.signalBank.ms[21].fir});
        res.insert_or_assign("top.signalBank.ms[22].fir", DumpEntry{top.signalBank.ms[22].fir});
        res.insert_or_assign("top.signalBank.ms[23].fir", DumpEntry{top.signalBank.ms[23].fir});
        res.insert_or_assign("top.signalBank.ms[24].fir", DumpEntry{top.signalBank.ms[24].fir});
        res.insert_or_assign("top.signalBank.ms[25].fir", DumpEntry{top.signalBank.ms[25].fir});
        res.insert_or_assign("top.signalBank.ms[26].fir", DumpEntry{top.signalBank.ms[26].fir});
        res.insert_or_assign("top.signalBank.ms[27].fir", DumpEntry{top.signalBank.ms[27].fir});
        res.insert_or_assign("top.signalBank.ms[28].fir", DumpEntry{top.signalBank.ms[28].fir});
        res.insert_or_assign("top.signalBank.ms[29].fir", DumpEntry{top.signalBank.ms[29].fir});
        res.insert_or_assign("top.signalBank.ms[30].fir", DumpEntry{top.signalBank.ms[30].fir});
        res.insert_or_assign("top.signalBank.ms[31].fir", DumpEntry{top.signalBank.ms[31].fir});
        res.insert_or_assign("top.signalBank.ms[32].fir", DumpEntry{top.signalBank.ms[32].fir});
        res.insert_or_assign("top.signalBank.ms[33].fir", DumpEntry{top.signalBank.ms[33].fir});
        res.insert_or_assign("top.signalBank.ms[34].fir", DumpEntry{top.signalBank.ms[34].fir});
        res.insert_or_assign("top.signalBank.ms[35].fir", DumpEntry{top.signalBank.ms[35].fir});
        res.insert_or_assign("top.signalBank.ms[36].fir", DumpEntry{top.signalBank.ms[36].fir});
        res.insert_or_assign("top.signalBank.ms[37].fir", DumpEntry{top.signalBank.ms[37].fir});
        res.insert_or_assign("top.signalBank.ms[38].fir", DumpEntry{top.signalBank.ms[38].fir});
        res.insert_or_assign("top.signalBank.ms[39].fir", DumpEntry{top.signalBank.ms[39].fir});
        res.insert_or_assign("top.signalBank.ms[40].fir", DumpEntry{top.signalBank.ms[40].fir});
        res.insert_or_assign("top.signalBank.ms[41].fir", DumpEntry{top.signalBank.ms[41].fir});
        res.insert_or_assign("top.signalBank.ms[42].fir", DumpEntry{top.signalBank.ms[42].fir});
        res.insert_or_assign("top.signalBank.ms[43].fir", DumpEntry{top.signalBank.ms[43].fir});
        res.insert_or_assign("top.signalBank.ms[44].fir", DumpEntry{top.signalBank.ms[44].fir});
        res.insert_or_assign("top.signalBank.ms[45].fir", DumpEntry{top.signalBank.ms[45].fir});
        res.insert_or_assign("top.signalBank.ms[46].fir", DumpEntry{top.signalBank.ms[46].fir});
        res.insert_or_assign("top.signalBank.ms[47].fir", DumpEntry{top.signalBank.ms[47].fir});
        res.insert_or_assign("top.signalBank.ms[48].fir", DumpEntry{top.signalBank.ms[48].fir});
        res.insert_or_assign("top.signalBank.ms[49].fir", DumpEntry{top.signalBank.ms[49].fir});
        res.insert_or_assign("top.signalBank.ms[50].fir", DumpEntry{top.signalBank.ms[50].fir});
        res.insert_or_assign("top.signalBank.ms[51].fir", DumpEntry{top.signalBank.ms[51].fir});
        res.insert_or_assign("top.signalBank.ms[52].fir", DumpEntry{top.signalBank.ms[52].fir});
        res.insert_or_assign("top.signalBank.ms[53].fir", DumpEntry{top.signalBank.ms[53].fir});
        res.insert_or_assign("top.signalBank.ms[54].fir", DumpEntry{top.signalBank.ms[54].fir});
        res.insert_or_assign("top.signalBank.ms[55].fir", DumpEntry{top.signalBank.ms[55].fir});
        res.insert_or_assign("top.signalBank.ms[56].fir", DumpEntry{top.signalBank.ms[56].fir});
        res.insert_or_assign("top.signalBank.ms[57].fir", DumpEntry{top.signalBank.ms[57].fir});
        res.insert_or_assign("top.signalBank.ms[58].fir", DumpEntry{top.signalBank.ms[58].fir});
        res.insert_or_assign("top.signalBank.ms[59].fir", DumpEntry{top.signalBank.ms[59].fir});
        res.insert_or_assign("top.signalBank.ms[60].fir", DumpEntry{top.signalBank.ms[60].fir});
        res.insert_or_assign("top.signalBank.ms[61].fir", DumpEntry{top.signalBank.ms[61].fir});
        res.insert_or_assign("top.analogFir.channel[0].rFir.m", DumpEntry{top.analogFir.channel[0].rFir.m});
        res.insert_or_assign("top.analogFir.channel[0].rFir.n", DumpEntry{top.analogFir.channel[0].rFir.n});
        res.insert_or_assign("top.analogFir.channel[0].rFir.s", DumpEntry{top.analogFir.channel[0].rFir.s});
        res.insert_or_assign("top.analogFir.channel[0].rFir.r", DumpEntry{top.analogFir.channel[0].rFir.r});
        res.insert_or_assign("top.analogFir.channel[0].rFir.tSc", DumpEntry{top.analogFir.channel[0].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].rFir.phase", DumpEntry{top.analogFir.channel[0].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[0].vFir.m", DumpEntry{top.analogFir.channel[0].vFir.m});
        res.insert_or_assign("top.analogFir.channel[0].vFir.n", DumpEntry{top.analogFir.channel[0].vFir.n});
        res.insert_or_assign("top.analogFir.channel[0].vFir.s", DumpEntry{top.analogFir.channel[0].vFir.s});
        res.insert_or_assign("top.analogFir.channel[0].vFir.r", DumpEntry{top.analogFir.channel[0].vFir.r});
        res.insert_or_assign("top.analogFir.channel[0].vFir.tSc", DumpEntry{top.analogFir.channel[0].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].vFir.phase", DumpEntry{top.analogFir.channel[0].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.m", DumpEntry{top.analogFir.channel[0].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.n", DumpEntry{top.analogFir.channel[0].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.s", DumpEntry{top.analogFir.channel[0].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.r", DumpEntry{top.analogFir.channel[0].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.tSc", DumpEntry{top.analogFir.channel[0].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[0].mmFir.phase", DumpEntry{top.analogFir.channel[0].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.maxLimit", DumpEntry{top.analogFir.channel[0].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.minLimit", DumpEntry{top.analogFir.channel[0].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[0].limit.filterLength", DumpEntry{top.analogFir.channel[0].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[1].rFir.m", DumpEntry{top.analogFir.channel[1].rFir.m});
        res.insert_or_assign("top.analogFir.channel[1].rFir.n", DumpEntry{top.analogFir.channel[1].rFir.n});
        res.insert_or_assign("top.analogFir.channel[1].rFir.s", DumpEntry{top.analogFir.channel[1].rFir.s});
        res.insert_or_assign("top.analogFir.channel[1].rFir.r", DumpEntry{top.analogFir.channel[1].rFir.r});
        res.insert_or_assign("top.analogFir.channel[1].rFir.tSc", DumpEntry{top.analogFir.channel[1].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].rFir.phase", DumpEntry{top.analogFir.channel[1].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[1].vFir.m", DumpEntry{top.analogFir.channel[1].vFir.m});
        res.insert_or_assign("top.analogFir.channel[1].vFir.n", DumpEntry{top.analogFir.channel[1].vFir.n});
        res.insert_or_assign("top.analogFir.channel[1].vFir.s", DumpEntry{top.analogFir.channel[1].vFir.s});
        res.insert_or_assign("top.analogFir.channel[1].vFir.r", DumpEntry{top.analogFir.channel[1].vFir.r});
        res.insert_or_assign("top.analogFir.channel[1].vFir.tSc", DumpEntry{top.analogFir.channel[1].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].vFir.phase", DumpEntry{top.analogFir.channel[1].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.m", DumpEntry{top.analogFir.channel[1].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.n", DumpEntry{top.analogFir.channel[1].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.s", DumpEntry{top.analogFir.channel[1].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.r", DumpEntry{top.analogFir.channel[1].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.tSc", DumpEntry{top.analogFir.channel[1].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[1].mmFir.phase", DumpEntry{top.analogFir.channel[1].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.maxLimit", DumpEntry{top.analogFir.channel[1].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.minLimit", DumpEntry{top.analogFir.channel[1].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[1].limit.filterLength", DumpEntry{top.analogFir.channel[1].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[2].rFir.m", DumpEntry{top.analogFir.channel[2].rFir.m});
        res.insert_or_assign("top.analogFir.channel[2].rFir.n", DumpEntry{top.analogFir.channel[2].rFir.n});
        res.insert_or_assign("top.analogFir.channel[2].rFir.s", DumpEntry{top.analogFir.channel[2].rFir.s});
        res.insert_or_assign("top.analogFir.channel[2].rFir.r", DumpEntry{top.analogFir.channel[2].rFir.r});
        res.insert_or_assign("top.analogFir.channel[2].rFir.tSc", DumpEntry{top.analogFir.channel[2].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].rFir.phase", DumpEntry{top.analogFir.channel[2].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[2].vFir.m", DumpEntry{top.analogFir.channel[2].vFir.m});
        res.insert_or_assign("top.analogFir.channel[2].vFir.n", DumpEntry{top.analogFir.channel[2].vFir.n});
        res.insert_or_assign("top.analogFir.channel[2].vFir.s", DumpEntry{top.analogFir.channel[2].vFir.s});
        res.insert_or_assign("top.analogFir.channel[2].vFir.r", DumpEntry{top.analogFir.channel[2].vFir.r});
        res.insert_or_assign("top.analogFir.channel[2].vFir.tSc", DumpEntry{top.analogFir.channel[2].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].vFir.phase", DumpEntry{top.analogFir.channel[2].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.m", DumpEntry{top.analogFir.channel[2].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.n", DumpEntry{top.analogFir.channel[2].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.s", DumpEntry{top.analogFir.channel[2].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.r", DumpEntry{top.analogFir.channel[2].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.tSc", DumpEntry{top.analogFir.channel[2].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[2].mmFir.phase", DumpEntry{top.analogFir.channel[2].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.maxLimit", DumpEntry{top.analogFir.channel[2].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.minLimit", DumpEntry{top.analogFir.channel[2].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[2].limit.filterLength", DumpEntry{top.analogFir.channel[2].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[3].rFir.m", DumpEntry{top.analogFir.channel[3].rFir.m});
        res.insert_or_assign("top.analogFir.channel[3].rFir.n", DumpEntry{top.analogFir.channel[3].rFir.n});
        res.insert_or_assign("top.analogFir.channel[3].rFir.s", DumpEntry{top.analogFir.channel[3].rFir.s});
        res.insert_or_assign("top.analogFir.channel[3].rFir.r", DumpEntry{top.analogFir.channel[3].rFir.r});
        res.insert_or_assign("top.analogFir.channel[3].rFir.tSc", DumpEntry{top.analogFir.channel[3].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].rFir.phase", DumpEntry{top.analogFir.channel[3].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[3].vFir.m", DumpEntry{top.analogFir.channel[3].vFir.m});
        res.insert_or_assign("top.analogFir.channel[3].vFir.n", DumpEntry{top.analogFir.channel[3].vFir.n});
        res.insert_or_assign("top.analogFir.channel[3].vFir.s", DumpEntry{top.analogFir.channel[3].vFir.s});
        res.insert_or_assign("top.analogFir.channel[3].vFir.r", DumpEntry{top.analogFir.channel[3].vFir.r});
        res.insert_or_assign("top.analogFir.channel[3].vFir.tSc", DumpEntry{top.analogFir.channel[3].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].vFir.phase", DumpEntry{top.analogFir.channel[3].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.m", DumpEntry{top.analogFir.channel[3].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.n", DumpEntry{top.analogFir.channel[3].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.s", DumpEntry{top.analogFir.channel[3].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.r", DumpEntry{top.analogFir.channel[3].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.tSc", DumpEntry{top.analogFir.channel[3].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[3].mmFir.phase", DumpEntry{top.analogFir.channel[3].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.maxLimit", DumpEntry{top.analogFir.channel[3].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.minLimit", DumpEntry{top.analogFir.channel[3].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[3].limit.filterLength", DumpEntry{top.analogFir.channel[3].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[4].rFir.m", DumpEntry{top.analogFir.channel[4].rFir.m});
        res.insert_or_assign("top.analogFir.channel[4].rFir.n", DumpEntry{top.analogFir.channel[4].rFir.n});
        res.insert_or_assign("top.analogFir.channel[4].rFir.s", DumpEntry{top.analogFir.channel[4].rFir.s});
        res.insert_or_assign("top.analogFir.channel[4].rFir.r", DumpEntry{top.analogFir.channel[4].rFir.r});
        res.insert_or_assign("top.analogFir.channel[4].rFir.tSc", DumpEntry{top.analogFir.channel[4].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].rFir.phase", DumpEntry{top.analogFir.channel[4].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[4].vFir.m", DumpEntry{top.analogFir.channel[4].vFir.m});
        res.insert_or_assign("top.analogFir.channel[4].vFir.n", DumpEntry{top.analogFir.channel[4].vFir.n});
        res.insert_or_assign("top.analogFir.channel[4].vFir.s", DumpEntry{top.analogFir.channel[4].vFir.s});
        res.insert_or_assign("top.analogFir.channel[4].vFir.r", DumpEntry{top.analogFir.channel[4].vFir.r});
        res.insert_or_assign("top.analogFir.channel[4].vFir.tSc", DumpEntry{top.analogFir.channel[4].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].vFir.phase", DumpEntry{top.analogFir.channel[4].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.m", DumpEntry{top.analogFir.channel[4].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.n", DumpEntry{top.analogFir.channel[4].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.s", DumpEntry{top.analogFir.channel[4].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.r", DumpEntry{top.analogFir.channel[4].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.tSc", DumpEntry{top.analogFir.channel[4].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[4].mmFir.phase", DumpEntry{top.analogFir.channel[4].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.maxLimit", DumpEntry{top.analogFir.channel[4].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.minLimit", DumpEntry{top.analogFir.channel[4].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[4].limit.filterLength", DumpEntry{top.analogFir.channel[4].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[5].rFir.m", DumpEntry{top.analogFir.channel[5].rFir.m});
        res.insert_or_assign("top.analogFir.channel[5].rFir.n", DumpEntry{top.analogFir.channel[5].rFir.n});
        res.insert_or_assign("top.analogFir.channel[5].rFir.s", DumpEntry{top.analogFir.channel[5].rFir.s});
        res.insert_or_assign("top.analogFir.channel[5].rFir.r", DumpEntry{top.analogFir.channel[5].rFir.r});
        res.insert_or_assign("top.analogFir.channel[5].rFir.tSc", DumpEntry{top.analogFir.channel[5].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].rFir.phase", DumpEntry{top.analogFir.channel[5].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[5].vFir.m", DumpEntry{top.analogFir.channel[5].vFir.m});
        res.insert_or_assign("top.analogFir.channel[5].vFir.n", DumpEntry{top.analogFir.channel[5].vFir.n});
        res.insert_or_assign("top.analogFir.channel[5].vFir.s", DumpEntry{top.analogFir.channel[5].vFir.s});
        res.insert_or_assign("top.analogFir.channel[5].vFir.r", DumpEntry{top.analogFir.channel[5].vFir.r});
        res.insert_or_assign("top.analogFir.channel[5].vFir.tSc", DumpEntry{top.analogFir.channel[5].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].vFir.phase", DumpEntry{top.analogFir.channel[5].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.m", DumpEntry{top.analogFir.channel[5].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.n", DumpEntry{top.analogFir.channel[5].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.s", DumpEntry{top.analogFir.channel[5].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.r", DumpEntry{top.analogFir.channel[5].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.tSc", DumpEntry{top.analogFir.channel[5].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[5].mmFir.phase", DumpEntry{top.analogFir.channel[5].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.maxLimit", DumpEntry{top.analogFir.channel[5].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.minLimit", DumpEntry{top.analogFir.channel[5].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[5].limit.filterLength", DumpEntry{top.analogFir.channel[5].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[6].rFir.m", DumpEntry{top.analogFir.channel[6].rFir.m});
        res.insert_or_assign("top.analogFir.channel[6].rFir.n", DumpEntry{top.analogFir.channel[6].rFir.n});
        res.insert_or_assign("top.analogFir.channel[6].rFir.s", DumpEntry{top.analogFir.channel[6].rFir.s});
        res.insert_or_assign("top.analogFir.channel[6].rFir.r", DumpEntry{top.analogFir.channel[6].rFir.r});
        res.insert_or_assign("top.analogFir.channel[6].rFir.tSc", DumpEntry{top.analogFir.channel[6].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].rFir.phase", DumpEntry{top.analogFir.channel[6].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[6].vFir.m", DumpEntry{top.analogFir.channel[6].vFir.m});
        res.insert_or_assign("top.analogFir.channel[6].vFir.n", DumpEntry{top.analogFir.channel[6].vFir.n});
        res.insert_or_assign("top.analogFir.channel[6].vFir.s", DumpEntry{top.analogFir.channel[6].vFir.s});
        res.insert_or_assign("top.analogFir.channel[6].vFir.r", DumpEntry{top.analogFir.channel[6].vFir.r});
        res.insert_or_assign("top.analogFir.channel[6].vFir.tSc", DumpEntry{top.analogFir.channel[6].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].vFir.phase", DumpEntry{top.analogFir.channel[6].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.m", DumpEntry{top.analogFir.channel[6].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.n", DumpEntry{top.analogFir.channel[6].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.s", DumpEntry{top.analogFir.channel[6].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.r", DumpEntry{top.analogFir.channel[6].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.tSc", DumpEntry{top.analogFir.channel[6].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[6].mmFir.phase", DumpEntry{top.analogFir.channel[6].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.maxLimit", DumpEntry{top.analogFir.channel[6].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.minLimit", DumpEntry{top.analogFir.channel[6].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[6].limit.filterLength", DumpEntry{top.analogFir.channel[6].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[7].rFir.m", DumpEntry{top.analogFir.channel[7].rFir.m});
        res.insert_or_assign("top.analogFir.channel[7].rFir.n", DumpEntry{top.analogFir.channel[7].rFir.n});
        res.insert_or_assign("top.analogFir.channel[7].rFir.s", DumpEntry{top.analogFir.channel[7].rFir.s});
        res.insert_or_assign("top.analogFir.channel[7].rFir.r", DumpEntry{top.analogFir.channel[7].rFir.r});
        res.insert_or_assign("top.analogFir.channel[7].rFir.tSc", DumpEntry{top.analogFir.channel[7].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].rFir.phase", DumpEntry{top.analogFir.channel[7].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[7].vFir.m", DumpEntry{top.analogFir.channel[7].vFir.m});
        res.insert_or_assign("top.analogFir.channel[7].vFir.n", DumpEntry{top.analogFir.channel[7].vFir.n});
        res.insert_or_assign("top.analogFir.channel[7].vFir.s", DumpEntry{top.analogFir.channel[7].vFir.s});
        res.insert_or_assign("top.analogFir.channel[7].vFir.r", DumpEntry{top.analogFir.channel[7].vFir.r});
        res.insert_or_assign("top.analogFir.channel[7].vFir.tSc", DumpEntry{top.analogFir.channel[7].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].vFir.phase", DumpEntry{top.analogFir.channel[7].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.m", DumpEntry{top.analogFir.channel[7].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.n", DumpEntry{top.analogFir.channel[7].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.s", DumpEntry{top.analogFir.channel[7].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.r", DumpEntry{top.analogFir.channel[7].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.tSc", DumpEntry{top.analogFir.channel[7].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[7].mmFir.phase", DumpEntry{top.analogFir.channel[7].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.maxLimit", DumpEntry{top.analogFir.channel[7].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.minLimit", DumpEntry{top.analogFir.channel[7].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[7].limit.filterLength", DumpEntry{top.analogFir.channel[7].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[8].rFir.m", DumpEntry{top.analogFir.channel[8].rFir.m});
        res.insert_or_assign("top.analogFir.channel[8].rFir.n", DumpEntry{top.analogFir.channel[8].rFir.n});
        res.insert_or_assign("top.analogFir.channel[8].rFir.s", DumpEntry{top.analogFir.channel[8].rFir.s});
        res.insert_or_assign("top.analogFir.channel[8].rFir.r", DumpEntry{top.analogFir.channel[8].rFir.r});
        res.insert_or_assign("top.analogFir.channel[8].rFir.tSc", DumpEntry{top.analogFir.channel[8].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].rFir.phase", DumpEntry{top.analogFir.channel[8].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[8].vFir.m", DumpEntry{top.analogFir.channel[8].vFir.m});
        res.insert_or_assign("top.analogFir.channel[8].vFir.n", DumpEntry{top.analogFir.channel[8].vFir.n});
        res.insert_or_assign("top.analogFir.channel[8].vFir.s", DumpEntry{top.analogFir.channel[8].vFir.s});
        res.insert_or_assign("top.analogFir.channel[8].vFir.r", DumpEntry{top.analogFir.channel[8].vFir.r});
        res.insert_or_assign("top.analogFir.channel[8].vFir.tSc", DumpEntry{top.analogFir.channel[8].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].vFir.phase", DumpEntry{top.analogFir.channel[8].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.m", DumpEntry{top.analogFir.channel[8].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.n", DumpEntry{top.analogFir.channel[8].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.s", DumpEntry{top.analogFir.channel[8].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.r", DumpEntry{top.analogFir.channel[8].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.tSc", DumpEntry{top.analogFir.channel[8].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[8].mmFir.phase", DumpEntry{top.analogFir.channel[8].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.maxLimit", DumpEntry{top.analogFir.channel[8].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.minLimit", DumpEntry{top.analogFir.channel[8].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[8].limit.filterLength", DumpEntry{top.analogFir.channel[8].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[9].rFir.m", DumpEntry{top.analogFir.channel[9].rFir.m});
        res.insert_or_assign("top.analogFir.channel[9].rFir.n", DumpEntry{top.analogFir.channel[9].rFir.n});
        res.insert_or_assign("top.analogFir.channel[9].rFir.s", DumpEntry{top.analogFir.channel[9].rFir.s});
        res.insert_or_assign("top.analogFir.channel[9].rFir.r", DumpEntry{top.analogFir.channel[9].rFir.r});
        res.insert_or_assign("top.analogFir.channel[9].rFir.tSc", DumpEntry{top.analogFir.channel[9].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].rFir.phase", DumpEntry{top.analogFir.channel[9].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[9].vFir.m", DumpEntry{top.analogFir.channel[9].vFir.m});
        res.insert_or_assign("top.analogFir.channel[9].vFir.n", DumpEntry{top.analogFir.channel[9].vFir.n});
        res.insert_or_assign("top.analogFir.channel[9].vFir.s", DumpEntry{top.analogFir.channel[9].vFir.s});
        res.insert_or_assign("top.analogFir.channel[9].vFir.r", DumpEntry{top.analogFir.channel[9].vFir.r});
        res.insert_or_assign("top.analogFir.channel[9].vFir.tSc", DumpEntry{top.analogFir.channel[9].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].vFir.phase", DumpEntry{top.analogFir.channel[9].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.m", DumpEntry{top.analogFir.channel[9].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.n", DumpEntry{top.analogFir.channel[9].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.s", DumpEntry{top.analogFir.channel[9].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.r", DumpEntry{top.analogFir.channel[9].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.tSc", DumpEntry{top.analogFir.channel[9].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[9].mmFir.phase", DumpEntry{top.analogFir.channel[9].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.maxLimit", DumpEntry{top.analogFir.channel[9].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.minLimit", DumpEntry{top.analogFir.channel[9].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[9].limit.filterLength", DumpEntry{top.analogFir.channel[9].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[10].rFir.m", DumpEntry{top.analogFir.channel[10].rFir.m});
        res.insert_or_assign("top.analogFir.channel[10].rFir.n", DumpEntry{top.analogFir.channel[10].rFir.n});
        res.insert_or_assign("top.analogFir.channel[10].rFir.s", DumpEntry{top.analogFir.channel[10].rFir.s});
        res.insert_or_assign("top.analogFir.channel[10].rFir.r", DumpEntry{top.analogFir.channel[10].rFir.r});
        res.insert_or_assign("top.analogFir.channel[10].rFir.tSc", DumpEntry{top.analogFir.channel[10].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].rFir.phase", DumpEntry{top.analogFir.channel[10].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[10].vFir.m", DumpEntry{top.analogFir.channel[10].vFir.m});
        res.insert_or_assign("top.analogFir.channel[10].vFir.n", DumpEntry{top.analogFir.channel[10].vFir.n});
        res.insert_or_assign("top.analogFir.channel[10].vFir.s", DumpEntry{top.analogFir.channel[10].vFir.s});
        res.insert_or_assign("top.analogFir.channel[10].vFir.r", DumpEntry{top.analogFir.channel[10].vFir.r});
        res.insert_or_assign("top.analogFir.channel[10].vFir.tSc", DumpEntry{top.analogFir.channel[10].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].vFir.phase", DumpEntry{top.analogFir.channel[10].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.m", DumpEntry{top.analogFir.channel[10].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.n", DumpEntry{top.analogFir.channel[10].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.s", DumpEntry{top.analogFir.channel[10].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.r", DumpEntry{top.analogFir.channel[10].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.tSc", DumpEntry{top.analogFir.channel[10].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[10].mmFir.phase", DumpEntry{top.analogFir.channel[10].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.maxLimit", DumpEntry{top.analogFir.channel[10].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.minLimit", DumpEntry{top.analogFir.channel[10].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[10].limit.filterLength", DumpEntry{top.analogFir.channel[10].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[11].rFir.m", DumpEntry{top.analogFir.channel[11].rFir.m});
        res.insert_or_assign("top.analogFir.channel[11].rFir.n", DumpEntry{top.analogFir.channel[11].rFir.n});
        res.insert_or_assign("top.analogFir.channel[11].rFir.s", DumpEntry{top.analogFir.channel[11].rFir.s});
        res.insert_or_assign("top.analogFir.channel[11].rFir.r", DumpEntry{top.analogFir.channel[11].rFir.r});
        res.insert_or_assign("top.analogFir.channel[11].rFir.tSc", DumpEntry{top.analogFir.channel[11].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].rFir.phase", DumpEntry{top.analogFir.channel[11].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[11].vFir.m", DumpEntry{top.analogFir.channel[11].vFir.m});
        res.insert_or_assign("top.analogFir.channel[11].vFir.n", DumpEntry{top.analogFir.channel[11].vFir.n});
        res.insert_or_assign("top.analogFir.channel[11].vFir.s", DumpEntry{top.analogFir.channel[11].vFir.s});
        res.insert_or_assign("top.analogFir.channel[11].vFir.r", DumpEntry{top.analogFir.channel[11].vFir.r});
        res.insert_or_assign("top.analogFir.channel[11].vFir.tSc", DumpEntry{top.analogFir.channel[11].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].vFir.phase", DumpEntry{top.analogFir.channel[11].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.m", DumpEntry{top.analogFir.channel[11].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.n", DumpEntry{top.analogFir.channel[11].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.s", DumpEntry{top.analogFir.channel[11].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.r", DumpEntry{top.analogFir.channel[11].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.tSc", DumpEntry{top.analogFir.channel[11].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[11].mmFir.phase", DumpEntry{top.analogFir.channel[11].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.maxLimit", DumpEntry{top.analogFir.channel[11].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.minLimit", DumpEntry{top.analogFir.channel[11].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[11].limit.filterLength", DumpEntry{top.analogFir.channel[11].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[12].rFir.m", DumpEntry{top.analogFir.channel[12].rFir.m});
        res.insert_or_assign("top.analogFir.channel[12].rFir.n", DumpEntry{top.analogFir.channel[12].rFir.n});
        res.insert_or_assign("top.analogFir.channel[12].rFir.s", DumpEntry{top.analogFir.channel[12].rFir.s});
        res.insert_or_assign("top.analogFir.channel[12].rFir.r", DumpEntry{top.analogFir.channel[12].rFir.r});
        res.insert_or_assign("top.analogFir.channel[12].rFir.tSc", DumpEntry{top.analogFir.channel[12].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].rFir.phase", DumpEntry{top.analogFir.channel[12].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[12].vFir.m", DumpEntry{top.analogFir.channel[12].vFir.m});
        res.insert_or_assign("top.analogFir.channel[12].vFir.n", DumpEntry{top.analogFir.channel[12].vFir.n});
        res.insert_or_assign("top.analogFir.channel[12].vFir.s", DumpEntry{top.analogFir.channel[12].vFir.s});
        res.insert_or_assign("top.analogFir.channel[12].vFir.r", DumpEntry{top.analogFir.channel[12].vFir.r});
        res.insert_or_assign("top.analogFir.channel[12].vFir.tSc", DumpEntry{top.analogFir.channel[12].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].vFir.phase", DumpEntry{top.analogFir.channel[12].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.m", DumpEntry{top.analogFir.channel[12].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.n", DumpEntry{top.analogFir.channel[12].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.s", DumpEntry{top.analogFir.channel[12].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.r", DumpEntry{top.analogFir.channel[12].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.tSc", DumpEntry{top.analogFir.channel[12].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[12].mmFir.phase", DumpEntry{top.analogFir.channel[12].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.maxLimit", DumpEntry{top.analogFir.channel[12].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.minLimit", DumpEntry{top.analogFir.channel[12].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[12].limit.filterLength", DumpEntry{top.analogFir.channel[12].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[13].rFir.m", DumpEntry{top.analogFir.channel[13].rFir.m});
        res.insert_or_assign("top.analogFir.channel[13].rFir.n", DumpEntry{top.analogFir.channel[13].rFir.n});
        res.insert_or_assign("top.analogFir.channel[13].rFir.s", DumpEntry{top.analogFir.channel[13].rFir.s});
        res.insert_or_assign("top.analogFir.channel[13].rFir.r", DumpEntry{top.analogFir.channel[13].rFir.r});
        res.insert_or_assign("top.analogFir.channel[13].rFir.tSc", DumpEntry{top.analogFir.channel[13].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].rFir.phase", DumpEntry{top.analogFir.channel[13].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[13].vFir.m", DumpEntry{top.analogFir.channel[13].vFir.m});
        res.insert_or_assign("top.analogFir.channel[13].vFir.n", DumpEntry{top.analogFir.channel[13].vFir.n});
        res.insert_or_assign("top.analogFir.channel[13].vFir.s", DumpEntry{top.analogFir.channel[13].vFir.s});
        res.insert_or_assign("top.analogFir.channel[13].vFir.r", DumpEntry{top.analogFir.channel[13].vFir.r});
        res.insert_or_assign("top.analogFir.channel[13].vFir.tSc", DumpEntry{top.analogFir.channel[13].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].vFir.phase", DumpEntry{top.analogFir.channel[13].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.m", DumpEntry{top.analogFir.channel[13].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.n", DumpEntry{top.analogFir.channel[13].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.s", DumpEntry{top.analogFir.channel[13].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.r", DumpEntry{top.analogFir.channel[13].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.tSc", DumpEntry{top.analogFir.channel[13].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[13].mmFir.phase", DumpEntry{top.analogFir.channel[13].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.maxLimit", DumpEntry{top.analogFir.channel[13].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.minLimit", DumpEntry{top.analogFir.channel[13].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[13].limit.filterLength", DumpEntry{top.analogFir.channel[13].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[14].rFir.m", DumpEntry{top.analogFir.channel[14].rFir.m});
        res.insert_or_assign("top.analogFir.channel[14].rFir.n", DumpEntry{top.analogFir.channel[14].rFir.n});
        res.insert_or_assign("top.analogFir.channel[14].rFir.s", DumpEntry{top.analogFir.channel[14].rFir.s});
        res.insert_or_assign("top.analogFir.channel[14].rFir.r", DumpEntry{top.analogFir.channel[14].rFir.r});
        res.insert_or_assign("top.analogFir.channel[14].rFir.tSc", DumpEntry{top.analogFir.channel[14].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].rFir.phase", DumpEntry{top.analogFir.channel[14].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[14].vFir.m", DumpEntry{top.analogFir.channel[14].vFir.m});
        res.insert_or_assign("top.analogFir.channel[14].vFir.n", DumpEntry{top.analogFir.channel[14].vFir.n});
        res.insert_or_assign("top.analogFir.channel[14].vFir.s", DumpEntry{top.analogFir.channel[14].vFir.s});
        res.insert_or_assign("top.analogFir.channel[14].vFir.r", DumpEntry{top.analogFir.channel[14].vFir.r});
        res.insert_or_assign("top.analogFir.channel[14].vFir.tSc", DumpEntry{top.analogFir.channel[14].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].vFir.phase", DumpEntry{top.analogFir.channel[14].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.m", DumpEntry{top.analogFir.channel[14].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.n", DumpEntry{top.analogFir.channel[14].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.s", DumpEntry{top.analogFir.channel[14].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.r", DumpEntry{top.analogFir.channel[14].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.tSc", DumpEntry{top.analogFir.channel[14].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[14].mmFir.phase", DumpEntry{top.analogFir.channel[14].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.maxLimit", DumpEntry{top.analogFir.channel[14].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.minLimit", DumpEntry{top.analogFir.channel[14].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[14].limit.filterLength", DumpEntry{top.analogFir.channel[14].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[15].rFir.m", DumpEntry{top.analogFir.channel[15].rFir.m});
        res.insert_or_assign("top.analogFir.channel[15].rFir.n", DumpEntry{top.analogFir.channel[15].rFir.n});
        res.insert_or_assign("top.analogFir.channel[15].rFir.s", DumpEntry{top.analogFir.channel[15].rFir.s});
        res.insert_or_assign("top.analogFir.channel[15].rFir.r", DumpEntry{top.analogFir.channel[15].rFir.r});
        res.insert_or_assign("top.analogFir.channel[15].rFir.tSc", DumpEntry{top.analogFir.channel[15].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].rFir.phase", DumpEntry{top.analogFir.channel[15].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[15].vFir.m", DumpEntry{top.analogFir.channel[15].vFir.m});
        res.insert_or_assign("top.analogFir.channel[15].vFir.n", DumpEntry{top.analogFir.channel[15].vFir.n});
        res.insert_or_assign("top.analogFir.channel[15].vFir.s", DumpEntry{top.analogFir.channel[15].vFir.s});
        res.insert_or_assign("top.analogFir.channel[15].vFir.r", DumpEntry{top.analogFir.channel[15].vFir.r});
        res.insert_or_assign("top.analogFir.channel[15].vFir.tSc", DumpEntry{top.analogFir.channel[15].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].vFir.phase", DumpEntry{top.analogFir.channel[15].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.m", DumpEntry{top.analogFir.channel[15].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.n", DumpEntry{top.analogFir.channel[15].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.s", DumpEntry{top.analogFir.channel[15].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.r", DumpEntry{top.analogFir.channel[15].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.tSc", DumpEntry{top.analogFir.channel[15].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[15].mmFir.phase", DumpEntry{top.analogFir.channel[15].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.maxLimit", DumpEntry{top.analogFir.channel[15].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.minLimit", DumpEntry{top.analogFir.channel[15].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[15].limit.filterLength", DumpEntry{top.analogFir.channel[15].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[16].rFir.m", DumpEntry{top.analogFir.channel[16].rFir.m});
        res.insert_or_assign("top.analogFir.channel[16].rFir.n", DumpEntry{top.analogFir.channel[16].rFir.n});
        res.insert_or_assign("top.analogFir.channel[16].rFir.s", DumpEntry{top.analogFir.channel[16].rFir.s});
        res.insert_or_assign("top.analogFir.channel[16].rFir.r", DumpEntry{top.analogFir.channel[16].rFir.r});
        res.insert_or_assign("top.analogFir.channel[16].rFir.tSc", DumpEntry{top.analogFir.channel[16].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].rFir.phase", DumpEntry{top.analogFir.channel[16].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[16].vFir.m", DumpEntry{top.analogFir.channel[16].vFir.m});
        res.insert_or_assign("top.analogFir.channel[16].vFir.n", DumpEntry{top.analogFir.channel[16].vFir.n});
        res.insert_or_assign("top.analogFir.channel[16].vFir.s", DumpEntry{top.analogFir.channel[16].vFir.s});
        res.insert_or_assign("top.analogFir.channel[16].vFir.r", DumpEntry{top.analogFir.channel[16].vFir.r});
        res.insert_or_assign("top.analogFir.channel[16].vFir.tSc", DumpEntry{top.analogFir.channel[16].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].vFir.phase", DumpEntry{top.analogFir.channel[16].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.m", DumpEntry{top.analogFir.channel[16].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.n", DumpEntry{top.analogFir.channel[16].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.s", DumpEntry{top.analogFir.channel[16].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.r", DumpEntry{top.analogFir.channel[16].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.tSc", DumpEntry{top.analogFir.channel[16].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[16].mmFir.phase", DumpEntry{top.analogFir.channel[16].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.maxLimit", DumpEntry{top.analogFir.channel[16].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.minLimit", DumpEntry{top.analogFir.channel[16].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[16].limit.filterLength", DumpEntry{top.analogFir.channel[16].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[17].rFir.m", DumpEntry{top.analogFir.channel[17].rFir.m});
        res.insert_or_assign("top.analogFir.channel[17].rFir.n", DumpEntry{top.analogFir.channel[17].rFir.n});
        res.insert_or_assign("top.analogFir.channel[17].rFir.s", DumpEntry{top.analogFir.channel[17].rFir.s});
        res.insert_or_assign("top.analogFir.channel[17].rFir.r", DumpEntry{top.analogFir.channel[17].rFir.r});
        res.insert_or_assign("top.analogFir.channel[17].rFir.tSc", DumpEntry{top.analogFir.channel[17].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].rFir.phase", DumpEntry{top.analogFir.channel[17].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[17].vFir.m", DumpEntry{top.analogFir.channel[17].vFir.m});
        res.insert_or_assign("top.analogFir.channel[17].vFir.n", DumpEntry{top.analogFir.channel[17].vFir.n});
        res.insert_or_assign("top.analogFir.channel[17].vFir.s", DumpEntry{top.analogFir.channel[17].vFir.s});
        res.insert_or_assign("top.analogFir.channel[17].vFir.r", DumpEntry{top.analogFir.channel[17].vFir.r});
        res.insert_or_assign("top.analogFir.channel[17].vFir.tSc", DumpEntry{top.analogFir.channel[17].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].vFir.phase", DumpEntry{top.analogFir.channel[17].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.m", DumpEntry{top.analogFir.channel[17].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.n", DumpEntry{top.analogFir.channel[17].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.s", DumpEntry{top.analogFir.channel[17].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.r", DumpEntry{top.analogFir.channel[17].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.tSc", DumpEntry{top.analogFir.channel[17].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[17].mmFir.phase", DumpEntry{top.analogFir.channel[17].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.maxLimit", DumpEntry{top.analogFir.channel[17].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.minLimit", DumpEntry{top.analogFir.channel[17].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[17].limit.filterLength", DumpEntry{top.analogFir.channel[17].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[18].rFir.m", DumpEntry{top.analogFir.channel[18].rFir.m});
        res.insert_or_assign("top.analogFir.channel[18].rFir.n", DumpEntry{top.analogFir.channel[18].rFir.n});
        res.insert_or_assign("top.analogFir.channel[18].rFir.s", DumpEntry{top.analogFir.channel[18].rFir.s});
        res.insert_or_assign("top.analogFir.channel[18].rFir.r", DumpEntry{top.analogFir.channel[18].rFir.r});
        res.insert_or_assign("top.analogFir.channel[18].rFir.tSc", DumpEntry{top.analogFir.channel[18].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].rFir.phase", DumpEntry{top.analogFir.channel[18].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[18].vFir.m", DumpEntry{top.analogFir.channel[18].vFir.m});
        res.insert_or_assign("top.analogFir.channel[18].vFir.n", DumpEntry{top.analogFir.channel[18].vFir.n});
        res.insert_or_assign("top.analogFir.channel[18].vFir.s", DumpEntry{top.analogFir.channel[18].vFir.s});
        res.insert_or_assign("top.analogFir.channel[18].vFir.r", DumpEntry{top.analogFir.channel[18].vFir.r});
        res.insert_or_assign("top.analogFir.channel[18].vFir.tSc", DumpEntry{top.analogFir.channel[18].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].vFir.phase", DumpEntry{top.analogFir.channel[18].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.m", DumpEntry{top.analogFir.channel[18].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.n", DumpEntry{top.analogFir.channel[18].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.s", DumpEntry{top.analogFir.channel[18].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.r", DumpEntry{top.analogFir.channel[18].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.tSc", DumpEntry{top.analogFir.channel[18].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[18].mmFir.phase", DumpEntry{top.analogFir.channel[18].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.maxLimit", DumpEntry{top.analogFir.channel[18].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.minLimit", DumpEntry{top.analogFir.channel[18].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[18].limit.filterLength", DumpEntry{top.analogFir.channel[18].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[19].rFir.m", DumpEntry{top.analogFir.channel[19].rFir.m});
        res.insert_or_assign("top.analogFir.channel[19].rFir.n", DumpEntry{top.analogFir.channel[19].rFir.n});
        res.insert_or_assign("top.analogFir.channel[19].rFir.s", DumpEntry{top.analogFir.channel[19].rFir.s});
        res.insert_or_assign("top.analogFir.channel[19].rFir.r", DumpEntry{top.analogFir.channel[19].rFir.r});
        res.insert_or_assign("top.analogFir.channel[19].rFir.tSc", DumpEntry{top.analogFir.channel[19].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].rFir.phase", DumpEntry{top.analogFir.channel[19].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[19].vFir.m", DumpEntry{top.analogFir.channel[19].vFir.m});
        res.insert_or_assign("top.analogFir.channel[19].vFir.n", DumpEntry{top.analogFir.channel[19].vFir.n});
        res.insert_or_assign("top.analogFir.channel[19].vFir.s", DumpEntry{top.analogFir.channel[19].vFir.s});
        res.insert_or_assign("top.analogFir.channel[19].vFir.r", DumpEntry{top.analogFir.channel[19].vFir.r});
        res.insert_or_assign("top.analogFir.channel[19].vFir.tSc", DumpEntry{top.analogFir.channel[19].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].vFir.phase", DumpEntry{top.analogFir.channel[19].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.m", DumpEntry{top.analogFir.channel[19].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.n", DumpEntry{top.analogFir.channel[19].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.s", DumpEntry{top.analogFir.channel[19].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.r", DumpEntry{top.analogFir.channel[19].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.tSc", DumpEntry{top.analogFir.channel[19].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[19].mmFir.phase", DumpEntry{top.analogFir.channel[19].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.maxLimit", DumpEntry{top.analogFir.channel[19].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.minLimit", DumpEntry{top.analogFir.channel[19].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[19].limit.filterLength", DumpEntry{top.analogFir.channel[19].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[20].rFir.m", DumpEntry{top.analogFir.channel[20].rFir.m});
        res.insert_or_assign("top.analogFir.channel[20].rFir.n", DumpEntry{top.analogFir.channel[20].rFir.n});
        res.insert_or_assign("top.analogFir.channel[20].rFir.s", DumpEntry{top.analogFir.channel[20].rFir.s});
        res.insert_or_assign("top.analogFir.channel[20].rFir.r", DumpEntry{top.analogFir.channel[20].rFir.r});
        res.insert_or_assign("top.analogFir.channel[20].rFir.tSc", DumpEntry{top.analogFir.channel[20].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].rFir.phase", DumpEntry{top.analogFir.channel[20].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[20].vFir.m", DumpEntry{top.analogFir.channel[20].vFir.m});
        res.insert_or_assign("top.analogFir.channel[20].vFir.n", DumpEntry{top.analogFir.channel[20].vFir.n});
        res.insert_or_assign("top.analogFir.channel[20].vFir.s", DumpEntry{top.analogFir.channel[20].vFir.s});
        res.insert_or_assign("top.analogFir.channel[20].vFir.r", DumpEntry{top.analogFir.channel[20].vFir.r});
        res.insert_or_assign("top.analogFir.channel[20].vFir.tSc", DumpEntry{top.analogFir.channel[20].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].vFir.phase", DumpEntry{top.analogFir.channel[20].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.m", DumpEntry{top.analogFir.channel[20].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.n", DumpEntry{top.analogFir.channel[20].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.s", DumpEntry{top.analogFir.channel[20].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.r", DumpEntry{top.analogFir.channel[20].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.tSc", DumpEntry{top.analogFir.channel[20].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[20].mmFir.phase", DumpEntry{top.analogFir.channel[20].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.maxLimit", DumpEntry{top.analogFir.channel[20].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.minLimit", DumpEntry{top.analogFir.channel[20].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[20].limit.filterLength", DumpEntry{top.analogFir.channel[20].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[21].rFir.m", DumpEntry{top.analogFir.channel[21].rFir.m});
        res.insert_or_assign("top.analogFir.channel[21].rFir.n", DumpEntry{top.analogFir.channel[21].rFir.n});
        res.insert_or_assign("top.analogFir.channel[21].rFir.s", DumpEntry{top.analogFir.channel[21].rFir.s});
        res.insert_or_assign("top.analogFir.channel[21].rFir.r", DumpEntry{top.analogFir.channel[21].rFir.r});
        res.insert_or_assign("top.analogFir.channel[21].rFir.tSc", DumpEntry{top.analogFir.channel[21].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].rFir.phase", DumpEntry{top.analogFir.channel[21].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[21].vFir.m", DumpEntry{top.analogFir.channel[21].vFir.m});
        res.insert_or_assign("top.analogFir.channel[21].vFir.n", DumpEntry{top.analogFir.channel[21].vFir.n});
        res.insert_or_assign("top.analogFir.channel[21].vFir.s", DumpEntry{top.analogFir.channel[21].vFir.s});
        res.insert_or_assign("top.analogFir.channel[21].vFir.r", DumpEntry{top.analogFir.channel[21].vFir.r});
        res.insert_or_assign("top.analogFir.channel[21].vFir.tSc", DumpEntry{top.analogFir.channel[21].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].vFir.phase", DumpEntry{top.analogFir.channel[21].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.m", DumpEntry{top.analogFir.channel[21].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.n", DumpEntry{top.analogFir.channel[21].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.s", DumpEntry{top.analogFir.channel[21].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.r", DumpEntry{top.analogFir.channel[21].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.tSc", DumpEntry{top.analogFir.channel[21].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[21].mmFir.phase", DumpEntry{top.analogFir.channel[21].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.maxLimit", DumpEntry{top.analogFir.channel[21].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.minLimit", DumpEntry{top.analogFir.channel[21].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[21].limit.filterLength", DumpEntry{top.analogFir.channel[21].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[22].rFir.m", DumpEntry{top.analogFir.channel[22].rFir.m});
        res.insert_or_assign("top.analogFir.channel[22].rFir.n", DumpEntry{top.analogFir.channel[22].rFir.n});
        res.insert_or_assign("top.analogFir.channel[22].rFir.s", DumpEntry{top.analogFir.channel[22].rFir.s});
        res.insert_or_assign("top.analogFir.channel[22].rFir.r", DumpEntry{top.analogFir.channel[22].rFir.r});
        res.insert_or_assign("top.analogFir.channel[22].rFir.tSc", DumpEntry{top.analogFir.channel[22].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].rFir.phase", DumpEntry{top.analogFir.channel[22].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[22].vFir.m", DumpEntry{top.analogFir.channel[22].vFir.m});
        res.insert_or_assign("top.analogFir.channel[22].vFir.n", DumpEntry{top.analogFir.channel[22].vFir.n});
        res.insert_or_assign("top.analogFir.channel[22].vFir.s", DumpEntry{top.analogFir.channel[22].vFir.s});
        res.insert_or_assign("top.analogFir.channel[22].vFir.r", DumpEntry{top.analogFir.channel[22].vFir.r});
        res.insert_or_assign("top.analogFir.channel[22].vFir.tSc", DumpEntry{top.analogFir.channel[22].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].vFir.phase", DumpEntry{top.analogFir.channel[22].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.m", DumpEntry{top.analogFir.channel[22].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.n", DumpEntry{top.analogFir.channel[22].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.s", DumpEntry{top.analogFir.channel[22].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.r", DumpEntry{top.analogFir.channel[22].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.tSc", DumpEntry{top.analogFir.channel[22].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[22].mmFir.phase", DumpEntry{top.analogFir.channel[22].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.maxLimit", DumpEntry{top.analogFir.channel[22].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.minLimit", DumpEntry{top.analogFir.channel[22].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[22].limit.filterLength", DumpEntry{top.analogFir.channel[22].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[23].rFir.m", DumpEntry{top.analogFir.channel[23].rFir.m});
        res.insert_or_assign("top.analogFir.channel[23].rFir.n", DumpEntry{top.analogFir.channel[23].rFir.n});
        res.insert_or_assign("top.analogFir.channel[23].rFir.s", DumpEntry{top.analogFir.channel[23].rFir.s});
        res.insert_or_assign("top.analogFir.channel[23].rFir.r", DumpEntry{top.analogFir.channel[23].rFir.r});
        res.insert_or_assign("top.analogFir.channel[23].rFir.tSc", DumpEntry{top.analogFir.channel[23].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].rFir.phase", DumpEntry{top.analogFir.channel[23].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[23].vFir.m", DumpEntry{top.analogFir.channel[23].vFir.m});
        res.insert_or_assign("top.analogFir.channel[23].vFir.n", DumpEntry{top.analogFir.channel[23].vFir.n});
        res.insert_or_assign("top.analogFir.channel[23].vFir.s", DumpEntry{top.analogFir.channel[23].vFir.s});
        res.insert_or_assign("top.analogFir.channel[23].vFir.r", DumpEntry{top.analogFir.channel[23].vFir.r});
        res.insert_or_assign("top.analogFir.channel[23].vFir.tSc", DumpEntry{top.analogFir.channel[23].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].vFir.phase", DumpEntry{top.analogFir.channel[23].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.m", DumpEntry{top.analogFir.channel[23].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.n", DumpEntry{top.analogFir.channel[23].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.s", DumpEntry{top.analogFir.channel[23].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.r", DumpEntry{top.analogFir.channel[23].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.tSc", DumpEntry{top.analogFir.channel[23].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[23].mmFir.phase", DumpEntry{top.analogFir.channel[23].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.maxLimit", DumpEntry{top.analogFir.channel[23].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.minLimit", DumpEntry{top.analogFir.channel[23].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[23].limit.filterLength", DumpEntry{top.analogFir.channel[23].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[24].rFir.m", DumpEntry{top.analogFir.channel[24].rFir.m});
        res.insert_or_assign("top.analogFir.channel[24].rFir.n", DumpEntry{top.analogFir.channel[24].rFir.n});
        res.insert_or_assign("top.analogFir.channel[24].rFir.s", DumpEntry{top.analogFir.channel[24].rFir.s});
        res.insert_or_assign("top.analogFir.channel[24].rFir.r", DumpEntry{top.analogFir.channel[24].rFir.r});
        res.insert_or_assign("top.analogFir.channel[24].rFir.tSc", DumpEntry{top.analogFir.channel[24].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].rFir.phase", DumpEntry{top.analogFir.channel[24].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[24].vFir.m", DumpEntry{top.analogFir.channel[24].vFir.m});
        res.insert_or_assign("top.analogFir.channel[24].vFir.n", DumpEntry{top.analogFir.channel[24].vFir.n});
        res.insert_or_assign("top.analogFir.channel[24].vFir.s", DumpEntry{top.analogFir.channel[24].vFir.s});
        res.insert_or_assign("top.analogFir.channel[24].vFir.r", DumpEntry{top.analogFir.channel[24].vFir.r});
        res.insert_or_assign("top.analogFir.channel[24].vFir.tSc", DumpEntry{top.analogFir.channel[24].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].vFir.phase", DumpEntry{top.analogFir.channel[24].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.m", DumpEntry{top.analogFir.channel[24].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.n", DumpEntry{top.analogFir.channel[24].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.s", DumpEntry{top.analogFir.channel[24].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.r", DumpEntry{top.analogFir.channel[24].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.tSc", DumpEntry{top.analogFir.channel[24].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[24].mmFir.phase", DumpEntry{top.analogFir.channel[24].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.maxLimit", DumpEntry{top.analogFir.channel[24].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.minLimit", DumpEntry{top.analogFir.channel[24].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[24].limit.filterLength", DumpEntry{top.analogFir.channel[24].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[25].rFir.m", DumpEntry{top.analogFir.channel[25].rFir.m});
        res.insert_or_assign("top.analogFir.channel[25].rFir.n", DumpEntry{top.analogFir.channel[25].rFir.n});
        res.insert_or_assign("top.analogFir.channel[25].rFir.s", DumpEntry{top.analogFir.channel[25].rFir.s});
        res.insert_or_assign("top.analogFir.channel[25].rFir.r", DumpEntry{top.analogFir.channel[25].rFir.r});
        res.insert_or_assign("top.analogFir.channel[25].rFir.tSc", DumpEntry{top.analogFir.channel[25].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].rFir.phase", DumpEntry{top.analogFir.channel[25].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[25].vFir.m", DumpEntry{top.analogFir.channel[25].vFir.m});
        res.insert_or_assign("top.analogFir.channel[25].vFir.n", DumpEntry{top.analogFir.channel[25].vFir.n});
        res.insert_or_assign("top.analogFir.channel[25].vFir.s", DumpEntry{top.analogFir.channel[25].vFir.s});
        res.insert_or_assign("top.analogFir.channel[25].vFir.r", DumpEntry{top.analogFir.channel[25].vFir.r});
        res.insert_or_assign("top.analogFir.channel[25].vFir.tSc", DumpEntry{top.analogFir.channel[25].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].vFir.phase", DumpEntry{top.analogFir.channel[25].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.m", DumpEntry{top.analogFir.channel[25].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.n", DumpEntry{top.analogFir.channel[25].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.s", DumpEntry{top.analogFir.channel[25].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.r", DumpEntry{top.analogFir.channel[25].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.tSc", DumpEntry{top.analogFir.channel[25].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[25].mmFir.phase", DumpEntry{top.analogFir.channel[25].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.maxLimit", DumpEntry{top.analogFir.channel[25].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.minLimit", DumpEntry{top.analogFir.channel[25].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[25].limit.filterLength", DumpEntry{top.analogFir.channel[25].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[26].rFir.m", DumpEntry{top.analogFir.channel[26].rFir.m});
        res.insert_or_assign("top.analogFir.channel[26].rFir.n", DumpEntry{top.analogFir.channel[26].rFir.n});
        res.insert_or_assign("top.analogFir.channel[26].rFir.s", DumpEntry{top.analogFir.channel[26].rFir.s});
        res.insert_or_assign("top.analogFir.channel[26].rFir.r", DumpEntry{top.analogFir.channel[26].rFir.r});
        res.insert_or_assign("top.analogFir.channel[26].rFir.tSc", DumpEntry{top.analogFir.channel[26].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].rFir.phase", DumpEntry{top.analogFir.channel[26].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[26].vFir.m", DumpEntry{top.analogFir.channel[26].vFir.m});
        res.insert_or_assign("top.analogFir.channel[26].vFir.n", DumpEntry{top.analogFir.channel[26].vFir.n});
        res.insert_or_assign("top.analogFir.channel[26].vFir.s", DumpEntry{top.analogFir.channel[26].vFir.s});
        res.insert_or_assign("top.analogFir.channel[26].vFir.r", DumpEntry{top.analogFir.channel[26].vFir.r});
        res.insert_or_assign("top.analogFir.channel[26].vFir.tSc", DumpEntry{top.analogFir.channel[26].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].vFir.phase", DumpEntry{top.analogFir.channel[26].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.m", DumpEntry{top.analogFir.channel[26].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.n", DumpEntry{top.analogFir.channel[26].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.s", DumpEntry{top.analogFir.channel[26].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.r", DumpEntry{top.analogFir.channel[26].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.tSc", DumpEntry{top.analogFir.channel[26].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[26].mmFir.phase", DumpEntry{top.analogFir.channel[26].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.maxLimit", DumpEntry{top.analogFir.channel[26].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.minLimit", DumpEntry{top.analogFir.channel[26].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[26].limit.filterLength", DumpEntry{top.analogFir.channel[26].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[27].rFir.m", DumpEntry{top.analogFir.channel[27].rFir.m});
        res.insert_or_assign("top.analogFir.channel[27].rFir.n", DumpEntry{top.analogFir.channel[27].rFir.n});
        res.insert_or_assign("top.analogFir.channel[27].rFir.s", DumpEntry{top.analogFir.channel[27].rFir.s});
        res.insert_or_assign("top.analogFir.channel[27].rFir.r", DumpEntry{top.analogFir.channel[27].rFir.r});
        res.insert_or_assign("top.analogFir.channel[27].rFir.tSc", DumpEntry{top.analogFir.channel[27].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].rFir.phase", DumpEntry{top.analogFir.channel[27].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[27].vFir.m", DumpEntry{top.analogFir.channel[27].vFir.m});
        res.insert_or_assign("top.analogFir.channel[27].vFir.n", DumpEntry{top.analogFir.channel[27].vFir.n});
        res.insert_or_assign("top.analogFir.channel[27].vFir.s", DumpEntry{top.analogFir.channel[27].vFir.s});
        res.insert_or_assign("top.analogFir.channel[27].vFir.r", DumpEntry{top.analogFir.channel[27].vFir.r});
        res.insert_or_assign("top.analogFir.channel[27].vFir.tSc", DumpEntry{top.analogFir.channel[27].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].vFir.phase", DumpEntry{top.analogFir.channel[27].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.m", DumpEntry{top.analogFir.channel[27].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.n", DumpEntry{top.analogFir.channel[27].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.s", DumpEntry{top.analogFir.channel[27].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.r", DumpEntry{top.analogFir.channel[27].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.tSc", DumpEntry{top.analogFir.channel[27].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[27].mmFir.phase", DumpEntry{top.analogFir.channel[27].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.maxLimit", DumpEntry{top.analogFir.channel[27].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.minLimit", DumpEntry{top.analogFir.channel[27].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[27].limit.filterLength", DumpEntry{top.analogFir.channel[27].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[28].rFir.m", DumpEntry{top.analogFir.channel[28].rFir.m});
        res.insert_or_assign("top.analogFir.channel[28].rFir.n", DumpEntry{top.analogFir.channel[28].rFir.n});
        res.insert_or_assign("top.analogFir.channel[28].rFir.s", DumpEntry{top.analogFir.channel[28].rFir.s});
        res.insert_or_assign("top.analogFir.channel[28].rFir.r", DumpEntry{top.analogFir.channel[28].rFir.r});
        res.insert_or_assign("top.analogFir.channel[28].rFir.tSc", DumpEntry{top.analogFir.channel[28].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].rFir.phase", DumpEntry{top.analogFir.channel[28].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[28].vFir.m", DumpEntry{top.analogFir.channel[28].vFir.m});
        res.insert_or_assign("top.analogFir.channel[28].vFir.n", DumpEntry{top.analogFir.channel[28].vFir.n});
        res.insert_or_assign("top.analogFir.channel[28].vFir.s", DumpEntry{top.analogFir.channel[28].vFir.s});
        res.insert_or_assign("top.analogFir.channel[28].vFir.r", DumpEntry{top.analogFir.channel[28].vFir.r});
        res.insert_or_assign("top.analogFir.channel[28].vFir.tSc", DumpEntry{top.analogFir.channel[28].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].vFir.phase", DumpEntry{top.analogFir.channel[28].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.m", DumpEntry{top.analogFir.channel[28].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.n", DumpEntry{top.analogFir.channel[28].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.s", DumpEntry{top.analogFir.channel[28].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.r", DumpEntry{top.analogFir.channel[28].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.tSc", DumpEntry{top.analogFir.channel[28].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[28].mmFir.phase", DumpEntry{top.analogFir.channel[28].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.maxLimit", DumpEntry{top.analogFir.channel[28].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.minLimit", DumpEntry{top.analogFir.channel[28].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[28].limit.filterLength", DumpEntry{top.analogFir.channel[28].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[29].rFir.m", DumpEntry{top.analogFir.channel[29].rFir.m});
        res.insert_or_assign("top.analogFir.channel[29].rFir.n", DumpEntry{top.analogFir.channel[29].rFir.n});
        res.insert_or_assign("top.analogFir.channel[29].rFir.s", DumpEntry{top.analogFir.channel[29].rFir.s});
        res.insert_or_assign("top.analogFir.channel[29].rFir.r", DumpEntry{top.analogFir.channel[29].rFir.r});
        res.insert_or_assign("top.analogFir.channel[29].rFir.tSc", DumpEntry{top.analogFir.channel[29].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].rFir.phase", DumpEntry{top.analogFir.channel[29].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[29].vFir.m", DumpEntry{top.analogFir.channel[29].vFir.m});
        res.insert_or_assign("top.analogFir.channel[29].vFir.n", DumpEntry{top.analogFir.channel[29].vFir.n});
        res.insert_or_assign("top.analogFir.channel[29].vFir.s", DumpEntry{top.analogFir.channel[29].vFir.s});
        res.insert_or_assign("top.analogFir.channel[29].vFir.r", DumpEntry{top.analogFir.channel[29].vFir.r});
        res.insert_or_assign("top.analogFir.channel[29].vFir.tSc", DumpEntry{top.analogFir.channel[29].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].vFir.phase", DumpEntry{top.analogFir.channel[29].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.m", DumpEntry{top.analogFir.channel[29].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.n", DumpEntry{top.analogFir.channel[29].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.s", DumpEntry{top.analogFir.channel[29].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.r", DumpEntry{top.analogFir.channel[29].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.tSc", DumpEntry{top.analogFir.channel[29].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[29].mmFir.phase", DumpEntry{top.analogFir.channel[29].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.maxLimit", DumpEntry{top.analogFir.channel[29].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.minLimit", DumpEntry{top.analogFir.channel[29].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[29].limit.filterLength", DumpEntry{top.analogFir.channel[29].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[30].rFir.m", DumpEntry{top.analogFir.channel[30].rFir.m});
        res.insert_or_assign("top.analogFir.channel[30].rFir.n", DumpEntry{top.analogFir.channel[30].rFir.n});
        res.insert_or_assign("top.analogFir.channel[30].rFir.s", DumpEntry{top.analogFir.channel[30].rFir.s});
        res.insert_or_assign("top.analogFir.channel[30].rFir.r", DumpEntry{top.analogFir.channel[30].rFir.r});
        res.insert_or_assign("top.analogFir.channel[30].rFir.tSc", DumpEntry{top.analogFir.channel[30].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].rFir.phase", DumpEntry{top.analogFir.channel[30].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[30].vFir.m", DumpEntry{top.analogFir.channel[30].vFir.m});
        res.insert_or_assign("top.analogFir.channel[30].vFir.n", DumpEntry{top.analogFir.channel[30].vFir.n});
        res.insert_or_assign("top.analogFir.channel[30].vFir.s", DumpEntry{top.analogFir.channel[30].vFir.s});
        res.insert_or_assign("top.analogFir.channel[30].vFir.r", DumpEntry{top.analogFir.channel[30].vFir.r});
        res.insert_or_assign("top.analogFir.channel[30].vFir.tSc", DumpEntry{top.analogFir.channel[30].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].vFir.phase", DumpEntry{top.analogFir.channel[30].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.m", DumpEntry{top.analogFir.channel[30].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.n", DumpEntry{top.analogFir.channel[30].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.s", DumpEntry{top.analogFir.channel[30].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.r", DumpEntry{top.analogFir.channel[30].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.tSc", DumpEntry{top.analogFir.channel[30].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[30].mmFir.phase", DumpEntry{top.analogFir.channel[30].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.maxLimit", DumpEntry{top.analogFir.channel[30].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.minLimit", DumpEntry{top.analogFir.channel[30].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[30].limit.filterLength", DumpEntry{top.analogFir.channel[30].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[31].rFir.m", DumpEntry{top.analogFir.channel[31].rFir.m});
        res.insert_or_assign("top.analogFir.channel[31].rFir.n", DumpEntry{top.analogFir.channel[31].rFir.n});
        res.insert_or_assign("top.analogFir.channel[31].rFir.s", DumpEntry{top.analogFir.channel[31].rFir.s});
        res.insert_or_assign("top.analogFir.channel[31].rFir.r", DumpEntry{top.analogFir.channel[31].rFir.r});
        res.insert_or_assign("top.analogFir.channel[31].rFir.tSc", DumpEntry{top.analogFir.channel[31].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].rFir.phase", DumpEntry{top.analogFir.channel[31].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[31].vFir.m", DumpEntry{top.analogFir.channel[31].vFir.m});
        res.insert_or_assign("top.analogFir.channel[31].vFir.n", DumpEntry{top.analogFir.channel[31].vFir.n});
        res.insert_or_assign("top.analogFir.channel[31].vFir.s", DumpEntry{top.analogFir.channel[31].vFir.s});
        res.insert_or_assign("top.analogFir.channel[31].vFir.r", DumpEntry{top.analogFir.channel[31].vFir.r});
        res.insert_or_assign("top.analogFir.channel[31].vFir.tSc", DumpEntry{top.analogFir.channel[31].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].vFir.phase", DumpEntry{top.analogFir.channel[31].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.m", DumpEntry{top.analogFir.channel[31].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.n", DumpEntry{top.analogFir.channel[31].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.s", DumpEntry{top.analogFir.channel[31].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.r", DumpEntry{top.analogFir.channel[31].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.tSc", DumpEntry{top.analogFir.channel[31].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[31].mmFir.phase", DumpEntry{top.analogFir.channel[31].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.maxLimit", DumpEntry{top.analogFir.channel[31].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.minLimit", DumpEntry{top.analogFir.channel[31].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[31].limit.filterLength", DumpEntry{top.analogFir.channel[31].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[32].rFir.m", DumpEntry{top.analogFir.channel[32].rFir.m});
        res.insert_or_assign("top.analogFir.channel[32].rFir.n", DumpEntry{top.analogFir.channel[32].rFir.n});
        res.insert_or_assign("top.analogFir.channel[32].rFir.s", DumpEntry{top.analogFir.channel[32].rFir.s});
        res.insert_or_assign("top.analogFir.channel[32].rFir.r", DumpEntry{top.analogFir.channel[32].rFir.r});
        res.insert_or_assign("top.analogFir.channel[32].rFir.tSc", DumpEntry{top.analogFir.channel[32].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].rFir.phase", DumpEntry{top.analogFir.channel[32].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[32].vFir.m", DumpEntry{top.analogFir.channel[32].vFir.m});
        res.insert_or_assign("top.analogFir.channel[32].vFir.n", DumpEntry{top.analogFir.channel[32].vFir.n});
        res.insert_or_assign("top.analogFir.channel[32].vFir.s", DumpEntry{top.analogFir.channel[32].vFir.s});
        res.insert_or_assign("top.analogFir.channel[32].vFir.r", DumpEntry{top.analogFir.channel[32].vFir.r});
        res.insert_or_assign("top.analogFir.channel[32].vFir.tSc", DumpEntry{top.analogFir.channel[32].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].vFir.phase", DumpEntry{top.analogFir.channel[32].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.m", DumpEntry{top.analogFir.channel[32].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.n", DumpEntry{top.analogFir.channel[32].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.s", DumpEntry{top.analogFir.channel[32].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.r", DumpEntry{top.analogFir.channel[32].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.tSc", DumpEntry{top.analogFir.channel[32].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[32].mmFir.phase", DumpEntry{top.analogFir.channel[32].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.maxLimit", DumpEntry{top.analogFir.channel[32].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.minLimit", DumpEntry{top.analogFir.channel[32].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[32].limit.filterLength", DumpEntry{top.analogFir.channel[32].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[33].rFir.m", DumpEntry{top.analogFir.channel[33].rFir.m});
        res.insert_or_assign("top.analogFir.channel[33].rFir.n", DumpEntry{top.analogFir.channel[33].rFir.n});
        res.insert_or_assign("top.analogFir.channel[33].rFir.s", DumpEntry{top.analogFir.channel[33].rFir.s});
        res.insert_or_assign("top.analogFir.channel[33].rFir.r", DumpEntry{top.analogFir.channel[33].rFir.r});
        res.insert_or_assign("top.analogFir.channel[33].rFir.tSc", DumpEntry{top.analogFir.channel[33].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].rFir.phase", DumpEntry{top.analogFir.channel[33].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[33].vFir.m", DumpEntry{top.analogFir.channel[33].vFir.m});
        res.insert_or_assign("top.analogFir.channel[33].vFir.n", DumpEntry{top.analogFir.channel[33].vFir.n});
        res.insert_or_assign("top.analogFir.channel[33].vFir.s", DumpEntry{top.analogFir.channel[33].vFir.s});
        res.insert_or_assign("top.analogFir.channel[33].vFir.r", DumpEntry{top.analogFir.channel[33].vFir.r});
        res.insert_or_assign("top.analogFir.channel[33].vFir.tSc", DumpEntry{top.analogFir.channel[33].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].vFir.phase", DumpEntry{top.analogFir.channel[33].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.m", DumpEntry{top.analogFir.channel[33].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.n", DumpEntry{top.analogFir.channel[33].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.s", DumpEntry{top.analogFir.channel[33].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.r", DumpEntry{top.analogFir.channel[33].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.tSc", DumpEntry{top.analogFir.channel[33].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[33].mmFir.phase", DumpEntry{top.analogFir.channel[33].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.maxLimit", DumpEntry{top.analogFir.channel[33].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.minLimit", DumpEntry{top.analogFir.channel[33].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[33].limit.filterLength", DumpEntry{top.analogFir.channel[33].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[34].rFir.m", DumpEntry{top.analogFir.channel[34].rFir.m});
        res.insert_or_assign("top.analogFir.channel[34].rFir.n", DumpEntry{top.analogFir.channel[34].rFir.n});
        res.insert_or_assign("top.analogFir.channel[34].rFir.s", DumpEntry{top.analogFir.channel[34].rFir.s});
        res.insert_or_assign("top.analogFir.channel[34].rFir.r", DumpEntry{top.analogFir.channel[34].rFir.r});
        res.insert_or_assign("top.analogFir.channel[34].rFir.tSc", DumpEntry{top.analogFir.channel[34].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].rFir.phase", DumpEntry{top.analogFir.channel[34].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[34].vFir.m", DumpEntry{top.analogFir.channel[34].vFir.m});
        res.insert_or_assign("top.analogFir.channel[34].vFir.n", DumpEntry{top.analogFir.channel[34].vFir.n});
        res.insert_or_assign("top.analogFir.channel[34].vFir.s", DumpEntry{top.analogFir.channel[34].vFir.s});
        res.insert_or_assign("top.analogFir.channel[34].vFir.r", DumpEntry{top.analogFir.channel[34].vFir.r});
        res.insert_or_assign("top.analogFir.channel[34].vFir.tSc", DumpEntry{top.analogFir.channel[34].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].vFir.phase", DumpEntry{top.analogFir.channel[34].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.m", DumpEntry{top.analogFir.channel[34].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.n", DumpEntry{top.analogFir.channel[34].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.s", DumpEntry{top.analogFir.channel[34].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.r", DumpEntry{top.analogFir.channel[34].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.tSc", DumpEntry{top.analogFir.channel[34].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[34].mmFir.phase", DumpEntry{top.analogFir.channel[34].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.maxLimit", DumpEntry{top.analogFir.channel[34].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.minLimit", DumpEntry{top.analogFir.channel[34].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[34].limit.filterLength", DumpEntry{top.analogFir.channel[34].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[35].rFir.m", DumpEntry{top.analogFir.channel[35].rFir.m});
        res.insert_or_assign("top.analogFir.channel[35].rFir.n", DumpEntry{top.analogFir.channel[35].rFir.n});
        res.insert_or_assign("top.analogFir.channel[35].rFir.s", DumpEntry{top.analogFir.channel[35].rFir.s});
        res.insert_or_assign("top.analogFir.channel[35].rFir.r", DumpEntry{top.analogFir.channel[35].rFir.r});
        res.insert_or_assign("top.analogFir.channel[35].rFir.tSc", DumpEntry{top.analogFir.channel[35].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].rFir.phase", DumpEntry{top.analogFir.channel[35].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[35].vFir.m", DumpEntry{top.analogFir.channel[35].vFir.m});
        res.insert_or_assign("top.analogFir.channel[35].vFir.n", DumpEntry{top.analogFir.channel[35].vFir.n});
        res.insert_or_assign("top.analogFir.channel[35].vFir.s", DumpEntry{top.analogFir.channel[35].vFir.s});
        res.insert_or_assign("top.analogFir.channel[35].vFir.r", DumpEntry{top.analogFir.channel[35].vFir.r});
        res.insert_or_assign("top.analogFir.channel[35].vFir.tSc", DumpEntry{top.analogFir.channel[35].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].vFir.phase", DumpEntry{top.analogFir.channel[35].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.m", DumpEntry{top.analogFir.channel[35].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.n", DumpEntry{top.analogFir.channel[35].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.s", DumpEntry{top.analogFir.channel[35].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.r", DumpEntry{top.analogFir.channel[35].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.tSc", DumpEntry{top.analogFir.channel[35].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[35].mmFir.phase", DumpEntry{top.analogFir.channel[35].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.maxLimit", DumpEntry{top.analogFir.channel[35].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.minLimit", DumpEntry{top.analogFir.channel[35].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[35].limit.filterLength", DumpEntry{top.analogFir.channel[35].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[36].rFir.m", DumpEntry{top.analogFir.channel[36].rFir.m});
        res.insert_or_assign("top.analogFir.channel[36].rFir.n", DumpEntry{top.analogFir.channel[36].rFir.n});
        res.insert_or_assign("top.analogFir.channel[36].rFir.s", DumpEntry{top.analogFir.channel[36].rFir.s});
        res.insert_or_assign("top.analogFir.channel[36].rFir.r", DumpEntry{top.analogFir.channel[36].rFir.r});
        res.insert_or_assign("top.analogFir.channel[36].rFir.tSc", DumpEntry{top.analogFir.channel[36].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].rFir.phase", DumpEntry{top.analogFir.channel[36].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[36].vFir.m", DumpEntry{top.analogFir.channel[36].vFir.m});
        res.insert_or_assign("top.analogFir.channel[36].vFir.n", DumpEntry{top.analogFir.channel[36].vFir.n});
        res.insert_or_assign("top.analogFir.channel[36].vFir.s", DumpEntry{top.analogFir.channel[36].vFir.s});
        res.insert_or_assign("top.analogFir.channel[36].vFir.r", DumpEntry{top.analogFir.channel[36].vFir.r});
        res.insert_or_assign("top.analogFir.channel[36].vFir.tSc", DumpEntry{top.analogFir.channel[36].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].vFir.phase", DumpEntry{top.analogFir.channel[36].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.m", DumpEntry{top.analogFir.channel[36].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.n", DumpEntry{top.analogFir.channel[36].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.s", DumpEntry{top.analogFir.channel[36].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.r", DumpEntry{top.analogFir.channel[36].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.tSc", DumpEntry{top.analogFir.channel[36].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[36].mmFir.phase", DumpEntry{top.analogFir.channel[36].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.maxLimit", DumpEntry{top.analogFir.channel[36].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.minLimit", DumpEntry{top.analogFir.channel[36].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[36].limit.filterLength", DumpEntry{top.analogFir.channel[36].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[37].rFir.m", DumpEntry{top.analogFir.channel[37].rFir.m});
        res.insert_or_assign("top.analogFir.channel[37].rFir.n", DumpEntry{top.analogFir.channel[37].rFir.n});
        res.insert_or_assign("top.analogFir.channel[37].rFir.s", DumpEntry{top.analogFir.channel[37].rFir.s});
        res.insert_or_assign("top.analogFir.channel[37].rFir.r", DumpEntry{top.analogFir.channel[37].rFir.r});
        res.insert_or_assign("top.analogFir.channel[37].rFir.tSc", DumpEntry{top.analogFir.channel[37].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].rFir.phase", DumpEntry{top.analogFir.channel[37].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[37].vFir.m", DumpEntry{top.analogFir.channel[37].vFir.m});
        res.insert_or_assign("top.analogFir.channel[37].vFir.n", DumpEntry{top.analogFir.channel[37].vFir.n});
        res.insert_or_assign("top.analogFir.channel[37].vFir.s", DumpEntry{top.analogFir.channel[37].vFir.s});
        res.insert_or_assign("top.analogFir.channel[37].vFir.r", DumpEntry{top.analogFir.channel[37].vFir.r});
        res.insert_or_assign("top.analogFir.channel[37].vFir.tSc", DumpEntry{top.analogFir.channel[37].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].vFir.phase", DumpEntry{top.analogFir.channel[37].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.m", DumpEntry{top.analogFir.channel[37].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.n", DumpEntry{top.analogFir.channel[37].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.s", DumpEntry{top.analogFir.channel[37].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.r", DumpEntry{top.analogFir.channel[37].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.tSc", DumpEntry{top.analogFir.channel[37].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[37].mmFir.phase", DumpEntry{top.analogFir.channel[37].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.maxLimit", DumpEntry{top.analogFir.channel[37].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.minLimit", DumpEntry{top.analogFir.channel[37].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[37].limit.filterLength", DumpEntry{top.analogFir.channel[37].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[38].rFir.m", DumpEntry{top.analogFir.channel[38].rFir.m});
        res.insert_or_assign("top.analogFir.channel[38].rFir.n", DumpEntry{top.analogFir.channel[38].rFir.n});
        res.insert_or_assign("top.analogFir.channel[38].rFir.s", DumpEntry{top.analogFir.channel[38].rFir.s});
        res.insert_or_assign("top.analogFir.channel[38].rFir.r", DumpEntry{top.analogFir.channel[38].rFir.r});
        res.insert_or_assign("top.analogFir.channel[38].rFir.tSc", DumpEntry{top.analogFir.channel[38].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].rFir.phase", DumpEntry{top.analogFir.channel[38].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[38].vFir.m", DumpEntry{top.analogFir.channel[38].vFir.m});
        res.insert_or_assign("top.analogFir.channel[38].vFir.n", DumpEntry{top.analogFir.channel[38].vFir.n});
        res.insert_or_assign("top.analogFir.channel[38].vFir.s", DumpEntry{top.analogFir.channel[38].vFir.s});
        res.insert_or_assign("top.analogFir.channel[38].vFir.r", DumpEntry{top.analogFir.channel[38].vFir.r});
        res.insert_or_assign("top.analogFir.channel[38].vFir.tSc", DumpEntry{top.analogFir.channel[38].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].vFir.phase", DumpEntry{top.analogFir.channel[38].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.m", DumpEntry{top.analogFir.channel[38].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.n", DumpEntry{top.analogFir.channel[38].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.s", DumpEntry{top.analogFir.channel[38].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.r", DumpEntry{top.analogFir.channel[38].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.tSc", DumpEntry{top.analogFir.channel[38].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[38].mmFir.phase", DumpEntry{top.analogFir.channel[38].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.maxLimit", DumpEntry{top.analogFir.channel[38].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.minLimit", DumpEntry{top.analogFir.channel[38].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[38].limit.filterLength", DumpEntry{top.analogFir.channel[38].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[39].rFir.m", DumpEntry{top.analogFir.channel[39].rFir.m});
        res.insert_or_assign("top.analogFir.channel[39].rFir.n", DumpEntry{top.analogFir.channel[39].rFir.n});
        res.insert_or_assign("top.analogFir.channel[39].rFir.s", DumpEntry{top.analogFir.channel[39].rFir.s});
        res.insert_or_assign("top.analogFir.channel[39].rFir.r", DumpEntry{top.analogFir.channel[39].rFir.r});
        res.insert_or_assign("top.analogFir.channel[39].rFir.tSc", DumpEntry{top.analogFir.channel[39].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].rFir.phase", DumpEntry{top.analogFir.channel[39].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[39].vFir.m", DumpEntry{top.analogFir.channel[39].vFir.m});
        res.insert_or_assign("top.analogFir.channel[39].vFir.n", DumpEntry{top.analogFir.channel[39].vFir.n});
        res.insert_or_assign("top.analogFir.channel[39].vFir.s", DumpEntry{top.analogFir.channel[39].vFir.s});
        res.insert_or_assign("top.analogFir.channel[39].vFir.r", DumpEntry{top.analogFir.channel[39].vFir.r});
        res.insert_or_assign("top.analogFir.channel[39].vFir.tSc", DumpEntry{top.analogFir.channel[39].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].vFir.phase", DumpEntry{top.analogFir.channel[39].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.m", DumpEntry{top.analogFir.channel[39].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.n", DumpEntry{top.analogFir.channel[39].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.s", DumpEntry{top.analogFir.channel[39].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.r", DumpEntry{top.analogFir.channel[39].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.tSc", DumpEntry{top.analogFir.channel[39].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[39].mmFir.phase", DumpEntry{top.analogFir.channel[39].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.maxLimit", DumpEntry{top.analogFir.channel[39].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.minLimit", DumpEntry{top.analogFir.channel[39].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[39].limit.filterLength", DumpEntry{top.analogFir.channel[39].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[40].rFir.m", DumpEntry{top.analogFir.channel[40].rFir.m});
        res.insert_or_assign("top.analogFir.channel[40].rFir.n", DumpEntry{top.analogFir.channel[40].rFir.n});
        res.insert_or_assign("top.analogFir.channel[40].rFir.s", DumpEntry{top.analogFir.channel[40].rFir.s});
        res.insert_or_assign("top.analogFir.channel[40].rFir.r", DumpEntry{top.analogFir.channel[40].rFir.r});
        res.insert_or_assign("top.analogFir.channel[40].rFir.tSc", DumpEntry{top.analogFir.channel[40].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].rFir.phase", DumpEntry{top.analogFir.channel[40].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[40].vFir.m", DumpEntry{top.analogFir.channel[40].vFir.m});
        res.insert_or_assign("top.analogFir.channel[40].vFir.n", DumpEntry{top.analogFir.channel[40].vFir.n});
        res.insert_or_assign("top.analogFir.channel[40].vFir.s", DumpEntry{top.analogFir.channel[40].vFir.s});
        res.insert_or_assign("top.analogFir.channel[40].vFir.r", DumpEntry{top.analogFir.channel[40].vFir.r});
        res.insert_or_assign("top.analogFir.channel[40].vFir.tSc", DumpEntry{top.analogFir.channel[40].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].vFir.phase", DumpEntry{top.analogFir.channel[40].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.m", DumpEntry{top.analogFir.channel[40].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.n", DumpEntry{top.analogFir.channel[40].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.s", DumpEntry{top.analogFir.channel[40].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.r", DumpEntry{top.analogFir.channel[40].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.tSc", DumpEntry{top.analogFir.channel[40].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[40].mmFir.phase", DumpEntry{top.analogFir.channel[40].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.maxLimit", DumpEntry{top.analogFir.channel[40].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.minLimit", DumpEntry{top.analogFir.channel[40].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[40].limit.filterLength", DumpEntry{top.analogFir.channel[40].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[41].rFir.m", DumpEntry{top.analogFir.channel[41].rFir.m});
        res.insert_or_assign("top.analogFir.channel[41].rFir.n", DumpEntry{top.analogFir.channel[41].rFir.n});
        res.insert_or_assign("top.analogFir.channel[41].rFir.s", DumpEntry{top.analogFir.channel[41].rFir.s});
        res.insert_or_assign("top.analogFir.channel[41].rFir.r", DumpEntry{top.analogFir.channel[41].rFir.r});
        res.insert_or_assign("top.analogFir.channel[41].rFir.tSc", DumpEntry{top.analogFir.channel[41].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].rFir.phase", DumpEntry{top.analogFir.channel[41].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[41].vFir.m", DumpEntry{top.analogFir.channel[41].vFir.m});
        res.insert_or_assign("top.analogFir.channel[41].vFir.n", DumpEntry{top.analogFir.channel[41].vFir.n});
        res.insert_or_assign("top.analogFir.channel[41].vFir.s", DumpEntry{top.analogFir.channel[41].vFir.s});
        res.insert_or_assign("top.analogFir.channel[41].vFir.r", DumpEntry{top.analogFir.channel[41].vFir.r});
        res.insert_or_assign("top.analogFir.channel[41].vFir.tSc", DumpEntry{top.analogFir.channel[41].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].vFir.phase", DumpEntry{top.analogFir.channel[41].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.m", DumpEntry{top.analogFir.channel[41].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.n", DumpEntry{top.analogFir.channel[41].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.s", DumpEntry{top.analogFir.channel[41].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.r", DumpEntry{top.analogFir.channel[41].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.tSc", DumpEntry{top.analogFir.channel[41].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[41].mmFir.phase", DumpEntry{top.analogFir.channel[41].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.maxLimit", DumpEntry{top.analogFir.channel[41].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.minLimit", DumpEntry{top.analogFir.channel[41].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[41].limit.filterLength", DumpEntry{top.analogFir.channel[41].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[42].rFir.m", DumpEntry{top.analogFir.channel[42].rFir.m});
        res.insert_or_assign("top.analogFir.channel[42].rFir.n", DumpEntry{top.analogFir.channel[42].rFir.n});
        res.insert_or_assign("top.analogFir.channel[42].rFir.s", DumpEntry{top.analogFir.channel[42].rFir.s});
        res.insert_or_assign("top.analogFir.channel[42].rFir.r", DumpEntry{top.analogFir.channel[42].rFir.r});
        res.insert_or_assign("top.analogFir.channel[42].rFir.tSc", DumpEntry{top.analogFir.channel[42].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].rFir.phase", DumpEntry{top.analogFir.channel[42].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[42].vFir.m", DumpEntry{top.analogFir.channel[42].vFir.m});
        res.insert_or_assign("top.analogFir.channel[42].vFir.n", DumpEntry{top.analogFir.channel[42].vFir.n});
        res.insert_or_assign("top.analogFir.channel[42].vFir.s", DumpEntry{top.analogFir.channel[42].vFir.s});
        res.insert_or_assign("top.analogFir.channel[42].vFir.r", DumpEntry{top.analogFir.channel[42].vFir.r});
        res.insert_or_assign("top.analogFir.channel[42].vFir.tSc", DumpEntry{top.analogFir.channel[42].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].vFir.phase", DumpEntry{top.analogFir.channel[42].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.m", DumpEntry{top.analogFir.channel[42].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.n", DumpEntry{top.analogFir.channel[42].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.s", DumpEntry{top.analogFir.channel[42].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.r", DumpEntry{top.analogFir.channel[42].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.tSc", DumpEntry{top.analogFir.channel[42].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[42].mmFir.phase", DumpEntry{top.analogFir.channel[42].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.maxLimit", DumpEntry{top.analogFir.channel[42].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.minLimit", DumpEntry{top.analogFir.channel[42].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[42].limit.filterLength", DumpEntry{top.analogFir.channel[42].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[43].rFir.m", DumpEntry{top.analogFir.channel[43].rFir.m});
        res.insert_or_assign("top.analogFir.channel[43].rFir.n", DumpEntry{top.analogFir.channel[43].rFir.n});
        res.insert_or_assign("top.analogFir.channel[43].rFir.s", DumpEntry{top.analogFir.channel[43].rFir.s});
        res.insert_or_assign("top.analogFir.channel[43].rFir.r", DumpEntry{top.analogFir.channel[43].rFir.r});
        res.insert_or_assign("top.analogFir.channel[43].rFir.tSc", DumpEntry{top.analogFir.channel[43].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].rFir.phase", DumpEntry{top.analogFir.channel[43].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[43].vFir.m", DumpEntry{top.analogFir.channel[43].vFir.m});
        res.insert_or_assign("top.analogFir.channel[43].vFir.n", DumpEntry{top.analogFir.channel[43].vFir.n});
        res.insert_or_assign("top.analogFir.channel[43].vFir.s", DumpEntry{top.analogFir.channel[43].vFir.s});
        res.insert_or_assign("top.analogFir.channel[43].vFir.r", DumpEntry{top.analogFir.channel[43].vFir.r});
        res.insert_or_assign("top.analogFir.channel[43].vFir.tSc", DumpEntry{top.analogFir.channel[43].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].vFir.phase", DumpEntry{top.analogFir.channel[43].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.m", DumpEntry{top.analogFir.channel[43].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.n", DumpEntry{top.analogFir.channel[43].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.s", DumpEntry{top.analogFir.channel[43].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.r", DumpEntry{top.analogFir.channel[43].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.tSc", DumpEntry{top.analogFir.channel[43].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[43].mmFir.phase", DumpEntry{top.analogFir.channel[43].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.maxLimit", DumpEntry{top.analogFir.channel[43].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.minLimit", DumpEntry{top.analogFir.channel[43].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[43].limit.filterLength", DumpEntry{top.analogFir.channel[43].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[44].rFir.m", DumpEntry{top.analogFir.channel[44].rFir.m});
        res.insert_or_assign("top.analogFir.channel[44].rFir.n", DumpEntry{top.analogFir.channel[44].rFir.n});
        res.insert_or_assign("top.analogFir.channel[44].rFir.s", DumpEntry{top.analogFir.channel[44].rFir.s});
        res.insert_or_assign("top.analogFir.channel[44].rFir.r", DumpEntry{top.analogFir.channel[44].rFir.r});
        res.insert_or_assign("top.analogFir.channel[44].rFir.tSc", DumpEntry{top.analogFir.channel[44].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].rFir.phase", DumpEntry{top.analogFir.channel[44].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[44].vFir.m", DumpEntry{top.analogFir.channel[44].vFir.m});
        res.insert_or_assign("top.analogFir.channel[44].vFir.n", DumpEntry{top.analogFir.channel[44].vFir.n});
        res.insert_or_assign("top.analogFir.channel[44].vFir.s", DumpEntry{top.analogFir.channel[44].vFir.s});
        res.insert_or_assign("top.analogFir.channel[44].vFir.r", DumpEntry{top.analogFir.channel[44].vFir.r});
        res.insert_or_assign("top.analogFir.channel[44].vFir.tSc", DumpEntry{top.analogFir.channel[44].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].vFir.phase", DumpEntry{top.analogFir.channel[44].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.m", DumpEntry{top.analogFir.channel[44].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.n", DumpEntry{top.analogFir.channel[44].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.s", DumpEntry{top.analogFir.channel[44].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.r", DumpEntry{top.analogFir.channel[44].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.tSc", DumpEntry{top.analogFir.channel[44].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[44].mmFir.phase", DumpEntry{top.analogFir.channel[44].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.maxLimit", DumpEntry{top.analogFir.channel[44].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.minLimit", DumpEntry{top.analogFir.channel[44].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[44].limit.filterLength", DumpEntry{top.analogFir.channel[44].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[45].rFir.m", DumpEntry{top.analogFir.channel[45].rFir.m});
        res.insert_or_assign("top.analogFir.channel[45].rFir.n", DumpEntry{top.analogFir.channel[45].rFir.n});
        res.insert_or_assign("top.analogFir.channel[45].rFir.s", DumpEntry{top.analogFir.channel[45].rFir.s});
        res.insert_or_assign("top.analogFir.channel[45].rFir.r", DumpEntry{top.analogFir.channel[45].rFir.r});
        res.insert_or_assign("top.analogFir.channel[45].rFir.tSc", DumpEntry{top.analogFir.channel[45].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].rFir.phase", DumpEntry{top.analogFir.channel[45].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[45].vFir.m", DumpEntry{top.analogFir.channel[45].vFir.m});
        res.insert_or_assign("top.analogFir.channel[45].vFir.n", DumpEntry{top.analogFir.channel[45].vFir.n});
        res.insert_or_assign("top.analogFir.channel[45].vFir.s", DumpEntry{top.analogFir.channel[45].vFir.s});
        res.insert_or_assign("top.analogFir.channel[45].vFir.r", DumpEntry{top.analogFir.channel[45].vFir.r});
        res.insert_or_assign("top.analogFir.channel[45].vFir.tSc", DumpEntry{top.analogFir.channel[45].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].vFir.phase", DumpEntry{top.analogFir.channel[45].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.m", DumpEntry{top.analogFir.channel[45].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.n", DumpEntry{top.analogFir.channel[45].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.s", DumpEntry{top.analogFir.channel[45].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.r", DumpEntry{top.analogFir.channel[45].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.tSc", DumpEntry{top.analogFir.channel[45].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[45].mmFir.phase", DumpEntry{top.analogFir.channel[45].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.maxLimit", DumpEntry{top.analogFir.channel[45].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.minLimit", DumpEntry{top.analogFir.channel[45].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[45].limit.filterLength", DumpEntry{top.analogFir.channel[45].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[46].rFir.m", DumpEntry{top.analogFir.channel[46].rFir.m});
        res.insert_or_assign("top.analogFir.channel[46].rFir.n", DumpEntry{top.analogFir.channel[46].rFir.n});
        res.insert_or_assign("top.analogFir.channel[46].rFir.s", DumpEntry{top.analogFir.channel[46].rFir.s});
        res.insert_or_assign("top.analogFir.channel[46].rFir.r", DumpEntry{top.analogFir.channel[46].rFir.r});
        res.insert_or_assign("top.analogFir.channel[46].rFir.tSc", DumpEntry{top.analogFir.channel[46].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].rFir.phase", DumpEntry{top.analogFir.channel[46].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[46].vFir.m", DumpEntry{top.analogFir.channel[46].vFir.m});
        res.insert_or_assign("top.analogFir.channel[46].vFir.n", DumpEntry{top.analogFir.channel[46].vFir.n});
        res.insert_or_assign("top.analogFir.channel[46].vFir.s", DumpEntry{top.analogFir.channel[46].vFir.s});
        res.insert_or_assign("top.analogFir.channel[46].vFir.r", DumpEntry{top.analogFir.channel[46].vFir.r});
        res.insert_or_assign("top.analogFir.channel[46].vFir.tSc", DumpEntry{top.analogFir.channel[46].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].vFir.phase", DumpEntry{top.analogFir.channel[46].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.m", DumpEntry{top.analogFir.channel[46].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.n", DumpEntry{top.analogFir.channel[46].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.s", DumpEntry{top.analogFir.channel[46].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.r", DumpEntry{top.analogFir.channel[46].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.tSc", DumpEntry{top.analogFir.channel[46].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[46].mmFir.phase", DumpEntry{top.analogFir.channel[46].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.maxLimit", DumpEntry{top.analogFir.channel[46].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.minLimit", DumpEntry{top.analogFir.channel[46].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[46].limit.filterLength", DumpEntry{top.analogFir.channel[46].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[47].rFir.m", DumpEntry{top.analogFir.channel[47].rFir.m});
        res.insert_or_assign("top.analogFir.channel[47].rFir.n", DumpEntry{top.analogFir.channel[47].rFir.n});
        res.insert_or_assign("top.analogFir.channel[47].rFir.s", DumpEntry{top.analogFir.channel[47].rFir.s});
        res.insert_or_assign("top.analogFir.channel[47].rFir.r", DumpEntry{top.analogFir.channel[47].rFir.r});
        res.insert_or_assign("top.analogFir.channel[47].rFir.tSc", DumpEntry{top.analogFir.channel[47].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].rFir.phase", DumpEntry{top.analogFir.channel[47].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[47].vFir.m", DumpEntry{top.analogFir.channel[47].vFir.m});
        res.insert_or_assign("top.analogFir.channel[47].vFir.n", DumpEntry{top.analogFir.channel[47].vFir.n});
        res.insert_or_assign("top.analogFir.channel[47].vFir.s", DumpEntry{top.analogFir.channel[47].vFir.s});
        res.insert_or_assign("top.analogFir.channel[47].vFir.r", DumpEntry{top.analogFir.channel[47].vFir.r});
        res.insert_or_assign("top.analogFir.channel[47].vFir.tSc", DumpEntry{top.analogFir.channel[47].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].vFir.phase", DumpEntry{top.analogFir.channel[47].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.m", DumpEntry{top.analogFir.channel[47].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.n", DumpEntry{top.analogFir.channel[47].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.s", DumpEntry{top.analogFir.channel[47].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.r", DumpEntry{top.analogFir.channel[47].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.tSc", DumpEntry{top.analogFir.channel[47].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[47].mmFir.phase", DumpEntry{top.analogFir.channel[47].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.maxLimit", DumpEntry{top.analogFir.channel[47].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.minLimit", DumpEntry{top.analogFir.channel[47].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[47].limit.filterLength", DumpEntry{top.analogFir.channel[47].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[48].rFir.m", DumpEntry{top.analogFir.channel[48].rFir.m});
        res.insert_or_assign("top.analogFir.channel[48].rFir.n", DumpEntry{top.analogFir.channel[48].rFir.n});
        res.insert_or_assign("top.analogFir.channel[48].rFir.s", DumpEntry{top.analogFir.channel[48].rFir.s});
        res.insert_or_assign("top.analogFir.channel[48].rFir.r", DumpEntry{top.analogFir.channel[48].rFir.r});
        res.insert_or_assign("top.analogFir.channel[48].rFir.tSc", DumpEntry{top.analogFir.channel[48].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].rFir.phase", DumpEntry{top.analogFir.channel[48].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[48].vFir.m", DumpEntry{top.analogFir.channel[48].vFir.m});
        res.insert_or_assign("top.analogFir.channel[48].vFir.n", DumpEntry{top.analogFir.channel[48].vFir.n});
        res.insert_or_assign("top.analogFir.channel[48].vFir.s", DumpEntry{top.analogFir.channel[48].vFir.s});
        res.insert_or_assign("top.analogFir.channel[48].vFir.r", DumpEntry{top.analogFir.channel[48].vFir.r});
        res.insert_or_assign("top.analogFir.channel[48].vFir.tSc", DumpEntry{top.analogFir.channel[48].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].vFir.phase", DumpEntry{top.analogFir.channel[48].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.m", DumpEntry{top.analogFir.channel[48].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.n", DumpEntry{top.analogFir.channel[48].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.s", DumpEntry{top.analogFir.channel[48].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.r", DumpEntry{top.analogFir.channel[48].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.tSc", DumpEntry{top.analogFir.channel[48].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[48].mmFir.phase", DumpEntry{top.analogFir.channel[48].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.maxLimit", DumpEntry{top.analogFir.channel[48].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.minLimit", DumpEntry{top.analogFir.channel[48].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[48].limit.filterLength", DumpEntry{top.analogFir.channel[48].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[49].rFir.m", DumpEntry{top.analogFir.channel[49].rFir.m});
        res.insert_or_assign("top.analogFir.channel[49].rFir.n", DumpEntry{top.analogFir.channel[49].rFir.n});
        res.insert_or_assign("top.analogFir.channel[49].rFir.s", DumpEntry{top.analogFir.channel[49].rFir.s});
        res.insert_or_assign("top.analogFir.channel[49].rFir.r", DumpEntry{top.analogFir.channel[49].rFir.r});
        res.insert_or_assign("top.analogFir.channel[49].rFir.tSc", DumpEntry{top.analogFir.channel[49].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].rFir.phase", DumpEntry{top.analogFir.channel[49].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[49].vFir.m", DumpEntry{top.analogFir.channel[49].vFir.m});
        res.insert_or_assign("top.analogFir.channel[49].vFir.n", DumpEntry{top.analogFir.channel[49].vFir.n});
        res.insert_or_assign("top.analogFir.channel[49].vFir.s", DumpEntry{top.analogFir.channel[49].vFir.s});
        res.insert_or_assign("top.analogFir.channel[49].vFir.r", DumpEntry{top.analogFir.channel[49].vFir.r});
        res.insert_or_assign("top.analogFir.channel[49].vFir.tSc", DumpEntry{top.analogFir.channel[49].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].vFir.phase", DumpEntry{top.analogFir.channel[49].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.m", DumpEntry{top.analogFir.channel[49].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.n", DumpEntry{top.analogFir.channel[49].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.s", DumpEntry{top.analogFir.channel[49].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.r", DumpEntry{top.analogFir.channel[49].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.tSc", DumpEntry{top.analogFir.channel[49].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[49].mmFir.phase", DumpEntry{top.analogFir.channel[49].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.maxLimit", DumpEntry{top.analogFir.channel[49].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.minLimit", DumpEntry{top.analogFir.channel[49].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[49].limit.filterLength", DumpEntry{top.analogFir.channel[49].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[50].rFir.m", DumpEntry{top.analogFir.channel[50].rFir.m});
        res.insert_or_assign("top.analogFir.channel[50].rFir.n", DumpEntry{top.analogFir.channel[50].rFir.n});
        res.insert_or_assign("top.analogFir.channel[50].rFir.s", DumpEntry{top.analogFir.channel[50].rFir.s});
        res.insert_or_assign("top.analogFir.channel[50].rFir.r", DumpEntry{top.analogFir.channel[50].rFir.r});
        res.insert_or_assign("top.analogFir.channel[50].rFir.tSc", DumpEntry{top.analogFir.channel[50].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].rFir.phase", DumpEntry{top.analogFir.channel[50].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[50].vFir.m", DumpEntry{top.analogFir.channel[50].vFir.m});
        res.insert_or_assign("top.analogFir.channel[50].vFir.n", DumpEntry{top.analogFir.channel[50].vFir.n});
        res.insert_or_assign("top.analogFir.channel[50].vFir.s", DumpEntry{top.analogFir.channel[50].vFir.s});
        res.insert_or_assign("top.analogFir.channel[50].vFir.r", DumpEntry{top.analogFir.channel[50].vFir.r});
        res.insert_or_assign("top.analogFir.channel[50].vFir.tSc", DumpEntry{top.analogFir.channel[50].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].vFir.phase", DumpEntry{top.analogFir.channel[50].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.m", DumpEntry{top.analogFir.channel[50].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.n", DumpEntry{top.analogFir.channel[50].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.s", DumpEntry{top.analogFir.channel[50].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.r", DumpEntry{top.analogFir.channel[50].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.tSc", DumpEntry{top.analogFir.channel[50].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[50].mmFir.phase", DumpEntry{top.analogFir.channel[50].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.maxLimit", DumpEntry{top.analogFir.channel[50].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.minLimit", DumpEntry{top.analogFir.channel[50].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[50].limit.filterLength", DumpEntry{top.analogFir.channel[50].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[51].rFir.m", DumpEntry{top.analogFir.channel[51].rFir.m});
        res.insert_or_assign("top.analogFir.channel[51].rFir.n", DumpEntry{top.analogFir.channel[51].rFir.n});
        res.insert_or_assign("top.analogFir.channel[51].rFir.s", DumpEntry{top.analogFir.channel[51].rFir.s});
        res.insert_or_assign("top.analogFir.channel[51].rFir.r", DumpEntry{top.analogFir.channel[51].rFir.r});
        res.insert_or_assign("top.analogFir.channel[51].rFir.tSc", DumpEntry{top.analogFir.channel[51].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].rFir.phase", DumpEntry{top.analogFir.channel[51].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[51].vFir.m", DumpEntry{top.analogFir.channel[51].vFir.m});
        res.insert_or_assign("top.analogFir.channel[51].vFir.n", DumpEntry{top.analogFir.channel[51].vFir.n});
        res.insert_or_assign("top.analogFir.channel[51].vFir.s", DumpEntry{top.analogFir.channel[51].vFir.s});
        res.insert_or_assign("top.analogFir.channel[51].vFir.r", DumpEntry{top.analogFir.channel[51].vFir.r});
        res.insert_or_assign("top.analogFir.channel[51].vFir.tSc", DumpEntry{top.analogFir.channel[51].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].vFir.phase", DumpEntry{top.analogFir.channel[51].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.m", DumpEntry{top.analogFir.channel[51].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.n", DumpEntry{top.analogFir.channel[51].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.s", DumpEntry{top.analogFir.channel[51].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.r", DumpEntry{top.analogFir.channel[51].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.tSc", DumpEntry{top.analogFir.channel[51].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[51].mmFir.phase", DumpEntry{top.analogFir.channel[51].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.maxLimit", DumpEntry{top.analogFir.channel[51].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.minLimit", DumpEntry{top.analogFir.channel[51].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[51].limit.filterLength", DumpEntry{top.analogFir.channel[51].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[52].rFir.m", DumpEntry{top.analogFir.channel[52].rFir.m});
        res.insert_or_assign("top.analogFir.channel[52].rFir.n", DumpEntry{top.analogFir.channel[52].rFir.n});
        res.insert_or_assign("top.analogFir.channel[52].rFir.s", DumpEntry{top.analogFir.channel[52].rFir.s});
        res.insert_or_assign("top.analogFir.channel[52].rFir.r", DumpEntry{top.analogFir.channel[52].rFir.r});
        res.insert_or_assign("top.analogFir.channel[52].rFir.tSc", DumpEntry{top.analogFir.channel[52].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].rFir.phase", DumpEntry{top.analogFir.channel[52].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[52].vFir.m", DumpEntry{top.analogFir.channel[52].vFir.m});
        res.insert_or_assign("top.analogFir.channel[52].vFir.n", DumpEntry{top.analogFir.channel[52].vFir.n});
        res.insert_or_assign("top.analogFir.channel[52].vFir.s", DumpEntry{top.analogFir.channel[52].vFir.s});
        res.insert_or_assign("top.analogFir.channel[52].vFir.r", DumpEntry{top.analogFir.channel[52].vFir.r});
        res.insert_or_assign("top.analogFir.channel[52].vFir.tSc", DumpEntry{top.analogFir.channel[52].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].vFir.phase", DumpEntry{top.analogFir.channel[52].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.m", DumpEntry{top.analogFir.channel[52].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.n", DumpEntry{top.analogFir.channel[52].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.s", DumpEntry{top.analogFir.channel[52].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.r", DumpEntry{top.analogFir.channel[52].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.tSc", DumpEntry{top.analogFir.channel[52].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[52].mmFir.phase", DumpEntry{top.analogFir.channel[52].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.maxLimit", DumpEntry{top.analogFir.channel[52].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.minLimit", DumpEntry{top.analogFir.channel[52].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[52].limit.filterLength", DumpEntry{top.analogFir.channel[52].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[53].rFir.m", DumpEntry{top.analogFir.channel[53].rFir.m});
        res.insert_or_assign("top.analogFir.channel[53].rFir.n", DumpEntry{top.analogFir.channel[53].rFir.n});
        res.insert_or_assign("top.analogFir.channel[53].rFir.s", DumpEntry{top.analogFir.channel[53].rFir.s});
        res.insert_or_assign("top.analogFir.channel[53].rFir.r", DumpEntry{top.analogFir.channel[53].rFir.r});
        res.insert_or_assign("top.analogFir.channel[53].rFir.tSc", DumpEntry{top.analogFir.channel[53].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].rFir.phase", DumpEntry{top.analogFir.channel[53].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[53].vFir.m", DumpEntry{top.analogFir.channel[53].vFir.m});
        res.insert_or_assign("top.analogFir.channel[53].vFir.n", DumpEntry{top.analogFir.channel[53].vFir.n});
        res.insert_or_assign("top.analogFir.channel[53].vFir.s", DumpEntry{top.analogFir.channel[53].vFir.s});
        res.insert_or_assign("top.analogFir.channel[53].vFir.r", DumpEntry{top.analogFir.channel[53].vFir.r});
        res.insert_or_assign("top.analogFir.channel[53].vFir.tSc", DumpEntry{top.analogFir.channel[53].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].vFir.phase", DumpEntry{top.analogFir.channel[53].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.m", DumpEntry{top.analogFir.channel[53].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.n", DumpEntry{top.analogFir.channel[53].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.s", DumpEntry{top.analogFir.channel[53].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.r", DumpEntry{top.analogFir.channel[53].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.tSc", DumpEntry{top.analogFir.channel[53].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[53].mmFir.phase", DumpEntry{top.analogFir.channel[53].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.maxLimit", DumpEntry{top.analogFir.channel[53].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.minLimit", DumpEntry{top.analogFir.channel[53].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[53].limit.filterLength", DumpEntry{top.analogFir.channel[53].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[54].rFir.m", DumpEntry{top.analogFir.channel[54].rFir.m});
        res.insert_or_assign("top.analogFir.channel[54].rFir.n", DumpEntry{top.analogFir.channel[54].rFir.n});
        res.insert_or_assign("top.analogFir.channel[54].rFir.s", DumpEntry{top.analogFir.channel[54].rFir.s});
        res.insert_or_assign("top.analogFir.channel[54].rFir.r", DumpEntry{top.analogFir.channel[54].rFir.r});
        res.insert_or_assign("top.analogFir.channel[54].rFir.tSc", DumpEntry{top.analogFir.channel[54].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].rFir.phase", DumpEntry{top.analogFir.channel[54].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[54].vFir.m", DumpEntry{top.analogFir.channel[54].vFir.m});
        res.insert_or_assign("top.analogFir.channel[54].vFir.n", DumpEntry{top.analogFir.channel[54].vFir.n});
        res.insert_or_assign("top.analogFir.channel[54].vFir.s", DumpEntry{top.analogFir.channel[54].vFir.s});
        res.insert_or_assign("top.analogFir.channel[54].vFir.r", DumpEntry{top.analogFir.channel[54].vFir.r});
        res.insert_or_assign("top.analogFir.channel[54].vFir.tSc", DumpEntry{top.analogFir.channel[54].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].vFir.phase", DumpEntry{top.analogFir.channel[54].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.m", DumpEntry{top.analogFir.channel[54].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.n", DumpEntry{top.analogFir.channel[54].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.s", DumpEntry{top.analogFir.channel[54].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.r", DumpEntry{top.analogFir.channel[54].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.tSc", DumpEntry{top.analogFir.channel[54].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[54].mmFir.phase", DumpEntry{top.analogFir.channel[54].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.maxLimit", DumpEntry{top.analogFir.channel[54].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.minLimit", DumpEntry{top.analogFir.channel[54].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[54].limit.filterLength", DumpEntry{top.analogFir.channel[54].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[55].rFir.m", DumpEntry{top.analogFir.channel[55].rFir.m});
        res.insert_or_assign("top.analogFir.channel[55].rFir.n", DumpEntry{top.analogFir.channel[55].rFir.n});
        res.insert_or_assign("top.analogFir.channel[55].rFir.s", DumpEntry{top.analogFir.channel[55].rFir.s});
        res.insert_or_assign("top.analogFir.channel[55].rFir.r", DumpEntry{top.analogFir.channel[55].rFir.r});
        res.insert_or_assign("top.analogFir.channel[55].rFir.tSc", DumpEntry{top.analogFir.channel[55].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].rFir.phase", DumpEntry{top.analogFir.channel[55].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[55].vFir.m", DumpEntry{top.analogFir.channel[55].vFir.m});
        res.insert_or_assign("top.analogFir.channel[55].vFir.n", DumpEntry{top.analogFir.channel[55].vFir.n});
        res.insert_or_assign("top.analogFir.channel[55].vFir.s", DumpEntry{top.analogFir.channel[55].vFir.s});
        res.insert_or_assign("top.analogFir.channel[55].vFir.r", DumpEntry{top.analogFir.channel[55].vFir.r});
        res.insert_or_assign("top.analogFir.channel[55].vFir.tSc", DumpEntry{top.analogFir.channel[55].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].vFir.phase", DumpEntry{top.analogFir.channel[55].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.m", DumpEntry{top.analogFir.channel[55].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.n", DumpEntry{top.analogFir.channel[55].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.s", DumpEntry{top.analogFir.channel[55].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.r", DumpEntry{top.analogFir.channel[55].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.tSc", DumpEntry{top.analogFir.channel[55].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[55].mmFir.phase", DumpEntry{top.analogFir.channel[55].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.maxLimit", DumpEntry{top.analogFir.channel[55].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.minLimit", DumpEntry{top.analogFir.channel[55].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[55].limit.filterLength", DumpEntry{top.analogFir.channel[55].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[56].rFir.m", DumpEntry{top.analogFir.channel[56].rFir.m});
        res.insert_or_assign("top.analogFir.channel[56].rFir.n", DumpEntry{top.analogFir.channel[56].rFir.n});
        res.insert_or_assign("top.analogFir.channel[56].rFir.s", DumpEntry{top.analogFir.channel[56].rFir.s});
        res.insert_or_assign("top.analogFir.channel[56].rFir.r", DumpEntry{top.analogFir.channel[56].rFir.r});
        res.insert_or_assign("top.analogFir.channel[56].rFir.tSc", DumpEntry{top.analogFir.channel[56].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].rFir.phase", DumpEntry{top.analogFir.channel[56].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[56].vFir.m", DumpEntry{top.analogFir.channel[56].vFir.m});
        res.insert_or_assign("top.analogFir.channel[56].vFir.n", DumpEntry{top.analogFir.channel[56].vFir.n});
        res.insert_or_assign("top.analogFir.channel[56].vFir.s", DumpEntry{top.analogFir.channel[56].vFir.s});
        res.insert_or_assign("top.analogFir.channel[56].vFir.r", DumpEntry{top.analogFir.channel[56].vFir.r});
        res.insert_or_assign("top.analogFir.channel[56].vFir.tSc", DumpEntry{top.analogFir.channel[56].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].vFir.phase", DumpEntry{top.analogFir.channel[56].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.m", DumpEntry{top.analogFir.channel[56].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.n", DumpEntry{top.analogFir.channel[56].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.s", DumpEntry{top.analogFir.channel[56].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.r", DumpEntry{top.analogFir.channel[56].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.tSc", DumpEntry{top.analogFir.channel[56].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[56].mmFir.phase", DumpEntry{top.analogFir.channel[56].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.maxLimit", DumpEntry{top.analogFir.channel[56].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.minLimit", DumpEntry{top.analogFir.channel[56].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[56].limit.filterLength", DumpEntry{top.analogFir.channel[56].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[57].rFir.m", DumpEntry{top.analogFir.channel[57].rFir.m});
        res.insert_or_assign("top.analogFir.channel[57].rFir.n", DumpEntry{top.analogFir.channel[57].rFir.n});
        res.insert_or_assign("top.analogFir.channel[57].rFir.s", DumpEntry{top.analogFir.channel[57].rFir.s});
        res.insert_or_assign("top.analogFir.channel[57].rFir.r", DumpEntry{top.analogFir.channel[57].rFir.r});
        res.insert_or_assign("top.analogFir.channel[57].rFir.tSc", DumpEntry{top.analogFir.channel[57].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].rFir.phase", DumpEntry{top.analogFir.channel[57].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[57].vFir.m", DumpEntry{top.analogFir.channel[57].vFir.m});
        res.insert_or_assign("top.analogFir.channel[57].vFir.n", DumpEntry{top.analogFir.channel[57].vFir.n});
        res.insert_or_assign("top.analogFir.channel[57].vFir.s", DumpEntry{top.analogFir.channel[57].vFir.s});
        res.insert_or_assign("top.analogFir.channel[57].vFir.r", DumpEntry{top.analogFir.channel[57].vFir.r});
        res.insert_or_assign("top.analogFir.channel[57].vFir.tSc", DumpEntry{top.analogFir.channel[57].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].vFir.phase", DumpEntry{top.analogFir.channel[57].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.m", DumpEntry{top.analogFir.channel[57].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.n", DumpEntry{top.analogFir.channel[57].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.s", DumpEntry{top.analogFir.channel[57].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.r", DumpEntry{top.analogFir.channel[57].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.tSc", DumpEntry{top.analogFir.channel[57].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[57].mmFir.phase", DumpEntry{top.analogFir.channel[57].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.maxLimit", DumpEntry{top.analogFir.channel[57].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.minLimit", DumpEntry{top.analogFir.channel[57].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[57].limit.filterLength", DumpEntry{top.analogFir.channel[57].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[58].rFir.m", DumpEntry{top.analogFir.channel[58].rFir.m});
        res.insert_or_assign("top.analogFir.channel[58].rFir.n", DumpEntry{top.analogFir.channel[58].rFir.n});
        res.insert_or_assign("top.analogFir.channel[58].rFir.s", DumpEntry{top.analogFir.channel[58].rFir.s});
        res.insert_or_assign("top.analogFir.channel[58].rFir.r", DumpEntry{top.analogFir.channel[58].rFir.r});
        res.insert_or_assign("top.analogFir.channel[58].rFir.tSc", DumpEntry{top.analogFir.channel[58].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].rFir.phase", DumpEntry{top.analogFir.channel[58].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[58].vFir.m", DumpEntry{top.analogFir.channel[58].vFir.m});
        res.insert_or_assign("top.analogFir.channel[58].vFir.n", DumpEntry{top.analogFir.channel[58].vFir.n});
        res.insert_or_assign("top.analogFir.channel[58].vFir.s", DumpEntry{top.analogFir.channel[58].vFir.s});
        res.insert_or_assign("top.analogFir.channel[58].vFir.r", DumpEntry{top.analogFir.channel[58].vFir.r});
        res.insert_or_assign("top.analogFir.channel[58].vFir.tSc", DumpEntry{top.analogFir.channel[58].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].vFir.phase", DumpEntry{top.analogFir.channel[58].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.m", DumpEntry{top.analogFir.channel[58].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.n", DumpEntry{top.analogFir.channel[58].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.s", DumpEntry{top.analogFir.channel[58].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.r", DumpEntry{top.analogFir.channel[58].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.tSc", DumpEntry{top.analogFir.channel[58].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[58].mmFir.phase", DumpEntry{top.analogFir.channel[58].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.maxLimit", DumpEntry{top.analogFir.channel[58].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.minLimit", DumpEntry{top.analogFir.channel[58].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[58].limit.filterLength", DumpEntry{top.analogFir.channel[58].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[59].rFir.m", DumpEntry{top.analogFir.channel[59].rFir.m});
        res.insert_or_assign("top.analogFir.channel[59].rFir.n", DumpEntry{top.analogFir.channel[59].rFir.n});
        res.insert_or_assign("top.analogFir.channel[59].rFir.s", DumpEntry{top.analogFir.channel[59].rFir.s});
        res.insert_or_assign("top.analogFir.channel[59].rFir.r", DumpEntry{top.analogFir.channel[59].rFir.r});
        res.insert_or_assign("top.analogFir.channel[59].rFir.tSc", DumpEntry{top.analogFir.channel[59].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].rFir.phase", DumpEntry{top.analogFir.channel[59].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[59].vFir.m", DumpEntry{top.analogFir.channel[59].vFir.m});
        res.insert_or_assign("top.analogFir.channel[59].vFir.n", DumpEntry{top.analogFir.channel[59].vFir.n});
        res.insert_or_assign("top.analogFir.channel[59].vFir.s", DumpEntry{top.analogFir.channel[59].vFir.s});
        res.insert_or_assign("top.analogFir.channel[59].vFir.r", DumpEntry{top.analogFir.channel[59].vFir.r});
        res.insert_or_assign("top.analogFir.channel[59].vFir.tSc", DumpEntry{top.analogFir.channel[59].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].vFir.phase", DumpEntry{top.analogFir.channel[59].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.m", DumpEntry{top.analogFir.channel[59].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.n", DumpEntry{top.analogFir.channel[59].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.s", DumpEntry{top.analogFir.channel[59].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.r", DumpEntry{top.analogFir.channel[59].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.tSc", DumpEntry{top.analogFir.channel[59].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[59].mmFir.phase", DumpEntry{top.analogFir.channel[59].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.maxLimit", DumpEntry{top.analogFir.channel[59].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.minLimit", DumpEntry{top.analogFir.channel[59].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[59].limit.filterLength", DumpEntry{top.analogFir.channel[59].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[60].rFir.m", DumpEntry{top.analogFir.channel[60].rFir.m});
        res.insert_or_assign("top.analogFir.channel[60].rFir.n", DumpEntry{top.analogFir.channel[60].rFir.n});
        res.insert_or_assign("top.analogFir.channel[60].rFir.s", DumpEntry{top.analogFir.channel[60].rFir.s});
        res.insert_or_assign("top.analogFir.channel[60].rFir.r", DumpEntry{top.analogFir.channel[60].rFir.r});
        res.insert_or_assign("top.analogFir.channel[60].rFir.tSc", DumpEntry{top.analogFir.channel[60].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].rFir.phase", DumpEntry{top.analogFir.channel[60].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[60].vFir.m", DumpEntry{top.analogFir.channel[60].vFir.m});
        res.insert_or_assign("top.analogFir.channel[60].vFir.n", DumpEntry{top.analogFir.channel[60].vFir.n});
        res.insert_or_assign("top.analogFir.channel[60].vFir.s", DumpEntry{top.analogFir.channel[60].vFir.s});
        res.insert_or_assign("top.analogFir.channel[60].vFir.r", DumpEntry{top.analogFir.channel[60].vFir.r});
        res.insert_or_assign("top.analogFir.channel[60].vFir.tSc", DumpEntry{top.analogFir.channel[60].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].vFir.phase", DumpEntry{top.analogFir.channel[60].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.m", DumpEntry{top.analogFir.channel[60].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.n", DumpEntry{top.analogFir.channel[60].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.s", DumpEntry{top.analogFir.channel[60].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.r", DumpEntry{top.analogFir.channel[60].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.tSc", DumpEntry{top.analogFir.channel[60].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[60].mmFir.phase", DumpEntry{top.analogFir.channel[60].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.maxLimit", DumpEntry{top.analogFir.channel[60].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.minLimit", DumpEntry{top.analogFir.channel[60].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[60].limit.filterLength", DumpEntry{top.analogFir.channel[60].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.channel[61].rFir.m", DumpEntry{top.analogFir.channel[61].rFir.m});
        res.insert_or_assign("top.analogFir.channel[61].rFir.n", DumpEntry{top.analogFir.channel[61].rFir.n});
        res.insert_or_assign("top.analogFir.channel[61].rFir.s", DumpEntry{top.analogFir.channel[61].rFir.s});
        res.insert_or_assign("top.analogFir.channel[61].rFir.r", DumpEntry{top.analogFir.channel[61].rFir.r});
        res.insert_or_assign("top.analogFir.channel[61].rFir.tSc", DumpEntry{top.analogFir.channel[61].rFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].rFir.phase", DumpEntry{top.analogFir.channel[61].rFir.phase});
        res.insert_or_assign("top.analogFir.channel[61].vFir.m", DumpEntry{top.analogFir.channel[61].vFir.m});
        res.insert_or_assign("top.analogFir.channel[61].vFir.n", DumpEntry{top.analogFir.channel[61].vFir.n});
        res.insert_or_assign("top.analogFir.channel[61].vFir.s", DumpEntry{top.analogFir.channel[61].vFir.s});
        res.insert_or_assign("top.analogFir.channel[61].vFir.r", DumpEntry{top.analogFir.channel[61].vFir.r});
        res.insert_or_assign("top.analogFir.channel[61].vFir.tSc", DumpEntry{top.analogFir.channel[61].vFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].vFir.phase", DumpEntry{top.analogFir.channel[61].vFir.phase});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.m", DumpEntry{top.analogFir.channel[61].mmFir.m});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.n", DumpEntry{top.analogFir.channel[61].mmFir.n});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.s", DumpEntry{top.analogFir.channel[61].mmFir.s});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.r", DumpEntry{top.analogFir.channel[61].mmFir.r});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.tSc", DumpEntry{top.analogFir.channel[61].mmFir.tSc});
        res.insert_or_assign("top.analogFir.channel[61].mmFir.phase", DumpEntry{top.analogFir.channel[61].mmFir.phase});
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.maxLimit", DumpEntry{top.analogFir.channel[61].limit.maxLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.minLimit", DumpEntry{top.analogFir.channel[61].limit.minLimit}
        );
        res.insert_or_assign(
            "top.analogFir.channel[61].limit.filterLength", DumpEntry{top.analogFir.channel[61].limit.filterLength}
        );
        res.insert_or_assign("top.analogFir.mmTrip", DumpEntry{top.analogFir.mmTrip});
        res.insert_or_assign("top.analogMs.channel[0].ms.algorithms", DumpEntry{top.analogMs.channel[0].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[0].ms.algorithms.alg", DumpEntry{top.analogMs.channel[0].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[0].ms.offset", DumpEntry{top.analogMs.channel[0].ms.offset});
        res.insert_or_assign("top.analogMs.channel[0].ms.iirA", DumpEntry{top.analogMs.channel[0].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[0].ms.iirB", DumpEntry{top.analogMs.channel[0].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[0].ms.maxLimit", DumpEntry{top.analogMs.channel[0].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[0].ms.minLimit", DumpEntry{top.analogMs.channel[0].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[0].ms.accLength", DumpEntry{top.analogMs.channel[0].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[0].ms.firMask", DumpEntry{top.analogMs.channel[0].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[1].ms.algorithms", DumpEntry{top.analogMs.channel[1].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[1].ms.algorithms.alg", DumpEntry{top.analogMs.channel[1].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[1].ms.offset", DumpEntry{top.analogMs.channel[1].ms.offset});
        res.insert_or_assign("top.analogMs.channel[1].ms.iirA", DumpEntry{top.analogMs.channel[1].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[1].ms.iirB", DumpEntry{top.analogMs.channel[1].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[1].ms.maxLimit", DumpEntry{top.analogMs.channel[1].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[1].ms.minLimit", DumpEntry{top.analogMs.channel[1].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[1].ms.accLength", DumpEntry{top.analogMs.channel[1].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[1].ms.firMask", DumpEntry{top.analogMs.channel[1].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[2].ms.algorithms", DumpEntry{top.analogMs.channel[2].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[2].ms.algorithms.alg", DumpEntry{top.analogMs.channel[2].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[2].ms.offset", DumpEntry{top.analogMs.channel[2].ms.offset});
        res.insert_or_assign("top.analogMs.channel[2].ms.iirA", DumpEntry{top.analogMs.channel[2].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[2].ms.iirB", DumpEntry{top.analogMs.channel[2].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[2].ms.maxLimit", DumpEntry{top.analogMs.channel[2].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[2].ms.minLimit", DumpEntry{top.analogMs.channel[2].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[2].ms.accLength", DumpEntry{top.analogMs.channel[2].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[2].ms.firMask", DumpEntry{top.analogMs.channel[2].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[3].ms.algorithms", DumpEntry{top.analogMs.channel[3].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[3].ms.algorithms.alg", DumpEntry{top.analogMs.channel[3].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[3].ms.offset", DumpEntry{top.analogMs.channel[3].ms.offset});
        res.insert_or_assign("top.analogMs.channel[3].ms.iirA", DumpEntry{top.analogMs.channel[3].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[3].ms.iirB", DumpEntry{top.analogMs.channel[3].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[3].ms.maxLimit", DumpEntry{top.analogMs.channel[3].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[3].ms.minLimit", DumpEntry{top.analogMs.channel[3].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[3].ms.accLength", DumpEntry{top.analogMs.channel[3].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[3].ms.firMask", DumpEntry{top.analogMs.channel[3].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[4].ms.algorithms", DumpEntry{top.analogMs.channel[4].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[4].ms.algorithms.alg", DumpEntry{top.analogMs.channel[4].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[4].ms.offset", DumpEntry{top.analogMs.channel[4].ms.offset});
        res.insert_or_assign("top.analogMs.channel[4].ms.iirA", DumpEntry{top.analogMs.channel[4].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[4].ms.iirB", DumpEntry{top.analogMs.channel[4].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[4].ms.maxLimit", DumpEntry{top.analogMs.channel[4].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[4].ms.minLimit", DumpEntry{top.analogMs.channel[4].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[4].ms.accLength", DumpEntry{top.analogMs.channel[4].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[4].ms.firMask", DumpEntry{top.analogMs.channel[4].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[5].ms.algorithms", DumpEntry{top.analogMs.channel[5].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[5].ms.algorithms.alg", DumpEntry{top.analogMs.channel[5].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[5].ms.offset", DumpEntry{top.analogMs.channel[5].ms.offset});
        res.insert_or_assign("top.analogMs.channel[5].ms.iirA", DumpEntry{top.analogMs.channel[5].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[5].ms.iirB", DumpEntry{top.analogMs.channel[5].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[5].ms.maxLimit", DumpEntry{top.analogMs.channel[5].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[5].ms.minLimit", DumpEntry{top.analogMs.channel[5].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[5].ms.accLength", DumpEntry{top.analogMs.channel[5].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[5].ms.firMask", DumpEntry{top.analogMs.channel[5].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[6].ms.algorithms", DumpEntry{top.analogMs.channel[6].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[6].ms.algorithms.alg", DumpEntry{top.analogMs.channel[6].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[6].ms.offset", DumpEntry{top.analogMs.channel[6].ms.offset});
        res.insert_or_assign("top.analogMs.channel[6].ms.iirA", DumpEntry{top.analogMs.channel[6].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[6].ms.iirB", DumpEntry{top.analogMs.channel[6].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[6].ms.maxLimit", DumpEntry{top.analogMs.channel[6].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[6].ms.minLimit", DumpEntry{top.analogMs.channel[6].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[6].ms.accLength", DumpEntry{top.analogMs.channel[6].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[6].ms.firMask", DumpEntry{top.analogMs.channel[6].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[7].ms.algorithms", DumpEntry{top.analogMs.channel[7].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[7].ms.algorithms.alg", DumpEntry{top.analogMs.channel[7].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[7].ms.offset", DumpEntry{top.analogMs.channel[7].ms.offset});
        res.insert_or_assign("top.analogMs.channel[7].ms.iirA", DumpEntry{top.analogMs.channel[7].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[7].ms.iirB", DumpEntry{top.analogMs.channel[7].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[7].ms.maxLimit", DumpEntry{top.analogMs.channel[7].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[7].ms.minLimit", DumpEntry{top.analogMs.channel[7].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[7].ms.accLength", DumpEntry{top.analogMs.channel[7].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[7].ms.firMask", DumpEntry{top.analogMs.channel[7].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[8].ms.algorithms", DumpEntry{top.analogMs.channel[8].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[8].ms.algorithms.alg", DumpEntry{top.analogMs.channel[8].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[8].ms.offset", DumpEntry{top.analogMs.channel[8].ms.offset});
        res.insert_or_assign("top.analogMs.channel[8].ms.iirA", DumpEntry{top.analogMs.channel[8].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[8].ms.iirB", DumpEntry{top.analogMs.channel[8].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[8].ms.maxLimit", DumpEntry{top.analogMs.channel[8].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[8].ms.minLimit", DumpEntry{top.analogMs.channel[8].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[8].ms.accLength", DumpEntry{top.analogMs.channel[8].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[8].ms.firMask", DumpEntry{top.analogMs.channel[8].ms.firMask});
        res.insert_or_assign("top.analogMs.channel[9].ms.algorithms", DumpEntry{top.analogMs.channel[9].ms.algorithms});
        res.insert_or_assign(
            "top.analogMs.channel[9].ms.algorithms.alg", DumpEntry{top.analogMs.channel[9].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[9].ms.offset", DumpEntry{top.analogMs.channel[9].ms.offset});
        res.insert_or_assign("top.analogMs.channel[9].ms.iirA", DumpEntry{top.analogMs.channel[9].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[9].ms.iirB", DumpEntry{top.analogMs.channel[9].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[9].ms.maxLimit", DumpEntry{top.analogMs.channel[9].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[9].ms.minLimit", DumpEntry{top.analogMs.channel[9].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[9].ms.accLength", DumpEntry{top.analogMs.channel[9].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[9].ms.firMask", DumpEntry{top.analogMs.channel[9].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[10].ms.algorithms", DumpEntry{top.analogMs.channel[10].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[10].ms.algorithms.alg", DumpEntry{top.analogMs.channel[10].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[10].ms.offset", DumpEntry{top.analogMs.channel[10].ms.offset});
        res.insert_or_assign("top.analogMs.channel[10].ms.iirA", DumpEntry{top.analogMs.channel[10].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[10].ms.iirB", DumpEntry{top.analogMs.channel[10].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[10].ms.maxLimit", DumpEntry{top.analogMs.channel[10].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[10].ms.minLimit", DumpEntry{top.analogMs.channel[10].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[10].ms.accLength", DumpEntry{top.analogMs.channel[10].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[10].ms.firMask", DumpEntry{top.analogMs.channel[10].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[11].ms.algorithms", DumpEntry{top.analogMs.channel[11].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[11].ms.algorithms.alg", DumpEntry{top.analogMs.channel[11].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[11].ms.offset", DumpEntry{top.analogMs.channel[11].ms.offset});
        res.insert_or_assign("top.analogMs.channel[11].ms.iirA", DumpEntry{top.analogMs.channel[11].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[11].ms.iirB", DumpEntry{top.analogMs.channel[11].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[11].ms.maxLimit", DumpEntry{top.analogMs.channel[11].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[11].ms.minLimit", DumpEntry{top.analogMs.channel[11].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[11].ms.accLength", DumpEntry{top.analogMs.channel[11].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[11].ms.firMask", DumpEntry{top.analogMs.channel[11].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[12].ms.algorithms", DumpEntry{top.analogMs.channel[12].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[12].ms.algorithms.alg", DumpEntry{top.analogMs.channel[12].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[12].ms.offset", DumpEntry{top.analogMs.channel[12].ms.offset});
        res.insert_or_assign("top.analogMs.channel[12].ms.iirA", DumpEntry{top.analogMs.channel[12].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[12].ms.iirB", DumpEntry{top.analogMs.channel[12].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[12].ms.maxLimit", DumpEntry{top.analogMs.channel[12].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[12].ms.minLimit", DumpEntry{top.analogMs.channel[12].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[12].ms.accLength", DumpEntry{top.analogMs.channel[12].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[12].ms.firMask", DumpEntry{top.analogMs.channel[12].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[13].ms.algorithms", DumpEntry{top.analogMs.channel[13].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[13].ms.algorithms.alg", DumpEntry{top.analogMs.channel[13].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[13].ms.offset", DumpEntry{top.analogMs.channel[13].ms.offset});
        res.insert_or_assign("top.analogMs.channel[13].ms.iirA", DumpEntry{top.analogMs.channel[13].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[13].ms.iirB", DumpEntry{top.analogMs.channel[13].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[13].ms.maxLimit", DumpEntry{top.analogMs.channel[13].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[13].ms.minLimit", DumpEntry{top.analogMs.channel[13].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[13].ms.accLength", DumpEntry{top.analogMs.channel[13].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[13].ms.firMask", DumpEntry{top.analogMs.channel[13].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[14].ms.algorithms", DumpEntry{top.analogMs.channel[14].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[14].ms.algorithms.alg", DumpEntry{top.analogMs.channel[14].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[14].ms.offset", DumpEntry{top.analogMs.channel[14].ms.offset});
        res.insert_or_assign("top.analogMs.channel[14].ms.iirA", DumpEntry{top.analogMs.channel[14].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[14].ms.iirB", DumpEntry{top.analogMs.channel[14].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[14].ms.maxLimit", DumpEntry{top.analogMs.channel[14].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[14].ms.minLimit", DumpEntry{top.analogMs.channel[14].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[14].ms.accLength", DumpEntry{top.analogMs.channel[14].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[14].ms.firMask", DumpEntry{top.analogMs.channel[14].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[15].ms.algorithms", DumpEntry{top.analogMs.channel[15].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[15].ms.algorithms.alg", DumpEntry{top.analogMs.channel[15].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[15].ms.offset", DumpEntry{top.analogMs.channel[15].ms.offset});
        res.insert_or_assign("top.analogMs.channel[15].ms.iirA", DumpEntry{top.analogMs.channel[15].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[15].ms.iirB", DumpEntry{top.analogMs.channel[15].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[15].ms.maxLimit", DumpEntry{top.analogMs.channel[15].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[15].ms.minLimit", DumpEntry{top.analogMs.channel[15].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[15].ms.accLength", DumpEntry{top.analogMs.channel[15].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[15].ms.firMask", DumpEntry{top.analogMs.channel[15].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[16].ms.algorithms", DumpEntry{top.analogMs.channel[16].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[16].ms.algorithms.alg", DumpEntry{top.analogMs.channel[16].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[16].ms.offset", DumpEntry{top.analogMs.channel[16].ms.offset});
        res.insert_or_assign("top.analogMs.channel[16].ms.iirA", DumpEntry{top.analogMs.channel[16].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[16].ms.iirB", DumpEntry{top.analogMs.channel[16].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[16].ms.maxLimit", DumpEntry{top.analogMs.channel[16].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[16].ms.minLimit", DumpEntry{top.analogMs.channel[16].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[16].ms.accLength", DumpEntry{top.analogMs.channel[16].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[16].ms.firMask", DumpEntry{top.analogMs.channel[16].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[17].ms.algorithms", DumpEntry{top.analogMs.channel[17].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[17].ms.algorithms.alg", DumpEntry{top.analogMs.channel[17].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[17].ms.offset", DumpEntry{top.analogMs.channel[17].ms.offset});
        res.insert_or_assign("top.analogMs.channel[17].ms.iirA", DumpEntry{top.analogMs.channel[17].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[17].ms.iirB", DumpEntry{top.analogMs.channel[17].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[17].ms.maxLimit", DumpEntry{top.analogMs.channel[17].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[17].ms.minLimit", DumpEntry{top.analogMs.channel[17].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[17].ms.accLength", DumpEntry{top.analogMs.channel[17].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[17].ms.firMask", DumpEntry{top.analogMs.channel[17].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[18].ms.algorithms", DumpEntry{top.analogMs.channel[18].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[18].ms.algorithms.alg", DumpEntry{top.analogMs.channel[18].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[18].ms.offset", DumpEntry{top.analogMs.channel[18].ms.offset});
        res.insert_or_assign("top.analogMs.channel[18].ms.iirA", DumpEntry{top.analogMs.channel[18].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[18].ms.iirB", DumpEntry{top.analogMs.channel[18].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[18].ms.maxLimit", DumpEntry{top.analogMs.channel[18].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[18].ms.minLimit", DumpEntry{top.analogMs.channel[18].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[18].ms.accLength", DumpEntry{top.analogMs.channel[18].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[18].ms.firMask", DumpEntry{top.analogMs.channel[18].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[19].ms.algorithms", DumpEntry{top.analogMs.channel[19].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[19].ms.algorithms.alg", DumpEntry{top.analogMs.channel[19].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[19].ms.offset", DumpEntry{top.analogMs.channel[19].ms.offset});
        res.insert_or_assign("top.analogMs.channel[19].ms.iirA", DumpEntry{top.analogMs.channel[19].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[19].ms.iirB", DumpEntry{top.analogMs.channel[19].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[19].ms.maxLimit", DumpEntry{top.analogMs.channel[19].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[19].ms.minLimit", DumpEntry{top.analogMs.channel[19].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[19].ms.accLength", DumpEntry{top.analogMs.channel[19].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[19].ms.firMask", DumpEntry{top.analogMs.channel[19].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[20].ms.algorithms", DumpEntry{top.analogMs.channel[20].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[20].ms.algorithms.alg", DumpEntry{top.analogMs.channel[20].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[20].ms.offset", DumpEntry{top.analogMs.channel[20].ms.offset});
        res.insert_or_assign("top.analogMs.channel[20].ms.iirA", DumpEntry{top.analogMs.channel[20].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[20].ms.iirB", DumpEntry{top.analogMs.channel[20].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[20].ms.maxLimit", DumpEntry{top.analogMs.channel[20].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[20].ms.minLimit", DumpEntry{top.analogMs.channel[20].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[20].ms.accLength", DumpEntry{top.analogMs.channel[20].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[20].ms.firMask", DumpEntry{top.analogMs.channel[20].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[21].ms.algorithms", DumpEntry{top.analogMs.channel[21].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[21].ms.algorithms.alg", DumpEntry{top.analogMs.channel[21].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[21].ms.offset", DumpEntry{top.analogMs.channel[21].ms.offset});
        res.insert_or_assign("top.analogMs.channel[21].ms.iirA", DumpEntry{top.analogMs.channel[21].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[21].ms.iirB", DumpEntry{top.analogMs.channel[21].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[21].ms.maxLimit", DumpEntry{top.analogMs.channel[21].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[21].ms.minLimit", DumpEntry{top.analogMs.channel[21].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[21].ms.accLength", DumpEntry{top.analogMs.channel[21].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[21].ms.firMask", DumpEntry{top.analogMs.channel[21].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[22].ms.algorithms", DumpEntry{top.analogMs.channel[22].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[22].ms.algorithms.alg", DumpEntry{top.analogMs.channel[22].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[22].ms.offset", DumpEntry{top.analogMs.channel[22].ms.offset});
        res.insert_or_assign("top.analogMs.channel[22].ms.iirA", DumpEntry{top.analogMs.channel[22].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[22].ms.iirB", DumpEntry{top.analogMs.channel[22].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[22].ms.maxLimit", DumpEntry{top.analogMs.channel[22].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[22].ms.minLimit", DumpEntry{top.analogMs.channel[22].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[22].ms.accLength", DumpEntry{top.analogMs.channel[22].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[22].ms.firMask", DumpEntry{top.analogMs.channel[22].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[23].ms.algorithms", DumpEntry{top.analogMs.channel[23].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[23].ms.algorithms.alg", DumpEntry{top.analogMs.channel[23].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[23].ms.offset", DumpEntry{top.analogMs.channel[23].ms.offset});
        res.insert_or_assign("top.analogMs.channel[23].ms.iirA", DumpEntry{top.analogMs.channel[23].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[23].ms.iirB", DumpEntry{top.analogMs.channel[23].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[23].ms.maxLimit", DumpEntry{top.analogMs.channel[23].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[23].ms.minLimit", DumpEntry{top.analogMs.channel[23].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[23].ms.accLength", DumpEntry{top.analogMs.channel[23].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[23].ms.firMask", DumpEntry{top.analogMs.channel[23].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[24].ms.algorithms", DumpEntry{top.analogMs.channel[24].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[24].ms.algorithms.alg", DumpEntry{top.analogMs.channel[24].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[24].ms.offset", DumpEntry{top.analogMs.channel[24].ms.offset});
        res.insert_or_assign("top.analogMs.channel[24].ms.iirA", DumpEntry{top.analogMs.channel[24].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[24].ms.iirB", DumpEntry{top.analogMs.channel[24].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[24].ms.maxLimit", DumpEntry{top.analogMs.channel[24].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[24].ms.minLimit", DumpEntry{top.analogMs.channel[24].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[24].ms.accLength", DumpEntry{top.analogMs.channel[24].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[24].ms.firMask", DumpEntry{top.analogMs.channel[24].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[25].ms.algorithms", DumpEntry{top.analogMs.channel[25].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[25].ms.algorithms.alg", DumpEntry{top.analogMs.channel[25].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[25].ms.offset", DumpEntry{top.analogMs.channel[25].ms.offset});
        res.insert_or_assign("top.analogMs.channel[25].ms.iirA", DumpEntry{top.analogMs.channel[25].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[25].ms.iirB", DumpEntry{top.analogMs.channel[25].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[25].ms.maxLimit", DumpEntry{top.analogMs.channel[25].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[25].ms.minLimit", DumpEntry{top.analogMs.channel[25].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[25].ms.accLength", DumpEntry{top.analogMs.channel[25].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[25].ms.firMask", DumpEntry{top.analogMs.channel[25].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[26].ms.algorithms", DumpEntry{top.analogMs.channel[26].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[26].ms.algorithms.alg", DumpEntry{top.analogMs.channel[26].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[26].ms.offset", DumpEntry{top.analogMs.channel[26].ms.offset});
        res.insert_or_assign("top.analogMs.channel[26].ms.iirA", DumpEntry{top.analogMs.channel[26].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[26].ms.iirB", DumpEntry{top.analogMs.channel[26].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[26].ms.maxLimit", DumpEntry{top.analogMs.channel[26].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[26].ms.minLimit", DumpEntry{top.analogMs.channel[26].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[26].ms.accLength", DumpEntry{top.analogMs.channel[26].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[26].ms.firMask", DumpEntry{top.analogMs.channel[26].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[27].ms.algorithms", DumpEntry{top.analogMs.channel[27].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[27].ms.algorithms.alg", DumpEntry{top.analogMs.channel[27].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[27].ms.offset", DumpEntry{top.analogMs.channel[27].ms.offset});
        res.insert_or_assign("top.analogMs.channel[27].ms.iirA", DumpEntry{top.analogMs.channel[27].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[27].ms.iirB", DumpEntry{top.analogMs.channel[27].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[27].ms.maxLimit", DumpEntry{top.analogMs.channel[27].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[27].ms.minLimit", DumpEntry{top.analogMs.channel[27].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[27].ms.accLength", DumpEntry{top.analogMs.channel[27].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[27].ms.firMask", DumpEntry{top.analogMs.channel[27].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[28].ms.algorithms", DumpEntry{top.analogMs.channel[28].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[28].ms.algorithms.alg", DumpEntry{top.analogMs.channel[28].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[28].ms.offset", DumpEntry{top.analogMs.channel[28].ms.offset});
        res.insert_or_assign("top.analogMs.channel[28].ms.iirA", DumpEntry{top.analogMs.channel[28].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[28].ms.iirB", DumpEntry{top.analogMs.channel[28].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[28].ms.maxLimit", DumpEntry{top.analogMs.channel[28].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[28].ms.minLimit", DumpEntry{top.analogMs.channel[28].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[28].ms.accLength", DumpEntry{top.analogMs.channel[28].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[28].ms.firMask", DumpEntry{top.analogMs.channel[28].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[29].ms.algorithms", DumpEntry{top.analogMs.channel[29].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[29].ms.algorithms.alg", DumpEntry{top.analogMs.channel[29].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[29].ms.offset", DumpEntry{top.analogMs.channel[29].ms.offset});
        res.insert_or_assign("top.analogMs.channel[29].ms.iirA", DumpEntry{top.analogMs.channel[29].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[29].ms.iirB", DumpEntry{top.analogMs.channel[29].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[29].ms.maxLimit", DumpEntry{top.analogMs.channel[29].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[29].ms.minLimit", DumpEntry{top.analogMs.channel[29].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[29].ms.accLength", DumpEntry{top.analogMs.channel[29].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[29].ms.firMask", DumpEntry{top.analogMs.channel[29].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[30].ms.algorithms", DumpEntry{top.analogMs.channel[30].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[30].ms.algorithms.alg", DumpEntry{top.analogMs.channel[30].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[30].ms.offset", DumpEntry{top.analogMs.channel[30].ms.offset});
        res.insert_or_assign("top.analogMs.channel[30].ms.iirA", DumpEntry{top.analogMs.channel[30].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[30].ms.iirB", DumpEntry{top.analogMs.channel[30].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[30].ms.maxLimit", DumpEntry{top.analogMs.channel[30].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[30].ms.minLimit", DumpEntry{top.analogMs.channel[30].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[30].ms.accLength", DumpEntry{top.analogMs.channel[30].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[30].ms.firMask", DumpEntry{top.analogMs.channel[30].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[31].ms.algorithms", DumpEntry{top.analogMs.channel[31].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[31].ms.algorithms.alg", DumpEntry{top.analogMs.channel[31].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[31].ms.offset", DumpEntry{top.analogMs.channel[31].ms.offset});
        res.insert_or_assign("top.analogMs.channel[31].ms.iirA", DumpEntry{top.analogMs.channel[31].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[31].ms.iirB", DumpEntry{top.analogMs.channel[31].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[31].ms.maxLimit", DumpEntry{top.analogMs.channel[31].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[31].ms.minLimit", DumpEntry{top.analogMs.channel[31].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[31].ms.accLength", DumpEntry{top.analogMs.channel[31].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[31].ms.firMask", DumpEntry{top.analogMs.channel[31].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[32].ms.algorithms", DumpEntry{top.analogMs.channel[32].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[32].ms.algorithms.alg", DumpEntry{top.analogMs.channel[32].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[32].ms.offset", DumpEntry{top.analogMs.channel[32].ms.offset});
        res.insert_or_assign("top.analogMs.channel[32].ms.iirA", DumpEntry{top.analogMs.channel[32].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[32].ms.iirB", DumpEntry{top.analogMs.channel[32].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[32].ms.maxLimit", DumpEntry{top.analogMs.channel[32].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[32].ms.minLimit", DumpEntry{top.analogMs.channel[32].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[32].ms.accLength", DumpEntry{top.analogMs.channel[32].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[32].ms.firMask", DumpEntry{top.analogMs.channel[32].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[33].ms.algorithms", DumpEntry{top.analogMs.channel[33].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[33].ms.algorithms.alg", DumpEntry{top.analogMs.channel[33].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[33].ms.offset", DumpEntry{top.analogMs.channel[33].ms.offset});
        res.insert_or_assign("top.analogMs.channel[33].ms.iirA", DumpEntry{top.analogMs.channel[33].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[33].ms.iirB", DumpEntry{top.analogMs.channel[33].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[33].ms.maxLimit", DumpEntry{top.analogMs.channel[33].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[33].ms.minLimit", DumpEntry{top.analogMs.channel[33].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[33].ms.accLength", DumpEntry{top.analogMs.channel[33].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[33].ms.firMask", DumpEntry{top.analogMs.channel[33].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[34].ms.algorithms", DumpEntry{top.analogMs.channel[34].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[34].ms.algorithms.alg", DumpEntry{top.analogMs.channel[34].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[34].ms.offset", DumpEntry{top.analogMs.channel[34].ms.offset});
        res.insert_or_assign("top.analogMs.channel[34].ms.iirA", DumpEntry{top.analogMs.channel[34].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[34].ms.iirB", DumpEntry{top.analogMs.channel[34].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[34].ms.maxLimit", DumpEntry{top.analogMs.channel[34].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[34].ms.minLimit", DumpEntry{top.analogMs.channel[34].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[34].ms.accLength", DumpEntry{top.analogMs.channel[34].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[34].ms.firMask", DumpEntry{top.analogMs.channel[34].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[35].ms.algorithms", DumpEntry{top.analogMs.channel[35].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[35].ms.algorithms.alg", DumpEntry{top.analogMs.channel[35].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[35].ms.offset", DumpEntry{top.analogMs.channel[35].ms.offset});
        res.insert_or_assign("top.analogMs.channel[35].ms.iirA", DumpEntry{top.analogMs.channel[35].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[35].ms.iirB", DumpEntry{top.analogMs.channel[35].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[35].ms.maxLimit", DumpEntry{top.analogMs.channel[35].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[35].ms.minLimit", DumpEntry{top.analogMs.channel[35].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[35].ms.accLength", DumpEntry{top.analogMs.channel[35].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[35].ms.firMask", DumpEntry{top.analogMs.channel[35].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[36].ms.algorithms", DumpEntry{top.analogMs.channel[36].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[36].ms.algorithms.alg", DumpEntry{top.analogMs.channel[36].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[36].ms.offset", DumpEntry{top.analogMs.channel[36].ms.offset});
        res.insert_or_assign("top.analogMs.channel[36].ms.iirA", DumpEntry{top.analogMs.channel[36].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[36].ms.iirB", DumpEntry{top.analogMs.channel[36].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[36].ms.maxLimit", DumpEntry{top.analogMs.channel[36].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[36].ms.minLimit", DumpEntry{top.analogMs.channel[36].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[36].ms.accLength", DumpEntry{top.analogMs.channel[36].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[36].ms.firMask", DumpEntry{top.analogMs.channel[36].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[37].ms.algorithms", DumpEntry{top.analogMs.channel[37].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[37].ms.algorithms.alg", DumpEntry{top.analogMs.channel[37].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[37].ms.offset", DumpEntry{top.analogMs.channel[37].ms.offset});
        res.insert_or_assign("top.analogMs.channel[37].ms.iirA", DumpEntry{top.analogMs.channel[37].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[37].ms.iirB", DumpEntry{top.analogMs.channel[37].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[37].ms.maxLimit", DumpEntry{top.analogMs.channel[37].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[37].ms.minLimit", DumpEntry{top.analogMs.channel[37].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[37].ms.accLength", DumpEntry{top.analogMs.channel[37].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[37].ms.firMask", DumpEntry{top.analogMs.channel[37].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[38].ms.algorithms", DumpEntry{top.analogMs.channel[38].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[38].ms.algorithms.alg", DumpEntry{top.analogMs.channel[38].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[38].ms.offset", DumpEntry{top.analogMs.channel[38].ms.offset});
        res.insert_or_assign("top.analogMs.channel[38].ms.iirA", DumpEntry{top.analogMs.channel[38].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[38].ms.iirB", DumpEntry{top.analogMs.channel[38].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[38].ms.maxLimit", DumpEntry{top.analogMs.channel[38].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[38].ms.minLimit", DumpEntry{top.analogMs.channel[38].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[38].ms.accLength", DumpEntry{top.analogMs.channel[38].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[38].ms.firMask", DumpEntry{top.analogMs.channel[38].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[39].ms.algorithms", DumpEntry{top.analogMs.channel[39].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[39].ms.algorithms.alg", DumpEntry{top.analogMs.channel[39].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[39].ms.offset", DumpEntry{top.analogMs.channel[39].ms.offset});
        res.insert_or_assign("top.analogMs.channel[39].ms.iirA", DumpEntry{top.analogMs.channel[39].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[39].ms.iirB", DumpEntry{top.analogMs.channel[39].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[39].ms.maxLimit", DumpEntry{top.analogMs.channel[39].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[39].ms.minLimit", DumpEntry{top.analogMs.channel[39].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[39].ms.accLength", DumpEntry{top.analogMs.channel[39].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[39].ms.firMask", DumpEntry{top.analogMs.channel[39].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[40].ms.algorithms", DumpEntry{top.analogMs.channel[40].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[40].ms.algorithms.alg", DumpEntry{top.analogMs.channel[40].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[40].ms.offset", DumpEntry{top.analogMs.channel[40].ms.offset});
        res.insert_or_assign("top.analogMs.channel[40].ms.iirA", DumpEntry{top.analogMs.channel[40].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[40].ms.iirB", DumpEntry{top.analogMs.channel[40].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[40].ms.maxLimit", DumpEntry{top.analogMs.channel[40].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[40].ms.minLimit", DumpEntry{top.analogMs.channel[40].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[40].ms.accLength", DumpEntry{top.analogMs.channel[40].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[40].ms.firMask", DumpEntry{top.analogMs.channel[40].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[41].ms.algorithms", DumpEntry{top.analogMs.channel[41].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[41].ms.algorithms.alg", DumpEntry{top.analogMs.channel[41].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[41].ms.offset", DumpEntry{top.analogMs.channel[41].ms.offset});
        res.insert_or_assign("top.analogMs.channel[41].ms.iirA", DumpEntry{top.analogMs.channel[41].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[41].ms.iirB", DumpEntry{top.analogMs.channel[41].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[41].ms.maxLimit", DumpEntry{top.analogMs.channel[41].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[41].ms.minLimit", DumpEntry{top.analogMs.channel[41].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[41].ms.accLength", DumpEntry{top.analogMs.channel[41].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[41].ms.firMask", DumpEntry{top.analogMs.channel[41].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[42].ms.algorithms", DumpEntry{top.analogMs.channel[42].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[42].ms.algorithms.alg", DumpEntry{top.analogMs.channel[42].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[42].ms.offset", DumpEntry{top.analogMs.channel[42].ms.offset});
        res.insert_or_assign("top.analogMs.channel[42].ms.iirA", DumpEntry{top.analogMs.channel[42].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[42].ms.iirB", DumpEntry{top.analogMs.channel[42].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[42].ms.maxLimit", DumpEntry{top.analogMs.channel[42].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[42].ms.minLimit", DumpEntry{top.analogMs.channel[42].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[42].ms.accLength", DumpEntry{top.analogMs.channel[42].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[42].ms.firMask", DumpEntry{top.analogMs.channel[42].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[43].ms.algorithms", DumpEntry{top.analogMs.channel[43].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[43].ms.algorithms.alg", DumpEntry{top.analogMs.channel[43].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[43].ms.offset", DumpEntry{top.analogMs.channel[43].ms.offset});
        res.insert_or_assign("top.analogMs.channel[43].ms.iirA", DumpEntry{top.analogMs.channel[43].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[43].ms.iirB", DumpEntry{top.analogMs.channel[43].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[43].ms.maxLimit", DumpEntry{top.analogMs.channel[43].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[43].ms.minLimit", DumpEntry{top.analogMs.channel[43].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[43].ms.accLength", DumpEntry{top.analogMs.channel[43].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[43].ms.firMask", DumpEntry{top.analogMs.channel[43].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[44].ms.algorithms", DumpEntry{top.analogMs.channel[44].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[44].ms.algorithms.alg", DumpEntry{top.analogMs.channel[44].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[44].ms.offset", DumpEntry{top.analogMs.channel[44].ms.offset});
        res.insert_or_assign("top.analogMs.channel[44].ms.iirA", DumpEntry{top.analogMs.channel[44].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[44].ms.iirB", DumpEntry{top.analogMs.channel[44].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[44].ms.maxLimit", DumpEntry{top.analogMs.channel[44].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[44].ms.minLimit", DumpEntry{top.analogMs.channel[44].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[44].ms.accLength", DumpEntry{top.analogMs.channel[44].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[44].ms.firMask", DumpEntry{top.analogMs.channel[44].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[45].ms.algorithms", DumpEntry{top.analogMs.channel[45].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[45].ms.algorithms.alg", DumpEntry{top.analogMs.channel[45].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[45].ms.offset", DumpEntry{top.analogMs.channel[45].ms.offset});
        res.insert_or_assign("top.analogMs.channel[45].ms.iirA", DumpEntry{top.analogMs.channel[45].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[45].ms.iirB", DumpEntry{top.analogMs.channel[45].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[45].ms.maxLimit", DumpEntry{top.analogMs.channel[45].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[45].ms.minLimit", DumpEntry{top.analogMs.channel[45].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[45].ms.accLength", DumpEntry{top.analogMs.channel[45].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[45].ms.firMask", DumpEntry{top.analogMs.channel[45].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[46].ms.algorithms", DumpEntry{top.analogMs.channel[46].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[46].ms.algorithms.alg", DumpEntry{top.analogMs.channel[46].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[46].ms.offset", DumpEntry{top.analogMs.channel[46].ms.offset});
        res.insert_or_assign("top.analogMs.channel[46].ms.iirA", DumpEntry{top.analogMs.channel[46].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[46].ms.iirB", DumpEntry{top.analogMs.channel[46].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[46].ms.maxLimit", DumpEntry{top.analogMs.channel[46].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[46].ms.minLimit", DumpEntry{top.analogMs.channel[46].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[46].ms.accLength", DumpEntry{top.analogMs.channel[46].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[46].ms.firMask", DumpEntry{top.analogMs.channel[46].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[47].ms.algorithms", DumpEntry{top.analogMs.channel[47].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[47].ms.algorithms.alg", DumpEntry{top.analogMs.channel[47].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[47].ms.offset", DumpEntry{top.analogMs.channel[47].ms.offset});
        res.insert_or_assign("top.analogMs.channel[47].ms.iirA", DumpEntry{top.analogMs.channel[47].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[47].ms.iirB", DumpEntry{top.analogMs.channel[47].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[47].ms.maxLimit", DumpEntry{top.analogMs.channel[47].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[47].ms.minLimit", DumpEntry{top.analogMs.channel[47].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[47].ms.accLength", DumpEntry{top.analogMs.channel[47].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[47].ms.firMask", DumpEntry{top.analogMs.channel[47].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[48].ms.algorithms", DumpEntry{top.analogMs.channel[48].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[48].ms.algorithms.alg", DumpEntry{top.analogMs.channel[48].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[48].ms.offset", DumpEntry{top.analogMs.channel[48].ms.offset});
        res.insert_or_assign("top.analogMs.channel[48].ms.iirA", DumpEntry{top.analogMs.channel[48].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[48].ms.iirB", DumpEntry{top.analogMs.channel[48].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[48].ms.maxLimit", DumpEntry{top.analogMs.channel[48].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[48].ms.minLimit", DumpEntry{top.analogMs.channel[48].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[48].ms.accLength", DumpEntry{top.analogMs.channel[48].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[48].ms.firMask", DumpEntry{top.analogMs.channel[48].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[49].ms.algorithms", DumpEntry{top.analogMs.channel[49].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[49].ms.algorithms.alg", DumpEntry{top.analogMs.channel[49].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[49].ms.offset", DumpEntry{top.analogMs.channel[49].ms.offset});
        res.insert_or_assign("top.analogMs.channel[49].ms.iirA", DumpEntry{top.analogMs.channel[49].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[49].ms.iirB", DumpEntry{top.analogMs.channel[49].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[49].ms.maxLimit", DumpEntry{top.analogMs.channel[49].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[49].ms.minLimit", DumpEntry{top.analogMs.channel[49].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[49].ms.accLength", DumpEntry{top.analogMs.channel[49].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[49].ms.firMask", DumpEntry{top.analogMs.channel[49].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[50].ms.algorithms", DumpEntry{top.analogMs.channel[50].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[50].ms.algorithms.alg", DumpEntry{top.analogMs.channel[50].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[50].ms.offset", DumpEntry{top.analogMs.channel[50].ms.offset});
        res.insert_or_assign("top.analogMs.channel[50].ms.iirA", DumpEntry{top.analogMs.channel[50].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[50].ms.iirB", DumpEntry{top.analogMs.channel[50].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[50].ms.maxLimit", DumpEntry{top.analogMs.channel[50].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[50].ms.minLimit", DumpEntry{top.analogMs.channel[50].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[50].ms.accLength", DumpEntry{top.analogMs.channel[50].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[50].ms.firMask", DumpEntry{top.analogMs.channel[50].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[51].ms.algorithms", DumpEntry{top.analogMs.channel[51].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[51].ms.algorithms.alg", DumpEntry{top.analogMs.channel[51].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[51].ms.offset", DumpEntry{top.analogMs.channel[51].ms.offset});
        res.insert_or_assign("top.analogMs.channel[51].ms.iirA", DumpEntry{top.analogMs.channel[51].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[51].ms.iirB", DumpEntry{top.analogMs.channel[51].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[51].ms.maxLimit", DumpEntry{top.analogMs.channel[51].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[51].ms.minLimit", DumpEntry{top.analogMs.channel[51].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[51].ms.accLength", DumpEntry{top.analogMs.channel[51].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[51].ms.firMask", DumpEntry{top.analogMs.channel[51].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[52].ms.algorithms", DumpEntry{top.analogMs.channel[52].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[52].ms.algorithms.alg", DumpEntry{top.analogMs.channel[52].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[52].ms.offset", DumpEntry{top.analogMs.channel[52].ms.offset});
        res.insert_or_assign("top.analogMs.channel[52].ms.iirA", DumpEntry{top.analogMs.channel[52].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[52].ms.iirB", DumpEntry{top.analogMs.channel[52].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[52].ms.maxLimit", DumpEntry{top.analogMs.channel[52].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[52].ms.minLimit", DumpEntry{top.analogMs.channel[52].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[52].ms.accLength", DumpEntry{top.analogMs.channel[52].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[52].ms.firMask", DumpEntry{top.analogMs.channel[52].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[53].ms.algorithms", DumpEntry{top.analogMs.channel[53].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[53].ms.algorithms.alg", DumpEntry{top.analogMs.channel[53].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[53].ms.offset", DumpEntry{top.analogMs.channel[53].ms.offset});
        res.insert_or_assign("top.analogMs.channel[53].ms.iirA", DumpEntry{top.analogMs.channel[53].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[53].ms.iirB", DumpEntry{top.analogMs.channel[53].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[53].ms.maxLimit", DumpEntry{top.analogMs.channel[53].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[53].ms.minLimit", DumpEntry{top.analogMs.channel[53].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[53].ms.accLength", DumpEntry{top.analogMs.channel[53].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[53].ms.firMask", DumpEntry{top.analogMs.channel[53].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[54].ms.algorithms", DumpEntry{top.analogMs.channel[54].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[54].ms.algorithms.alg", DumpEntry{top.analogMs.channel[54].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[54].ms.offset", DumpEntry{top.analogMs.channel[54].ms.offset});
        res.insert_or_assign("top.analogMs.channel[54].ms.iirA", DumpEntry{top.analogMs.channel[54].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[54].ms.iirB", DumpEntry{top.analogMs.channel[54].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[54].ms.maxLimit", DumpEntry{top.analogMs.channel[54].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[54].ms.minLimit", DumpEntry{top.analogMs.channel[54].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[54].ms.accLength", DumpEntry{top.analogMs.channel[54].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[54].ms.firMask", DumpEntry{top.analogMs.channel[54].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[55].ms.algorithms", DumpEntry{top.analogMs.channel[55].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[55].ms.algorithms.alg", DumpEntry{top.analogMs.channel[55].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[55].ms.offset", DumpEntry{top.analogMs.channel[55].ms.offset});
        res.insert_or_assign("top.analogMs.channel[55].ms.iirA", DumpEntry{top.analogMs.channel[55].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[55].ms.iirB", DumpEntry{top.analogMs.channel[55].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[55].ms.maxLimit", DumpEntry{top.analogMs.channel[55].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[55].ms.minLimit", DumpEntry{top.analogMs.channel[55].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[55].ms.accLength", DumpEntry{top.analogMs.channel[55].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[55].ms.firMask", DumpEntry{top.analogMs.channel[55].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[56].ms.algorithms", DumpEntry{top.analogMs.channel[56].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[56].ms.algorithms.alg", DumpEntry{top.analogMs.channel[56].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[56].ms.offset", DumpEntry{top.analogMs.channel[56].ms.offset});
        res.insert_or_assign("top.analogMs.channel[56].ms.iirA", DumpEntry{top.analogMs.channel[56].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[56].ms.iirB", DumpEntry{top.analogMs.channel[56].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[56].ms.maxLimit", DumpEntry{top.analogMs.channel[56].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[56].ms.minLimit", DumpEntry{top.analogMs.channel[56].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[56].ms.accLength", DumpEntry{top.analogMs.channel[56].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[56].ms.firMask", DumpEntry{top.analogMs.channel[56].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[57].ms.algorithms", DumpEntry{top.analogMs.channel[57].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[57].ms.algorithms.alg", DumpEntry{top.analogMs.channel[57].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[57].ms.offset", DumpEntry{top.analogMs.channel[57].ms.offset});
        res.insert_or_assign("top.analogMs.channel[57].ms.iirA", DumpEntry{top.analogMs.channel[57].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[57].ms.iirB", DumpEntry{top.analogMs.channel[57].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[57].ms.maxLimit", DumpEntry{top.analogMs.channel[57].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[57].ms.minLimit", DumpEntry{top.analogMs.channel[57].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[57].ms.accLength", DumpEntry{top.analogMs.channel[57].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[57].ms.firMask", DumpEntry{top.analogMs.channel[57].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[58].ms.algorithms", DumpEntry{top.analogMs.channel[58].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[58].ms.algorithms.alg", DumpEntry{top.analogMs.channel[58].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[58].ms.offset", DumpEntry{top.analogMs.channel[58].ms.offset});
        res.insert_or_assign("top.analogMs.channel[58].ms.iirA", DumpEntry{top.analogMs.channel[58].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[58].ms.iirB", DumpEntry{top.analogMs.channel[58].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[58].ms.maxLimit", DumpEntry{top.analogMs.channel[58].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[58].ms.minLimit", DumpEntry{top.analogMs.channel[58].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[58].ms.accLength", DumpEntry{top.analogMs.channel[58].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[58].ms.firMask", DumpEntry{top.analogMs.channel[58].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[59].ms.algorithms", DumpEntry{top.analogMs.channel[59].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[59].ms.algorithms.alg", DumpEntry{top.analogMs.channel[59].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[59].ms.offset", DumpEntry{top.analogMs.channel[59].ms.offset});
        res.insert_or_assign("top.analogMs.channel[59].ms.iirA", DumpEntry{top.analogMs.channel[59].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[59].ms.iirB", DumpEntry{top.analogMs.channel[59].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[59].ms.maxLimit", DumpEntry{top.analogMs.channel[59].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[59].ms.minLimit", DumpEntry{top.analogMs.channel[59].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[59].ms.accLength", DumpEntry{top.analogMs.channel[59].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[59].ms.firMask", DumpEntry{top.analogMs.channel[59].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[60].ms.algorithms", DumpEntry{top.analogMs.channel[60].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[60].ms.algorithms.alg", DumpEntry{top.analogMs.channel[60].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[60].ms.offset", DumpEntry{top.analogMs.channel[60].ms.offset});
        res.insert_or_assign("top.analogMs.channel[60].ms.iirA", DumpEntry{top.analogMs.channel[60].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[60].ms.iirB", DumpEntry{top.analogMs.channel[60].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[60].ms.maxLimit", DumpEntry{top.analogMs.channel[60].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[60].ms.minLimit", DumpEntry{top.analogMs.channel[60].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[60].ms.accLength", DumpEntry{top.analogMs.channel[60].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[60].ms.firMask", DumpEntry{top.analogMs.channel[60].ms.firMask});
        res.insert_or_assign(
            "top.analogMs.channel[61].ms.algorithms", DumpEntry{top.analogMs.channel[61].ms.algorithms}
        );
        res.insert_or_assign(
            "top.analogMs.channel[61].ms.algorithms.alg", DumpEntry{top.analogMs.channel[61].ms.algorithms.alg}
        );
        res.insert_or_assign("top.analogMs.channel[61].ms.offset", DumpEntry{top.analogMs.channel[61].ms.offset});
        res.insert_or_assign("top.analogMs.channel[61].ms.iirA", DumpEntry{top.analogMs.channel[61].ms.iirA});
        res.insert_or_assign("top.analogMs.channel[61].ms.iirB", DumpEntry{top.analogMs.channel[61].ms.iirB});
        res.insert_or_assign("top.analogMs.channel[61].ms.maxLimit", DumpEntry{top.analogMs.channel[61].ms.maxLimit});
        res.insert_or_assign("top.analogMs.channel[61].ms.minLimit", DumpEntry{top.analogMs.channel[61].ms.minLimit});
        res.insert_or_assign("top.analogMs.channel[61].ms.accLength", DumpEntry{top.analogMs.channel[61].ms.accLength});
        res.insert_or_assign("top.analogMs.channel[61].ms.firMask", DumpEntry{top.analogMs.channel[61].ms.firMask});
        res.insert_or_assign("top.dig.digI0.staticParams", DumpEntry{top.dig.digI0.staticParams});
        res.insert_or_assign("top.dig.digI0.staticParams.invertIsEn", DumpEntry{top.dig.digI0.staticParams.invertIsEn});
        res.insert_or_assign("top.dig.digI0.staticParams.enableIsEn", DumpEntry{top.dig.digI0.staticParams.enableIsEn});
        res.insert_or_assign("top.dig.digI0.staticParams.latchIsEn", DumpEntry{top.dig.digI0.staticParams.latchIsEn});
        res.insert_or_assign(
            "top.dig.digI0.staticParams.deglitchIsEn", DumpEntry{top.dig.digI0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("top.dig.digI0.staticParams.reTimeIsEn", DumpEntry{top.dig.digI0.staticParams.reTimeIsEn});
        res.insert_or_assign(
            "top.dig.digI0.staticParams.numChannels", DumpEntry{top.dig.digI0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digI0.data", DumpEntry{top.dig.digI0.data});
        res.insert_or_assign("top.dig.digI0.dataChanged", DumpEntry{top.dig.digI0.dataChanged});
        res.insert_or_assign("top.dig.digI0.invert", DumpEntry{top.dig.digI0.invert});
        res.insert_or_assign("top.dig.digI0.enable", DumpEntry{top.dig.digI0.enable});
        res.insert_or_assign("top.dig.digI0.latch", DumpEntry{top.dig.digI0.latch});
        res.insert_or_assign("top.dig.digI0.rstLatch", DumpEntry{top.dig.digI0.rstLatch});
        res.insert_or_assign("top.dig.digI0.risingInterrupt", DumpEntry{top.dig.digI0.risingInterrupt});
        res.insert_or_assign("top.dig.digI0.fallingInterrupt", DumpEntry{top.dig.digI0.fallingInterrupt});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[0].val", DumpEntry{top.dig.digI0.filterLengthSc[0].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[1].val", DumpEntry{top.dig.digI0.filterLengthSc[1].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[2].val", DumpEntry{top.dig.digI0.filterLengthSc[2].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[3].val", DumpEntry{top.dig.digI0.filterLengthSc[3].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[4].val", DumpEntry{top.dig.digI0.filterLengthSc[4].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[5].val", DumpEntry{top.dig.digI0.filterLengthSc[5].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[6].val", DumpEntry{top.dig.digI0.filterLengthSc[6].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[7].val", DumpEntry{top.dig.digI0.filterLengthSc[7].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[8].val", DumpEntry{top.dig.digI0.filterLengthSc[8].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[9].val", DumpEntry{top.dig.digI0.filterLengthSc[9].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[10].val", DumpEntry{top.dig.digI0.filterLengthSc[10].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[11].val", DumpEntry{top.dig.digI0.filterLengthSc[11].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[12].val", DumpEntry{top.dig.digI0.filterLengthSc[12].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[13].val", DumpEntry{top.dig.digI0.filterLengthSc[13].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[14].val", DumpEntry{top.dig.digI0.filterLengthSc[14].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[15].val", DumpEntry{top.dig.digI0.filterLengthSc[15].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[16].val", DumpEntry{top.dig.digI0.filterLengthSc[16].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[17].val", DumpEntry{top.dig.digI0.filterLengthSc[17].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[18].val", DumpEntry{top.dig.digI0.filterLengthSc[18].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[19].val", DumpEntry{top.dig.digI0.filterLengthSc[19].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[20].val", DumpEntry{top.dig.digI0.filterLengthSc[20].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[21].val", DumpEntry{top.dig.digI0.filterLengthSc[21].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[22].val", DumpEntry{top.dig.digI0.filterLengthSc[22].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[23].val", DumpEntry{top.dig.digI0.filterLengthSc[23].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[24].val", DumpEntry{top.dig.digI0.filterLengthSc[24].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[25].val", DumpEntry{top.dig.digI0.filterLengthSc[25].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[26].val", DumpEntry{top.dig.digI0.filterLengthSc[26].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[27].val", DumpEntry{top.dig.digI0.filterLengthSc[27].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[28].val", DumpEntry{top.dig.digI0.filterLengthSc[28].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[29].val", DumpEntry{top.dig.digI0.filterLengthSc[29].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[30].val", DumpEntry{top.dig.digI0.filterLengthSc[30].val});
        res.insert_or_assign("top.dig.digI0.filterLengthSc[31].val", DumpEntry{top.dig.digI0.filterLengthSc[31].val});
        res.insert_or_assign("top.dig.digI0.reTime[0].s", DumpEntry{top.dig.digI0.reTime[0].s});
        res.insert_or_assign("top.dig.digI0.reTime[0].ns", DumpEntry{top.dig.digI0.reTime[0].ns});
        res.insert_or_assign("top.dig.digI0.reTime[1].s", DumpEntry{top.dig.digI0.reTime[1].s});
        res.insert_or_assign("top.dig.digI0.reTime[1].ns", DumpEntry{top.dig.digI0.reTime[1].ns});
        res.insert_or_assign("top.dig.digI0.reTime[2].s", DumpEntry{top.dig.digI0.reTime[2].s});
        res.insert_or_assign("top.dig.digI0.reTime[2].ns", DumpEntry{top.dig.digI0.reTime[2].ns});
        res.insert_or_assign("top.dig.digI0.reTime[3].s", DumpEntry{top.dig.digI0.reTime[3].s});
        res.insert_or_assign("top.dig.digI0.reTime[3].ns", DumpEntry{top.dig.digI0.reTime[3].ns});
        res.insert_or_assign("top.dig.digI0.reTime[4].s", DumpEntry{top.dig.digI0.reTime[4].s});
        res.insert_or_assign("top.dig.digI0.reTime[4].ns", DumpEntry{top.dig.digI0.reTime[4].ns});
        res.insert_or_assign("top.dig.digI0.reTime[5].s", DumpEntry{top.dig.digI0.reTime[5].s});
        res.insert_or_assign("top.dig.digI0.reTime[5].ns", DumpEntry{top.dig.digI0.reTime[5].ns});
        res.insert_or_assign("top.dig.digI0.reTime[6].s", DumpEntry{top.dig.digI0.reTime[6].s});
        res.insert_or_assign("top.dig.digI0.reTime[6].ns", DumpEntry{top.dig.digI0.reTime[6].ns});
        res.insert_or_assign("top.dig.digI0.reTime[7].s", DumpEntry{top.dig.digI0.reTime[7].s});
        res.insert_or_assign("top.dig.digI0.reTime[7].ns", DumpEntry{top.dig.digI0.reTime[7].ns});
        res.insert_or_assign("top.dig.digI0.reTime[8].s", DumpEntry{top.dig.digI0.reTime[8].s});
        res.insert_or_assign("top.dig.digI0.reTime[8].ns", DumpEntry{top.dig.digI0.reTime[8].ns});
        res.insert_or_assign("top.dig.digI0.reTime[9].s", DumpEntry{top.dig.digI0.reTime[9].s});
        res.insert_or_assign("top.dig.digI0.reTime[9].ns", DumpEntry{top.dig.digI0.reTime[9].ns});
        res.insert_or_assign("top.dig.digI0.reTime[10].s", DumpEntry{top.dig.digI0.reTime[10].s});
        res.insert_or_assign("top.dig.digI0.reTime[10].ns", DumpEntry{top.dig.digI0.reTime[10].ns});
        res.insert_or_assign("top.dig.digI0.reTime[11].s", DumpEntry{top.dig.digI0.reTime[11].s});
        res.insert_or_assign("top.dig.digI0.reTime[11].ns", DumpEntry{top.dig.digI0.reTime[11].ns});
        res.insert_or_assign("top.dig.digI0.reTime[12].s", DumpEntry{top.dig.digI0.reTime[12].s});
        res.insert_or_assign("top.dig.digI0.reTime[12].ns", DumpEntry{top.dig.digI0.reTime[12].ns});
        res.insert_or_assign("top.dig.digI0.reTime[13].s", DumpEntry{top.dig.digI0.reTime[13].s});
        res.insert_or_assign("top.dig.digI0.reTime[13].ns", DumpEntry{top.dig.digI0.reTime[13].ns});
        res.insert_or_assign("top.dig.digI0.reTime[14].s", DumpEntry{top.dig.digI0.reTime[14].s});
        res.insert_or_assign("top.dig.digI0.reTime[14].ns", DumpEntry{top.dig.digI0.reTime[14].ns});
        res.insert_or_assign("top.dig.digI0.reTime[15].s", DumpEntry{top.dig.digI0.reTime[15].s});
        res.insert_or_assign("top.dig.digI0.reTime[15].ns", DumpEntry{top.dig.digI0.reTime[15].ns});
        res.insert_or_assign("top.dig.digI0.reTime[16].s", DumpEntry{top.dig.digI0.reTime[16].s});
        res.insert_or_assign("top.dig.digI0.reTime[16].ns", DumpEntry{top.dig.digI0.reTime[16].ns});
        res.insert_or_assign("top.dig.digI0.reTime[17].s", DumpEntry{top.dig.digI0.reTime[17].s});
        res.insert_or_assign("top.dig.digI0.reTime[17].ns", DumpEntry{top.dig.digI0.reTime[17].ns});
        res.insert_or_assign("top.dig.digI0.reTime[18].s", DumpEntry{top.dig.digI0.reTime[18].s});
        res.insert_or_assign("top.dig.digI0.reTime[18].ns", DumpEntry{top.dig.digI0.reTime[18].ns});
        res.insert_or_assign("top.dig.digI0.reTime[19].s", DumpEntry{top.dig.digI0.reTime[19].s});
        res.insert_or_assign("top.dig.digI0.reTime[19].ns", DumpEntry{top.dig.digI0.reTime[19].ns});
        res.insert_or_assign("top.dig.digI0.reTime[20].s", DumpEntry{top.dig.digI0.reTime[20].s});
        res.insert_or_assign("top.dig.digI0.reTime[20].ns", DumpEntry{top.dig.digI0.reTime[20].ns});
        res.insert_or_assign("top.dig.digI0.reTime[21].s", DumpEntry{top.dig.digI0.reTime[21].s});
        res.insert_or_assign("top.dig.digI0.reTime[21].ns", DumpEntry{top.dig.digI0.reTime[21].ns});
        res.insert_or_assign("top.dig.digI0.reTime[22].s", DumpEntry{top.dig.digI0.reTime[22].s});
        res.insert_or_assign("top.dig.digI0.reTime[22].ns", DumpEntry{top.dig.digI0.reTime[22].ns});
        res.insert_or_assign("top.dig.digI0.reTime[23].s", DumpEntry{top.dig.digI0.reTime[23].s});
        res.insert_or_assign("top.dig.digI0.reTime[23].ns", DumpEntry{top.dig.digI0.reTime[23].ns});
        res.insert_or_assign("top.dig.digI0.reTime[24].s", DumpEntry{top.dig.digI0.reTime[24].s});
        res.insert_or_assign("top.dig.digI0.reTime[24].ns", DumpEntry{top.dig.digI0.reTime[24].ns});
        res.insert_or_assign("top.dig.digI0.reTime[25].s", DumpEntry{top.dig.digI0.reTime[25].s});
        res.insert_or_assign("top.dig.digI0.reTime[25].ns", DumpEntry{top.dig.digI0.reTime[25].ns});
        res.insert_or_assign("top.dig.digI0.reTime[26].s", DumpEntry{top.dig.digI0.reTime[26].s});
        res.insert_or_assign("top.dig.digI0.reTime[26].ns", DumpEntry{top.dig.digI0.reTime[26].ns});
        res.insert_or_assign("top.dig.digI0.reTime[27].s", DumpEntry{top.dig.digI0.reTime[27].s});
        res.insert_or_assign("top.dig.digI0.reTime[27].ns", DumpEntry{top.dig.digI0.reTime[27].ns});
        res.insert_or_assign("top.dig.digI0.reTime[28].s", DumpEntry{top.dig.digI0.reTime[28].s});
        res.insert_or_assign("top.dig.digI0.reTime[28].ns", DumpEntry{top.dig.digI0.reTime[28].ns});
        res.insert_or_assign("top.dig.digI0.reTime[29].s", DumpEntry{top.dig.digI0.reTime[29].s});
        res.insert_or_assign("top.dig.digI0.reTime[29].ns", DumpEntry{top.dig.digI0.reTime[29].ns});
        res.insert_or_assign("top.dig.digI0.reTime[30].s", DumpEntry{top.dig.digI0.reTime[30].s});
        res.insert_or_assign("top.dig.digI0.reTime[30].ns", DumpEntry{top.dig.digI0.reTime[30].ns});
        res.insert_or_assign("top.dig.digI0.reTime[31].s", DumpEntry{top.dig.digI0.reTime[31].s});
        res.insert_or_assign("top.dig.digI0.reTime[31].ns", DumpEntry{top.dig.digI0.reTime[31].ns});
        res.insert_or_assign("top.dig.digI1.staticParams", DumpEntry{top.dig.digI1.staticParams});
        res.insert_or_assign("top.dig.digI1.staticParams.invertIsEn", DumpEntry{top.dig.digI1.staticParams.invertIsEn});
        res.insert_or_assign("top.dig.digI1.staticParams.enableIsEn", DumpEntry{top.dig.digI1.staticParams.enableIsEn});
        res.insert_or_assign("top.dig.digI1.staticParams.latchIsEn", DumpEntry{top.dig.digI1.staticParams.latchIsEn});
        res.insert_or_assign(
            "top.dig.digI1.staticParams.deglitchIsEn", DumpEntry{top.dig.digI1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign("top.dig.digI1.staticParams.reTimeIsEn", DumpEntry{top.dig.digI1.staticParams.reTimeIsEn});
        res.insert_or_assign(
            "top.dig.digI1.staticParams.numChannels", DumpEntry{top.dig.digI1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digI1.data", DumpEntry{top.dig.digI1.data});
        res.insert_or_assign("top.dig.digI1.dataChanged", DumpEntry{top.dig.digI1.dataChanged});
        res.insert_or_assign("top.dig.digI1.invert", DumpEntry{top.dig.digI1.invert});
        res.insert_or_assign("top.dig.digI1.enable", DumpEntry{top.dig.digI1.enable});
        res.insert_or_assign("top.dig.digI1.latch", DumpEntry{top.dig.digI1.latch});
        res.insert_or_assign("top.dig.digI1.rstLatch", DumpEntry{top.dig.digI1.rstLatch});
        res.insert_or_assign("top.dig.digI1.risingInterrupt", DumpEntry{top.dig.digI1.risingInterrupt});
        res.insert_or_assign("top.dig.digI1.fallingInterrupt", DumpEntry{top.dig.digI1.fallingInterrupt});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[0].val", DumpEntry{top.dig.digI1.filterLengthSc[0].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[1].val", DumpEntry{top.dig.digI1.filterLengthSc[1].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[2].val", DumpEntry{top.dig.digI1.filterLengthSc[2].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[3].val", DumpEntry{top.dig.digI1.filterLengthSc[3].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[4].val", DumpEntry{top.dig.digI1.filterLengthSc[4].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[5].val", DumpEntry{top.dig.digI1.filterLengthSc[5].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[6].val", DumpEntry{top.dig.digI1.filterLengthSc[6].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[7].val", DumpEntry{top.dig.digI1.filterLengthSc[7].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[8].val", DumpEntry{top.dig.digI1.filterLengthSc[8].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[9].val", DumpEntry{top.dig.digI1.filterLengthSc[9].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[10].val", DumpEntry{top.dig.digI1.filterLengthSc[10].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[11].val", DumpEntry{top.dig.digI1.filterLengthSc[11].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[12].val", DumpEntry{top.dig.digI1.filterLengthSc[12].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[13].val", DumpEntry{top.dig.digI1.filterLengthSc[13].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[14].val", DumpEntry{top.dig.digI1.filterLengthSc[14].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[15].val", DumpEntry{top.dig.digI1.filterLengthSc[15].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[16].val", DumpEntry{top.dig.digI1.filterLengthSc[16].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[17].val", DumpEntry{top.dig.digI1.filterLengthSc[17].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[18].val", DumpEntry{top.dig.digI1.filterLengthSc[18].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[19].val", DumpEntry{top.dig.digI1.filterLengthSc[19].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[20].val", DumpEntry{top.dig.digI1.filterLengthSc[20].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[21].val", DumpEntry{top.dig.digI1.filterLengthSc[21].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[22].val", DumpEntry{top.dig.digI1.filterLengthSc[22].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[23].val", DumpEntry{top.dig.digI1.filterLengthSc[23].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[24].val", DumpEntry{top.dig.digI1.filterLengthSc[24].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[25].val", DumpEntry{top.dig.digI1.filterLengthSc[25].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[26].val", DumpEntry{top.dig.digI1.filterLengthSc[26].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[27].val", DumpEntry{top.dig.digI1.filterLengthSc[27].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[28].val", DumpEntry{top.dig.digI1.filterLengthSc[28].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[29].val", DumpEntry{top.dig.digI1.filterLengthSc[29].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[30].val", DumpEntry{top.dig.digI1.filterLengthSc[30].val});
        res.insert_or_assign("top.dig.digI1.filterLengthSc[31].val", DumpEntry{top.dig.digI1.filterLengthSc[31].val});
        res.insert_or_assign("top.dig.digI1.reTime[0].s", DumpEntry{top.dig.digI1.reTime[0].s});
        res.insert_or_assign("top.dig.digI1.reTime[0].ns", DumpEntry{top.dig.digI1.reTime[0].ns});
        res.insert_or_assign("top.dig.digI1.reTime[1].s", DumpEntry{top.dig.digI1.reTime[1].s});
        res.insert_or_assign("top.dig.digI1.reTime[1].ns", DumpEntry{top.dig.digI1.reTime[1].ns});
        res.insert_or_assign("top.dig.digI1.reTime[2].s", DumpEntry{top.dig.digI1.reTime[2].s});
        res.insert_or_assign("top.dig.digI1.reTime[2].ns", DumpEntry{top.dig.digI1.reTime[2].ns});
        res.insert_or_assign("top.dig.digI1.reTime[3].s", DumpEntry{top.dig.digI1.reTime[3].s});
        res.insert_or_assign("top.dig.digI1.reTime[3].ns", DumpEntry{top.dig.digI1.reTime[3].ns});
        res.insert_or_assign("top.dig.digI1.reTime[4].s", DumpEntry{top.dig.digI1.reTime[4].s});
        res.insert_or_assign("top.dig.digI1.reTime[4].ns", DumpEntry{top.dig.digI1.reTime[4].ns});
        res.insert_or_assign("top.dig.digI1.reTime[5].s", DumpEntry{top.dig.digI1.reTime[5].s});
        res.insert_or_assign("top.dig.digI1.reTime[5].ns", DumpEntry{top.dig.digI1.reTime[5].ns});
        res.insert_or_assign("top.dig.digI1.reTime[6].s", DumpEntry{top.dig.digI1.reTime[6].s});
        res.insert_or_assign("top.dig.digI1.reTime[6].ns", DumpEntry{top.dig.digI1.reTime[6].ns});
        res.insert_or_assign("top.dig.digI1.reTime[7].s", DumpEntry{top.dig.digI1.reTime[7].s});
        res.insert_or_assign("top.dig.digI1.reTime[7].ns", DumpEntry{top.dig.digI1.reTime[7].ns});
        res.insert_or_assign("top.dig.digI1.reTime[8].s", DumpEntry{top.dig.digI1.reTime[8].s});
        res.insert_or_assign("top.dig.digI1.reTime[8].ns", DumpEntry{top.dig.digI1.reTime[8].ns});
        res.insert_or_assign("top.dig.digI1.reTime[9].s", DumpEntry{top.dig.digI1.reTime[9].s});
        res.insert_or_assign("top.dig.digI1.reTime[9].ns", DumpEntry{top.dig.digI1.reTime[9].ns});
        res.insert_or_assign("top.dig.digI1.reTime[10].s", DumpEntry{top.dig.digI1.reTime[10].s});
        res.insert_or_assign("top.dig.digI1.reTime[10].ns", DumpEntry{top.dig.digI1.reTime[10].ns});
        res.insert_or_assign("top.dig.digI1.reTime[11].s", DumpEntry{top.dig.digI1.reTime[11].s});
        res.insert_or_assign("top.dig.digI1.reTime[11].ns", DumpEntry{top.dig.digI1.reTime[11].ns});
        res.insert_or_assign("top.dig.digI1.reTime[12].s", DumpEntry{top.dig.digI1.reTime[12].s});
        res.insert_or_assign("top.dig.digI1.reTime[12].ns", DumpEntry{top.dig.digI1.reTime[12].ns});
        res.insert_or_assign("top.dig.digI1.reTime[13].s", DumpEntry{top.dig.digI1.reTime[13].s});
        res.insert_or_assign("top.dig.digI1.reTime[13].ns", DumpEntry{top.dig.digI1.reTime[13].ns});
        res.insert_or_assign("top.dig.digI1.reTime[14].s", DumpEntry{top.dig.digI1.reTime[14].s});
        res.insert_or_assign("top.dig.digI1.reTime[14].ns", DumpEntry{top.dig.digI1.reTime[14].ns});
        res.insert_or_assign("top.dig.digI1.reTime[15].s", DumpEntry{top.dig.digI1.reTime[15].s});
        res.insert_or_assign("top.dig.digI1.reTime[15].ns", DumpEntry{top.dig.digI1.reTime[15].ns});
        res.insert_or_assign("top.dig.digI1.reTime[16].s", DumpEntry{top.dig.digI1.reTime[16].s});
        res.insert_or_assign("top.dig.digI1.reTime[16].ns", DumpEntry{top.dig.digI1.reTime[16].ns});
        res.insert_or_assign("top.dig.digI1.reTime[17].s", DumpEntry{top.dig.digI1.reTime[17].s});
        res.insert_or_assign("top.dig.digI1.reTime[17].ns", DumpEntry{top.dig.digI1.reTime[17].ns});
        res.insert_or_assign("top.dig.digI1.reTime[18].s", DumpEntry{top.dig.digI1.reTime[18].s});
        res.insert_or_assign("top.dig.digI1.reTime[18].ns", DumpEntry{top.dig.digI1.reTime[18].ns});
        res.insert_or_assign("top.dig.digI1.reTime[19].s", DumpEntry{top.dig.digI1.reTime[19].s});
        res.insert_or_assign("top.dig.digI1.reTime[19].ns", DumpEntry{top.dig.digI1.reTime[19].ns});
        res.insert_or_assign("top.dig.digI1.reTime[20].s", DumpEntry{top.dig.digI1.reTime[20].s});
        res.insert_or_assign("top.dig.digI1.reTime[20].ns", DumpEntry{top.dig.digI1.reTime[20].ns});
        res.insert_or_assign("top.dig.digI1.reTime[21].s", DumpEntry{top.dig.digI1.reTime[21].s});
        res.insert_or_assign("top.dig.digI1.reTime[21].ns", DumpEntry{top.dig.digI1.reTime[21].ns});
        res.insert_or_assign("top.dig.digI1.reTime[22].s", DumpEntry{top.dig.digI1.reTime[22].s});
        res.insert_or_assign("top.dig.digI1.reTime[22].ns", DumpEntry{top.dig.digI1.reTime[22].ns});
        res.insert_or_assign("top.dig.digI1.reTime[23].s", DumpEntry{top.dig.digI1.reTime[23].s});
        res.insert_or_assign("top.dig.digI1.reTime[23].ns", DumpEntry{top.dig.digI1.reTime[23].ns});
        res.insert_or_assign("top.dig.digI1.reTime[24].s", DumpEntry{top.dig.digI1.reTime[24].s});
        res.insert_or_assign("top.dig.digI1.reTime[24].ns", DumpEntry{top.dig.digI1.reTime[24].ns});
        res.insert_or_assign("top.dig.digI1.reTime[25].s", DumpEntry{top.dig.digI1.reTime[25].s});
        res.insert_or_assign("top.dig.digI1.reTime[25].ns", DumpEntry{top.dig.digI1.reTime[25].ns});
        res.insert_or_assign("top.dig.digI1.reTime[26].s", DumpEntry{top.dig.digI1.reTime[26].s});
        res.insert_or_assign("top.dig.digI1.reTime[26].ns", DumpEntry{top.dig.digI1.reTime[26].ns});
        res.insert_or_assign("top.dig.digI1.reTime[27].s", DumpEntry{top.dig.digI1.reTime[27].s});
        res.insert_or_assign("top.dig.digI1.reTime[27].ns", DumpEntry{top.dig.digI1.reTime[27].ns});
        res.insert_or_assign("top.dig.digI1.reTime[28].s", DumpEntry{top.dig.digI1.reTime[28].s});
        res.insert_or_assign("top.dig.digI1.reTime[28].ns", DumpEntry{top.dig.digI1.reTime[28].ns});
        res.insert_or_assign("top.dig.digI1.reTime[29].s", DumpEntry{top.dig.digI1.reTime[29].s});
        res.insert_or_assign("top.dig.digI1.reTime[29].ns", DumpEntry{top.dig.digI1.reTime[29].ns});
        res.insert_or_assign("top.dig.digI1.reTime[30].s", DumpEntry{top.dig.digI1.reTime[30].s});
        res.insert_or_assign("top.dig.digI1.reTime[30].ns", DumpEntry{top.dig.digI1.reTime[30].ns});
        res.insert_or_assign("top.dig.digI1.reTime[31].s", DumpEntry{top.dig.digI1.reTime[31].s});
        res.insert_or_assign("top.dig.digI1.reTime[31].ns", DumpEntry{top.dig.digI1.reTime[31].ns});
        res.insert_or_assign("top.dig.digIndI.staticParams", DumpEntry{top.dig.digIndI.staticParams});
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.invertIsEn", DumpEntry{top.dig.digIndI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.enableIsEn", DumpEntry{top.dig.digIndI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.latchIsEn", DumpEntry{top.dig.digIndI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.deglitchIsEn", DumpEntry{top.dig.digIndI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.reTimeIsEn", DumpEntry{top.dig.digIndI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.digIndI.staticParams.numChannels", DumpEntry{top.dig.digIndI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.digIndI.data", DumpEntry{top.dig.digIndI.data});
        res.insert_or_assign("top.dig.digIndI.dataChanged", DumpEntry{top.dig.digIndI.dataChanged});
        res.insert_or_assign("top.dig.digIndI.invert", DumpEntry{top.dig.digIndI.invert});
        res.insert_or_assign("top.dig.digIndI.enable", DumpEntry{top.dig.digIndI.enable});
        res.insert_or_assign("top.dig.digIndI.latch", DumpEntry{top.dig.digIndI.latch});
        res.insert_or_assign("top.dig.digIndI.rstLatch", DumpEntry{top.dig.digIndI.rstLatch});
        res.insert_or_assign("top.dig.digIndI.risingInterrupt", DumpEntry{top.dig.digIndI.risingInterrupt});
        res.insert_or_assign("top.dig.digIndI.fallingInterrupt", DumpEntry{top.dig.digIndI.fallingInterrupt});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[0].val", DumpEntry{top.dig.digIndI.filterLengthSc[0].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[1].val", DumpEntry{top.dig.digIndI.filterLengthSc[1].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[2].val", DumpEntry{top.dig.digIndI.filterLengthSc[2].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[3].val", DumpEntry{top.dig.digIndI.filterLengthSc[3].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[4].val", DumpEntry{top.dig.digIndI.filterLengthSc[4].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[5].val", DumpEntry{top.dig.digIndI.filterLengthSc[5].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[6].val", DumpEntry{top.dig.digIndI.filterLengthSc[6].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[7].val", DumpEntry{top.dig.digIndI.filterLengthSc[7].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[8].val", DumpEntry{top.dig.digIndI.filterLengthSc[8].val});
        res.insert_or_assign("top.dig.digIndI.filterLengthSc[9].val", DumpEntry{top.dig.digIndI.filterLengthSc[9].val});
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[10].val", DumpEntry{top.dig.digIndI.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[11].val", DumpEntry{top.dig.digIndI.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[12].val", DumpEntry{top.dig.digIndI.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[13].val", DumpEntry{top.dig.digIndI.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[14].val", DumpEntry{top.dig.digIndI.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[15].val", DumpEntry{top.dig.digIndI.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[16].val", DumpEntry{top.dig.digIndI.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[17].val", DumpEntry{top.dig.digIndI.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[18].val", DumpEntry{top.dig.digIndI.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[19].val", DumpEntry{top.dig.digIndI.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[20].val", DumpEntry{top.dig.digIndI.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[21].val", DumpEntry{top.dig.digIndI.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[22].val", DumpEntry{top.dig.digIndI.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[23].val", DumpEntry{top.dig.digIndI.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[24].val", DumpEntry{top.dig.digIndI.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[25].val", DumpEntry{top.dig.digIndI.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[26].val", DumpEntry{top.dig.digIndI.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[27].val", DumpEntry{top.dig.digIndI.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[28].val", DumpEntry{top.dig.digIndI.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[29].val", DumpEntry{top.dig.digIndI.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[30].val", DumpEntry{top.dig.digIndI.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.digIndI.filterLengthSc[31].val", DumpEntry{top.dig.digIndI.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.digIndI.reTime[0].s", DumpEntry{top.dig.digIndI.reTime[0].s});
        res.insert_or_assign("top.dig.digIndI.reTime[0].ns", DumpEntry{top.dig.digIndI.reTime[0].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[1].s", DumpEntry{top.dig.digIndI.reTime[1].s});
        res.insert_or_assign("top.dig.digIndI.reTime[1].ns", DumpEntry{top.dig.digIndI.reTime[1].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[2].s", DumpEntry{top.dig.digIndI.reTime[2].s});
        res.insert_or_assign("top.dig.digIndI.reTime[2].ns", DumpEntry{top.dig.digIndI.reTime[2].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[3].s", DumpEntry{top.dig.digIndI.reTime[3].s});
        res.insert_or_assign("top.dig.digIndI.reTime[3].ns", DumpEntry{top.dig.digIndI.reTime[3].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[4].s", DumpEntry{top.dig.digIndI.reTime[4].s});
        res.insert_or_assign("top.dig.digIndI.reTime[4].ns", DumpEntry{top.dig.digIndI.reTime[4].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[5].s", DumpEntry{top.dig.digIndI.reTime[5].s});
        res.insert_or_assign("top.dig.digIndI.reTime[5].ns", DumpEntry{top.dig.digIndI.reTime[5].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[6].s", DumpEntry{top.dig.digIndI.reTime[6].s});
        res.insert_or_assign("top.dig.digIndI.reTime[6].ns", DumpEntry{top.dig.digIndI.reTime[6].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[7].s", DumpEntry{top.dig.digIndI.reTime[7].s});
        res.insert_or_assign("top.dig.digIndI.reTime[7].ns", DumpEntry{top.dig.digIndI.reTime[7].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[8].s", DumpEntry{top.dig.digIndI.reTime[8].s});
        res.insert_or_assign("top.dig.digIndI.reTime[8].ns", DumpEntry{top.dig.digIndI.reTime[8].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[9].s", DumpEntry{top.dig.digIndI.reTime[9].s});
        res.insert_or_assign("top.dig.digIndI.reTime[9].ns", DumpEntry{top.dig.digIndI.reTime[9].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[10].s", DumpEntry{top.dig.digIndI.reTime[10].s});
        res.insert_or_assign("top.dig.digIndI.reTime[10].ns", DumpEntry{top.dig.digIndI.reTime[10].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[11].s", DumpEntry{top.dig.digIndI.reTime[11].s});
        res.insert_or_assign("top.dig.digIndI.reTime[11].ns", DumpEntry{top.dig.digIndI.reTime[11].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[12].s", DumpEntry{top.dig.digIndI.reTime[12].s});
        res.insert_or_assign("top.dig.digIndI.reTime[12].ns", DumpEntry{top.dig.digIndI.reTime[12].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[13].s", DumpEntry{top.dig.digIndI.reTime[13].s});
        res.insert_or_assign("top.dig.digIndI.reTime[13].ns", DumpEntry{top.dig.digIndI.reTime[13].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[14].s", DumpEntry{top.dig.digIndI.reTime[14].s});
        res.insert_or_assign("top.dig.digIndI.reTime[14].ns", DumpEntry{top.dig.digIndI.reTime[14].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[15].s", DumpEntry{top.dig.digIndI.reTime[15].s});
        res.insert_or_assign("top.dig.digIndI.reTime[15].ns", DumpEntry{top.dig.digIndI.reTime[15].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[16].s", DumpEntry{top.dig.digIndI.reTime[16].s});
        res.insert_or_assign("top.dig.digIndI.reTime[16].ns", DumpEntry{top.dig.digIndI.reTime[16].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[17].s", DumpEntry{top.dig.digIndI.reTime[17].s});
        res.insert_or_assign("top.dig.digIndI.reTime[17].ns", DumpEntry{top.dig.digIndI.reTime[17].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[18].s", DumpEntry{top.dig.digIndI.reTime[18].s});
        res.insert_or_assign("top.dig.digIndI.reTime[18].ns", DumpEntry{top.dig.digIndI.reTime[18].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[19].s", DumpEntry{top.dig.digIndI.reTime[19].s});
        res.insert_or_assign("top.dig.digIndI.reTime[19].ns", DumpEntry{top.dig.digIndI.reTime[19].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[20].s", DumpEntry{top.dig.digIndI.reTime[20].s});
        res.insert_or_assign("top.dig.digIndI.reTime[20].ns", DumpEntry{top.dig.digIndI.reTime[20].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[21].s", DumpEntry{top.dig.digIndI.reTime[21].s});
        res.insert_or_assign("top.dig.digIndI.reTime[21].ns", DumpEntry{top.dig.digIndI.reTime[21].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[22].s", DumpEntry{top.dig.digIndI.reTime[22].s});
        res.insert_or_assign("top.dig.digIndI.reTime[22].ns", DumpEntry{top.dig.digIndI.reTime[22].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[23].s", DumpEntry{top.dig.digIndI.reTime[23].s});
        res.insert_or_assign("top.dig.digIndI.reTime[23].ns", DumpEntry{top.dig.digIndI.reTime[23].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[24].s", DumpEntry{top.dig.digIndI.reTime[24].s});
        res.insert_or_assign("top.dig.digIndI.reTime[24].ns", DumpEntry{top.dig.digIndI.reTime[24].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[25].s", DumpEntry{top.dig.digIndI.reTime[25].s});
        res.insert_or_assign("top.dig.digIndI.reTime[25].ns", DumpEntry{top.dig.digIndI.reTime[25].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[26].s", DumpEntry{top.dig.digIndI.reTime[26].s});
        res.insert_or_assign("top.dig.digIndI.reTime[26].ns", DumpEntry{top.dig.digIndI.reTime[26].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[27].s", DumpEntry{top.dig.digIndI.reTime[27].s});
        res.insert_or_assign("top.dig.digIndI.reTime[27].ns", DumpEntry{top.dig.digIndI.reTime[27].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[28].s", DumpEntry{top.dig.digIndI.reTime[28].s});
        res.insert_or_assign("top.dig.digIndI.reTime[28].ns", DumpEntry{top.dig.digIndI.reTime[28].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[29].s", DumpEntry{top.dig.digIndI.reTime[29].s});
        res.insert_or_assign("top.dig.digIndI.reTime[29].ns", DumpEntry{top.dig.digIndI.reTime[29].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[30].s", DumpEntry{top.dig.digIndI.reTime[30].s});
        res.insert_or_assign("top.dig.digIndI.reTime[30].ns", DumpEntry{top.dig.digIndI.reTime[30].ns});
        res.insert_or_assign("top.dig.digIndI.reTime[31].s", DumpEntry{top.dig.digIndI.reTime[31].s});
        res.insert_or_assign("top.dig.digIndI.reTime[31].ns", DumpEntry{top.dig.digIndI.reTime[31].ns});
        res.insert_or_assign("top.dig.contactI.staticParams", DumpEntry{top.dig.contactI.staticParams});
        res.insert_or_assign(
            "top.dig.contactI.staticParams.invertIsEn", DumpEntry{top.dig.contactI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.enableIsEn", DumpEntry{top.dig.contactI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.latchIsEn", DumpEntry{top.dig.contactI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.deglitchIsEn", DumpEntry{top.dig.contactI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.reTimeIsEn", DumpEntry{top.dig.contactI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.contactI.staticParams.numChannels", DumpEntry{top.dig.contactI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.contactI.data", DumpEntry{top.dig.contactI.data});
        res.insert_or_assign("top.dig.contactI.dataChanged", DumpEntry{top.dig.contactI.dataChanged});
        res.insert_or_assign("top.dig.contactI.invert", DumpEntry{top.dig.contactI.invert});
        res.insert_or_assign("top.dig.contactI.enable", DumpEntry{top.dig.contactI.enable});
        res.insert_or_assign("top.dig.contactI.latch", DumpEntry{top.dig.contactI.latch});
        res.insert_or_assign("top.dig.contactI.rstLatch", DumpEntry{top.dig.contactI.rstLatch});
        res.insert_or_assign("top.dig.contactI.risingInterrupt", DumpEntry{top.dig.contactI.risingInterrupt});
        res.insert_or_assign("top.dig.contactI.fallingInterrupt", DumpEntry{top.dig.contactI.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[0].val", DumpEntry{top.dig.contactI.filterLengthSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[1].val", DumpEntry{top.dig.contactI.filterLengthSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[2].val", DumpEntry{top.dig.contactI.filterLengthSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[3].val", DumpEntry{top.dig.contactI.filterLengthSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[4].val", DumpEntry{top.dig.contactI.filterLengthSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[5].val", DumpEntry{top.dig.contactI.filterLengthSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[6].val", DumpEntry{top.dig.contactI.filterLengthSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[7].val", DumpEntry{top.dig.contactI.filterLengthSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[8].val", DumpEntry{top.dig.contactI.filterLengthSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[9].val", DumpEntry{top.dig.contactI.filterLengthSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[10].val", DumpEntry{top.dig.contactI.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[11].val", DumpEntry{top.dig.contactI.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[12].val", DumpEntry{top.dig.contactI.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[13].val", DumpEntry{top.dig.contactI.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[14].val", DumpEntry{top.dig.contactI.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[15].val", DumpEntry{top.dig.contactI.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[16].val", DumpEntry{top.dig.contactI.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[17].val", DumpEntry{top.dig.contactI.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[18].val", DumpEntry{top.dig.contactI.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[19].val", DumpEntry{top.dig.contactI.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[20].val", DumpEntry{top.dig.contactI.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[21].val", DumpEntry{top.dig.contactI.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[22].val", DumpEntry{top.dig.contactI.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[23].val", DumpEntry{top.dig.contactI.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[24].val", DumpEntry{top.dig.contactI.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[25].val", DumpEntry{top.dig.contactI.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[26].val", DumpEntry{top.dig.contactI.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[27].val", DumpEntry{top.dig.contactI.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[28].val", DumpEntry{top.dig.contactI.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[29].val", DumpEntry{top.dig.contactI.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[30].val", DumpEntry{top.dig.contactI.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.contactI.filterLengthSc[31].val", DumpEntry{top.dig.contactI.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.contactI.reTime[0].s", DumpEntry{top.dig.contactI.reTime[0].s});
        res.insert_or_assign("top.dig.contactI.reTime[0].ns", DumpEntry{top.dig.contactI.reTime[0].ns});
        res.insert_or_assign("top.dig.contactI.reTime[1].s", DumpEntry{top.dig.contactI.reTime[1].s});
        res.insert_or_assign("top.dig.contactI.reTime[1].ns", DumpEntry{top.dig.contactI.reTime[1].ns});
        res.insert_or_assign("top.dig.contactI.reTime[2].s", DumpEntry{top.dig.contactI.reTime[2].s});
        res.insert_or_assign("top.dig.contactI.reTime[2].ns", DumpEntry{top.dig.contactI.reTime[2].ns});
        res.insert_or_assign("top.dig.contactI.reTime[3].s", DumpEntry{top.dig.contactI.reTime[3].s});
        res.insert_or_assign("top.dig.contactI.reTime[3].ns", DumpEntry{top.dig.contactI.reTime[3].ns});
        res.insert_or_assign("top.dig.contactI.reTime[4].s", DumpEntry{top.dig.contactI.reTime[4].s});
        res.insert_or_assign("top.dig.contactI.reTime[4].ns", DumpEntry{top.dig.contactI.reTime[4].ns});
        res.insert_or_assign("top.dig.contactI.reTime[5].s", DumpEntry{top.dig.contactI.reTime[5].s});
        res.insert_or_assign("top.dig.contactI.reTime[5].ns", DumpEntry{top.dig.contactI.reTime[5].ns});
        res.insert_or_assign("top.dig.contactI.reTime[6].s", DumpEntry{top.dig.contactI.reTime[6].s});
        res.insert_or_assign("top.dig.contactI.reTime[6].ns", DumpEntry{top.dig.contactI.reTime[6].ns});
        res.insert_or_assign("top.dig.contactI.reTime[7].s", DumpEntry{top.dig.contactI.reTime[7].s});
        res.insert_or_assign("top.dig.contactI.reTime[7].ns", DumpEntry{top.dig.contactI.reTime[7].ns});
        res.insert_or_assign("top.dig.contactI.reTime[8].s", DumpEntry{top.dig.contactI.reTime[8].s});
        res.insert_or_assign("top.dig.contactI.reTime[8].ns", DumpEntry{top.dig.contactI.reTime[8].ns});
        res.insert_or_assign("top.dig.contactI.reTime[9].s", DumpEntry{top.dig.contactI.reTime[9].s});
        res.insert_or_assign("top.dig.contactI.reTime[9].ns", DumpEntry{top.dig.contactI.reTime[9].ns});
        res.insert_or_assign("top.dig.contactI.reTime[10].s", DumpEntry{top.dig.contactI.reTime[10].s});
        res.insert_or_assign("top.dig.contactI.reTime[10].ns", DumpEntry{top.dig.contactI.reTime[10].ns});
        res.insert_or_assign("top.dig.contactI.reTime[11].s", DumpEntry{top.dig.contactI.reTime[11].s});
        res.insert_or_assign("top.dig.contactI.reTime[11].ns", DumpEntry{top.dig.contactI.reTime[11].ns});
        res.insert_or_assign("top.dig.contactI.reTime[12].s", DumpEntry{top.dig.contactI.reTime[12].s});
        res.insert_or_assign("top.dig.contactI.reTime[12].ns", DumpEntry{top.dig.contactI.reTime[12].ns});
        res.insert_or_assign("top.dig.contactI.reTime[13].s", DumpEntry{top.dig.contactI.reTime[13].s});
        res.insert_or_assign("top.dig.contactI.reTime[13].ns", DumpEntry{top.dig.contactI.reTime[13].ns});
        res.insert_or_assign("top.dig.contactI.reTime[14].s", DumpEntry{top.dig.contactI.reTime[14].s});
        res.insert_or_assign("top.dig.contactI.reTime[14].ns", DumpEntry{top.dig.contactI.reTime[14].ns});
        res.insert_or_assign("top.dig.contactI.reTime[15].s", DumpEntry{top.dig.contactI.reTime[15].s});
        res.insert_or_assign("top.dig.contactI.reTime[15].ns", DumpEntry{top.dig.contactI.reTime[15].ns});
        res.insert_or_assign("top.dig.contactI.reTime[16].s", DumpEntry{top.dig.contactI.reTime[16].s});
        res.insert_or_assign("top.dig.contactI.reTime[16].ns", DumpEntry{top.dig.contactI.reTime[16].ns});
        res.insert_or_assign("top.dig.contactI.reTime[17].s", DumpEntry{top.dig.contactI.reTime[17].s});
        res.insert_or_assign("top.dig.contactI.reTime[17].ns", DumpEntry{top.dig.contactI.reTime[17].ns});
        res.insert_or_assign("top.dig.contactI.reTime[18].s", DumpEntry{top.dig.contactI.reTime[18].s});
        res.insert_or_assign("top.dig.contactI.reTime[18].ns", DumpEntry{top.dig.contactI.reTime[18].ns});
        res.insert_or_assign("top.dig.contactI.reTime[19].s", DumpEntry{top.dig.contactI.reTime[19].s});
        res.insert_or_assign("top.dig.contactI.reTime[19].ns", DumpEntry{top.dig.contactI.reTime[19].ns});
        res.insert_or_assign("top.dig.contactI.reTime[20].s", DumpEntry{top.dig.contactI.reTime[20].s});
        res.insert_or_assign("top.dig.contactI.reTime[20].ns", DumpEntry{top.dig.contactI.reTime[20].ns});
        res.insert_or_assign("top.dig.contactI.reTime[21].s", DumpEntry{top.dig.contactI.reTime[21].s});
        res.insert_or_assign("top.dig.contactI.reTime[21].ns", DumpEntry{top.dig.contactI.reTime[21].ns});
        res.insert_or_assign("top.dig.contactI.reTime[22].s", DumpEntry{top.dig.contactI.reTime[22].s});
        res.insert_or_assign("top.dig.contactI.reTime[22].ns", DumpEntry{top.dig.contactI.reTime[22].ns});
        res.insert_or_assign("top.dig.contactI.reTime[23].s", DumpEntry{top.dig.contactI.reTime[23].s});
        res.insert_or_assign("top.dig.contactI.reTime[23].ns", DumpEntry{top.dig.contactI.reTime[23].ns});
        res.insert_or_assign("top.dig.contactI.reTime[24].s", DumpEntry{top.dig.contactI.reTime[24].s});
        res.insert_or_assign("top.dig.contactI.reTime[24].ns", DumpEntry{top.dig.contactI.reTime[24].ns});
        res.insert_or_assign("top.dig.contactI.reTime[25].s", DumpEntry{top.dig.contactI.reTime[25].s});
        res.insert_or_assign("top.dig.contactI.reTime[25].ns", DumpEntry{top.dig.contactI.reTime[25].ns});
        res.insert_or_assign("top.dig.contactI.reTime[26].s", DumpEntry{top.dig.contactI.reTime[26].s});
        res.insert_or_assign("top.dig.contactI.reTime[26].ns", DumpEntry{top.dig.contactI.reTime[26].ns});
        res.insert_or_assign("top.dig.contactI.reTime[27].s", DumpEntry{top.dig.contactI.reTime[27].s});
        res.insert_or_assign("top.dig.contactI.reTime[27].ns", DumpEntry{top.dig.contactI.reTime[27].ns});
        res.insert_or_assign("top.dig.contactI.reTime[28].s", DumpEntry{top.dig.contactI.reTime[28].s});
        res.insert_or_assign("top.dig.contactI.reTime[28].ns", DumpEntry{top.dig.contactI.reTime[28].ns});
        res.insert_or_assign("top.dig.contactI.reTime[29].s", DumpEntry{top.dig.contactI.reTime[29].s});
        res.insert_or_assign("top.dig.contactI.reTime[29].ns", DumpEntry{top.dig.contactI.reTime[29].ns});
        res.insert_or_assign("top.dig.contactI.reTime[30].s", DumpEntry{top.dig.contactI.reTime[30].s});
        res.insert_or_assign("top.dig.contactI.reTime[30].ns", DumpEntry{top.dig.contactI.reTime[30].ns});
        res.insert_or_assign("top.dig.contactI.reTime[31].s", DumpEntry{top.dig.contactI.reTime[31].s});
        res.insert_or_assign("top.dig.contactI.reTime[31].ns", DumpEntry{top.dig.contactI.reTime[31].ns});
        res.insert_or_assign("top.dig.opticalI.staticParams", DumpEntry{top.dig.opticalI.staticParams});
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.invertIsEn", DumpEntry{top.dig.opticalI.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.enableIsEn", DumpEntry{top.dig.opticalI.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.latchIsEn", DumpEntry{top.dig.opticalI.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.deglitchIsEn", DumpEntry{top.dig.opticalI.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.reTimeIsEn", DumpEntry{top.dig.opticalI.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.opticalI.staticParams.numChannels", DumpEntry{top.dig.opticalI.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.opticalI.data", DumpEntry{top.dig.opticalI.data});
        res.insert_or_assign("top.dig.opticalI.dataChanged", DumpEntry{top.dig.opticalI.dataChanged});
        res.insert_or_assign("top.dig.opticalI.invert", DumpEntry{top.dig.opticalI.invert});
        res.insert_or_assign("top.dig.opticalI.enable", DumpEntry{top.dig.opticalI.enable});
        res.insert_or_assign("top.dig.opticalI.latch", DumpEntry{top.dig.opticalI.latch});
        res.insert_or_assign("top.dig.opticalI.rstLatch", DumpEntry{top.dig.opticalI.rstLatch});
        res.insert_or_assign("top.dig.opticalI.risingInterrupt", DumpEntry{top.dig.opticalI.risingInterrupt});
        res.insert_or_assign("top.dig.opticalI.fallingInterrupt", DumpEntry{top.dig.opticalI.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[0].val", DumpEntry{top.dig.opticalI.filterLengthSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[1].val", DumpEntry{top.dig.opticalI.filterLengthSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[2].val", DumpEntry{top.dig.opticalI.filterLengthSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[3].val", DumpEntry{top.dig.opticalI.filterLengthSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[4].val", DumpEntry{top.dig.opticalI.filterLengthSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[5].val", DumpEntry{top.dig.opticalI.filterLengthSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[6].val", DumpEntry{top.dig.opticalI.filterLengthSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[7].val", DumpEntry{top.dig.opticalI.filterLengthSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[8].val", DumpEntry{top.dig.opticalI.filterLengthSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[9].val", DumpEntry{top.dig.opticalI.filterLengthSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[10].val", DumpEntry{top.dig.opticalI.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[11].val", DumpEntry{top.dig.opticalI.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[12].val", DumpEntry{top.dig.opticalI.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[13].val", DumpEntry{top.dig.opticalI.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[14].val", DumpEntry{top.dig.opticalI.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[15].val", DumpEntry{top.dig.opticalI.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[16].val", DumpEntry{top.dig.opticalI.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[17].val", DumpEntry{top.dig.opticalI.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[18].val", DumpEntry{top.dig.opticalI.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[19].val", DumpEntry{top.dig.opticalI.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[20].val", DumpEntry{top.dig.opticalI.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[21].val", DumpEntry{top.dig.opticalI.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[22].val", DumpEntry{top.dig.opticalI.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[23].val", DumpEntry{top.dig.opticalI.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[24].val", DumpEntry{top.dig.opticalI.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[25].val", DumpEntry{top.dig.opticalI.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[26].val", DumpEntry{top.dig.opticalI.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[27].val", DumpEntry{top.dig.opticalI.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[28].val", DumpEntry{top.dig.opticalI.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[29].val", DumpEntry{top.dig.opticalI.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[30].val", DumpEntry{top.dig.opticalI.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.opticalI.filterLengthSc[31].val", DumpEntry{top.dig.opticalI.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.opticalI.reTime[0].s", DumpEntry{top.dig.opticalI.reTime[0].s});
        res.insert_or_assign("top.dig.opticalI.reTime[0].ns", DumpEntry{top.dig.opticalI.reTime[0].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[1].s", DumpEntry{top.dig.opticalI.reTime[1].s});
        res.insert_or_assign("top.dig.opticalI.reTime[1].ns", DumpEntry{top.dig.opticalI.reTime[1].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[2].s", DumpEntry{top.dig.opticalI.reTime[2].s});
        res.insert_or_assign("top.dig.opticalI.reTime[2].ns", DumpEntry{top.dig.opticalI.reTime[2].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[3].s", DumpEntry{top.dig.opticalI.reTime[3].s});
        res.insert_or_assign("top.dig.opticalI.reTime[3].ns", DumpEntry{top.dig.opticalI.reTime[3].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[4].s", DumpEntry{top.dig.opticalI.reTime[4].s});
        res.insert_or_assign("top.dig.opticalI.reTime[4].ns", DumpEntry{top.dig.opticalI.reTime[4].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[5].s", DumpEntry{top.dig.opticalI.reTime[5].s});
        res.insert_or_assign("top.dig.opticalI.reTime[5].ns", DumpEntry{top.dig.opticalI.reTime[5].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[6].s", DumpEntry{top.dig.opticalI.reTime[6].s});
        res.insert_or_assign("top.dig.opticalI.reTime[6].ns", DumpEntry{top.dig.opticalI.reTime[6].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[7].s", DumpEntry{top.dig.opticalI.reTime[7].s});
        res.insert_or_assign("top.dig.opticalI.reTime[7].ns", DumpEntry{top.dig.opticalI.reTime[7].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[8].s", DumpEntry{top.dig.opticalI.reTime[8].s});
        res.insert_or_assign("top.dig.opticalI.reTime[8].ns", DumpEntry{top.dig.opticalI.reTime[8].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[9].s", DumpEntry{top.dig.opticalI.reTime[9].s});
        res.insert_or_assign("top.dig.opticalI.reTime[9].ns", DumpEntry{top.dig.opticalI.reTime[9].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[10].s", DumpEntry{top.dig.opticalI.reTime[10].s});
        res.insert_or_assign("top.dig.opticalI.reTime[10].ns", DumpEntry{top.dig.opticalI.reTime[10].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[11].s", DumpEntry{top.dig.opticalI.reTime[11].s});
        res.insert_or_assign("top.dig.opticalI.reTime[11].ns", DumpEntry{top.dig.opticalI.reTime[11].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[12].s", DumpEntry{top.dig.opticalI.reTime[12].s});
        res.insert_or_assign("top.dig.opticalI.reTime[12].ns", DumpEntry{top.dig.opticalI.reTime[12].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[13].s", DumpEntry{top.dig.opticalI.reTime[13].s});
        res.insert_or_assign("top.dig.opticalI.reTime[13].ns", DumpEntry{top.dig.opticalI.reTime[13].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[14].s", DumpEntry{top.dig.opticalI.reTime[14].s});
        res.insert_or_assign("top.dig.opticalI.reTime[14].ns", DumpEntry{top.dig.opticalI.reTime[14].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[15].s", DumpEntry{top.dig.opticalI.reTime[15].s});
        res.insert_or_assign("top.dig.opticalI.reTime[15].ns", DumpEntry{top.dig.opticalI.reTime[15].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[16].s", DumpEntry{top.dig.opticalI.reTime[16].s});
        res.insert_or_assign("top.dig.opticalI.reTime[16].ns", DumpEntry{top.dig.opticalI.reTime[16].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[17].s", DumpEntry{top.dig.opticalI.reTime[17].s});
        res.insert_or_assign("top.dig.opticalI.reTime[17].ns", DumpEntry{top.dig.opticalI.reTime[17].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[18].s", DumpEntry{top.dig.opticalI.reTime[18].s});
        res.insert_or_assign("top.dig.opticalI.reTime[18].ns", DumpEntry{top.dig.opticalI.reTime[18].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[19].s", DumpEntry{top.dig.opticalI.reTime[19].s});
        res.insert_or_assign("top.dig.opticalI.reTime[19].ns", DumpEntry{top.dig.opticalI.reTime[19].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[20].s", DumpEntry{top.dig.opticalI.reTime[20].s});
        res.insert_or_assign("top.dig.opticalI.reTime[20].ns", DumpEntry{top.dig.opticalI.reTime[20].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[21].s", DumpEntry{top.dig.opticalI.reTime[21].s});
        res.insert_or_assign("top.dig.opticalI.reTime[21].ns", DumpEntry{top.dig.opticalI.reTime[21].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[22].s", DumpEntry{top.dig.opticalI.reTime[22].s});
        res.insert_or_assign("top.dig.opticalI.reTime[22].ns", DumpEntry{top.dig.opticalI.reTime[22].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[23].s", DumpEntry{top.dig.opticalI.reTime[23].s});
        res.insert_or_assign("top.dig.opticalI.reTime[23].ns", DumpEntry{top.dig.opticalI.reTime[23].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[24].s", DumpEntry{top.dig.opticalI.reTime[24].s});
        res.insert_or_assign("top.dig.opticalI.reTime[24].ns", DumpEntry{top.dig.opticalI.reTime[24].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[25].s", DumpEntry{top.dig.opticalI.reTime[25].s});
        res.insert_or_assign("top.dig.opticalI.reTime[25].ns", DumpEntry{top.dig.opticalI.reTime[25].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[26].s", DumpEntry{top.dig.opticalI.reTime[26].s});
        res.insert_or_assign("top.dig.opticalI.reTime[26].ns", DumpEntry{top.dig.opticalI.reTime[26].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[27].s", DumpEntry{top.dig.opticalI.reTime[27].s});
        res.insert_or_assign("top.dig.opticalI.reTime[27].ns", DumpEntry{top.dig.opticalI.reTime[27].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[28].s", DumpEntry{top.dig.opticalI.reTime[28].s});
        res.insert_or_assign("top.dig.opticalI.reTime[28].ns", DumpEntry{top.dig.opticalI.reTime[28].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[29].s", DumpEntry{top.dig.opticalI.reTime[29].s});
        res.insert_or_assign("top.dig.opticalI.reTime[29].ns", DumpEntry{top.dig.opticalI.reTime[29].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[30].s", DumpEntry{top.dig.opticalI.reTime[30].s});
        res.insert_or_assign("top.dig.opticalI.reTime[30].ns", DumpEntry{top.dig.opticalI.reTime[30].ns});
        res.insert_or_assign("top.dig.opticalI.reTime[31].s", DumpEntry{top.dig.opticalI.reTime[31].s});
        res.insert_or_assign("top.dig.opticalI.reTime[31].ns", DumpEntry{top.dig.opticalI.reTime[31].ns});
        res.insert_or_assign("top.dig.minMaxLim0.staticParams", DumpEntry{top.dig.minMaxLim0.staticParams});
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.invertIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.enableIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.latchIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.deglitchIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.reTimeIsEn", DumpEntry{top.dig.minMaxLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.staticParams.numChannels", DumpEntry{top.dig.minMaxLim0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.minMaxLim0.data", DumpEntry{top.dig.minMaxLim0.data});
        res.insert_or_assign("top.dig.minMaxLim0.dataChanged", DumpEntry{top.dig.minMaxLim0.dataChanged});
        res.insert_or_assign("top.dig.minMaxLim0.invert", DumpEntry{top.dig.minMaxLim0.invert});
        res.insert_or_assign("top.dig.minMaxLim0.enable", DumpEntry{top.dig.minMaxLim0.enable});
        res.insert_or_assign("top.dig.minMaxLim0.latch", DumpEntry{top.dig.minMaxLim0.latch});
        res.insert_or_assign("top.dig.minMaxLim0.rstLatch", DumpEntry{top.dig.minMaxLim0.rstLatch});
        res.insert_or_assign("top.dig.minMaxLim0.risingInterrupt", DumpEntry{top.dig.minMaxLim0.risingInterrupt});
        res.insert_or_assign("top.dig.minMaxLim0.fallingInterrupt", DumpEntry{top.dig.minMaxLim0.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[0].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[1].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[2].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[3].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[4].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[5].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[6].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[7].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[8].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[9].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[10].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[11].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[12].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[13].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[14].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[15].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[16].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[17].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[18].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[19].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[20].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[21].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[22].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[23].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[24].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[25].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[26].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[27].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[28].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[29].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[30].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim0.filterLengthSc[31].val", DumpEntry{top.dig.minMaxLim0.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.minMaxLim0.reTime[0].s", DumpEntry{top.dig.minMaxLim0.reTime[0].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[0].ns", DumpEntry{top.dig.minMaxLim0.reTime[0].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[1].s", DumpEntry{top.dig.minMaxLim0.reTime[1].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[1].ns", DumpEntry{top.dig.minMaxLim0.reTime[1].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[2].s", DumpEntry{top.dig.minMaxLim0.reTime[2].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[2].ns", DumpEntry{top.dig.minMaxLim0.reTime[2].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[3].s", DumpEntry{top.dig.minMaxLim0.reTime[3].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[3].ns", DumpEntry{top.dig.minMaxLim0.reTime[3].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[4].s", DumpEntry{top.dig.minMaxLim0.reTime[4].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[4].ns", DumpEntry{top.dig.minMaxLim0.reTime[4].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[5].s", DumpEntry{top.dig.minMaxLim0.reTime[5].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[5].ns", DumpEntry{top.dig.minMaxLim0.reTime[5].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[6].s", DumpEntry{top.dig.minMaxLim0.reTime[6].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[6].ns", DumpEntry{top.dig.minMaxLim0.reTime[6].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[7].s", DumpEntry{top.dig.minMaxLim0.reTime[7].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[7].ns", DumpEntry{top.dig.minMaxLim0.reTime[7].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[8].s", DumpEntry{top.dig.minMaxLim0.reTime[8].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[8].ns", DumpEntry{top.dig.minMaxLim0.reTime[8].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[9].s", DumpEntry{top.dig.minMaxLim0.reTime[9].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[9].ns", DumpEntry{top.dig.minMaxLim0.reTime[9].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[10].s", DumpEntry{top.dig.minMaxLim0.reTime[10].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[10].ns", DumpEntry{top.dig.minMaxLim0.reTime[10].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[11].s", DumpEntry{top.dig.minMaxLim0.reTime[11].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[11].ns", DumpEntry{top.dig.minMaxLim0.reTime[11].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[12].s", DumpEntry{top.dig.minMaxLim0.reTime[12].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[12].ns", DumpEntry{top.dig.minMaxLim0.reTime[12].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[13].s", DumpEntry{top.dig.minMaxLim0.reTime[13].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[13].ns", DumpEntry{top.dig.minMaxLim0.reTime[13].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[14].s", DumpEntry{top.dig.minMaxLim0.reTime[14].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[14].ns", DumpEntry{top.dig.minMaxLim0.reTime[14].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[15].s", DumpEntry{top.dig.minMaxLim0.reTime[15].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[15].ns", DumpEntry{top.dig.minMaxLim0.reTime[15].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[16].s", DumpEntry{top.dig.minMaxLim0.reTime[16].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[16].ns", DumpEntry{top.dig.minMaxLim0.reTime[16].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[17].s", DumpEntry{top.dig.minMaxLim0.reTime[17].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[17].ns", DumpEntry{top.dig.minMaxLim0.reTime[17].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[18].s", DumpEntry{top.dig.minMaxLim0.reTime[18].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[18].ns", DumpEntry{top.dig.minMaxLim0.reTime[18].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[19].s", DumpEntry{top.dig.minMaxLim0.reTime[19].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[19].ns", DumpEntry{top.dig.minMaxLim0.reTime[19].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[20].s", DumpEntry{top.dig.minMaxLim0.reTime[20].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[20].ns", DumpEntry{top.dig.minMaxLim0.reTime[20].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[21].s", DumpEntry{top.dig.minMaxLim0.reTime[21].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[21].ns", DumpEntry{top.dig.minMaxLim0.reTime[21].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[22].s", DumpEntry{top.dig.minMaxLim0.reTime[22].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[22].ns", DumpEntry{top.dig.minMaxLim0.reTime[22].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[23].s", DumpEntry{top.dig.minMaxLim0.reTime[23].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[23].ns", DumpEntry{top.dig.minMaxLim0.reTime[23].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[24].s", DumpEntry{top.dig.minMaxLim0.reTime[24].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[24].ns", DumpEntry{top.dig.minMaxLim0.reTime[24].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[25].s", DumpEntry{top.dig.minMaxLim0.reTime[25].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[25].ns", DumpEntry{top.dig.minMaxLim0.reTime[25].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[26].s", DumpEntry{top.dig.minMaxLim0.reTime[26].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[26].ns", DumpEntry{top.dig.minMaxLim0.reTime[26].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[27].s", DumpEntry{top.dig.minMaxLim0.reTime[27].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[27].ns", DumpEntry{top.dig.minMaxLim0.reTime[27].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[28].s", DumpEntry{top.dig.minMaxLim0.reTime[28].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[28].ns", DumpEntry{top.dig.minMaxLim0.reTime[28].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[29].s", DumpEntry{top.dig.minMaxLim0.reTime[29].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[29].ns", DumpEntry{top.dig.minMaxLim0.reTime[29].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[30].s", DumpEntry{top.dig.minMaxLim0.reTime[30].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[30].ns", DumpEntry{top.dig.minMaxLim0.reTime[30].ns});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[31].s", DumpEntry{top.dig.minMaxLim0.reTime[31].s});
        res.insert_or_assign("top.dig.minMaxLim0.reTime[31].ns", DumpEntry{top.dig.minMaxLim0.reTime[31].ns});
        res.insert_or_assign("top.dig.minMaxLim1.staticParams", DumpEntry{top.dig.minMaxLim1.staticParams});
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.invertIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.enableIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.latchIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.deglitchIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.reTimeIsEn", DumpEntry{top.dig.minMaxLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.staticParams.numChannels", DumpEntry{top.dig.minMaxLim1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.minMaxLim1.data", DumpEntry{top.dig.minMaxLim1.data});
        res.insert_or_assign("top.dig.minMaxLim1.dataChanged", DumpEntry{top.dig.minMaxLim1.dataChanged});
        res.insert_or_assign("top.dig.minMaxLim1.invert", DumpEntry{top.dig.minMaxLim1.invert});
        res.insert_or_assign("top.dig.minMaxLim1.enable", DumpEntry{top.dig.minMaxLim1.enable});
        res.insert_or_assign("top.dig.minMaxLim1.latch", DumpEntry{top.dig.minMaxLim1.latch});
        res.insert_or_assign("top.dig.minMaxLim1.rstLatch", DumpEntry{top.dig.minMaxLim1.rstLatch});
        res.insert_or_assign("top.dig.minMaxLim1.risingInterrupt", DumpEntry{top.dig.minMaxLim1.risingInterrupt});
        res.insert_or_assign("top.dig.minMaxLim1.fallingInterrupt", DumpEntry{top.dig.minMaxLim1.fallingInterrupt});
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[0].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[0].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[1].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[1].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[2].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[2].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[3].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[3].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[4].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[4].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[5].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[5].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[6].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[6].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[7].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[7].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[8].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[8].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[9].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[9].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[10].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[11].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[12].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[13].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[14].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[15].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[16].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[17].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[18].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[19].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[20].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[21].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[22].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[23].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[24].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[25].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[26].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[27].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[28].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[29].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[30].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.minMaxLim1.filterLengthSc[31].val", DumpEntry{top.dig.minMaxLim1.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.minMaxLim1.reTime[0].s", DumpEntry{top.dig.minMaxLim1.reTime[0].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[0].ns", DumpEntry{top.dig.minMaxLim1.reTime[0].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[1].s", DumpEntry{top.dig.minMaxLim1.reTime[1].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[1].ns", DumpEntry{top.dig.minMaxLim1.reTime[1].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[2].s", DumpEntry{top.dig.minMaxLim1.reTime[2].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[2].ns", DumpEntry{top.dig.minMaxLim1.reTime[2].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[3].s", DumpEntry{top.dig.minMaxLim1.reTime[3].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[3].ns", DumpEntry{top.dig.minMaxLim1.reTime[3].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[4].s", DumpEntry{top.dig.minMaxLim1.reTime[4].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[4].ns", DumpEntry{top.dig.minMaxLim1.reTime[4].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[5].s", DumpEntry{top.dig.minMaxLim1.reTime[5].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[5].ns", DumpEntry{top.dig.minMaxLim1.reTime[5].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[6].s", DumpEntry{top.dig.minMaxLim1.reTime[6].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[6].ns", DumpEntry{top.dig.minMaxLim1.reTime[6].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[7].s", DumpEntry{top.dig.minMaxLim1.reTime[7].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[7].ns", DumpEntry{top.dig.minMaxLim1.reTime[7].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[8].s", DumpEntry{top.dig.minMaxLim1.reTime[8].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[8].ns", DumpEntry{top.dig.minMaxLim1.reTime[8].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[9].s", DumpEntry{top.dig.minMaxLim1.reTime[9].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[9].ns", DumpEntry{top.dig.minMaxLim1.reTime[9].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[10].s", DumpEntry{top.dig.minMaxLim1.reTime[10].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[10].ns", DumpEntry{top.dig.minMaxLim1.reTime[10].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[11].s", DumpEntry{top.dig.minMaxLim1.reTime[11].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[11].ns", DumpEntry{top.dig.minMaxLim1.reTime[11].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[12].s", DumpEntry{top.dig.minMaxLim1.reTime[12].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[12].ns", DumpEntry{top.dig.minMaxLim1.reTime[12].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[13].s", DumpEntry{top.dig.minMaxLim1.reTime[13].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[13].ns", DumpEntry{top.dig.minMaxLim1.reTime[13].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[14].s", DumpEntry{top.dig.minMaxLim1.reTime[14].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[14].ns", DumpEntry{top.dig.minMaxLim1.reTime[14].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[15].s", DumpEntry{top.dig.minMaxLim1.reTime[15].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[15].ns", DumpEntry{top.dig.minMaxLim1.reTime[15].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[16].s", DumpEntry{top.dig.minMaxLim1.reTime[16].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[16].ns", DumpEntry{top.dig.minMaxLim1.reTime[16].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[17].s", DumpEntry{top.dig.minMaxLim1.reTime[17].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[17].ns", DumpEntry{top.dig.minMaxLim1.reTime[17].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[18].s", DumpEntry{top.dig.minMaxLim1.reTime[18].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[18].ns", DumpEntry{top.dig.minMaxLim1.reTime[18].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[19].s", DumpEntry{top.dig.minMaxLim1.reTime[19].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[19].ns", DumpEntry{top.dig.minMaxLim1.reTime[19].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[20].s", DumpEntry{top.dig.minMaxLim1.reTime[20].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[20].ns", DumpEntry{top.dig.minMaxLim1.reTime[20].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[21].s", DumpEntry{top.dig.minMaxLim1.reTime[21].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[21].ns", DumpEntry{top.dig.minMaxLim1.reTime[21].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[22].s", DumpEntry{top.dig.minMaxLim1.reTime[22].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[22].ns", DumpEntry{top.dig.minMaxLim1.reTime[22].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[23].s", DumpEntry{top.dig.minMaxLim1.reTime[23].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[23].ns", DumpEntry{top.dig.minMaxLim1.reTime[23].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[24].s", DumpEntry{top.dig.minMaxLim1.reTime[24].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[24].ns", DumpEntry{top.dig.minMaxLim1.reTime[24].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[25].s", DumpEntry{top.dig.minMaxLim1.reTime[25].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[25].ns", DumpEntry{top.dig.minMaxLim1.reTime[25].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[26].s", DumpEntry{top.dig.minMaxLim1.reTime[26].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[26].ns", DumpEntry{top.dig.minMaxLim1.reTime[26].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[27].s", DumpEntry{top.dig.minMaxLim1.reTime[27].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[27].ns", DumpEntry{top.dig.minMaxLim1.reTime[27].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[28].s", DumpEntry{top.dig.minMaxLim1.reTime[28].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[28].ns", DumpEntry{top.dig.minMaxLim1.reTime[28].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[29].s", DumpEntry{top.dig.minMaxLim1.reTime[29].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[29].ns", DumpEntry{top.dig.minMaxLim1.reTime[29].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[30].s", DumpEntry{top.dig.minMaxLim1.reTime[30].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[30].ns", DumpEntry{top.dig.minMaxLim1.reTime[30].ns});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[31].s", DumpEntry{top.dig.minMaxLim1.reTime[31].s});
        res.insert_or_assign("top.dig.minMaxLim1.reTime[31].ns", DumpEntry{top.dig.minMaxLim1.reTime[31].ns});
        res.insert_or_assign("top.dig.rmsLim0.staticParams", DumpEntry{top.dig.rmsLim0.staticParams});
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.invertIsEn", DumpEntry{top.dig.rmsLim0.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.enableIsEn", DumpEntry{top.dig.rmsLim0.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.latchIsEn", DumpEntry{top.dig.rmsLim0.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.deglitchIsEn", DumpEntry{top.dig.rmsLim0.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.reTimeIsEn", DumpEntry{top.dig.rmsLim0.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.staticParams.numChannels", DumpEntry{top.dig.rmsLim0.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.rmsLim0.data", DumpEntry{top.dig.rmsLim0.data});
        res.insert_or_assign("top.dig.rmsLim0.dataChanged", DumpEntry{top.dig.rmsLim0.dataChanged});
        res.insert_or_assign("top.dig.rmsLim0.invert", DumpEntry{top.dig.rmsLim0.invert});
        res.insert_or_assign("top.dig.rmsLim0.enable", DumpEntry{top.dig.rmsLim0.enable});
        res.insert_or_assign("top.dig.rmsLim0.latch", DumpEntry{top.dig.rmsLim0.latch});
        res.insert_or_assign("top.dig.rmsLim0.rstLatch", DumpEntry{top.dig.rmsLim0.rstLatch});
        res.insert_or_assign("top.dig.rmsLim0.risingInterrupt", DumpEntry{top.dig.rmsLim0.risingInterrupt});
        res.insert_or_assign("top.dig.rmsLim0.fallingInterrupt", DumpEntry{top.dig.rmsLim0.fallingInterrupt});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[0].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[0].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[1].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[1].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[2].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[2].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[3].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[3].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[4].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[4].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[5].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[5].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[6].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[6].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[7].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[7].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[8].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[8].val});
        res.insert_or_assign("top.dig.rmsLim0.filterLengthSc[9].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[9].val});
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[10].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[11].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[12].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[13].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[14].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[15].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[16].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[17].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[18].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[19].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[20].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[21].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[22].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[23].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[24].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[25].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[26].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[27].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[28].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[29].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[30].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim0.filterLengthSc[31].val", DumpEntry{top.dig.rmsLim0.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.rmsLim0.reTime[0].s", DumpEntry{top.dig.rmsLim0.reTime[0].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[0].ns", DumpEntry{top.dig.rmsLim0.reTime[0].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[1].s", DumpEntry{top.dig.rmsLim0.reTime[1].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[1].ns", DumpEntry{top.dig.rmsLim0.reTime[1].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[2].s", DumpEntry{top.dig.rmsLim0.reTime[2].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[2].ns", DumpEntry{top.dig.rmsLim0.reTime[2].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[3].s", DumpEntry{top.dig.rmsLim0.reTime[3].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[3].ns", DumpEntry{top.dig.rmsLim0.reTime[3].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[4].s", DumpEntry{top.dig.rmsLim0.reTime[4].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[4].ns", DumpEntry{top.dig.rmsLim0.reTime[4].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[5].s", DumpEntry{top.dig.rmsLim0.reTime[5].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[5].ns", DumpEntry{top.dig.rmsLim0.reTime[5].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[6].s", DumpEntry{top.dig.rmsLim0.reTime[6].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[6].ns", DumpEntry{top.dig.rmsLim0.reTime[6].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[7].s", DumpEntry{top.dig.rmsLim0.reTime[7].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[7].ns", DumpEntry{top.dig.rmsLim0.reTime[7].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[8].s", DumpEntry{top.dig.rmsLim0.reTime[8].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[8].ns", DumpEntry{top.dig.rmsLim0.reTime[8].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[9].s", DumpEntry{top.dig.rmsLim0.reTime[9].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[9].ns", DumpEntry{top.dig.rmsLim0.reTime[9].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[10].s", DumpEntry{top.dig.rmsLim0.reTime[10].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[10].ns", DumpEntry{top.dig.rmsLim0.reTime[10].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[11].s", DumpEntry{top.dig.rmsLim0.reTime[11].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[11].ns", DumpEntry{top.dig.rmsLim0.reTime[11].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[12].s", DumpEntry{top.dig.rmsLim0.reTime[12].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[12].ns", DumpEntry{top.dig.rmsLim0.reTime[12].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[13].s", DumpEntry{top.dig.rmsLim0.reTime[13].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[13].ns", DumpEntry{top.dig.rmsLim0.reTime[13].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[14].s", DumpEntry{top.dig.rmsLim0.reTime[14].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[14].ns", DumpEntry{top.dig.rmsLim0.reTime[14].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[15].s", DumpEntry{top.dig.rmsLim0.reTime[15].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[15].ns", DumpEntry{top.dig.rmsLim0.reTime[15].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[16].s", DumpEntry{top.dig.rmsLim0.reTime[16].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[16].ns", DumpEntry{top.dig.rmsLim0.reTime[16].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[17].s", DumpEntry{top.dig.rmsLim0.reTime[17].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[17].ns", DumpEntry{top.dig.rmsLim0.reTime[17].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[18].s", DumpEntry{top.dig.rmsLim0.reTime[18].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[18].ns", DumpEntry{top.dig.rmsLim0.reTime[18].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[19].s", DumpEntry{top.dig.rmsLim0.reTime[19].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[19].ns", DumpEntry{top.dig.rmsLim0.reTime[19].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[20].s", DumpEntry{top.dig.rmsLim0.reTime[20].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[20].ns", DumpEntry{top.dig.rmsLim0.reTime[20].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[21].s", DumpEntry{top.dig.rmsLim0.reTime[21].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[21].ns", DumpEntry{top.dig.rmsLim0.reTime[21].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[22].s", DumpEntry{top.dig.rmsLim0.reTime[22].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[22].ns", DumpEntry{top.dig.rmsLim0.reTime[22].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[23].s", DumpEntry{top.dig.rmsLim0.reTime[23].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[23].ns", DumpEntry{top.dig.rmsLim0.reTime[23].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[24].s", DumpEntry{top.dig.rmsLim0.reTime[24].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[24].ns", DumpEntry{top.dig.rmsLim0.reTime[24].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[25].s", DumpEntry{top.dig.rmsLim0.reTime[25].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[25].ns", DumpEntry{top.dig.rmsLim0.reTime[25].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[26].s", DumpEntry{top.dig.rmsLim0.reTime[26].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[26].ns", DumpEntry{top.dig.rmsLim0.reTime[26].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[27].s", DumpEntry{top.dig.rmsLim0.reTime[27].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[27].ns", DumpEntry{top.dig.rmsLim0.reTime[27].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[28].s", DumpEntry{top.dig.rmsLim0.reTime[28].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[28].ns", DumpEntry{top.dig.rmsLim0.reTime[28].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[29].s", DumpEntry{top.dig.rmsLim0.reTime[29].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[29].ns", DumpEntry{top.dig.rmsLim0.reTime[29].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[30].s", DumpEntry{top.dig.rmsLim0.reTime[30].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[30].ns", DumpEntry{top.dig.rmsLim0.reTime[30].ns});
        res.insert_or_assign("top.dig.rmsLim0.reTime[31].s", DumpEntry{top.dig.rmsLim0.reTime[31].s});
        res.insert_or_assign("top.dig.rmsLim0.reTime[31].ns", DumpEntry{top.dig.rmsLim0.reTime[31].ns});
        res.insert_or_assign("top.dig.rmsLim1.staticParams", DumpEntry{top.dig.rmsLim1.staticParams});
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.invertIsEn", DumpEntry{top.dig.rmsLim1.staticParams.invertIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.enableIsEn", DumpEntry{top.dig.rmsLim1.staticParams.enableIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.latchIsEn", DumpEntry{top.dig.rmsLim1.staticParams.latchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.deglitchIsEn", DumpEntry{top.dig.rmsLim1.staticParams.deglitchIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.reTimeIsEn", DumpEntry{top.dig.rmsLim1.staticParams.reTimeIsEn}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.staticParams.numChannels", DumpEntry{top.dig.rmsLim1.staticParams.numChannels}
        );
        res.insert_or_assign("top.dig.rmsLim1.data", DumpEntry{top.dig.rmsLim1.data});
        res.insert_or_assign("top.dig.rmsLim1.dataChanged", DumpEntry{top.dig.rmsLim1.dataChanged});
        res.insert_or_assign("top.dig.rmsLim1.invert", DumpEntry{top.dig.rmsLim1.invert});
        res.insert_or_assign("top.dig.rmsLim1.enable", DumpEntry{top.dig.rmsLim1.enable});
        res.insert_or_assign("top.dig.rmsLim1.latch", DumpEntry{top.dig.rmsLim1.latch});
        res.insert_or_assign("top.dig.rmsLim1.rstLatch", DumpEntry{top.dig.rmsLim1.rstLatch});
        res.insert_or_assign("top.dig.rmsLim1.risingInterrupt", DumpEntry{top.dig.rmsLim1.risingInterrupt});
        res.insert_or_assign("top.dig.rmsLim1.fallingInterrupt", DumpEntry{top.dig.rmsLim1.fallingInterrupt});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[0].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[0].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[1].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[1].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[2].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[2].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[3].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[3].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[4].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[4].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[5].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[5].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[6].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[6].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[7].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[7].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[8].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[8].val});
        res.insert_or_assign("top.dig.rmsLim1.filterLengthSc[9].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[9].val});
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[10].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[10].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[11].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[11].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[12].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[12].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[13].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[13].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[14].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[14].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[15].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[15].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[16].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[16].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[17].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[17].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[18].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[18].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[19].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[19].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[20].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[20].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[21].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[21].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[22].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[22].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[23].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[23].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[24].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[24].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[25].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[25].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[26].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[26].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[27].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[27].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[28].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[28].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[29].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[29].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[30].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[30].val}
        );
        res.insert_or_assign(
            "top.dig.rmsLim1.filterLengthSc[31].val", DumpEntry{top.dig.rmsLim1.filterLengthSc[31].val}
        );
        res.insert_or_assign("top.dig.rmsLim1.reTime[0].s", DumpEntry{top.dig.rmsLim1.reTime[0].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[0].ns", DumpEntry{top.dig.rmsLim1.reTime[0].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[1].s", DumpEntry{top.dig.rmsLim1.reTime[1].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[1].ns", DumpEntry{top.dig.rmsLim1.reTime[1].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[2].s", DumpEntry{top.dig.rmsLim1.reTime[2].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[2].ns", DumpEntry{top.dig.rmsLim1.reTime[2].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[3].s", DumpEntry{top.dig.rmsLim1.reTime[3].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[3].ns", DumpEntry{top.dig.rmsLim1.reTime[3].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[4].s", DumpEntry{top.dig.rmsLim1.reTime[4].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[4].ns", DumpEntry{top.dig.rmsLim1.reTime[4].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[5].s", DumpEntry{top.dig.rmsLim1.reTime[5].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[5].ns", DumpEntry{top.dig.rmsLim1.reTime[5].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[6].s", DumpEntry{top.dig.rmsLim1.reTime[6].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[6].ns", DumpEntry{top.dig.rmsLim1.reTime[6].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[7].s", DumpEntry{top.dig.rmsLim1.reTime[7].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[7].ns", DumpEntry{top.dig.rmsLim1.reTime[7].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[8].s", DumpEntry{top.dig.rmsLim1.reTime[8].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[8].ns", DumpEntry{top.dig.rmsLim1.reTime[8].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[9].s", DumpEntry{top.dig.rmsLim1.reTime[9].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[9].ns", DumpEntry{top.dig.rmsLim1.reTime[9].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[10].s", DumpEntry{top.dig.rmsLim1.reTime[10].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[10].ns", DumpEntry{top.dig.rmsLim1.reTime[10].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[11].s", DumpEntry{top.dig.rmsLim1.reTime[11].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[11].ns", DumpEntry{top.dig.rmsLim1.reTime[11].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[12].s", DumpEntry{top.dig.rmsLim1.reTime[12].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[12].ns", DumpEntry{top.dig.rmsLim1.reTime[12].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[13].s", DumpEntry{top.dig.rmsLim1.reTime[13].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[13].ns", DumpEntry{top.dig.rmsLim1.reTime[13].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[14].s", DumpEntry{top.dig.rmsLim1.reTime[14].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[14].ns", DumpEntry{top.dig.rmsLim1.reTime[14].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[15].s", DumpEntry{top.dig.rmsLim1.reTime[15].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[15].ns", DumpEntry{top.dig.rmsLim1.reTime[15].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[16].s", DumpEntry{top.dig.rmsLim1.reTime[16].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[16].ns", DumpEntry{top.dig.rmsLim1.reTime[16].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[17].s", DumpEntry{top.dig.rmsLim1.reTime[17].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[17].ns", DumpEntry{top.dig.rmsLim1.reTime[17].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[18].s", DumpEntry{top.dig.rmsLim1.reTime[18].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[18].ns", DumpEntry{top.dig.rmsLim1.reTime[18].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[19].s", DumpEntry{top.dig.rmsLim1.reTime[19].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[19].ns", DumpEntry{top.dig.rmsLim1.reTime[19].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[20].s", DumpEntry{top.dig.rmsLim1.reTime[20].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[20].ns", DumpEntry{top.dig.rmsLim1.reTime[20].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[21].s", DumpEntry{top.dig.rmsLim1.reTime[21].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[21].ns", DumpEntry{top.dig.rmsLim1.reTime[21].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[22].s", DumpEntry{top.dig.rmsLim1.reTime[22].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[22].ns", DumpEntry{top.dig.rmsLim1.reTime[22].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[23].s", DumpEntry{top.dig.rmsLim1.reTime[23].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[23].ns", DumpEntry{top.dig.rmsLim1.reTime[23].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[24].s", DumpEntry{top.dig.rmsLim1.reTime[24].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[24].ns", DumpEntry{top.dig.rmsLim1.reTime[24].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[25].s", DumpEntry{top.dig.rmsLim1.reTime[25].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[25].ns", DumpEntry{top.dig.rmsLim1.reTime[25].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[26].s", DumpEntry{top.dig.rmsLim1.reTime[26].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[26].ns", DumpEntry{top.dig.rmsLim1.reTime[26].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[27].s", DumpEntry{top.dig.rmsLim1.reTime[27].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[27].ns", DumpEntry{top.dig.rmsLim1.reTime[27].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[28].s", DumpEntry{top.dig.rmsLim1.reTime[28].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[28].ns", DumpEntry{top.dig.rmsLim1.reTime[28].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[29].s", DumpEntry{top.dig.rmsLim1.reTime[29].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[29].ns", DumpEntry{top.dig.rmsLim1.reTime[29].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[30].s", DumpEntry{top.dig.rmsLim1.reTime[30].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[30].ns", DumpEntry{top.dig.rmsLim1.reTime[30].ns});
        res.insert_or_assign("top.dig.rmsLim1.reTime[31].s", DumpEntry{top.dig.rmsLim1.reTime[31].s});
        res.insert_or_assign("top.dig.rmsLim1.reTime[31].ns", DumpEntry{top.dig.rmsLim1.reTime[31].ns});
        res.insert_or_assign("top.pwm[0].pwm.ctrl", DumpEntry{top.pwm[0].pwm.ctrl});
        res.insert_or_assign("top.pwm[0].pwm.ctrl.enable", DumpEntry{top.pwm[0].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[0].pwm.ctrl.reset", DumpEntry{top.pwm[0].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[0].pwm.carrierBits", DumpEntry{top.pwm[0].pwm.carrierBits});
        res.insert_or_assign("top.pwm[0].pwm.deadtimeBits", DumpEntry{top.pwm[0].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[0].pwm.config", DumpEntry{top.pwm[0].pwm.config});
        res.insert_or_assign("top.pwm[0].pwm.config.updateType", DumpEntry{top.pwm[0].pwm.config.updateType});
        res.insert_or_assign("top.pwm[0].pwm.config.enablePwmCheck", DumpEntry{top.pwm[0].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[0].pwm.config.enableStCheck", DumpEntry{top.pwm[0].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[0].pwm.config.enableValueCheck", DumpEntry{top.pwm[0].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[0].pwm.config.bypassDeadtime", DumpEntry{top.pwm[0].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[0].pwm.config.disableA", DumpEntry{top.pwm[0].pwm.config.disableA});
        res.insert_or_assign("top.pwm[0].pwm.config.disableB", DumpEntry{top.pwm[0].pwm.config.disableB});
        res.insert_or_assign("top.pwm[0].pwm.config.invert", DumpEntry{top.pwm[0].pwm.config.invert});
        res.insert_or_assign("top.pwm[0].pwm.config.decoupleCc1", DumpEntry{top.pwm[0].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[0].pwm.cc0Sc", DumpEntry{top.pwm[0].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[0].pwm.cc1Sc", DumpEntry{top.pwm[0].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[0].pwm.ctrhSc", DumpEntry{top.pwm[0].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[0].pwm.deadtimeSc", DumpEntry{top.pwm[0].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[0].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[0].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[0].pwm.minSwitchTimeSc", DumpEntry{top.pwm[0].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[0].pwm.minModIdxSc", DumpEntry{top.pwm[0].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[0].pwm.maxModIdxSc", DumpEntry{top.pwm[0].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[0].pwm.numberCcErrors", DumpEntry{top.pwm[0].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[1].pwm.ctrl", DumpEntry{top.pwm[1].pwm.ctrl});
        res.insert_or_assign("top.pwm[1].pwm.ctrl.enable", DumpEntry{top.pwm[1].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[1].pwm.ctrl.reset", DumpEntry{top.pwm[1].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[1].pwm.carrierBits", DumpEntry{top.pwm[1].pwm.carrierBits});
        res.insert_or_assign("top.pwm[1].pwm.deadtimeBits", DumpEntry{top.pwm[1].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[1].pwm.config", DumpEntry{top.pwm[1].pwm.config});
        res.insert_or_assign("top.pwm[1].pwm.config.updateType", DumpEntry{top.pwm[1].pwm.config.updateType});
        res.insert_or_assign("top.pwm[1].pwm.config.enablePwmCheck", DumpEntry{top.pwm[1].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[1].pwm.config.enableStCheck", DumpEntry{top.pwm[1].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[1].pwm.config.enableValueCheck", DumpEntry{top.pwm[1].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[1].pwm.config.bypassDeadtime", DumpEntry{top.pwm[1].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[1].pwm.config.disableA", DumpEntry{top.pwm[1].pwm.config.disableA});
        res.insert_or_assign("top.pwm[1].pwm.config.disableB", DumpEntry{top.pwm[1].pwm.config.disableB});
        res.insert_or_assign("top.pwm[1].pwm.config.invert", DumpEntry{top.pwm[1].pwm.config.invert});
        res.insert_or_assign("top.pwm[1].pwm.config.decoupleCc1", DumpEntry{top.pwm[1].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[1].pwm.cc0Sc", DumpEntry{top.pwm[1].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[1].pwm.cc1Sc", DumpEntry{top.pwm[1].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[1].pwm.ctrhSc", DumpEntry{top.pwm[1].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[1].pwm.deadtimeSc", DumpEntry{top.pwm[1].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[1].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[1].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[1].pwm.minSwitchTimeSc", DumpEntry{top.pwm[1].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[1].pwm.minModIdxSc", DumpEntry{top.pwm[1].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[1].pwm.maxModIdxSc", DumpEntry{top.pwm[1].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[1].pwm.numberCcErrors", DumpEntry{top.pwm[1].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[2].pwm.ctrl", DumpEntry{top.pwm[2].pwm.ctrl});
        res.insert_or_assign("top.pwm[2].pwm.ctrl.enable", DumpEntry{top.pwm[2].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[2].pwm.ctrl.reset", DumpEntry{top.pwm[2].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[2].pwm.carrierBits", DumpEntry{top.pwm[2].pwm.carrierBits});
        res.insert_or_assign("top.pwm[2].pwm.deadtimeBits", DumpEntry{top.pwm[2].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[2].pwm.config", DumpEntry{top.pwm[2].pwm.config});
        res.insert_or_assign("top.pwm[2].pwm.config.updateType", DumpEntry{top.pwm[2].pwm.config.updateType});
        res.insert_or_assign("top.pwm[2].pwm.config.enablePwmCheck", DumpEntry{top.pwm[2].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[2].pwm.config.enableStCheck", DumpEntry{top.pwm[2].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[2].pwm.config.enableValueCheck", DumpEntry{top.pwm[2].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[2].pwm.config.bypassDeadtime", DumpEntry{top.pwm[2].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[2].pwm.config.disableA", DumpEntry{top.pwm[2].pwm.config.disableA});
        res.insert_or_assign("top.pwm[2].pwm.config.disableB", DumpEntry{top.pwm[2].pwm.config.disableB});
        res.insert_or_assign("top.pwm[2].pwm.config.invert", DumpEntry{top.pwm[2].pwm.config.invert});
        res.insert_or_assign("top.pwm[2].pwm.config.decoupleCc1", DumpEntry{top.pwm[2].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[2].pwm.cc0Sc", DumpEntry{top.pwm[2].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[2].pwm.cc1Sc", DumpEntry{top.pwm[2].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[2].pwm.ctrhSc", DumpEntry{top.pwm[2].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[2].pwm.deadtimeSc", DumpEntry{top.pwm[2].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[2].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[2].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[2].pwm.minSwitchTimeSc", DumpEntry{top.pwm[2].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[2].pwm.minModIdxSc", DumpEntry{top.pwm[2].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[2].pwm.maxModIdxSc", DumpEntry{top.pwm[2].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[2].pwm.numberCcErrors", DumpEntry{top.pwm[2].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[3].pwm.ctrl", DumpEntry{top.pwm[3].pwm.ctrl});
        res.insert_or_assign("top.pwm[3].pwm.ctrl.enable", DumpEntry{top.pwm[3].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[3].pwm.ctrl.reset", DumpEntry{top.pwm[3].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[3].pwm.carrierBits", DumpEntry{top.pwm[3].pwm.carrierBits});
        res.insert_or_assign("top.pwm[3].pwm.deadtimeBits", DumpEntry{top.pwm[3].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[3].pwm.config", DumpEntry{top.pwm[3].pwm.config});
        res.insert_or_assign("top.pwm[3].pwm.config.updateType", DumpEntry{top.pwm[3].pwm.config.updateType});
        res.insert_or_assign("top.pwm[3].pwm.config.enablePwmCheck", DumpEntry{top.pwm[3].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[3].pwm.config.enableStCheck", DumpEntry{top.pwm[3].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[3].pwm.config.enableValueCheck", DumpEntry{top.pwm[3].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[3].pwm.config.bypassDeadtime", DumpEntry{top.pwm[3].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[3].pwm.config.disableA", DumpEntry{top.pwm[3].pwm.config.disableA});
        res.insert_or_assign("top.pwm[3].pwm.config.disableB", DumpEntry{top.pwm[3].pwm.config.disableB});
        res.insert_or_assign("top.pwm[3].pwm.config.invert", DumpEntry{top.pwm[3].pwm.config.invert});
        res.insert_or_assign("top.pwm[3].pwm.config.decoupleCc1", DumpEntry{top.pwm[3].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[3].pwm.cc0Sc", DumpEntry{top.pwm[3].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[3].pwm.cc1Sc", DumpEntry{top.pwm[3].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[3].pwm.ctrhSc", DumpEntry{top.pwm[3].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[3].pwm.deadtimeSc", DumpEntry{top.pwm[3].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[3].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[3].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[3].pwm.minSwitchTimeSc", DumpEntry{top.pwm[3].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[3].pwm.minModIdxSc", DumpEntry{top.pwm[3].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[3].pwm.maxModIdxSc", DumpEntry{top.pwm[3].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[3].pwm.numberCcErrors", DumpEntry{top.pwm[3].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[4].pwm.ctrl", DumpEntry{top.pwm[4].pwm.ctrl});
        res.insert_or_assign("top.pwm[4].pwm.ctrl.enable", DumpEntry{top.pwm[4].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[4].pwm.ctrl.reset", DumpEntry{top.pwm[4].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[4].pwm.carrierBits", DumpEntry{top.pwm[4].pwm.carrierBits});
        res.insert_or_assign("top.pwm[4].pwm.deadtimeBits", DumpEntry{top.pwm[4].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[4].pwm.config", DumpEntry{top.pwm[4].pwm.config});
        res.insert_or_assign("top.pwm[4].pwm.config.updateType", DumpEntry{top.pwm[4].pwm.config.updateType});
        res.insert_or_assign("top.pwm[4].pwm.config.enablePwmCheck", DumpEntry{top.pwm[4].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[4].pwm.config.enableStCheck", DumpEntry{top.pwm[4].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[4].pwm.config.enableValueCheck", DumpEntry{top.pwm[4].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[4].pwm.config.bypassDeadtime", DumpEntry{top.pwm[4].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[4].pwm.config.disableA", DumpEntry{top.pwm[4].pwm.config.disableA});
        res.insert_or_assign("top.pwm[4].pwm.config.disableB", DumpEntry{top.pwm[4].pwm.config.disableB});
        res.insert_or_assign("top.pwm[4].pwm.config.invert", DumpEntry{top.pwm[4].pwm.config.invert});
        res.insert_or_assign("top.pwm[4].pwm.config.decoupleCc1", DumpEntry{top.pwm[4].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[4].pwm.cc0Sc", DumpEntry{top.pwm[4].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[4].pwm.cc1Sc", DumpEntry{top.pwm[4].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[4].pwm.ctrhSc", DumpEntry{top.pwm[4].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[4].pwm.deadtimeSc", DumpEntry{top.pwm[4].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[4].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[4].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[4].pwm.minSwitchTimeSc", DumpEntry{top.pwm[4].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[4].pwm.minModIdxSc", DumpEntry{top.pwm[4].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[4].pwm.maxModIdxSc", DumpEntry{top.pwm[4].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[4].pwm.numberCcErrors", DumpEntry{top.pwm[4].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[5].pwm.ctrl", DumpEntry{top.pwm[5].pwm.ctrl});
        res.insert_or_assign("top.pwm[5].pwm.ctrl.enable", DumpEntry{top.pwm[5].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[5].pwm.ctrl.reset", DumpEntry{top.pwm[5].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[5].pwm.carrierBits", DumpEntry{top.pwm[5].pwm.carrierBits});
        res.insert_or_assign("top.pwm[5].pwm.deadtimeBits", DumpEntry{top.pwm[5].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[5].pwm.config", DumpEntry{top.pwm[5].pwm.config});
        res.insert_or_assign("top.pwm[5].pwm.config.updateType", DumpEntry{top.pwm[5].pwm.config.updateType});
        res.insert_or_assign("top.pwm[5].pwm.config.enablePwmCheck", DumpEntry{top.pwm[5].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[5].pwm.config.enableStCheck", DumpEntry{top.pwm[5].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[5].pwm.config.enableValueCheck", DumpEntry{top.pwm[5].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[5].pwm.config.bypassDeadtime", DumpEntry{top.pwm[5].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[5].pwm.config.disableA", DumpEntry{top.pwm[5].pwm.config.disableA});
        res.insert_or_assign("top.pwm[5].pwm.config.disableB", DumpEntry{top.pwm[5].pwm.config.disableB});
        res.insert_or_assign("top.pwm[5].pwm.config.invert", DumpEntry{top.pwm[5].pwm.config.invert});
        res.insert_or_assign("top.pwm[5].pwm.config.decoupleCc1", DumpEntry{top.pwm[5].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[5].pwm.cc0Sc", DumpEntry{top.pwm[5].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[5].pwm.cc1Sc", DumpEntry{top.pwm[5].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[5].pwm.ctrhSc", DumpEntry{top.pwm[5].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[5].pwm.deadtimeSc", DumpEntry{top.pwm[5].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[5].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[5].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[5].pwm.minSwitchTimeSc", DumpEntry{top.pwm[5].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[5].pwm.minModIdxSc", DumpEntry{top.pwm[5].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[5].pwm.maxModIdxSc", DumpEntry{top.pwm[5].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[5].pwm.numberCcErrors", DumpEntry{top.pwm[5].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[6].pwm.ctrl", DumpEntry{top.pwm[6].pwm.ctrl});
        res.insert_or_assign("top.pwm[6].pwm.ctrl.enable", DumpEntry{top.pwm[6].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[6].pwm.ctrl.reset", DumpEntry{top.pwm[6].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[6].pwm.carrierBits", DumpEntry{top.pwm[6].pwm.carrierBits});
        res.insert_or_assign("top.pwm[6].pwm.deadtimeBits", DumpEntry{top.pwm[6].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[6].pwm.config", DumpEntry{top.pwm[6].pwm.config});
        res.insert_or_assign("top.pwm[6].pwm.config.updateType", DumpEntry{top.pwm[6].pwm.config.updateType});
        res.insert_or_assign("top.pwm[6].pwm.config.enablePwmCheck", DumpEntry{top.pwm[6].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[6].pwm.config.enableStCheck", DumpEntry{top.pwm[6].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[6].pwm.config.enableValueCheck", DumpEntry{top.pwm[6].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[6].pwm.config.bypassDeadtime", DumpEntry{top.pwm[6].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[6].pwm.config.disableA", DumpEntry{top.pwm[6].pwm.config.disableA});
        res.insert_or_assign("top.pwm[6].pwm.config.disableB", DumpEntry{top.pwm[6].pwm.config.disableB});
        res.insert_or_assign("top.pwm[6].pwm.config.invert", DumpEntry{top.pwm[6].pwm.config.invert});
        res.insert_or_assign("top.pwm[6].pwm.config.decoupleCc1", DumpEntry{top.pwm[6].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[6].pwm.cc0Sc", DumpEntry{top.pwm[6].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[6].pwm.cc1Sc", DumpEntry{top.pwm[6].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[6].pwm.ctrhSc", DumpEntry{top.pwm[6].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[6].pwm.deadtimeSc", DumpEntry{top.pwm[6].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[6].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[6].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[6].pwm.minSwitchTimeSc", DumpEntry{top.pwm[6].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[6].pwm.minModIdxSc", DumpEntry{top.pwm[6].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[6].pwm.maxModIdxSc", DumpEntry{top.pwm[6].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[6].pwm.numberCcErrors", DumpEntry{top.pwm[6].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[7].pwm.ctrl", DumpEntry{top.pwm[7].pwm.ctrl});
        res.insert_or_assign("top.pwm[7].pwm.ctrl.enable", DumpEntry{top.pwm[7].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[7].pwm.ctrl.reset", DumpEntry{top.pwm[7].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[7].pwm.carrierBits", DumpEntry{top.pwm[7].pwm.carrierBits});
        res.insert_or_assign("top.pwm[7].pwm.deadtimeBits", DumpEntry{top.pwm[7].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[7].pwm.config", DumpEntry{top.pwm[7].pwm.config});
        res.insert_or_assign("top.pwm[7].pwm.config.updateType", DumpEntry{top.pwm[7].pwm.config.updateType});
        res.insert_or_assign("top.pwm[7].pwm.config.enablePwmCheck", DumpEntry{top.pwm[7].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[7].pwm.config.enableStCheck", DumpEntry{top.pwm[7].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[7].pwm.config.enableValueCheck", DumpEntry{top.pwm[7].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[7].pwm.config.bypassDeadtime", DumpEntry{top.pwm[7].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[7].pwm.config.disableA", DumpEntry{top.pwm[7].pwm.config.disableA});
        res.insert_or_assign("top.pwm[7].pwm.config.disableB", DumpEntry{top.pwm[7].pwm.config.disableB});
        res.insert_or_assign("top.pwm[7].pwm.config.invert", DumpEntry{top.pwm[7].pwm.config.invert});
        res.insert_or_assign("top.pwm[7].pwm.config.decoupleCc1", DumpEntry{top.pwm[7].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[7].pwm.cc0Sc", DumpEntry{top.pwm[7].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[7].pwm.cc1Sc", DumpEntry{top.pwm[7].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[7].pwm.ctrhSc", DumpEntry{top.pwm[7].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[7].pwm.deadtimeSc", DumpEntry{top.pwm[7].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[7].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[7].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[7].pwm.minSwitchTimeSc", DumpEntry{top.pwm[7].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[7].pwm.minModIdxSc", DumpEntry{top.pwm[7].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[7].pwm.maxModIdxSc", DumpEntry{top.pwm[7].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[7].pwm.numberCcErrors", DumpEntry{top.pwm[7].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[8].pwm.ctrl", DumpEntry{top.pwm[8].pwm.ctrl});
        res.insert_or_assign("top.pwm[8].pwm.ctrl.enable", DumpEntry{top.pwm[8].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[8].pwm.ctrl.reset", DumpEntry{top.pwm[8].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[8].pwm.carrierBits", DumpEntry{top.pwm[8].pwm.carrierBits});
        res.insert_or_assign("top.pwm[8].pwm.deadtimeBits", DumpEntry{top.pwm[8].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[8].pwm.config", DumpEntry{top.pwm[8].pwm.config});
        res.insert_or_assign("top.pwm[8].pwm.config.updateType", DumpEntry{top.pwm[8].pwm.config.updateType});
        res.insert_or_assign("top.pwm[8].pwm.config.enablePwmCheck", DumpEntry{top.pwm[8].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[8].pwm.config.enableStCheck", DumpEntry{top.pwm[8].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[8].pwm.config.enableValueCheck", DumpEntry{top.pwm[8].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[8].pwm.config.bypassDeadtime", DumpEntry{top.pwm[8].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[8].pwm.config.disableA", DumpEntry{top.pwm[8].pwm.config.disableA});
        res.insert_or_assign("top.pwm[8].pwm.config.disableB", DumpEntry{top.pwm[8].pwm.config.disableB});
        res.insert_or_assign("top.pwm[8].pwm.config.invert", DumpEntry{top.pwm[8].pwm.config.invert});
        res.insert_or_assign("top.pwm[8].pwm.config.decoupleCc1", DumpEntry{top.pwm[8].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[8].pwm.cc0Sc", DumpEntry{top.pwm[8].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[8].pwm.cc1Sc", DumpEntry{top.pwm[8].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[8].pwm.ctrhSc", DumpEntry{top.pwm[8].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[8].pwm.deadtimeSc", DumpEntry{top.pwm[8].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[8].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[8].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[8].pwm.minSwitchTimeSc", DumpEntry{top.pwm[8].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[8].pwm.minModIdxSc", DumpEntry{top.pwm[8].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[8].pwm.maxModIdxSc", DumpEntry{top.pwm[8].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[8].pwm.numberCcErrors", DumpEntry{top.pwm[8].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[9].pwm.ctrl", DumpEntry{top.pwm[9].pwm.ctrl});
        res.insert_or_assign("top.pwm[9].pwm.ctrl.enable", DumpEntry{top.pwm[9].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[9].pwm.ctrl.reset", DumpEntry{top.pwm[9].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[9].pwm.carrierBits", DumpEntry{top.pwm[9].pwm.carrierBits});
        res.insert_or_assign("top.pwm[9].pwm.deadtimeBits", DumpEntry{top.pwm[9].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[9].pwm.config", DumpEntry{top.pwm[9].pwm.config});
        res.insert_or_assign("top.pwm[9].pwm.config.updateType", DumpEntry{top.pwm[9].pwm.config.updateType});
        res.insert_or_assign("top.pwm[9].pwm.config.enablePwmCheck", DumpEntry{top.pwm[9].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[9].pwm.config.enableStCheck", DumpEntry{top.pwm[9].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[9].pwm.config.enableValueCheck", DumpEntry{top.pwm[9].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[9].pwm.config.bypassDeadtime", DumpEntry{top.pwm[9].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[9].pwm.config.disableA", DumpEntry{top.pwm[9].pwm.config.disableA});
        res.insert_or_assign("top.pwm[9].pwm.config.disableB", DumpEntry{top.pwm[9].pwm.config.disableB});
        res.insert_or_assign("top.pwm[9].pwm.config.invert", DumpEntry{top.pwm[9].pwm.config.invert});
        res.insert_or_assign("top.pwm[9].pwm.config.decoupleCc1", DumpEntry{top.pwm[9].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[9].pwm.cc0Sc", DumpEntry{top.pwm[9].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[9].pwm.cc1Sc", DumpEntry{top.pwm[9].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[9].pwm.ctrhSc", DumpEntry{top.pwm[9].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[9].pwm.deadtimeSc", DumpEntry{top.pwm[9].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[9].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[9].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[9].pwm.minSwitchTimeSc", DumpEntry{top.pwm[9].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[9].pwm.minModIdxSc", DumpEntry{top.pwm[9].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[9].pwm.maxModIdxSc", DumpEntry{top.pwm[9].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[9].pwm.numberCcErrors", DumpEntry{top.pwm[9].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[10].pwm.ctrl", DumpEntry{top.pwm[10].pwm.ctrl});
        res.insert_or_assign("top.pwm[10].pwm.ctrl.enable", DumpEntry{top.pwm[10].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[10].pwm.ctrl.reset", DumpEntry{top.pwm[10].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[10].pwm.carrierBits", DumpEntry{top.pwm[10].pwm.carrierBits});
        res.insert_or_assign("top.pwm[10].pwm.deadtimeBits", DumpEntry{top.pwm[10].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[10].pwm.config", DumpEntry{top.pwm[10].pwm.config});
        res.insert_or_assign("top.pwm[10].pwm.config.updateType", DumpEntry{top.pwm[10].pwm.config.updateType});
        res.insert_or_assign("top.pwm[10].pwm.config.enablePwmCheck", DumpEntry{top.pwm[10].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[10].pwm.config.enableStCheck", DumpEntry{top.pwm[10].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[10].pwm.config.enableValueCheck", DumpEntry{top.pwm[10].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[10].pwm.config.bypassDeadtime", DumpEntry{top.pwm[10].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[10].pwm.config.disableA", DumpEntry{top.pwm[10].pwm.config.disableA});
        res.insert_or_assign("top.pwm[10].pwm.config.disableB", DumpEntry{top.pwm[10].pwm.config.disableB});
        res.insert_or_assign("top.pwm[10].pwm.config.invert", DumpEntry{top.pwm[10].pwm.config.invert});
        res.insert_or_assign("top.pwm[10].pwm.config.decoupleCc1", DumpEntry{top.pwm[10].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[10].pwm.cc0Sc", DumpEntry{top.pwm[10].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[10].pwm.cc1Sc", DumpEntry{top.pwm[10].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[10].pwm.ctrhSc", DumpEntry{top.pwm[10].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[10].pwm.deadtimeSc", DumpEntry{top.pwm[10].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[10].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[10].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[10].pwm.minSwitchTimeSc", DumpEntry{top.pwm[10].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[10].pwm.minModIdxSc", DumpEntry{top.pwm[10].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[10].pwm.maxModIdxSc", DumpEntry{top.pwm[10].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[10].pwm.numberCcErrors", DumpEntry{top.pwm[10].pwm.numberCcErrors});
        res.insert_or_assign("top.pwm[11].pwm.ctrl", DumpEntry{top.pwm[11].pwm.ctrl});
        res.insert_or_assign("top.pwm[11].pwm.ctrl.enable", DumpEntry{top.pwm[11].pwm.ctrl.enable});
        res.insert_or_assign("top.pwm[11].pwm.ctrl.reset", DumpEntry{top.pwm[11].pwm.ctrl.reset});
        res.insert_or_assign("top.pwm[11].pwm.carrierBits", DumpEntry{top.pwm[11].pwm.carrierBits});
        res.insert_or_assign("top.pwm[11].pwm.deadtimeBits", DumpEntry{top.pwm[11].pwm.deadtimeBits});
        res.insert_or_assign("top.pwm[11].pwm.config", DumpEntry{top.pwm[11].pwm.config});
        res.insert_or_assign("top.pwm[11].pwm.config.updateType", DumpEntry{top.pwm[11].pwm.config.updateType});
        res.insert_or_assign("top.pwm[11].pwm.config.enablePwmCheck", DumpEntry{top.pwm[11].pwm.config.enablePwmCheck});
        res.insert_or_assign("top.pwm[11].pwm.config.enableStCheck", DumpEntry{top.pwm[11].pwm.config.enableStCheck});
        res.insert_or_assign(
            "top.pwm[11].pwm.config.enableValueCheck", DumpEntry{top.pwm[11].pwm.config.enableValueCheck}
        );
        res.insert_or_assign("top.pwm[11].pwm.config.bypassDeadtime", DumpEntry{top.pwm[11].pwm.config.bypassDeadtime});
        res.insert_or_assign("top.pwm[11].pwm.config.disableA", DumpEntry{top.pwm[11].pwm.config.disableA});
        res.insert_or_assign("top.pwm[11].pwm.config.disableB", DumpEntry{top.pwm[11].pwm.config.disableB});
        res.insert_or_assign("top.pwm[11].pwm.config.invert", DumpEntry{top.pwm[11].pwm.config.invert});
        res.insert_or_assign("top.pwm[11].pwm.config.decoupleCc1", DumpEntry{top.pwm[11].pwm.config.decoupleCc1});
        res.insert_or_assign("top.pwm[11].pwm.cc0Sc", DumpEntry{top.pwm[11].pwm.cc0Sc});
        res.insert_or_assign("top.pwm[11].pwm.cc1Sc", DumpEntry{top.pwm[11].pwm.cc1Sc});
        res.insert_or_assign("top.pwm[11].pwm.ctrhSc", DumpEntry{top.pwm[11].pwm.ctrhSc});
        res.insert_or_assign("top.pwm[11].pwm.deadtimeSc", DumpEntry{top.pwm[11].pwm.deadtimeSc});
        res.insert_or_assign("top.pwm[11].pwm.extendedDeadtimeSc", DumpEntry{top.pwm[11].pwm.extendedDeadtimeSc});
        res.insert_or_assign("top.pwm[11].pwm.minSwitchTimeSc", DumpEntry{top.pwm[11].pwm.minSwitchTimeSc});
        res.insert_or_assign("top.pwm[11].pwm.minModIdxSc", DumpEntry{top.pwm[11].pwm.minModIdxSc});
        res.insert_or_assign("top.pwm[11].pwm.maxModIdxSc", DumpEntry{top.pwm[11].pwm.maxModIdxSc});
        res.insert_or_assign("top.pwm[11].pwm.numberCcErrors", DumpEntry{top.pwm[11].pwm.numberCcErrors});
        // top.ddma.trig.trig skipped (Register is not readable).
        res.insert_or_assign("top.ddma.td[0].srcAddr", DumpEntry{top.ddma.td[0].srcAddr});
        res.insert_or_assign("top.ddma.td[0].destAddr", DumpEntry{top.ddma.td[0].destAddr});
        res.insert_or_assign("top.ddma.td[0].btt", DumpEntry{top.ddma.td[0].btt});
        res.insert_or_assign("top.ddma.td[0].btt.value", DumpEntry{top.ddma.td[0].btt.value});
        res.insert_or_assign("top.ddma.td[0].errors", DumpEntry{top.ddma.td[0].errors});
        res.insert_or_assign("top.ddma.td[0].errors.internalError", DumpEntry{top.ddma.td[0].errors.internalError});
        res.insert_or_assign("top.ddma.td[0].errors.slaveError", DumpEntry{top.ddma.td[0].errors.slaveError});
        res.insert_or_assign("top.ddma.td[0].errors.decodeError", DumpEntry{top.ddma.td[0].errors.decodeError});
        res.insert_or_assign("top.ddma.td[1].srcAddr", DumpEntry{top.ddma.td[1].srcAddr});
        res.insert_or_assign("top.ddma.td[1].destAddr", DumpEntry{top.ddma.td[1].destAddr});
        res.insert_or_assign("top.ddma.td[1].btt", DumpEntry{top.ddma.td[1].btt});
        res.insert_or_assign("top.ddma.td[1].btt.value", DumpEntry{top.ddma.td[1].btt.value});
        res.insert_or_assign("top.ddma.td[1].errors", DumpEntry{top.ddma.td[1].errors});
        res.insert_or_assign("top.ddma.td[1].errors.internalError", DumpEntry{top.ddma.td[1].errors.internalError});
        res.insert_or_assign("top.ddma.td[1].errors.slaveError", DumpEntry{top.ddma.td[1].errors.slaveError});
        res.insert_or_assign("top.ddma.td[1].errors.decodeError", DumpEntry{top.ddma.td[1].errors.decodeError});
        res.insert_or_assign("top.ddma.td[2].srcAddr", DumpEntry{top.ddma.td[2].srcAddr});
        res.insert_or_assign("top.ddma.td[2].destAddr", DumpEntry{top.ddma.td[2].destAddr});
        res.insert_or_assign("top.ddma.td[2].btt", DumpEntry{top.ddma.td[2].btt});
        res.insert_or_assign("top.ddma.td[2].btt.value", DumpEntry{top.ddma.td[2].btt.value});
        res.insert_or_assign("top.ddma.td[2].errors", DumpEntry{top.ddma.td[2].errors});
        res.insert_or_assign("top.ddma.td[2].errors.internalError", DumpEntry{top.ddma.td[2].errors.internalError});
        res.insert_or_assign("top.ddma.td[2].errors.slaveError", DumpEntry{top.ddma.td[2].errors.slaveError});
        res.insert_or_assign("top.ddma.td[2].errors.decodeError", DumpEntry{top.ddma.td[2].errors.decodeError});
        res.insert_or_assign("top.ddma.td[3].srcAddr", DumpEntry{top.ddma.td[3].srcAddr});
        res.insert_or_assign("top.ddma.td[3].destAddr", DumpEntry{top.ddma.td[3].destAddr});
        res.insert_or_assign("top.ddma.td[3].btt", DumpEntry{top.ddma.td[3].btt});
        res.insert_or_assign("top.ddma.td[3].btt.value", DumpEntry{top.ddma.td[3].btt.value});
        res.insert_or_assign("top.ddma.td[3].errors", DumpEntry{top.ddma.td[3].errors});
        res.insert_or_assign("top.ddma.td[3].errors.internalError", DumpEntry{top.ddma.td[3].errors.internalError});
        res.insert_or_assign("top.ddma.td[3].errors.slaveError", DumpEntry{top.ddma.td[3].errors.slaveError});
        res.insert_or_assign("top.ddma.td[3].errors.decodeError", DumpEntry{top.ddma.td[3].errors.decodeError});
        res.insert_or_assign("top.ddma.td[4].srcAddr", DumpEntry{top.ddma.td[4].srcAddr});
        res.insert_or_assign("top.ddma.td[4].destAddr", DumpEntry{top.ddma.td[4].destAddr});
        res.insert_or_assign("top.ddma.td[4].btt", DumpEntry{top.ddma.td[4].btt});
        res.insert_or_assign("top.ddma.td[4].btt.value", DumpEntry{top.ddma.td[4].btt.value});
        res.insert_or_assign("top.ddma.td[4].errors", DumpEntry{top.ddma.td[4].errors});
        res.insert_or_assign("top.ddma.td[4].errors.internalError", DumpEntry{top.ddma.td[4].errors.internalError});
        res.insert_or_assign("top.ddma.td[4].errors.slaveError", DumpEntry{top.ddma.td[4].errors.slaveError});
        res.insert_or_assign("top.ddma.td[4].errors.decodeError", DumpEntry{top.ddma.td[4].errors.decodeError});
        res.insert_or_assign("top.ddma.td[5].srcAddr", DumpEntry{top.ddma.td[5].srcAddr});
        res.insert_or_assign("top.ddma.td[5].destAddr", DumpEntry{top.ddma.td[5].destAddr});
        res.insert_or_assign("top.ddma.td[5].btt", DumpEntry{top.ddma.td[5].btt});
        res.insert_or_assign("top.ddma.td[5].btt.value", DumpEntry{top.ddma.td[5].btt.value});
        res.insert_or_assign("top.ddma.td[5].errors", DumpEntry{top.ddma.td[5].errors});
        res.insert_or_assign("top.ddma.td[5].errors.internalError", DumpEntry{top.ddma.td[5].errors.internalError});
        res.insert_or_assign("top.ddma.td[5].errors.slaveError", DumpEntry{top.ddma.td[5].errors.slaveError});
        res.insert_or_assign("top.ddma.td[5].errors.decodeError", DumpEntry{top.ddma.td[5].errors.decodeError});
        res.insert_or_assign("top.ddma.td[6].srcAddr", DumpEntry{top.ddma.td[6].srcAddr});
        res.insert_or_assign("top.ddma.td[6].destAddr", DumpEntry{top.ddma.td[6].destAddr});
        res.insert_or_assign("top.ddma.td[6].btt", DumpEntry{top.ddma.td[6].btt});
        res.insert_or_assign("top.ddma.td[6].btt.value", DumpEntry{top.ddma.td[6].btt.value});
        res.insert_or_assign("top.ddma.td[6].errors", DumpEntry{top.ddma.td[6].errors});
        res.insert_or_assign("top.ddma.td[6].errors.internalError", DumpEntry{top.ddma.td[6].errors.internalError});
        res.insert_or_assign("top.ddma.td[6].errors.slaveError", DumpEntry{top.ddma.td[6].errors.slaveError});
        res.insert_or_assign("top.ddma.td[6].errors.decodeError", DumpEntry{top.ddma.td[6].errors.decodeError});
        res.insert_or_assign("top.ddma.td[7].srcAddr", DumpEntry{top.ddma.td[7].srcAddr});
        res.insert_or_assign("top.ddma.td[7].destAddr", DumpEntry{top.ddma.td[7].destAddr});
        res.insert_or_assign("top.ddma.td[7].btt", DumpEntry{top.ddma.td[7].btt});
        res.insert_or_assign("top.ddma.td[7].btt.value", DumpEntry{top.ddma.td[7].btt.value});
        res.insert_or_assign("top.ddma.td[7].errors", DumpEntry{top.ddma.td[7].errors});
        res.insert_or_assign("top.ddma.td[7].errors.internalError", DumpEntry{top.ddma.td[7].errors.internalError});
        res.insert_or_assign("top.ddma.td[7].errors.slaveError", DumpEntry{top.ddma.td[7].errors.slaveError});
        res.insert_or_assign("top.ddma.td[7].errors.decodeError", DumpEntry{top.ddma.td[7].errors.decodeError});
        res.insert_or_assign("top.ddma.td[8].srcAddr", DumpEntry{top.ddma.td[8].srcAddr});
        res.insert_or_assign("top.ddma.td[8].destAddr", DumpEntry{top.ddma.td[8].destAddr});
        res.insert_or_assign("top.ddma.td[8].btt", DumpEntry{top.ddma.td[8].btt});
        res.insert_or_assign("top.ddma.td[8].btt.value", DumpEntry{top.ddma.td[8].btt.value});
        res.insert_or_assign("top.ddma.td[8].errors", DumpEntry{top.ddma.td[8].errors});
        res.insert_or_assign("top.ddma.td[8].errors.internalError", DumpEntry{top.ddma.td[8].errors.internalError});
        res.insert_or_assign("top.ddma.td[8].errors.slaveError", DumpEntry{top.ddma.td[8].errors.slaveError});
        res.insert_or_assign("top.ddma.td[8].errors.decodeError", DumpEntry{top.ddma.td[8].errors.decodeError});
        res.insert_or_assign("top.ddma.td[9].srcAddr", DumpEntry{top.ddma.td[9].srcAddr});
        res.insert_or_assign("top.ddma.td[9].destAddr", DumpEntry{top.ddma.td[9].destAddr});
        res.insert_or_assign("top.ddma.td[9].btt", DumpEntry{top.ddma.td[9].btt});
        res.insert_or_assign("top.ddma.td[9].btt.value", DumpEntry{top.ddma.td[9].btt.value});
        res.insert_or_assign("top.ddma.td[9].errors", DumpEntry{top.ddma.td[9].errors});
        res.insert_or_assign("top.ddma.td[9].errors.internalError", DumpEntry{top.ddma.td[9].errors.internalError});
        res.insert_or_assign("top.ddma.td[9].errors.slaveError", DumpEntry{top.ddma.td[9].errors.slaveError});
        res.insert_or_assign("top.ddma.td[9].errors.decodeError", DumpEntry{top.ddma.td[9].errors.decodeError});
        res.insert_or_assign("top.ddma.td[10].srcAddr", DumpEntry{top.ddma.td[10].srcAddr});
        res.insert_or_assign("top.ddma.td[10].destAddr", DumpEntry{top.ddma.td[10].destAddr});
        res.insert_or_assign("top.ddma.td[10].btt", DumpEntry{top.ddma.td[10].btt});
        res.insert_or_assign("top.ddma.td[10].btt.value", DumpEntry{top.ddma.td[10].btt.value});
        res.insert_or_assign("top.ddma.td[10].errors", DumpEntry{top.ddma.td[10].errors});
        res.insert_or_assign("top.ddma.td[10].errors.internalError", DumpEntry{top.ddma.td[10].errors.internalError});
        res.insert_or_assign("top.ddma.td[10].errors.slaveError", DumpEntry{top.ddma.td[10].errors.slaveError});
        res.insert_or_assign("top.ddma.td[10].errors.decodeError", DumpEntry{top.ddma.td[10].errors.decodeError});
        res.insert_or_assign("top.ddma.td[11].srcAddr", DumpEntry{top.ddma.td[11].srcAddr});
        res.insert_or_assign("top.ddma.td[11].destAddr", DumpEntry{top.ddma.td[11].destAddr});
        res.insert_or_assign("top.ddma.td[11].btt", DumpEntry{top.ddma.td[11].btt});
        res.insert_or_assign("top.ddma.td[11].btt.value", DumpEntry{top.ddma.td[11].btt.value});
        res.insert_or_assign("top.ddma.td[11].errors", DumpEntry{top.ddma.td[11].errors});
        res.insert_or_assign("top.ddma.td[11].errors.internalError", DumpEntry{top.ddma.td[11].errors.internalError});
        res.insert_or_assign("top.ddma.td[11].errors.slaveError", DumpEntry{top.ddma.td[11].errors.slaveError});
        res.insert_or_assign("top.ddma.td[11].errors.decodeError", DumpEntry{top.ddma.td[11].errors.decodeError});
        res.insert_or_assign("top.ddma.td[12].srcAddr", DumpEntry{top.ddma.td[12].srcAddr});
        res.insert_or_assign("top.ddma.td[12].destAddr", DumpEntry{top.ddma.td[12].destAddr});
        res.insert_or_assign("top.ddma.td[12].btt", DumpEntry{top.ddma.td[12].btt});
        res.insert_or_assign("top.ddma.td[12].btt.value", DumpEntry{top.ddma.td[12].btt.value});
        res.insert_or_assign("top.ddma.td[12].errors", DumpEntry{top.ddma.td[12].errors});
        res.insert_or_assign("top.ddma.td[12].errors.internalError", DumpEntry{top.ddma.td[12].errors.internalError});
        res.insert_or_assign("top.ddma.td[12].errors.slaveError", DumpEntry{top.ddma.td[12].errors.slaveError});
        res.insert_or_assign("top.ddma.td[12].errors.decodeError", DumpEntry{top.ddma.td[12].errors.decodeError});
        res.insert_or_assign("top.ddma.td[13].srcAddr", DumpEntry{top.ddma.td[13].srcAddr});
        res.insert_or_assign("top.ddma.td[13].destAddr", DumpEntry{top.ddma.td[13].destAddr});
        res.insert_or_assign("top.ddma.td[13].btt", DumpEntry{top.ddma.td[13].btt});
        res.insert_or_assign("top.ddma.td[13].btt.value", DumpEntry{top.ddma.td[13].btt.value});
        res.insert_or_assign("top.ddma.td[13].errors", DumpEntry{top.ddma.td[13].errors});
        res.insert_or_assign("top.ddma.td[13].errors.internalError", DumpEntry{top.ddma.td[13].errors.internalError});
        res.insert_or_assign("top.ddma.td[13].errors.slaveError", DumpEntry{top.ddma.td[13].errors.slaveError});
        res.insert_or_assign("top.ddma.td[13].errors.decodeError", DumpEntry{top.ddma.td[13].errors.decodeError});
        res.insert_or_assign("top.ddma.td[14].srcAddr", DumpEntry{top.ddma.td[14].srcAddr});
        res.insert_or_assign("top.ddma.td[14].destAddr", DumpEntry{top.ddma.td[14].destAddr});
        res.insert_or_assign("top.ddma.td[14].btt", DumpEntry{top.ddma.td[14].btt});
        res.insert_or_assign("top.ddma.td[14].btt.value", DumpEntry{top.ddma.td[14].btt.value});
        res.insert_or_assign("top.ddma.td[14].errors", DumpEntry{top.ddma.td[14].errors});
        res.insert_or_assign("top.ddma.td[14].errors.internalError", DumpEntry{top.ddma.td[14].errors.internalError});
        res.insert_or_assign("top.ddma.td[14].errors.slaveError", DumpEntry{top.ddma.td[14].errors.slaveError});
        res.insert_or_assign("top.ddma.td[14].errors.decodeError", DumpEntry{top.ddma.td[14].errors.decodeError});
        res.insert_or_assign("top.ddma.td[15].srcAddr", DumpEntry{top.ddma.td[15].srcAddr});
        res.insert_or_assign("top.ddma.td[15].destAddr", DumpEntry{top.ddma.td[15].destAddr});
        res.insert_or_assign("top.ddma.td[15].btt", DumpEntry{top.ddma.td[15].btt});
        res.insert_or_assign("top.ddma.td[15].btt.value", DumpEntry{top.ddma.td[15].btt.value});
        res.insert_or_assign("top.ddma.td[15].errors", DumpEntry{top.ddma.td[15].errors});
        res.insert_or_assign("top.ddma.td[15].errors.internalError", DumpEntry{top.ddma.td[15].errors.internalError});
        res.insert_or_assign("top.ddma.td[15].errors.slaveError", DumpEntry{top.ddma.td[15].errors.slaveError});
        res.insert_or_assign("top.ddma.td[15].errors.decodeError", DumpEntry{top.ddma.td[15].errors.decodeError});
        res.insert_or_assign("top.ddma.td[16].srcAddr", DumpEntry{top.ddma.td[16].srcAddr});
        res.insert_or_assign("top.ddma.td[16].destAddr", DumpEntry{top.ddma.td[16].destAddr});
        res.insert_or_assign("top.ddma.td[16].btt", DumpEntry{top.ddma.td[16].btt});
        res.insert_or_assign("top.ddma.td[16].btt.value", DumpEntry{top.ddma.td[16].btt.value});
        res.insert_or_assign("top.ddma.td[16].errors", DumpEntry{top.ddma.td[16].errors});
        res.insert_or_assign("top.ddma.td[16].errors.internalError", DumpEntry{top.ddma.td[16].errors.internalError});
        res.insert_or_assign("top.ddma.td[16].errors.slaveError", DumpEntry{top.ddma.td[16].errors.slaveError});
        res.insert_or_assign("top.ddma.td[16].errors.decodeError", DumpEntry{top.ddma.td[16].errors.decodeError});
        res.insert_or_assign("top.ddma.td[17].srcAddr", DumpEntry{top.ddma.td[17].srcAddr});
        res.insert_or_assign("top.ddma.td[17].destAddr", DumpEntry{top.ddma.td[17].destAddr});
        res.insert_or_assign("top.ddma.td[17].btt", DumpEntry{top.ddma.td[17].btt});
        res.insert_or_assign("top.ddma.td[17].btt.value", DumpEntry{top.ddma.td[17].btt.value});
        res.insert_or_assign("top.ddma.td[17].errors", DumpEntry{top.ddma.td[17].errors});
        res.insert_or_assign("top.ddma.td[17].errors.internalError", DumpEntry{top.ddma.td[17].errors.internalError});
        res.insert_or_assign("top.ddma.td[17].errors.slaveError", DumpEntry{top.ddma.td[17].errors.slaveError});
        res.insert_or_assign("top.ddma.td[17].errors.decodeError", DumpEntry{top.ddma.td[17].errors.decodeError});
        res.insert_or_assign("top.ddma.td[18].srcAddr", DumpEntry{top.ddma.td[18].srcAddr});
        res.insert_or_assign("top.ddma.td[18].destAddr", DumpEntry{top.ddma.td[18].destAddr});
        res.insert_or_assign("top.ddma.td[18].btt", DumpEntry{top.ddma.td[18].btt});
        res.insert_or_assign("top.ddma.td[18].btt.value", DumpEntry{top.ddma.td[18].btt.value});
        res.insert_or_assign("top.ddma.td[18].errors", DumpEntry{top.ddma.td[18].errors});
        res.insert_or_assign("top.ddma.td[18].errors.internalError", DumpEntry{top.ddma.td[18].errors.internalError});
        res.insert_or_assign("top.ddma.td[18].errors.slaveError", DumpEntry{top.ddma.td[18].errors.slaveError});
        res.insert_or_assign("top.ddma.td[18].errors.decodeError", DumpEntry{top.ddma.td[18].errors.decodeError});
        res.insert_or_assign("top.ddma.td[19].srcAddr", DumpEntry{top.ddma.td[19].srcAddr});
        res.insert_or_assign("top.ddma.td[19].destAddr", DumpEntry{top.ddma.td[19].destAddr});
        res.insert_or_assign("top.ddma.td[19].btt", DumpEntry{top.ddma.td[19].btt});
        res.insert_or_assign("top.ddma.td[19].btt.value", DumpEntry{top.ddma.td[19].btt.value});
        res.insert_or_assign("top.ddma.td[19].errors", DumpEntry{top.ddma.td[19].errors});
        res.insert_or_assign("top.ddma.td[19].errors.internalError", DumpEntry{top.ddma.td[19].errors.internalError});
        res.insert_or_assign("top.ddma.td[19].errors.slaveError", DumpEntry{top.ddma.td[19].errors.slaveError});
        res.insert_or_assign("top.ddma.td[19].errors.decodeError", DumpEntry{top.ddma.td[19].errors.decodeError});
        res.insert_or_assign("top.ddma.td[20].srcAddr", DumpEntry{top.ddma.td[20].srcAddr});
        res.insert_or_assign("top.ddma.td[20].destAddr", DumpEntry{top.ddma.td[20].destAddr});
        res.insert_or_assign("top.ddma.td[20].btt", DumpEntry{top.ddma.td[20].btt});
        res.insert_or_assign("top.ddma.td[20].btt.value", DumpEntry{top.ddma.td[20].btt.value});
        res.insert_or_assign("top.ddma.td[20].errors", DumpEntry{top.ddma.td[20].errors});
        res.insert_or_assign("top.ddma.td[20].errors.internalError", DumpEntry{top.ddma.td[20].errors.internalError});
        res.insert_or_assign("top.ddma.td[20].errors.slaveError", DumpEntry{top.ddma.td[20].errors.slaveError});
        res.insert_or_assign("top.ddma.td[20].errors.decodeError", DumpEntry{top.ddma.td[20].errors.decodeError});
        res.insert_or_assign("top.ddma.td[21].srcAddr", DumpEntry{top.ddma.td[21].srcAddr});
        res.insert_or_assign("top.ddma.td[21].destAddr", DumpEntry{top.ddma.td[21].destAddr});
        res.insert_or_assign("top.ddma.td[21].btt", DumpEntry{top.ddma.td[21].btt});
        res.insert_or_assign("top.ddma.td[21].btt.value", DumpEntry{top.ddma.td[21].btt.value});
        res.insert_or_assign("top.ddma.td[21].errors", DumpEntry{top.ddma.td[21].errors});
        res.insert_or_assign("top.ddma.td[21].errors.internalError", DumpEntry{top.ddma.td[21].errors.internalError});
        res.insert_or_assign("top.ddma.td[21].errors.slaveError", DumpEntry{top.ddma.td[21].errors.slaveError});
        res.insert_or_assign("top.ddma.td[21].errors.decodeError", DumpEntry{top.ddma.td[21].errors.decodeError});
        res.insert_or_assign("top.ddma.td[22].srcAddr", DumpEntry{top.ddma.td[22].srcAddr});
        res.insert_or_assign("top.ddma.td[22].destAddr", DumpEntry{top.ddma.td[22].destAddr});
        res.insert_or_assign("top.ddma.td[22].btt", DumpEntry{top.ddma.td[22].btt});
        res.insert_or_assign("top.ddma.td[22].btt.value", DumpEntry{top.ddma.td[22].btt.value});
        res.insert_or_assign("top.ddma.td[22].errors", DumpEntry{top.ddma.td[22].errors});
        res.insert_or_assign("top.ddma.td[22].errors.internalError", DumpEntry{top.ddma.td[22].errors.internalError});
        res.insert_or_assign("top.ddma.td[22].errors.slaveError", DumpEntry{top.ddma.td[22].errors.slaveError});
        res.insert_or_assign("top.ddma.td[22].errors.decodeError", DumpEntry{top.ddma.td[22].errors.decodeError});
        res.insert_or_assign("top.ddma.td[23].srcAddr", DumpEntry{top.ddma.td[23].srcAddr});
        res.insert_or_assign("top.ddma.td[23].destAddr", DumpEntry{top.ddma.td[23].destAddr});
        res.insert_or_assign("top.ddma.td[23].btt", DumpEntry{top.ddma.td[23].btt});
        res.insert_or_assign("top.ddma.td[23].btt.value", DumpEntry{top.ddma.td[23].btt.value});
        res.insert_or_assign("top.ddma.td[23].errors", DumpEntry{top.ddma.td[23].errors});
        res.insert_or_assign("top.ddma.td[23].errors.internalError", DumpEntry{top.ddma.td[23].errors.internalError});
        res.insert_or_assign("top.ddma.td[23].errors.slaveError", DumpEntry{top.ddma.td[23].errors.slaveError});
        res.insert_or_assign("top.ddma.td[23].errors.decodeError", DumpEntry{top.ddma.td[23].errors.decodeError});
        res.insert_or_assign("top.ddma.td[24].srcAddr", DumpEntry{top.ddma.td[24].srcAddr});
        res.insert_or_assign("top.ddma.td[24].destAddr", DumpEntry{top.ddma.td[24].destAddr});
        res.insert_or_assign("top.ddma.td[24].btt", DumpEntry{top.ddma.td[24].btt});
        res.insert_or_assign("top.ddma.td[24].btt.value", DumpEntry{top.ddma.td[24].btt.value});
        res.insert_or_assign("top.ddma.td[24].errors", DumpEntry{top.ddma.td[24].errors});
        res.insert_or_assign("top.ddma.td[24].errors.internalError", DumpEntry{top.ddma.td[24].errors.internalError});
        res.insert_or_assign("top.ddma.td[24].errors.slaveError", DumpEntry{top.ddma.td[24].errors.slaveError});
        res.insert_or_assign("top.ddma.td[24].errors.decodeError", DumpEntry{top.ddma.td[24].errors.decodeError});
        res.insert_or_assign("top.ddma.td[25].srcAddr", DumpEntry{top.ddma.td[25].srcAddr});
        res.insert_or_assign("top.ddma.td[25].destAddr", DumpEntry{top.ddma.td[25].destAddr});
        res.insert_or_assign("top.ddma.td[25].btt", DumpEntry{top.ddma.td[25].btt});
        res.insert_or_assign("top.ddma.td[25].btt.value", DumpEntry{top.ddma.td[25].btt.value});
        res.insert_or_assign("top.ddma.td[25].errors", DumpEntry{top.ddma.td[25].errors});
        res.insert_or_assign("top.ddma.td[25].errors.internalError", DumpEntry{top.ddma.td[25].errors.internalError});
        res.insert_or_assign("top.ddma.td[25].errors.slaveError", DumpEntry{top.ddma.td[25].errors.slaveError});
        res.insert_or_assign("top.ddma.td[25].errors.decodeError", DumpEntry{top.ddma.td[25].errors.decodeError});
        res.insert_or_assign("top.ddma.td[26].srcAddr", DumpEntry{top.ddma.td[26].srcAddr});
        res.insert_or_assign("top.ddma.td[26].destAddr", DumpEntry{top.ddma.td[26].destAddr});
        res.insert_or_assign("top.ddma.td[26].btt", DumpEntry{top.ddma.td[26].btt});
        res.insert_or_assign("top.ddma.td[26].btt.value", DumpEntry{top.ddma.td[26].btt.value});
        res.insert_or_assign("top.ddma.td[26].errors", DumpEntry{top.ddma.td[26].errors});
        res.insert_or_assign("top.ddma.td[26].errors.internalError", DumpEntry{top.ddma.td[26].errors.internalError});
        res.insert_or_assign("top.ddma.td[26].errors.slaveError", DumpEntry{top.ddma.td[26].errors.slaveError});
        res.insert_or_assign("top.ddma.td[26].errors.decodeError", DumpEntry{top.ddma.td[26].errors.decodeError});
        res.insert_or_assign("top.ddma.td[27].srcAddr", DumpEntry{top.ddma.td[27].srcAddr});
        res.insert_or_assign("top.ddma.td[27].destAddr", DumpEntry{top.ddma.td[27].destAddr});
        res.insert_or_assign("top.ddma.td[27].btt", DumpEntry{top.ddma.td[27].btt});
        res.insert_or_assign("top.ddma.td[27].btt.value", DumpEntry{top.ddma.td[27].btt.value});
        res.insert_or_assign("top.ddma.td[27].errors", DumpEntry{top.ddma.td[27].errors});
        res.insert_or_assign("top.ddma.td[27].errors.internalError", DumpEntry{top.ddma.td[27].errors.internalError});
        res.insert_or_assign("top.ddma.td[27].errors.slaveError", DumpEntry{top.ddma.td[27].errors.slaveError});
        res.insert_or_assign("top.ddma.td[27].errors.decodeError", DumpEntry{top.ddma.td[27].errors.decodeError});
        res.insert_or_assign("top.ddma.td[28].srcAddr", DumpEntry{top.ddma.td[28].srcAddr});
        res.insert_or_assign("top.ddma.td[28].destAddr", DumpEntry{top.ddma.td[28].destAddr});
        res.insert_or_assign("top.ddma.td[28].btt", DumpEntry{top.ddma.td[28].btt});
        res.insert_or_assign("top.ddma.td[28].btt.value", DumpEntry{top.ddma.td[28].btt.value});
        res.insert_or_assign("top.ddma.td[28].errors", DumpEntry{top.ddma.td[28].errors});
        res.insert_or_assign("top.ddma.td[28].errors.internalError", DumpEntry{top.ddma.td[28].errors.internalError});
        res.insert_or_assign("top.ddma.td[28].errors.slaveError", DumpEntry{top.ddma.td[28].errors.slaveError});
        res.insert_or_assign("top.ddma.td[28].errors.decodeError", DumpEntry{top.ddma.td[28].errors.decodeError});
        res.insert_or_assign("top.ddma.td[29].srcAddr", DumpEntry{top.ddma.td[29].srcAddr});
        res.insert_or_assign("top.ddma.td[29].destAddr", DumpEntry{top.ddma.td[29].destAddr});
        res.insert_or_assign("top.ddma.td[29].btt", DumpEntry{top.ddma.td[29].btt});
        res.insert_or_assign("top.ddma.td[29].btt.value", DumpEntry{top.ddma.td[29].btt.value});
        res.insert_or_assign("top.ddma.td[29].errors", DumpEntry{top.ddma.td[29].errors});
        res.insert_or_assign("top.ddma.td[29].errors.internalError", DumpEntry{top.ddma.td[29].errors.internalError});
        res.insert_or_assign("top.ddma.td[29].errors.slaveError", DumpEntry{top.ddma.td[29].errors.slaveError});
        res.insert_or_assign("top.ddma.td[29].errors.decodeError", DumpEntry{top.ddma.td[29].errors.decodeError});
        res.insert_or_assign("top.ddma.td[30].srcAddr", DumpEntry{top.ddma.td[30].srcAddr});
        res.insert_or_assign("top.ddma.td[30].destAddr", DumpEntry{top.ddma.td[30].destAddr});
        res.insert_or_assign("top.ddma.td[30].btt", DumpEntry{top.ddma.td[30].btt});
        res.insert_or_assign("top.ddma.td[30].btt.value", DumpEntry{top.ddma.td[30].btt.value});
        res.insert_or_assign("top.ddma.td[30].errors", DumpEntry{top.ddma.td[30].errors});
        res.insert_or_assign("top.ddma.td[30].errors.internalError", DumpEntry{top.ddma.td[30].errors.internalError});
        res.insert_or_assign("top.ddma.td[30].errors.slaveError", DumpEntry{top.ddma.td[30].errors.slaveError});
        res.insert_or_assign("top.ddma.td[30].errors.decodeError", DumpEntry{top.ddma.td[30].errors.decodeError});
        res.insert_or_assign("top.ddma.td[31].srcAddr", DumpEntry{top.ddma.td[31].srcAddr});
        res.insert_or_assign("top.ddma.td[31].destAddr", DumpEntry{top.ddma.td[31].destAddr});
        res.insert_or_assign("top.ddma.td[31].btt", DumpEntry{top.ddma.td[31].btt});
        res.insert_or_assign("top.ddma.td[31].btt.value", DumpEntry{top.ddma.td[31].btt.value});
        res.insert_or_assign("top.ddma.td[31].errors", DumpEntry{top.ddma.td[31].errors});
        res.insert_or_assign("top.ddma.td[31].errors.internalError", DumpEntry{top.ddma.td[31].errors.internalError});
        res.insert_or_assign("top.ddma.td[31].errors.slaveError", DumpEntry{top.ddma.td[31].errors.slaveError});
        res.insert_or_assign("top.ddma.td[31].errors.decodeError", DumpEntry{top.ddma.td[31].errors.decodeError});
        res.insert_or_assign("top.ddma.td[32].srcAddr", DumpEntry{top.ddma.td[32].srcAddr});
        res.insert_or_assign("top.ddma.td[32].destAddr", DumpEntry{top.ddma.td[32].destAddr});
        res.insert_or_assign("top.ddma.td[32].btt", DumpEntry{top.ddma.td[32].btt});
        res.insert_or_assign("top.ddma.td[32].btt.value", DumpEntry{top.ddma.td[32].btt.value});
        res.insert_or_assign("top.ddma.td[32].errors", DumpEntry{top.ddma.td[32].errors});
        res.insert_or_assign("top.ddma.td[32].errors.internalError", DumpEntry{top.ddma.td[32].errors.internalError});
        res.insert_or_assign("top.ddma.td[32].errors.slaveError", DumpEntry{top.ddma.td[32].errors.slaveError});
        res.insert_or_assign("top.ddma.td[32].errors.decodeError", DumpEntry{top.ddma.td[32].errors.decodeError});
        res.insert_or_assign("top.ddma.td[33].srcAddr", DumpEntry{top.ddma.td[33].srcAddr});
        res.insert_or_assign("top.ddma.td[33].destAddr", DumpEntry{top.ddma.td[33].destAddr});
        res.insert_or_assign("top.ddma.td[33].btt", DumpEntry{top.ddma.td[33].btt});
        res.insert_or_assign("top.ddma.td[33].btt.value", DumpEntry{top.ddma.td[33].btt.value});
        res.insert_or_assign("top.ddma.td[33].errors", DumpEntry{top.ddma.td[33].errors});
        res.insert_or_assign("top.ddma.td[33].errors.internalError", DumpEntry{top.ddma.td[33].errors.internalError});
        res.insert_or_assign("top.ddma.td[33].errors.slaveError", DumpEntry{top.ddma.td[33].errors.slaveError});
        res.insert_or_assign("top.ddma.td[33].errors.decodeError", DumpEntry{top.ddma.td[33].errors.decodeError});
        res.insert_or_assign("top.ddma.td[34].srcAddr", DumpEntry{top.ddma.td[34].srcAddr});
        res.insert_or_assign("top.ddma.td[34].destAddr", DumpEntry{top.ddma.td[34].destAddr});
        res.insert_or_assign("top.ddma.td[34].btt", DumpEntry{top.ddma.td[34].btt});
        res.insert_or_assign("top.ddma.td[34].btt.value", DumpEntry{top.ddma.td[34].btt.value});
        res.insert_or_assign("top.ddma.td[34].errors", DumpEntry{top.ddma.td[34].errors});
        res.insert_or_assign("top.ddma.td[34].errors.internalError", DumpEntry{top.ddma.td[34].errors.internalError});
        res.insert_or_assign("top.ddma.td[34].errors.slaveError", DumpEntry{top.ddma.td[34].errors.slaveError});
        res.insert_or_assign("top.ddma.td[34].errors.decodeError", DumpEntry{top.ddma.td[34].errors.decodeError});
        res.insert_or_assign("top.ddma.td[35].srcAddr", DumpEntry{top.ddma.td[35].srcAddr});
        res.insert_or_assign("top.ddma.td[35].destAddr", DumpEntry{top.ddma.td[35].destAddr});
        res.insert_or_assign("top.ddma.td[35].btt", DumpEntry{top.ddma.td[35].btt});
        res.insert_or_assign("top.ddma.td[35].btt.value", DumpEntry{top.ddma.td[35].btt.value});
        res.insert_or_assign("top.ddma.td[35].errors", DumpEntry{top.ddma.td[35].errors});
        res.insert_or_assign("top.ddma.td[35].errors.internalError", DumpEntry{top.ddma.td[35].errors.internalError});
        res.insert_or_assign("top.ddma.td[35].errors.slaveError", DumpEntry{top.ddma.td[35].errors.slaveError});
        res.insert_or_assign("top.ddma.td[35].errors.decodeError", DumpEntry{top.ddma.td[35].errors.decodeError});
        res.insert_or_assign("top.ddma.td[36].srcAddr", DumpEntry{top.ddma.td[36].srcAddr});
        res.insert_or_assign("top.ddma.td[36].destAddr", DumpEntry{top.ddma.td[36].destAddr});
        res.insert_or_assign("top.ddma.td[36].btt", DumpEntry{top.ddma.td[36].btt});
        res.insert_or_assign("top.ddma.td[36].btt.value", DumpEntry{top.ddma.td[36].btt.value});
        res.insert_or_assign("top.ddma.td[36].errors", DumpEntry{top.ddma.td[36].errors});
        res.insert_or_assign("top.ddma.td[36].errors.internalError", DumpEntry{top.ddma.td[36].errors.internalError});
        res.insert_or_assign("top.ddma.td[36].errors.slaveError", DumpEntry{top.ddma.td[36].errors.slaveError});
        res.insert_or_assign("top.ddma.td[36].errors.decodeError", DumpEntry{top.ddma.td[36].errors.decodeError});
        res.insert_or_assign("top.ddma.td[37].srcAddr", DumpEntry{top.ddma.td[37].srcAddr});
        res.insert_or_assign("top.ddma.td[37].destAddr", DumpEntry{top.ddma.td[37].destAddr});
        res.insert_or_assign("top.ddma.td[37].btt", DumpEntry{top.ddma.td[37].btt});
        res.insert_or_assign("top.ddma.td[37].btt.value", DumpEntry{top.ddma.td[37].btt.value});
        res.insert_or_assign("top.ddma.td[37].errors", DumpEntry{top.ddma.td[37].errors});
        res.insert_or_assign("top.ddma.td[37].errors.internalError", DumpEntry{top.ddma.td[37].errors.internalError});
        res.insert_or_assign("top.ddma.td[37].errors.slaveError", DumpEntry{top.ddma.td[37].errors.slaveError});
        res.insert_or_assign("top.ddma.td[37].errors.decodeError", DumpEntry{top.ddma.td[37].errors.decodeError});
        res.insert_or_assign("top.ddma.td[38].srcAddr", DumpEntry{top.ddma.td[38].srcAddr});
        res.insert_or_assign("top.ddma.td[38].destAddr", DumpEntry{top.ddma.td[38].destAddr});
        res.insert_or_assign("top.ddma.td[38].btt", DumpEntry{top.ddma.td[38].btt});
        res.insert_or_assign("top.ddma.td[38].btt.value", DumpEntry{top.ddma.td[38].btt.value});
        res.insert_or_assign("top.ddma.td[38].errors", DumpEntry{top.ddma.td[38].errors});
        res.insert_or_assign("top.ddma.td[38].errors.internalError", DumpEntry{top.ddma.td[38].errors.internalError});
        res.insert_or_assign("top.ddma.td[38].errors.slaveError", DumpEntry{top.ddma.td[38].errors.slaveError});
        res.insert_or_assign("top.ddma.td[38].errors.decodeError", DumpEntry{top.ddma.td[38].errors.decodeError});
        res.insert_or_assign("top.ddma.td[39].srcAddr", DumpEntry{top.ddma.td[39].srcAddr});
        res.insert_or_assign("top.ddma.td[39].destAddr", DumpEntry{top.ddma.td[39].destAddr});
        res.insert_or_assign("top.ddma.td[39].btt", DumpEntry{top.ddma.td[39].btt});
        res.insert_or_assign("top.ddma.td[39].btt.value", DumpEntry{top.ddma.td[39].btt.value});
        res.insert_or_assign("top.ddma.td[39].errors", DumpEntry{top.ddma.td[39].errors});
        res.insert_or_assign("top.ddma.td[39].errors.internalError", DumpEntry{top.ddma.td[39].errors.internalError});
        res.insert_or_assign("top.ddma.td[39].errors.slaveError", DumpEntry{top.ddma.td[39].errors.slaveError});
        res.insert_or_assign("top.ddma.td[39].errors.decodeError", DumpEntry{top.ddma.td[39].errors.decodeError});
        res.insert_or_assign("top.ddma.td[40].srcAddr", DumpEntry{top.ddma.td[40].srcAddr});
        res.insert_or_assign("top.ddma.td[40].destAddr", DumpEntry{top.ddma.td[40].destAddr});
        res.insert_or_assign("top.ddma.td[40].btt", DumpEntry{top.ddma.td[40].btt});
        res.insert_or_assign("top.ddma.td[40].btt.value", DumpEntry{top.ddma.td[40].btt.value});
        res.insert_or_assign("top.ddma.td[40].errors", DumpEntry{top.ddma.td[40].errors});
        res.insert_or_assign("top.ddma.td[40].errors.internalError", DumpEntry{top.ddma.td[40].errors.internalError});
        res.insert_or_assign("top.ddma.td[40].errors.slaveError", DumpEntry{top.ddma.td[40].errors.slaveError});
        res.insert_or_assign("top.ddma.td[40].errors.decodeError", DumpEntry{top.ddma.td[40].errors.decodeError});
        res.insert_or_assign("top.ddma.td[41].srcAddr", DumpEntry{top.ddma.td[41].srcAddr});
        res.insert_or_assign("top.ddma.td[41].destAddr", DumpEntry{top.ddma.td[41].destAddr});
        res.insert_or_assign("top.ddma.td[41].btt", DumpEntry{top.ddma.td[41].btt});
        res.insert_or_assign("top.ddma.td[41].btt.value", DumpEntry{top.ddma.td[41].btt.value});
        res.insert_or_assign("top.ddma.td[41].errors", DumpEntry{top.ddma.td[41].errors});
        res.insert_or_assign("top.ddma.td[41].errors.internalError", DumpEntry{top.ddma.td[41].errors.internalError});
        res.insert_or_assign("top.ddma.td[41].errors.slaveError", DumpEntry{top.ddma.td[41].errors.slaveError});
        res.insert_or_assign("top.ddma.td[41].errors.decodeError", DumpEntry{top.ddma.td[41].errors.decodeError});
        res.insert_or_assign("top.ddma.td[42].srcAddr", DumpEntry{top.ddma.td[42].srcAddr});
        res.insert_or_assign("top.ddma.td[42].destAddr", DumpEntry{top.ddma.td[42].destAddr});
        res.insert_or_assign("top.ddma.td[42].btt", DumpEntry{top.ddma.td[42].btt});
        res.insert_or_assign("top.ddma.td[42].btt.value", DumpEntry{top.ddma.td[42].btt.value});
        res.insert_or_assign("top.ddma.td[42].errors", DumpEntry{top.ddma.td[42].errors});
        res.insert_or_assign("top.ddma.td[42].errors.internalError", DumpEntry{top.ddma.td[42].errors.internalError});
        res.insert_or_assign("top.ddma.td[42].errors.slaveError", DumpEntry{top.ddma.td[42].errors.slaveError});
        res.insert_or_assign("top.ddma.td[42].errors.decodeError", DumpEntry{top.ddma.td[42].errors.decodeError});
        res.insert_or_assign("top.ddma.td[43].srcAddr", DumpEntry{top.ddma.td[43].srcAddr});
        res.insert_or_assign("top.ddma.td[43].destAddr", DumpEntry{top.ddma.td[43].destAddr});
        res.insert_or_assign("top.ddma.td[43].btt", DumpEntry{top.ddma.td[43].btt});
        res.insert_or_assign("top.ddma.td[43].btt.value", DumpEntry{top.ddma.td[43].btt.value});
        res.insert_or_assign("top.ddma.td[43].errors", DumpEntry{top.ddma.td[43].errors});
        res.insert_or_assign("top.ddma.td[43].errors.internalError", DumpEntry{top.ddma.td[43].errors.internalError});
        res.insert_or_assign("top.ddma.td[43].errors.slaveError", DumpEntry{top.ddma.td[43].errors.slaveError});
        res.insert_or_assign("top.ddma.td[43].errors.decodeError", DumpEntry{top.ddma.td[43].errors.decodeError});
        res.insert_or_assign("top.ddma.td[44].srcAddr", DumpEntry{top.ddma.td[44].srcAddr});
        res.insert_or_assign("top.ddma.td[44].destAddr", DumpEntry{top.ddma.td[44].destAddr});
        res.insert_or_assign("top.ddma.td[44].btt", DumpEntry{top.ddma.td[44].btt});
        res.insert_or_assign("top.ddma.td[44].btt.value", DumpEntry{top.ddma.td[44].btt.value});
        res.insert_or_assign("top.ddma.td[44].errors", DumpEntry{top.ddma.td[44].errors});
        res.insert_or_assign("top.ddma.td[44].errors.internalError", DumpEntry{top.ddma.td[44].errors.internalError});
        res.insert_or_assign("top.ddma.td[44].errors.slaveError", DumpEntry{top.ddma.td[44].errors.slaveError});
        res.insert_or_assign("top.ddma.td[44].errors.decodeError", DumpEntry{top.ddma.td[44].errors.decodeError});
        res.insert_or_assign("top.ddma.td[45].srcAddr", DumpEntry{top.ddma.td[45].srcAddr});
        res.insert_or_assign("top.ddma.td[45].destAddr", DumpEntry{top.ddma.td[45].destAddr});
        res.insert_or_assign("top.ddma.td[45].btt", DumpEntry{top.ddma.td[45].btt});
        res.insert_or_assign("top.ddma.td[45].btt.value", DumpEntry{top.ddma.td[45].btt.value});
        res.insert_or_assign("top.ddma.td[45].errors", DumpEntry{top.ddma.td[45].errors});
        res.insert_or_assign("top.ddma.td[45].errors.internalError", DumpEntry{top.ddma.td[45].errors.internalError});
        res.insert_or_assign("top.ddma.td[45].errors.slaveError", DumpEntry{top.ddma.td[45].errors.slaveError});
        res.insert_or_assign("top.ddma.td[45].errors.decodeError", DumpEntry{top.ddma.td[45].errors.decodeError});
        res.insert_or_assign("top.ddma.td[46].srcAddr", DumpEntry{top.ddma.td[46].srcAddr});
        res.insert_or_assign("top.ddma.td[46].destAddr", DumpEntry{top.ddma.td[46].destAddr});
        res.insert_or_assign("top.ddma.td[46].btt", DumpEntry{top.ddma.td[46].btt});
        res.insert_or_assign("top.ddma.td[46].btt.value", DumpEntry{top.ddma.td[46].btt.value});
        res.insert_or_assign("top.ddma.td[46].errors", DumpEntry{top.ddma.td[46].errors});
        res.insert_or_assign("top.ddma.td[46].errors.internalError", DumpEntry{top.ddma.td[46].errors.internalError});
        res.insert_or_assign("top.ddma.td[46].errors.slaveError", DumpEntry{top.ddma.td[46].errors.slaveError});
        res.insert_or_assign("top.ddma.td[46].errors.decodeError", DumpEntry{top.ddma.td[46].errors.decodeError});
        res.insert_or_assign("top.ddma.td[47].srcAddr", DumpEntry{top.ddma.td[47].srcAddr});
        res.insert_or_assign("top.ddma.td[47].destAddr", DumpEntry{top.ddma.td[47].destAddr});
        res.insert_or_assign("top.ddma.td[47].btt", DumpEntry{top.ddma.td[47].btt});
        res.insert_or_assign("top.ddma.td[47].btt.value", DumpEntry{top.ddma.td[47].btt.value});
        res.insert_or_assign("top.ddma.td[47].errors", DumpEntry{top.ddma.td[47].errors});
        res.insert_or_assign("top.ddma.td[47].errors.internalError", DumpEntry{top.ddma.td[47].errors.internalError});
        res.insert_or_assign("top.ddma.td[47].errors.slaveError", DumpEntry{top.ddma.td[47].errors.slaveError});
        res.insert_or_assign("top.ddma.td[47].errors.decodeError", DumpEntry{top.ddma.td[47].errors.decodeError});
        res.insert_or_assign("top.ddma.td[48].srcAddr", DumpEntry{top.ddma.td[48].srcAddr});
        res.insert_or_assign("top.ddma.td[48].destAddr", DumpEntry{top.ddma.td[48].destAddr});
        res.insert_or_assign("top.ddma.td[48].btt", DumpEntry{top.ddma.td[48].btt});
        res.insert_or_assign("top.ddma.td[48].btt.value", DumpEntry{top.ddma.td[48].btt.value});
        res.insert_or_assign("top.ddma.td[48].errors", DumpEntry{top.ddma.td[48].errors});
        res.insert_or_assign("top.ddma.td[48].errors.internalError", DumpEntry{top.ddma.td[48].errors.internalError});
        res.insert_or_assign("top.ddma.td[48].errors.slaveError", DumpEntry{top.ddma.td[48].errors.slaveError});
        res.insert_or_assign("top.ddma.td[48].errors.decodeError", DumpEntry{top.ddma.td[48].errors.decodeError});
        res.insert_or_assign("top.ddma.td[49].srcAddr", DumpEntry{top.ddma.td[49].srcAddr});
        res.insert_or_assign("top.ddma.td[49].destAddr", DumpEntry{top.ddma.td[49].destAddr});
        res.insert_or_assign("top.ddma.td[49].btt", DumpEntry{top.ddma.td[49].btt});
        res.insert_or_assign("top.ddma.td[49].btt.value", DumpEntry{top.ddma.td[49].btt.value});
        res.insert_or_assign("top.ddma.td[49].errors", DumpEntry{top.ddma.td[49].errors});
        res.insert_or_assign("top.ddma.td[49].errors.internalError", DumpEntry{top.ddma.td[49].errors.internalError});
        res.insert_or_assign("top.ddma.td[49].errors.slaveError", DumpEntry{top.ddma.td[49].errors.slaveError});
        res.insert_or_assign("top.ddma.td[49].errors.decodeError", DumpEntry{top.ddma.td[49].errors.decodeError});
        res.insert_or_assign("top.ddma.td[50].srcAddr", DumpEntry{top.ddma.td[50].srcAddr});
        res.insert_or_assign("top.ddma.td[50].destAddr", DumpEntry{top.ddma.td[50].destAddr});
        res.insert_or_assign("top.ddma.td[50].btt", DumpEntry{top.ddma.td[50].btt});
        res.insert_or_assign("top.ddma.td[50].btt.value", DumpEntry{top.ddma.td[50].btt.value});
        res.insert_or_assign("top.ddma.td[50].errors", DumpEntry{top.ddma.td[50].errors});
        res.insert_or_assign("top.ddma.td[50].errors.internalError", DumpEntry{top.ddma.td[50].errors.internalError});
        res.insert_or_assign("top.ddma.td[50].errors.slaveError", DumpEntry{top.ddma.td[50].errors.slaveError});
        res.insert_or_assign("top.ddma.td[50].errors.decodeError", DumpEntry{top.ddma.td[50].errors.decodeError});
        res.insert_or_assign("top.ddma.td[51].srcAddr", DumpEntry{top.ddma.td[51].srcAddr});
        res.insert_or_assign("top.ddma.td[51].destAddr", DumpEntry{top.ddma.td[51].destAddr});
        res.insert_or_assign("top.ddma.td[51].btt", DumpEntry{top.ddma.td[51].btt});
        res.insert_or_assign("top.ddma.td[51].btt.value", DumpEntry{top.ddma.td[51].btt.value});
        res.insert_or_assign("top.ddma.td[51].errors", DumpEntry{top.ddma.td[51].errors});
        res.insert_or_assign("top.ddma.td[51].errors.internalError", DumpEntry{top.ddma.td[51].errors.internalError});
        res.insert_or_assign("top.ddma.td[51].errors.slaveError", DumpEntry{top.ddma.td[51].errors.slaveError});
        res.insert_or_assign("top.ddma.td[51].errors.decodeError", DumpEntry{top.ddma.td[51].errors.decodeError});
        res.insert_or_assign("top.ddma.td[52].srcAddr", DumpEntry{top.ddma.td[52].srcAddr});
        res.insert_or_assign("top.ddma.td[52].destAddr", DumpEntry{top.ddma.td[52].destAddr});
        res.insert_or_assign("top.ddma.td[52].btt", DumpEntry{top.ddma.td[52].btt});
        res.insert_or_assign("top.ddma.td[52].btt.value", DumpEntry{top.ddma.td[52].btt.value});
        res.insert_or_assign("top.ddma.td[52].errors", DumpEntry{top.ddma.td[52].errors});
        res.insert_or_assign("top.ddma.td[52].errors.internalError", DumpEntry{top.ddma.td[52].errors.internalError});
        res.insert_or_assign("top.ddma.td[52].errors.slaveError", DumpEntry{top.ddma.td[52].errors.slaveError});
        res.insert_or_assign("top.ddma.td[52].errors.decodeError", DumpEntry{top.ddma.td[52].errors.decodeError});
        res.insert_or_assign("top.ddma.td[53].srcAddr", DumpEntry{top.ddma.td[53].srcAddr});
        res.insert_or_assign("top.ddma.td[53].destAddr", DumpEntry{top.ddma.td[53].destAddr});
        res.insert_or_assign("top.ddma.td[53].btt", DumpEntry{top.ddma.td[53].btt});
        res.insert_or_assign("top.ddma.td[53].btt.value", DumpEntry{top.ddma.td[53].btt.value});
        res.insert_or_assign("top.ddma.td[53].errors", DumpEntry{top.ddma.td[53].errors});
        res.insert_or_assign("top.ddma.td[53].errors.internalError", DumpEntry{top.ddma.td[53].errors.internalError});
        res.insert_or_assign("top.ddma.td[53].errors.slaveError", DumpEntry{top.ddma.td[53].errors.slaveError});
        res.insert_or_assign("top.ddma.td[53].errors.decodeError", DumpEntry{top.ddma.td[53].errors.decodeError});
        res.insert_or_assign("top.ddma.td[54].srcAddr", DumpEntry{top.ddma.td[54].srcAddr});
        res.insert_or_assign("top.ddma.td[54].destAddr", DumpEntry{top.ddma.td[54].destAddr});
        res.insert_or_assign("top.ddma.td[54].btt", DumpEntry{top.ddma.td[54].btt});
        res.insert_or_assign("top.ddma.td[54].btt.value", DumpEntry{top.ddma.td[54].btt.value});
        res.insert_or_assign("top.ddma.td[54].errors", DumpEntry{top.ddma.td[54].errors});
        res.insert_or_assign("top.ddma.td[54].errors.internalError", DumpEntry{top.ddma.td[54].errors.internalError});
        res.insert_or_assign("top.ddma.td[54].errors.slaveError", DumpEntry{top.ddma.td[54].errors.slaveError});
        res.insert_or_assign("top.ddma.td[54].errors.decodeError", DumpEntry{top.ddma.td[54].errors.decodeError});
        res.insert_or_assign("top.ddma.td[55].srcAddr", DumpEntry{top.ddma.td[55].srcAddr});
        res.insert_or_assign("top.ddma.td[55].destAddr", DumpEntry{top.ddma.td[55].destAddr});
        res.insert_or_assign("top.ddma.td[55].btt", DumpEntry{top.ddma.td[55].btt});
        res.insert_or_assign("top.ddma.td[55].btt.value", DumpEntry{top.ddma.td[55].btt.value});
        res.insert_or_assign("top.ddma.td[55].errors", DumpEntry{top.ddma.td[55].errors});
        res.insert_or_assign("top.ddma.td[55].errors.internalError", DumpEntry{top.ddma.td[55].errors.internalError});
        res.insert_or_assign("top.ddma.td[55].errors.slaveError", DumpEntry{top.ddma.td[55].errors.slaveError});
        res.insert_or_assign("top.ddma.td[55].errors.decodeError", DumpEntry{top.ddma.td[55].errors.decodeError});
        res.insert_or_assign("top.ddma.td[56].srcAddr", DumpEntry{top.ddma.td[56].srcAddr});
        res.insert_or_assign("top.ddma.td[56].destAddr", DumpEntry{top.ddma.td[56].destAddr});
        res.insert_or_assign("top.ddma.td[56].btt", DumpEntry{top.ddma.td[56].btt});
        res.insert_or_assign("top.ddma.td[56].btt.value", DumpEntry{top.ddma.td[56].btt.value});
        res.insert_or_assign("top.ddma.td[56].errors", DumpEntry{top.ddma.td[56].errors});
        res.insert_or_assign("top.ddma.td[56].errors.internalError", DumpEntry{top.ddma.td[56].errors.internalError});
        res.insert_or_assign("top.ddma.td[56].errors.slaveError", DumpEntry{top.ddma.td[56].errors.slaveError});
        res.insert_or_assign("top.ddma.td[56].errors.decodeError", DumpEntry{top.ddma.td[56].errors.decodeError});
        res.insert_or_assign("top.ddma.td[57].srcAddr", DumpEntry{top.ddma.td[57].srcAddr});
        res.insert_or_assign("top.ddma.td[57].destAddr", DumpEntry{top.ddma.td[57].destAddr});
        res.insert_or_assign("top.ddma.td[57].btt", DumpEntry{top.ddma.td[57].btt});
        res.insert_or_assign("top.ddma.td[57].btt.value", DumpEntry{top.ddma.td[57].btt.value});
        res.insert_or_assign("top.ddma.td[57].errors", DumpEntry{top.ddma.td[57].errors});
        res.insert_or_assign("top.ddma.td[57].errors.internalError", DumpEntry{top.ddma.td[57].errors.internalError});
        res.insert_or_assign("top.ddma.td[57].errors.slaveError", DumpEntry{top.ddma.td[57].errors.slaveError});
        res.insert_or_assign("top.ddma.td[57].errors.decodeError", DumpEntry{top.ddma.td[57].errors.decodeError});
        res.insert_or_assign("top.ddma.td[58].srcAddr", DumpEntry{top.ddma.td[58].srcAddr});
        res.insert_or_assign("top.ddma.td[58].destAddr", DumpEntry{top.ddma.td[58].destAddr});
        res.insert_or_assign("top.ddma.td[58].btt", DumpEntry{top.ddma.td[58].btt});
        res.insert_or_assign("top.ddma.td[58].btt.value", DumpEntry{top.ddma.td[58].btt.value});
        res.insert_or_assign("top.ddma.td[58].errors", DumpEntry{top.ddma.td[58].errors});
        res.insert_or_assign("top.ddma.td[58].errors.internalError", DumpEntry{top.ddma.td[58].errors.internalError});
        res.insert_or_assign("top.ddma.td[58].errors.slaveError", DumpEntry{top.ddma.td[58].errors.slaveError});
        res.insert_or_assign("top.ddma.td[58].errors.decodeError", DumpEntry{top.ddma.td[58].errors.decodeError});
        res.insert_or_assign("top.ddma.td[59].srcAddr", DumpEntry{top.ddma.td[59].srcAddr});
        res.insert_or_assign("top.ddma.td[59].destAddr", DumpEntry{top.ddma.td[59].destAddr});
        res.insert_or_assign("top.ddma.td[59].btt", DumpEntry{top.ddma.td[59].btt});
        res.insert_or_assign("top.ddma.td[59].btt.value", DumpEntry{top.ddma.td[59].btt.value});
        res.insert_or_assign("top.ddma.td[59].errors", DumpEntry{top.ddma.td[59].errors});
        res.insert_or_assign("top.ddma.td[59].errors.internalError", DumpEntry{top.ddma.td[59].errors.internalError});
        res.insert_or_assign("top.ddma.td[59].errors.slaveError", DumpEntry{top.ddma.td[59].errors.slaveError});
        res.insert_or_assign("top.ddma.td[59].errors.decodeError", DumpEntry{top.ddma.td[59].errors.decodeError});
        res.insert_or_assign("top.ddma.td[60].srcAddr", DumpEntry{top.ddma.td[60].srcAddr});
        res.insert_or_assign("top.ddma.td[60].destAddr", DumpEntry{top.ddma.td[60].destAddr});
        res.insert_or_assign("top.ddma.td[60].btt", DumpEntry{top.ddma.td[60].btt});
        res.insert_or_assign("top.ddma.td[60].btt.value", DumpEntry{top.ddma.td[60].btt.value});
        res.insert_or_assign("top.ddma.td[60].errors", DumpEntry{top.ddma.td[60].errors});
        res.insert_or_assign("top.ddma.td[60].errors.internalError", DumpEntry{top.ddma.td[60].errors.internalError});
        res.insert_or_assign("top.ddma.td[60].errors.slaveError", DumpEntry{top.ddma.td[60].errors.slaveError});
        res.insert_or_assign("top.ddma.td[60].errors.decodeError", DumpEntry{top.ddma.td[60].errors.decodeError});
        res.insert_or_assign("top.ddma.td[61].srcAddr", DumpEntry{top.ddma.td[61].srcAddr});
        res.insert_or_assign("top.ddma.td[61].destAddr", DumpEntry{top.ddma.td[61].destAddr});
        res.insert_or_assign("top.ddma.td[61].btt", DumpEntry{top.ddma.td[61].btt});
        res.insert_or_assign("top.ddma.td[61].btt.value", DumpEntry{top.ddma.td[61].btt.value});
        res.insert_or_assign("top.ddma.td[61].errors", DumpEntry{top.ddma.td[61].errors});
        res.insert_or_assign("top.ddma.td[61].errors.internalError", DumpEntry{top.ddma.td[61].errors.internalError});
        res.insert_or_assign("top.ddma.td[61].errors.slaveError", DumpEntry{top.ddma.td[61].errors.slaveError});
        res.insert_or_assign("top.ddma.td[61].errors.decodeError", DumpEntry{top.ddma.td[61].errors.decodeError});
        res.insert_or_assign("top.ddma.td[62].srcAddr", DumpEntry{top.ddma.td[62].srcAddr});
        res.insert_or_assign("top.ddma.td[62].destAddr", DumpEntry{top.ddma.td[62].destAddr});
        res.insert_or_assign("top.ddma.td[62].btt", DumpEntry{top.ddma.td[62].btt});
        res.insert_or_assign("top.ddma.td[62].btt.value", DumpEntry{top.ddma.td[62].btt.value});
        res.insert_or_assign("top.ddma.td[62].errors", DumpEntry{top.ddma.td[62].errors});
        res.insert_or_assign("top.ddma.td[62].errors.internalError", DumpEntry{top.ddma.td[62].errors.internalError});
        res.insert_or_assign("top.ddma.td[62].errors.slaveError", DumpEntry{top.ddma.td[62].errors.slaveError});
        res.insert_or_assign("top.ddma.td[62].errors.decodeError", DumpEntry{top.ddma.td[62].errors.decodeError});
        res.insert_or_assign("top.ddma.td[63].srcAddr", DumpEntry{top.ddma.td[63].srcAddr});
        res.insert_or_assign("top.ddma.td[63].destAddr", DumpEntry{top.ddma.td[63].destAddr});
        res.insert_or_assign("top.ddma.td[63].btt", DumpEntry{top.ddma.td[63].btt});
        res.insert_or_assign("top.ddma.td[63].btt.value", DumpEntry{top.ddma.td[63].btt.value});
        res.insert_or_assign("top.ddma.td[63].errors", DumpEntry{top.ddma.td[63].errors});
        res.insert_or_assign("top.ddma.td[63].errors.internalError", DumpEntry{top.ddma.td[63].errors.internalError});
        res.insert_or_assign("top.ddma.td[63].errors.slaveError", DumpEntry{top.ddma.td[63].errors.slaveError});
        res.insert_or_assign("top.ddma.td[63].errors.decodeError", DumpEntry{top.ddma.td[63].errors.decodeError});
        res.insert_or_assign("top.syncTime.s", DumpEntry{top.syncTime.s});
        res.insert_or_assign("top.syncTime.sc", DumpEntry{top.syncTime.sc});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl", DumpEntry{top.syncTrig[0].stg.ctrl});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl.periodic", DumpEntry{top.syncTrig[0].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[0].stg.ctrl.resync", DumpEntry{top.syncTrig[0].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[0].stg.delaySc", DumpEntry{top.syncTrig[0].stg.delaySc});
        res.insert_or_assign("top.syncTrig[0].stg.periodSc", DumpEntry{top.syncTrig[0].stg.periodSc});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl", DumpEntry{top.syncTrig[1].stg.ctrl});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl.periodic", DumpEntry{top.syncTrig[1].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[1].stg.ctrl.resync", DumpEntry{top.syncTrig[1].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[1].stg.delaySc", DumpEntry{top.syncTrig[1].stg.delaySc});
        res.insert_or_assign("top.syncTrig[1].stg.periodSc", DumpEntry{top.syncTrig[1].stg.periodSc});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl", DumpEntry{top.syncTrig[2].stg.ctrl});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl.periodic", DumpEntry{top.syncTrig[2].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[2].stg.ctrl.resync", DumpEntry{top.syncTrig[2].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[2].stg.delaySc", DumpEntry{top.syncTrig[2].stg.delaySc});
        res.insert_or_assign("top.syncTrig[2].stg.periodSc", DumpEntry{top.syncTrig[2].stg.periodSc});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl", DumpEntry{top.syncTrig[3].stg.ctrl});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl.periodic", DumpEntry{top.syncTrig[3].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[3].stg.ctrl.resync", DumpEntry{top.syncTrig[3].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[3].stg.delaySc", DumpEntry{top.syncTrig[3].stg.delaySc});
        res.insert_or_assign("top.syncTrig[3].stg.periodSc", DumpEntry{top.syncTrig[3].stg.periodSc});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl", DumpEntry{top.syncTrig[4].stg.ctrl});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl.periodic", DumpEntry{top.syncTrig[4].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[4].stg.ctrl.resync", DumpEntry{top.syncTrig[4].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[4].stg.delaySc", DumpEntry{top.syncTrig[4].stg.delaySc});
        res.insert_or_assign("top.syncTrig[4].stg.periodSc", DumpEntry{top.syncTrig[4].stg.periodSc});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl", DumpEntry{top.syncTrig[5].stg.ctrl});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl.periodic", DumpEntry{top.syncTrig[5].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[5].stg.ctrl.resync", DumpEntry{top.syncTrig[5].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[5].stg.delaySc", DumpEntry{top.syncTrig[5].stg.delaySc});
        res.insert_or_assign("top.syncTrig[5].stg.periodSc", DumpEntry{top.syncTrig[5].stg.periodSc});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl", DumpEntry{top.syncTrig[6].stg.ctrl});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl.periodic", DumpEntry{top.syncTrig[6].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[6].stg.ctrl.resync", DumpEntry{top.syncTrig[6].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[6].stg.delaySc", DumpEntry{top.syncTrig[6].stg.delaySc});
        res.insert_or_assign("top.syncTrig[6].stg.periodSc", DumpEntry{top.syncTrig[6].stg.periodSc});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl", DumpEntry{top.syncTrig[7].stg.ctrl});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl.periodic", DumpEntry{top.syncTrig[7].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[7].stg.ctrl.resync", DumpEntry{top.syncTrig[7].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[7].stg.delaySc", DumpEntry{top.syncTrig[7].stg.delaySc});
        res.insert_or_assign("top.syncTrig[7].stg.periodSc", DumpEntry{top.syncTrig[7].stg.periodSc});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl", DumpEntry{top.syncTrig[8].stg.ctrl});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl.periodic", DumpEntry{top.syncTrig[8].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[8].stg.ctrl.resync", DumpEntry{top.syncTrig[8].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[8].stg.delaySc", DumpEntry{top.syncTrig[8].stg.delaySc});
        res.insert_or_assign("top.syncTrig[8].stg.periodSc", DumpEntry{top.syncTrig[8].stg.periodSc});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl", DumpEntry{top.syncTrig[9].stg.ctrl});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl.periodic", DumpEntry{top.syncTrig[9].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[9].stg.ctrl.resync", DumpEntry{top.syncTrig[9].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[9].stg.delaySc", DumpEntry{top.syncTrig[9].stg.delaySc});
        res.insert_or_assign("top.syncTrig[9].stg.periodSc", DumpEntry{top.syncTrig[9].stg.periodSc});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl", DumpEntry{top.syncTrig[10].stg.ctrl});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl.periodic", DumpEntry{top.syncTrig[10].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[10].stg.ctrl.resync", DumpEntry{top.syncTrig[10].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[10].stg.delaySc", DumpEntry{top.syncTrig[10].stg.delaySc});
        res.insert_or_assign("top.syncTrig[10].stg.periodSc", DumpEntry{top.syncTrig[10].stg.periodSc});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl", DumpEntry{top.syncTrig[11].stg.ctrl});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl.periodic", DumpEntry{top.syncTrig[11].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[11].stg.ctrl.resync", DumpEntry{top.syncTrig[11].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[11].stg.delaySc", DumpEntry{top.syncTrig[11].stg.delaySc});
        res.insert_or_assign("top.syncTrig[11].stg.periodSc", DumpEntry{top.syncTrig[11].stg.periodSc});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl", DumpEntry{top.syncTrig[12].stg.ctrl});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl.periodic", DumpEntry{top.syncTrig[12].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[12].stg.ctrl.resync", DumpEntry{top.syncTrig[12].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[12].stg.delaySc", DumpEntry{top.syncTrig[12].stg.delaySc});
        res.insert_or_assign("top.syncTrig[12].stg.periodSc", DumpEntry{top.syncTrig[12].stg.periodSc});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl", DumpEntry{top.syncTrig[13].stg.ctrl});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl.periodic", DumpEntry{top.syncTrig[13].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[13].stg.ctrl.resync", DumpEntry{top.syncTrig[13].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[13].stg.delaySc", DumpEntry{top.syncTrig[13].stg.delaySc});
        res.insert_or_assign("top.syncTrig[13].stg.periodSc", DumpEntry{top.syncTrig[13].stg.periodSc});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl", DumpEntry{top.syncTrig[14].stg.ctrl});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl.periodic", DumpEntry{top.syncTrig[14].stg.ctrl.periodic});
        res.insert_or_assign("top.syncTrig[14].stg.ctrl.resync", DumpEntry{top.syncTrig[14].stg.ctrl.resync});
        res.insert_or_assign("top.syncTrig[14].stg.delaySc", DumpEntry{top.syncTrig[14].stg.delaySc});
        res.insert_or_assign("top.syncTrig[14].stg.periodSc", DumpEntry{top.syncTrig[14].stg.periodSc});
        return res;
    }
}
